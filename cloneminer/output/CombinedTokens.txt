   No.   File  Line   Col. Cls.  Mthd.  Rep.  Tok.     Text
     0     0     1     1    -1    -1     0     121  STARTFILE C:\Users\RA\javasrc\java\nio\Bits.java
     1     0    26     9    -1    -1     0     111  java.nio
     2     0    26    17    -1    -1     0     102  ;
     3     0    28     1    -1    -1     1      49  import
     4     0    28     8    -1    -1     1     111  java.security.AccessController
     5     0    28    38    -1    -1     1     102  ;
     6     0    29     1    -1    -1     1      49  import
     7     0    29     8    -1    -1     1     111  java.security.PrivilegedAction
     8     0    29    38    -1    -1     1     102  ;
     9     0    30     1    -1    -1     1      49  import
    10     0    30     8    -1    -1     1     111  sun.misc.Unsafe
    11     0    30    23    -1    -1     1     102  ;
    12     0    31     1    -1    -1     1      49  import
    13     0    31     8    -1    -1     1     111  sun.misc.VM
    14     0    31    19    -1    -1     1     102  ;
    15     0    37     1     0    -1     0     122  STARTCLASS
    16     0    37     1     0    -1     0      24  class
    17     0    37     7     0    -1     0     111  Bits
    18     0    37    12     0    -1     0      63  {
    19     0    37    12     0     0     0     123  STARTMETHOD
    20     0    39     5     0     0     0      41  private
    21     0    39    13     0     0     0     111  Bits
    22     0    39    17     0     0     0      59  (
    23     0    39    18     0     0     0      60  )
    24     0    39    20     0     0     0      63  {
    25     0    39    22     0     0     1      64  }
    26     0    39    22     0     0     0     124  ENDMETHOD
    27     0    39    22     0     1     0     125  STARTMETHOD
    28     0    44     5     0     1     0      45  static
    29     0    44    18     0     1     0     111  swap
    30     0    44    22     0     1     0      59  (
    31     0    44    29     0     1     0     111  x
    32     0    44    30     0     1     0      60  )
    33     0    44    32     0     1     0      63  {
    34     0    45     9     0     1     0      19  return
    35     0    45    16     0     1     0      59  (
    36     0    45    22     0     1     0      60  )
    37     0    45    23     0     1     0      59  (
    38     0    45    24     0     1     0      59  (
    39     0    45    25     0     1     0     111  x
    40     0    45    27     0     1     0      90  <<
    41     0    45    30     0     1     0     112  8
    42     0    45    31     0     1     0      60  )
    43     0    45    33     0     1     0      96  |
    44     0    46    24     0     1     0      59  (
    45     0    46    25     0     1     0      59  (
    46     0    46    26     0     1     0      40  char
    47     0    46    30     0     1     0      60  )
    48     0    46    31     0     1     0     111  x
    49     0    46    33     0     1     0      86  >>>
    50     0    46    37     0     1     0     112  8
    51     0    46    38     0     1     0      60  )
    52     0    46    39     0     1     0      60  )
    53     0    46    40     0     1     0     102  ;
    54     0    47     5     0     1     1      64  }
    55     0    47     5     0     1     0     126  ENDMETHOD
    56     0    47     5     0     2     0     127  STARTMETHOD
    57     0    49     5     0     2     0      45  static
    58     0    49    12     0     2     0      40  char
    59     0    49    17     0     2     0     111  swap
    60     0    49    21     0     2     0      59  (
    61     0    49    22     0     2     0      40  char
    62     0    49    27     0     2     0     111  x
    63     0    49    28     0     2     0      60  )
    64     0    49    30     0     2     0      63  {
    65     0    50     9     0     2     0      19  return
    66     0    50    16     0     2     0      59  (
    67     0    50    17     0     2     0      40  char
    68     0    50    21     0     2     0      60  )
    69     0    50    22     0     2     0      59  (
    70     0    50    23     0     2     0      59  (
    71     0    50    24     0     2     0     111  x
    72     0    50    26     0     2     0      90  <<
    73     0    50    29     0     2     0     112  8
    74     0    50    30     0     2     0      60  )
    75     0    50    32     0     2     0      96  |
    76     0    51    23     0     2     0      59  (
    77     0    51    24     0     2     0     111  x
    78     0    51    26     0     2     0      86  >>>
    79     0    51    30     0     2     0     112  8
    80     0    51    31     0     2     0      60  )
    81     0    51    32     0     2     0      60  )
    82     0    51    33     0     2     0     102  ;
    83     0    52     5     0     2     1      64  }
    84     0    52     5     0     2     0     128  ENDMETHOD
    85     0    52     5     0     3     0     129  STARTMETHOD
    86     0    54     5     0     3     0      45  static
    87     0    54    12     0     3     0      36  int
    88     0    54    16     0     3     0     111  swap
    89     0    54    20     0     3     0      59  (
    90     0    54    21     0     3     0      36  int
    91     0    54    25     0     3     0     111  x
    92     0    54    26     0     3     0      60  )
    93     0    54    28     0     3     0      63  {
    94     0    55     9     0     3     0      19  return
    95     0    55    16     0     3     0      59  (
    96     0    55    17     0     3     0      59  (
    97     0    55    18     0     3     0     111  x
    98     0    55    20     0     3     0      90  <<
    99     0    55    23     0     3     0     112  24
   100     0    55    25     0     3     0      60  )
   101     0    55    27     0     3     0      96  |
   102     0    56    17     0     3     0      59  (
   103     0    56    18     0     3     0      59  (
   104     0    56    19     0     3     0     111  x
   105     0    56    21     0     3     0      99  &
   106     0    56    23     0     3     0     112  0x0000ff00
   107     0    56    33     0     3     0      60  )
   108     0    56    35     0     3     0      90  <<
   109     0    56    39     0     3     0     112  8
   110     0    56    40     0     3     0      60  )
   111     0    56    42     0     3     0      96  |
   112     0    57    17     0     3     0      59  (
   113     0    57    18     0     3     0      59  (
   114     0    57    19     0     3     0     111  x
   115     0    57    21     0     3     0      99  &
   116     0    57    23     0     3     0     112  0x00ff0000
   117     0    57    33     0     3     0      60  )
   118     0    57    35     0     3     0      86  >>>
   119     0    57    39     0     3     0     112  8
   120     0    57    40     0     3     0      60  )
   121     0    57    42     0     3     0      96  |
   122     0    58    17     0     3     0      59  (
   123     0    58    18     0     3     0     111  x
   124     0    58    20     0     3     0      86  >>>
   125     0    58    24     0     3     0     112  24
   126     0    58    26     0     3     0      60  )
   127     0    58    27     0     3     0      60  )
   128     0    58    28     0     3     0     102  ;
   129     0    59     5     0     3     0      64  }
   130     0    59     5     0     3     0     130  ENDMETHOD
   131     0    59     5     0     4     0     131  STARTMETHOD
   132     0    61     5     0     4     0      45  static
   133     0    61    12     0     4     0      53  long
   134     0    61    17     0     4     0     111  swap
   135     0    61    21     0     4     0      59  (
   136     0    61    22     0     4     0      53  long
   137     0    61    27     0     4     0     111  x
   138     0    61    28     0     4     0      60  )
   139     0    61    30     0     4     0      63  {
   140     0    62     9     0     4     0      19  return
   141     0    62    16     0     4     0      59  (
   142     0    62    17     0     4     0      59  (
   143     0    62    18     0     4     0      59  (
   144     0    62    19     0     4     0      53  long
   145     0    62    23     0     4     0      60  )
   146     0    62    24     0     4     0     111  swap
   147     0    62    28     0     4     0      59  (
   148     0    62    29     0     4     0      59  (
   149     0    62    30     0     4     0      36  int
   150     0    62    33     0     4     0      60  )
   151     0    62    34     0     4     0     111  x
   152     0    62    35     0     4     0      60  )
   153     0    62    37     0     4     0      90  <<
   154     0    62    40     0     4     0     112  32
   155     0    62    42     0     4     0      60  )
   156     0    62    44     0     4     0      96  |
   157     0    63    17     0     4     0      59  (
   158     0    63    18     0     4     0      59  (
   159     0    63    19     0     4     0      53  long
   160     0    63    23     0     4     0      60  )
   161     0    63    24     0     4     0     111  swap
   162     0    63    28     0     4     0      59  (
   163     0    63    29     0     4     0      59  (
   164     0    63    30     0     4     0      36  int
   165     0    63    33     0     4     0      60  )
   166     0    63    34     0     4     0      59  (
   167     0    63    35     0     4     0     111  x
   168     0    63    37     0     4     0      86  >>>
   169     0    63    41     0     4     0     112  32
   170     0    63    43     0     4     0      60  )
   171     0    63    44     0     4     0      60  )
   172     0    63    46     0     4     0      99  &
   173     0    63    48     0     4     0      55  0xffffffffL
   174     0    63    59     0     4     0      60  )
   175     0    63    60     0     4     0      60  )
   176     0    63    61     0     4     0     102  ;
   177     0    64     5     0     4     0      64  }
   178     0    64     5     0     4     0     132  ENDMETHOD
   179     0    64     5     0     5     0     133  STARTMETHOD
   180     0    69     5     0     5     0      45  static
   181     0    69    12     0     5     0      41  private
   182     0    69    20     0     5     0      40  char
   183     0    69    25     0     5     0     111  makeChar
   184     0    69    33     0     5     0      59  (
   185     0    69    39     0     5     0     111  b1
   186     0    69    41     0     5     0      66  ,
   187     0    69    48     0     5     0     111  b0
   188     0    69    50     0     5     0      60  )
   189     0    69    52     0     5     0      63  {
   190     0    70     9     0     5     0      19  return
   191     0    70    16     0     5     0      59  (
   192     0    70    17     0     5     0      40  char
   193     0    70    21     0     5     0      60  )
   194     0    70    22     0     5     0      59  (
   195     0    70    23     0     5     0      59  (
   196     0    70    24     0     5     0     111  b1
   197     0    70    27     0     5     0      90  <<
   198     0    70    30     0     5     0     112  8
   199     0    70    31     0     5     0      60  )
   200     0    70    33     0     5     0      96  |
   201     0    70    35     0     5     0      59  (
   202     0    70    36     0     5     0     111  b0
   203     0    70    39     0     5     0      99  &
   204     0    70    41     0     5     0     112  0xff
   205     0    70    45     0     5     0      60  )
   206     0    70    46     0     5     0      60  )
   207     0    70    47     0     5     0     102  ;
   208     0    71     5     0     5     0      64  }
   209     0    71     5     0     5     0     134  ENDMETHOD
   210     0    71     5     0     6     0     135  STARTMETHOD
   211     0    73     5     0     6     0      45  static
   212     0    73    12     0     6     0      40  char
   213     0    73    17     0     6     0     111  getCharL
   214     0    73    25     0     6     0      59  (
   215     0    73    26     0     6     0     111  ByteBuffer
   216     0    73    37     0     6     0     111  bb
   217     0    73    39     0     6     0      66  ,
   218     0    73    41     0     6     0      36  int
   219     0    73    45     0     6     0     111  bi
   220     0    73    47     0     6     0      60  )
   221     0    73    49     0     6     0      63  {
   222     0    74     9     0     6     0      19  return
   223     0    74    16     0     6     0     111  makeChar
   224     0    74    24     0     6     0      59  (
   225     0    74    25     0     6     0     111  bb._get
   226     0    74    32     0     6     0      59  (
   227     0    74    33     0     6     0     111  bi
   228     0    74    36     0     6     0      74  +
   229     0    74    38     0     6     0     112  1
   230     0    74    39     0     6     0      60  )
   231     0    74    40     0     6     0      66  ,
   232     0    75    25     0     6     0     111  bb._get
   233     0    75    32     0     6     0      59  (
   234     0    75    33     0     6     0     111  bi
   235     0    75    36     0     6     0      74  +
   236     0    75    38     0     6     0     112  0
   237     0    75    39     0     6     0      60  )
   238     0    75    40     0     6     0      60  )
   239     0    75    41     0     6     0     102  ;
   240     0    76     5     0     6     0      64  }
   241     0    76     5     0     6     0     136  ENDMETHOD
   242     0    76     5     0     7     0     137  STARTMETHOD
   243     0    78     5     0     7     0      45  static
   244     0    78    12     0     7     0      40  char
   245     0    78    17     0     7     0     111  getCharL
   246     0    78    25     0     7     0      59  (
   247     0    78    26     0     7     0      53  long
   248     0    78    31     0     7     0     111  a
   249     0    78    32     0     7     0      60  )
   250     0    78    34     0     7     0      63  {
   251     0    79     9     0     7     0      19  return
   252     0    79    16     0     7     0     111  makeChar
   253     0    79    24     0     7     0      59  (
   254     0    79    25     0     7     0     111  _get
   255     0    79    29     0     7     0      59  (
   256     0    79    30     0     7     0     111  a
   257     0    79    32     0     7     0      74  +
   258     0    79    34     0     7     0     112  1
   259     0    79    35     0     7     0      60  )
   260     0    79    36     0     7     0      66  ,
   261     0    80    25     0     7     0     111  _get
   262     0    80    29     0     7     0      59  (
   263     0    80    30     0     7     0     111  a
   264     0    80    32     0     7     0      74  +
   265     0    80    34     0     7     0     112  0
   266     0    80    35     0     7     0      60  )
   267     0    80    36     0     7     0      60  )
   268     0    80    37     0     7     0     102  ;
   269     0    81     5     0     7     0      64  }
   270     0    81     5     0     7     0     138  ENDMETHOD
   271     0    81     5     0     8     0     139  STARTMETHOD
   272     0    83     5     0     8     0      45  static
   273     0    83    12     0     8     0      40  char
   274     0    83    17     0     8     0     111  getCharB
   275     0    83    25     0     8     0      59  (
   276     0    83    26     0     8     0     111  ByteBuffer
   277     0    83    37     0     8     0     111  bb
   278     0    83    39     0     8     0      66  ,
   279     0    83    41     0     8     0      36  int
   280     0    83    45     0     8     0     111  bi
   281     0    83    47     0     8     0      60  )
   282     0    83    49     0     8     0      63  {
   283     0    84     9     0     8     0      19  return
   284     0    84    16     0     8     0     111  makeChar
   285     0    84    24     0     8     0      59  (
   286     0    84    25     0     8     0     111  bb._get
   287     0    84    32     0     8     0      59  (
   288     0    84    33     0     8     0     111  bi
   289     0    84    36     0     8     0      74  +
   290     0    84    38     0     8     0     112  0
   291     0    84    39     0     8     0      60  )
   292     0    84    40     0     8     0      66  ,
   293     0    85    25     0     8     0     111  bb._get
   294     0    85    32     0     8     0      59  (
   295     0    85    33     0     8     0     111  bi
   296     0    85    36     0     8     0      74  +
   297     0    85    38     0     8     0     112  1
   298     0    85    39     0     8     0      60  )
   299     0    85    40     0     8     0      60  )
   300     0    85    41     0     8     0     102  ;
   301     0    86     5     0     8     0      64  }
   302     0    86     5     0     8     0     140  ENDMETHOD
   303     0    86     5     0     9     0     141  STARTMETHOD
   304     0    88     5     0     9     0      45  static
   305     0    88    12     0     9     0      40  char
   306     0    88    17     0     9     0     111  getCharB
   307     0    88    25     0     9     0      59  (
   308     0    88    26     0     9     0      53  long
   309     0    88    31     0     9     0     111  a
   310     0    88    32     0     9     0      60  )
   311     0    88    34     0     9     0      63  {
   312     0    89     9     0     9     0      19  return
   313     0    89    16     0     9     0     111  makeChar
   314     0    89    24     0     9     0      59  (
   315     0    89    25     0     9     0     111  _get
   316     0    89    29     0     9     0      59  (
   317     0    89    30     0     9     0     111  a
   318     0    89    32     0     9     0      74  +
   319     0    89    34     0     9     0     112  0
   320     0    89    35     0     9     0      60  )
   321     0    89    36     0     9     0      66  ,
   322     0    90    25     0     9     0     111  _get
   323     0    90    29     0     9     0      59  (
   324     0    90    30     0     9     0     111  a
   325     0    90    32     0     9     0      74  +
   326     0    90    34     0     9     0     112  1
   327     0    90    35     0     9     0      60  )
   328     0    90    36     0     9     0      60  )
   329     0    90    37     0     9     0     102  ;
   330     0    91     5     0     9     0      64  }
   331     0    91     5     0     9     0     142  ENDMETHOD
   332     0    91     5     0    10     0     143  STARTMETHOD
   333     0    93     5     0    10     0      45  static
   334     0    93    12     0    10     0      40  char
   335     0    93    17     0    10     0     111  getChar
   336     0    93    24     0    10     0      59  (
   337     0    93    25     0    10     0     111  ByteBuffer
   338     0    93    36     0    10     0     111  bb
   339     0    93    38     0    10     0      66  ,
   340     0    93    40     0    10     0      36  int
   341     0    93    44     0    10     0     111  bi
   342     0    93    46     0    10     0      66  ,
   343     0    93    48     0    10     0      39  boolean
   344     0    93    56     0    10     0     111  bigEndian
   345     0    93    65     0    10     0      60  )
   346     0    93    67     0    10     0      63  {
   347     0    94     9     0    10     0      19  return
   348     0    94    16     0    10     0      59  (
   349     0    94    17     0    10     0     111  bigEndian
   350     0    94    27     0    10     0      58  ?
   351     0    94    29     0    10     0     111  getCharB
   352     0    94    37     0    10     0      59  (
   353     0    94    38     0    10     0     111  bb
   354     0    94    40     0    10     0      66  ,
   355     0    94    42     0    10     0     111  bi
   356     0    94    44     0    10     0      60  )
   357     0    94    46     0    10     0      65  :
   358     0    94    48     0    10     0     111  getCharL
   359     0    94    56     0    10     0      59  (
   360     0    94    57     0    10     0     111  bb
   361     0    94    59     0    10     0      66  ,
   362     0    94    61     0    10     0     111  bi
   363     0    94    63     0    10     0      60  )
   364     0    94    64     0    10     0      60  )
   365     0    94    65     0    10     0     102  ;
   366     0    95     5     0    10     0      64  }
   367     0    95     5     0    10     0     144  ENDMETHOD
   368     0    95     5     0    11     0     145  STARTMETHOD
   369     0    97     5     0    11     0      45  static
   370     0    97    12     0    11     0      40  char
   371     0    97    17     0    11     0     111  getChar
   372     0    97    24     0    11     0      59  (
   373     0    97    25     0    11     0      53  long
   374     0    97    30     0    11     0     111  a
   375     0    97    31     0    11     0      66  ,
   376     0    97    33     0    11     0      39  boolean
   377     0    97    41     0    11     0     111  bigEndian
   378     0    97    50     0    11     0      60  )
   379     0    97    52     0    11     0      63  {
   380     0    98     9     0    11     0      19  return
   381     0    98    16     0    11     0      59  (
   382     0    98    17     0    11     0     111  bigEndian
   383     0    98    27     0    11     0      58  ?
   384     0    98    29     0    11     0     111  getCharB
   385     0    98    37     0    11     0      59  (
   386     0    98    38     0    11     0     111  a
   387     0    98    39     0    11     0      60  )
   388     0    98    41     0    11     0      65  :
   389     0    98    43     0    11     0     111  getCharL
   390     0    98    51     0    11     0      59  (
   391     0    98    52     0    11     0     111  a
   392     0    98    53     0    11     0      60  )
   393     0    98    54     0    11     1      60  )
   394     0    98    55     0    11     1     102  ;
   395     0    99     5     0    11     1      64  }
   396     0    99     5     0    11     0     146  ENDMETHOD
   397     0    99     5     0    12     0     147  STARTMETHOD
   398     0   101     5     0    12     0      41  private
   399     0   101    13     0    12     0      45  static
   400     0   101    25     0    12     0     111  char1
   401     0   101    30     0    12     0      59  (
   402     0   101    31     0    12     0      40  char
   403     0   101    36     0    12     0     111  x
   404     0   101    37     0    12     0      60  )
   405     0   101    39     0    12     0      63  {
   406     0   101    41     0    12     0      19  return
   407     0   101    48     0    12     0      59  (
   408     0   101    53     0    12     0      60  )
   409     0   101    54     0    12     0      59  (
   410     0   101    55     0    12     0     111  x
   411     0   101    57     0    12     0      84  >>
   412     0   101    60     0    12     0     112  8
   413     0   101    61     0    12     1      60  )
   414     0   101    62     0    12     1     102  ;
   415     0   101    64     0    12     1      64  }
   416     0   101    64     0    12     0     148  ENDMETHOD
   417     0   101    64     0    13     0     149  STARTMETHOD
   418     0   102     5     0    13     0      41  private
   419     0   102    13     0    13     0      45  static
   420     0   102    25     0    13     0     111  char0
   421     0   102    30     0    13     0      59  (
   422     0   102    31     0    13     0      40  char
   423     0   102    36     0    13     0     111  x
   424     0   102    37     0    13     0      60  )
   425     0   102    39     0    13     0      63  {
   426     0   102    41     0    13     0      19  return
   427     0   102    48     0    13     0      59  (
   428     0   102    53     0    13     0      60  )
   429     0   102    54     0    13     0      59  (
   430     0   102    55     0    13     0     111  x
   431     0   102    57     0    13     0      84  >>
   432     0   102    60     0    13     0     112  0
   433     0   102    61     0    13     1      60  )
   434     0   102    62     0    13     1     102  ;
   435     0   102    64     0    13     1      64  }
   436     0   102    64     0    13     0     150  ENDMETHOD
   437     0   102    64     0    14     0     151  STARTMETHOD
   438     0   104     5     0    14     0      45  static
   439     0   104    12     0    14     0      50  void
   440     0   104    17     0    14     0     111  putCharL
   441     0   104    25     0    14     0      59  (
   442     0   104    26     0    14     0     111  ByteBuffer
   443     0   104    37     0    14     0     111  bb
   444     0   104    39     0    14     0      66  ,
   445     0   104    41     0    14     0      36  int
   446     0   104    45     0    14     0     111  bi
   447     0   104    47     0    14     0      66  ,
   448     0   104    49     0    14     0      40  char
   449     0   104    54     0    14     0     111  x
   450     0   104    55     0    14     0      60  )
   451     0   104    57     0    14     0      63  {
   452     0   105     9     0    14     1     111  bb._put
   453     0   105    16     0    14     1      59  (
   454     0   105    17     0    14     1     111  bi
   455     0   105    20     0    14     1      74  +
   456     0   105    22     0    14     1     112  0
   457     0   105    23     0    14     1      66  ,
   458     0   105    25     0    14     1     111  char0
   459     0   105    30     0    14     1      59  (
   460     0   105    31     0    14     1     111  x
   461     0   105    32     0    14     1      60  )
   462     0   105    33     0    14     1      60  )
   463     0   105    34     0    14     1     102  ;
   464     0   106     9     0    14     1     111  bb._put
   465     0   106    16     0    14     1      59  (
   466     0   106    17     0    14     1     111  bi
   467     0   106    20     0    14     1      74  +
   468     0   106    22     0    14     1     112  1
   469     0   106    23     0    14     1      66  ,
   470     0   106    25     0    14     1     111  char1
   471     0   106    30     0    14     1      59  (
   472     0   106    31     0    14     1     111  x
   473     0   106    32     0    14     1      60  )
   474     0   106    33     0    14     1      60  )
   475     0   106    34     0    14     1     102  ;
   476     0   107     5     0    14     0      64  }
   477     0   107     5     0    14     0     152  ENDMETHOD
   478     0   107     5     0    15     0     153  STARTMETHOD
   479     0   109     5     0    15     0      45  static
   480     0   109    12     0    15     0      50  void
   481     0   109    17     0    15     0     111  putCharL
   482     0   109    25     0    15     0      59  (
   483     0   109    26     0    15     0      53  long
   484     0   109    31     0    15     0     111  a
   485     0   109    32     0    15     0      66  ,
   486     0   109    34     0    15     0      40  char
   487     0   109    39     0    15     0     111  x
   488     0   109    40     0    15     0      60  )
   489     0   109    42     0    15     0      63  {
   490     0   110     9     0    15     1     111  _put
   491     0   110    13     0    15     1      59  (
   492     0   110    14     0    15     1     111  a
   493     0   110    16     0    15     1      74  +
   494     0   110    18     0    15     1     112  0
   495     0   110    19     0    15     1      66  ,
   496     0   110    21     0    15     1     111  char0
   497     0   110    26     0    15     1      59  (
   498     0   110    27     0    15     1     111  x
   499     0   110    28     0    15     1      60  )
   500     0   110    29     0    15     1      60  )
   501     0   110    30     0    15     1     102  ;
   502     0   111     9     0    15     1     111  _put
   503     0   111    13     0    15     1      59  (
   504     0   111    14     0    15     1     111  a
   505     0   111    16     0    15     1      74  +
   506     0   111    18     0    15     1     112  1
   507     0   111    19     0    15     1      66  ,
   508     0   111    21     0    15     1     111  char1
   509     0   111    26     0    15     1      59  (
   510     0   111    27     0    15     1     111  x
   511     0   111    28     0    15     1      60  )
   512     0   111    29     0    15     1      60  )
   513     0   111    30     0    15     1     102  ;
   514     0   112     5     0    15     0      64  }
   515     0   112     5     0    15     0     154  ENDMETHOD
   516     0   112     5     0    16     0     155  STARTMETHOD
   517     0   114     5     0    16     0      45  static
   518     0   114    12     0    16     0      50  void
   519     0   114    17     0    16     0     111  putCharB
   520     0   114    25     0    16     0      59  (
   521     0   114    26     0    16     0     111  ByteBuffer
   522     0   114    37     0    16     0     111  bb
   523     0   114    39     0    16     0      66  ,
   524     0   114    41     0    16     0      36  int
   525     0   114    45     0    16     0     111  bi
   526     0   114    47     0    16     0      66  ,
   527     0   114    49     0    16     0      40  char
   528     0   114    54     0    16     0     111  x
   529     0   114    55     0    16     0      60  )
   530     0   114    57     0    16     0      63  {
   531     0   115     9     0    16     1     111  bb._put
   532     0   115    16     0    16     1      59  (
   533     0   115    17     0    16     1     111  bi
   534     0   115    20     0    16     1      74  +
   535     0   115    22     0    16     1     112  0
   536     0   115    23     0    16     1      66  ,
   537     0   115    25     0    16     1     111  char1
   538     0   115    30     0    16     1      59  (
   539     0   115    31     0    16     1     111  x
   540     0   115    32     0    16     1      60  )
   541     0   115    33     0    16     1      60  )
   542     0   115    34     0    16     1     102  ;
   543     0   116     9     0    16     1     111  bb._put
   544     0   116    16     0    16     1      59  (
   545     0   116    17     0    16     1     111  bi
   546     0   116    20     0    16     1      74  +
   547     0   116    22     0    16     1     112  1
   548     0   116    23     0    16     1      66  ,
   549     0   116    25     0    16     1     111  char0
   550     0   116    30     0    16     1      59  (
   551     0   116    31     0    16     1     111  x
   552     0   116    32     0    16     1      60  )
   553     0   116    33     0    16     1      60  )
   554     0   116    34     0    16     1     102  ;
   555     0   117     5     0    16     0      64  }
   556     0   117     5     0    16     0     156  ENDMETHOD
   557     0   117     5     0    17     0     157  STARTMETHOD
   558     0   119     5     0    17     0      45  static
   559     0   119    12     0    17     0      50  void
   560     0   119    17     0    17     0     111  putCharB
   561     0   119    25     0    17     0      59  (
   562     0   119    26     0    17     0      53  long
   563     0   119    31     0    17     0     111  a
   564     0   119    32     0    17     0      66  ,
   565     0   119    34     0    17     0      40  char
   566     0   119    39     0    17     0     111  x
   567     0   119    40     0    17     0      60  )
   568     0   119    42     0    17     0      63  {
   569     0   120     9     0    17     1     111  _put
   570     0   120    13     0    17     1      59  (
   571     0   120    14     0    17     1     111  a
   572     0   120    16     0    17     1      74  +
   573     0   120    18     0    17     1     112  0
   574     0   120    19     0    17     1      66  ,
   575     0   120    21     0    17     1     111  char1
   576     0   120    26     0    17     1      59  (
   577     0   120    27     0    17     1     111  x
   578     0   120    28     0    17     1      60  )
   579     0   120    29     0    17     1      60  )
   580     0   120    30     0    17     1     102  ;
   581     0   121     9     0    17     1     111  _put
   582     0   121    13     0    17     1      59  (
   583     0   121    14     0    17     1     111  a
   584     0   121    16     0    17     1      74  +
   585     0   121    18     0    17     1     112  1
   586     0   121    19     0    17     1      66  ,
   587     0   121    21     0    17     1     111  char0
   588     0   121    26     0    17     1      59  (
   589     0   121    27     0    17     1     111  x
   590     0   121    28     0    17     1      60  )
   591     0   121    29     0    17     1      60  )
   592     0   121    30     0    17     1     102  ;
   593     0   122     5     0    17     0      64  }
   594     0   122     5     0    17     0     158  ENDMETHOD
   595     0   122     5     0    18     0     159  STARTMETHOD
   596     0   124     5     0    18     0      45  static
   597     0   124    12     0    18     0      50  void
   598     0   124    17     0    18     0     111  putChar
   599     0   124    24     0    18     0      59  (
   600     0   124    25     0    18     0     111  ByteBuffer
   601     0   124    36     0    18     0     111  bb
   602     0   124    38     0    18     0      66  ,
   603     0   124    40     0    18     0      36  int
   604     0   124    44     0    18     0     111  bi
   605     0   124    46     0    18     0      66  ,
   606     0   124    48     0    18     0      40  char
   607     0   124    53     0    18     0     111  x
   608     0   124    54     0    18     0      66  ,
   609     0   124    56     0    18     0      39  boolean
   610     0   124    64     0    18     0     111  bigEndian
   611     0   124    73     0    18     0      60  )
   612     0   124    75     0    18     0      63  {
   613     0   125     9     0    18     0      31  if
   614     0   125    12     0    18     0      59  (
   615     0   125    13     0    18     0     111  bigEndian
   616     0   125    22     0    18     0      60  )
   617     0   126    13     0    18     0     111  putCharB
   618     0   126    21     0    18     0      59  (
   619     0   126    22     0    18     0     111  bb
   620     0   126    24     0    18     0      66  ,
   621     0   126    26     0    18     0     111  bi
   622     0   126    28     0    18     0      66  ,
   623     0   126    30     0    18     0     111  x
   624     0   126    31     0    18     0      60  )
   625     0   126    32     0    18     0     102  ;
   626     0   127     9     0    18     0      48  else
   627     0   128    13     0    18     0     111  putCharL
   628     0   128    21     0    18     0      59  (
   629     0   128    22     0    18     0     111  bb
   630     0   128    24     0    18     0      66  ,
   631     0   128    26     0    18     0     111  bi
   632     0   128    28     0    18     0      66  ,
   633     0   128    30     0    18     0     111  x
   634     0   128    31     0    18     0      60  )
   635     0   128    32     0    18     0     102  ;
   636     0   129     5     0    18     0      64  }
   637     0   129     5     0    18     0     160  ENDMETHOD
   638     0   129     5     0    19     0     161  STARTMETHOD
   639     0   131     5     0    19     0      45  static
   640     0   131    12     0    19     0      50  void
   641     0   131    17     0    19     0     111  putChar
   642     0   131    24     0    19     0      59  (
   643     0   131    25     0    19     0      53  long
   644     0   131    30     0    19     0     111  a
   645     0   131    31     0    19     0      66  ,
   646     0   131    33     0    19     0      40  char
   647     0   131    38     0    19     0     111  x
   648     0   131    39     0    19     0      66  ,
   649     0   131    41     0    19     0      39  boolean
   650     0   131    49     0    19     0     111  bigEndian
   651     0   131    58     0    19     0      60  )
   652     0   131    60     0    19     0      63  {
   653     0   132     9     0    19     0      31  if
   654     0   132    12     0    19     0      59  (
   655     0   132    13     0    19     0     111  bigEndian
   656     0   132    22     0    19     0      60  )
   657     0   133    13     0    19     0     111  putCharB
   658     0   133    21     0    19     0      59  (
   659     0   133    22     0    19     0     111  a
   660     0   133    23     0    19     0      66  ,
   661     0   133    25     0    19     0     111  x
   662     0   133    26     0    19     0      60  )
   663     0   133    27     0    19     0     102  ;
   664     0   134     9     0    19     0      48  else
   665     0   135    13     0    19     0     111  putCharL
   666     0   135    21     0    19     0      59  (
   667     0   135    22     0    19     0     111  a
   668     0   135    23     0    19     0      66  ,
   669     0   135    25     0    19     0     111  x
   670     0   135    26     0    19     0      60  )
   671     0   135    27     0    19     0     102  ;
   672     0   136     5     0    19     0      64  }
   673     0   136     5     0    19     0     162  ENDMETHOD
   674     0   136     5     0    20     0     163  STARTMETHOD
   675     0   141     5     0    20     0      45  static
   676     0   141    12     0    20     0      41  private
   677     0   141    26     0    20     0     111  makeShort
   678     0   141    35     0    20     0      59  (
   679     0   141    41     0    20     0     111  b1
   680     0   141    43     0    20     0      66  ,
   681     0   141    50     0    20     0     111  b0
   682     0   141    52     0    20     0      60  )
   683     0   141    54     0    20     0      63  {
   684     0   142     9     0    20     0      19  return
   685     0   142    16     0    20     0      59  (
   686     0   142    22     0    20     0      60  )
   687     0   142    23     0    20     0      59  (
   688     0   142    24     0    20     0      59  (
   689     0   142    25     0    20     0     111  b1
   690     0   142    28     0    20     0      90  <<
   691     0   142    31     0    20     0     112  8
   692     0   142    32     0    20     0      60  )
   693     0   142    34     0    20     0      96  |
   694     0   142    36     0    20     0      59  (
   695     0   142    37     0    20     0     111  b0
   696     0   142    40     0    20     0      99  &
   697     0   142    42     0    20     0     112  0xff
   698     0   142    46     0    20     0      60  )
   699     0   142    47     0    20     0      60  )
   700     0   142    48     0    20     0     102  ;
   701     0   143     5     0    20     0      64  }
   702     0   143     5     0    20     0     164  ENDMETHOD
   703     0   143     5     0    21     0     165  STARTMETHOD
   704     0   145     5     0    21     0      45  static
   705     0   145    18     0    21     0     111  getShortL
   706     0   145    27     0    21     0      59  (
   707     0   145    28     0    21     0     111  ByteBuffer
   708     0   145    39     0    21     0     111  bb
   709     0   145    41     0    21     0      66  ,
   710     0   145    43     0    21     0      36  int
   711     0   145    47     0    21     0     111  bi
   712     0   145    49     0    21     0      60  )
   713     0   145    51     0    21     0      63  {
   714     0   146     9     0    21     0      19  return
   715     0   146    16     0    21     0     111  makeShort
   716     0   146    25     0    21     0      59  (
   717     0   146    26     0    21     0     111  bb._get
   718     0   146    33     0    21     0      59  (
   719     0   146    34     0    21     0     111  bi
   720     0   146    37     0    21     0      74  +
   721     0   146    39     0    21     0     112  1
   722     0   146    40     0    21     0      60  )
   723     0   146    41     0    21     0      66  ,
   724     0   147    26     0    21     0     111  bb._get
   725     0   147    33     0    21     0      59  (
   726     0   147    34     0    21     0     111  bi
   727     0   147    37     0    21     0      74  +
   728     0   147    39     0    21     0     112  0
   729     0   147    40     0    21     0      60  )
   730     0   147    41     0    21     0      60  )
   731     0   147    42     0    21     0     102  ;
   732     0   148     5     0    21     0      64  }
   733     0   148     5     0    21     0     166  ENDMETHOD
   734     0   148     5     0    22     0     167  STARTMETHOD
   735     0   150     5     0    22     0      45  static
   736     0   150    18     0    22     0     111  getShortL
   737     0   150    27     0    22     0      59  (
   738     0   150    28     0    22     0      53  long
   739     0   150    33     0    22     0     111  a
   740     0   150    34     0    22     0      60  )
   741     0   150    36     0    22     0      63  {
   742     0   151     9     0    22     0      19  return
   743     0   151    16     0    22     0     111  makeShort
   744     0   151    25     0    22     0      59  (
   745     0   151    26     0    22     0     111  _get
   746     0   151    30     0    22     0      59  (
   747     0   151    31     0    22     0     111  a
   748     0   151    33     0    22     0      74  +
   749     0   151    35     0    22     0     112  1
   750     0   151    36     0    22     0      60  )
   751     0   151    37     0    22     0      66  ,
   752     0   152    26     0    22     0     111  _get
   753     0   152    30     0    22     0      59  (
   754     0   152    31     0    22     0     111  a
   755     0   152    32     0    22     0      60  )
   756     0   152    33     0    22     0      60  )
   757     0   152    34     0    22     0     102  ;
   758     0   153     5     0    22     0      64  }
   759     0   153     5     0    22     0     168  ENDMETHOD
   760     0   153     5     0    23     0     169  STARTMETHOD
   761     0   155     5     0    23     0      45  static
   762     0   155    18     0    23     0     111  getShortB
   763     0   155    27     0    23     0      59  (
   764     0   155    28     0    23     0     111  ByteBuffer
   765     0   155    39     0    23     0     111  bb
   766     0   155    41     0    23     0      66  ,
   767     0   155    43     0    23     0      36  int
   768     0   155    47     0    23     0     111  bi
   769     0   155    49     0    23     0      60  )
   770     0   155    51     0    23     0      63  {
   771     0   156     9     0    23     0      19  return
   772     0   156    16     0    23     0     111  makeShort
   773     0   156    25     0    23     0      59  (
   774     0   156    26     0    23     0     111  bb._get
   775     0   156    33     0    23     0      59  (
   776     0   156    34     0    23     0     111  bi
   777     0   156    37     0    23     0      74  +
   778     0   156    39     0    23     0     112  0
   779     0   156    40     0    23     0      60  )
   780     0   156    41     0    23     0      66  ,
   781     0   157    26     0    23     0     111  bb._get
   782     0   157    33     0    23     0      59  (
   783     0   157    34     0    23     0     111  bi
   784     0   157    37     0    23     0      74  +
   785     0   157    39     0    23     0     112  1
   786     0   157    40     0    23     0      60  )
   787     0   157    41     0    23     0      60  )
   788     0   157    42     0    23     0     102  ;
   789     0   158     5     0    23     0      64  }
   790     0   158     5     0    23     0     170  ENDMETHOD
   791     0   158     5     0    24     0     171  STARTMETHOD
   792     0   160     5     0    24     0      45  static
   793     0   160    18     0    24     0     111  getShortB
   794     0   160    27     0    24     0      59  (
   795     0   160    28     0    24     0      53  long
   796     0   160    33     0    24     0     111  a
   797     0   160    34     0    24     0      60  )
   798     0   160    36     0    24     0      63  {
   799     0   161     9     0    24     0      19  return
   800     0   161    16     0    24     0     111  makeShort
   801     0   161    25     0    24     0      59  (
   802     0   161    26     0    24     0     111  _get
   803     0   161    30     0    24     0      59  (
   804     0   161    31     0    24     0     111  a
   805     0   161    32     0    24     0      60  )
   806     0   161    33     0    24     0      66  ,
   807     0   162    26     0    24     0     111  _get
   808     0   162    30     0    24     0      59  (
   809     0   162    31     0    24     0     111  a
   810     0   162    33     0    24     0      74  +
   811     0   162    35     0    24     0     112  1
   812     0   162    36     0    24     0      60  )
   813     0   162    37     0    24     0      60  )
   814     0   162    38     0    24     0     102  ;
   815     0   163     5     0    24     0      64  }
   816     0   163     5     0    24     0     172  ENDMETHOD
   817     0   163     5     0    25     0     173  STARTMETHOD
   818     0   165     5     0    25     0      45  static
   819     0   165    18     0    25     0     111  getShort
   820     0   165    26     0    25     0      59  (
   821     0   165    27     0    25     0     111  ByteBuffer
   822     0   165    38     0    25     0     111  bb
   823     0   165    40     0    25     0      66  ,
   824     0   165    42     0    25     0      36  int
   825     0   165    46     0    25     0     111  bi
   826     0   165    48     0    25     0      66  ,
   827     0   165    50     0    25     0      39  boolean
   828     0   165    58     0    25     0     111  bigEndian
   829     0   165    67     0    25     0      60  )
   830     0   165    69     0    25     0      63  {
   831     0   166     9     0    25     0      19  return
   832     0   166    16     0    25     0      59  (
   833     0   166    17     0    25     0     111  bigEndian
   834     0   166    27     0    25     0      58  ?
   835     0   166    29     0    25     0     111  getShortB
   836     0   166    38     0    25     0      59  (
   837     0   166    39     0    25     0     111  bb
   838     0   166    41     0    25     0      66  ,
   839     0   166    43     0    25     0     111  bi
   840     0   166    45     0    25     0      60  )
   841     0   166    47     0    25     0      65  :
   842     0   166    49     0    25     0     111  getShortL
   843     0   166    58     0    25     0      59  (
   844     0   166    59     0    25     0     111  bb
   845     0   166    61     0    25     0      66  ,
   846     0   166    63     0    25     0     111  bi
   847     0   166    65     0    25     0      60  )
   848     0   166    66     0    25     0      60  )
   849     0   166    67     0    25     0     102  ;
   850     0   167     5     0    25     0      64  }
   851     0   167     5     0    25     0     174  ENDMETHOD
   852     0   167     5     0    26     0     175  STARTMETHOD
   853     0   169     5     0    26     0      45  static
   854     0   169    18     0    26     0     111  getShort
   855     0   169    26     0    26     0      59  (
   856     0   169    27     0    26     0      53  long
   857     0   169    32     0    26     0     111  a
   858     0   169    33     0    26     0      66  ,
   859     0   169    35     0    26     0      39  boolean
   860     0   169    43     0    26     0     111  bigEndian
   861     0   169    52     0    26     0      60  )
   862     0   169    54     0    26     0      63  {
   863     0   170     9     0    26     0      19  return
   864     0   170    16     0    26     0      59  (
   865     0   170    17     0    26     0     111  bigEndian
   866     0   170    27     0    26     0      58  ?
   867     0   170    29     0    26     0     111  getShortB
   868     0   170    38     0    26     0      59  (
   869     0   170    39     0    26     0     111  a
   870     0   170    40     0    26     0      60  )
   871     0   170    42     0    26     0      65  :
   872     0   170    44     0    26     0     111  getShortL
   873     0   170    53     0    26     0      59  (
   874     0   170    54     0    26     0     111  a
   875     0   170    55     0    26     0      60  )
   876     0   170    56     0    26     1      60  )
   877     0   170    57     0    26     1     102  ;
   878     0   171     5     0    26     1      64  }
   879     0   171     5     0    26     0     176  ENDMETHOD
   880     0   171     5     0    27     0     177  STARTMETHOD
   881     0   173     5     0    27     0      41  private
   882     0   173    13     0    27     0      45  static
   883     0   173    25     0    27     0     111  short1
   884     0   173    31     0    27     0      59  (
   885     0   173    38     0    27     0     111  x
   886     0   173    39     0    27     0      60  )
   887     0   173    41     0    27     0      63  {
   888     0   173    43     0    27     0      19  return
   889     0   173    50     0    27     0      59  (
   890     0   173    55     0    27     0      60  )
   891     0   173    56     0    27     0      59  (
   892     0   173    57     0    27     0     111  x
   893     0   173    59     0    27     0      84  >>
   894     0   173    62     0    27     0     112  8
   895     0   173    63     0    27     1      60  )
   896     0   173    64     0    27     1     102  ;
   897     0   173    66     0    27     1      64  }
   898     0   173    66     0    27     0     178  ENDMETHOD
   899     0   173    66     0    28     0     179  STARTMETHOD
   900     0   174     5     0    28     0      41  private
   901     0   174    13     0    28     0      45  static
   902     0   174    25     0    28     0     111  short0
   903     0   174    31     0    28     0      59  (
   904     0   174    38     0    28     0     111  x
   905     0   174    39     0    28     0      60  )
   906     0   174    41     0    28     0      63  {
   907     0   174    43     0    28     0      19  return
   908     0   174    50     0    28     0      59  (
   909     0   174    55     0    28     0      60  )
   910     0   174    56     0    28     0      59  (
   911     0   174    57     0    28     0     111  x
   912     0   174    59     0    28     0      84  >>
   913     0   174    62     0    28     0     112  0
   914     0   174    63     0    28     1      60  )
   915     0   174    64     0    28     1     102  ;
   916     0   174    66     0    28     1      64  }
   917     0   174    66     0    28     0     180  ENDMETHOD
   918     0   174    66     0    29     0     181  STARTMETHOD
   919     0   176     5     0    29     0      45  static
   920     0   176    12     0    29     0      50  void
   921     0   176    17     0    29     0     111  putShortL
   922     0   176    26     0    29     0      59  (
   923     0   176    27     0    29     0     111  ByteBuffer
   924     0   176    38     0    29     0     111  bb
   925     0   176    40     0    29     0      66  ,
   926     0   176    42     0    29     0      36  int
   927     0   176    46     0    29     0     111  bi
   928     0   176    48     0    29     0      66  ,
   929     0   176    56     0    29     0     111  x
   930     0   176    57     0    29     0      60  )
   931     0   176    59     0    29     0      63  {
   932     0   177     9     0    29     1     111  bb._put
   933     0   177    16     0    29     1      59  (
   934     0   177    17     0    29     1     111  bi
   935     0   177    20     0    29     1      74  +
   936     0   177    22     0    29     1     112  0
   937     0   177    23     0    29     1      66  ,
   938     0   177    25     0    29     1     111  short0
   939     0   177    31     0    29     1      59  (
   940     0   177    32     0    29     1     111  x
   941     0   177    33     0    29     1      60  )
   942     0   177    34     0    29     1      60  )
   943     0   177    35     0    29     1     102  ;
   944     0   178     9     0    29     1     111  bb._put
   945     0   178    16     0    29     1      59  (
   946     0   178    17     0    29     1     111  bi
   947     0   178    20     0    29     1      74  +
   948     0   178    22     0    29     1     112  1
   949     0   178    23     0    29     1      66  ,
   950     0   178    25     0    29     1     111  short1
   951     0   178    31     0    29     1      59  (
   952     0   178    32     0    29     1     111  x
   953     0   178    33     0    29     1      60  )
   954     0   178    34     0    29     1      60  )
   955     0   178    35     0    29     1     102  ;
   956     0   179     5     0    29     0      64  }
   957     0   179     5     0    29     0     182  ENDMETHOD
   958     0   179     5     0    30     0     183  STARTMETHOD
   959     0   181     5     0    30     0      45  static
   960     0   181    12     0    30     0      50  void
   961     0   181    17     0    30     0     111  putShortL
   962     0   181    26     0    30     0      59  (
   963     0   181    27     0    30     0      53  long
   964     0   181    32     0    30     0     111  a
   965     0   181    33     0    30     0      66  ,
   966     0   181    41     0    30     0     111  x
   967     0   181    42     0    30     0      60  )
   968     0   181    44     0    30     0      63  {
   969     0   182     9     0    30     0     111  _put
   970     0   182    13     0    30     0      59  (
   971     0   182    14     0    30     0     111  a
   972     0   182    15     0    30     0      66  ,
   973     0   182    17     0    30     0     111  short0
   974     0   182    23     0    30     0      59  (
   975     0   182    24     0    30     0     111  x
   976     0   182    25     0    30     0      60  )
   977     0   182    26     0    30     0      60  )
   978     0   182    27     0    30     0     102  ;
   979     0   183     9     0    30     0     111  _put
   980     0   183    13     0    30     0      59  (
   981     0   183    14     0    30     0     111  a
   982     0   183    16     0    30     0      74  +
   983     0   183    18     0    30     0     112  1
   984     0   183    19     0    30     0      66  ,
   985     0   183    21     0    30     0     111  short1
   986     0   183    27     0    30     0      59  (
   987     0   183    28     0    30     0     111  x
   988     0   183    29     0    30     0      60  )
   989     0   183    30     0    30     0      60  )
   990     0   183    31     0    30     0     102  ;
   991     0   184     5     0    30     0      64  }
   992     0   184     5     0    30     0     184  ENDMETHOD
   993     0   184     5     0    31     0     185  STARTMETHOD
   994     0   186     5     0    31     0      45  static
   995     0   186    12     0    31     0      50  void
   996     0   186    17     0    31     0     111  putShortB
   997     0   186    26     0    31     0      59  (
   998     0   186    27     0    31     0     111  ByteBuffer
   999     0   186    38     0    31     0     111  bb
  1000     0   186    40     0    31     0      66  ,
  1001     0   186    42     0    31     0      36  int
  1002     0   186    46     0    31     0     111  bi
  1003     0   186    48     0    31     0      66  ,
  1004     0   186    56     0    31     0     111  x
  1005     0   186    57     0    31     0      60  )
  1006     0   186    59     0    31     0      63  {
  1007     0   187     9     0    31     1     111  bb._put
  1008     0   187    16     0    31     1      59  (
  1009     0   187    17     0    31     1     111  bi
  1010     0   187    20     0    31     1      74  +
  1011     0   187    22     0    31     1     112  0
  1012     0   187    23     0    31     1      66  ,
  1013     0   187    25     0    31     1     111  short1
  1014     0   187    31     0    31     1      59  (
  1015     0   187    32     0    31     1     111  x
  1016     0   187    33     0    31     1      60  )
  1017     0   187    34     0    31     1      60  )
  1018     0   187    35     0    31     1     102  ;
  1019     0   188     9     0    31     1     111  bb._put
  1020     0   188    16     0    31     1      59  (
  1021     0   188    17     0    31     1     111  bi
  1022     0   188    20     0    31     1      74  +
  1023     0   188    22     0    31     1     112  1
  1024     0   188    23     0    31     1      66  ,
  1025     0   188    25     0    31     1     111  short0
  1026     0   188    31     0    31     1      59  (
  1027     0   188    32     0    31     1     111  x
  1028     0   188    33     0    31     1      60  )
  1029     0   188    34     0    31     1      60  )
  1030     0   188    35     0    31     1     102  ;
  1031     0   189     5     0    31     0      64  }
  1032     0   189     5     0    31     0     186  ENDMETHOD
  1033     0   189     5     0    32     0     187  STARTMETHOD
  1034     0   191     5     0    32     0      45  static
  1035     0   191    12     0    32     0      50  void
  1036     0   191    17     0    32     0     111  putShortB
  1037     0   191    26     0    32     0      59  (
  1038     0   191    27     0    32     0      53  long
  1039     0   191    32     0    32     0     111  a
  1040     0   191    33     0    32     0      66  ,
  1041     0   191    41     0    32     0     111  x
  1042     0   191    42     0    32     0      60  )
  1043     0   191    44     0    32     0      63  {
  1044     0   192     9     0    32     0     111  _put
  1045     0   192    13     0    32     0      59  (
  1046     0   192    14     0    32     0     111  a
  1047     0   192    15     0    32     0      66  ,
  1048     0   192    17     0    32     0     111  short1
  1049     0   192    23     0    32     0      59  (
  1050     0   192    24     0    32     0     111  x
  1051     0   192    25     0    32     0      60  )
  1052     0   192    26     0    32     0      60  )
  1053     0   192    27     0    32     0     102  ;
  1054     0   193     9     0    32     0     111  _put
  1055     0   193    13     0    32     0      59  (
  1056     0   193    14     0    32     0     111  a
  1057     0   193    16     0    32     0      74  +
  1058     0   193    18     0    32     0     112  1
  1059     0   193    19     0    32     0      66  ,
  1060     0   193    21     0    32     0     111  short0
  1061     0   193    27     0    32     0      59  (
  1062     0   193    28     0    32     0     111  x
  1063     0   193    29     0    32     0      60  )
  1064     0   193    30     0    32     0      60  )
  1065     0   193    31     0    32     0     102  ;
  1066     0   194     5     0    32     0      64  }
  1067     0   194     5     0    32     0     188  ENDMETHOD
  1068     0   194     5     0    33     0     189  STARTMETHOD
  1069     0   196     5     0    33     0      45  static
  1070     0   196    12     0    33     0      50  void
  1071     0   196    17     0    33     0     111  putShort
  1072     0   196    25     0    33     0      59  (
  1073     0   196    26     0    33     0     111  ByteBuffer
  1074     0   196    37     0    33     0     111  bb
  1075     0   196    39     0    33     0      66  ,
  1076     0   196    41     0    33     0      36  int
  1077     0   196    45     0    33     0     111  bi
  1078     0   196    47     0    33     0      66  ,
  1079     0   196    55     0    33     0     111  x
  1080     0   196    56     0    33     0      66  ,
  1081     0   196    58     0    33     0      39  boolean
  1082     0   196    66     0    33     0     111  bigEndian
  1083     0   196    75     0    33     0      60  )
  1084     0   196    77     0    33     0      63  {
  1085     0   197     9     0    33     0      31  if
  1086     0   197    12     0    33     0      59  (
  1087     0   197    13     0    33     0     111  bigEndian
  1088     0   197    22     0    33     0      60  )
  1089     0   198    13     0    33     0     111  putShortB
  1090     0   198    22     0    33     0      59  (
  1091     0   198    23     0    33     0     111  bb
  1092     0   198    25     0    33     0      66  ,
  1093     0   198    27     0    33     0     111  bi
  1094     0   198    29     0    33     0      66  ,
  1095     0   198    31     0    33     0     111  x
  1096     0   198    32     0    33     0      60  )
  1097     0   198    33     0    33     0     102  ;
  1098     0   199     9     0    33     0      48  else
  1099     0   200    13     0    33     0     111  putShortL
  1100     0   200    22     0    33     0      59  (
  1101     0   200    23     0    33     0     111  bb
  1102     0   200    25     0    33     0      66  ,
  1103     0   200    27     0    33     0     111  bi
  1104     0   200    29     0    33     0      66  ,
  1105     0   200    31     0    33     0     111  x
  1106     0   200    32     0    33     0      60  )
  1107     0   200    33     0    33     0     102  ;
  1108     0   201     5     0    33     0      64  }
  1109     0   201     5     0    33     0     190  ENDMETHOD
  1110     0   201     5     0    34     0     191  STARTMETHOD
  1111     0   203     5     0    34     0      45  static
  1112     0   203    12     0    34     0      50  void
  1113     0   203    17     0    34     0     111  putShort
  1114     0   203    25     0    34     0      59  (
  1115     0   203    26     0    34     0      53  long
  1116     0   203    31     0    34     0     111  a
  1117     0   203    32     0    34     0      66  ,
  1118     0   203    40     0    34     0     111  x
  1119     0   203    41     0    34     0      66  ,
  1120     0   203    43     0    34     0      39  boolean
  1121     0   203    51     0    34     0     111  bigEndian
  1122     0   203    60     0    34     0      60  )
  1123     0   203    62     0    34     0      63  {
  1124     0   204     9     0    34     0      31  if
  1125     0   204    12     0    34     0      59  (
  1126     0   204    13     0    34     0     111  bigEndian
  1127     0   204    22     0    34     0      60  )
  1128     0   205    13     0    34     0     111  putShortB
  1129     0   205    22     0    34     0      59  (
  1130     0   205    23     0    34     0     111  a
  1131     0   205    24     0    34     0      66  ,
  1132     0   205    26     0    34     0     111  x
  1133     0   205    27     0    34     0      60  )
  1134     0   205    28     0    34     0     102  ;
  1135     0   206     9     0    34     0      48  else
  1136     0   207    13     0    34     0     111  putShortL
  1137     0   207    22     0    34     0      59  (
  1138     0   207    23     0    34     0     111  a
  1139     0   207    24     0    34     0      66  ,
  1140     0   207    26     0    34     0     111  x
  1141     0   207    27     0    34     0      60  )
  1142     0   207    28     0    34     0     102  ;
  1143     0   208     5     0    34     0      64  }
  1144     0   208     5     0    34     0     192  ENDMETHOD
  1145     0   208     5     0    35     0     193  STARTMETHOD
  1146     0   213     5     0    35     0      45  static
  1147     0   213    12     0    35     0      41  private
  1148     0   213    20     0    35     0      36  int
  1149     0   213    24     0    35     0     111  makeInt
  1150     0   213    31     0    35     0      59  (
  1151     0   213    37     0    35     0     111  b3
  1152     0   213    39     0    35     0      66  ,
  1153     0   213    46     0    35     0     111  b2
  1154     0   213    48     0    35     0      66  ,
  1155     0   213    55     0    35     0     111  b1
  1156     0   213    57     0    35     0      66  ,
  1157     0   213    64     0    35     0     111  b0
  1158     0   213    66     0    35     0      60  )
  1159     0   213    68     0    35     0      63  {
  1160     0   214     9     0    35     0      19  return
  1161     0   214    16     0    35     0      59  (
  1162     0   214    17     0    35     1      59  (
  1163     0   214    18     0    35     1      59  (
  1164     0   214    19     0    35     1     111  b3
  1165     0   214    22     0    35     1      99  &
  1166     0   214    24     0    35     1     112  0xff
  1167     0   214    28     0    35     1      60  )
  1168     0   214    30     0    35     0      90  <<
  1169     0   214    33     0    35     0     112  24
  1170     0   214    35     0    35     0      60  )
  1171     0   214    37     0    35     0      96  |
  1172     0   215    17     0    35     1      59  (
  1173     0   215    18     0    35     1      59  (
  1174     0   215    19     0    35     1     111  b2
  1175     0   215    22     0    35     1      99  &
  1176     0   215    24     0    35     1     112  0xff
  1177     0   215    28     0    35     1      60  )
  1178     0   215    30     0    35     1      90  <<
  1179     0   215    33     0    35     1     112  16
  1180     0   215    35     0    35     1      60  )
  1181     0   215    37     0    35     1      96  |
  1182     0   216    17     0    35     1      59  (
  1183     0   216    18     0    35     1      59  (
  1184     0   216    19     0    35     1     111  b1
  1185     0   216    22     0    35     1      99  &
  1186     0   216    24     0    35     1     112  0xff
  1187     0   216    28     0    35     1      60  )
  1188     0   216    30     0    35     1      90  <<
  1189     0   216    34     0    35     1     112  8
  1190     0   216    35     0    35     1      60  )
  1191     0   216    37     0    35     1      96  |
  1192     0   217    17     0    35     0      59  (
  1193     0   217    18     0    35     0      59  (
  1194     0   217    19     0    35     0     111  b0
  1195     0   217    22     0    35     0      99  &
  1196     0   217    24     0    35     0     112  0xff
  1197     0   217    28     0    35     0      60  )
  1198     0   217    30     0    35     0      90  <<
  1199     0   217    34     0    35     0     112  0
  1200     0   217    35     0    35     0      60  )
  1201     0   217    36     0    35     0      60  )
  1202     0   217    37     0    35     0     102  ;
  1203     0   218     5     0    35     0      64  }
  1204     0   218     5     0    35     0     194  ENDMETHOD
  1205     0   218     5     0    36     0     195  STARTMETHOD
  1206     0   220     5     0    36     0      45  static
  1207     0   220    12     0    36     0      36  int
  1208     0   220    16     0    36     0     111  getIntL
  1209     0   220    23     0    36     0      59  (
  1210     0   220    24     0    36     0     111  ByteBuffer
  1211     0   220    35     0    36     0     111  bb
  1212     0   220    37     0    36     0      66  ,
  1213     0   220    39     0    36     0      36  int
  1214     0   220    43     0    36     0     111  bi
  1215     0   220    45     0    36     0      60  )
  1216     0   220    47     0    36     0      63  {
  1217     0   221     9     0    36     0      19  return
  1218     0   221    16     0    36     0     111  makeInt
  1219     0   221    23     0    36     0      59  (
  1220     0   221    24     0    36     0     111  bb._get
  1221     0   221    31     0    36     0      59  (
  1222     0   221    32     0    36     0     111  bi
  1223     0   221    35     0    36     0      74  +
  1224     0   221    37     0    36     0     112  3
  1225     0   221    38     0    36     0      60  )
  1226     0   221    39     0    36     0      66  ,
  1227     0   222    24     0    36     1     111  bb._get
  1228     0   222    31     0    36     1      59  (
  1229     0   222    32     0    36     1     111  bi
  1230     0   222    35     0    36     1      74  +
  1231     0   222    37     0    36     1     112  2
  1232     0   222    38     0    36     1      60  )
  1233     0   222    39     0    36     1      66  ,
  1234     0   223    24     0    36     1     111  bb._get
  1235     0   223    31     0    36     1      59  (
  1236     0   223    32     0    36     1     111  bi
  1237     0   223    35     0    36     1      74  +
  1238     0   223    37     0    36     1     112  1
  1239     0   223    38     0    36     1      60  )
  1240     0   223    39     0    36     1      66  ,
  1241     0   224    24     0    36     0     111  bb._get
  1242     0   224    31     0    36     0      59  (
  1243     0   224    32     0    36     0     111  bi
  1244     0   224    35     0    36     0      74  +
  1245     0   224    37     0    36     0     112  0
  1246     0   224    38     0    36     0      60  )
  1247     0   224    39     0    36     0      60  )
  1248     0   224    40     0    36     0     102  ;
  1249     0   225     5     0    36     0      64  }
  1250     0   225     5     0    36     0     196  ENDMETHOD
  1251     0   225     5     0    37     0     197  STARTMETHOD
  1252     0   227     5     0    37     0      45  static
  1253     0   227    12     0    37     0      36  int
  1254     0   227    16     0    37     0     111  getIntL
  1255     0   227    23     0    37     0      59  (
  1256     0   227    24     0    37     0      53  long
  1257     0   227    29     0    37     0     111  a
  1258     0   227    30     0    37     0      60  )
  1259     0   227    32     0    37     0      63  {
  1260     0   228     9     0    37     0      19  return
  1261     0   228    16     0    37     0     111  makeInt
  1262     0   228    23     0    37     0      59  (
  1263     0   228    24     0    37     0     111  _get
  1264     0   228    28     0    37     0      59  (
  1265     0   228    29     0    37     0     111  a
  1266     0   228    31     0    37     0      74  +
  1267     0   228    33     0    37     0     112  3
  1268     0   228    34     0    37     0      60  )
  1269     0   228    35     0    37     0      66  ,
  1270     0   229    24     0    37     1     111  _get
  1271     0   229    28     0    37     1      59  (
  1272     0   229    29     0    37     1     111  a
  1273     0   229    31     0    37     1      74  +
  1274     0   229    33     0    37     1     112  2
  1275     0   229    34     0    37     1      60  )
  1276     0   229    35     0    37     1      66  ,
  1277     0   230    24     0    37     1     111  _get
  1278     0   230    28     0    37     1      59  (
  1279     0   230    29     0    37     1     111  a
  1280     0   230    31     0    37     1      74  +
  1281     0   230    33     0    37     1     112  1
  1282     0   230    34     0    37     1      60  )
  1283     0   230    35     0    37     1      66  ,
  1284     0   231    24     0    37     0     111  _get
  1285     0   231    28     0    37     0      59  (
  1286     0   231    29     0    37     0     111  a
  1287     0   231    31     0    37     0      74  +
  1288     0   231    33     0    37     0     112  0
  1289     0   231    34     0    37     0      60  )
  1290     0   231    35     0    37     0      60  )
  1291     0   231    36     0    37     0     102  ;
  1292     0   232     5     0    37     0      64  }
  1293     0   232     5     0    37     0     198  ENDMETHOD
  1294     0   232     5     0    38     0     199  STARTMETHOD
  1295     0   234     5     0    38     0      45  static
  1296     0   234    12     0    38     0      36  int
  1297     0   234    16     0    38     0     111  getIntB
  1298     0   234    23     0    38     0      59  (
  1299     0   234    24     0    38     0     111  ByteBuffer
  1300     0   234    35     0    38     0     111  bb
  1301     0   234    37     0    38     0      66  ,
  1302     0   234    39     0    38     0      36  int
  1303     0   234    43     0    38     0     111  bi
  1304     0   234    45     0    38     0      60  )
  1305     0   234    47     0    38     0      63  {
  1306     0   235     9     0    38     0      19  return
  1307     0   235    16     0    38     0     111  makeInt
  1308     0   235    23     0    38     0      59  (
  1309     0   235    24     0    38     0     111  bb._get
  1310     0   235    31     0    38     0      59  (
  1311     0   235    32     0    38     0     111  bi
  1312     0   235    35     0    38     0      74  +
  1313     0   235    37     0    38     0     112  0
  1314     0   235    38     0    38     0      60  )
  1315     0   235    39     0    38     0      66  ,
  1316     0   236    24     0    38     1     111  bb._get
  1317     0   236    31     0    38     1      59  (
  1318     0   236    32     0    38     1     111  bi
  1319     0   236    35     0    38     1      74  +
  1320     0   236    37     0    38     1     112  1
  1321     0   236    38     0    38     1      60  )
  1322     0   236    39     0    38     1      66  ,
  1323     0   237    24     0    38     1     111  bb._get
  1324     0   237    31     0    38     1      59  (
  1325     0   237    32     0    38     1     111  bi
  1326     0   237    35     0    38     1      74  +
  1327     0   237    37     0    38     1     112  2
  1328     0   237    38     0    38     1      60  )
  1329     0   237    39     0    38     1      66  ,
  1330     0   238    24     0    38     0     111  bb._get
  1331     0   238    31     0    38     0      59  (
  1332     0   238    32     0    38     0     111  bi
  1333     0   238    35     0    38     0      74  +
  1334     0   238    37     0    38     0     112  3
  1335     0   238    38     0    38     0      60  )
  1336     0   238    39     0    38     0      60  )
  1337     0   238    40     0    38     0     102  ;
  1338     0   239     5     0    38     0      64  }
  1339     0   239     5     0    38     0     200  ENDMETHOD
  1340     0   239     5     0    39     0     201  STARTMETHOD
  1341     0   241     5     0    39     0      45  static
  1342     0   241    12     0    39     0      36  int
  1343     0   241    16     0    39     0     111  getIntB
  1344     0   241    23     0    39     0      59  (
  1345     0   241    24     0    39     0      53  long
  1346     0   241    29     0    39     0     111  a
  1347     0   241    30     0    39     0      60  )
  1348     0   241    32     0    39     0      63  {
  1349     0   242     9     0    39     0      19  return
  1350     0   242    16     0    39     0     111  makeInt
  1351     0   242    23     0    39     0      59  (
  1352     0   242    24     0    39     0     111  _get
  1353     0   242    28     0    39     0      59  (
  1354     0   242    29     0    39     0     111  a
  1355     0   242    31     0    39     0      74  +
  1356     0   242    33     0    39     0     112  0
  1357     0   242    34     0    39     0      60  )
  1358     0   242    35     0    39     0      66  ,
  1359     0   243    24     0    39     1     111  _get
  1360     0   243    28     0    39     1      59  (
  1361     0   243    29     0    39     1     111  a
  1362     0   243    31     0    39     1      74  +
  1363     0   243    33     0    39     1     112  1
  1364     0   243    34     0    39     1      60  )
  1365     0   243    35     0    39     1      66  ,
  1366     0   244    24     0    39     1     111  _get
  1367     0   244    28     0    39     1      59  (
  1368     0   244    29     0    39     1     111  a
  1369     0   244    31     0    39     1      74  +
  1370     0   244    33     0    39     1     112  2
  1371     0   244    34     0    39     1      60  )
  1372     0   244    35     0    39     1      66  ,
  1373     0   245    24     0    39     0     111  _get
  1374     0   245    28     0    39     0      59  (
  1375     0   245    29     0    39     0     111  a
  1376     0   245    31     0    39     0      74  +
  1377     0   245    33     0    39     0     112  3
  1378     0   245    34     0    39     0      60  )
  1379     0   245    35     0    39     0      60  )
  1380     0   245    36     0    39     0     102  ;
  1381     0   246     5     0    39     0      64  }
  1382     0   246     5     0    39     0     202  ENDMETHOD
  1383     0   246     5     0    40     0     203  STARTMETHOD
  1384     0   248     5     0    40     0      45  static
  1385     0   248    12     0    40     0      36  int
  1386     0   248    16     0    40     0     111  getInt
  1387     0   248    22     0    40     0      59  (
  1388     0   248    23     0    40     0     111  ByteBuffer
  1389     0   248    34     0    40     0     111  bb
  1390     0   248    36     0    40     0      66  ,
  1391     0   248    38     0    40     0      36  int
  1392     0   248    42     0    40     0     111  bi
  1393     0   248    44     0    40     0      66  ,
  1394     0   248    46     0    40     0      39  boolean
  1395     0   248    54     0    40     0     111  bigEndian
  1396     0   248    63     0    40     0      60  )
  1397     0   248    65     0    40     0      63  {
  1398     0   249     9     0    40     0      19  return
  1399     0   249    16     0    40     0      59  (
  1400     0   249    17     0    40     0     111  bigEndian
  1401     0   249    27     0    40     0      58  ?
  1402     0   249    29     0    40     0     111  getIntB
  1403     0   249    36     0    40     0      59  (
  1404     0   249    37     0    40     0     111  bb
  1405     0   249    39     0    40     0      66  ,
  1406     0   249    41     0    40     0     111  bi
  1407     0   249    43     0    40     0      60  )
  1408     0   249    45     0    40     0      65  :
  1409     0   249    47     0    40     0     111  getIntL
  1410     0   249    54     0    40     0      59  (
  1411     0   249    55     0    40     0     111  bb
  1412     0   249    57     0    40     0      66  ,
  1413     0   249    59     0    40     0     111  bi
  1414     0   249    61     0    40     0      60  )
  1415     0   249    62     0    40     0      60  )
  1416     0   249    63     0    40     0     102  ;
  1417     0   250     5     0    40     0      64  }
  1418     0   250     5     0    40     0     204  ENDMETHOD
  1419     0   250     5     0    41     0     205  STARTMETHOD
  1420     0   252     5     0    41     0      45  static
  1421     0   252    12     0    41     0      36  int
  1422     0   252    16     0    41     0     111  getInt
  1423     0   252    22     0    41     0      59  (
  1424     0   252    23     0    41     0      53  long
  1425     0   252    28     0    41     0     111  a
  1426     0   252    29     0    41     0      66  ,
  1427     0   252    31     0    41     0      39  boolean
  1428     0   252    39     0    41     0     111  bigEndian
  1429     0   252    48     0    41     0      60  )
  1430     0   252    50     0    41     0      63  {
  1431     0   253     9     0    41     0      19  return
  1432     0   253    16     0    41     0      59  (
  1433     0   253    17     0    41     0     111  bigEndian
  1434     0   253    27     0    41     0      58  ?
  1435     0   253    29     0    41     0     111  getIntB
  1436     0   253    36     0    41     0      59  (
  1437     0   253    37     0    41     0     111  a
  1438     0   253    38     0    41     0      60  )
  1439     0   253    40     0    41     0      65  :
  1440     0   253    42     0    41     0     111  getIntL
  1441     0   253    49     0    41     0      59  (
  1442     0   253    50     0    41     0     111  a
  1443     0   253    51     0    41     0      60  )
  1444     0   253    52     0    41     1      60  )
  1445     0   253    53     0    41     1     102  ;
  1446     0   254     5     0    41     1      64  }
  1447     0   254     5     0    41     0     206  ENDMETHOD
  1448     0   254     5     0    42     0     207  STARTMETHOD
  1449     0   256     5     0    42     1      41  private
  1450     0   256    13     0    42     1      45  static
  1451     0   256    25     0    42     1     111  int3
  1452     0   256    29     0    42     1      59  (
  1453     0   256    30     0    42     1      36  int
  1454     0   256    34     0    42     1     111  x
  1455     0   256    35     0    42     1      60  )
  1456     0   256    37     0    42     1      63  {
  1457     0   256    39     0    42     1      19  return
  1458     0   256    46     0    42     1      59  (
  1459     0   256    51     0    42     1      60  )
  1460     0   256    52     0    42     1      59  (
  1461     0   256    53     0    42     1     111  x
  1462     0   256    55     0    42     1      84  >>
  1463     0   256    58     0    42     1     112  24
  1464     0   256    60     0    42     1      60  )
  1465     0   256    61     0    42     1     102  ;
  1466     0   256    63     0    42     1      64  }
  1467     0   256    63     0    42     0     208  ENDMETHOD
  1468     0   256    63     0    43     0     209  STARTMETHOD
  1469     0   257     5     0    43     1      41  private
  1470     0   257    13     0    43     1      45  static
  1471     0   257    25     0    43     1     111  int2
  1472     0   257    29     0    43     1      59  (
  1473     0   257    30     0    43     1      36  int
  1474     0   257    34     0    43     1     111  x
  1475     0   257    35     0    43     1      60  )
  1476     0   257    37     0    43     1      63  {
  1477     0   257    39     0    43     1      19  return
  1478     0   257    46     0    43     1      59  (
  1479     0   257    51     0    43     1      60  )
  1480     0   257    52     0    43     1      59  (
  1481     0   257    53     0    43     1     111  x
  1482     0   257    55     0    43     1      84  >>
  1483     0   257    58     0    43     1     112  16
  1484     0   257    60     0    43     1      60  )
  1485     0   257    61     0    43     1     102  ;
  1486     0   257    63     0    43     1      64  }
  1487     0   257    63     0    43     0     210  ENDMETHOD
  1488     0   257    63     0    44     0     211  STARTMETHOD
  1489     0   258     5     0    44     1      41  private
  1490     0   258    13     0    44     1      45  static
  1491     0   258    25     0    44     1     111  int1
  1492     0   258    29     0    44     1      59  (
  1493     0   258    30     0    44     1      36  int
  1494     0   258    34     0    44     1     111  x
  1495     0   258    35     0    44     1      60  )
  1496     0   258    37     0    44     1      63  {
  1497     0   258    39     0    44     1      19  return
  1498     0   258    46     0    44     1      59  (
  1499     0   258    51     0    44     1      60  )
  1500     0   258    52     0    44     1      59  (
  1501     0   258    53     0    44     1     111  x
  1502     0   258    55     0    44     1      84  >>
  1503     0   258    59     0    44     1     112  8
  1504     0   258    60     0    44     1      60  )
  1505     0   258    61     0    44     1     102  ;
  1506     0   258    63     0    44     1      64  }
  1507     0   258    63     0    44     0     212  ENDMETHOD
  1508     0   258    63     0    45     0     213  STARTMETHOD
  1509     0   259     5     0    45     1      41  private
  1510     0   259    13     0    45     1      45  static
  1511     0   259    25     0    45     1     111  int0
  1512     0   259    29     0    45     1      59  (
  1513     0   259    30     0    45     1      36  int
  1514     0   259    34     0    45     1     111  x
  1515     0   259    35     0    45     1      60  )
  1516     0   259    37     0    45     1      63  {
  1517     0   259    39     0    45     1      19  return
  1518     0   259    46     0    45     1      59  (
  1519     0   259    51     0    45     1      60  )
  1520     0   259    52     0    45     1      59  (
  1521     0   259    53     0    45     1     111  x
  1522     0   259    55     0    45     1      84  >>
  1523     0   259    59     0    45     1     112  0
  1524     0   259    60     0    45     1      60  )
  1525     0   259    61     0    45     1     102  ;
  1526     0   259    63     0    45     1      64  }
  1527     0   259    63     0    45     0     214  ENDMETHOD
  1528     0   259    63     0    46     0     215  STARTMETHOD
  1529     0   261     5     0    46     0      45  static
  1530     0   261    12     0    46     0      50  void
  1531     0   261    17     0    46     0     111  putIntL
  1532     0   261    24     0    46     0      59  (
  1533     0   261    25     0    46     0     111  ByteBuffer
  1534     0   261    36     0    46     0     111  bb
  1535     0   261    38     0    46     0      66  ,
  1536     0   261    40     0    46     0      36  int
  1537     0   261    44     0    46     0     111  bi
  1538     0   261    46     0    46     0      66  ,
  1539     0   261    48     0    46     0      36  int
  1540     0   261    52     0    46     0     111  x
  1541     0   261    53     0    46     0      60  )
  1542     0   261    55     0    46     0      63  {
  1543     0   262     9     0    46     1     111  bb._put
  1544     0   262    16     0    46     1      59  (
  1545     0   262    17     0    46     1     111  bi
  1546     0   262    20     0    46     1      74  +
  1547     0   262    22     0    46     1     112  3
  1548     0   262    23     0    46     1      66  ,
  1549     0   262    25     0    46     1     111  int3
  1550     0   262    29     0    46     1      59  (
  1551     0   262    30     0    46     1     111  x
  1552     0   262    31     0    46     1      60  )
  1553     0   262    32     0    46     1      60  )
  1554     0   262    33     0    46     1     102  ;
  1555     0   263     9     0    46     1     111  bb._put
  1556     0   263    16     0    46     1      59  (
  1557     0   263    17     0    46     1     111  bi
  1558     0   263    20     0    46     1      74  +
  1559     0   263    22     0    46     1     112  2
  1560     0   263    23     0    46     1      66  ,
  1561     0   263    25     0    46     1     111  int2
  1562     0   263    29     0    46     1      59  (
  1563     0   263    30     0    46     1     111  x
  1564     0   263    31     0    46     1      60  )
  1565     0   263    32     0    46     1      60  )
  1566     0   263    33     0    46     1     102  ;
  1567     0   264     9     0    46     1     111  bb._put
  1568     0   264    16     0    46     1      59  (
  1569     0   264    17     0    46     1     111  bi
  1570     0   264    20     0    46     1      74  +
  1571     0   264    22     0    46     1     112  1
  1572     0   264    23     0    46     1      66  ,
  1573     0   264    25     0    46     1     111  int1
  1574     0   264    29     0    46     1      59  (
  1575     0   264    30     0    46     1     111  x
  1576     0   264    31     0    46     1      60  )
  1577     0   264    32     0    46     1      60  )
  1578     0   264    33     0    46     1     102  ;
  1579     0   265     9     0    46     1     111  bb._put
  1580     0   265    16     0    46     1      59  (
  1581     0   265    17     0    46     1     111  bi
  1582     0   265    20     0    46     1      74  +
  1583     0   265    22     0    46     1     112  0
  1584     0   265    23     0    46     1      66  ,
  1585     0   265    25     0    46     1     111  int0
  1586     0   265    29     0    46     1      59  (
  1587     0   265    30     0    46     1     111  x
  1588     0   265    31     0    46     1      60  )
  1589     0   265    32     0    46     1      60  )
  1590     0   265    33     0    46     1     102  ;
  1591     0   266     5     0    46     0      64  }
  1592     0   266     5     0    46     0     216  ENDMETHOD
  1593     0   266     5     0    47     0     217  STARTMETHOD
  1594     0   268     5     0    47     0      45  static
  1595     0   268    12     0    47     0      50  void
  1596     0   268    17     0    47     0     111  putIntL
  1597     0   268    24     0    47     0      59  (
  1598     0   268    25     0    47     0      53  long
  1599     0   268    30     0    47     0     111  a
  1600     0   268    31     0    47     0      66  ,
  1601     0   268    33     0    47     0      36  int
  1602     0   268    37     0    47     0     111  x
  1603     0   268    38     0    47     0      60  )
  1604     0   268    40     0    47     0      63  {
  1605     0   269     9     0    47     1     111  _put
  1606     0   269    13     0    47     1      59  (
  1607     0   269    14     0    47     1     111  a
  1608     0   269    16     0    47     1      74  +
  1609     0   269    18     0    47     1     112  3
  1610     0   269    19     0    47     1      66  ,
  1611     0   269    21     0    47     1     111  int3
  1612     0   269    25     0    47     1      59  (
  1613     0   269    26     0    47     1     111  x
  1614     0   269    27     0    47     1      60  )
  1615     0   269    28     0    47     1      60  )
  1616     0   269    29     0    47     1     102  ;
  1617     0   270     9     0    47     1     111  _put
  1618     0   270    13     0    47     1      59  (
  1619     0   270    14     0    47     1     111  a
  1620     0   270    16     0    47     1      74  +
  1621     0   270    18     0    47     1     112  2
  1622     0   270    19     0    47     1      66  ,
  1623     0   270    21     0    47     1     111  int2
  1624     0   270    25     0    47     1      59  (
  1625     0   270    26     0    47     1     111  x
  1626     0   270    27     0    47     1      60  )
  1627     0   270    28     0    47     1      60  )
  1628     0   270    29     0    47     1     102  ;
  1629     0   271     9     0    47     1     111  _put
  1630     0   271    13     0    47     1      59  (
  1631     0   271    14     0    47     1     111  a
  1632     0   271    16     0    47     1      74  +
  1633     0   271    18     0    47     1     112  1
  1634     0   271    19     0    47     1      66  ,
  1635     0   271    21     0    47     1     111  int1
  1636     0   271    25     0    47     1      59  (
  1637     0   271    26     0    47     1     111  x
  1638     0   271    27     0    47     1      60  )
  1639     0   271    28     0    47     1      60  )
  1640     0   271    29     0    47     1     102  ;
  1641     0   272     9     0    47     1     111  _put
  1642     0   272    13     0    47     1      59  (
  1643     0   272    14     0    47     1     111  a
  1644     0   272    16     0    47     1      74  +
  1645     0   272    18     0    47     1     112  0
  1646     0   272    19     0    47     1      66  ,
  1647     0   272    21     0    47     1     111  int0
  1648     0   272    25     0    47     1      59  (
  1649     0   272    26     0    47     1     111  x
  1650     0   272    27     0    47     1      60  )
  1651     0   272    28     0    47     1      60  )
  1652     0   272    29     0    47     1     102  ;
  1653     0   273     5     0    47     0      64  }
  1654     0   273     5     0    47     0     218  ENDMETHOD
  1655     0   273     5     0    48     0     219  STARTMETHOD
  1656     0   275     5     0    48     0      45  static
  1657     0   275    12     0    48     0      50  void
  1658     0   275    17     0    48     0     111  putIntB
  1659     0   275    24     0    48     0      59  (
  1660     0   275    25     0    48     0     111  ByteBuffer
  1661     0   275    36     0    48     0     111  bb
  1662     0   275    38     0    48     0      66  ,
  1663     0   275    40     0    48     0      36  int
  1664     0   275    44     0    48     0     111  bi
  1665     0   275    46     0    48     0      66  ,
  1666     0   275    48     0    48     0      36  int
  1667     0   275    52     0    48     0     111  x
  1668     0   275    53     0    48     0      60  )
  1669     0   275    55     0    48     0      63  {
  1670     0   276     9     0    48     1     111  bb._put
  1671     0   276    16     0    48     1      59  (
  1672     0   276    17     0    48     1     111  bi
  1673     0   276    20     0    48     1      74  +
  1674     0   276    22     0    48     1     112  0
  1675     0   276    23     0    48     1      66  ,
  1676     0   276    25     0    48     1     111  int3
  1677     0   276    29     0    48     1      59  (
  1678     0   276    30     0    48     1     111  x
  1679     0   276    31     0    48     1      60  )
  1680     0   276    32     0    48     1      60  )
  1681     0   276    33     0    48     1     102  ;
  1682     0   277     9     0    48     1     111  bb._put
  1683     0   277    16     0    48     1      59  (
  1684     0   277    17     0    48     1     111  bi
  1685     0   277    20     0    48     1      74  +
  1686     0   277    22     0    48     1     112  1
  1687     0   277    23     0    48     1      66  ,
  1688     0   277    25     0    48     1     111  int2
  1689     0   277    29     0    48     1      59  (
  1690     0   277    30     0    48     1     111  x
  1691     0   277    31     0    48     1      60  )
  1692     0   277    32     0    48     1      60  )
  1693     0   277    33     0    48     1     102  ;
  1694     0   278     9     0    48     1     111  bb._put
  1695     0   278    16     0    48     1      59  (
  1696     0   278    17     0    48     1     111  bi
  1697     0   278    20     0    48     1      74  +
  1698     0   278    22     0    48     1     112  2
  1699     0   278    23     0    48     1      66  ,
  1700     0   278    25     0    48     1     111  int1
  1701     0   278    29     0    48     1      59  (
  1702     0   278    30     0    48     1     111  x
  1703     0   278    31     0    48     1      60  )
  1704     0   278    32     0    48     1      60  )
  1705     0   278    33     0    48     1     102  ;
  1706     0   279     9     0    48     1     111  bb._put
  1707     0   279    16     0    48     1      59  (
  1708     0   279    17     0    48     1     111  bi
  1709     0   279    20     0    48     1      74  +
  1710     0   279    22     0    48     1     112  3
  1711     0   279    23     0    48     1      66  ,
  1712     0   279    25     0    48     1     111  int0
  1713     0   279    29     0    48     1      59  (
  1714     0   279    30     0    48     1     111  x
  1715     0   279    31     0    48     1      60  )
  1716     0   279    32     0    48     1      60  )
  1717     0   279    33     0    48     1     102  ;
  1718     0   280     5     0    48     0      64  }
  1719     0   280     5     0    48     0     220  ENDMETHOD
  1720     0   280     5     0    49     0     221  STARTMETHOD
  1721     0   282     5     0    49     0      45  static
  1722     0   282    12     0    49     0      50  void
  1723     0   282    17     0    49     0     111  putIntB
  1724     0   282    24     0    49     0      59  (
  1725     0   282    25     0    49     0      53  long
  1726     0   282    30     0    49     0     111  a
  1727     0   282    31     0    49     0      66  ,
  1728     0   282    33     0    49     0      36  int
  1729     0   282    37     0    49     0     111  x
  1730     0   282    38     0    49     0      60  )
  1731     0   282    40     0    49     0      63  {
  1732     0   283     9     0    49     1     111  _put
  1733     0   283    13     0    49     1      59  (
  1734     0   283    14     0    49     1     111  a
  1735     0   283    16     0    49     1      74  +
  1736     0   283    18     0    49     1     112  0
  1737     0   283    19     0    49     1      66  ,
  1738     0   283    21     0    49     1     111  int3
  1739     0   283    25     0    49     1      59  (
  1740     0   283    26     0    49     1     111  x
  1741     0   283    27     0    49     1      60  )
  1742     0   283    28     0    49     1      60  )
  1743     0   283    29     0    49     1     102  ;
  1744     0   284     9     0    49     1     111  _put
  1745     0   284    13     0    49     1      59  (
  1746     0   284    14     0    49     1     111  a
  1747     0   284    16     0    49     1      74  +
  1748     0   284    18     0    49     1     112  1
  1749     0   284    19     0    49     1      66  ,
  1750     0   284    21     0    49     1     111  int2
  1751     0   284    25     0    49     1      59  (
  1752     0   284    26     0    49     1     111  x
  1753     0   284    27     0    49     1      60  )
  1754     0   284    28     0    49     1      60  )
  1755     0   284    29     0    49     1     102  ;
  1756     0   285     9     0    49     1     111  _put
  1757     0   285    13     0    49     1      59  (
  1758     0   285    14     0    49     1     111  a
  1759     0   285    16     0    49     1      74  +
  1760     0   285    18     0    49     1     112  2
  1761     0   285    19     0    49     1      66  ,
  1762     0   285    21     0    49     1     111  int1
  1763     0   285    25     0    49     1      59  (
  1764     0   285    26     0    49     1     111  x
  1765     0   285    27     0    49     1      60  )
  1766     0   285    28     0    49     1      60  )
  1767     0   285    29     0    49     1     102  ;
  1768     0   286     9     0    49     1     111  _put
  1769     0   286    13     0    49     1      59  (
  1770     0   286    14     0    49     1     111  a
  1771     0   286    16     0    49     1      74  +
  1772     0   286    18     0    49     1     112  3
  1773     0   286    19     0    49     1      66  ,
  1774     0   286    21     0    49     1     111  int0
  1775     0   286    25     0    49     1      59  (
  1776     0   286    26     0    49     1     111  x
  1777     0   286    27     0    49     1      60  )
  1778     0   286    28     0    49     1      60  )
  1779     0   286    29     0    49     1     102  ;
  1780     0   287     5     0    49     0      64  }
  1781     0   287     5     0    49     0     222  ENDMETHOD
  1782     0   287     5     0    50     0     223  STARTMETHOD
  1783     0   289     5     0    50     0      45  static
  1784     0   289    12     0    50     0      50  void
  1785     0   289    17     0    50     0     111  putInt
  1786     0   289    23     0    50     0      59  (
  1787     0   289    24     0    50     0     111  ByteBuffer
  1788     0   289    35     0    50     0     111  bb
  1789     0   289    37     0    50     0      66  ,
  1790     0   289    39     0    50     0      36  int
  1791     0   289    43     0    50     0     111  bi
  1792     0   289    45     0    50     0      66  ,
  1793     0   289    47     0    50     0      36  int
  1794     0   289    51     0    50     0     111  x
  1795     0   289    52     0    50     0      66  ,
  1796     0   289    54     0    50     0      39  boolean
  1797     0   289    62     0    50     0     111  bigEndian
  1798     0   289    71     0    50     0      60  )
  1799     0   289    73     0    50     0      63  {
  1800     0   290     9     0    50     0      31  if
  1801     0   290    12     0    50     0      59  (
  1802     0   290    13     0    50     0     111  bigEndian
  1803     0   290    22     0    50     0      60  )
  1804     0   291    13     0    50     0     111  putIntB
  1805     0   291    20     0    50     0      59  (
  1806     0   291    21     0    50     0     111  bb
  1807     0   291    23     0    50     0      66  ,
  1808     0   291    25     0    50     0     111  bi
  1809     0   291    27     0    50     0      66  ,
  1810     0   291    29     0    50     0     111  x
  1811     0   291    30     0    50     0      60  )
  1812     0   291    31     0    50     0     102  ;
  1813     0   292     9     0    50     0      48  else
  1814     0   293    13     0    50     0     111  putIntL
  1815     0   293    20     0    50     0      59  (
  1816     0   293    21     0    50     0     111  bb
  1817     0   293    23     0    50     0      66  ,
  1818     0   293    25     0    50     0     111  bi
  1819     0   293    27     0    50     0      66  ,
  1820     0   293    29     0    50     0     111  x
  1821     0   293    30     0    50     0      60  )
  1822     0   293    31     0    50     0     102  ;
  1823     0   294     5     0    50     0      64  }
  1824     0   294     5     0    50     0     224  ENDMETHOD
  1825     0   294     5     0    51     0     225  STARTMETHOD
  1826     0   296     5     0    51     0      45  static
  1827     0   296    12     0    51     0      50  void
  1828     0   296    17     0    51     0     111  putInt
  1829     0   296    23     0    51     0      59  (
  1830     0   296    24     0    51     0      53  long
  1831     0   296    29     0    51     0     111  a
  1832     0   296    30     0    51     0      66  ,
  1833     0   296    32     0    51     0      36  int
  1834     0   296    36     0    51     0     111  x
  1835     0   296    37     0    51     0      66  ,
  1836     0   296    39     0    51     0      39  boolean
  1837     0   296    47     0    51     0     111  bigEndian
  1838     0   296    56     0    51     0      60  )
  1839     0   296    58     0    51     0      63  {
  1840     0   297     9     0    51     0      31  if
  1841     0   297    12     0    51     0      59  (
  1842     0   297    13     0    51     0     111  bigEndian
  1843     0   297    22     0    51     0      60  )
  1844     0   298    13     0    51     0     111  putIntB
  1845     0   298    20     0    51     0      59  (
  1846     0   298    21     0    51     0     111  a
  1847     0   298    22     0    51     0      66  ,
  1848     0   298    24     0    51     0     111  x
  1849     0   298    25     0    51     0      60  )
  1850     0   298    26     0    51     0     102  ;
  1851     0   299     9     0    51     0      48  else
  1852     0   300    13     0    51     0     111  putIntL
  1853     0   300    20     0    51     0      59  (
  1854     0   300    21     0    51     0     111  a
  1855     0   300    22     0    51     0      66  ,
  1856     0   300    24     0    51     0     111  x
  1857     0   300    25     0    51     0      60  )
  1858     0   300    26     0    51     0     102  ;
  1859     0   301     5     0    51     0      64  }
  1860     0   301     5     0    51     0     226  ENDMETHOD
  1861     0   301     5     0    52     0     227  STARTMETHOD
  1862     0   306     5     0    52     0      45  static
  1863     0   306    12     0    52     0      41  private
  1864     0   306    20     0    52     0      53  long
  1865     0   306    25     0    52     0     111  makeLong
  1866     0   306    33     0    52     0      59  (
  1867     0   306    39     0    52     0     111  b7
  1868     0   306    41     0    52     0      66  ,
  1869     0   306    48     0    52     0     111  b6
  1870     0   306    50     0    52     0      66  ,
  1871     0   306    57     0    52     0     111  b5
  1872     0   306    59     0    52     0      66  ,
  1873     0   306    66     0    52     0     111  b4
  1874     0   306    68     0    52     0      66  ,
  1875     0   307    39     0    52     0     111  b3
  1876     0   307    41     0    52     0      66  ,
  1877     0   307    48     0    52     0     111  b2
  1878     0   307    50     0    52     0      66  ,
  1879     0   307    57     0    52     0     111  b1
  1880     0   307    59     0    52     0      66  ,
  1881     0   307    66     0    52     0     111  b0
  1882     0   307    68     0    52     0      60  )
  1883     0   308     5     0    52     0      63  {
  1884     0   309     9     0    52     0      19  return
  1885     0   309    16     0    52     0      59  (
  1886     0   309    17     0    52     1      59  (
  1887     0   309    18     0    52     1      59  (
  1888     0   309    19     0    52     1      59  (
  1889     0   309    20     0    52     1      53  long
  1890     0   309    24     0    52     1      60  )
  1891     0   309    25     0    52     1     111  b7
  1892     0   309    28     0    52     1      99  &
  1893     0   309    30     0    52     1     112  0xff
  1894     0   309    34     0    52     1      60  )
  1895     0   309    36     0    52     1      90  <<
  1896     0   309    39     0    52     1     112  56
  1897     0   309    41     0    52     1      60  )
  1898     0   309    43     0    52     1      96  |
  1899     0   310    17     0    52     1      59  (
  1900     0   310    18     0    52     1      59  (
  1901     0   310    19     0    52     1      59  (
  1902     0   310    20     0    52     1      53  long
  1903     0   310    24     0    52     1      60  )
  1904     0   310    25     0    52     1     111  b6
  1905     0   310    28     0    52     1      99  &
  1906     0   310    30     0    52     1     112  0xff
  1907     0   310    34     0    52     1      60  )
  1908     0   310    36     0    52     1      90  <<
  1909     0   310    39     0    52     1     112  48
  1910     0   310    41     0    52     1      60  )
  1911     0   310    43     0    52     1      96  |
  1912     0   311    17     0    52     1      59  (
  1913     0   311    18     0    52     1      59  (
  1914     0   311    19     0    52     1      59  (
  1915     0   311    20     0    52     1      53  long
  1916     0   311    24     0    52     1      60  )
  1917     0   311    25     0    52     1     111  b5
  1918     0   311    28     0    52     1      99  &
  1919     0   311    30     0    52     1     112  0xff
  1920     0   311    34     0    52     1      60  )
  1921     0   311    36     0    52     1      90  <<
  1922     0   311    39     0    52     1     112  40
  1923     0   311    41     0    52     1      60  )
  1924     0   311    43     0    52     1      96  |
  1925     0   312    17     0    52     1      59  (
  1926     0   312    18     0    52     1      59  (
  1927     0   312    19     0    52     1      59  (
  1928     0   312    20     0    52     1      53  long
  1929     0   312    24     0    52     1      60  )
  1930     0   312    25     0    52     1     111  b4
  1931     0   312    28     0    52     1      99  &
  1932     0   312    30     0    52     1     112  0xff
  1933     0   312    34     0    52     1      60  )
  1934     0   312    36     0    52     1      90  <<
  1935     0   312    39     0    52     1     112  32
  1936     0   312    41     0    52     1      60  )
  1937     0   312    43     0    52     1      96  |
  1938     0   313    17     0    52     1      59  (
  1939     0   313    18     0    52     1      59  (
  1940     0   313    19     0    52     1      59  (
  1941     0   313    20     0    52     1      53  long
  1942     0   313    24     0    52     1      60  )
  1943     0   313    25     0    52     1     111  b3
  1944     0   313    28     0    52     1      99  &
  1945     0   313    30     0    52     1     112  0xff
  1946     0   313    34     0    52     1      60  )
  1947     0   313    36     0    52     1      90  <<
  1948     0   313    39     0    52     1     112  24
  1949     0   313    41     0    52     1      60  )
  1950     0   313    43     0    52     1      96  |
  1951     0   314    17     0    52     1      59  (
  1952     0   314    18     0    52     1      59  (
  1953     0   314    19     0    52     1      59  (
  1954     0   314    20     0    52     1      53  long
  1955     0   314    24     0    52     1      60  )
  1956     0   314    25     0    52     1     111  b2
  1957     0   314    28     0    52     1      99  &
  1958     0   314    30     0    52     1     112  0xff
  1959     0   314    34     0    52     1      60  )
  1960     0   314    36     0    52     1      90  <<
  1961     0   314    39     0    52     1     112  16
  1962     0   314    41     0    52     1      60  )
  1963     0   314    43     0    52     1      96  |
  1964     0   315    17     0    52     1      59  (
  1965     0   315    18     0    52     1      59  (
  1966     0   315    19     0    52     1      59  (
  1967     0   315    20     0    52     1      53  long
  1968     0   315    24     0    52     1      60  )
  1969     0   315    25     0    52     1     111  b1
  1970     0   315    28     0    52     1      99  &
  1971     0   315    30     0    52     1     112  0xff
  1972     0   315    34     0    52     1      60  )
  1973     0   315    36     0    52     1      90  <<
  1974     0   315    40     0    52     1     112  8
  1975     0   315    41     0    52     1      60  )
  1976     0   315    43     0    52     1      96  |
  1977     0   316    17     0    52     1      59  (
  1978     0   316    18     0    52     1      59  (
  1979     0   316    19     0    52     1      59  (
  1980     0   316    20     0    52     1      53  long
  1981     0   316    24     0    52     1      60  )
  1982     0   316    25     0    52     1     111  b0
  1983     0   316    28     0    52     1      99  &
  1984     0   316    30     0    52     1     112  0xff
  1985     0   316    34     0    52     0      60  )
  1986     0   316    36     0    52     0      90  <<
  1987     0   316    40     0    52     0     112  0
  1988     0   316    41     0    52     0      60  )
  1989     0   316    42     0    52     0      60  )
  1990     0   316    43     0    52     0     102  ;
  1991     0   317     5     0    52     0      64  }
  1992     0   317     5     0    52     0     228  ENDMETHOD
  1993     0   317     5     0    53     0     229  STARTMETHOD
  1994     0   319     5     0    53     0      45  static
  1995     0   319    12     0    53     0      53  long
  1996     0   319    17     0    53     0     111  getLongL
  1997     0   319    25     0    53     0      59  (
  1998     0   319    26     0    53     0     111  ByteBuffer
  1999     0   319    37     0    53     0     111  bb
  2000     0   319    39     0    53     0      66  ,
  2001     0   319    41     0    53     0      36  int
  2002     0   319    45     0    53     0     111  bi
  2003     0   319    47     0    53     0      60  )
  2004     0   319    49     0    53     0      63  {
  2005     0   320     9     0    53     0      19  return
  2006     0   320    16     0    53     0     111  makeLong
  2007     0   320    24     0    53     0      59  (
  2008     0   320    25     0    53     0     111  bb._get
  2009     0   320    32     0    53     0      59  (
  2010     0   320    33     0    53     0     111  bi
  2011     0   320    36     0    53     0      74  +
  2012     0   320    38     0    53     0     112  7
  2013     0   320    39     0    53     0      60  )
  2014     0   320    40     0    53     0      66  ,
  2015     0   321    25     0    53     1     111  bb._get
  2016     0   321    32     0    53     1      59  (
  2017     0   321    33     0    53     1     111  bi
  2018     0   321    36     0    53     1      74  +
  2019     0   321    38     0    53     1     112  6
  2020     0   321    39     0    53     1      60  )
  2021     0   321    40     0    53     1      66  ,
  2022     0   322    25     0    53     1     111  bb._get
  2023     0   322    32     0    53     1      59  (
  2024     0   322    33     0    53     1     111  bi
  2025     0   322    36     0    53     1      74  +
  2026     0   322    38     0    53     1     112  5
  2027     0   322    39     0    53     1      60  )
  2028     0   322    40     0    53     1      66  ,
  2029     0   323    25     0    53     1     111  bb._get
  2030     0   323    32     0    53     1      59  (
  2031     0   323    33     0    53     1     111  bi
  2032     0   323    36     0    53     1      74  +
  2033     0   323    38     0    53     1     112  4
  2034     0   323    39     0    53     1      60  )
  2035     0   323    40     0    53     1      66  ,
  2036     0   324    25     0    53     1     111  bb._get
  2037     0   324    32     0    53     1      59  (
  2038     0   324    33     0    53     1     111  bi
  2039     0   324    36     0    53     1      74  +
  2040     0   324    38     0    53     1     112  3
  2041     0   324    39     0    53     1      60  )
  2042     0   324    40     0    53     1      66  ,
  2043     0   325    25     0    53     1     111  bb._get
  2044     0   325    32     0    53     1      59  (
  2045     0   325    33     0    53     1     111  bi
  2046     0   325    36     0    53     1      74  +
  2047     0   325    38     0    53     1     112  2
  2048     0   325    39     0    53     1      60  )
  2049     0   325    40     0    53     1      66  ,
  2050     0   326    25     0    53     1     111  bb._get
  2051     0   326    32     0    53     1      59  (
  2052     0   326    33     0    53     1     111  bi
  2053     0   326    36     0    53     1      74  +
  2054     0   326    38     0    53     1     112  1
  2055     0   326    39     0    53     1      60  )
  2056     0   326    40     0    53     1      66  ,
  2057     0   327    25     0    53     0     111  bb._get
  2058     0   327    32     0    53     0      59  (
  2059     0   327    33     0    53     0     111  bi
  2060     0   327    36     0    53     0      74  +
  2061     0   327    38     0    53     0     112  0
  2062     0   327    39     0    53     0      60  )
  2063     0   327    40     0    53     0      60  )
  2064     0   327    41     0    53     0     102  ;
  2065     0   328     5     0    53     0      64  }
  2066     0   328     5     0    53     0     230  ENDMETHOD
  2067     0   328     5     0    54     0     231  STARTMETHOD
  2068     0   330     5     0    54     0      45  static
  2069     0   330    12     0    54     0      53  long
  2070     0   330    17     0    54     0     111  getLongL
  2071     0   330    25     0    54     0      59  (
  2072     0   330    26     0    54     0      53  long
  2073     0   330    31     0    54     0     111  a
  2074     0   330    32     0    54     0      60  )
  2075     0   330    34     0    54     0      63  {
  2076     0   331     9     0    54     0      19  return
  2077     0   331    16     0    54     0     111  makeLong
  2078     0   331    24     0    54     0      59  (
  2079     0   331    25     0    54     0     111  _get
  2080     0   331    29     0    54     0      59  (
  2081     0   331    30     0    54     0     111  a
  2082     0   331    32     0    54     0      74  +
  2083     0   331    34     0    54     0     112  7
  2084     0   331    35     0    54     0      60  )
  2085     0   331    36     0    54     0      66  ,
  2086     0   332    25     0    54     1     111  _get
  2087     0   332    29     0    54     1      59  (
  2088     0   332    30     0    54     1     111  a
  2089     0   332    32     0    54     1      74  +
  2090     0   332    34     0    54     1     112  6
  2091     0   332    35     0    54     1      60  )
  2092     0   332    36     0    54     1      66  ,
  2093     0   333    25     0    54     1     111  _get
  2094     0   333    29     0    54     1      59  (
  2095     0   333    30     0    54     1     111  a
  2096     0   333    32     0    54     1      74  +
  2097     0   333    34     0    54     1     112  5
  2098     0   333    35     0    54     1      60  )
  2099     0   333    36     0    54     1      66  ,
  2100     0   334    25     0    54     1     111  _get
  2101     0   334    29     0    54     1      59  (
  2102     0   334    30     0    54     1     111  a
  2103     0   334    32     0    54     1      74  +
  2104     0   334    34     0    54     1     112  4
  2105     0   334    35     0    54     1      60  )
  2106     0   334    36     0    54     1      66  ,
  2107     0   335    25     0    54     1     111  _get
  2108     0   335    29     0    54     1      59  (
  2109     0   335    30     0    54     1     111  a
  2110     0   335    32     0    54     1      74  +
  2111     0   335    34     0    54     1     112  3
  2112     0   335    35     0    54     1      60  )
  2113     0   335    36     0    54     1      66  ,
  2114     0   336    25     0    54     1     111  _get
  2115     0   336    29     0    54     1      59  (
  2116     0   336    30     0    54     1     111  a
  2117     0   336    32     0    54     1      74  +
  2118     0   336    34     0    54     1     112  2
  2119     0   336    35     0    54     1      60  )
  2120     0   336    36     0    54     1      66  ,
  2121     0   337    25     0    54     1     111  _get
  2122     0   337    29     0    54     1      59  (
  2123     0   337    30     0    54     1     111  a
  2124     0   337    32     0    54     1      74  +
  2125     0   337    34     0    54     1     112  1
  2126     0   337    35     0    54     1      60  )
  2127     0   337    36     0    54     1      66  ,
  2128     0   338    25     0    54     0     111  _get
  2129     0   338    29     0    54     0      59  (
  2130     0   338    30     0    54     0     111  a
  2131     0   338    32     0    54     0      74  +
  2132     0   338    34     0    54     0     112  0
  2133     0   338    35     0    54     0      60  )
  2134     0   338    36     0    54     0      60  )
  2135     0   338    37     0    54     0     102  ;
  2136     0   339     5     0    54     0      64  }
  2137     0   339     5     0    54     0     232  ENDMETHOD
  2138     0   339     5     0    55     0     233  STARTMETHOD
  2139     0   341     5     0    55     0      45  static
  2140     0   341    12     0    55     0      53  long
  2141     0   341    17     0    55     0     111  getLongB
  2142     0   341    25     0    55     0      59  (
  2143     0   341    26     0    55     0     111  ByteBuffer
  2144     0   341    37     0    55     0     111  bb
  2145     0   341    39     0    55     0      66  ,
  2146     0   341    41     0    55     0      36  int
  2147     0   341    45     0    55     0     111  bi
  2148     0   341    47     0    55     0      60  )
  2149     0   341    49     0    55     0      63  {
  2150     0   342     9     0    55     0      19  return
  2151     0   342    16     0    55     0     111  makeLong
  2152     0   342    24     0    55     0      59  (
  2153     0   342    25     0    55     0     111  bb._get
  2154     0   342    32     0    55     0      59  (
  2155     0   342    33     0    55     0     111  bi
  2156     0   342    36     0    55     0      74  +
  2157     0   342    38     0    55     0     112  0
  2158     0   342    39     0    55     0      60  )
  2159     0   342    40     0    55     0      66  ,
  2160     0   343    25     0    55     1     111  bb._get
  2161     0   343    32     0    55     1      59  (
  2162     0   343    33     0    55     1     111  bi
  2163     0   343    36     0    55     1      74  +
  2164     0   343    38     0    55     1     112  1
  2165     0   343    39     0    55     1      60  )
  2166     0   343    40     0    55     1      66  ,
  2167     0   344    25     0    55     1     111  bb._get
  2168     0   344    32     0    55     1      59  (
  2169     0   344    33     0    55     1     111  bi
  2170     0   344    36     0    55     1      74  +
  2171     0   344    38     0    55     1     112  2
  2172     0   344    39     0    55     1      60  )
  2173     0   344    40     0    55     1      66  ,
  2174     0   345    25     0    55     1     111  bb._get
  2175     0   345    32     0    55     1      59  (
  2176     0   345    33     0    55     1     111  bi
  2177     0   345    36     0    55     1      74  +
  2178     0   345    38     0    55     1     112  3
  2179     0   345    39     0    55     1      60  )
  2180     0   345    40     0    55     1      66  ,
  2181     0   346    25     0    55     1     111  bb._get
  2182     0   346    32     0    55     1      59  (
  2183     0   346    33     0    55     1     111  bi
  2184     0   346    36     0    55     1      74  +
  2185     0   346    38     0    55     1     112  4
  2186     0   346    39     0    55     1      60  )
  2187     0   346    40     0    55     1      66  ,
  2188     0   347    25     0    55     1     111  bb._get
  2189     0   347    32     0    55     1      59  (
  2190     0   347    33     0    55     1     111  bi
  2191     0   347    36     0    55     1      74  +
  2192     0   347    38     0    55     1     112  5
  2193     0   347    39     0    55     1      60  )
  2194     0   347    40     0    55     1      66  ,
  2195     0   348    25     0    55     1     111  bb._get
  2196     0   348    32     0    55     1      59  (
  2197     0   348    33     0    55     1     111  bi
  2198     0   348    36     0    55     1      74  +
  2199     0   348    38     0    55     1     112  6
  2200     0   348    39     0    55     1      60  )
  2201     0   348    40     0    55     1      66  ,
  2202     0   349    25     0    55     0     111  bb._get
  2203     0   349    32     0    55     0      59  (
  2204     0   349    33     0    55     0     111  bi
  2205     0   349    36     0    55     0      74  +
  2206     0   349    38     0    55     0     112  7
  2207     0   349    39     0    55     0      60  )
  2208     0   349    40     0    55     0      60  )
  2209     0   349    41     0    55     0     102  ;
  2210     0   350     5     0    55     0      64  }
  2211     0   350     5     0    55     0     234  ENDMETHOD
  2212     0   350     5     0    56     0     235  STARTMETHOD
  2213     0   352     5     0    56     0      45  static
  2214     0   352    12     0    56     0      53  long
  2215     0   352    17     0    56     0     111  getLongB
  2216     0   352    25     0    56     0      59  (
  2217     0   352    26     0    56     0      53  long
  2218     0   352    31     0    56     0     111  a
  2219     0   352    32     0    56     0      60  )
  2220     0   352    34     0    56     0      63  {
  2221     0   353     9     0    56     0      19  return
  2222     0   353    16     0    56     0     111  makeLong
  2223     0   353    24     0    56     0      59  (
  2224     0   353    25     0    56     0     111  _get
  2225     0   353    29     0    56     0      59  (
  2226     0   353    30     0    56     0     111  a
  2227     0   353    32     0    56     0      74  +
  2228     0   353    34     0    56     0     112  0
  2229     0   353    35     0    56     0      60  )
  2230     0   353    36     0    56     0      66  ,
  2231     0   354    25     0    56     1     111  _get
  2232     0   354    29     0    56     1      59  (
  2233     0   354    30     0    56     1     111  a
  2234     0   354    32     0    56     1      74  +
  2235     0   354    34     0    56     1     112  1
  2236     0   354    35     0    56     1      60  )
  2237     0   354    36     0    56     1      66  ,
  2238     0   355    25     0    56     1     111  _get
  2239     0   355    29     0    56     1      59  (
  2240     0   355    30     0    56     1     111  a
  2241     0   355    32     0    56     1      74  +
  2242     0   355    34     0    56     1     112  2
  2243     0   355    35     0    56     1      60  )
  2244     0   355    36     0    56     1      66  ,
  2245     0   356    25     0    56     1     111  _get
  2246     0   356    29     0    56     1      59  (
  2247     0   356    30     0    56     1     111  a
  2248     0   356    32     0    56     1      74  +
  2249     0   356    34     0    56     1     112  3
  2250     0   356    35     0    56     1      60  )
  2251     0   356    36     0    56     1      66  ,
  2252     0   357    25     0    56     1     111  _get
  2253     0   357    29     0    56     1      59  (
  2254     0   357    30     0    56     1     111  a
  2255     0   357    32     0    56     1      74  +
  2256     0   357    34     0    56     1     112  4
  2257     0   357    35     0    56     1      60  )
  2258     0   357    36     0    56     1      66  ,
  2259     0   358    25     0    56     1     111  _get
  2260     0   358    29     0    56     1      59  (
  2261     0   358    30     0    56     1     111  a
  2262     0   358    32     0    56     1      74  +
  2263     0   358    34     0    56     1     112  5
  2264     0   358    35     0    56     1      60  )
  2265     0   358    36     0    56     1      66  ,
  2266     0   359    25     0    56     1     111  _get
  2267     0   359    29     0    56     1      59  (
  2268     0   359    30     0    56     1     111  a
  2269     0   359    32     0    56     1      74  +
  2270     0   359    34     0    56     1     112  6
  2271     0   359    35     0    56     1      60  )
  2272     0   359    36     0    56     1      66  ,
  2273     0   360    25     0    56     0     111  _get
  2274     0   360    29     0    56     0      59  (
  2275     0   360    30     0    56     0     111  a
  2276     0   360    32     0    56     0      74  +
  2277     0   360    34     0    56     0     112  7
  2278     0   360    35     0    56     0      60  )
  2279     0   360    36     0    56     0      60  )
  2280     0   360    37     0    56     0     102  ;
  2281     0   361     5     0    56     0      64  }
  2282     0   361     5     0    56     0     236  ENDMETHOD
  2283     0   361     5     0    57     0     237  STARTMETHOD
  2284     0   363     5     0    57     0      45  static
  2285     0   363    12     0    57     0      53  long
  2286     0   363    17     0    57     0     111  getLong
  2287     0   363    24     0    57     0      59  (
  2288     0   363    25     0    57     0     111  ByteBuffer
  2289     0   363    36     0    57     0     111  bb
  2290     0   363    38     0    57     0      66  ,
  2291     0   363    40     0    57     0      36  int
  2292     0   363    44     0    57     0     111  bi
  2293     0   363    46     0    57     0      66  ,
  2294     0   363    48     0    57     0      39  boolean
  2295     0   363    56     0    57     0     111  bigEndian
  2296     0   363    65     0    57     0      60  )
  2297     0   363    67     0    57     0      63  {
  2298     0   364     9     0    57     0      19  return
  2299     0   364    16     0    57     0      59  (
  2300     0   364    17     0    57     0     111  bigEndian
  2301     0   364    27     0    57     0      58  ?
  2302     0   364    29     0    57     0     111  getLongB
  2303     0   364    37     0    57     0      59  (
  2304     0   364    38     0    57     0     111  bb
  2305     0   364    40     0    57     0      66  ,
  2306     0   364    42     0    57     0     111  bi
  2307     0   364    44     0    57     0      60  )
  2308     0   364    46     0    57     0      65  :
  2309     0   364    48     0    57     0     111  getLongL
  2310     0   364    56     0    57     0      59  (
  2311     0   364    57     0    57     0     111  bb
  2312     0   364    59     0    57     0      66  ,
  2313     0   364    61     0    57     0     111  bi
  2314     0   364    63     0    57     0      60  )
  2315     0   364    64     0    57     0      60  )
  2316     0   364    65     0    57     0     102  ;
  2317     0   365     5     0    57     0      64  }
  2318     0   365     5     0    57     0     238  ENDMETHOD
  2319     0   365     5     0    58     0     239  STARTMETHOD
  2320     0   367     5     0    58     0      45  static
  2321     0   367    12     0    58     0      53  long
  2322     0   367    17     0    58     0     111  getLong
  2323     0   367    24     0    58     0      59  (
  2324     0   367    25     0    58     0      53  long
  2325     0   367    30     0    58     0     111  a
  2326     0   367    31     0    58     0      66  ,
  2327     0   367    33     0    58     0      39  boolean
  2328     0   367    41     0    58     0     111  bigEndian
  2329     0   367    50     0    58     0      60  )
  2330     0   367    52     0    58     0      63  {
  2331     0   368     9     0    58     0      19  return
  2332     0   368    16     0    58     0      59  (
  2333     0   368    17     0    58     0     111  bigEndian
  2334     0   368    27     0    58     0      58  ?
  2335     0   368    29     0    58     0     111  getLongB
  2336     0   368    37     0    58     0      59  (
  2337     0   368    38     0    58     0     111  a
  2338     0   368    39     0    58     0      60  )
  2339     0   368    41     0    58     0      65  :
  2340     0   368    43     0    58     0     111  getLongL
  2341     0   368    51     0    58     0      59  (
  2342     0   368    52     0    58     0     111  a
  2343     0   368    53     0    58     0      60  )
  2344     0   368    54     0    58     1      60  )
  2345     0   368    55     0    58     1     102  ;
  2346     0   369     5     0    58     1      64  }
  2347     0   369     5     0    58     0     240  ENDMETHOD
  2348     0   369     5     0    59     0     241  STARTMETHOD
  2349     0   371     5     0    59     1      41  private
  2350     0   371    13     0    59     1      45  static
  2351     0   371    25     0    59     1     111  long7
  2352     0   371    30     0    59     1      59  (
  2353     0   371    31     0    59     1      53  long
  2354     0   371    36     0    59     1     111  x
  2355     0   371    37     0    59     1      60  )
  2356     0   371    39     0    59     1      63  {
  2357     0   371    41     0    59     1      19  return
  2358     0   371    48     0    59     1      59  (
  2359     0   371    53     0    59     1      60  )
  2360     0   371    54     0    59     1      59  (
  2361     0   371    55     0    59     1     111  x
  2362     0   371    57     0    59     1      84  >>
  2363     0   371    60     0    59     1     112  56
  2364     0   371    62     0    59     1      60  )
  2365     0   371    63     0    59     1     102  ;
  2366     0   371    65     0    59     1      64  }
  2367     0   371    65     0    59     0     242  ENDMETHOD
  2368     0   371    65     0    60     0     243  STARTMETHOD
  2369     0   372     5     0    60     1      41  private
  2370     0   372    13     0    60     1      45  static
  2371     0   372    25     0    60     1     111  long6
  2372     0   372    30     0    60     1      59  (
  2373     0   372    31     0    60     1      53  long
  2374     0   372    36     0    60     1     111  x
  2375     0   372    37     0    60     1      60  )
  2376     0   372    39     0    60     1      63  {
  2377     0   372    41     0    60     1      19  return
  2378     0   372    48     0    60     1      59  (
  2379     0   372    53     0    60     1      60  )
  2380     0   372    54     0    60     1      59  (
  2381     0   372    55     0    60     1     111  x
  2382     0   372    57     0    60     1      84  >>
  2383     0   372    60     0    60     1     112  48
  2384     0   372    62     0    60     1      60  )
  2385     0   372    63     0    60     1     102  ;
  2386     0   372    65     0    60     1      64  }
  2387     0   372    65     0    60     0     244  ENDMETHOD
  2388     0   372    65     0    61     0     245  STARTMETHOD
  2389     0   373     5     0    61     1      41  private
  2390     0   373    13     0    61     1      45  static
  2391     0   373    25     0    61     1     111  long5
  2392     0   373    30     0    61     1      59  (
  2393     0   373    31     0    61     1      53  long
  2394     0   373    36     0    61     1     111  x
  2395     0   373    37     0    61     1      60  )
  2396     0   373    39     0    61     1      63  {
  2397     0   373    41     0    61     1      19  return
  2398     0   373    48     0    61     1      59  (
  2399     0   373    53     0    61     1      60  )
  2400     0   373    54     0    61     1      59  (
  2401     0   373    55     0    61     1     111  x
  2402     0   373    57     0    61     1      84  >>
  2403     0   373    60     0    61     1     112  40
  2404     0   373    62     0    61     1      60  )
  2405     0   373    63     0    61     1     102  ;
  2406     0   373    65     0    61     1      64  }
  2407     0   373    65     0    61     0     246  ENDMETHOD
  2408     0   373    65     0    62     0     247  STARTMETHOD
  2409     0   374     5     0    62     1      41  private
  2410     0   374    13     0    62     1      45  static
  2411     0   374    25     0    62     1     111  long4
  2412     0   374    30     0    62     1      59  (
  2413     0   374    31     0    62     1      53  long
  2414     0   374    36     0    62     1     111  x
  2415     0   374    37     0    62     1      60  )
  2416     0   374    39     0    62     1      63  {
  2417     0   374    41     0    62     1      19  return
  2418     0   374    48     0    62     1      59  (
  2419     0   374    53     0    62     1      60  )
  2420     0   374    54     0    62     1      59  (
  2421     0   374    55     0    62     1     111  x
  2422     0   374    57     0    62     1      84  >>
  2423     0   374    60     0    62     1     112  32
  2424     0   374    62     0    62     1      60  )
  2425     0   374    63     0    62     1     102  ;
  2426     0   374    65     0    62     1      64  }
  2427     0   374    65     0    62     0     248  ENDMETHOD
  2428     0   374    65     0    63     0     249  STARTMETHOD
  2429     0   375     5     0    63     1      41  private
  2430     0   375    13     0    63     1      45  static
  2431     0   375    25     0    63     1     111  long3
  2432     0   375    30     0    63     1      59  (
  2433     0   375    31     0    63     1      53  long
  2434     0   375    36     0    63     1     111  x
  2435     0   375    37     0    63     1      60  )
  2436     0   375    39     0    63     1      63  {
  2437     0   375    41     0    63     1      19  return
  2438     0   375    48     0    63     1      59  (
  2439     0   375    53     0    63     1      60  )
  2440     0   375    54     0    63     1      59  (
  2441     0   375    55     0    63     1     111  x
  2442     0   375    57     0    63     1      84  >>
  2443     0   375    60     0    63     1     112  24
  2444     0   375    62     0    63     1      60  )
  2445     0   375    63     0    63     1     102  ;
  2446     0   375    65     0    63     1      64  }
  2447     0   375    65     0    63     0     250  ENDMETHOD
  2448     0   375    65     0    64     0     251  STARTMETHOD
  2449     0   376     5     0    64     1      41  private
  2450     0   376    13     0    64     1      45  static
  2451     0   376    25     0    64     1     111  long2
  2452     0   376    30     0    64     1      59  (
  2453     0   376    31     0    64     1      53  long
  2454     0   376    36     0    64     1     111  x
  2455     0   376    37     0    64     1      60  )
  2456     0   376    39     0    64     1      63  {
  2457     0   376    41     0    64     1      19  return
  2458     0   376    48     0    64     1      59  (
  2459     0   376    53     0    64     1      60  )
  2460     0   376    54     0    64     1      59  (
  2461     0   376    55     0    64     1     111  x
  2462     0   376    57     0    64     1      84  >>
  2463     0   376    60     0    64     1     112  16
  2464     0   376    62     0    64     1      60  )
  2465     0   376    63     0    64     1     102  ;
  2466     0   376    65     0    64     1      64  }
  2467     0   376    65     0    64     0     252  ENDMETHOD
  2468     0   376    65     0    65     0     253  STARTMETHOD
  2469     0   377     5     0    65     1      41  private
  2470     0   377    13     0    65     1      45  static
  2471     0   377    25     0    65     1     111  long1
  2472     0   377    30     0    65     1      59  (
  2473     0   377    31     0    65     1      53  long
  2474     0   377    36     0    65     1     111  x
  2475     0   377    37     0    65     1      60  )
  2476     0   377    39     0    65     1      63  {
  2477     0   377    41     0    65     1      19  return
  2478     0   377    48     0    65     1      59  (
  2479     0   377    53     0    65     1      60  )
  2480     0   377    54     0    65     1      59  (
  2481     0   377    55     0    65     1     111  x
  2482     0   377    57     0    65     1      84  >>
  2483     0   377    61     0    65     1     112  8
  2484     0   377    62     0    65     1      60  )
  2485     0   377    63     0    65     1     102  ;
  2486     0   377    65     0    65     1      64  }
  2487     0   377    65     0    65     0     254  ENDMETHOD
  2488     0   377    65     0    66     0     255  STARTMETHOD
  2489     0   378     5     0    66     1      41  private
  2490     0   378    13     0    66     1      45  static
  2491     0   378    25     0    66     1     111  long0
  2492     0   378    30     0    66     1      59  (
  2493     0   378    31     0    66     1      53  long
  2494     0   378    36     0    66     1     111  x
  2495     0   378    37     0    66     1      60  )
  2496     0   378    39     0    66     1      63  {
  2497     0   378    41     0    66     1      19  return
  2498     0   378    48     0    66     1      59  (
  2499     0   378    53     0    66     1      60  )
  2500     0   378    54     0    66     1      59  (
  2501     0   378    55     0    66     1     111  x
  2502     0   378    57     0    66     1      84  >>
  2503     0   378    61     0    66     1     112  0
  2504     0   378    62     0    66     1      60  )
  2505     0   378    63     0    66     1     102  ;
  2506     0   378    65     0    66     1      64  }
  2507     0   378    65     0    66     0     256  ENDMETHOD
  2508     0   378    65     0    67     0     257  STARTMETHOD
  2509     0   380     5     0    67     0      45  static
  2510     0   380    12     0    67     0      50  void
  2511     0   380    17     0    67     0     111  putLongL
  2512     0   380    25     0    67     0      59  (
  2513     0   380    26     0    67     0     111  ByteBuffer
  2514     0   380    37     0    67     0     111  bb
  2515     0   380    39     0    67     0      66  ,
  2516     0   380    41     0    67     0      36  int
  2517     0   380    45     0    67     0     111  bi
  2518     0   380    47     0    67     0      66  ,
  2519     0   380    49     0    67     0      53  long
  2520     0   380    54     0    67     0     111  x
  2521     0   380    55     0    67     0      60  )
  2522     0   380    57     0    67     0      63  {
  2523     0   381     9     0    67     1     111  bb._put
  2524     0   381    16     0    67     1      59  (
  2525     0   381    17     0    67     1     111  bi
  2526     0   381    20     0    67     1      74  +
  2527     0   381    22     0    67     1     112  7
  2528     0   381    23     0    67     1      66  ,
  2529     0   381    25     0    67     1     111  long7
  2530     0   381    30     0    67     1      59  (
  2531     0   381    31     0    67     1     111  x
  2532     0   381    32     0    67     1      60  )
  2533     0   381    33     0    67     1      60  )
  2534     0   381    34     0    67     1     102  ;
  2535     0   382     9     0    67     1     111  bb._put
  2536     0   382    16     0    67     1      59  (
  2537     0   382    17     0    67     1     111  bi
  2538     0   382    20     0    67     1      74  +
  2539     0   382    22     0    67     1     112  6
  2540     0   382    23     0    67     1      66  ,
  2541     0   382    25     0    67     1     111  long6
  2542     0   382    30     0    67     1      59  (
  2543     0   382    31     0    67     1     111  x
  2544     0   382    32     0    67     1      60  )
  2545     0   382    33     0    67     1      60  )
  2546     0   382    34     0    67     1     102  ;
  2547     0   383     9     0    67     1     111  bb._put
  2548     0   383    16     0    67     1      59  (
  2549     0   383    17     0    67     1     111  bi
  2550     0   383    20     0    67     1      74  +
  2551     0   383    22     0    67     1     112  5
  2552     0   383    23     0    67     1      66  ,
  2553     0   383    25     0    67     1     111  long5
  2554     0   383    30     0    67     1      59  (
  2555     0   383    31     0    67     1     111  x
  2556     0   383    32     0    67     1      60  )
  2557     0   383    33     0    67     1      60  )
  2558     0   383    34     0    67     1     102  ;
  2559     0   384     9     0    67     1     111  bb._put
  2560     0   384    16     0    67     1      59  (
  2561     0   384    17     0    67     1     111  bi
  2562     0   384    20     0    67     1      74  +
  2563     0   384    22     0    67     1     112  4
  2564     0   384    23     0    67     1      66  ,
  2565     0   384    25     0    67     1     111  long4
  2566     0   384    30     0    67     1      59  (
  2567     0   384    31     0    67     1     111  x
  2568     0   384    32     0    67     1      60  )
  2569     0   384    33     0    67     1      60  )
  2570     0   384    34     0    67     1     102  ;
  2571     0   385     9     0    67     1     111  bb._put
  2572     0   385    16     0    67     1      59  (
  2573     0   385    17     0    67     1     111  bi
  2574     0   385    20     0    67     1      74  +
  2575     0   385    22     0    67     1     112  3
  2576     0   385    23     0    67     1      66  ,
  2577     0   385    25     0    67     1     111  long3
  2578     0   385    30     0    67     1      59  (
  2579     0   385    31     0    67     1     111  x
  2580     0   385    32     0    67     1      60  )
  2581     0   385    33     0    67     1      60  )
  2582     0   385    34     0    67     1     102  ;
  2583     0   386     9     0    67     1     111  bb._put
  2584     0   386    16     0    67     1      59  (
  2585     0   386    17     0    67     1     111  bi
  2586     0   386    20     0    67     1      74  +
  2587     0   386    22     0    67     1     112  2
  2588     0   386    23     0    67     1      66  ,
  2589     0   386    25     0    67     1     111  long2
  2590     0   386    30     0    67     1      59  (
  2591     0   386    31     0    67     1     111  x
  2592     0   386    32     0    67     1      60  )
  2593     0   386    33     0    67     1      60  )
  2594     0   386    34     0    67     1     102  ;
  2595     0   387     9     0    67     1     111  bb._put
  2596     0   387    16     0    67     1      59  (
  2597     0   387    17     0    67     1     111  bi
  2598     0   387    20     0    67     1      74  +
  2599     0   387    22     0    67     1     112  1
  2600     0   387    23     0    67     1      66  ,
  2601     0   387    25     0    67     1     111  long1
  2602     0   387    30     0    67     1      59  (
  2603     0   387    31     0    67     1     111  x
  2604     0   387    32     0    67     1      60  )
  2605     0   387    33     0    67     1      60  )
  2606     0   387    34     0    67     1     102  ;
  2607     0   388     9     0    67     1     111  bb._put
  2608     0   388    16     0    67     1      59  (
  2609     0   388    17     0    67     1     111  bi
  2610     0   388    20     0    67     1      74  +
  2611     0   388    22     0    67     1     112  0
  2612     0   388    23     0    67     1      66  ,
  2613     0   388    25     0    67     1     111  long0
  2614     0   388    30     0    67     1      59  (
  2615     0   388    31     0    67     1     111  x
  2616     0   388    32     0    67     1      60  )
  2617     0   388    33     0    67     1      60  )
  2618     0   388    34     0    67     1     102  ;
  2619     0   389     5     0    67     0      64  }
  2620     0   389     5     0    67     0     258  ENDMETHOD
  2621     0   389     5     0    68     0     259  STARTMETHOD
  2622     0   391     5     0    68     0      45  static
  2623     0   391    12     0    68     0      50  void
  2624     0   391    17     0    68     0     111  putLongL
  2625     0   391    25     0    68     0      59  (
  2626     0   391    26     0    68     0      53  long
  2627     0   391    31     0    68     0     111  a
  2628     0   391    32     0    68     0      66  ,
  2629     0   391    34     0    68     0      53  long
  2630     0   391    39     0    68     0     111  x
  2631     0   391    40     0    68     0      60  )
  2632     0   391    42     0    68     0      63  {
  2633     0   392     9     0    68     1     111  _put
  2634     0   392    13     0    68     1      59  (
  2635     0   392    14     0    68     1     111  a
  2636     0   392    16     0    68     1      74  +
  2637     0   392    18     0    68     1     112  7
  2638     0   392    19     0    68     1      66  ,
  2639     0   392    21     0    68     1     111  long7
  2640     0   392    26     0    68     1      59  (
  2641     0   392    27     0    68     1     111  x
  2642     0   392    28     0    68     1      60  )
  2643     0   392    29     0    68     1      60  )
  2644     0   392    30     0    68     1     102  ;
  2645     0   393     9     0    68     1     111  _put
  2646     0   393    13     0    68     1      59  (
  2647     0   393    14     0    68     1     111  a
  2648     0   393    16     0    68     1      74  +
  2649     0   393    18     0    68     1     112  6
  2650     0   393    19     0    68     1      66  ,
  2651     0   393    21     0    68     1     111  long6
  2652     0   393    26     0    68     1      59  (
  2653     0   393    27     0    68     1     111  x
  2654     0   393    28     0    68     1      60  )
  2655     0   393    29     0    68     1      60  )
  2656     0   393    30     0    68     1     102  ;
  2657     0   394     9     0    68     1     111  _put
  2658     0   394    13     0    68     1      59  (
  2659     0   394    14     0    68     1     111  a
  2660     0   394    16     0    68     1      74  +
  2661     0   394    18     0    68     1     112  5
  2662     0   394    19     0    68     1      66  ,
  2663     0   394    21     0    68     1     111  long5
  2664     0   394    26     0    68     1      59  (
  2665     0   394    27     0    68     1     111  x
  2666     0   394    28     0    68     1      60  )
  2667     0   394    29     0    68     1      60  )
  2668     0   394    30     0    68     1     102  ;
  2669     0   395     9     0    68     1     111  _put
  2670     0   395    13     0    68     1      59  (
  2671     0   395    14     0    68     1     111  a
  2672     0   395    16     0    68     1      74  +
  2673     0   395    18     0    68     1     112  4
  2674     0   395    19     0    68     1      66  ,
  2675     0   395    21     0    68     1     111  long4
  2676     0   395    26     0    68     1      59  (
  2677     0   395    27     0    68     1     111  x
  2678     0   395    28     0    68     1      60  )
  2679     0   395    29     0    68     1      60  )
  2680     0   395    30     0    68     1     102  ;
  2681     0   396     9     0    68     1     111  _put
  2682     0   396    13     0    68     1      59  (
  2683     0   396    14     0    68     1     111  a
  2684     0   396    16     0    68     1      74  +
  2685     0   396    18     0    68     1     112  3
  2686     0   396    19     0    68     1      66  ,
  2687     0   396    21     0    68     1     111  long3
  2688     0   396    26     0    68     1      59  (
  2689     0   396    27     0    68     1     111  x
  2690     0   396    28     0    68     1      60  )
  2691     0   396    29     0    68     1      60  )
  2692     0   396    30     0    68     1     102  ;
  2693     0   397     9     0    68     1     111  _put
  2694     0   397    13     0    68     1      59  (
  2695     0   397    14     0    68     1     111  a
  2696     0   397    16     0    68     1      74  +
  2697     0   397    18     0    68     1     112  2
  2698     0   397    19     0    68     1      66  ,
  2699     0   397    21     0    68     1     111  long2
  2700     0   397    26     0    68     1      59  (
  2701     0   397    27     0    68     1     111  x
  2702     0   397    28     0    68     1      60  )
  2703     0   397    29     0    68     1      60  )
  2704     0   397    30     0    68     1     102  ;
  2705     0   398     9     0    68     1     111  _put
  2706     0   398    13     0    68     1      59  (
  2707     0   398    14     0    68     1     111  a
  2708     0   398    16     0    68     1      74  +
  2709     0   398    18     0    68     1     112  1
  2710     0   398    19     0    68     1      66  ,
  2711     0   398    21     0    68     1     111  long1
  2712     0   398    26     0    68     1      59  (
  2713     0   398    27     0    68     1     111  x
  2714     0   398    28     0    68     1      60  )
  2715     0   398    29     0    68     1      60  )
  2716     0   398    30     0    68     1     102  ;
  2717     0   399     9     0    68     1     111  _put
  2718     0   399    13     0    68     1      59  (
  2719     0   399    14     0    68     1     111  a
  2720     0   399    16     0    68     1      74  +
  2721     0   399    18     0    68     1     112  0
  2722     0   399    19     0    68     1      66  ,
  2723     0   399    21     0    68     1     111  long0
  2724     0   399    26     0    68     1      59  (
  2725     0   399    27     0    68     1     111  x
  2726     0   399    28     0    68     1      60  )
  2727     0   399    29     0    68     1      60  )
  2728     0   399    30     0    68     1     102  ;
  2729     0   400     5     0    68     0      64  }
  2730     0   400     5     0    68     0     260  ENDMETHOD
  2731     0   400     5     0    69     0     261  STARTMETHOD
  2732     0   402     5     0    69     0      45  static
  2733     0   402    12     0    69     0      50  void
  2734     0   402    17     0    69     0     111  putLongB
  2735     0   402    25     0    69     0      59  (
  2736     0   402    26     0    69     0     111  ByteBuffer
  2737     0   402    37     0    69     0     111  bb
  2738     0   402    39     0    69     0      66  ,
  2739     0   402    41     0    69     0      36  int
  2740     0   402    45     0    69     0     111  bi
  2741     0   402    47     0    69     0      66  ,
  2742     0   402    49     0    69     0      53  long
  2743     0   402    54     0    69     0     111  x
  2744     0   402    55     0    69     0      60  )
  2745     0   402    57     0    69     0      63  {
  2746     0   403     9     0    69     1     111  bb._put
  2747     0   403    16     0    69     1      59  (
  2748     0   403    17     0    69     1     111  bi
  2749     0   403    20     0    69     1      74  +
  2750     0   403    22     0    69     1     112  0
  2751     0   403    23     0    69     1      66  ,
  2752     0   403    25     0    69     1     111  long7
  2753     0   403    30     0    69     1      59  (
  2754     0   403    31     0    69     1     111  x
  2755     0   403    32     0    69     1      60  )
  2756     0   403    33     0    69     1      60  )
  2757     0   403    34     0    69     1     102  ;
  2758     0   404     9     0    69     1     111  bb._put
  2759     0   404    16     0    69     1      59  (
  2760     0   404    17     0    69     1     111  bi
  2761     0   404    20     0    69     1      74  +
  2762     0   404    22     0    69     1     112  1
  2763     0   404    23     0    69     1      66  ,
  2764     0   404    25     0    69     1     111  long6
  2765     0   404    30     0    69     1      59  (
  2766     0   404    31     0    69     1     111  x
  2767     0   404    32     0    69     1      60  )
  2768     0   404    33     0    69     1      60  )
  2769     0   404    34     0    69     1     102  ;
  2770     0   405     9     0    69     1     111  bb._put
  2771     0   405    16     0    69     1      59  (
  2772     0   405    17     0    69     1     111  bi
  2773     0   405    20     0    69     1      74  +
  2774     0   405    22     0    69     1     112  2
  2775     0   405    23     0    69     1      66  ,
  2776     0   405    25     0    69     1     111  long5
  2777     0   405    30     0    69     1      59  (
  2778     0   405    31     0    69     1     111  x
  2779     0   405    32     0    69     1      60  )
  2780     0   405    33     0    69     1      60  )
  2781     0   405    34     0    69     1     102  ;
  2782     0   406     9     0    69     1     111  bb._put
  2783     0   406    16     0    69     1      59  (
  2784     0   406    17     0    69     1     111  bi
  2785     0   406    20     0    69     1      74  +
  2786     0   406    22     0    69     1     112  3
  2787     0   406    23     0    69     1      66  ,
  2788     0   406    25     0    69     1     111  long4
  2789     0   406    30     0    69     1      59  (
  2790     0   406    31     0    69     1     111  x
  2791     0   406    32     0    69     1      60  )
  2792     0   406    33     0    69     1      60  )
  2793     0   406    34     0    69     1     102  ;
  2794     0   407     9     0    69     1     111  bb._put
  2795     0   407    16     0    69     1      59  (
  2796     0   407    17     0    69     1     111  bi
  2797     0   407    20     0    69     1      74  +
  2798     0   407    22     0    69     1     112  4
  2799     0   407    23     0    69     1      66  ,
  2800     0   407    25     0    69     1     111  long3
  2801     0   407    30     0    69     1      59  (
  2802     0   407    31     0    69     1     111  x
  2803     0   407    32     0    69     1      60  )
  2804     0   407    33     0    69     1      60  )
  2805     0   407    34     0    69     1     102  ;
  2806     0   408     9     0    69     1     111  bb._put
  2807     0   408    16     0    69     1      59  (
  2808     0   408    17     0    69     1     111  bi
  2809     0   408    20     0    69     1      74  +
  2810     0   408    22     0    69     1     112  5
  2811     0   408    23     0    69     1      66  ,
  2812     0   408    25     0    69     1     111  long2
  2813     0   408    30     0    69     1      59  (
  2814     0   408    31     0    69     1     111  x
  2815     0   408    32     0    69     1      60  )
  2816     0   408    33     0    69     1      60  )
  2817     0   408    34     0    69     1     102  ;
  2818     0   409     9     0    69     1     111  bb._put
  2819     0   409    16     0    69     1      59  (
  2820     0   409    17     0    69     1     111  bi
  2821     0   409    20     0    69     1      74  +
  2822     0   409    22     0    69     1     112  6
  2823     0   409    23     0    69     1      66  ,
  2824     0   409    25     0    69     1     111  long1
  2825     0   409    30     0    69     1      59  (
  2826     0   409    31     0    69     1     111  x
  2827     0   409    32     0    69     1      60  )
  2828     0   409    33     0    69     1      60  )
  2829     0   409    34     0    69     1     102  ;
  2830     0   410     9     0    69     1     111  bb._put
  2831     0   410    16     0    69     1      59  (
  2832     0   410    17     0    69     1     111  bi
  2833     0   410    20     0    69     1      74  +
  2834     0   410    22     0    69     1     112  7
  2835     0   410    23     0    69     1      66  ,
  2836     0   410    25     0    69     1     111  long0
  2837     0   410    30     0    69     1      59  (
  2838     0   410    31     0    69     1     111  x
  2839     0   410    32     0    69     1      60  )
  2840     0   410    33     0    69     1      60  )
  2841     0   410    34     0    69     1     102  ;
  2842     0   411     5     0    69     0      64  }
  2843     0   411     5     0    69     0     262  ENDMETHOD
  2844     0   411     5     0    70     0     263  STARTMETHOD
  2845     0   413     5     0    70     0      45  static
  2846     0   413    12     0    70     0      50  void
  2847     0   413    17     0    70     0     111  putLongB
  2848     0   413    25     0    70     0      59  (
  2849     0   413    26     0    70     0      53  long
  2850     0   413    31     0    70     0     111  a
  2851     0   413    32     0    70     0      66  ,
  2852     0   413    34     0    70     0      53  long
  2853     0   413    39     0    70     0     111  x
  2854     0   413    40     0    70     0      60  )
  2855     0   413    42     0    70     0      63  {
  2856     0   414     9     0    70     1     111  _put
  2857     0   414    13     0    70     1      59  (
  2858     0   414    14     0    70     1     111  a
  2859     0   414    16     0    70     1      74  +
  2860     0   414    18     0    70     1     112  0
  2861     0   414    19     0    70     1      66  ,
  2862     0   414    21     0    70     1     111  long7
  2863     0   414    26     0    70     1      59  (
  2864     0   414    27     0    70     1     111  x
  2865     0   414    28     0    70     1      60  )
  2866     0   414    29     0    70     1      60  )
  2867     0   414    30     0    70     1     102  ;
  2868     0   415     9     0    70     1     111  _put
  2869     0   415    13     0    70     1      59  (
  2870     0   415    14     0    70     1     111  a
  2871     0   415    16     0    70     1      74  +
  2872     0   415    18     0    70     1     112  1
  2873     0   415    19     0    70     1      66  ,
  2874     0   415    21     0    70     1     111  long6
  2875     0   415    26     0    70     1      59  (
  2876     0   415    27     0    70     1     111  x
  2877     0   415    28     0    70     1      60  )
  2878     0   415    29     0    70     1      60  )
  2879     0   415    30     0    70     1     102  ;
  2880     0   416     9     0    70     1     111  _put
  2881     0   416    13     0    70     1      59  (
  2882     0   416    14     0    70     1     111  a
  2883     0   416    16     0    70     1      74  +
  2884     0   416    18     0    70     1     112  2
  2885     0   416    19     0    70     1      66  ,
  2886     0   416    21     0    70     1     111  long5
  2887     0   416    26     0    70     1      59  (
  2888     0   416    27     0    70     1     111  x
  2889     0   416    28     0    70     1      60  )
  2890     0   416    29     0    70     1      60  )
  2891     0   416    30     0    70     1     102  ;
  2892     0   417     9     0    70     1     111  _put
  2893     0   417    13     0    70     1      59  (
  2894     0   417    14     0    70     1     111  a
  2895     0   417    16     0    70     1      74  +
  2896     0   417    18     0    70     1     112  3
  2897     0   417    19     0    70     1      66  ,
  2898     0   417    21     0    70     1     111  long4
  2899     0   417    26     0    70     1      59  (
  2900     0   417    27     0    70     1     111  x
  2901     0   417    28     0    70     1      60  )
  2902     0   417    29     0    70     1      60  )
  2903     0   417    30     0    70     1     102  ;
  2904     0   418     9     0    70     1     111  _put
  2905     0   418    13     0    70     1      59  (
  2906     0   418    14     0    70     1     111  a
  2907     0   418    16     0    70     1      74  +
  2908     0   418    18     0    70     1     112  4
  2909     0   418    19     0    70     1      66  ,
  2910     0   418    21     0    70     1     111  long3
  2911     0   418    26     0    70     1      59  (
  2912     0   418    27     0    70     1     111  x
  2913     0   418    28     0    70     1      60  )
  2914     0   418    29     0    70     1      60  )
  2915     0   418    30     0    70     1     102  ;
  2916     0   419     9     0    70     1     111  _put
  2917     0   419    13     0    70     1      59  (
  2918     0   419    14     0    70     1     111  a
  2919     0   419    16     0    70     1      74  +
  2920     0   419    18     0    70     1     112  5
  2921     0   419    19     0    70     1      66  ,
  2922     0   419    21     0    70     1     111  long2
  2923     0   419    26     0    70     1      59  (
  2924     0   419    27     0    70     1     111  x
  2925     0   419    28     0    70     1      60  )
  2926     0   419    29     0    70     1      60  )
  2927     0   419    30     0    70     1     102  ;
  2928     0   420     9     0    70     1     111  _put
  2929     0   420    13     0    70     1      59  (
  2930     0   420    14     0    70     1     111  a
  2931     0   420    16     0    70     1      74  +
  2932     0   420    18     0    70     1     112  6
  2933     0   420    19     0    70     1      66  ,
  2934     0   420    21     0    70     1     111  long1
  2935     0   420    26     0    70     1      59  (
  2936     0   420    27     0    70     1     111  x
  2937     0   420    28     0    70     1      60  )
  2938     0   420    29     0    70     1      60  )
  2939     0   420    30     0    70     1     102  ;
  2940     0   421     9     0    70     1     111  _put
  2941     0   421    13     0    70     1      59  (
  2942     0   421    14     0    70     1     111  a
  2943     0   421    16     0    70     1      74  +
  2944     0   421    18     0    70     1     112  7
  2945     0   421    19     0    70     1      66  ,
  2946     0   421    21     0    70     1     111  long0
  2947     0   421    26     0    70     1      59  (
  2948     0   421    27     0    70     1     111  x
  2949     0   421    28     0    70     1      60  )
  2950     0   421    29     0    70     1      60  )
  2951     0   421    30     0    70     1     102  ;
  2952     0   422     5     0    70     0      64  }
  2953     0   422     5     0    70     0     264  ENDMETHOD
  2954     0   422     5     0    71     0     265  STARTMETHOD
  2955     0   424     5     0    71     0      45  static
  2956     0   424    12     0    71     0      50  void
  2957     0   424    17     0    71     0     111  putLong
  2958     0   424    24     0    71     0      59  (
  2959     0   424    25     0    71     0     111  ByteBuffer
  2960     0   424    36     0    71     0     111  bb
  2961     0   424    38     0    71     0      66  ,
  2962     0   424    40     0    71     0      36  int
  2963     0   424    44     0    71     0     111  bi
  2964     0   424    46     0    71     0      66  ,
  2965     0   424    48     0    71     0      53  long
  2966     0   424    53     0    71     0     111  x
  2967     0   424    54     0    71     0      66  ,
  2968     0   424    56     0    71     0      39  boolean
  2969     0   424    64     0    71     0     111  bigEndian
  2970     0   424    73     0    71     0      60  )
  2971     0   424    75     0    71     0      63  {
  2972     0   425     9     0    71     0      31  if
  2973     0   425    12     0    71     0      59  (
  2974     0   425    13     0    71     0     111  bigEndian
  2975     0   425    22     0    71     0      60  )
  2976     0   426    13     0    71     0     111  putLongB
  2977     0   426    21     0    71     0      59  (
  2978     0   426    22     0    71     0     111  bb
  2979     0   426    24     0    71     0      66  ,
  2980     0   426    26     0    71     0     111  bi
  2981     0   426    28     0    71     0      66  ,
  2982     0   426    30     0    71     0     111  x
  2983     0   426    31     0    71     0      60  )
  2984     0   426    32     0    71     0     102  ;
  2985     0   427     9     0    71     0      48  else
  2986     0   428    13     0    71     0     111  putLongL
  2987     0   428    21     0    71     0      59  (
  2988     0   428    22     0    71     0     111  bb
  2989     0   428    24     0    71     0      66  ,
  2990     0   428    26     0    71     0     111  bi
  2991     0   428    28     0    71     0      66  ,
  2992     0   428    30     0    71     0     111  x
  2993     0   428    31     0    71     0      60  )
  2994     0   428    32     0    71     0     102  ;
  2995     0   429     5     0    71     0      64  }
  2996     0   429     5     0    71     0     266  ENDMETHOD
  2997     0   429     5     0    72     0     267  STARTMETHOD
  2998     0   431     5     0    72     0      45  static
  2999     0   431    12     0    72     0      50  void
  3000     0   431    17     0    72     0     111  putLong
  3001     0   431    24     0    72     0      59  (
  3002     0   431    25     0    72     0      53  long
  3003     0   431    30     0    72     0     111  a
  3004     0   431    31     0    72     0      66  ,
  3005     0   431    33     0    72     0      53  long
  3006     0   431    38     0    72     0     111  x
  3007     0   431    39     0    72     0      66  ,
  3008     0   431    41     0    72     0      39  boolean
  3009     0   431    49     0    72     0     111  bigEndian
  3010     0   431    58     0    72     0      60  )
  3011     0   431    60     0    72     0      63  {
  3012     0   432     9     0    72     0      31  if
  3013     0   432    12     0    72     0      59  (
  3014     0   432    13     0    72     0     111  bigEndian
  3015     0   432    22     0    72     0      60  )
  3016     0   433    13     0    72     0     111  putLongB
  3017     0   433    21     0    72     0      59  (
  3018     0   433    22     0    72     0     111  a
  3019     0   433    23     0    72     0      66  ,
  3020     0   433    25     0    72     0     111  x
  3021     0   433    26     0    72     0      60  )
  3022     0   433    27     0    72     0     102  ;
  3023     0   434     9     0    72     0      48  else
  3024     0   435    13     0    72     0     111  putLongL
  3025     0   435    21     0    72     0      59  (
  3026     0   435    22     0    72     0     111  a
  3027     0   435    23     0    72     0      66  ,
  3028     0   435    25     0    72     0     111  x
  3029     0   435    26     0    72     0      60  )
  3030     0   435    27     0    72     0     102  ;
  3031     0   436     5     0    72     0      64  }
  3032     0   436     5     0    72     0     268  ENDMETHOD
  3033     0   436     5     0    73     0     269  STARTMETHOD
  3034     0   441     5     0    73     0      45  static
  3035     0   441    18     0    73     0     111  getFloatL
  3036     0   441    27     0    73     0      59  (
  3037     0   441    28     0    73     0     111  ByteBuffer
  3038     0   441    39     0    73     0     111  bb
  3039     0   441    41     0    73     0      66  ,
  3040     0   441    43     0    73     0      36  int
  3041     0   441    47     0    73     0     111  bi
  3042     0   441    49     0    73     0      60  )
  3043     0   441    51     0    73     0      63  {
  3044     0   442     9     0    73     0      19  return
  3045     0   442    16     0    73     0     111  Float.intBitsToFloat
  3046     0   442    36     0    73     0      59  (
  3047     0   442    37     0    73     0     111  getIntL
  3048     0   442    44     0    73     0      59  (
  3049     0   442    45     0    73     0     111  bb
  3050     0   442    47     0    73     0      66  ,
  3051     0   442    49     0    73     0     111  bi
  3052     0   442    51     0    73     0      60  )
  3053     0   442    52     0    73     0      60  )
  3054     0   442    53     0    73     0     102  ;
  3055     0   443     5     0    73     0      64  }
  3056     0   443     5     0    73     0     270  ENDMETHOD
  3057     0   443     5     0    74     0     271  STARTMETHOD
  3058     0   445     5     0    74     0      45  static
  3059     0   445    18     0    74     0     111  getFloatL
  3060     0   445    27     0    74     0      59  (
  3061     0   445    28     0    74     0      53  long
  3062     0   445    33     0    74     0     111  a
  3063     0   445    34     0    74     0      60  )
  3064     0   445    36     0    74     0      63  {
  3065     0   446     9     0    74     0      19  return
  3066     0   446    16     0    74     0     111  Float.intBitsToFloat
  3067     0   446    36     0    74     0      59  (
  3068     0   446    37     0    74     0     111  getIntL
  3069     0   446    44     0    74     0      59  (
  3070     0   446    45     0    74     0     111  a
  3071     0   446    46     0    74     0      60  )
  3072     0   446    47     0    74     0      60  )
  3073     0   446    48     0    74     0     102  ;
  3074     0   447     5     0    74     0      64  }
  3075     0   447     5     0    74     0     272  ENDMETHOD
  3076     0   447     5     0    75     0     273  STARTMETHOD
  3077     0   449     5     0    75     0      45  static
  3078     0   449    18     0    75     0     111  getFloatB
  3079     0   449    27     0    75     0      59  (
  3080     0   449    28     0    75     0     111  ByteBuffer
  3081     0   449    39     0    75     0     111  bb
  3082     0   449    41     0    75     0      66  ,
  3083     0   449    43     0    75     0      36  int
  3084     0   449    47     0    75     0     111  bi
  3085     0   449    49     0    75     0      60  )
  3086     0   449    51     0    75     0      63  {
  3087     0   450     9     0    75     0      19  return
  3088     0   450    16     0    75     0     111  Float.intBitsToFloat
  3089     0   450    36     0    75     0      59  (
  3090     0   450    37     0    75     0     111  getIntB
  3091     0   450    44     0    75     0      59  (
  3092     0   450    45     0    75     0     111  bb
  3093     0   450    47     0    75     0      66  ,
  3094     0   450    49     0    75     0     111  bi
  3095     0   450    51     0    75     0      60  )
  3096     0   450    52     0    75     0      60  )
  3097     0   450    53     0    75     0     102  ;
  3098     0   451     5     0    75     0      64  }
  3099     0   451     5     0    75     0     274  ENDMETHOD
  3100     0   451     5     0    76     0     275  STARTMETHOD
  3101     0   453     5     0    76     0      45  static
  3102     0   453    18     0    76     0     111  getFloatB
  3103     0   453    27     0    76     0      59  (
  3104     0   453    28     0    76     0      53  long
  3105     0   453    33     0    76     0     111  a
  3106     0   453    34     0    76     0      60  )
  3107     0   453    36     0    76     0      63  {
  3108     0   454     9     0    76     0      19  return
  3109     0   454    16     0    76     0     111  Float.intBitsToFloat
  3110     0   454    36     0    76     0      59  (
  3111     0   454    37     0    76     0     111  getIntB
  3112     0   454    44     0    76     0      59  (
  3113     0   454    45     0    76     0     111  a
  3114     0   454    46     0    76     0      60  )
  3115     0   454    47     0    76     0      60  )
  3116     0   454    48     0    76     0     102  ;
  3117     0   455     5     0    76     0      64  }
  3118     0   455     5     0    76     0     276  ENDMETHOD
  3119     0   455     5     0    77     0     277  STARTMETHOD
  3120     0   457     5     0    77     0      45  static
  3121     0   457    18     0    77     0     111  getFloat
  3122     0   457    26     0    77     0      59  (
  3123     0   457    27     0    77     0     111  ByteBuffer
  3124     0   457    38     0    77     0     111  bb
  3125     0   457    40     0    77     0      66  ,
  3126     0   457    42     0    77     0      36  int
  3127     0   457    46     0    77     0     111  bi
  3128     0   457    48     0    77     0      66  ,
  3129     0   457    50     0    77     0      39  boolean
  3130     0   457    58     0    77     0     111  bigEndian
  3131     0   457    67     0    77     0      60  )
  3132     0   457    69     0    77     0      63  {
  3133     0   458     9     0    77     0      19  return
  3134     0   458    16     0    77     0      59  (
  3135     0   458    17     0    77     0     111  bigEndian
  3136     0   458    27     0    77     0      58  ?
  3137     0   458    29     0    77     0     111  getFloatB
  3138     0   458    38     0    77     0      59  (
  3139     0   458    39     0    77     0     111  bb
  3140     0   458    41     0    77     0      66  ,
  3141     0   458    43     0    77     0     111  bi
  3142     0   458    45     0    77     0      60  )
  3143     0   458    47     0    77     0      65  :
  3144     0   458    49     0    77     0     111  getFloatL
  3145     0   458    58     0    77     0      59  (
  3146     0   458    59     0    77     0     111  bb
  3147     0   458    61     0    77     0      66  ,
  3148     0   458    63     0    77     1     111  bi
  3149     0   458    65     0    77     1      60  )
  3150     0   458    66     0    77     1      60  )
  3151     0   458    67     0    77     1     102  ;
  3152     0   459     5     0    77     1      64  }
  3153     0   459     5     0    77     0     278  ENDMETHOD
  3154     0   459     5     0    78     0     279  STARTMETHOD
  3155     0   461     5     0    78     0      45  static
  3156     0   461    18     0    78     0     111  getFloat
  3157     0   461    26     0    78     0      59  (
  3158     0   461    27     0    78     0      53  long
  3159     0   461    32     0    78     0     111  a
  3160     0   461    33     0    78     0      66  ,
  3161     0   461    35     0    78     0      39  boolean
  3162     0   461    43     0    78     0     111  bigEndian
  3163     0   461    52     0    78     0      60  )
  3164     0   461    54     0    78     0      63  {
  3165     0   462     9     0    78     0      19  return
  3166     0   462    16     0    78     0      59  (
  3167     0   462    17     0    78     0     111  bigEndian
  3168     0   462    27     0    78     0      58  ?
  3169     0   462    29     0    78     0     111  getFloatB
  3170     0   462    38     0    78     0      59  (
  3171     0   462    39     0    78     0     111  a
  3172     0   462    40     0    78     0      60  )
  3173     0   462    42     0    78     0      65  :
  3174     0   462    44     0    78     0     111  getFloatL
  3175     0   462    53     0    78     0      59  (
  3176     0   462    54     0    78     1     111  a
  3177     0   462    55     0    78     1      60  )
  3178     0   462    56     0    78     1      60  )
  3179     0   462    57     0    78     1     102  ;
  3180     0   463     5     0    78     1      64  }
  3181     0   463     5     0    78     0     280  ENDMETHOD
  3182     0   463     5     0    79     0     281  STARTMETHOD
  3183     0   465     5     0    79     0      45  static
  3184     0   465    12     0    79     0      50  void
  3185     0   465    17     0    79     0     111  putFloatL
  3186     0   465    26     0    79     0      59  (
  3187     0   465    27     0    79     0     111  ByteBuffer
  3188     0   465    38     0    79     0     111  bb
  3189     0   465    40     0    79     0      66  ,
  3190     0   465    42     0    79     0      36  int
  3191     0   465    46     0    79     0     111  bi
  3192     0   465    48     0    79     0      66  ,
  3193     0   465    56     0    79     0     111  x
  3194     0   465    57     0    79     0      60  )
  3195     0   465    59     0    79     0      63  {
  3196     0   466     9     0    79     0     111  putIntL
  3197     0   466    16     0    79     0      59  (
  3198     0   466    17     0    79     0     111  bb
  3199     0   466    19     0    79     0      66  ,
  3200     0   466    21     0    79     0     111  bi
  3201     0   466    23     0    79     0      66  ,
  3202     0   466    25     0    79     0     111  Float.floatToRawIntBits
  3203     0   466    48     0    79     0      59  (
  3204     0   466    49     0    79     1     111  x
  3205     0   466    50     0    79     1      60  )
  3206     0   466    51     0    79     1      60  )
  3207     0   466    52     0    79     1     102  ;
  3208     0   467     5     0    79     1      64  }
  3209     0   467     5     0    79     0     282  ENDMETHOD
  3210     0   467     5     0    80     0     283  STARTMETHOD
  3211     0   469     5     0    80     0      45  static
  3212     0   469    12     0    80     0      50  void
  3213     0   469    17     0    80     0     111  putFloatL
  3214     0   469    26     0    80     0      59  (
  3215     0   469    27     0    80     0      53  long
  3216     0   469    32     0    80     0     111  a
  3217     0   469    33     0    80     0      66  ,
  3218     0   469    41     0    80     0     111  x
  3219     0   469    42     0    80     0      60  )
  3220     0   469    44     0    80     0      63  {
  3221     0   470     9     0    80     0     111  putIntL
  3222     0   470    16     0    80     0      59  (
  3223     0   470    17     0    80     0     111  a
  3224     0   470    18     0    80     0      66  ,
  3225     0   470    20     0    80     0     111  Float.floatToRawIntBits
  3226     0   470    43     0    80     0      59  (
  3227     0   470    44     0    80     0     111  x
  3228     0   470    45     0    80     0      60  )
  3229     0   470    46     0    80     0      60  )
  3230     0   470    47     0    80     0     102  ;
  3231     0   471     5     0    80     0      64  }
  3232     0   471     5     0    80     0     284  ENDMETHOD
  3233     0   471     5     0    81     0     285  STARTMETHOD
  3234     0   473     5     0    81     0      45  static
  3235     0   473    12     0    81     0      50  void
  3236     0   473    17     0    81     0     111  putFloatB
  3237     0   473    26     0    81     0      59  (
  3238     0   473    27     0    81     0     111  ByteBuffer
  3239     0   473    38     0    81     0     111  bb
  3240     0   473    40     0    81     0      66  ,
  3241     0   473    42     0    81     0      36  int
  3242     0   473    46     0    81     0     111  bi
  3243     0   473    48     0    81     0      66  ,
  3244     0   473    56     0    81     0     111  x
  3245     0   473    57     0    81     0      60  )
  3246     0   473    59     0    81     0      63  {
  3247     0   474     9     0    81     0     111  putIntB
  3248     0   474    16     0    81     0      59  (
  3249     0   474    17     0    81     0     111  bb
  3250     0   474    19     0    81     0      66  ,
  3251     0   474    21     0    81     0     111  bi
  3252     0   474    23     0    81     0      66  ,
  3253     0   474    25     0    81     0     111  Float.floatToRawIntBits
  3254     0   474    48     0    81     0      59  (
  3255     0   474    49     0    81     0     111  x
  3256     0   474    50     0    81     0      60  )
  3257     0   474    51     0    81     0      60  )
  3258     0   474    52     0    81     0     102  ;
  3259     0   475     5     0    81     0      64  }
  3260     0   475     5     0    81     0     286  ENDMETHOD
  3261     0   475     5     0    82     0     287  STARTMETHOD
  3262     0   477     5     0    82     0      45  static
  3263     0   477    12     0    82     0      50  void
  3264     0   477    17     0    82     0     111  putFloatB
  3265     0   477    26     0    82     0      59  (
  3266     0   477    27     0    82     0      53  long
  3267     0   477    32     0    82     0     111  a
  3268     0   477    33     0    82     0      66  ,
  3269     0   477    41     0    82     0     111  x
  3270     0   477    42     0    82     0      60  )
  3271     0   477    44     0    82     0      63  {
  3272     0   478     9     0    82     0     111  putIntB
  3273     0   478    16     0    82     0      59  (
  3274     0   478    17     0    82     0     111  a
  3275     0   478    18     0    82     0      66  ,
  3276     0   478    20     0    82     0     111  Float.floatToRawIntBits
  3277     0   478    43     0    82     0      59  (
  3278     0   478    44     0    82     0     111  x
  3279     0   478    45     0    82     0      60  )
  3280     0   478    46     0    82     0      60  )
  3281     0   478    47     0    82     0     102  ;
  3282     0   479     5     0    82     0      64  }
  3283     0   479     5     0    82     0     288  ENDMETHOD
  3284     0   479     5     0    83     0     289  STARTMETHOD
  3285     0   481     5     0    83     0      45  static
  3286     0   481    12     0    83     0      50  void
  3287     0   481    17     0    83     0     111  putFloat
  3288     0   481    25     0    83     0      59  (
  3289     0   481    26     0    83     0     111  ByteBuffer
  3290     0   481    37     0    83     0     111  bb
  3291     0   481    39     0    83     0      66  ,
  3292     0   481    41     0    83     0      36  int
  3293     0   481    45     0    83     0     111  bi
  3294     0   481    47     0    83     0      66  ,
  3295     0   481    55     0    83     0     111  x
  3296     0   481    56     0    83     0      66  ,
  3297     0   481    58     0    83     0      39  boolean
  3298     0   481    66     0    83     0     111  bigEndian
  3299     0   481    75     0    83     0      60  )
  3300     0   481    77     0    83     0      63  {
  3301     0   482     9     0    83     0      31  if
  3302     0   482    12     0    83     0      59  (
  3303     0   482    13     0    83     0     111  bigEndian
  3304     0   482    22     0    83     0      60  )
  3305     0   483    13     0    83     0     111  putFloatB
  3306     0   483    22     0    83     0      59  (
  3307     0   483    23     0    83     0     111  bb
  3308     0   483    25     0    83     0      66  ,
  3309     0   483    27     0    83     0     111  bi
  3310     0   483    29     0    83     0      66  ,
  3311     0   483    31     0    83     0     111  x
  3312     0   483    32     0    83     0      60  )
  3313     0   483    33     0    83     0     102  ;
  3314     0   484     9     0    83     0      48  else
  3315     0   485    13     0    83     0     111  putFloatL
  3316     0   485    22     0    83     0      59  (
  3317     0   485    23     0    83     0     111  bb
  3318     0   485    25     0    83     0      66  ,
  3319     0   485    27     0    83     0     111  bi
  3320     0   485    29     0    83     0      66  ,
  3321     0   485    31     0    83     0     111  x
  3322     0   485    32     0    83     0      60  )
  3323     0   485    33     0    83     0     102  ;
  3324     0   486     5     0    83     0      64  }
  3325     0   486     5     0    83     0     290  ENDMETHOD
  3326     0   486     5     0    84     0     291  STARTMETHOD
  3327     0   488     5     0    84     0      45  static
  3328     0   488    12     0    84     0      50  void
  3329     0   488    17     0    84     0     111  putFloat
  3330     0   488    25     0    84     0      59  (
  3331     0   488    26     0    84     0      53  long
  3332     0   488    31     0    84     0     111  a
  3333     0   488    32     0    84     0      66  ,
  3334     0   488    40     0    84     0     111  x
  3335     0   488    41     0    84     0      66  ,
  3336     0   488    43     0    84     0      39  boolean
  3337     0   488    51     0    84     0     111  bigEndian
  3338     0   488    60     0    84     0      60  )
  3339     0   488    62     0    84     0      63  {
  3340     0   489     9     0    84     0      31  if
  3341     0   489    12     0    84     0      59  (
  3342     0   489    13     0    84     0     111  bigEndian
  3343     0   489    22     0    84     0      60  )
  3344     0   490    13     0    84     0     111  putFloatB
  3345     0   490    22     0    84     0      59  (
  3346     0   490    23     0    84     0     111  a
  3347     0   490    24     0    84     0      66  ,
  3348     0   490    26     0    84     0     111  x
  3349     0   490    27     0    84     0      60  )
  3350     0   490    28     0    84     0     102  ;
  3351     0   491     9     0    84     0      48  else
  3352     0   492    13     0    84     0     111  putFloatL
  3353     0   492    22     0    84     0      59  (
  3354     0   492    23     0    84     0     111  a
  3355     0   492    24     0    84     0      66  ,
  3356     0   492    26     0    84     0     111  x
  3357     0   492    27     0    84     0      60  )
  3358     0   492    28     0    84     0     102  ;
  3359     0   493     5     0    84     0      64  }
  3360     0   493     5     0    84     0     292  ENDMETHOD
  3361     0   493     5     0    85     0     293  STARTMETHOD
  3362     0   498     5     0    85     0      45  static
  3363     0   498    12     0    85     0      32  double
  3364     0   498    19     0    85     0     111  getDoubleL
  3365     0   498    29     0    85     0      59  (
  3366     0   498    30     0    85     0     111  ByteBuffer
  3367     0   498    41     0    85     0     111  bb
  3368     0   498    43     0    85     0      66  ,
  3369     0   498    45     0    85     0      36  int
  3370     0   498    49     0    85     0     111  bi
  3371     0   498    51     0    85     0      60  )
  3372     0   498    53     0    85     0      63  {
  3373     0   499     9     0    85     0      19  return
  3374     0   499    16     0    85     0     111  Double.longBitsToDouble
  3375     0   499    39     0    85     0      59  (
  3376     0   499    40     0    85     0     111  getLongL
  3377     0   499    48     0    85     0      59  (
  3378     0   499    49     0    85     0     111  bb
  3379     0   499    51     0    85     0      66  ,
  3380     0   499    53     0    85     0     111  bi
  3381     0   499    55     0    85     0      60  )
  3382     0   499    56     0    85     0      60  )
  3383     0   499    57     0    85     0     102  ;
  3384     0   500     5     0    85     0      64  }
  3385     0   500     5     0    85     0     294  ENDMETHOD
  3386     0   500     5     0    86     0     295  STARTMETHOD
  3387     0   502     5     0    86     0      45  static
  3388     0   502    12     0    86     0      32  double
  3389     0   502    19     0    86     0     111  getDoubleL
  3390     0   502    29     0    86     0      59  (
  3391     0   502    30     0    86     0      53  long
  3392     0   502    35     0    86     0     111  a
  3393     0   502    36     0    86     0      60  )
  3394     0   502    38     0    86     0      63  {
  3395     0   503     9     0    86     0      19  return
  3396     0   503    16     0    86     0     111  Double.longBitsToDouble
  3397     0   503    39     0    86     0      59  (
  3398     0   503    40     0    86     0     111  getLongL
  3399     0   503    48     0    86     0      59  (
  3400     0   503    49     0    86     0     111  a
  3401     0   503    50     0    86     0      60  )
  3402     0   503    51     0    86     0      60  )
  3403     0   503    52     0    86     0     102  ;
  3404     0   504     5     0    86     0      64  }
  3405     0   504     5     0    86     0     296  ENDMETHOD
  3406     0   504     5     0    87     0     297  STARTMETHOD
  3407     0   506     5     0    87     0      45  static
  3408     0   506    12     0    87     0      32  double
  3409     0   506    19     0    87     0     111  getDoubleB
  3410     0   506    29     0    87     0      59  (
  3411     0   506    30     0    87     0     111  ByteBuffer
  3412     0   506    41     0    87     0     111  bb
  3413     0   506    43     0    87     0      66  ,
  3414     0   506    45     0    87     0      36  int
  3415     0   506    49     0    87     0     111  bi
  3416     0   506    51     0    87     0      60  )
  3417     0   506    53     0    87     0      63  {
  3418     0   507     9     0    87     0      19  return
  3419     0   507    16     0    87     0     111  Double.longBitsToDouble
  3420     0   507    39     0    87     0      59  (
  3421     0   507    40     0    87     0     111  getLongB
  3422     0   507    48     0    87     0      59  (
  3423     0   507    49     0    87     0     111  bb
  3424     0   507    51     0    87     0      66  ,
  3425     0   507    53     0    87     0     111  bi
  3426     0   507    55     0    87     0      60  )
  3427     0   507    56     0    87     0      60  )
  3428     0   507    57     0    87     0     102  ;
  3429     0   508     5     0    87     0      64  }
  3430     0   508     5     0    87     0     298  ENDMETHOD
  3431     0   508     5     0    88     0     299  STARTMETHOD
  3432     0   510     5     0    88     0      45  static
  3433     0   510    12     0    88     0      32  double
  3434     0   510    19     0    88     0     111  getDoubleB
  3435     0   510    29     0    88     0      59  (
  3436     0   510    30     0    88     0      53  long
  3437     0   510    35     0    88     0     111  a
  3438     0   510    36     0    88     0      60  )
  3439     0   510    38     0    88     0      63  {
  3440     0   511     9     0    88     0      19  return
  3441     0   511    16     0    88     0     111  Double.longBitsToDouble
  3442     0   511    39     0    88     0      59  (
  3443     0   511    40     0    88     0     111  getLongB
  3444     0   511    48     0    88     0      59  (
  3445     0   511    49     0    88     0     111  a
  3446     0   511    50     0    88     0      60  )
  3447     0   511    51     0    88     0      60  )
  3448     0   511    52     0    88     0     102  ;
  3449     0   512     5     0    88     0      64  }
  3450     0   512     5     0    88     0     300  ENDMETHOD
  3451     0   512     5     0    89     0     301  STARTMETHOD
  3452     0   514     5     0    89     0      45  static
  3453     0   514    12     0    89     0      32  double
  3454     0   514    19     0    89     0     111  getDouble
  3455     0   514    28     0    89     0      59  (
  3456     0   514    29     0    89     0     111  ByteBuffer
  3457     0   514    40     0    89     0     111  bb
  3458     0   514    42     0    89     0      66  ,
  3459     0   514    44     0    89     0      36  int
  3460     0   514    48     0    89     0     111  bi
  3461     0   514    50     0    89     0      66  ,
  3462     0   514    52     0    89     0      39  boolean
  3463     0   514    60     0    89     0     111  bigEndian
  3464     0   514    69     0    89     0      60  )
  3465     0   514    71     0    89     0      63  {
  3466     0   515     9     0    89     0      19  return
  3467     0   515    16     0    89     0      59  (
  3468     0   515    17     0    89     0     111  bigEndian
  3469     0   515    27     0    89     0      58  ?
  3470     0   515    29     0    89     0     111  getDoubleB
  3471     0   515    39     0    89     0      59  (
  3472     0   515    40     0    89     0     111  bb
  3473     0   515    42     0    89     0      66  ,
  3474     0   515    44     0    89     0     111  bi
  3475     0   515    46     0    89     0      60  )
  3476     0   515    48     0    89     0      65  :
  3477     0   515    50     0    89     0     111  getDoubleL
  3478     0   515    60     0    89     0      59  (
  3479     0   515    61     0    89     0     111  bb
  3480     0   515    63     0    89     0      66  ,
  3481     0   515    65     0    89     1     111  bi
  3482     0   515    67     0    89     1      60  )
  3483     0   515    68     0    89     1      60  )
  3484     0   515    69     0    89     1     102  ;
  3485     0   516     5     0    89     1      64  }
  3486     0   516     5     0    89     0     302  ENDMETHOD
  3487     0   516     5     0    90     0     303  STARTMETHOD
  3488     0   518     5     0    90     0      45  static
  3489     0   518    12     0    90     0      32  double
  3490     0   518    19     0    90     0     111  getDouble
  3491     0   518    28     0    90     0      59  (
  3492     0   518    29     0    90     0      53  long
  3493     0   518    34     0    90     0     111  a
  3494     0   518    35     0    90     0      66  ,
  3495     0   518    37     0    90     0      39  boolean
  3496     0   518    45     0    90     0     111  bigEndian
  3497     0   518    54     0    90     0      60  )
  3498     0   518    56     0    90     0      63  {
  3499     0   519     9     0    90     0      19  return
  3500     0   519    16     0    90     0      59  (
  3501     0   519    17     0    90     0     111  bigEndian
  3502     0   519    27     0    90     0      58  ?
  3503     0   519    29     0    90     0     111  getDoubleB
  3504     0   519    39     0    90     0      59  (
  3505     0   519    40     0    90     0     111  a
  3506     0   519    41     0    90     0      60  )
  3507     0   519    43     0    90     0      65  :
  3508     0   519    45     0    90     0     111  getDoubleL
  3509     0   519    55     0    90     0      59  (
  3510     0   519    56     0    90     1     111  a
  3511     0   519    57     0    90     1      60  )
  3512     0   519    58     0    90     1      60  )
  3513     0   519    59     0    90     1     102  ;
  3514     0   520     5     0    90     1      64  }
  3515     0   520     5     0    90     0     304  ENDMETHOD
  3516     0   520     5     0    91     0     305  STARTMETHOD
  3517     0   522     5     0    91     0      45  static
  3518     0   522    12     0    91     0      50  void
  3519     0   522    17     0    91     0     111  putDoubleL
  3520     0   522    27     0    91     0      59  (
  3521     0   522    28     0    91     0     111  ByteBuffer
  3522     0   522    39     0    91     0     111  bb
  3523     0   522    41     0    91     0      66  ,
  3524     0   522    43     0    91     0      36  int
  3525     0   522    47     0    91     0     111  bi
  3526     0   522    49     0    91     0      66  ,
  3527     0   522    51     0    91     0      32  double
  3528     0   522    58     0    91     0     111  x
  3529     0   522    59     0    91     0      60  )
  3530     0   522    61     0    91     0      63  {
  3531     0   523     9     0    91     0     111  putLongL
  3532     0   523    17     0    91     0      59  (
  3533     0   523    18     0    91     0     111  bb
  3534     0   523    20     0    91     0      66  ,
  3535     0   523    22     0    91     0     111  bi
  3536     0   523    24     0    91     0      66  ,
  3537     0   523    26     0    91     0     111  Double.doubleToRawLongBits
  3538     0   523    52     0    91     0      59  (
  3539     0   523    53     0    91     1     111  x
  3540     0   523    54     0    91     1      60  )
  3541     0   523    55     0    91     1      60  )
  3542     0   523    56     0    91     1     102  ;
  3543     0   524     5     0    91     1      64  }
  3544     0   524     5     0    91     0     306  ENDMETHOD
  3545     0   524     5     0    92     0     307  STARTMETHOD
  3546     0   526     5     0    92     0      45  static
  3547     0   526    12     0    92     0      50  void
  3548     0   526    17     0    92     0     111  putDoubleL
  3549     0   526    27     0    92     0      59  (
  3550     0   526    28     0    92     0      53  long
  3551     0   526    33     0    92     0     111  a
  3552     0   526    34     0    92     0      66  ,
  3553     0   526    36     0    92     0      32  double
  3554     0   526    43     0    92     0     111  x
  3555     0   526    44     0    92     0      60  )
  3556     0   526    46     0    92     0      63  {
  3557     0   527     9     0    92     0     111  putLongL
  3558     0   527    17     0    92     0      59  (
  3559     0   527    18     0    92     0     111  a
  3560     0   527    19     0    92     0      66  ,
  3561     0   527    21     0    92     0     111  Double.doubleToRawLongBits
  3562     0   527    47     0    92     0      59  (
  3563     0   527    48     0    92     0     111  x
  3564     0   527    49     0    92     0      60  )
  3565     0   527    50     0    92     0      60  )
  3566     0   527    51     0    92     0     102  ;
  3567     0   528     5     0    92     0      64  }
  3568     0   528     5     0    92     0     308  ENDMETHOD
  3569     0   528     5     0    93     0     309  STARTMETHOD
  3570     0   530     5     0    93     0      45  static
  3571     0   530    12     0    93     0      50  void
  3572     0   530    17     0    93     0     111  putDoubleB
  3573     0   530    27     0    93     0      59  (
  3574     0   530    28     0    93     0     111  ByteBuffer
  3575     0   530    39     0    93     0     111  bb
  3576     0   530    41     0    93     0      66  ,
  3577     0   530    43     0    93     0      36  int
  3578     0   530    47     0    93     0     111  bi
  3579     0   530    49     0    93     0      66  ,
  3580     0   530    51     0    93     0      32  double
  3581     0   530    58     0    93     0     111  x
  3582     0   530    59     0    93     0      60  )
  3583     0   530    61     0    93     0      63  {
  3584     0   531     9     0    93     0     111  putLongB
  3585     0   531    17     0    93     0      59  (
  3586     0   531    18     0    93     0     111  bb
  3587     0   531    20     0    93     0      66  ,
  3588     0   531    22     0    93     0     111  bi
  3589     0   531    24     0    93     0      66  ,
  3590     0   531    26     0    93     0     111  Double.doubleToRawLongBits
  3591     0   531    52     0    93     0      59  (
  3592     0   531    53     0    93     0     111  x
  3593     0   531    54     0    93     0      60  )
  3594     0   531    55     0    93     0      60  )
  3595     0   531    56     0    93     0     102  ;
  3596     0   532     5     0    93     0      64  }
  3597     0   532     5     0    93     0     310  ENDMETHOD
  3598     0   532     5     0    94     0     311  STARTMETHOD
  3599     0   534     5     0    94     0      45  static
  3600     0   534    12     0    94     0      50  void
  3601     0   534    17     0    94     0     111  putDoubleB
  3602     0   534    27     0    94     0      59  (
  3603     0   534    28     0    94     0      53  long
  3604     0   534    33     0    94     0     111  a
  3605     0   534    34     0    94     0      66  ,
  3606     0   534    36     0    94     0      32  double
  3607     0   534    43     0    94     0     111  x
  3608     0   534    44     0    94     0      60  )
  3609     0   534    46     0    94     0      63  {
  3610     0   535     9     0    94     0     111  putLongB
  3611     0   535    17     0    94     0      59  (
  3612     0   535    18     0    94     0     111  a
  3613     0   535    19     0    94     0      66  ,
  3614     0   535    21     0    94     0     111  Double.doubleToRawLongBits
  3615     0   535    47     0    94     0      59  (
  3616     0   535    48     0    94     0     111  x
  3617     0   535    49     0    94     0      60  )
  3618     0   535    50     0    94     0      60  )
  3619     0   535    51     0    94     0     102  ;
  3620     0   536     5     0    94     0      64  }
  3621     0   536     5     0    94     0     312  ENDMETHOD
  3622     0   536     5     0    95     0     313  STARTMETHOD
  3623     0   538     5     0    95     0      45  static
  3624     0   538    12     0    95     0      50  void
  3625     0   538    17     0    95     0     111  putDouble
  3626     0   538    26     0    95     0      59  (
  3627     0   538    27     0    95     0     111  ByteBuffer
  3628     0   538    38     0    95     0     111  bb
  3629     0   538    40     0    95     0      66  ,
  3630     0   538    42     0    95     0      36  int
  3631     0   538    46     0    95     0     111  bi
  3632     0   538    48     0    95     0      66  ,
  3633     0   538    50     0    95     0      32  double
  3634     0   538    57     0    95     0     111  x
  3635     0   538    58     0    95     0      66  ,
  3636     0   538    60     0    95     0      39  boolean
  3637     0   538    68     0    95     0     111  bigEndian
  3638     0   538    77     0    95     0      60  )
  3639     0   538    79     0    95     0      63  {
  3640     0   539     9     0    95     0      31  if
  3641     0   539    12     0    95     0      59  (
  3642     0   539    13     0    95     0     111  bigEndian
  3643     0   539    22     0    95     0      60  )
  3644     0   540    13     0    95     0     111  putDoubleB
  3645     0   540    23     0    95     0      59  (
  3646     0   540    24     0    95     0     111  bb
  3647     0   540    26     0    95     0      66  ,
  3648     0   540    28     0    95     0     111  bi
  3649     0   540    30     0    95     0      66  ,
  3650     0   540    32     0    95     0     111  x
  3651     0   540    33     0    95     0      60  )
  3652     0   540    34     0    95     0     102  ;
  3653     0   541     9     0    95     0      48  else
  3654     0   542    13     0    95     0     111  putDoubleL
  3655     0   542    23     0    95     0      59  (
  3656     0   542    24     0    95     0     111  bb
  3657     0   542    26     0    95     0      66  ,
  3658     0   542    28     0    95     0     111  bi
  3659     0   542    30     0    95     0      66  ,
  3660     0   542    32     0    95     0     111  x
  3661     0   542    33     0    95     0      60  )
  3662     0   542    34     0    95     0     102  ;
  3663     0   543     5     0    95     0      64  }
  3664     0   543     5     0    95     0     314  ENDMETHOD
  3665     0   543     5     0    96     0     315  STARTMETHOD
  3666     0   545     5     0    96     0      45  static
  3667     0   545    12     0    96     0      50  void
  3668     0   545    17     0    96     0     111  putDouble
  3669     0   545    26     0    96     0      59  (
  3670     0   545    27     0    96     0      53  long
  3671     0   545    32     0    96     0     111  a
  3672     0   545    33     0    96     0      66  ,
  3673     0   545    35     0    96     0      32  double
  3674     0   545    42     0    96     0     111  x
  3675     0   545    43     0    96     0      66  ,
  3676     0   545    45     0    96     0      39  boolean
  3677     0   545    53     0    96     0     111  bigEndian
  3678     0   545    62     0    96     0      60  )
  3679     0   545    64     0    96     0      63  {
  3680     0   546     9     0    96     0      31  if
  3681     0   546    12     0    96     0      59  (
  3682     0   546    13     0    96     0     111  bigEndian
  3683     0   546    22     0    96     0      60  )
  3684     0   547    13     0    96     0     111  putDoubleB
  3685     0   547    23     0    96     0      59  (
  3686     0   547    24     0    96     0     111  a
  3687     0   547    25     0    96     0      66  ,
  3688     0   547    27     0    96     0     111  x
  3689     0   547    28     0    96     0      60  )
  3690     0   547    29     0    96     0     102  ;
  3691     0   548     9     0    96     0      48  else
  3692     0   549    13     0    96     0     111  putDoubleL
  3693     0   549    23     0    96     0      59  (
  3694     0   549    24     0    96     0     111  a
  3695     0   549    25     0    96     0      66  ,
  3696     0   549    27     0    96     0     111  x
  3697     0   549    28     0    96     0      60  )
  3698     0   549    29     0    96     0     102  ;
  3699     0   550     5     0    96     0      64  }
  3700     0   550     5     0    96     0     316  ENDMETHOD
  3701     0   555     5     0    -1     0      41  private
  3702     0   555    13     0    -1     0      45  static
  3703     0   555    26     0    -1     0     111  Unsafe
  3704     0   555    33     0    -1     0     111  unsafe
  3705     0   555    40     0    -1     0      67  =
  3706     0   555    42     0    -1     0     111  Unsafe.getUnsafe
  3707     0   555    58     0    -1     0      59  (
  3708     0   555    59     0    -1     0      60  )
  3709     0   555    60     0    -1     0     102  ;
  3710     0   555    60     0    97     0     317  STARTMETHOD
  3711     0   557     5     0    97     0      41  private
  3712     0   557    13     0    97     0      45  static
  3713     0   557    25     0    97     0     111  _get
  3714     0   557    29     0    97     0      59  (
  3715     0   557    30     0    97     0      53  long
  3716     0   557    35     0    97     0     111  a
  3717     0   557    36     0    97     0      60  )
  3718     0   557    38     0    97     0      63  {
  3719     0   558     9     0    97     0      19  return
  3720     0   558    16     0    97     0     111  unsafe.getByte
  3721     0   558    30     0    97     0      59  (
  3722     0   558    31     0    97     0     111  a
  3723     0   558    32     0    97     0      60  )
  3724     0   558    33     0    97     0     102  ;
  3725     0   559     5     0    97     0      64  }
  3726     0   559     5     0    97     0     318  ENDMETHOD
  3727     0   559     5     0    98     0     319  STARTMETHOD
  3728     0   561     5     0    98     0      41  private
  3729     0   561    13     0    98     0      45  static
  3730     0   561    20     0    98     0      50  void
  3731     0   561    25     0    98     0     111  _put
  3732     0   561    29     0    98     0      59  (
  3733     0   561    30     0    98     0      53  long
  3734     0   561    35     0    98     0     111  a
  3735     0   561    36     0    98     0      66  ,
  3736     0   561    43     0    98     0     111  b
  3737     0   561    44     0    98     0      60  )
  3738     0   561    46     0    98     0      63  {
  3739     0   562     9     0    98     0     111  unsafe.putByte
  3740     0   562    23     0    98     0      59  (
  3741     0   562    24     0    98     0     111  a
  3742     0   562    25     0    98     0      66  ,
  3743     0   562    27     0    98     0     111  b
  3744     0   562    28     0    98     0      60  )
  3745     0   562    29     0    98     0     102  ;
  3746     0   563     5     0    98     0      64  }
  3747     0   563     5     0    98     0     320  ENDMETHOD
  3748     0   563     5     0    99     0     321  STARTMETHOD
  3749     0   565     5     0    99     0      45  static
  3750     0   565    12     0    99     0     111  Unsafe
  3751     0   565    19     0    99     0     111  unsafe
  3752     0   565    25     0    99     0      59  (
  3753     0   565    26     0    99     0      60  )
  3754     0   565    28     0    99     0      63  {
  3755     0   566     9     0    99     0      19  return
  3756     0   566    16     0    99     0     111  unsafe
  3757     0   566    22     0    99     0     102  ;
  3758     0   567     5     0    99     0      64  }
  3759     0   567     5     0    99     0     322  ENDMETHOD
  3760     0   572     5     0    -1     0      41  private
  3761     0   572    13     0    -1     0      45  static
  3762     0   572    26     0    -1     0     111  ByteOrder
  3763     0   572    36     0    -1     0     111  byteOrder
  3764     0   572    45     0    -1     0     102  ;
  3765     0   572    45     0   100     0     323  STARTMETHOD
  3766     0   574     5     0   100     0      45  static
  3767     0   574    12     0   100     0     111  ByteOrder
  3768     0   574    22     0   100     0     111  byteOrder
  3769     0   574    31     0   100     0      59  (
  3770     0   574    32     0   100     0      60  )
  3771     0   574    34     0   100     0      63  {
  3772     0   575     9     0   100     0      31  if
  3773     0   575    12     0   100     0      59  (
  3774     0   575    13     0   100     0     111  byteOrder
  3775     0   575    23     0   100     0      68  ==
  3776     0   575    26     0   100     0      21  null
  3777     0   575    30     0   100     0      60  )
  3778     0   576    13     0   100     0      20  throw
  3779     0   576    23     0   100     0     111  Error
  3780     0   576    28     0   100     0      59  (
  3781     0   576    29     0   100     0     107  "Unknown byte order"
  3782     0   576    49     0   100     0      60  )
  3783     0   576    50     0   100     0     102  ;
  3784     0   577     9     0   100     0      19  return
  3785     0   577    16     0   100     0     111  byteOrder
  3786     0   577    25     0   100     0     102  ;
  3787     0   578     5     0   100     0      64  }
  3788     0   578     5     0   100     0     324  ENDMETHOD
  3789     0   580     5     0    -1     0      45  static
  3790     0   580    12     0    -1     0      63  {
  3791     0   581     9     0    -1     0      53  long
  3792     0   581    14     0    -1     0     111  a
  3793     0   581    16     0    -1     0      67  =
  3794     0   581    18     0    -1     0     111  unsafe.allocateMemory
  3795     0   581    39     0    -1     0      59  (
  3796     0   581    40     0    -1     0     112  8
  3797     0   581    41     0    -1     0      60  )
  3798     0   581    42     0    -1     0     102  ;
  3799     0   582     9     0    -1     0      35  try
  3800     0   582    13     0    -1     0      63  {
  3801     0   583    13     0    -1     0     111  unsafe.putLong
  3802     0   583    27     0    -1     0      59  (
  3803     0   583    28     0    -1     0     111  a
  3804     0   583    29     0    -1     0      66  ,
  3805     0   583    31     0    -1     0      55  0x0102030405060708L
  3806     0   583    50     0    -1     0      60  )
  3807     0   583    51     0    -1     0     102  ;
  3808     0   584    18     0    -1     0     111  b
  3809     0   584    20     0    -1     0      67  =
  3810     0   584    22     0    -1     0     111  unsafe.getByte
  3811     0   584    36     0    -1     0      59  (
  3812     0   584    37     0    -1     0     111  a
  3813     0   584    38     0    -1     0      60  )
  3814     0   584    39     0    -1     0     102  ;
  3815     0   585    13     0    -1     0      51  switch
  3816     0   585    20     0    -1     0      59  (
  3817     0   585    21     0    -1     0     111  b
  3818     0   585    22     0    -1     0      60  )
  3819     0   585    24     0    -1     0      63  {
  3820     0   586    18     0    -1     1     112  0x01
  3821     0   586    22     0    -1     1      65  :
  3822     0   586    24     0    -1     1     111  byteOrder
  3823     0   586    34     0    -1     1      67  =
  3824     0   586    36     0    -1     1     111  ByteOrder.BIG_ENDIAN
  3825     0   586    56     0    -1     1     102  ;
  3826     0   586    67     0    -1     1     102  ;
  3827     0   587    18     0    -1     1     112  0x08
  3828     0   587    22     0    -1     1      65  :
  3829     0   587    24     0    -1     1     111  byteOrder
  3830     0   587    34     0    -1     1      67  =
  3831     0   587    36     0    -1     1     111  ByteOrder.LITTLE_ENDIAN
  3832     0   587    59     0    -1     1     102  ;
  3833     0   587    67     0    -1     1     102  ;
  3834     0   588    13     0    -1     0      42  default
  3835     0   588    20     0    -1     0      65  :
  3836     0   589    17     0    -1     0     111  assert
  3837     0   589    24     0    -1     0      43  false
  3838     0   589    29     0    -1     0     102  ;
  3839     0   590    17     0    -1     0     111  byteOrder
  3840     0   590    27     0    -1     0      67  =
  3841     0   590    29     0    -1     0      21  null
  3842     0   590    33     0    -1     0     102  ;
  3843     0   591    13     0    -1     0      64  }
  3844     0   592     9     0    -1     0      64  }
  3845     0   592    11     0    -1     0      47  finally
  3846     0   592    19     0    -1     0      63  {
  3847     0   593    13     0    -1     0     111  unsafe.freeMemory
  3848     0   593    30     0    -1     0      59  (
  3849     0   593    31     0    -1     0     111  a
  3850     0   593    32     0    -1     0      60  )
  3851     0   593    33     0    -1     0     102  ;
  3852     0   594     9     0    -1     1      64  }
  3853     0   595     5     0    -1     1      64  }
  3854     0   598     5     0    -1     0      41  private
  3855     0   598    13     0    -1     0      45  static
  3856     0   598    20     0    -1     0      36  int
  3857     0   598    24     0    -1     0     111  pageSize
  3858     0   598    33     0    -1     0      67  =
  3859     0   598    35     0    -1     0      77  -
  3860     0   598    36     0    -1     0     112  1
  3861     0   598    37     0    -1     0     102  ;
  3862     0   598    37     0   101     0     325  STARTMETHOD
  3863     0   600     5     0   101     0      45  static
  3864     0   600    12     0   101     0      36  int
  3865     0   600    16     0   101     0     111  pageSize
  3866     0   600    24     0   101     0      59  (
  3867     0   600    25     0   101     0      60  )
  3868     0   600    27     0   101     0      63  {
  3869     0   601     9     0   101     0      31  if
  3870     0   601    12     0   101     0      59  (
  3871     0   601    13     0   101     0     111  pageSize
  3872     0   601    22     0   101     0      68  ==
  3873     0   601    25     0   101     0      77  -
  3874     0   601    26     0   101     0     112  1
  3875     0   601    27     0   101     0      60  )
  3876     0   602    13     0   101     0     111  pageSize
  3877     0   602    22     0   101     0      67  =
  3878     0   602    24     0   101     0     111  unsafe
  3879     0   602    30     0   101     0      59  (
  3880     0   602    31     0   101     0      60  )
  3881     0   602    32     0   101     0      54  .
  3882     0   602    33     0   101     0     111  pageSize
  3883     0   602    41     0   101     0      59  (
  3884     0   602    42     0   101     0      60  )
  3885     0   602    43     0   101     0     102  ;
  3886     0   603     9     0   101     0      19  return
  3887     0   603    16     0   101     0     111  pageSize
  3888     0   603    24     0   101     0     102  ;
  3889     0   604     5     0   101     0      64  }
  3890     0   604     5     0   101     0     326  ENDMETHOD
  3891     0   607     5     0    -1     0      41  private
  3892     0   607    13     0    -1     0      45  static
  3893     0   607    20     0    -1     0      39  boolean
  3894     0   607    28     0    -1     0     111  unaligned
  3895     0   607    37     0    -1     0     102  ;
  3896     0   608     5     0    -1     0      41  private
  3897     0   608    13     0    -1     0      45  static
  3898     0   608    20     0    -1     0      39  boolean
  3899     0   608    28     0    -1     0     111  unalignedKnown
  3900     0   608    43     0    -1     0      67  =
  3901     0   608    45     0    -1     0      43  false
  3902     0   608    50     0    -1     0     102  ;
  3903     0   608    50     0   102     0     327  STARTMETHOD
  3904     0   610     5     0   102     0      45  static
  3905     0   610    12     0   102     0      39  boolean
  3906     0   610    20     0   102     0     111  unaligned
  3907     0   610    29     0   102     0      59  (
  3908     0   610    30     0   102     0      60  )
  3909     0   610    32     0   102     0      63  {
  3910     0   611     9     0   102     0      31  if
  3911     0   611    12     0   102     0      59  (
  3912     0   611    13     0   102     0     111  unalignedKnown
  3913     0   611    27     0   102     0      60  )
  3914     0   612    13     0   102     0      19  return
  3915     0   612    20     0   102     0     111  unaligned
  3916     0   612    29     0   102     0     102  ;
  3917     0   613     9     0   102     0     111  String
  3918     0   613    16     0   102     0     111  arch
  3919     0   613    21     0   102     0      67  =
  3920     0   613    23     0   102     0     111  AccessController.doPrivileged
  3921     0   613    52     0   102     0      59  (
  3922     0   614    17     0   102     0     111  sun.security.action.GetPropertyAction
  3923     0   614    54     0   102     0      59  (
  3924     0   614    55     0   102     0     107  "os.arch"
  3925     0   614    64     0   102     0      60  )
  3926     0   614    65     0   102     0      60  )
  3927     0   614    66     0   102     0     102  ;
  3928     0   615     9     0   102     0     111  unaligned
  3929     0   615    19     0   102     0      67  =
  3930     0   615    21     0   102     0     111  arch.equals
  3931     0   615    32     0   102     0      59  (
  3932     0   615    33     0   102     0     107  "i386"
  3933     0   615    39     0   102     0      60  )
  3934     0   615    41     0   102     0      98  ||
  3935     0   615    44     0   102     0     111  arch.equals
  3936     0   615    55     0   102     0      59  (
  3937     0   615    56     0   102     0     107  "x86"
  3938     0   615    61     0   102     0      60  )
  3939     0   616    13     0   102     0      98  ||
  3940     0   616    16     0   102     0     111  arch.equals
  3941     0   616    27     0   102     0      59  (
  3942     0   616    28     0   102     0     107  "amd64"
  3943     0   616    35     0   102     0      60  )
  3944     0   616    36     0   102     0     102  ;
  3945     0   617     9     0   102     0     111  unalignedKnown
  3946     0   617    24     0   102     0      67  =
  3947     0   617    26     0   102     0      52  true
  3948     0   617    30     0   102     0     102  ;
  3949     0   618     9     0   102     0      19  return
  3950     0   618    16     0   102     0     111  unaligned
  3951     0   618    25     0   102     0     102  ;
  3952     0   619     5     0   102     0      64  }
  3953     0   619     5     0   102     0     328  ENDMETHOD
  3954     0   627     5     0    -1     0      41  private
  3955     0   627    13     0    -1     0      45  static
  3956     0   627    20     0    -1     0      33  volatile
  3957     0   627    29     0    -1     0      53  long
  3958     0   627    34     0    -1     0     111  maxMemory
  3959     0   627    44     0    -1     0      67  =
  3960     0   627    46     0    -1     0     111  VM.maxDirectMemory
  3961     0   627    64     0    -1     0      59  (
  3962     0   627    65     0    -1     0      60  )
  3963     0   627    66     0    -1     0     102  ;
  3964     0   628     5     0    -1     0      41  private
  3965     0   628    13     0    -1     0      45  static
  3966     0   628    20     0    -1     0      33  volatile
  3967     0   628    29     0    -1     0      53  long
  3968     0   628    34     0    -1     0     111  reservedMemory
  3969     0   628    49     0    -1     0      67  =
  3970     0   628    51     0    -1     0     112  0
  3971     0   628    52     0    -1     0     102  ;
  3972     0   629     5     0    -1     0      41  private
  3973     0   629    13     0    -1     0      45  static
  3974     0   629    20     0    -1     0      39  boolean
  3975     0   629    28     0    -1     0     111  memoryLimitSet
  3976     0   629    43     0    -1     0      67  =
  3977     0   629    45     0    -1     0      43  false
  3978     0   629    50     0    -1     0     102  ;
  3979     0   629    50     0   103     0     329  STARTMETHOD
  3980     0   634     5     0   103     0      45  static
  3981     0   634    12     0   103     0      50  void
  3982     0   634    17     0   103     0     111  reserveMemory
  3983     0   634    30     0   103     0      59  (
  3984     0   634    31     0   103     0      53  long
  3985     0   634    36     0   103     0     111  size
  3986     0   634    40     0   103     0      60  )
  3987     0   634    42     0   103     0      63  {
  3988     0   636     9     0   103     0      18  synchronized
  3989     0   636    22     0   103     0      59  (
  3990     0   636    23     0   103     0     111  Bits.class
  3991     0   636    33     0   103     0      60  )
  3992     0   636    35     0   103     0      63  {
  3993     0   637    13     0   103     0      31  if
  3994     0   637    16     0   103     0      59  (
  3995     0   637    17     0   103     0      69  !
  3996     0   637    18     0   103     0     111  memoryLimitSet
  3997     0   637    33     0   103     0     101  &&
  3998     0   637    36     0   103     0     111  VM.isBooted
  3999     0   637    47     0   103     0      59  (
  4000     0   637    48     0   103     0      60  )
  4001     0   637    49     0   103     0      60  )
  4002     0   637    51     0   103     0      63  {
  4003     0   638    17     0   103     0     111  maxMemory
  4004     0   638    27     0   103     0      67  =
  4005     0   638    29     0   103     0     111  VM.maxDirectMemory
  4006     0   638    47     0   103     0      59  (
  4007     0   638    48     0   103     0      60  )
  4008     0   638    49     0   103     0     102  ;
  4009     0   639    17     0   103     0     111  memoryLimitSet
  4010     0   639    32     0   103     0      67  =
  4011     0   639    34     0   103     0      52  true
  4012     0   639    38     0   103     0     102  ;
  4013     0   640    13     0   103     0      64  }
  4014     0   641    13     0   103     0      31  if
  4015     0   641    16     0   103     0      59  (
  4016     0   641    17     0   103     0     111  size
  4017     0   641    22     0   103     0      92  <=
  4018     0   641    25     0   103     0     111  maxMemory
  4019     0   641    35     0   103     0      77  -
  4020     0   641    37     0   103     0     111  reservedMemory
  4021     0   641    51     0   103     0      60  )
  4022     0   641    53     0   103     0      63  {
  4023     0   642    17     0   103     0     111  reservedMemory
  4024     0   642    32     0   103     0      75  +=
  4025     0   642    35     0   103     0     111  size
  4026     0   642    39     0   103     0     102  ;
  4027     0   643    17     0   103     0      19  return
  4028     0   643    23     0   103     0     102  ;
  4029     0   644    13     0   103     1      64  }
  4030     0   645     9     0   103     1      64  }
  4031     0   647     9     0   103     0     111  System.gc
  4032     0   647    18     0   103     0      59  (
  4033     0   647    19     0   103     0      60  )
  4034     0   647    20     0   103     0     102  ;
  4035     0   648     9     0   103     0      35  try
  4036     0   648    13     0   103     0      63  {
  4037     0   649    13     0   103     0     111  Thread.sleep
  4038     0   649    25     0   103     0      59  (
  4039     0   649    26     0   103     0     112  100
  4040     0   649    29     0   103     0      60  )
  4041     0   649    30     0   103     0     102  ;
  4042     0   650     9     0   103     0      64  }
  4043     0   650    11     0   103     0      34  catch
  4044     0   650    17     0   103     0      59  (
  4045     0   650    18     0   103     0     111  InterruptedException
  4046     0   650    39     0   103     0     111  x
  4047     0   650    40     0   103     0      60  )
  4048     0   650    42     0   103     0      63  {
  4049     0   652    13     0   103     0     111  Thread.currentThread
  4050     0   652    33     0   103     0      59  (
  4051     0   652    34     0   103     0      60  )
  4052     0   652    35     0   103     0      54  .
  4053     0   652    36     0   103     0     111  interrupt
  4054     0   652    45     0   103     0      59  (
  4055     0   652    46     0   103     0      60  )
  4056     0   652    47     0   103     0     102  ;
  4057     0   653     9     0   103     0      64  }
  4058     0   654     9     0   103     0      18  synchronized
  4059     0   654    22     0   103     0      59  (
  4060     0   654    23     0   103     0     111  Bits.class
  4061     0   654    33     0   103     0      60  )
  4062     0   654    35     0   103     0      63  {
  4063     0   655    13     0   103     0      31  if
  4064     0   655    16     0   103     0      59  (
  4065     0   655    17     0   103     0     111  reservedMemory
  4066     0   655    32     0   103     0      74  +
  4067     0   655    34     0   103     0     111  size
  4068     0   655    39     0   103     0      89  >
  4069     0   655    41     0   103     0     111  maxMemory
  4070     0   655    50     0   103     0      60  )
  4071     0   656    17     0   103     0      20  throw
  4072     0   656    27     0   103     0     111  OutOfMemoryError
  4073     0   656    43     0   103     0      59  (
  4074     0   656    44     0   103     0     107  "Direct buffer memory"
  4075     0   656    66     0   103     0      60  )
  4076     0   656    67     0   103     0     102  ;
  4077     0   657    13     0   103     0     111  reservedMemory
  4078     0   657    28     0   103     0      75  +=
  4079     0   657    31     0   103     0     111  size
  4080     0   657    35     0   103     0     102  ;
  4081     0   658     9     0   103     0      64  }
  4082     0   660     5     0   103     0      64  }
  4083     0   660     5     0   103     0     330  ENDMETHOD
  4084     0   660     5     0   104     0     331  STARTMETHOD
  4085     0   662     5     0   104     0      45  static
  4086     0   662    12     0   104     0      18  synchronized
  4087     0   662    25     0   104     0      50  void
  4088     0   662    30     0   104     0     111  unreserveMemory
  4089     0   662    45     0   104     0      59  (
  4090     0   662    46     0   104     0      53  long
  4091     0   662    51     0   104     0     111  size
  4092     0   662    55     0   104     0      60  )
  4093     0   662    57     0   104     0      63  {
  4094     0   663     9     0   104     0      31  if
  4095     0   663    12     0   104     0      59  (
  4096     0   663    13     0   104     0     111  reservedMemory
  4097     0   663    28     0   104     0      89  >
  4098     0   663    30     0   104     0     112  0
  4099     0   663    31     0   104     0      60  )
  4100     0   663    33     0   104     0      63  {
  4101     0   664    13     0   104     0     111  reservedMemory
  4102     0   664    28     0   104     0      78  -=
  4103     0   664    31     0   104     0     111  size
  4104     0   664    35     0   104     0     102  ;
  4105     0   665    13     0   104     0     111  assert
  4106     0   665    20     0   104     0      59  (
  4107     0   665    21     0   104     0     111  reservedMemory
  4108     0   665    36     0   104     0      89  >
  4109     0   665    38     0   104     0      77  -
  4110     0   665    39     0   104     0     112  1
  4111     0   665    40     0   104     0      60  )
  4112     0   665    41     0   104     0     102  ;
  4113     0   666     9     0   104     0      64  }
  4114     0   667     5     0   104     0      64  }
  4115     0   667     5     0   104     0     332  ENDMETHOD
  4116     0   675     5     0    -1     1      45  static
  4117     0   675    18     0    -1     1      36  int
  4118     0   675    22     0    -1     1     111  JNI_COPY_TO_ARRAY_THRESHOLD
  4119     0   675    52     0    -1     1      67  =
  4120     0   675    54     0    -1     1     112  6
  4121     0   675    55     0    -1     1     102  ;
  4122     0   676     5     0    -1     1      45  static
  4123     0   676    18     0    -1     1      36  int
  4124     0   676    22     0    -1     1     111  JNI_COPY_FROM_ARRAY_THRESHOLD
  4125     0   676    52     0    -1     1      67  =
  4126     0   676    54     0    -1     1     112  6
  4127     0   676    55     0    -1     1     102  ;
  4128     0   682     5     0    -1     0      45  static
  4129     0   682    12     0    -1     0      29  native
  4130     0   682    19     0    -1     0      50  void
  4131     0   682    24     0    -1     0     111  copyFromByteArray
  4132     0   682    41     0    -1     0      59  (
  4133     0   682    42     0    -1     0     111  Object
  4134     0   682    49     0    -1     0     111  src
  4135     0   682    52     0    -1     0      66  ,
  4136     0   682    54     0    -1     0      53  long
  4137     0   682    59     0    -1     0     111  srcPos
  4138     0   682    65     0    -1     0      66  ,
  4139     0   682    67     0    -1     0      53  long
  4140     0   682    72     0    -1     0     111  dstAddr
  4141     0   682    79     0    -1     0      66  ,
  4142     0   683    42     0    -1     0      53  long
  4143     0   683    47     0    -1     0     111  length
  4144     0   683    53     0    -1     0      60  )
  4145     0   683    54     0    -1     0     102  ;
  4146     0   684     5     0    -1     0      45  static
  4147     0   684    12     0    -1     0      29  native
  4148     0   684    19     0    -1     0      50  void
  4149     0   684    24     0    -1     0     111  copyToByteArray
  4150     0   684    39     0    -1     0      59  (
  4151     0   684    40     0    -1     0      53  long
  4152     0   684    45     0    -1     0     111  srcAddr
  4153     0   684    52     0    -1     0      66  ,
  4154     0   684    54     0    -1     0     111  Object
  4155     0   684    61     0    -1     0     111  dst
  4156     0   684    64     0    -1     0      66  ,
  4157     0   684    66     0    -1     0      53  long
  4158     0   684    71     0    -1     0     111  dstPos
  4159     0   684    77     0    -1     0      66  ,
  4160     0   685    40     0    -1     0      53  long
  4161     0   685    45     0    -1     0     111  length
  4162     0   685    51     0    -1     0      60  )
  4163     0   685    52     0    -1     0     102  ;
  4164     0   685    52     0   105     0     333  STARTMETHOD
  4165     0   687     5     0   105     0      45  static
  4166     0   687    12     0   105     0      50  void
  4167     0   687    17     0   105     0     111  copyFromCharArray
  4168     0   687    34     0   105     0      59  (
  4169     0   687    35     0   105     0     111  Object
  4170     0   687    42     0   105     0     111  src
  4171     0   687    45     0   105     0      66  ,
  4172     0   687    47     0   105     0      53  long
  4173     0   687    52     0   105     0     111  srcPos
  4174     0   687    58     0   105     0      66  ,
  4175     0   687    60     0   105     0      53  long
  4176     0   687    65     0   105     0     111  dstAddr
  4177     0   687    72     0   105     0      66  ,
  4178     0   688    35     0   105     0      53  long
  4179     0   688    40     0   105     0     111  length
  4180     0   688    46     0   105     0      60  )
  4181     0   689     5     0   105     0      63  {
  4182     0   690     9     0   105     0     111  copyFromShortArray
  4183     0   690    27     0   105     0      59  (
  4184     0   690    28     0   105     0     111  src
  4185     0   690    31     0   105     0      66  ,
  4186     0   690    33     0   105     0     111  srcPos
  4187     0   690    39     0   105     0      66  ,
  4188     0   690    41     0   105     0     111  dstAddr
  4189     0   690    48     0   105     0      66  ,
  4190     0   690    50     0   105     0     111  length
  4191     0   690    56     0   105     0      60  )
  4192     0   690    57     0   105     0     102  ;
  4193     0   691     5     0   105     0      64  }
  4194     0   691     5     0   105     0     334  ENDMETHOD
  4195     0   691     5     0   106     0     335  STARTMETHOD
  4196     0   693     5     0   106     0      45  static
  4197     0   693    12     0   106     0      50  void
  4198     0   693    17     0   106     0     111  copyToCharArray
  4199     0   693    32     0   106     0      59  (
  4200     0   693    33     0   106     0      53  long
  4201     0   693    38     0   106     0     111  srcAddr
  4202     0   693    45     0   106     0      66  ,
  4203     0   693    47     0   106     0     111  Object
  4204     0   693    54     0   106     0     111  dst
  4205     0   693    57     0   106     0      66  ,
  4206     0   693    59     0   106     0      53  long
  4207     0   693    64     0   106     0     111  dstPos
  4208     0   693    70     0   106     0      66  ,
  4209     0   694    33     0   106     0      53  long
  4210     0   694    38     0   106     0     111  length
  4211     0   694    44     0   106     0      60  )
  4212     0   695     5     0   106     0      63  {
  4213     0   696     9     0   106     0     111  copyToShortArray
  4214     0   696    25     0   106     0      59  (
  4215     0   696    26     0   106     0     111  srcAddr
  4216     0   696    33     0   106     0      66  ,
  4217     0   696    35     0   106     0     111  dst
  4218     0   696    38     0   106     0      66  ,
  4219     0   696    40     0   106     0     111  dstPos
  4220     0   696    46     0   106     0      66  ,
  4221     0   696    48     0   106     0     111  length
  4222     0   696    54     0   106     0      60  )
  4223     0   696    55     0   106     0     102  ;
  4224     0   697     5     0   106     0      64  }
  4225     0   697     5     0   106     0     336  ENDMETHOD
  4226     0   699     5     0    -1     0      45  static
  4227     0   699    12     0    -1     0      29  native
  4228     0   699    19     0    -1     0      50  void
  4229     0   699    24     0    -1     0     111  copyFromShortArray
  4230     0   699    42     0    -1     0      59  (
  4231     0   699    43     0    -1     0     111  Object
  4232     0   699    50     0    -1     0     111  src
  4233     0   699    53     0    -1     0      66  ,
  4234     0   699    55     0    -1     0      53  long
  4235     0   699    60     0    -1     0     111  srcPos
  4236     0   699    66     0    -1     0      66  ,
  4237     0   699    68     0    -1     0      53  long
  4238     0   699    73     0    -1     0     111  dstAddr
  4239     0   699    80     0    -1     0      66  ,
  4240     0   700    43     0    -1     0      53  long
  4241     0   700    48     0    -1     0     111  length
  4242     0   700    54     0    -1     0      60  )
  4243     0   700    55     0    -1     0     102  ;
  4244     0   701     5     0    -1     0      45  static
  4245     0   701    12     0    -1     0      29  native
  4246     0   701    19     0    -1     0      50  void
  4247     0   701    24     0    -1     0     111  copyToShortArray
  4248     0   701    40     0    -1     0      59  (
  4249     0   701    41     0    -1     0      53  long
  4250     0   701    46     0    -1     0     111  srcAddr
  4251     0   701    53     0    -1     0      66  ,
  4252     0   701    55     0    -1     0     111  Object
  4253     0   701    62     0    -1     0     111  dst
  4254     0   701    65     0    -1     0      66  ,
  4255     0   701    67     0    -1     0      53  long
  4256     0   701    72     0    -1     0     111  dstPos
  4257     0   701    78     0    -1     0      66  ,
  4258     0   702    41     0    -1     0      53  long
  4259     0   702    46     0    -1     0     111  length
  4260     0   702    52     0    -1     0      60  )
  4261     0   702    53     0    -1     0     102  ;
  4262     0   704     5     0    -1     0      45  static
  4263     0   704    12     0    -1     0      29  native
  4264     0   704    19     0    -1     0      50  void
  4265     0   704    24     0    -1     0     111  copyFromIntArray
  4266     0   704    40     0    -1     0      59  (
  4267     0   704    41     0    -1     0     111  Object
  4268     0   704    48     0    -1     0     111  src
  4269     0   704    51     0    -1     0      66  ,
  4270     0   704    53     0    -1     0      53  long
  4271     0   704    58     0    -1     0     111  srcPos
  4272     0   704    64     0    -1     0      66  ,
  4273     0   704    66     0    -1     0      53  long
  4274     0   704    71     0    -1     0     111  dstAddr
  4275     0   704    78     0    -1     0      66  ,
  4276     0   705    41     0    -1     0      53  long
  4277     0   705    46     0    -1     0     111  length
  4278     0   705    52     0    -1     0      60  )
  4279     0   705    53     0    -1     0     102  ;
  4280     0   706     5     0    -1     0      45  static
  4281     0   706    12     0    -1     0      29  native
  4282     0   706    19     0    -1     0      50  void
  4283     0   706    24     0    -1     0     111  copyToIntArray
  4284     0   706    38     0    -1     0      59  (
  4285     0   706    39     0    -1     0      53  long
  4286     0   706    44     0    -1     0     111  srcAddr
  4287     0   706    51     0    -1     0      66  ,
  4288     0   706    53     0    -1     0     111  Object
  4289     0   706    60     0    -1     0     111  dst
  4290     0   706    63     0    -1     0      66  ,
  4291     0   706    65     0    -1     0      53  long
  4292     0   706    70     0    -1     0     111  dstPos
  4293     0   706    76     0    -1     0      66  ,
  4294     0   707    41     0    -1     0      53  long
  4295     0   707    46     0    -1     0     111  length
  4296     0   707    52     0    -1     0      60  )
  4297     0   707    53     0    -1     0     102  ;
  4298     0   709     5     0    -1     0      45  static
  4299     0   709    12     0    -1     0      29  native
  4300     0   709    19     0    -1     0      50  void
  4301     0   709    24     0    -1     0     111  copyFromLongArray
  4302     0   709    41     0    -1     0      59  (
  4303     0   709    42     0    -1     0     111  Object
  4304     0   709    49     0    -1     0     111  src
  4305     0   709    52     0    -1     0      66  ,
  4306     0   709    54     0    -1     0      53  long
  4307     0   709    59     0    -1     0     111  srcPos
  4308     0   709    65     0    -1     0      66  ,
  4309     0   709    67     0    -1     0      53  long
  4310     0   709    72     0    -1     0     111  dstAddr
  4311     0   709    79     0    -1     0      66  ,
  4312     0   710    42     0    -1     0      53  long
  4313     0   710    47     0    -1     0     111  length
  4314     0   710    53     0    -1     0      60  )
  4315     0   710    54     0    -1     0     102  ;
  4316     0   711     5     0    -1     0      45  static
  4317     0   711    12     0    -1     0      29  native
  4318     0   711    19     0    -1     0      50  void
  4319     0   711    24     0    -1     0     111  copyToLongArray
  4320     0   711    39     0    -1     0      59  (
  4321     0   711    40     0    -1     0      53  long
  4322     0   711    45     0    -1     0     111  srcAddr
  4323     0   711    52     0    -1     0      66  ,
  4324     0   711    54     0    -1     0     111  Object
  4325     0   711    61     0    -1     0     111  dst
  4326     0   711    64     0    -1     0      66  ,
  4327     0   711    66     0    -1     0      53  long
  4328     0   711    71     0    -1     0     111  dstPos
  4329     0   711    77     0    -1     0      66  ,
  4330     0   712    40     0    -1     0      53  long
  4331     0   712    45     0    -1     0     111  length
  4332     0   712    51     0    -1     0      60  )
  4333     0   712    52     0    -1     0     102  ;
  4334     0   714     1     0    -1     0      64  }
  4335     0   714     1     0    -1     1     337  ENDCLASS
  4336     0   714     1    -1    -1     1     338  ENDFILE C:\Users\RA\javasrc\java\nio\Bits.java
  4337     1     1     1    -1    -1     1     339  STARTFILE C:\Users\RA\javasrc\java\nio\Buffer.java
  4338     1    26     9    -1    -1     0     111  java.nio
  4339     1    26    17    -1    -1     0     102  ;
  4340     1   173    17     1    -1     0     340  STARTCLASS
  4341     1   173    17     1    -1     0      24  class
  4342     1   173    23     1    -1     0     111  Buffer
  4343     1   173    30     1    -1     0      63  {
  4344     1   176     5     1    -1     0      41  private
  4345     1   176    13     1    -1     0      36  int
  4346     1   176    17     1    -1     0     111  mark
  4347     1   176    22     1    -1     0      67  =
  4348     1   176    24     1    -1     0      77  -
  4349     1   176    25     1    -1     0     112  1
  4350     1   176    26     1    -1     0     102  ;
  4351     1   177     5     1    -1     0      41  private
  4352     1   177    13     1    -1     0      36  int
  4353     1   177    17     1    -1     0     111  position
  4354     1   177    26     1    -1     0      67  =
  4355     1   177    28     1    -1     0     112  0
  4356     1   177    29     1    -1     0     102  ;
  4357     1   178     5     1    -1     1      41  private
  4358     1   178    13     1    -1     1      36  int
  4359     1   178    17     1    -1     1     111  limit
  4360     1   178    22     1    -1     1     102  ;
  4361     1   179     5     1    -1     1      41  private
  4362     1   179    13     1    -1     1      36  int
  4363     1   179    17     1    -1     1     111  capacity
  4364     1   179    25     1    -1     1     102  ;
  4365     1   183     5     1    -1     0      53  long
  4366     1   183    10     1    -1     0     111  address
  4367     1   183    17     1    -1     0     102  ;
  4368     1   183    17     1   107     0     341  STARTMETHOD
  4369     1   188     5     1   107     0     111  Buffer
  4370     1   188    11     1   107     0      59  (
  4371     1   188    12     1   107     0      36  int
  4372     1   188    16     1   107     0     111  mark
  4373     1   188    20     1   107     0      66  ,
  4374     1   188    22     1   107     0      36  int
  4375     1   188    26     1   107     0     111  pos
  4376     1   188    29     1   107     0      66  ,
  4377     1   188    31     1   107     0      36  int
  4378     1   188    35     1   107     0     111  lim
  4379     1   188    38     1   107     0      66  ,
  4380     1   188    40     1   107     0      36  int
  4381     1   188    44     1   107     0     111  cap
  4382     1   188    47     1   107     0      60  )
  4383     1   188    49     1   107     0      63  {
  4384     1   189     9     1   107     0      31  if
  4385     1   189    12     1   107     0      59  (
  4386     1   189    13     1   107     0     111  cap
  4387     1   189    17     1   107     0      93  <
  4388     1   189    19     1   107     0     112  0
  4389     1   189    20     1   107     0      60  )
  4390     1   190    13     1   107     0      20  throw
  4391     1   190    23     1   107     0     111  IllegalArgumentException
  4392     1   190    47     1   107     0      59  (
  4393     1   190    48     1   107     0     107  "Negative capacity: "
  4394     1   190    70     1   107     0      74  +
  4395     1   190    72     1   107     0     111  cap
  4396     1   190    75     1   107     0      60  )
  4397     1   190    76     1   107     0     102  ;
  4398     1   191     9     1   107     0     111  this.capacity
  4399     1   191    23     1   107     0      67  =
  4400     1   191    25     1   107     0     111  cap
  4401     1   191    28     1   107     0     102  ;
  4402     1   192     9     1   107     1     111  limit
  4403     1   192    14     1   107     1      59  (
  4404     1   192    15     1   107     1     111  lim
  4405     1   192    18     1   107     1      60  )
  4406     1   192    19     1   107     1     102  ;
  4407     1   193     9     1   107     1     111  position
  4408     1   193    17     1   107     1      59  (
  4409     1   193    18     1   107     1     111  pos
  4410     1   193    21     1   107     1      60  )
  4411     1   193    22     1   107     1     102  ;
  4412     1   194     9     1   107     0      31  if
  4413     1   194    12     1   107     0      59  (
  4414     1   194    13     1   107     0     111  mark
  4415     1   194    18     1   107     0      88  >=
  4416     1   194    21     1   107     0     112  0
  4417     1   194    22     1   107     0      60  )
  4418     1   194    24     1   107     0      63  {
  4419     1   195    13     1   107     0      31  if
  4420     1   195    16     1   107     0      59  (
  4421     1   195    17     1   107     0     111  mark
  4422     1   195    22     1   107     0      89  >
  4423     1   195    24     1   107     0     111  pos
  4424     1   195    27     1   107     0      60  )
  4425     1   196    17     1   107     0      20  throw
  4426     1   196    27     1   107     0     111  IllegalArgumentException
  4427     1   196    51     1   107     0      59  (
  4428     1   196    52     1   107     0     107  "mark > position: ("
  4429     1   197    52     1   107     0      74  +
  4430     1   197    54     1   107     0     111  mark
  4431     1   197    59     1   107     0      74  +
  4432     1   197    61     1   107     0     107  " > "
  4433     1   197    67     1   107     0      74  +
  4434     1   197    69     1   107     0     111  pos
  4435     1   197    73     1   107     0      74  +
  4436     1   197    75     1   107     0     107  ")"
  4437     1   197    78     1   107     0      60  )
  4438     1   197    79     1   107     0     102  ;
  4439     1   198    13     1   107     0     111  this.mark
  4440     1   198    23     1   107     0      67  =
  4441     1   198    25     1   107     0     111  mark
  4442     1   198    29     1   107     0     102  ;
  4443     1   199     9     1   107     0      64  }
  4444     1   200     5     1   107     1      64  }
  4445     1   200     5     1   107     0     342  ENDMETHOD
  4446     1   200     5     1   108     0     343  STARTMETHOD
  4447     1   207    18     1   108     0      36  int
  4448     1   207    22     1   108     0     111  capacity
  4449     1   207    30     1   108     0      59  (
  4450     1   207    31     1   108     0      60  )
  4451     1   207    33     1   108     0      63  {
  4452     1   208     9     1   108     0      19  return
  4453     1   208    16     1   108     0     111  capacity
  4454     1   208    24     1   108     0     102  ;
  4455     1   209     5     1   108     1      64  }
  4456     1   209     5     1   108     0     344  ENDMETHOD
  4457     1   209     5     1   109     0     345  STARTMETHOD
  4458     1   216    18     1   109     0      36  int
  4459     1   216    22     1   109     0     111  position
  4460     1   216    30     1   109     0      59  (
  4461     1   216    31     1   109     0      60  )
  4462     1   216    33     1   109     0      63  {
  4463     1   217     9     1   109     0      19  return
  4464     1   217    16     1   109     0     111  position
  4465     1   217    24     1   109     0     102  ;
  4466     1   218     5     1   109     1      64  }
  4467     1   218     5     1   109     0     346  ENDMETHOD
  4468     1   218     5     1   110     0     347  STARTMETHOD
  4469     1   233    18     1   110     0     111  Buffer
  4470     1   233    25     1   110     0     111  position
  4471     1   233    33     1   110     0      59  (
  4472     1   233    34     1   110     0      36  int
  4473     1   233    38     1   110     0     111  newPosition
  4474     1   233    49     1   110     0      60  )
  4475     1   233    51     1   110     0      63  {
  4476     1   234     9     1   110     0      31  if
  4477     1   234    12     1   110     0      59  (
  4478     1   234    13     1   110     0      59  (
  4479     1   234    14     1   110     0     111  newPosition
  4480     1   234    26     1   110     0      89  >
  4481     1   234    28     1   110     0     111  limit
  4482     1   234    33     1   110     0      60  )
  4483     1   234    35     1   110     0      98  ||
  4484     1   234    38     1   110     0      59  (
  4485     1   234    39     1   110     0     111  newPosition
  4486     1   234    51     1   110     0      93  <
  4487     1   234    53     1   110     0     112  0
  4488     1   234    54     1   110     0      60  )
  4489     1   234    55     1   110     0      60  )
  4490     1   235    13     1   110     0      20  throw
  4491     1   235    23     1   110     0     111  IllegalArgumentException
  4492     1   235    47     1   110     0      59  (
  4493     1   235    48     1   110     0      60  )
  4494     1   235    49     1   110     0     102  ;
  4495     1   236     9     1   110     0     111  position
  4496     1   236    18     1   110     0      67  =
  4497     1   236    20     1   110     0     111  newPosition
  4498     1   236    31     1   110     0     102  ;
  4499     1   237     9     1   110     0      31  if
  4500     1   237    12     1   110     0      59  (
  4501     1   237    13     1   110     0     111  mark
  4502     1   237    18     1   110     0      89  >
  4503     1   237    20     1   110     0     111  position
  4504     1   237    28     1   110     0      60  )
  4505     1   237    30     1   110     0     111  mark
  4506     1   237    35     1   110     0      67  =
  4507     1   237    37     1   110     0      77  -
  4508     1   237    38     1   110     0     112  1
  4509     1   237    39     1   110     0     102  ;
  4510     1   238     9     1   110     0      19  return
  4511     1   238    16     1   110     0      44  this
  4512     1   238    20     1   110     0     102  ;
  4513     1   239     5     1   110     0      64  }
  4514     1   239     5     1   110     0     348  ENDMETHOD
  4515     1   239     5     1   111     0     349  STARTMETHOD
  4516     1   246    18     1   111     0      36  int
  4517     1   246    22     1   111     0     111  limit
  4518     1   246    27     1   111     0      59  (
  4519     1   246    28     1   111     0      60  )
  4520     1   246    30     1   111     0      63  {
  4521     1   247     9     1   111     0      19  return
  4522     1   247    16     1   111     0     111  limit
  4523     1   247    21     1   111     0     102  ;
  4524     1   248     5     1   111     0      64  }
  4525     1   248     5     1   111     0     350  ENDMETHOD
  4526     1   248     5     1   112     0     351  STARTMETHOD
  4527     1   264    18     1   112     0     111  Buffer
  4528     1   264    25     1   112     0     111  limit
  4529     1   264    30     1   112     0      59  (
  4530     1   264    31     1   112     0      36  int
  4531     1   264    35     1   112     0     111  newLimit
  4532     1   264    43     1   112     0      60  )
  4533     1   264    45     1   112     0      63  {
  4534     1   265     9     1   112     0      31  if
  4535     1   265    12     1   112     0      59  (
  4536     1   265    13     1   112     0      59  (
  4537     1   265    14     1   112     0     111  newLimit
  4538     1   265    23     1   112     0      89  >
  4539     1   265    25     1   112     0     111  capacity
  4540     1   265    33     1   112     0      60  )
  4541     1   265    35     1   112     0      98  ||
  4542     1   265    38     1   112     0      59  (
  4543     1   265    39     1   112     0     111  newLimit
  4544     1   265    48     1   112     0      93  <
  4545     1   265    50     1   112     0     112  0
  4546     1   265    51     1   112     0      60  )
  4547     1   265    52     1   112     0      60  )
  4548     1   266    13     1   112     0      20  throw
  4549     1   266    23     1   112     0     111  IllegalArgumentException
  4550     1   266    47     1   112     0      59  (
  4551     1   266    48     1   112     0      60  )
  4552     1   266    49     1   112     0     102  ;
  4553     1   267     9     1   112     0     111  limit
  4554     1   267    15     1   112     0      67  =
  4555     1   267    17     1   112     0     111  newLimit
  4556     1   267    25     1   112     0     102  ;
  4557     1   268     9     1   112     0      31  if
  4558     1   268    12     1   112     0      59  (
  4559     1   268    13     1   112     0     111  position
  4560     1   268    22     1   112     0      89  >
  4561     1   268    24     1   112     0     111  limit
  4562     1   268    29     1   112     0      60  )
  4563     1   268    31     1   112     0     111  position
  4564     1   268    40     1   112     0      67  =
  4565     1   268    42     1   112     0     111  limit
  4566     1   268    47     1   112     0     102  ;
  4567     1   269     9     1   112     0      31  if
  4568     1   269    12     1   112     0      59  (
  4569     1   269    13     1   112     0     111  mark
  4570     1   269    18     1   112     0      89  >
  4571     1   269    20     1   112     0     111  limit
  4572     1   269    25     1   112     0      60  )
  4573     1   269    27     1   112     0     111  mark
  4574     1   269    32     1   112     0      67  =
  4575     1   269    34     1   112     0      77  -
  4576     1   269    35     1   112     0     112  1
  4577     1   269    36     1   112     0     102  ;
  4578     1   270     9     1   112     0      19  return
  4579     1   270    16     1   112     0      44  this
  4580     1   270    20     1   112     0     102  ;
  4581     1   271     5     1   112     0      64  }
  4582     1   271     5     1   112     0     352  ENDMETHOD
  4583     1   271     5     1   113     0     353  STARTMETHOD
  4584     1   278    18     1   113     0     111  Buffer
  4585     1   278    25     1   113     0     111  mark
  4586     1   278    29     1   113     0      59  (
  4587     1   278    30     1   113     0      60  )
  4588     1   278    32     1   113     0      63  {
  4589     1   279     9     1   113     0     111  mark
  4590     1   279    14     1   113     0      67  =
  4591     1   279    16     1   113     0     111  position
  4592     1   279    24     1   113     0     102  ;
  4593     1   280     9     1   113     0      19  return
  4594     1   280    16     1   113     0      44  this
  4595     1   280    20     1   113     0     102  ;
  4596     1   281     5     1   113     0      64  }
  4597     1   281     5     1   113     0     354  ENDMETHOD
  4598     1   281     5     1   114     0     355  STARTMETHOD
  4599     1   294    18     1   114     0     111  Buffer
  4600     1   294    25     1   114     0     111  reset
  4601     1   294    30     1   114     0      59  (
  4602     1   294    31     1   114     0      60  )
  4603     1   294    33     1   114     0      63  {
  4604     1   295     9     1   114     0      36  int
  4605     1   295    13     1   114     0     111  m
  4606     1   295    15     1   114     0      67  =
  4607     1   295    17     1   114     0     111  mark
  4608     1   295    21     1   114     0     102  ;
  4609     1   296     9     1   114     0      31  if
  4610     1   296    12     1   114     0      59  (
  4611     1   296    13     1   114     0     111  m
  4612     1   296    15     1   114     0      93  <
  4613     1   296    17     1   114     0     112  0
  4614     1   296    18     1   114     0      60  )
  4615     1   297    13     1   114     0      20  throw
  4616     1   297    23     1   114     0     111  InvalidMarkException
  4617     1   297    43     1   114     0      59  (
  4618     1   297    44     1   114     0      60  )
  4619     1   297    45     1   114     0     102  ;
  4620     1   298     9     1   114     0     111  position
  4621     1   298    18     1   114     0      67  =
  4622     1   298    20     1   114     0     111  m
  4623     1   298    21     1   114     1     102  ;
  4624     1   299     9     1   114     1      19  return
  4625     1   299    16     1   114     1      44  this
  4626     1   299    20     1   114     1     102  ;
  4627     1   300     5     1   114     1      64  }
  4628     1   300     5     1   114     0     356  ENDMETHOD
  4629     1   300     5     1   115     0     357  STARTMETHOD
  4630     1   319    18     1   115     0     111  Buffer
  4631     1   319    25     1   115     0     111  clear
  4632     1   319    30     1   115     0      59  (
  4633     1   319    31     1   115     0      60  )
  4634     1   319    33     1   115     0      63  {
  4635     1   320     9     1   115     0     111  position
  4636     1   320    18     1   115     0      67  =
  4637     1   320    20     1   115     0     112  0
  4638     1   320    21     1   115     0     102  ;
  4639     1   321     9     1   115     0     111  limit
  4640     1   321    15     1   115     0      67  =
  4641     1   321    17     1   115     0     111  capacity
  4642     1   321    25     1   115     0     102  ;
  4643     1   322     9     1   115     0     111  mark
  4644     1   322    14     1   115     0      67  =
  4645     1   322    16     1   115     0      77  -
  4646     1   322    17     1   115     0     112  1
  4647     1   322    18     1   115     1     102  ;
  4648     1   323     9     1   115     1      19  return
  4649     1   323    16     1   115     1      44  this
  4650     1   323    20     1   115     1     102  ;
  4651     1   324     5     1   115     1      64  }
  4652     1   324     5     1   115     0     358  ENDMETHOD
  4653     1   324     5     1   116     0     359  STARTMETHOD
  4654     1   347    18     1   116     0     111  Buffer
  4655     1   347    25     1   116     0     111  flip
  4656     1   347    29     1   116     0      59  (
  4657     1   347    30     1   116     0      60  )
  4658     1   347    32     1   116     0      63  {
  4659     1   348     9     1   116     0     111  limit
  4660     1   348    15     1   116     0      67  =
  4661     1   348    17     1   116     0     111  position
  4662     1   348    25     1   116     0     102  ;
  4663     1   349     9     1   116     0     111  position
  4664     1   349    18     1   116     0      67  =
  4665     1   349    20     1   116     0     112  0
  4666     1   349    21     1   116     0     102  ;
  4667     1   350     9     1   116     0     111  mark
  4668     1   350    14     1   116     0      67  =
  4669     1   350    16     1   116     0      77  -
  4670     1   350    17     1   116     0     112  1
  4671     1   350    18     1   116     1     102  ;
  4672     1   351     9     1   116     1      19  return
  4673     1   351    16     1   116     1      44  this
  4674     1   351    20     1   116     1     102  ;
  4675     1   352     5     1   116     1      64  }
  4676     1   352     5     1   116     0     360  ENDMETHOD
  4677     1   352     5     1   117     0     361  STARTMETHOD
  4678     1   369    18     1   117     0     111  Buffer
  4679     1   369    25     1   117     0     111  rewind
  4680     1   369    31     1   117     0      59  (
  4681     1   369    32     1   117     0      60  )
  4682     1   369    34     1   117     0      63  {
  4683     1   370     9     1   117     0     111  position
  4684     1   370    18     1   117     0      67  =
  4685     1   370    20     1   117     0     112  0
  4686     1   370    21     1   117     0     102  ;
  4687     1   371     9     1   117     0     111  mark
  4688     1   371    14     1   117     0      67  =
  4689     1   371    16     1   117     0      77  -
  4690     1   371    17     1   117     0     112  1
  4691     1   371    18     1   117     0     102  ;
  4692     1   372     9     1   117     0      19  return
  4693     1   372    16     1   117     0      44  this
  4694     1   372    20     1   117     1     102  ;
  4695     1   373     5     1   117     1      64  }
  4696     1   373     5     1   117     0     362  ENDMETHOD
  4697     1   373     5     1   118     0     363  STARTMETHOD
  4698     1   381    18     1   118     0      36  int
  4699     1   381    22     1   118     0     111  remaining
  4700     1   381    31     1   118     0      59  (
  4701     1   381    32     1   118     0      60  )
  4702     1   381    34     1   118     0      63  {
  4703     1   382     9     1   118     0      19  return
  4704     1   382    16     1   118     0     111  limit
  4705     1   382    22     1   118     0      77  -
  4706     1   382    24     1   118     0     111  position
  4707     1   382    32     1   118     1     102  ;
  4708     1   383     5     1   118     1      64  }
  4709     1   383     5     1   118     0     364  ENDMETHOD
  4710     1   383     5     1   119     0     365  STARTMETHOD
  4711     1   392    18     1   119     0      39  boolean
  4712     1   392    26     1   119     0     111  hasRemaining
  4713     1   392    38     1   119     0      59  (
  4714     1   392    39     1   119     0      60  )
  4715     1   392    41     1   119     0      63  {
  4716     1   393     9     1   119     0      19  return
  4717     1   393    16     1   119     0     111  position
  4718     1   393    25     1   119     0      93  <
  4719     1   393    27     1   119     0     111  limit
  4720     1   393    32     1   119     1     102  ;
  4721     1   394     5     1   119     1      64  }
  4722     1   394     5     1   119     0     366  ENDMETHOD
  4723     1   401    21     1    -1     1      39  boolean
  4724     1   401    29     1    -1     1     111  isReadOnly
  4725     1   401    39     1    -1     1      59  (
  4726     1   401    40     1    -1     1      60  )
  4727     1   401    41     1    -1     1     102  ;
  4728     1   416    21     1    -1     1      39  boolean
  4729     1   416    29     1    -1     1     111  hasArray
  4730     1   416    37     1    -1     1      59  (
  4731     1   416    38     1    -1     1      60  )
  4732     1   416    39     1    -1     1     102  ;
  4733     1   443    21     1    -1     0     111  Object
  4734     1   443    28     1    -1     0     111  array
  4735     1   443    33     1    -1     0      59  (
  4736     1   443    34     1    -1     0      60  )
  4737     1   443    35     1    -1     0     102  ;
  4738     1   467    21     1    -1     0      36  int
  4739     1   467    25     1    -1     0     111  arrayOffset
  4740     1   467    36     1    -1     0      59  (
  4741     1   467    37     1    -1     0      60  )
  4742     1   467    38     1    -1     0     102  ;
  4743     1   477    21     1    -1     0      39  boolean
  4744     1   477    29     1    -1     0     111  isDirect
  4745     1   477    37     1    -1     0      59  (
  4746     1   477    38     1    -1     0      60  )
  4747     1   477    39     1    -1     0     102  ;
  4748     1   477    39     1   120     0     367  STARTMETHOD
  4749     1   489    11     1   120     0      36  int
  4750     1   489    15     1   120     0     111  nextGetIndex
  4751     1   489    27     1   120     0      59  (
  4752     1   489    28     1   120     0      60  )
  4753     1   489    30     1   120     0      63  {
  4754     1   490     9     1   120     0      31  if
  4755     1   490    12     1   120     0      59  (
  4756     1   490    13     1   120     0     111  position
  4757     1   490    22     1   120     0      88  >=
  4758     1   490    25     1   120     0     111  limit
  4759     1   490    30     1   120     0      60  )
  4760     1   491    13     1   120     0      20  throw
  4761     1   491    23     1   120     0     111  BufferUnderflowException
  4762     1   491    47     1   120     0      59  (
  4763     1   491    48     1   120     0      60  )
  4764     1   491    49     1   120     0     102  ;
  4765     1   492     9     1   120     0      19  return
  4766     1   492    16     1   120     0     111  position
  4767     1   492    24     1   120     0      76  ++
  4768     1   492    26     1   120     0     102  ;
  4769     1   493     5     1   120     0      64  }
  4770     1   493     5     1   120     0     368  ENDMETHOD
  4771     1   493     5     1   121     0     369  STARTMETHOD
  4772     1   495    11     1   121     0      36  int
  4773     1   495    15     1   121     0     111  nextGetIndex
  4774     1   495    27     1   121     0      59  (
  4775     1   495    28     1   121     0      36  int
  4776     1   495    32     1   121     0     111  nb
  4777     1   495    34     1   121     0      60  )
  4778     1   495    36     1   121     0      63  {
  4779     1   496     9     1   121     0      31  if
  4780     1   496    12     1   121     0      59  (
  4781     1   496    13     1   121     0     111  limit
  4782     1   496    19     1   121     0      77  -
  4783     1   496    21     1   121     0     111  position
  4784     1   496    30     1   121     0      93  <
  4785     1   496    32     1   121     0     111  nb
  4786     1   496    34     1   121     0      60  )
  4787     1   497    13     1   121     0      20  throw
  4788     1   497    23     1   121     0     111  BufferUnderflowException
  4789     1   497    47     1   121     0      59  (
  4790     1   497    48     1   121     0      60  )
  4791     1   497    49     1   121     0     102  ;
  4792     1   498     9     1   121     0      36  int
  4793     1   498    13     1   121     0     111  p
  4794     1   498    15     1   121     0      67  =
  4795     1   498    17     1   121     0     111  position
  4796     1   498    25     1   121     0     102  ;
  4797     1   499     9     1   121     0     111  position
  4798     1   499    18     1   121     0      75  +=
  4799     1   499    21     1   121     0     111  nb
  4800     1   499    23     1   121     0     102  ;
  4801     1   500     9     1   121     0      19  return
  4802     1   500    16     1   121     0     111  p
  4803     1   500    17     1   121     0     102  ;
  4804     1   501     5     1   121     0      64  }
  4805     1   501     5     1   121     0     370  ENDMETHOD
  4806     1   501     5     1   122     0     371  STARTMETHOD
  4807     1   510    11     1   122     0      36  int
  4808     1   510    15     1   122     0     111  nextPutIndex
  4809     1   510    27     1   122     0      59  (
  4810     1   510    28     1   122     0      60  )
  4811     1   510    30     1   122     0      63  {
  4812     1   511     9     1   122     0      31  if
  4813     1   511    12     1   122     0      59  (
  4814     1   511    13     1   122     0     111  position
  4815     1   511    22     1   122     0      88  >=
  4816     1   511    25     1   122     0     111  limit
  4817     1   511    30     1   122     0      60  )
  4818     1   512    13     1   122     0      20  throw
  4819     1   512    23     1   122     0     111  BufferOverflowException
  4820     1   512    46     1   122     0      59  (
  4821     1   512    47     1   122     0      60  )
  4822     1   512    48     1   122     0     102  ;
  4823     1   513     9     1   122     0      19  return
  4824     1   513    16     1   122     0     111  position
  4825     1   513    24     1   122     0      76  ++
  4826     1   513    26     1   122     0     102  ;
  4827     1   514     5     1   122     0      64  }
  4828     1   514     5     1   122     0     372  ENDMETHOD
  4829     1   514     5     1   123     0     373  STARTMETHOD
  4830     1   516    11     1   123     0      36  int
  4831     1   516    15     1   123     0     111  nextPutIndex
  4832     1   516    27     1   123     0      59  (
  4833     1   516    28     1   123     0      36  int
  4834     1   516    32     1   123     0     111  nb
  4835     1   516    34     1   123     0      60  )
  4836     1   516    36     1   123     0      63  {
  4837     1   517     9     1   123     0      31  if
  4838     1   517    12     1   123     0      59  (
  4839     1   517    13     1   123     0     111  limit
  4840     1   517    19     1   123     0      77  -
  4841     1   517    21     1   123     0     111  position
  4842     1   517    30     1   123     0      93  <
  4843     1   517    32     1   123     0     111  nb
  4844     1   517    34     1   123     0      60  )
  4845     1   518    13     1   123     0      20  throw
  4846     1   518    23     1   123     0     111  BufferOverflowException
  4847     1   518    46     1   123     0      59  (
  4848     1   518    47     1   123     0      60  )
  4849     1   518    48     1   123     0     102  ;
  4850     1   519     9     1   123     0      36  int
  4851     1   519    13     1   123     0     111  p
  4852     1   519    15     1   123     0      67  =
  4853     1   519    17     1   123     0     111  position
  4854     1   519    25     1   123     0     102  ;
  4855     1   520     9     1   123     0     111  position
  4856     1   520    18     1   123     0      75  +=
  4857     1   520    21     1   123     0     111  nb
  4858     1   520    23     1   123     0     102  ;
  4859     1   521     9     1   123     0      19  return
  4860     1   521    16     1   123     0     111  p
  4861     1   521    17     1   123     0     102  ;
  4862     1   522     5     1   123     0      64  }
  4863     1   522     5     1   123     0     374  ENDMETHOD
  4864     1   522     5     1   124     0     375  STARTMETHOD
  4865     1   529    11     1   124     0      36  int
  4866     1   529    15     1   124     0     111  checkIndex
  4867     1   529    25     1   124     0      59  (
  4868     1   529    26     1   124     0      36  int
  4869     1   529    30     1   124     0     111  i
  4870     1   529    31     1   124     0      60  )
  4871     1   529    33     1   124     0      63  {
  4872     1   530     9     1   124     0      31  if
  4873     1   530    12     1   124     0      59  (
  4874     1   530    13     1   124     0      59  (
  4875     1   530    14     1   124     0     111  i
  4876     1   530    16     1   124     0      93  <
  4877     1   530    18     1   124     0     112  0
  4878     1   530    19     1   124     0      60  )
  4879     1   530    21     1   124     0      98  ||
  4880     1   530    24     1   124     0      59  (
  4881     1   530    25     1   124     0     111  i
  4882     1   530    27     1   124     0      88  >=
  4883     1   530    30     1   124     0     111  limit
  4884     1   530    35     1   124     0      60  )
  4885     1   530    36     1   124     0      60  )
  4886     1   531    13     1   124     0      20  throw
  4887     1   531    23     1   124     0     111  IndexOutOfBoundsException
  4888     1   531    48     1   124     0      59  (
  4889     1   531    49     1   124     0      60  )
  4890     1   531    50     1   124     0     102  ;
  4891     1   532     9     1   124     0      19  return
  4892     1   532    16     1   124     0     111  i
  4893     1   532    17     1   124     0     102  ;
  4894     1   533     5     1   124     0      64  }
  4895     1   533     5     1   124     0     376  ENDMETHOD
  4896     1   533     5     1   125     0     377  STARTMETHOD
  4897     1   535    11     1   125     0      36  int
  4898     1   535    15     1   125     0     111  checkIndex
  4899     1   535    25     1   125     0      59  (
  4900     1   535    26     1   125     0      36  int
  4901     1   535    30     1   125     0     111  i
  4902     1   535    31     1   125     0      66  ,
  4903     1   535    33     1   125     0      36  int
  4904     1   535    37     1   125     0     111  nb
  4905     1   535    39     1   125     0      60  )
  4906     1   535    41     1   125     0      63  {
  4907     1   536     9     1   125     0      31  if
  4908     1   536    12     1   125     0      59  (
  4909     1   536    13     1   125     0      59  (
  4910     1   536    14     1   125     0     111  i
  4911     1   536    16     1   125     0      93  <
  4912     1   536    18     1   125     0     112  0
  4913     1   536    19     1   125     0      60  )
  4914     1   536    21     1   125     0      98  ||
  4915     1   536    24     1   125     0      59  (
  4916     1   536    25     1   125     0     111  nb
  4917     1   536    28     1   125     0      89  >
  4918     1   536    30     1   125     0     111  limit
  4919     1   536    36     1   125     0      77  -
  4920     1   536    38     1   125     0     111  i
  4921     1   536    39     1   125     0      60  )
  4922     1   536    40     1   125     0      60  )
  4923     1   537    13     1   125     0      20  throw
  4924     1   537    23     1   125     0     111  IndexOutOfBoundsException
  4925     1   537    48     1   125     0      59  (
  4926     1   537    49     1   125     0      60  )
  4927     1   537    50     1   125     0     102  ;
  4928     1   538     9     1   125     0      19  return
  4929     1   538    16     1   125     0     111  i
  4930     1   538    17     1   125     0     102  ;
  4931     1   539     5     1   125     0      64  }
  4932     1   539     5     1   125     0     378  ENDMETHOD
  4933     1   539     5     1   126     0     379  STARTMETHOD
  4934     1   541    11     1   126     0      36  int
  4935     1   541    15     1   126     0     111  markValue
  4936     1   541    24     1   126     0      59  (
  4937     1   541    25     1   126     0      60  )
  4938     1   541    27     1   126     0      63  {
  4939     1   542     9     1   126     0      19  return
  4940     1   542    16     1   126     0     111  mark
  4941     1   542    20     1   126     0     102  ;
  4942     1   543     5     1   126     0      64  }
  4943     1   543     5     1   126     0     380  ENDMETHOD
  4944     1   543     5     1   127     0     381  STARTMETHOD
  4945     1   545     5     1   127     0      45  static
  4946     1   545    12     1   127     0      50  void
  4947     1   545    17     1   127     0     111  checkBounds
  4948     1   545    28     1   127     0      59  (
  4949     1   545    29     1   127     0      36  int
  4950     1   545    33     1   127     0     111  off
  4951     1   545    36     1   127     0      66  ,
  4952     1   545    38     1   127     0      36  int
  4953     1   545    42     1   127     0     111  len
  4954     1   545    45     1   127     0      66  ,
  4955     1   545    47     1   127     0      36  int
  4956     1   545    51     1   127     0     111  size
  4957     1   545    55     1   127     0      60  )
  4958     1   545    57     1   127     0      63  {
  4959     1   546     9     1   127     0      31  if
  4960     1   546    12     1   127     0      59  (
  4961     1   546    13     1   127     0      59  (
  4962     1   546    14     1   127     0     111  off
  4963     1   546    18     1   127     0      96  |
  4964     1   546    20     1   127     0     111  len
  4965     1   546    24     1   127     0      96  |
  4966     1   546    26     1   127     0      59  (
  4967     1   546    27     1   127     0     111  off
  4968     1   546    31     1   127     0      74  +
  4969     1   546    33     1   127     0     111  len
  4970     1   546    36     1   127     0      60  )
  4971     1   546    38     1   127     0      96  |
  4972     1   546    40     1   127     0      59  (
  4973     1   546    41     1   127     0     111  size
  4974     1   546    46     1   127     0      77  -
  4975     1   546    48     1   127     0      59  (
  4976     1   546    49     1   127     0     111  off
  4977     1   546    53     1   127     0      74  +
  4978     1   546    55     1   127     0     111  len
  4979     1   546    58     1   127     0      60  )
  4980     1   546    59     1   127     0      60  )
  4981     1   546    60     1   127     0      60  )
  4982     1   546    62     1   127     0      93  <
  4983     1   546    64     1   127     0     112  0
  4984     1   546    65     1   127     0      60  )
  4985     1   547    13     1   127     0      20  throw
  4986     1   547    23     1   127     0     111  IndexOutOfBoundsException
  4987     1   547    48     1   127     0      59  (
  4988     1   547    49     1   127     0      60  )
  4989     1   547    50     1   127     0     102  ;
  4990     1   548     5     1   127     0      64  }
  4991     1   548     5     1   127     0     382  ENDMETHOD
  4992     1   550     1     1    -1     0      64  }
  4993     1   550     1     1    -1     1     383  ENDCLASS
  4994     1   550     1    -1    -1     1     384  ENDFILE C:\Users\RA\javasrc\java\nio\Buffer.java
  4995     2     1     1    -1    -1     1     385  STARTFILE C:\Users\RA\javasrc\java\nio\BufferOverflowException.java
  4996     2    30     9    -1    -1     1     111  java.nio
  4997     2    30    17    -1    -1     0     102  ;
  4998     2    40     8     2    -1     0     386  STARTCLASS
  4999     2    40     8     2    -1     0      24  class
  5000     2    40    14     2    -1     0     111  BufferOverflowException
  5001     2    41     5     2    -1     0      38  extends
  5002     2    41    13     2    -1     0     111  RuntimeException
  5003     2    42     1     2    -1     0      63  {
  5004     2    44     5     2    -1     0      41  private
  5005     2    44    13     2    -1     0      45  static
  5006     2    44    26     2    -1     0      53  long
  5007     2    44    31     2    -1     0     111  serialVersionUID
  5008     2    44    48     2    -1     0      67  =
  5009     2    44    50     2    -1     0      77  -
  5010     2    44    51     2    -1     0      55  5484897634319144535L
  5011     2    44    71     2    -1     0     102  ;
  5012     2    44    71     2   128     0     387  STARTMETHOD
  5013     2    49    12     2   128     0     111  BufferOverflowException
  5014     2    49    35     2   128     0      59  (
  5015     2    49    36     2   128     0      60  )
  5016     2    49    38     2   128     0      63  {
  5017     2    49    40     2   128     0      64  }
  5018     2    49    40     2   128     0     388  ENDMETHOD
  5019     2    51     1     2    -1     0      64  }
  5020     2    51     1     2    -1     1     389  ENDCLASS
  5021     2    51     1    -1    -1     1     390  ENDFILE C:\Users\RA\javasrc\java\nio\BufferOverflowException.java
  5022     3     1     1    -1    -1     1     391  STARTFILE C:\Users\RA\javasrc\java\nio\BufferUnderflowException.java
  5023     3    30     9    -1    -1     1     111  java.nio
  5024     3    30    17    -1    -1     0     102  ;
  5025     3    40     8     3    -1     0     392  STARTCLASS
  5026     3    40     8     3    -1     0      24  class
  5027     3    40    14     3    -1     0     111  BufferUnderflowException
  5028     3    41     5     3    -1     0      38  extends
  5029     3    41    13     3    -1     0     111  RuntimeException
  5030     3    42     1     3    -1     0      63  {
  5031     3    44     5     3    -1     0      41  private
  5032     3    44    13     3    -1     0      45  static
  5033     3    44    26     3    -1     0      53  long
  5034     3    44    31     3    -1     0     111  serialVersionUID
  5035     3    44    48     3    -1     0      67  =
  5036     3    44    50     3    -1     0      77  -
  5037     3    44    51     3    -1     0      55  1713313658691622206L
  5038     3    44    71     3    -1     0     102  ;
  5039     3    44    71     3   129     0     393  STARTMETHOD
  5040     3    49    12     3   129     0     111  BufferUnderflowException
  5041     3    49    36     3   129     0      59  (
  5042     3    49    37     3   129     0      60  )
  5043     3    49    39     3   129     0      63  {
  5044     3    49    41     3   129     0      64  }
  5045     3    49    41     3   129     0     394  ENDMETHOD
  5046     3    51     1     3    -1     0      64  }
  5047     3    51     1     3    -1     1     395  ENDCLASS
  5048     3    51     1    -1    -1     1     396  ENDFILE C:\Users\RA\javasrc\java\nio\BufferUnderflowException.java
  5049     4     1     1    -1    -1     1     397  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBuffer.java
  5050     4     1     9    -1    -1     1     111  java.nio
  5051     4     1    17    -1    -1     0     102  ;
  5052     4   230    17     4    -1     0     398  STARTCLASS
  5053     4   230    17     4    -1     0      24  class
  5054     4   230    23     4    -1     0     111  ByteBuffer
  5055     4   231     5     4    -1     0      38  extends
  5056     4   231    13     4    -1     0     111  Buffer
  5057     4   232     5     4    -1     0      17  implements
  5058     4   232    16     4    -1     0     111  Comparable
  5059     4   232    26     4    -1     0      93  <
  5060     4   232    27     4    -1     0     111  ByteBuffer
  5061     4   232    37     4    -1     0      89  >
  5062     4   233     1     4    -1     0      63  {
  5063     4   239    15     4    -1     0      61  [
  5064     4   239    16     4    -1     0      62  ]
  5065     4   239    18     4    -1     0     111  hb
  5066     4   239    20     4    -1     0     102  ;
  5067     4   240    11     4    -1     0      36  int
  5068     4   240    15     4    -1     0     111  offset
  5069     4   240    21     4    -1     0     102  ;
  5070     4   241     5     4    -1     0      39  boolean
  5071     4   241    13     4    -1     0     111  isReadOnly
  5072     4   241    23     4    -1     0     102  ;
  5073     4   241    23     4   130     0     399  STARTMETHOD
  5074     4   246     5     4   130     0     111  ByteBuffer
  5075     4   246    15     4   130     0      59  (
  5076     4   246    16     4   130     0      36  int
  5077     4   246    20     4   130     0     111  mark
  5078     4   246    24     4   130     0      66  ,
  5079     4   246    26     4   130     0      36  int
  5080     4   246    30     4   130     0     111  pos
  5081     4   246    33     4   130     0      66  ,
  5082     4   246    35     4   130     0      36  int
  5083     4   246    39     4   130     0     111  lim
  5084     4   246    42     4   130     0      66  ,
  5085     4   246    44     4   130     0      36  int
  5086     4   246    48     4   130     0     111  cap
  5087     4   246    51     4   130     0      66  ,
  5088     4   247    22     4   130     0      61  [
  5089     4   247    23     4   130     0      62  ]
  5090     4   247    25     4   130     0     111  hb
  5091     4   247    27     4   130     0      66  ,
  5092     4   247    29     4   130     0      36  int
  5093     4   247    33     4   130     0     111  offset
  5094     4   247    39     4   130     0      60  )
  5095     4   248     5     4   130     0      63  {
  5096     4   249     9     4   130     0      27  super
  5097     4   249    14     4   130     0      59  (
  5098     4   249    15     4   130     0     111  mark
  5099     4   249    19     4   130     0      66  ,
  5100     4   249    21     4   130     0     111  pos
  5101     4   249    24     4   130     0      66  ,
  5102     4   249    26     4   130     0     111  lim
  5103     4   249    29     4   130     0      66  ,
  5104     4   249    31     4   130     0     111  cap
  5105     4   249    34     4   130     0      60  )
  5106     4   249    35     4   130     0     102  ;
  5107     4   250     9     4   130     1     111  this.hb
  5108     4   250    17     4   130     1      67  =
  5109     4   250    19     4   130     1     111  hb
  5110     4   250    21     4   130     1     102  ;
  5111     4   251     9     4   130     1     111  this.offset
  5112     4   251    21     4   130     1      67  =
  5113     4   251    23     4   130     1     111  offset
  5114     4   251    29     4   130     1     102  ;
  5115     4   252     5     4   130     0      64  }
  5116     4   252     5     4   130     0     400  ENDMETHOD
  5117     4   252     5     4   131     0     401  STARTMETHOD
  5118     4   256     5     4   131     0     111  ByteBuffer
  5119     4   256    15     4   131     0      59  (
  5120     4   256    16     4   131     0      36  int
  5121     4   256    20     4   131     0     111  mark
  5122     4   256    24     4   131     0      66  ,
  5123     4   256    26     4   131     0      36  int
  5124     4   256    30     4   131     0     111  pos
  5125     4   256    33     4   131     0      66  ,
  5126     4   256    35     4   131     0      36  int
  5127     4   256    39     4   131     0     111  lim
  5128     4   256    42     4   131     0      66  ,
  5129     4   256    44     4   131     0      36  int
  5130     4   256    48     4   131     0     111  cap
  5131     4   256    51     4   131     0      60  )
  5132     4   256    53     4   131     0      63  {
  5133     4   257     9     4   131     0      44  this
  5134     4   257    13     4   131     0      59  (
  5135     4   257    14     4   131     0     111  mark
  5136     4   257    18     4   131     0      66  ,
  5137     4   257    20     4   131     0     111  pos
  5138     4   257    23     4   131     0      66  ,
  5139     4   257    25     4   131     0     111  lim
  5140     4   257    28     4   131     0      66  ,
  5141     4   257    30     4   131     0     111  cap
  5142     4   257    33     4   131     0      66  ,
  5143     4   257    35     4   131     0      21  null
  5144     4   257    39     4   131     0      66  ,
  5145     4   257    41     4   131     0     112  0
  5146     4   257    42     4   131     0      60  )
  5147     4   257    43     4   131     0     102  ;
  5148     4   258     5     4   131     0      64  }
  5149     4   258     5     4   131     0     402  ENDMETHOD
  5150     4   258     5     4   132     0     403  STARTMETHOD
  5151     4   277    12     4   132     0      45  static
  5152     4   277    19     4   132     0     111  ByteBuffer
  5153     4   277    30     4   132     0     111  allocateDirect
  5154     4   277    44     4   132     0      59  (
  5155     4   277    45     4   132     0      36  int
  5156     4   277    49     4   132     0     111  capacity
  5157     4   277    57     4   132     0      60  )
  5158     4   277    59     4   132     0      63  {
  5159     4   278     9     4   132     0      19  return
  5160     4   278    20     4   132     0     111  DirectByteBuffer
  5161     4   278    36     4   132     0      59  (
  5162     4   278    37     4   132     0     111  capacity
  5163     4   278    45     4   132     0      60  )
  5164     4   278    46     4   132     0     102  ;
  5165     4   279     5     4   132     0      64  }
  5166     4   279     5     4   132     0     404  ENDMETHOD
  5167     4   279     5     4   133     0     405  STARTMETHOD
  5168     4   299    12     4   133     0      45  static
  5169     4   299    19     4   133     0     111  ByteBuffer
  5170     4   299    30     4   133     0     111  allocate
  5171     4   299    38     4   133     0      59  (
  5172     4   299    39     4   133     0      36  int
  5173     4   299    43     4   133     0     111  capacity
  5174     4   299    51     4   133     0      60  )
  5175     4   299    53     4   133     0      63  {
  5176     4   300     9     4   133     0      31  if
  5177     4   300    12     4   133     0      59  (
  5178     4   300    13     4   133     0     111  capacity
  5179     4   300    22     4   133     0      93  <
  5180     4   300    24     4   133     0     112  0
  5181     4   300    25     4   133     0      60  )
  5182     4   301    13     4   133     0      20  throw
  5183     4   301    23     4   133     0     111  IllegalArgumentException
  5184     4   301    47     4   133     0      59  (
  5185     4   301    48     4   133     0      60  )
  5186     4   301    49     4   133     0     102  ;
  5187     4   302     9     4   133     0      19  return
  5188     4   302    20     4   133     0     111  HeapByteBuffer
  5189     4   302    34     4   133     0      59  (
  5190     4   302    35     4   133     0     111  capacity
  5191     4   302    43     4   133     0      66  ,
  5192     4   302    45     4   133     0     111  capacity
  5193     4   302    53     4   133     0      60  )
  5194     4   302    54     4   133     0     102  ;
  5195     4   303     5     4   133     0      64  }
  5196     4   303     5     4   133     0     406  ENDMETHOD
  5197     4   303     5     4   134     0     407  STARTMETHOD
  5198     4   336    12     4   134     0      45  static
  5199     4   336    19     4   134     0     111  ByteBuffer
  5200     4   336    30     4   134     0     111  wrap
  5201     4   336    34     4   134     0      59  (
  5202     4   336    39     4   134     0      61  [
  5203     4   336    40     4   134     0      62  ]
  5204     4   336    42     4   134     0     111  array
  5205     4   336    47     4   134     0      66  ,
  5206     4   337    37     4   134     0      36  int
  5207     4   337    41     4   134     0     111  offset
  5208     4   337    47     4   134     0      66  ,
  5209     4   337    49     4   134     0      36  int
  5210     4   337    53     4   134     0     111  length
  5211     4   337    59     4   134     0      60  )
  5212     4   338     5     4   134     0      63  {
  5213     4   339     9     4   134     0      35  try
  5214     4   339    13     4   134     0      63  {
  5215     4   340    13     4   134     0      19  return
  5216     4   340    24     4   134     0     111  HeapByteBuffer
  5217     4   340    38     4   134     0      59  (
  5218     4   340    39     4   134     0     111  array
  5219     4   340    44     4   134     0      66  ,
  5220     4   340    46     4   134     0     111  offset
  5221     4   340    52     4   134     0      66  ,
  5222     4   340    54     4   134     0     111  length
  5223     4   340    60     4   134     0      60  )
  5224     4   340    61     4   134     0     102  ;
  5225     4   341     9     4   134     0      64  }
  5226     4   341    11     4   134     0      34  catch
  5227     4   341    17     4   134     0      59  (
  5228     4   341    18     4   134     0     111  IllegalArgumentException
  5229     4   341    43     4   134     0     111  x
  5230     4   341    44     4   134     0      60  )
  5231     4   341    46     4   134     0      63  {
  5232     4   342    13     4   134     0      20  throw
  5233     4   342    23     4   134     0     111  IndexOutOfBoundsException
  5234     4   342    48     4   134     0      59  (
  5235     4   342    49     4   134     0      60  )
  5236     4   342    50     4   134     0     102  ;
  5237     4   343     9     4   134     0      64  }
  5238     4   344     5     4   134     0      64  }
  5239     4   344     5     4   134     0     408  ENDMETHOD
  5240     4   344     5     4   135     0     409  STARTMETHOD
  5241     4   362    12     4   135     0      45  static
  5242     4   362    19     4   135     0     111  ByteBuffer
  5243     4   362    30     4   135     0     111  wrap
  5244     4   362    34     4   135     0      59  (
  5245     4   362    39     4   135     0      61  [
  5246     4   362    40     4   135     0      62  ]
  5247     4   362    42     4   135     0     111  array
  5248     4   362    47     4   135     0      60  )
  5249     4   362    49     4   135     0      63  {
  5250     4   363     9     4   135     0      19  return
  5251     4   363    16     4   135     0     111  wrap
  5252     4   363    20     4   135     0      59  (
  5253     4   363    21     4   135     0     111  array
  5254     4   363    26     4   135     0      66  ,
  5255     4   363    28     4   135     0     112  0
  5256     4   363    29     4   135     0      66  ,
  5257     4   363    31     4   135     0     111  array.length
  5258     4   363    43     4   135     0      60  )
  5259     4   363    44     4   135     0     102  ;
  5260     4   364     5     4   135     0      64  }
  5261     4   364     5     4   135     0     410  ENDMETHOD
  5262     4   476    21     4    -1     1     111  ByteBuffer
  5263     4   476    32     4    -1     1     111  slice
  5264     4   476    37     4    -1     1      59  (
  5265     4   476    38     4    -1     1      60  )
  5266     4   476    39     4    -1     1     102  ;
  5267     4   493    21     4    -1     1     111  ByteBuffer
  5268     4   493    32     4    -1     1     111  duplicate
  5269     4   493    41     4    -1     1      59  (
  5270     4   493    42     4    -1     1      60  )
  5271     4   493    43     4    -1     1     102  ;
  5272     4   513    21     4    -1     1     111  ByteBuffer
  5273     4   513    32     4    -1     1     111  asReadOnlyBuffer
  5274     4   513    48     4    -1     1      59  (
  5275     4   513    49     4    -1     1      60  )
  5276     4   513    50     4    -1     1     102  ;
  5277     4   527    26     4    -1     0     111  get
  5278     4   527    29     4    -1     0      59  (
  5279     4   527    30     4    -1     0      60  )
  5280     4   527    31     4    -1     0     102  ;
  5281     4   546    21     4    -1     0     111  ByteBuffer
  5282     4   546    32     4    -1     0     111  put
  5283     4   546    35     4    -1     0      59  (
  5284     4   546    41     4    -1     0     111  b
  5285     4   546    42     4    -1     0      60  )
  5286     4   546    43     4    -1     0     102  ;
  5287     4   561    26     4    -1     0     111  get
  5288     4   561    29     4    -1     0      59  (
  5289     4   561    30     4    -1     0      36  int
  5290     4   561    34     4    -1     0     111  index
  5291     4   561    39     4    -1     0      60  )
  5292     4   561    40     4    -1     0     102  ;
  5293     4   584    21     4    -1     0     111  ByteBuffer
  5294     4   584    32     4    -1     0     111  put
  5295     4   584    35     4    -1     0      59  (
  5296     4   584    36     4    -1     0      36  int
  5297     4   584    40     4    -1     0     111  index
  5298     4   584    45     4    -1     0      66  ,
  5299     4   584    52     4    -1     0     111  b
  5300     4   584    53     4    -1     0      60  )
  5301     4   584    54     4    -1     0     102  ;
  5302     4   584    54     4   136     0     411  STARTMETHOD
  5303     4   638    12     4   136     0     111  ByteBuffer
  5304     4   638    23     4   136     0     111  get
  5305     4   638    26     4   136     0      59  (
  5306     4   638    31     4   136     0      61  [
  5307     4   638    32     4   136     0      62  ]
  5308     4   638    34     4   136     0     111  dst
  5309     4   638    37     4   136     0      66  ,
  5310     4   638    39     4   136     0      36  int
  5311     4   638    43     4   136     0     111  offset
  5312     4   638    49     4   136     0      66  ,
  5313     4   638    51     4   136     0      36  int
  5314     4   638    55     4   136     0     111  length
  5315     4   638    61     4   136     0      60  )
  5316     4   638    63     4   136     0      63  {
  5317     4   639     9     4   136     0     111  checkBounds
  5318     4   639    20     4   136     0      59  (
  5319     4   639    21     4   136     0     111  offset
  5320     4   639    27     4   136     0      66  ,
  5321     4   639    29     4   136     0     111  length
  5322     4   639    35     4   136     0      66  ,
  5323     4   639    37     4   136     0     111  dst.length
  5324     4   639    47     4   136     0      60  )
  5325     4   639    48     4   136     0     102  ;
  5326     4   640     9     4   136     0      31  if
  5327     4   640    12     4   136     0      59  (
  5328     4   640    13     4   136     0     111  length
  5329     4   640    20     4   136     0      89  >
  5330     4   640    22     4   136     0     111  remaining
  5331     4   640    31     4   136     0      59  (
  5332     4   640    32     4   136     0      60  )
  5333     4   640    33     4   136     0      60  )
  5334     4   641    13     4   136     0      20  throw
  5335     4   641    23     4   136     0     111  BufferUnderflowException
  5336     4   641    47     4   136     0      59  (
  5337     4   641    48     4   136     0      60  )
  5338     4   641    49     4   136     0     102  ;
  5339     4   642     9     4   136     0      36  int
  5340     4   642    13     4   136     0     111  end
  5341     4   642    17     4   136     0      67  =
  5342     4   642    19     4   136     0     111  offset
  5343     4   642    26     4   136     0      74  +
  5344     4   642    28     4   136     0     111  length
  5345     4   642    34     4   136     0     102  ;
  5346     4   643     9     4   136     0      37  for
  5347     4   643    13     4   136     0      59  (
  5348     4   643    14     4   136     0      36  int
  5349     4   643    18     4   136     0     111  i
  5350     4   643    20     4   136     0      67  =
  5351     4   643    22     4   136     0     111  offset
  5352     4   643    28     4   136     0     102  ;
  5353     4   643    30     4   136     0     111  i
  5354     4   643    32     4   136     0      93  <
  5355     4   643    34     4   136     0     111  end
  5356     4   643    37     4   136     0     102  ;
  5357     4   643    39     4   136     0     111  i
  5358     4   643    40     4   136     0      76  ++
  5359     4   643    42     4   136     0      60  )
  5360     4   644    13     4   136     0     111  dst
  5361     4   644    16     4   136     0      61  [
  5362     4   644    17     4   136     0     111  i
  5363     4   644    18     4   136     0      62  ]
  5364     4   644    20     4   136     0      67  =
  5365     4   644    22     4   136     0     111  get
  5366     4   644    25     4   136     0      59  (
  5367     4   644    26     4   136     0      60  )
  5368     4   644    27     4   136     0     102  ;
  5369     4   645     9     4   136     0      19  return
  5370     4   645    16     4   136     0      44  this
  5371     4   645    20     4   136     0     102  ;
  5372     4   646     5     4   136     0      64  }
  5373     4   646     5     4   136     0     412  ENDMETHOD
  5374     4   646     5     4   137     0     413  STARTMETHOD
  5375     4   664    12     4   137     0     111  ByteBuffer
  5376     4   664    23     4   137     0     111  get
  5377     4   664    26     4   137     0      59  (
  5378     4   664    31     4   137     0      61  [
  5379     4   664    32     4   137     0      62  ]
  5380     4   664    34     4   137     0     111  dst
  5381     4   664    37     4   137     0      60  )
  5382     4   664    39     4   137     0      63  {
  5383     4   665     9     4   137     0      19  return
  5384     4   665    16     4   137     0     111  get
  5385     4   665    19     4   137     0      59  (
  5386     4   665    20     4   137     0     111  dst
  5387     4   665    23     4   137     0      66  ,
  5388     4   665    25     4   137     0     112  0
  5389     4   665    26     4   137     0      66  ,
  5390     4   665    28     4   137     0     111  dst.length
  5391     4   665    38     4   137     0      60  )
  5392     4   665    39     4   137     0     102  ;
  5393     4   666     5     4   137     0      64  }
  5394     4   666     5     4   137     0     414  ENDMETHOD
  5395     4   666     5     4   138     0     415  STARTMETHOD
  5396     4   712    12     4   138     0     111  ByteBuffer
  5397     4   712    23     4   138     0     111  put
  5398     4   712    26     4   138     0      59  (
  5399     4   712    27     4   138     0     111  ByteBuffer
  5400     4   712    38     4   138     0     111  src
  5401     4   712    41     4   138     0      60  )
  5402     4   712    43     4   138     0      63  {
  5403     4   713     9     4   138     0      31  if
  5404     4   713    12     4   138     0      59  (
  5405     4   713    13     4   138     0     111  src
  5406     4   713    17     4   138     0      68  ==
  5407     4   713    20     4   138     0      44  this
  5408     4   713    24     4   138     0      60  )
  5409     4   714    13     4   138     0      20  throw
  5410     4   714    23     4   138     0     111  IllegalArgumentException
  5411     4   714    47     4   138     0      59  (
  5412     4   714    48     4   138     0      60  )
  5413     4   714    49     4   138     0     102  ;
  5414     4   715     9     4   138     0      36  int
  5415     4   715    13     4   138     0     111  n
  5416     4   715    15     4   138     0      67  =
  5417     4   715    17     4   138     0     111  src.remaining
  5418     4   715    30     4   138     0      59  (
  5419     4   715    31     4   138     0      60  )
  5420     4   715    32     4   138     0     102  ;
  5421     4   716     9     4   138     0      31  if
  5422     4   716    12     4   138     0      59  (
  5423     4   716    13     4   138     0     111  n
  5424     4   716    15     4   138     0      89  >
  5425     4   716    17     4   138     0     111  remaining
  5426     4   716    26     4   138     0      59  (
  5427     4   716    27     4   138     0      60  )
  5428     4   716    28     4   138     0      60  )
  5429     4   717    13     4   138     0      20  throw
  5430     4   717    23     4   138     0     111  BufferOverflowException
  5431     4   717    46     4   138     0      59  (
  5432     4   717    47     4   138     0      60  )
  5433     4   717    48     4   138     0     102  ;
  5434     4   718     9     4   138     0      37  for
  5435     4   718    13     4   138     0      59  (
  5436     4   718    14     4   138     0      36  int
  5437     4   718    18     4   138     0     111  i
  5438     4   718    20     4   138     0      67  =
  5439     4   718    22     4   138     0     112  0
  5440     4   718    23     4   138     0     102  ;
  5441     4   718    25     4   138     0     111  i
  5442     4   718    27     4   138     0      93  <
  5443     4   718    29     4   138     0     111  n
  5444     4   718    30     4   138     0     102  ;
  5445     4   718    32     4   138     0     111  i
  5446     4   718    33     4   138     0      76  ++
  5447     4   718    35     4   138     0      60  )
  5448     4   719    13     4   138     0     111  put
  5449     4   719    16     4   138     0      59  (
  5450     4   719    17     4   138     0     111  src.get
  5451     4   719    24     4   138     0      59  (
  5452     4   719    25     4   138     0      60  )
  5453     4   719    26     4   138     0      60  )
  5454     4   719    27     4   138     0     102  ;
  5455     4   720     9     4   138     0      19  return
  5456     4   720    16     4   138     0      44  this
  5457     4   720    20     4   138     0     102  ;
  5458     4   721     5     4   138     0      64  }
  5459     4   721     5     4   138     0     416  ENDMETHOD
  5460     4   721     5     4   139     0     417  STARTMETHOD
  5461     4   773    12     4   139     0     111  ByteBuffer
  5462     4   773    23     4   139     0     111  put
  5463     4   773    26     4   139     0      59  (
  5464     4   773    31     4   139     0      61  [
  5465     4   773    32     4   139     0      62  ]
  5466     4   773    34     4   139     0     111  src
  5467     4   773    37     4   139     0      66  ,
  5468     4   773    39     4   139     0      36  int
  5469     4   773    43     4   139     0     111  offset
  5470     4   773    49     4   139     0      66  ,
  5471     4   773    51     4   139     0      36  int
  5472     4   773    55     4   139     0     111  length
  5473     4   773    61     4   139     0      60  )
  5474     4   773    63     4   139     0      63  {
  5475     4   774     9     4   139     0     111  checkBounds
  5476     4   774    20     4   139     0      59  (
  5477     4   774    21     4   139     0     111  offset
  5478     4   774    27     4   139     0      66  ,
  5479     4   774    29     4   139     0     111  length
  5480     4   774    35     4   139     0      66  ,
  5481     4   774    37     4   139     0     111  src.length
  5482     4   774    47     4   139     0      60  )
  5483     4   774    48     4   139     0     102  ;
  5484     4   775     9     4   139     0      31  if
  5485     4   775    12     4   139     0      59  (
  5486     4   775    13     4   139     0     111  length
  5487     4   775    20     4   139     0      89  >
  5488     4   775    22     4   139     0     111  remaining
  5489     4   775    31     4   139     0      59  (
  5490     4   775    32     4   139     0      60  )
  5491     4   775    33     4   139     0      60  )
  5492     4   776    13     4   139     0      20  throw
  5493     4   776    23     4   139     0     111  BufferOverflowException
  5494     4   776    46     4   139     0      59  (
  5495     4   776    47     4   139     0      60  )
  5496     4   776    48     4   139     0     102  ;
  5497     4   777     9     4   139     0      36  int
  5498     4   777    13     4   139     0     111  end
  5499     4   777    17     4   139     0      67  =
  5500     4   777    19     4   139     0     111  offset
  5501     4   777    26     4   139     0      74  +
  5502     4   777    28     4   139     0     111  length
  5503     4   777    34     4   139     0     102  ;
  5504     4   778     9     4   139     0      37  for
  5505     4   778    13     4   139     0      59  (
  5506     4   778    14     4   139     0      36  int
  5507     4   778    18     4   139     0     111  i
  5508     4   778    20     4   139     0      67  =
  5509     4   778    22     4   139     0     111  offset
  5510     4   778    28     4   139     0     102  ;
  5511     4   778    30     4   139     0     111  i
  5512     4   778    32     4   139     0      93  <
  5513     4   778    34     4   139     0     111  end
  5514     4   778    37     4   139     0     102  ;
  5515     4   778    39     4   139     0     111  i
  5516     4   778    40     4   139     0      76  ++
  5517     4   778    42     4   139     0      60  )
  5518     4   779    13     4   139     0     111  this.put
  5519     4   779    21     4   139     0      59  (
  5520     4   779    22     4   139     0     111  src
  5521     4   779    25     4   139     0      61  [
  5522     4   779    26     4   139     0     111  i
  5523     4   779    27     4   139     0      62  ]
  5524     4   779    28     4   139     0      60  )
  5525     4   779    29     4   139     0     102  ;
  5526     4   780     9     4   139     0      19  return
  5527     4   780    16     4   139     0      44  this
  5528     4   780    20     4   139     0     102  ;
  5529     4   781     5     4   139     0      64  }
  5530     4   781     5     4   139     0     418  ENDMETHOD
  5531     4   781     5     4   140     0     419  STARTMETHOD
  5532     4   802    18     4   140     0     111  ByteBuffer
  5533     4   802    29     4   140     0     111  put
  5534     4   802    32     4   140     0      59  (
  5535     4   802    37     4   140     0      61  [
  5536     4   802    38     4   140     0      62  ]
  5537     4   802    40     4   140     0     111  src
  5538     4   802    43     4   140     0      60  )
  5539     4   802    45     4   140     0      63  {
  5540     4   803     9     4   140     0      19  return
  5541     4   803    16     4   140     0     111  put
  5542     4   803    19     4   140     0      59  (
  5543     4   803    20     4   140     0     111  src
  5544     4   803    23     4   140     0      66  ,
  5545     4   803    25     4   140     0     112  0
  5546     4   803    26     4   140     0      66  ,
  5547     4   803    28     4   140     0     111  src.length
  5548     4   803    38     4   140     0      60  )
  5549     4   803    39     4   140     0     102  ;
  5550     4   804     5     4   140     0      64  }
  5551     4   804     5     4   140     0     420  ENDMETHOD
  5552     4   804     5     4   141     0     421  STARTMETHOD
  5553     4   905    18     4   141     0      39  boolean
  5554     4   905    26     4   141     0     111  hasArray
  5555     4   905    34     4   141     0      59  (
  5556     4   905    35     4   141     0      60  )
  5557     4   905    37     4   141     0      63  {
  5558     4   906     9     4   141     0      19  return
  5559     4   906    16     4   141     0      59  (
  5560     4   906    17     4   141     0     111  hb
  5561     4   906    20     4   141     0      71  !=
  5562     4   906    23     4   141     0      21  null
  5563     4   906    27     4   141     0      60  )
  5564     4   906    29     4   141     0     101  &&
  5565     4   906    32     4   141     0      69  !
  5566     4   906    33     4   141     0     111  isReadOnly
  5567     4   906    43     4   141     0     102  ;
  5568     4   907     5     4   141     0      64  }
  5569     4   907     5     4   141     0     422  ENDMETHOD
  5570     4   907     5     4   142     0     423  STARTMETHOD
  5571     4   928    22     4   142     0      61  [
  5572     4   928    23     4   142     0      62  ]
  5573     4   928    25     4   142     0     111  array
  5574     4   928    30     4   142     0      59  (
  5575     4   928    31     4   142     0      60  )
  5576     4   928    33     4   142     0      63  {
  5577     4   929     9     4   142     0      31  if
  5578     4   929    12     4   142     0      59  (
  5579     4   929    13     4   142     0     111  hb
  5580     4   929    16     4   142     0      68  ==
  5581     4   929    19     4   142     0      21  null
  5582     4   929    23     4   142     0      60  )
  5583     4   930    13     4   142     0      20  throw
  5584     4   930    23     4   142     0     111  UnsupportedOperationException
  5585     4   930    52     4   142     0      59  (
  5586     4   930    53     4   142     0      60  )
  5587     4   930    54     4   142     0     102  ;
  5588     4   931     9     4   142     0      31  if
  5589     4   931    12     4   142     0      59  (
  5590     4   931    13     4   142     0     111  isReadOnly
  5591     4   931    23     4   142     0      60  )
  5592     4   932    13     4   142     0      20  throw
  5593     4   932    23     4   142     0     111  ReadOnlyBufferException
  5594     4   932    46     4   142     0      59  (
  5595     4   932    47     4   142     0      60  )
  5596     4   932    48     4   142     0     102  ;
  5597     4   933     9     4   142     0      19  return
  5598     4   933    16     4   142     0     111  hb
  5599     4   933    18     4   142     0     102  ;
  5600     4   934     5     4   142     0      64  }
  5601     4   934     5     4   142     0     424  ENDMETHOD
  5602     4   934     5     4   143     0     425  STARTMETHOD
  5603     4   956    18     4   143     0      36  int
  5604     4   956    22     4   143     0     111  arrayOffset
  5605     4   956    33     4   143     0      59  (
  5606     4   956    34     4   143     0      60  )
  5607     4   956    36     4   143     0      63  {
  5608     4   957     9     4   143     0      31  if
  5609     4   957    12     4   143     0      59  (
  5610     4   957    13     4   143     0     111  hb
  5611     4   957    16     4   143     0      68  ==
  5612     4   957    19     4   143     0      21  null
  5613     4   957    23     4   143     0      60  )
  5614     4   958    13     4   143     0      20  throw
  5615     4   958    23     4   143     0     111  UnsupportedOperationException
  5616     4   958    52     4   143     0      59  (
  5617     4   958    53     4   143     0      60  )
  5618     4   958    54     4   143     0     102  ;
  5619     4   959     9     4   143     0      31  if
  5620     4   959    12     4   143     0      59  (
  5621     4   959    13     4   143     0     111  isReadOnly
  5622     4   959    23     4   143     0      60  )
  5623     4   960    13     4   143     0      20  throw
  5624     4   960    23     4   143     0     111  ReadOnlyBufferException
  5625     4   960    46     4   143     0      59  (
  5626     4   960    47     4   143     0      60  )
  5627     4   960    48     4   143     0     102  ;
  5628     4   961     9     4   143     0      19  return
  5629     4   961    16     4   143     0     111  offset
  5630     4   961    22     4   143     0     102  ;
  5631     4   962     5     4   143     0      64  }
  5632     4   962     5     4   143     0     426  ENDMETHOD
  5633     4  1003    21     4    -1     0     111  ByteBuffer
  5634     4  1003    32     4    -1     0     111  compact
  5635     4  1003    39     4    -1     0      59  (
  5636     4  1003    40     4    -1     0      60  )
  5637     4  1003    41     4    -1     0     102  ;
  5638     4  1010    21     4    -1     0      39  boolean
  5639     4  1010    29     4    -1     0     111  isDirect
  5640     4  1010    37     4    -1     0      59  (
  5641     4  1010    38     4    -1     0      60  )
  5642     4  1010    39     4    -1     0     102  ;
  5643     4  1010    39     4   144     0     427  STARTMETHOD
  5644     4  1019    12     4   144     0     111  String
  5645     4  1019    19     4   144     0     111  toString
  5646     4  1019    27     4   144     0      59  (
  5647     4  1019    28     4   144     0      60  )
  5648     4  1019    30     4   144     0      63  {
  5649     4  1020     9     4   144     0     111  StringBuffer
  5650     4  1020    22     4   144     0     111  sb
  5651     4  1020    25     4   144     0      67  =
  5652     4  1020    31     4   144     0     111  StringBuffer
  5653     4  1020    43     4   144     0      59  (
  5654     4  1020    44     4   144     0      60  )
  5655     4  1020    45     4   144     0     102  ;
  5656     4  1021     9     4   144     0     111  sb.append
  5657     4  1021    18     4   144     0      59  (
  5658     4  1021    19     4   144     0     111  getClass
  5659     4  1021    27     4   144     0      59  (
  5660     4  1021    28     4   144     0      60  )
  5661     4  1021    29     4   144     0      54  .
  5662     4  1021    30     4   144     0     111  getName
  5663     4  1021    37     4   144     0      59  (
  5664     4  1021    38     4   144     0      60  )
  5665     4  1021    39     4   144     0      60  )
  5666     4  1021    40     4   144     0     102  ;
  5667     4  1022     9     4   144     0     111  sb.append
  5668     4  1022    18     4   144     0      59  (
  5669     4  1022    19     4   144     0     107  "[pos="
  5670     4  1022    26     4   144     0      60  )
  5671     4  1022    27     4   144     0     102  ;
  5672     4  1023     9     4   144     0     111  sb.append
  5673     4  1023    18     4   144     0      59  (
  5674     4  1023    19     4   144     0     111  position
  5675     4  1023    27     4   144     0      59  (
  5676     4  1023    28     4   144     0      60  )
  5677     4  1023    29     4   144     0      60  )
  5678     4  1023    30     4   144     0     102  ;
  5679     4  1024     9     4   144     0     111  sb.append
  5680     4  1024    18     4   144     0      59  (
  5681     4  1024    19     4   144     0     107  " lim="
  5682     4  1024    26     4   144     0      60  )
  5683     4  1024    27     4   144     0     102  ;
  5684     4  1025     9     4   144     0     111  sb.append
  5685     4  1025    18     4   144     0      59  (
  5686     4  1025    19     4   144     0     111  limit
  5687     4  1025    24     4   144     0      59  (
  5688     4  1025    25     4   144     0      60  )
  5689     4  1025    26     4   144     0      60  )
  5690     4  1025    27     4   144     0     102  ;
  5691     4  1026     9     4   144     0     111  sb.append
  5692     4  1026    18     4   144     0      59  (
  5693     4  1026    19     4   144     0     107  " cap="
  5694     4  1026    26     4   144     0      60  )
  5695     4  1026    27     4   144     0     102  ;
  5696     4  1027     9     4   144     0     111  sb.append
  5697     4  1027    18     4   144     0      59  (
  5698     4  1027    19     4   144     0     111  capacity
  5699     4  1027    27     4   144     0      59  (
  5700     4  1027    28     4   144     0      60  )
  5701     4  1027    29     4   144     0      60  )
  5702     4  1027    30     4   144     0     102  ;
  5703     4  1028     9     4   144     0     111  sb.append
  5704     4  1028    18     4   144     0      59  (
  5705     4  1028    19     4   144     0     107  "]"
  5706     4  1028    22     4   144     0      60  )
  5707     4  1028    23     4   144     0     102  ;
  5708     4  1029     9     4   144     0      19  return
  5709     4  1029    16     4   144     0     111  sb.toString
  5710     4  1029    27     4   144     0      59  (
  5711     4  1029    28     4   144     0      60  )
  5712     4  1029    29     4   144     0     102  ;
  5713     4  1030     5     4   144     0      64  }
  5714     4  1030     5     4   144     0     428  ENDMETHOD
  5715     4  1030     5     4   145     0     429  STARTMETHOD
  5716     4  1050    12     4   145     0      36  int
  5717     4  1050    16     4   145     0     111  hashCode
  5718     4  1050    24     4   145     0      59  (
  5719     4  1050    25     4   145     0      60  )
  5720     4  1050    27     4   145     0      63  {
  5721     4  1051     9     4   145     0      36  int
  5722     4  1051    13     4   145     0     111  h
  5723     4  1051    15     4   145     0      67  =
  5724     4  1051    17     4   145     0     112  1
  5725     4  1051    18     4   145     0     102  ;
  5726     4  1052     9     4   145     0      36  int
  5727     4  1052    13     4   145     0     111  p
  5728     4  1052    15     4   145     0      67  =
  5729     4  1052    17     4   145     0     111  position
  5730     4  1052    25     4   145     0      59  (
  5731     4  1052    26     4   145     0      60  )
  5732     4  1052    27     4   145     0     102  ;
  5733     4  1053     9     4   145     0      37  for
  5734     4  1053    13     4   145     0      59  (
  5735     4  1053    14     4   145     0      36  int
  5736     4  1053    18     4   145     0     111  i
  5737     4  1053    20     4   145     0      67  =
  5738     4  1053    22     4   145     0     111  limit
  5739     4  1053    27     4   145     0      59  (
  5740     4  1053    28     4   145     0      60  )
  5741     4  1053    30     4   145     0      77  -
  5742     4  1053    32     4   145     0     112  1
  5743     4  1053    33     4   145     0     102  ;
  5744     4  1053    35     4   145     0     111  i
  5745     4  1053    37     4   145     0      88  >=
  5746     4  1053    40     4   145     0     111  p
  5747     4  1053    41     4   145     0     102  ;
  5748     4  1053    43     4   145     0     111  i
  5749     4  1053    44     4   145     0      79  --
  5750     4  1053    46     4   145     0      60  )
  5751     4  1054    13     4   145     0     111  h
  5752     4  1054    15     4   145     0      67  =
  5753     4  1054    17     4   145     0     112  31
  5754     4  1054    20     4   145     0      80  *
  5755     4  1054    22     4   145     0     111  h
  5756     4  1054    24     4   145     0      74  +
  5757     4  1054    26     4   145     0      59  (
  5758     4  1054    27     4   145     0      36  int
  5759     4  1054    30     4   145     0      60  )
  5760     4  1054    31     4   145     0     111  get
  5761     4  1054    34     4   145     0      59  (
  5762     4  1054    35     4   145     0     111  i
  5763     4  1054    36     4   145     0      60  )
  5764     4  1054    37     4   145     0     102  ;
  5765     4  1055     9     4   145     0      19  return
  5766     4  1055    16     4   145     0     111  h
  5767     4  1055    17     4   145     0     102  ;
  5768     4  1056     5     4   145     0      64  }
  5769     4  1056     5     4   145     0     430  ENDMETHOD
  5770     4  1056     5     4   146     0     431  STARTMETHOD
  5771     4  1083    12     4   146     0      39  boolean
  5772     4  1083    20     4   146     0     111  equals
  5773     4  1083    26     4   146     0      59  (
  5774     4  1083    27     4   146     0     111  Object
  5775     4  1083    34     4   146     0     111  ob
  5776     4  1083    36     4   146     0      60  )
  5777     4  1083    38     4   146     0      63  {
  5778     4  1084     9     4   146     0      31  if
  5779     4  1084    12     4   146     0      59  (
  5780     4  1084    13     4   146     0      44  this
  5781     4  1084    18     4   146     0      68  ==
  5782     4  1084    21     4   146     0     111  ob
  5783     4  1084    23     4   146     0      60  )
  5784     4  1085    13     4   146     0      19  return
  5785     4  1085    20     4   146     0      52  true
  5786     4  1085    24     4   146     0     102  ;
  5787     4  1086     9     4   146     0      31  if
  5788     4  1086    12     4   146     0      59  (
  5789     4  1086    13     4   146     0      69  !
  5790     4  1086    14     4   146     0      59  (
  5791     4  1086    15     4   146     0     111  ob
  5792     4  1086    29     4   146     0     111  ByteBuffer
  5793     4  1086    39     4   146     0      60  )
  5794     4  1086    40     4   146     0      60  )
  5795     4  1087    13     4   146     0      19  return
  5796     4  1087    20     4   146     0      43  false
  5797     4  1087    25     4   146     0     102  ;
  5798     4  1088     9     4   146     0     111  ByteBuffer
  5799     4  1088    20     4   146     0     111  that
  5800     4  1088    25     4   146     0      67  =
  5801     4  1088    27     4   146     0      59  (
  5802     4  1088    28     4   146     0     111  ByteBuffer
  5803     4  1088    38     4   146     0      60  )
  5804     4  1088    39     4   146     0     111  ob
  5805     4  1088    41     4   146     0     102  ;
  5806     4  1089     9     4   146     0      31  if
  5807     4  1089    12     4   146     0      59  (
  5808     4  1089    13     4   146     0     111  this.remaining
  5809     4  1089    27     4   146     0      59  (
  5810     4  1089    28     4   146     0      60  )
  5811     4  1089    30     4   146     0      71  !=
  5812     4  1089    33     4   146     0     111  that.remaining
  5813     4  1089    47     4   146     0      59  (
  5814     4  1089    48     4   146     0      60  )
  5815     4  1089    49     4   146     0      60  )
  5816     4  1090    13     4   146     0      19  return
  5817     4  1090    20     4   146     0      43  false
  5818     4  1090    25     4   146     0     102  ;
  5819     4  1091     9     4   146     0      36  int
  5820     4  1091    13     4   146     0     111  p
  5821     4  1091    15     4   146     0      67  =
  5822     4  1091    17     4   146     0     111  this.position
  5823     4  1091    30     4   146     0      59  (
  5824     4  1091    31     4   146     0      60  )
  5825     4  1091    32     4   146     0     102  ;
  5826     4  1092     9     4   146     0      37  for
  5827     4  1092    13     4   146     0      59  (
  5828     4  1092    14     4   146     0      36  int
  5829     4  1092    18     4   146     0     111  i
  5830     4  1092    20     4   146     0      67  =
  5831     4  1092    22     4   146     0     111  this.limit
  5832     4  1092    32     4   146     0      59  (
  5833     4  1092    33     4   146     0      60  )
  5834     4  1092    35     4   146     0      77  -
  5835     4  1092    37     4   146     0     112  1
  5836     4  1092    38     4   146     0      66  ,
  5837     4  1092    40     4   146     0     111  j
  5838     4  1092    42     4   146     0      67  =
  5839     4  1092    44     4   146     0     111  that.limit
  5840     4  1092    54     4   146     0      59  (
  5841     4  1092    55     4   146     0      60  )
  5842     4  1092    57     4   146     0      77  -
  5843     4  1092    59     4   146     0     112  1
  5844     4  1092    60     4   146     0     102  ;
  5845     4  1092    62     4   146     0     111  i
  5846     4  1092    64     4   146     0      88  >=
  5847     4  1092    67     4   146     0     111  p
  5848     4  1092    68     4   146     0     102  ;
  5849     4  1092    70     4   146     0     111  i
  5850     4  1092    71     4   146     0      79  --
  5851     4  1092    73     4   146     0      66  ,
  5852     4  1092    75     4   146     0     111  j
  5853     4  1092    76     4   146     0      79  --
  5854     4  1092    78     4   146     0      60  )
  5855     4  1092    80     4   146     0      63  {
  5856     4  1093    18     4   146     1     111  v1
  5857     4  1093    21     4   146     1      67  =
  5858     4  1093    23     4   146     1     111  this.get
  5859     4  1093    31     4   146     1      59  (
  5860     4  1093    32     4   146     1     111  i
  5861     4  1093    33     4   146     1      60  )
  5862     4  1093    34     4   146     1     102  ;
  5863     4  1094    18     4   146     1     111  v2
  5864     4  1094    21     4   146     1      67  =
  5865     4  1094    23     4   146     1     111  that.get
  5866     4  1094    31     4   146     1      59  (
  5867     4  1094    32     4   146     1     111  j
  5868     4  1094    33     4   146     1      60  )
  5869     4  1094    34     4   146     1     102  ;
  5870     4  1095    13     4   146     0      31  if
  5871     4  1095    16     4   146     0      59  (
  5872     4  1095    17     4   146     0     111  v1
  5873     4  1095    20     4   146     0      71  !=
  5874     4  1095    23     4   146     0     111  v2
  5875     4  1095    25     4   146     0      60  )
  5876     4  1095    27     4   146     0      63  {
  5877     4  1096    17     4   146     0      31  if
  5878     4  1096    20     4   146     0      59  (
  5879     4  1096    21     4   146     0      59  (
  5880     4  1096    22     4   146     0     111  v1
  5881     4  1096    25     4   146     0      71  !=
  5882     4  1096    28     4   146     0     111  v1
  5883     4  1096    30     4   146     0      60  )
  5884     4  1096    32     4   146     0     101  &&
  5885     4  1096    35     4   146     0      59  (
  5886     4  1096    36     4   146     0     111  v2
  5887     4  1096    39     4   146     0      71  !=
  5888     4  1096    42     4   146     0     111  v2
  5889     4  1096    44     4   146     0      60  )
  5890     4  1096    45     4   146     0      60  )
  5891     4  1097    21     4   146     0      46  continue
  5892     4  1097    29     4   146     0     102  ;
  5893     4  1098    17     4   146     0      19  return
  5894     4  1098    24     4   146     0      43  false
  5895     4  1098    29     4   146     0     102  ;
  5896     4  1099    13     4   146     1      64  }
  5897     4  1100     9     4   146     1      64  }
  5898     4  1101     9     4   146     0      19  return
  5899     4  1101    16     4   146     0      52  true
  5900     4  1101    20     4   146     0     102  ;
  5901     4  1102     5     4   146     0      64  }
  5902     4  1102     5     4   146     0     432  ENDMETHOD
  5903     4  1102     5     4   147     0     433  STARTMETHOD
  5904     4  1116    12     4   147     0      36  int
  5905     4  1116    16     4   147     0     111  compareTo
  5906     4  1116    25     4   147     0      59  (
  5907     4  1116    26     4   147     0     111  ByteBuffer
  5908     4  1116    37     4   147     0     111  that
  5909     4  1116    41     4   147     0      60  )
  5910     4  1116    43     4   147     0      63  {
  5911     4  1117     9     4   147     0      36  int
  5912     4  1117    13     4   147     0     111  n
  5913     4  1117    15     4   147     0      67  =
  5914     4  1117    17     4   147     0     111  this.position
  5915     4  1117    30     4   147     0      59  (
  5916     4  1117    31     4   147     0      60  )
  5917     4  1117    33     4   147     0      74  +
  5918     4  1117    35     4   147     0     111  Math.min
  5919     4  1117    43     4   147     0      59  (
  5920     4  1117    44     4   147     0     111  this.remaining
  5921     4  1117    58     4   147     0      59  (
  5922     4  1117    59     4   147     0      60  )
  5923     4  1117    60     4   147     0      66  ,
  5924     4  1117    62     4   147     0     111  that.remaining
  5925     4  1117    76     4   147     0      59  (
  5926     4  1117    77     4   147     0      60  )
  5927     4  1117    78     4   147     0      60  )
  5928     4  1117    79     4   147     0     102  ;
  5929     4  1118     9     4   147     0      37  for
  5930     4  1118    13     4   147     0      59  (
  5931     4  1118    14     4   147     0      36  int
  5932     4  1118    18     4   147     0     111  i
  5933     4  1118    20     4   147     0      67  =
  5934     4  1118    22     4   147     0     111  this.position
  5935     4  1118    35     4   147     0      59  (
  5936     4  1118    36     4   147     0      60  )
  5937     4  1118    37     4   147     0      66  ,
  5938     4  1118    39     4   147     0     111  j
  5939     4  1118    41     4   147     0      67  =
  5940     4  1118    43     4   147     0     111  that.position
  5941     4  1118    56     4   147     0      59  (
  5942     4  1118    57     4   147     0      60  )
  5943     4  1118    58     4   147     0     102  ;
  5944     4  1118    60     4   147     0     111  i
  5945     4  1118    62     4   147     0      93  <
  5946     4  1118    64     4   147     0     111  n
  5947     4  1118    65     4   147     0     102  ;
  5948     4  1118    67     4   147     0     111  i
  5949     4  1118    68     4   147     0      76  ++
  5950     4  1118    70     4   147     0      66  ,
  5951     4  1118    72     4   147     0     111  j
  5952     4  1118    73     4   147     0      76  ++
  5953     4  1118    75     4   147     0      60  )
  5954     4  1118    77     4   147     0      63  {
  5955     4  1119    18     4   147     1     111  v1
  5956     4  1119    21     4   147     1      67  =
  5957     4  1119    23     4   147     1     111  this.get
  5958     4  1119    31     4   147     1      59  (
  5959     4  1119    32     4   147     1     111  i
  5960     4  1119    33     4   147     1      60  )
  5961     4  1119    34     4   147     1     102  ;
  5962     4  1120    18     4   147     1     111  v2
  5963     4  1120    21     4   147     1      67  =
  5964     4  1120    23     4   147     1     111  that.get
  5965     4  1120    31     4   147     1      59  (
  5966     4  1120    32     4   147     1     111  j
  5967     4  1120    33     4   147     1      60  )
  5968     4  1120    34     4   147     1     102  ;
  5969     4  1121    13     4   147     0      31  if
  5970     4  1121    16     4   147     0      59  (
  5971     4  1121    17     4   147     0     111  v1
  5972     4  1121    20     4   147     0      68  ==
  5973     4  1121    23     4   147     0     111  v2
  5974     4  1121    25     4   147     0      60  )
  5975     4  1122    17     4   147     0      46  continue
  5976     4  1122    25     4   147     0     102  ;
  5977     4  1123    13     4   147     0      31  if
  5978     4  1123    16     4   147     0      59  (
  5979     4  1123    17     4   147     0      59  (
  5980     4  1123    18     4   147     0     111  v1
  5981     4  1123    21     4   147     0      71  !=
  5982     4  1123    24     4   147     0     111  v1
  5983     4  1123    26     4   147     0      60  )
  5984     4  1123    28     4   147     0     101  &&
  5985     4  1123    31     4   147     0      59  (
  5986     4  1123    32     4   147     0     111  v2
  5987     4  1123    35     4   147     0      71  !=
  5988     4  1123    38     4   147     0     111  v2
  5989     4  1123    40     4   147     0      60  )
  5990     4  1123    41     4   147     0      60  )
  5991     4  1124    17     4   147     0      46  continue
  5992     4  1124    25     4   147     0     102  ;
  5993     4  1125    13     4   147     0      31  if
  5994     4  1125    16     4   147     0      59  (
  5995     4  1125    17     4   147     0     111  v1
  5996     4  1125    20     4   147     0      93  <
  5997     4  1125    22     4   147     0     111  v2
  5998     4  1125    24     4   147     0      60  )
  5999     4  1126    17     4   147     0      19  return
  6000     4  1126    24     4   147     0      77  -
  6001     4  1126    25     4   147     0     112  1
  6002     4  1126    26     4   147     0     102  ;
  6003     4  1127    13     4   147     0      19  return
  6004     4  1127    20     4   147     0      74  +
  6005     4  1127    21     4   147     0     112  1
  6006     4  1127    22     4   147     0     102  ;
  6007     4  1128     9     4   147     0      64  }
  6008     4  1129     9     4   147     0      19  return
  6009     4  1129    16     4   147     0     111  this.remaining
  6010     4  1129    30     4   147     0      59  (
  6011     4  1129    31     4   147     0      60  )
  6012     4  1129    33     4   147     0      77  -
  6013     4  1129    35     4   147     0     111  that.remaining
  6014     4  1129    49     4   147     0      59  (
  6015     4  1129    50     4   147     0      60  )
  6016     4  1129    51     4   147     0     102  ;
  6017     4  1130     5     4   147     0      64  }
  6018     4  1130     5     4   147     0     434  ENDMETHOD
  6019     4  1351     5     4    -1     0      39  boolean
  6020     4  1351    13     4    -1     0     111  bigEndian
  6021     4  1352     9     4    -1     0      67  =
  6022     4  1352    11     4    -1     0      52  true
  6023     4  1352    15     4    -1     0     102  ;
  6024     4  1353     5     4    -1     0      39  boolean
  6025     4  1353    13     4    -1     0     111  nativeByteOrder
  6026     4  1354     9     4    -1     0      67  =
  6027     4  1354    11     4    -1     0      59  (
  6028     4  1354    12     4    -1     0     111  Bits.byteOrder
  6029     4  1354    26     4    -1     0      59  (
  6030     4  1354    27     4    -1     0      60  )
  6031     4  1354    29     4    -1     0      68  ==
  6032     4  1354    32     4    -1     0     111  ByteOrder.BIG_ENDIAN
  6033     4  1354    52     4    -1     0      60  )
  6034     4  1354    53     4    -1     0     102  ;
  6035     4  1354    53     4   148     0     435  STARTMETHOD
  6036     4  1366    18     4   148     0     111  ByteOrder
  6037     4  1366    28     4   148     0     111  order
  6038     4  1366    33     4   148     0      59  (
  6039     4  1366    34     4   148     0      60  )
  6040     4  1366    36     4   148     0      63  {
  6041     4  1367     9     4   148     0      19  return
  6042     4  1367    16     4   148     0     111  bigEndian
  6043     4  1367    26     4   148     0      58  ?
  6044     4  1367    28     4   148     0     111  ByteOrder.BIG_ENDIAN
  6045     4  1367    49     4   148     0      65  :
  6046     4  1367    51     4   148     0     111  ByteOrder.LITTLE_ENDIAN
  6047     4  1367    74     4   148     0     102  ;
  6048     4  1368     5     4   148     0      64  }
  6049     4  1368     5     4   148     0     436  ENDMETHOD
  6050     4  1368     5     4   149     0     437  STARTMETHOD
  6051     4  1380    18     4   149     0     111  ByteBuffer
  6052     4  1380    29     4   149     0     111  order
  6053     4  1380    34     4   149     0      59  (
  6054     4  1380    35     4   149     0     111  ByteOrder
  6055     4  1380    45     4   149     0     111  bo
  6056     4  1380    47     4   149     0      60  )
  6057     4  1380    49     4   149     0      63  {
  6058     4  1381     9     4   149     0     111  bigEndian
  6059     4  1381    19     4   149     0      67  =
  6060     4  1381    21     4   149     0      59  (
  6061     4  1381    22     4   149     0     111  bo
  6062     4  1381    25     4   149     0      68  ==
  6063     4  1381    28     4   149     0     111  ByteOrder.BIG_ENDIAN
  6064     4  1381    48     4   149     0      60  )
  6065     4  1381    49     4   149     0     102  ;
  6066     4  1382     9     4   149     0     111  nativeByteOrder
  6067     4  1382    25     4   149     0      67  =
  6068     4  1383    13     4   149     0      59  (
  6069     4  1383    14     4   149     0     111  bigEndian
  6070     4  1383    24     4   149     0      68  ==
  6071     4  1383    27     4   149     0      59  (
  6072     4  1383    28     4   149     0     111  Bits.byteOrder
  6073     4  1383    42     4   149     0      59  (
  6074     4  1383    43     4   149     0      60  )
  6075     4  1383    45     4   149     0      68  ==
  6076     4  1383    48     4   149     0     111  ByteOrder.BIG_ENDIAN
  6077     4  1383    68     4   149     0      60  )
  6078     4  1383    69     4   149     0      60  )
  6079     4  1383    70     4   149     0     102  ;
  6080     4  1384     9     4   149     0      19  return
  6081     4  1384    16     4   149     0      44  this
  6082     4  1384    20     4   149     0     102  ;
  6083     4  1385     5     4   149     0      64  }
  6084     4  1385     5     4   149     0     438  ENDMETHOD
  6085     4  1389    19     4    -1     0     111  _get
  6086     4  1389    23     4    -1     0      59  (
  6087     4  1389    24     4    -1     0      36  int
  6088     4  1389    28     4    -1     0     111  i
  6089     4  1389    29     4    -1     0      60  )
  6090     4  1389    30     4    -1     0     102  ;
  6091     4  1390    14     4    -1     0      50  void
  6092     4  1390    19     4    -1     0     111  _put
  6093     4  1390    23     4    -1     0      59  (
  6094     4  1390    24     4    -1     0      36  int
  6095     4  1390    28     4    -1     0     111  i
  6096     4  1390    29     4    -1     0      66  ,
  6097     4  1390    36     4    -1     0     111  b
  6098     4  1390    37     4    -1     0      60  )
  6099     4  1390    38     4    -1     0     102  ;
  6100     4  1406    21     4    -1     0      40  char
  6101     4  1406    26     4    -1     0     111  getChar
  6102     4  1406    33     4    -1     0      59  (
  6103     4  1406    34     4    -1     0      60  )
  6104     4  1406    35     4    -1     0     102  ;
  6105     4  1428    21     4    -1     0     111  ByteBuffer
  6106     4  1428    32     4    -1     0     111  putChar
  6107     4  1428    39     4    -1     0      59  (
  6108     4  1428    40     4    -1     0      40  char
  6109     4  1428    45     4    -1     0     111  value
  6110     4  1428    50     4    -1     0      60  )
  6111     4  1428    51     4    -1     0     102  ;
  6112     4  1446    21     4    -1     0      40  char
  6113     4  1446    26     4    -1     0     111  getChar
  6114     4  1446    33     4    -1     0      59  (
  6115     4  1446    34     4    -1     0      36  int
  6116     4  1446    38     4    -1     0     111  index
  6117     4  1446    43     4    -1     0      60  )
  6118     4  1446    44     4    -1     0     102  ;
  6119     4  1471    21     4    -1     0     111  ByteBuffer
  6120     4  1471    32     4    -1     0     111  putChar
  6121     4  1471    39     4    -1     0      59  (
  6122     4  1471    40     4    -1     0      36  int
  6123     4  1471    44     4    -1     0     111  index
  6124     4  1471    49     4    -1     0      66  ,
  6125     4  1471    51     4    -1     0      40  char
  6126     4  1471    56     4    -1     0     111  value
  6127     4  1471    61     4    -1     0      60  )
  6128     4  1471    62     4    -1     0     102  ;
  6129     4  1489    21     4    -1     0     111  CharBuffer
  6130     4  1489    32     4    -1     0     111  asCharBuffer
  6131     4  1489    44     4    -1     0      59  (
  6132     4  1489    45     4    -1     0      60  )
  6133     4  1489    46     4    -1     0     102  ;
  6134     4  1505    27     4    -1     0     111  getShort
  6135     4  1505    35     4    -1     0      59  (
  6136     4  1505    36     4    -1     0      60  )
  6137     4  1505    37     4    -1     0     102  ;
  6138     4  1527    21     4    -1     0     111  ByteBuffer
  6139     4  1527    32     4    -1     0     111  putShort
  6140     4  1527    40     4    -1     0      59  (
  6141     4  1527    47     4    -1     0     111  value
  6142     4  1527    52     4    -1     0      60  )
  6143     4  1527    53     4    -1     0     102  ;
  6144     4  1545    27     4    -1     0     111  getShort
  6145     4  1545    35     4    -1     0      59  (
  6146     4  1545    36     4    -1     0      36  int
  6147     4  1545    40     4    -1     0     111  index
  6148     4  1545    45     4    -1     0      60  )
  6149     4  1545    46     4    -1     0     102  ;
  6150     4  1570    21     4    -1     0     111  ByteBuffer
  6151     4  1570    32     4    -1     0     111  putShort
  6152     4  1570    40     4    -1     0      59  (
  6153     4  1570    41     4    -1     0      36  int
  6154     4  1570    45     4    -1     0     111  index
  6155     4  1570    50     4    -1     0      66  ,
  6156     4  1570    58     4    -1     0     111  value
  6157     4  1570    63     4    -1     0      60  )
  6158     4  1570    64     4    -1     0     102  ;
  6159     4  1588    21     4    -1     0     111  ShortBuffer
  6160     4  1588    33     4    -1     0     111  asShortBuffer
  6161     4  1588    46     4    -1     0      59  (
  6162     4  1588    47     4    -1     0      60  )
  6163     4  1588    48     4    -1     0     102  ;
  6164     4  1604    21     4    -1     0      36  int
  6165     4  1604    25     4    -1     0     111  getInt
  6166     4  1604    31     4    -1     0      59  (
  6167     4  1604    32     4    -1     0      60  )
  6168     4  1604    33     4    -1     0     102  ;
  6169     4  1626    21     4    -1     0     111  ByteBuffer
  6170     4  1626    32     4    -1     0     111  putInt
  6171     4  1626    38     4    -1     0      59  (
  6172     4  1626    39     4    -1     0      36  int
  6173     4  1626    43     4    -1     0     111  value
  6174     4  1626    48     4    -1     0      60  )
  6175     4  1626    49     4    -1     0     102  ;
  6176     4  1644    21     4    -1     0      36  int
  6177     4  1644    25     4    -1     0     111  getInt
  6178     4  1644    31     4    -1     0      59  (
  6179     4  1644    32     4    -1     0      36  int
  6180     4  1644    36     4    -1     0     111  index
  6181     4  1644    41     4    -1     0      60  )
  6182     4  1644    42     4    -1     0     102  ;
  6183     4  1669    21     4    -1     0     111  ByteBuffer
  6184     4  1669    32     4    -1     0     111  putInt
  6185     4  1669    38     4    -1     0      59  (
  6186     4  1669    39     4    -1     0      36  int
  6187     4  1669    43     4    -1     0     111  index
  6188     4  1669    48     4    -1     0      66  ,
  6189     4  1669    50     4    -1     0      36  int
  6190     4  1669    54     4    -1     0     111  value
  6191     4  1669    59     4    -1     0      60  )
  6192     4  1669    60     4    -1     0     102  ;
  6193     4  1687    21     4    -1     0     111  IntBuffer
  6194     4  1687    31     4    -1     0     111  asIntBuffer
  6195     4  1687    42     4    -1     0      59  (
  6196     4  1687    43     4    -1     0      60  )
  6197     4  1687    44     4    -1     0     102  ;
  6198     4  1703    21     4    -1     0      53  long
  6199     4  1703    26     4    -1     0     111  getLong
  6200     4  1703    33     4    -1     0      59  (
  6201     4  1703    34     4    -1     0      60  )
  6202     4  1703    35     4    -1     0     102  ;
  6203     4  1725    21     4    -1     0     111  ByteBuffer
  6204     4  1725    32     4    -1     0     111  putLong
  6205     4  1725    39     4    -1     0      59  (
  6206     4  1725    40     4    -1     0      53  long
  6207     4  1725    45     4    -1     0     111  value
  6208     4  1725    50     4    -1     0      60  )
  6209     4  1725    51     4    -1     0     102  ;
  6210     4  1743    21     4    -1     0      53  long
  6211     4  1743    26     4    -1     0     111  getLong
  6212     4  1743    33     4    -1     0      59  (
  6213     4  1743    34     4    -1     0      36  int
  6214     4  1743    38     4    -1     0     111  index
  6215     4  1743    43     4    -1     0      60  )
  6216     4  1743    44     4    -1     0     102  ;
  6217     4  1768    21     4    -1     0     111  ByteBuffer
  6218     4  1768    32     4    -1     0     111  putLong
  6219     4  1768    39     4    -1     0      59  (
  6220     4  1768    40     4    -1     0      36  int
  6221     4  1768    44     4    -1     0     111  index
  6222     4  1768    49     4    -1     0      66  ,
  6223     4  1768    51     4    -1     0      53  long
  6224     4  1768    56     4    -1     0     111  value
  6225     4  1768    61     4    -1     0      60  )
  6226     4  1768    62     4    -1     0     102  ;
  6227     4  1786    21     4    -1     0     111  LongBuffer
  6228     4  1786    32     4    -1     0     111  asLongBuffer
  6229     4  1786    44     4    -1     0      59  (
  6230     4  1786    45     4    -1     0      60  )
  6231     4  1786    46     4    -1     0     102  ;
  6232     4  1802    27     4    -1     0     111  getFloat
  6233     4  1802    35     4    -1     0      59  (
  6234     4  1802    36     4    -1     0      60  )
  6235     4  1802    37     4    -1     0     102  ;
  6236     4  1824    21     4    -1     0     111  ByteBuffer
  6237     4  1824    32     4    -1     0     111  putFloat
  6238     4  1824    40     4    -1     0      59  (
  6239     4  1824    47     4    -1     0     111  value
  6240     4  1824    52     4    -1     0      60  )
  6241     4  1824    53     4    -1     0     102  ;
  6242     4  1842    27     4    -1     0     111  getFloat
  6243     4  1842    35     4    -1     0      59  (
  6244     4  1842    36     4    -1     0      36  int
  6245     4  1842    40     4    -1     0     111  index
  6246     4  1842    45     4    -1     0      60  )
  6247     4  1842    46     4    -1     0     102  ;
  6248     4  1867    21     4    -1     0     111  ByteBuffer
  6249     4  1867    32     4    -1     0     111  putFloat
  6250     4  1867    40     4    -1     0      59  (
  6251     4  1867    41     4    -1     0      36  int
  6252     4  1867    45     4    -1     0     111  index
  6253     4  1867    50     4    -1     0      66  ,
  6254     4  1867    58     4    -1     0     111  value
  6255     4  1867    63     4    -1     0      60  )
  6256     4  1867    64     4    -1     0     102  ;
  6257     4  1885    21     4    -1     0     111  FloatBuffer
  6258     4  1885    33     4    -1     0     111  asFloatBuffer
  6259     4  1885    46     4    -1     0      59  (
  6260     4  1885    47     4    -1     0      60  )
  6261     4  1885    48     4    -1     0     102  ;
  6262     4  1901    21     4    -1     0      32  double
  6263     4  1901    28     4    -1     0     111  getDouble
  6264     4  1901    37     4    -1     0      59  (
  6265     4  1901    38     4    -1     0      60  )
  6266     4  1901    39     4    -1     0     102  ;
  6267     4  1923    21     4    -1     0     111  ByteBuffer
  6268     4  1923    32     4    -1     0     111  putDouble
  6269     4  1923    41     4    -1     0      59  (
  6270     4  1923    42     4    -1     0      32  double
  6271     4  1923    49     4    -1     0     111  value
  6272     4  1923    54     4    -1     0      60  )
  6273     4  1923    55     4    -1     0     102  ;
  6274     4  1941    21     4    -1     0      32  double
  6275     4  1941    28     4    -1     0     111  getDouble
  6276     4  1941    37     4    -1     0      59  (
  6277     4  1941    38     4    -1     0      36  int
  6278     4  1941    42     4    -1     0     111  index
  6279     4  1941    47     4    -1     0      60  )
  6280     4  1941    48     4    -1     0     102  ;
  6281     4  1966    21     4    -1     0     111  ByteBuffer
  6282     4  1966    32     4    -1     0     111  putDouble
  6283     4  1966    41     4    -1     0      59  (
  6284     4  1966    42     4    -1     0      36  int
  6285     4  1966    46     4    -1     0     111  index
  6286     4  1966    51     4    -1     0      66  ,
  6287     4  1966    53     4    -1     0      32  double
  6288     4  1966    60     4    -1     0     111  value
  6289     4  1966    65     4    -1     0      60  )
  6290     4  1966    66     4    -1     0     102  ;
  6291     4  1984    21     4    -1     0     111  DoubleBuffer
  6292     4  1984    34     4    -1     0     111  asDoubleBuffer
  6293     4  1984    48     4    -1     0      59  (
  6294     4  1984    49     4    -1     0      60  )
  6295     4  1984    50     4    -1     0     102  ;
  6296     4  1986     1     4    -1     0      64  }
  6297     4  1986     1     4    -1     1     439  ENDCLASS
  6298     4  1986     1    -1    -1     1     440  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBuffer.java
  6299     5     1     1    -1    -1     1     441  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsCharBufferB.java
  6300     5    28     9    -1    -1     0     111  java.nio
  6301     5    28    17    -1    -1     0     102  ;
  6302     5    31     1     5    -1     0     442  STARTCLASS
  6303     5    31     1     5    -1     0      24  class
  6304     5    31     7     5    -1     0     111  ByteBufferAsCharBufferB
  6305     5    32     5     5    -1     0      38  extends
  6306     5    32    13     5    -1     0     111  CharBuffer
  6307     5    33     1     5    -1     0      63  {
  6308     5    37     5     5    -1     0      23  protected
  6309     5    37    21     5    -1     0     111  ByteBuffer
  6310     5    37    32     5    -1     0     111  bb
  6311     5    37    34     5    -1     0     102  ;
  6312     5    38     5     5    -1     0      23  protected
  6313     5    38    21     5    -1     0      36  int
  6314     5    38    25     5    -1     0     111  offset
  6315     5    38    31     5    -1     0     102  ;
  6316     5    38    31     5   150     0     443  STARTMETHOD
  6317     5    42     5     5   150     0     111  ByteBufferAsCharBufferB
  6318     5    42    28     5   150     0      59  (
  6319     5    42    29     5   150     0     111  ByteBuffer
  6320     5    42    40     5   150     0     111  bb
  6321     5    42    42     5   150     0      60  )
  6322     5    42    44     5   150     0      63  {
  6323     5    44     9     5   150     0      27  super
  6324     5    44    14     5   150     0      59  (
  6325     5    44    15     5   150     0      77  -
  6326     5    44    16     5   150     0     112  1
  6327     5    44    17     5   150     0      66  ,
  6328     5    44    19     5   150     0     112  0
  6329     5    44    20     5   150     0      66  ,
  6330     5    45    15     5   150     0     111  bb.remaining
  6331     5    45    27     5   150     0      59  (
  6332     5    45    28     5   150     0      60  )
  6333     5    45    30     5   150     0      84  >>
  6334     5    45    33     5   150     0     112  1
  6335     5    45    34     5   150     0      66  ,
  6336     5    46    15     5   150     0     111  bb.remaining
  6337     5    46    27     5   150     0      59  (
  6338     5    46    28     5   150     0      60  )
  6339     5    46    30     5   150     0      84  >>
  6340     5    46    33     5   150     0     112  1
  6341     5    46    34     5   150     0      60  )
  6342     5    46    35     5   150     0     102  ;
  6343     5    47     9     5   150     0     111  this.bb
  6344     5    47    17     5   150     0      67  =
  6345     5    47    19     5   150     0     111  bb
  6346     5    47    21     5   150     0     102  ;
  6347     5    49     9     5   150     0      36  int
  6348     5    49    13     5   150     0     111  cap
  6349     5    49    17     5   150     0      67  =
  6350     5    49    19     5   150     0     111  this.capacity
  6351     5    49    32     5   150     0      59  (
  6352     5    49    33     5   150     0      60  )
  6353     5    49    34     5   150     0     102  ;
  6354     5    50     9     5   150     0     111  this.limit
  6355     5    50    19     5   150     0      59  (
  6356     5    50    20     5   150     0     111  cap
  6357     5    50    23     5   150     0      60  )
  6358     5    50    24     5   150     0     102  ;
  6359     5    51     9     5   150     0      36  int
  6360     5    51    13     5   150     0     111  pos
  6361     5    51    17     5   150     0      67  =
  6362     5    51    19     5   150     0     111  this.position
  6363     5    51    32     5   150     0      59  (
  6364     5    51    33     5   150     0      60  )
  6365     5    51    34     5   150     0     102  ;
  6366     5    52     9     5   150     0     111  assert
  6367     5    52    16     5   150     0      59  (
  6368     5    52    17     5   150     0     111  pos
  6369     5    52    21     5   150     0      92  <=
  6370     5    52    24     5   150     0     111  cap
  6371     5    52    27     5   150     0      60  )
  6372     5    52    28     5   150     0     102  ;
  6373     5    53     9     5   150     0     111  offset
  6374     5    53    16     5   150     0      67  =
  6375     5    53    18     5   150     0     111  pos
  6376     5    53    21     5   150     0     102  ;
  6377     5    57     5     5   150     0      64  }
  6378     5    57     5     5   150     0     444  ENDMETHOD
  6379     5    57     5     5   151     0     445  STARTMETHOD
  6380     5    59     5     5   151     0     111  ByteBufferAsCharBufferB
  6381     5    59    28     5   151     0      59  (
  6382     5    59    29     5   151     0     111  ByteBuffer
  6383     5    59    40     5   151     0     111  bb
  6384     5    59    42     5   151     0      66  ,
  6385     5    60    38     5   151     0      36  int
  6386     5    60    42     5   151     0     111  mark
  6387     5    60    46     5   151     0      66  ,
  6388     5    60    48     5   151     0      36  int
  6389     5    60    52     5   151     0     111  pos
  6390     5    60    55     5   151     0      66  ,
  6391     5    60    57     5   151     0      36  int
  6392     5    60    61     5   151     0     111  lim
  6393     5    60    64     5   151     0      66  ,
  6394     5    60    66     5   151     0      36  int
  6395     5    60    70     5   151     0     111  cap
  6396     5    60    73     5   151     0      66  ,
  6397     5    61    38     5   151     0      36  int
  6398     5    61    42     5   151     0     111  off
  6399     5    61    45     5   151     0      60  )
  6400     5    62     5     5   151     0      63  {
  6401     5    64     9     5   151     0      27  super
  6402     5    64    14     5   151     0      59  (
  6403     5    64    15     5   151     0     111  mark
  6404     5    64    19     5   151     0      66  ,
  6405     5    64    21     5   151     0     111  pos
  6406     5    64    24     5   151     0      66  ,
  6407     5    64    26     5   151     0     111  lim
  6408     5    64    29     5   151     0      66  ,
  6409     5    64    31     5   151     0     111  cap
  6410     5    64    34     5   151     0      60  )
  6411     5    64    35     5   151     0     102  ;
  6412     5    65     9     5   151     1     111  this.bb
  6413     5    65    17     5   151     1      67  =
  6414     5    65    19     5   151     1     111  bb
  6415     5    65    21     5   151     1     102  ;
  6416     5    66     9     5   151     1     111  offset
  6417     5    66    16     5   151     1      67  =
  6418     5    66    18     5   151     1     111  off
  6419     5    66    21     5   151     1     102  ;
  6420     5    70     5     5   151     0      64  }
  6421     5    70     5     5   151     0     446  ENDMETHOD
  6422     5    70     5     5   152     0     447  STARTMETHOD
  6423     5    72    12     5   152     0     111  CharBuffer
  6424     5    72    23     5   152     0     111  slice
  6425     5    72    28     5   152     0      59  (
  6426     5    72    29     5   152     0      60  )
  6427     5    72    31     5   152     0      63  {
  6428     5    73     9     5   152     1      36  int
  6429     5    73    13     5   152     1     111  pos
  6430     5    73    17     5   152     1      67  =
  6431     5    73    19     5   152     1     111  this.position
  6432     5    73    32     5   152     1      59  (
  6433     5    73    33     5   152     1      60  )
  6434     5    73    34     5   152     1     102  ;
  6435     5    74     9     5   152     1      36  int
  6436     5    74    13     5   152     1     111  lim
  6437     5    74    17     5   152     1      67  =
  6438     5    74    19     5   152     1     111  this.limit
  6439     5    74    29     5   152     1      59  (
  6440     5    74    30     5   152     1      60  )
  6441     5    74    31     5   152     1     102  ;
  6442     5    75     9     5   152     0     111  assert
  6443     5    75    16     5   152     0      59  (
  6444     5    75    17     5   152     0     111  pos
  6445     5    75    21     5   152     0      92  <=
  6446     5    75    24     5   152     0     111  lim
  6447     5    75    27     5   152     0      60  )
  6448     5    75    28     5   152     0     102  ;
  6449     5    76     9     5   152     0      36  int
  6450     5    76    13     5   152     0     111  rem
  6451     5    76    17     5   152     0      67  =
  6452     5    76    19     5   152     0      59  (
  6453     5    76    20     5   152     0     111  pos
  6454     5    76    24     5   152     0      92  <=
  6455     5    76    27     5   152     0     111  lim
  6456     5    76    31     5   152     0      58  ?
  6457     5    76    33     5   152     0     111  lim
  6458     5    76    37     5   152     0      77  -
  6459     5    76    39     5   152     0     111  pos
  6460     5    76    43     5   152     0      65  :
  6461     5    76    45     5   152     0     112  0
  6462     5    76    46     5   152     0      60  )
  6463     5    76    47     5   152     0     102  ;
  6464     5    77     9     5   152     0      36  int
  6465     5    77    13     5   152     0     111  off
  6466     5    77    17     5   152     0      67  =
  6467     5    77    19     5   152     0      59  (
  6468     5    77    20     5   152     0     111  pos
  6469     5    77    24     5   152     0      90  <<
  6470     5    77    27     5   152     0     112  1
  6471     5    77    28     5   152     0      60  )
  6472     5    77    30     5   152     0      74  +
  6473     5    77    32     5   152     0     111  offset
  6474     5    77    38     5   152     0     102  ;
  6475     5    78     9     5   152     0     111  assert
  6476     5    78    16     5   152     0      59  (
  6477     5    78    17     5   152     0     111  off
  6478     5    78    21     5   152     0      88  >=
  6479     5    78    24     5   152     0     112  0
  6480     5    78    25     5   152     0      60  )
  6481     5    78    26     5   152     0     102  ;
  6482     5    79     9     5   152     0      19  return
  6483     5    79    20     5   152     0     111  ByteBufferAsCharBufferB
  6484     5    79    43     5   152     0      59  (
  6485     5    79    44     5   152     0     111  bb
  6486     5    79    46     5   152     0      66  ,
  6487     5    79    48     5   152     0      77  -
  6488     5    79    49     5   152     0     112  1
  6489     5    79    50     5   152     0      66  ,
  6490     5    79    52     5   152     0     112  0
  6491     5    79    53     5   152     0      66  ,
  6492     5    79    55     5   152     0     111  rem
  6493     5    79    58     5   152     0      66  ,
  6494     5    79    60     5   152     0     111  rem
  6495     5    79    63     5   152     0      66  ,
  6496     5    79    65     5   152     0     111  off
  6497     5    79    68     5   152     0      60  )
  6498     5    79    69     5   152     0     102  ;
  6499     5    80     5     5   152     0      64  }
  6500     5    80     5     5   152     0     448  ENDMETHOD
  6501     5    80     5     5   153     0     449  STARTMETHOD
  6502     5    82    12     5   153     0     111  CharBuffer
  6503     5    82    23     5   153     0     111  duplicate
  6504     5    82    32     5   153     0      59  (
  6505     5    82    33     5   153     0      60  )
  6506     5    82    35     5   153     0      63  {
  6507     5    83     9     5   153     0      19  return
  6508     5    83    20     5   153     0     111  ByteBufferAsCharBufferB
  6509     5    83    43     5   153     0      59  (
  6510     5    83    44     5   153     0     111  bb
  6511     5    83    46     5   153     0      66  ,
  6512     5    84    53     5   153     1     111  this.markValue
  6513     5    84    67     5   153     1      59  (
  6514     5    84    68     5   153     1      60  )
  6515     5    84    69     5   153     1      66  ,
  6516     5    85    53     5   153     1     111  this.position
  6517     5    85    66     5   153     1      59  (
  6518     5    85    67     5   153     1      60  )
  6519     5    85    68     5   153     1      66  ,
  6520     5    86    53     5   153     1     111  this.limit
  6521     5    86    63     5   153     1      59  (
  6522     5    86    64     5   153     1      60  )
  6523     5    86    65     5   153     1      66  ,
  6524     5    87    53     5   153     1     111  this.capacity
  6525     5    87    66     5   153     1      59  (
  6526     5    87    67     5   153     1      60  )
  6527     5    87    68     5   153     1      66  ,
  6528     5    88    53     5   153     0     111  offset
  6529     5    88    59     5   153     0      60  )
  6530     5    88    60     5   153     0     102  ;
  6531     5    89     5     5   153     0      64  }
  6532     5    89     5     5   153     0     450  ENDMETHOD
  6533     5    89     5     5   154     0     451  STARTMETHOD
  6534     5    91    12     5   154     0     111  CharBuffer
  6535     5    91    23     5   154     0     111  asReadOnlyBuffer
  6536     5    91    39     5   154     0      59  (
  6537     5    91    40     5   154     0      60  )
  6538     5    91    42     5   154     0      63  {
  6539     5    93     9     5   154     0      19  return
  6540     5    93    20     5   154     0     111  ByteBufferAsCharBufferRB
  6541     5    93    44     5   154     0      59  (
  6542     5    93    45     5   154     0     111  bb
  6543     5    93    47     5   154     0      66  ,
  6544     5    94    50     5   154     1     111  this.markValue
  6545     5    94    64     5   154     1      59  (
  6546     5    94    65     5   154     1      60  )
  6547     5    94    66     5   154     1      66  ,
  6548     5    95    50     5   154     1     111  this.position
  6549     5    95    63     5   154     1      59  (
  6550     5    95    64     5   154     1      60  )
  6551     5    95    65     5   154     1      66  ,
  6552     5    96    50     5   154     1     111  this.limit
  6553     5    96    60     5   154     1      59  (
  6554     5    96    61     5   154     1      60  )
  6555     5    96    62     5   154     1      66  ,
  6556     5    97    50     5   154     1     111  this.capacity
  6557     5    97    63     5   154     1      59  (
  6558     5    97    64     5   154     1      60  )
  6559     5    97    65     5   154     1      66  ,
  6560     5    98    50     5   154     0     111  offset
  6561     5    98    56     5   154     0      60  )
  6562     5    98    57     5   154     0     102  ;
  6563     5   102     5     5   154     0      64  }
  6564     5   102     5     5   154     0     452  ENDMETHOD
  6565     5   102     5     5   155     0     453  STARTMETHOD
  6566     5   106     5     5   155     0      23  protected
  6567     5   106    15     5   155     0      36  int
  6568     5   106    19     5   155     0     111  ix
  6569     5   106    21     5   155     0      59  (
  6570     5   106    22     5   155     0      36  int
  6571     5   106    26     5   155     0     111  i
  6572     5   106    27     5   155     0      60  )
  6573     5   106    29     5   155     0      63  {
  6574     5   107     9     5   155     0      19  return
  6575     5   107    16     5   155     0      59  (
  6576     5   107    17     5   155     0     111  i
  6577     5   107    19     5   155     0      90  <<
  6578     5   107    22     5   155     0     112  1
  6579     5   107    23     5   155     0      60  )
  6580     5   107    25     5   155     0      74  +
  6581     5   107    27     5   155     0     111  offset
  6582     5   107    33     5   155     0     102  ;
  6583     5   108     5     5   155     0      64  }
  6584     5   108     5     5   155     0     454  ENDMETHOD
  6585     5   108     5     5   156     0     455  STARTMETHOD
  6586     5   110    12     5   156     0      40  char
  6587     5   110    17     5   156     0     111  get
  6588     5   110    20     5   156     0      59  (
  6589     5   110    21     5   156     0      60  )
  6590     5   110    23     5   156     0      63  {
  6591     5   111     9     5   156     0      19  return
  6592     5   111    16     5   156     0     111  Bits.getCharB
  6593     5   111    29     5   156     0      59  (
  6594     5   111    30     5   156     0     111  bb
  6595     5   111    32     5   156     0      66  ,
  6596     5   111    34     5   156     0     111  ix
  6597     5   111    36     5   156     0      59  (
  6598     5   111    37     5   156     0     111  nextGetIndex
  6599     5   111    49     5   156     0      59  (
  6600     5   111    50     5   156     0      60  )
  6601     5   111    51     5   156     0      60  )
  6602     5   111    52     5   156     0      60  )
  6603     5   111    53     5   156     0     102  ;
  6604     5   112     5     5   156     0      64  }
  6605     5   112     5     5   156     0     456  ENDMETHOD
  6606     5   112     5     5   157     0     457  STARTMETHOD
  6607     5   114    12     5   157     0      40  char
  6608     5   114    17     5   157     0     111  get
  6609     5   114    20     5   157     0      59  (
  6610     5   114    21     5   157     0      36  int
  6611     5   114    25     5   157     0     111  i
  6612     5   114    26     5   157     0      60  )
  6613     5   114    28     5   157     0      63  {
  6614     5   115     9     5   157     0      19  return
  6615     5   115    16     5   157     0     111  Bits.getCharB
  6616     5   115    29     5   157     0      59  (
  6617     5   115    30     5   157     0     111  bb
  6618     5   115    32     5   157     0      66  ,
  6619     5   115    34     5   157     0     111  ix
  6620     5   115    36     5   157     0      59  (
  6621     5   115    37     5   157     0     111  checkIndex
  6622     5   115    47     5   157     0      59  (
  6623     5   115    48     5   157     0     111  i
  6624     5   115    49     5   157     0      60  )
  6625     5   115    50     5   157     0      60  )
  6626     5   115    51     5   157     0      60  )
  6627     5   115    52     5   157     0     102  ;
  6628     5   116     5     5   157     0      64  }
  6629     5   116     5     5   157     0     458  ENDMETHOD
  6630     5   116     5     5   158     0     459  STARTMETHOD
  6631     5   120    12     5   158     0     111  CharBuffer
  6632     5   120    23     5   158     0     111  put
  6633     5   120    26     5   158     0      59  (
  6634     5   120    27     5   158     0      40  char
  6635     5   120    32     5   158     0     111  x
  6636     5   120    33     5   158     0      60  )
  6637     5   120    35     5   158     0      63  {
  6638     5   122     9     5   158     0     111  Bits.putCharB
  6639     5   122    22     5   158     0      59  (
  6640     5   122    23     5   158     0     111  bb
  6641     5   122    25     5   158     0      66  ,
  6642     5   122    27     5   158     0     111  ix
  6643     5   122    29     5   158     0      59  (
  6644     5   122    30     5   158     0     111  nextPutIndex
  6645     5   122    42     5   158     0      59  (
  6646     5   122    43     5   158     0      60  )
  6647     5   122    44     5   158     0      60  )
  6648     5   122    45     5   158     0      66  ,
  6649     5   122    47     5   158     0     111  x
  6650     5   122    48     5   158     0      60  )
  6651     5   122    49     5   158     0     102  ;
  6652     5   123     9     5   158     0      19  return
  6653     5   123    16     5   158     0      44  this
  6654     5   123    20     5   158     0     102  ;
  6655     5   127     5     5   158     0      64  }
  6656     5   127     5     5   158     0     460  ENDMETHOD
  6657     5   127     5     5   159     0     461  STARTMETHOD
  6658     5   129    12     5   159     0     111  CharBuffer
  6659     5   129    23     5   159     0     111  put
  6660     5   129    26     5   159     0      59  (
  6661     5   129    27     5   159     0      36  int
  6662     5   129    31     5   159     0     111  i
  6663     5   129    32     5   159     0      66  ,
  6664     5   129    34     5   159     0      40  char
  6665     5   129    39     5   159     0     111  x
  6666     5   129    40     5   159     0      60  )
  6667     5   129    42     5   159     0      63  {
  6668     5   131     9     5   159     0     111  Bits.putCharB
  6669     5   131    22     5   159     0      59  (
  6670     5   131    23     5   159     0     111  bb
  6671     5   131    25     5   159     0      66  ,
  6672     5   131    27     5   159     0     111  ix
  6673     5   131    29     5   159     0      59  (
  6674     5   131    30     5   159     0     111  checkIndex
  6675     5   131    40     5   159     0      59  (
  6676     5   131    41     5   159     0     111  i
  6677     5   131    42     5   159     0      60  )
  6678     5   131    43     5   159     0      60  )
  6679     5   131    44     5   159     0      66  ,
  6680     5   131    46     5   159     0     111  x
  6681     5   131    47     5   159     0      60  )
  6682     5   131    48     5   159     0     102  ;
  6683     5   132     9     5   159     0      19  return
  6684     5   132    16     5   159     0      44  this
  6685     5   132    20     5   159     0     102  ;
  6686     5   136     5     5   159     0      64  }
  6687     5   136     5     5   159     0     462  ENDMETHOD
  6688     5   136     5     5   160     0     463  STARTMETHOD
  6689     5   138    12     5   160     0     111  CharBuffer
  6690     5   138    23     5   160     0     111  compact
  6691     5   138    30     5   160     0      59  (
  6692     5   138    31     5   160     0      60  )
  6693     5   138    33     5   160     0      63  {
  6694     5   140     9     5   160     1      36  int
  6695     5   140    13     5   160     1     111  pos
  6696     5   140    17     5   160     1      67  =
  6697     5   140    19     5   160     1     111  position
  6698     5   140    27     5   160     1      59  (
  6699     5   140    28     5   160     1      60  )
  6700     5   140    29     5   160     1     102  ;
  6701     5   141     9     5   160     1      36  int
  6702     5   141    13     5   160     1     111  lim
  6703     5   141    17     5   160     1      67  =
  6704     5   141    19     5   160     1     111  limit
  6705     5   141    24     5   160     1      59  (
  6706     5   141    25     5   160     1      60  )
  6707     5   141    26     5   160     1     102  ;
  6708     5   142     9     5   160     0     111  assert
  6709     5   142    16     5   160     0      59  (
  6710     5   142    17     5   160     0     111  pos
  6711     5   142    21     5   160     0      92  <=
  6712     5   142    24     5   160     0     111  lim
  6713     5   142    27     5   160     0      60  )
  6714     5   142    28     5   160     0     102  ;
  6715     5   143     9     5   160     0      36  int
  6716     5   143    13     5   160     0     111  rem
  6717     5   143    17     5   160     0      67  =
  6718     5   143    19     5   160     0      59  (
  6719     5   143    20     5   160     0     111  pos
  6720     5   143    24     5   160     0      92  <=
  6721     5   143    27     5   160     0     111  lim
  6722     5   143    31     5   160     0      58  ?
  6723     5   143    33     5   160     0     111  lim
  6724     5   143    37     5   160     0      77  -
  6725     5   143    39     5   160     0     111  pos
  6726     5   143    43     5   160     0      65  :
  6727     5   143    45     5   160     0     112  0
  6728     5   143    46     5   160     0      60  )
  6729     5   143    47     5   160     0     102  ;
  6730     5   145     9     5   160     0     111  ByteBuffer
  6731     5   145    20     5   160     0     111  db
  6732     5   145    23     5   160     0      67  =
  6733     5   145    25     5   160     0     111  bb.duplicate
  6734     5   145    37     5   160     0      59  (
  6735     5   145    38     5   160     0      60  )
  6736     5   145    39     5   160     0     102  ;
  6737     5   146     9     5   160     0     111  db.limit
  6738     5   146    17     5   160     0      59  (
  6739     5   146    18     5   160     0     111  ix
  6740     5   146    20     5   160     0      59  (
  6741     5   146    21     5   160     0     111  lim
  6742     5   146    24     5   160     0      60  )
  6743     5   146    25     5   160     0      60  )
  6744     5   146    26     5   160     0     102  ;
  6745     5   147     9     5   160     0     111  db.position
  6746     5   147    20     5   160     0      59  (
  6747     5   147    21     5   160     0     111  ix
  6748     5   147    23     5   160     0      59  (
  6749     5   147    24     5   160     0     112  0
  6750     5   147    25     5   160     0      60  )
  6751     5   147    26     5   160     0      60  )
  6752     5   147    27     5   160     0     102  ;
  6753     5   148     9     5   160     0     111  ByteBuffer
  6754     5   148    20     5   160     0     111  sb
  6755     5   148    23     5   160     0      67  =
  6756     5   148    25     5   160     0     111  db.slice
  6757     5   148    33     5   160     0      59  (
  6758     5   148    34     5   160     0      60  )
  6759     5   148    35     5   160     0     102  ;
  6760     5   149     9     5   160     0     111  sb.position
  6761     5   149    20     5   160     0      59  (
  6762     5   149    21     5   160     0     111  pos
  6763     5   149    25     5   160     0      90  <<
  6764     5   149    28     5   160     0     112  1
  6765     5   149    29     5   160     0      60  )
  6766     5   149    30     5   160     0     102  ;
  6767     5   150     9     5   160     0     111  sb.compact
  6768     5   150    19     5   160     0      59  (
  6769     5   150    20     5   160     0      60  )
  6770     5   150    21     5   160     0     102  ;
  6771     5   151     9     5   160     0     111  position
  6772     5   151    17     5   160     0      59  (
  6773     5   151    18     5   160     0     111  rem
  6774     5   151    21     5   160     0      60  )
  6775     5   151    22     5   160     0     102  ;
  6776     5   152     9     5   160     0     111  limit
  6777     5   152    14     5   160     0      59  (
  6778     5   152    15     5   160     0     111  capacity
  6779     5   152    23     5   160     0      59  (
  6780     5   152    24     5   160     0      60  )
  6781     5   152    25     5   160     0      60  )
  6782     5   152    26     5   160     0     102  ;
  6783     5   153     9     5   160     0      19  return
  6784     5   153    16     5   160     0      44  this
  6785     5   153    20     5   160     0     102  ;
  6786     5   157     5     5   160     0      64  }
  6787     5   157     5     5   160     0     464  ENDMETHOD
  6788     5   157     5     5   161     0     465  STARTMETHOD
  6789     5   159    12     5   161     0      39  boolean
  6790     5   159    20     5   161     0     111  isDirect
  6791     5   159    28     5   161     0      59  (
  6792     5   159    29     5   161     0      60  )
  6793     5   159    31     5   161     0      63  {
  6794     5   160     9     5   161     0      19  return
  6795     5   160    16     5   161     0     111  bb.isDirect
  6796     5   160    27     5   161     0      59  (
  6797     5   160    28     5   161     0      60  )
  6798     5   160    29     5   161     0     102  ;
  6799     5   161     5     5   161     0      64  }
  6800     5   161     5     5   161     0     466  ENDMETHOD
  6801     5   161     5     5   162     0     467  STARTMETHOD
  6802     5   163    12     5   162     0      39  boolean
  6803     5   163    20     5   162     0     111  isReadOnly
  6804     5   163    30     5   162     0      59  (
  6805     5   163    31     5   162     0      60  )
  6806     5   163    33     5   162     0      63  {
  6807     5   164     9     5   162     0      19  return
  6808     5   164    16     5   162     0      43  false
  6809     5   164    21     5   162     0     102  ;
  6810     5   165     5     5   162     0      64  }
  6811     5   165     5     5   162     0     468  ENDMETHOD
  6812     5   165     5     5   163     0     469  STARTMETHOD
  6813     5   169    12     5   163     0     111  String
  6814     5   169    19     5   163     0     111  toString
  6815     5   169    27     5   163     0      59  (
  6816     5   169    28     5   163     0      36  int
  6817     5   169    32     5   163     0     111  start
  6818     5   169    37     5   163     0      66  ,
  6819     5   169    39     5   163     0      36  int
  6820     5   169    43     5   163     0     111  end
  6821     5   169    46     5   163     0      60  )
  6822     5   169    48     5   163     0      63  {
  6823     5   170     9     5   163     0      31  if
  6824     5   170    12     5   163     0      59  (
  6825     5   170    13     5   163     0      59  (
  6826     5   170    14     5   163     0     111  end
  6827     5   170    18     5   163     0      89  >
  6828     5   170    20     5   163     0     111  limit
  6829     5   170    25     5   163     0      59  (
  6830     5   170    26     5   163     0      60  )
  6831     5   170    27     5   163     0      60  )
  6832     5   170    29     5   163     0      98  ||
  6833     5   170    32     5   163     0      59  (
  6834     5   170    33     5   163     0     111  start
  6835     5   170    39     5   163     0      89  >
  6836     5   170    41     5   163     0     111  end
  6837     5   170    44     5   163     0      60  )
  6838     5   170    45     5   163     0      60  )
  6839     5   171    13     5   163     0      20  throw
  6840     5   171    23     5   163     0     111  IndexOutOfBoundsException
  6841     5   171    48     5   163     0      59  (
  6842     5   171    49     5   163     0      60  )
  6843     5   171    50     5   163     0     102  ;
  6844     5   172     9     5   163     0      35  try
  6845     5   172    13     5   163     0      63  {
  6846     5   173    13     5   163     0      36  int
  6847     5   173    17     5   163     0     111  len
  6848     5   173    21     5   163     0      67  =
  6849     5   173    23     5   163     0     111  end
  6850     5   173    27     5   163     0      77  -
  6851     5   173    29     5   163     0     111  start
  6852     5   173    34     5   163     0     102  ;
  6853     5   174    13     5   163     0      40  char
  6854     5   174    17     5   163     0      61  [
  6855     5   174    18     5   163     0      62  ]
  6856     5   174    20     5   163     0     111  ca
  6857     5   174    23     5   163     0      67  =
  6858     5   174    29     5   163     0      40  char
  6859     5   174    33     5   163     0      61  [
  6860     5   174    34     5   163     0     111  len
  6861     5   174    37     5   163     0      62  ]
  6862     5   174    38     5   163     0     102  ;
  6863     5   175    13     5   163     0     111  CharBuffer
  6864     5   175    24     5   163     0     111  cb
  6865     5   175    27     5   163     0      67  =
  6866     5   175    29     5   163     0     111  CharBuffer.wrap
  6867     5   175    44     5   163     0      59  (
  6868     5   175    45     5   163     0     111  ca
  6869     5   175    47     5   163     0      60  )
  6870     5   175    48     5   163     0     102  ;
  6871     5   176    13     5   163     0     111  CharBuffer
  6872     5   176    24     5   163     0     111  db
  6873     5   176    27     5   163     0      67  =
  6874     5   176    29     5   163     0     111  this.duplicate
  6875     5   176    43     5   163     0      59  (
  6876     5   176    44     5   163     0      60  )
  6877     5   176    45     5   163     0     102  ;
  6878     5   177    13     5   163     1     111  db.position
  6879     5   177    24     5   163     1      59  (
  6880     5   177    25     5   163     1     111  start
  6881     5   177    30     5   163     1      60  )
  6882     5   177    31     5   163     1     102  ;
  6883     5   178    13     5   163     1     111  db.limit
  6884     5   178    21     5   163     1      59  (
  6885     5   178    22     5   163     1     111  end
  6886     5   178    25     5   163     1      60  )
  6887     5   178    26     5   163     1     102  ;
  6888     5   179    13     5   163     1     111  cb.put
  6889     5   179    19     5   163     1      59  (
  6890     5   179    20     5   163     1     111  db
  6891     5   179    22     5   163     1      60  )
  6892     5   179    23     5   163     1     102  ;
  6893     5   180    13     5   163     0      19  return
  6894     5   180    24     5   163     0     111  String
  6895     5   180    30     5   163     0      59  (
  6896     5   180    31     5   163     0     111  ca
  6897     5   180    33     5   163     0      60  )
  6898     5   180    34     5   163     0     102  ;
  6899     5   181     9     5   163     0      64  }
  6900     5   181    11     5   163     0      34  catch
  6901     5   181    17     5   163     0      59  (
  6902     5   181    18     5   163     0     111  StringIndexOutOfBoundsException
  6903     5   181    50     5   163     0     111  x
  6904     5   181    51     5   163     0      60  )
  6905     5   181    53     5   163     0      63  {
  6906     5   182    13     5   163     0      20  throw
  6907     5   182    23     5   163     0     111  IndexOutOfBoundsException
  6908     5   182    48     5   163     0      59  (
  6909     5   182    49     5   163     0      60  )
  6910     5   182    50     5   163     0     102  ;
  6911     5   183     9     5   163     0      64  }
  6912     5   184     5     5   163     0      64  }
  6913     5   184     5     5   163     0     470  ENDMETHOD
  6914     5   184     5     5   164     0     471  STARTMETHOD
  6915     5   189    12     5   164     0     111  CharSequence
  6916     5   189    25     5   164     0     111  subSequence
  6917     5   189    36     5   164     0      59  (
  6918     5   189    37     5   164     0      36  int
  6919     5   189    41     5   164     0     111  start
  6920     5   189    46     5   164     0      66  ,
  6921     5   189    48     5   164     0      36  int
  6922     5   189    52     5   164     0     111  end
  6923     5   189    55     5   164     0      60  )
  6924     5   189    57     5   164     0      63  {
  6925     5   190     9     5   164     1      36  int
  6926     5   190    13     5   164     1     111  pos
  6927     5   190    17     5   164     1      67  =
  6928     5   190    19     5   164     1     111  position
  6929     5   190    27     5   164     1      59  (
  6930     5   190    28     5   164     1      60  )
  6931     5   190    29     5   164     1     102  ;
  6932     5   191     9     5   164     1      36  int
  6933     5   191    13     5   164     1     111  lim
  6934     5   191    17     5   164     1      67  =
  6935     5   191    19     5   164     1     111  limit
  6936     5   191    24     5   164     1      59  (
  6937     5   191    25     5   164     1      60  )
  6938     5   191    26     5   164     1     102  ;
  6939     5   192     9     5   164     0     111  assert
  6940     5   192    16     5   164     0      59  (
  6941     5   192    17     5   164     0     111  pos
  6942     5   192    21     5   164     0      92  <=
  6943     5   192    24     5   164     0     111  lim
  6944     5   192    27     5   164     0      60  )
  6945     5   192    28     5   164     0     102  ;
  6946     5   193     9     5   164     0     111  pos
  6947     5   193    13     5   164     0      67  =
  6948     5   193    15     5   164     0      59  (
  6949     5   193    16     5   164     0     111  pos
  6950     5   193    20     5   164     0      92  <=
  6951     5   193    23     5   164     0     111  lim
  6952     5   193    27     5   164     0      58  ?
  6953     5   193    29     5   164     0     111  pos
  6954     5   193    33     5   164     0      65  :
  6955     5   193    35     5   164     0     111  lim
  6956     5   193    38     5   164     0      60  )
  6957     5   193    39     5   164     0     102  ;
  6958     5   194     9     5   164     0      36  int
  6959     5   194    13     5   164     0     111  len
  6960     5   194    17     5   164     0      67  =
  6961     5   194    19     5   164     0     111  lim
  6962     5   194    23     5   164     0      77  -
  6963     5   194    25     5   164     0     111  pos
  6964     5   194    28     5   164     0     102  ;
  6965     5   196     9     5   164     0      31  if
  6966     5   196    12     5   164     0      59  (
  6967     5   196    13     5   164     0      59  (
  6968     5   196    14     5   164     0     111  start
  6969     5   196    20     5   164     0      93  <
  6970     5   196    22     5   164     0     112  0
  6971     5   196    23     5   164     0      60  )
  6972     5   196    25     5   164     0      98  ||
  6973     5   196    28     5   164     0      59  (
  6974     5   196    29     5   164     0     111  end
  6975     5   196    33     5   164     0      89  >
  6976     5   196    35     5   164     0     111  len
  6977     5   196    38     5   164     0      60  )
  6978     5   196    40     5   164     0      98  ||
  6979     5   196    43     5   164     0      59  (
  6980     5   196    44     5   164     0     111  start
  6981     5   196    50     5   164     0      89  >
  6982     5   196    52     5   164     0     111  end
  6983     5   196    55     5   164     0      60  )
  6984     5   196    56     5   164     0      60  )
  6985     5   197    13     5   164     0      20  throw
  6986     5   197    23     5   164     0     111  IndexOutOfBoundsException
  6987     5   197    48     5   164     0      59  (
  6988     5   197    49     5   164     0      60  )
  6989     5   197    50     5   164     0     102  ;
  6990     5   198     9     5   164     0      36  int
  6991     5   198    13     5   164     0     111  sublen
  6992     5   198    20     5   164     0      67  =
  6993     5   198    22     5   164     0     111  end
  6994     5   198    26     5   164     0      77  -
  6995     5   198    28     5   164     0     111  start
  6996     5   198    33     5   164     0     102  ;
  6997     5   199     9     5   164     0      36  int
  6998     5   199    13     5   164     0     111  off
  6999     5   199    17     5   164     0      67  =
  7000     5   199    19     5   164     0     111  offset
  7001     5   199    26     5   164     0      74  +
  7002     5   199    28     5   164     0      59  (
  7003     5   199    29     5   164     0      59  (
  7004     5   199    30     5   164     0     111  pos
  7005     5   199    34     5   164     0      74  +
  7006     5   199    36     5   164     0     111  start
  7007     5   199    41     5   164     0      60  )
  7008     5   199    43     5   164     0      90  <<
  7009     5   199    46     5   164     0     112  1
  7010     5   199    47     5   164     0      60  )
  7011     5   199    48     5   164     0     102  ;
  7012     5   200     9     5   164     0     111  assert
  7013     5   200    16     5   164     0      59  (
  7014     5   200    17     5   164     0     111  off
  7015     5   200    21     5   164     0      88  >=
  7016     5   200    24     5   164     0     112  0
  7017     5   200    25     5   164     0      60  )
  7018     5   200    26     5   164     0     102  ;
  7019     5   201     9     5   164     0      19  return
  7020     5   201    20     5   164     0     111  ByteBufferAsCharBufferB
  7021     5   201    43     5   164     0      59  (
  7022     5   201    44     5   164     0     111  bb
  7023     5   201    46     5   164     0      66  ,
  7024     5   201    48     5   164     0      77  -
  7025     5   201    49     5   164     0     112  1
  7026     5   201    50     5   164     0      66  ,
  7027     5   201    52     5   164     0     112  0
  7028     5   201    53     5   164     0      66  ,
  7029     5   201    55     5   164     0     111  sublen
  7030     5   201    61     5   164     0      66  ,
  7031     5   201    63     5   164     0     111  sublen
  7032     5   201    69     5   164     0      66  ,
  7033     5   201    71     5   164     0     111  off
  7034     5   201    74     5   164     0      60  )
  7035     5   201    75     5   164     0     102  ;
  7036     5   202     5     5   164     0      64  }
  7037     5   202     5     5   164     0     472  ENDMETHOD
  7038     5   202     5     5   165     0     473  STARTMETHOD
  7039     5   207    12     5   165     0     111  ByteOrder
  7040     5   207    22     5   165     0     111  order
  7041     5   207    27     5   165     0      59  (
  7042     5   207    28     5   165     0      60  )
  7043     5   207    30     5   165     0      63  {
  7044     5   209     9     5   165     0      19  return
  7045     5   209    16     5   165     0     111  ByteOrder.BIG_ENDIAN
  7046     5   209    36     5   165     0     102  ;
  7047     5   214     5     5   165     0      64  }
  7048     5   214     5     5   165     0     474  ENDMETHOD
  7049     5   216     1     5    -1     0      64  }
  7050     5   216     1     5    -1     1     475  ENDCLASS
  7051     5   216     1    -1    -1     1     476  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsCharBufferB.java
  7052     6     1     1    -1    -1     1     477  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsCharBufferL.java
  7053     6    28     9    -1    -1     0     111  java.nio
  7054     6    28    17    -1    -1     0     102  ;
  7055     6    31     1     6    -1     0     478  STARTCLASS
  7056     6    31     1     6    -1     0      24  class
  7057     6    31     7     6    -1     0     111  ByteBufferAsCharBufferL
  7058     6    32     5     6    -1     0      38  extends
  7059     6    32    13     6    -1     0     111  CharBuffer
  7060     6    33     1     6    -1     0      63  {
  7061     6    37     5     6    -1     0      23  protected
  7062     6    37    21     6    -1     0     111  ByteBuffer
  7063     6    37    32     6    -1     0     111  bb
  7064     6    37    34     6    -1     0     102  ;
  7065     6    38     5     6    -1     0      23  protected
  7066     6    38    21     6    -1     0      36  int
  7067     6    38    25     6    -1     0     111  offset
  7068     6    38    31     6    -1     0     102  ;
  7069     6    38    31     6   166     0     479  STARTMETHOD
  7070     6    42     5     6   166     0     111  ByteBufferAsCharBufferL
  7071     6    42    28     6   166     0      59  (
  7072     6    42    29     6   166     0     111  ByteBuffer
  7073     6    42    40     6   166     0     111  bb
  7074     6    42    42     6   166     0      60  )
  7075     6    42    44     6   166     0      63  {
  7076     6    44     9     6   166     0      27  super
  7077     6    44    14     6   166     0      59  (
  7078     6    44    15     6   166     0      77  -
  7079     6    44    16     6   166     0     112  1
  7080     6    44    17     6   166     0      66  ,
  7081     6    44    19     6   166     0     112  0
  7082     6    44    20     6   166     0      66  ,
  7083     6    45    15     6   166     0     111  bb.remaining
  7084     6    45    27     6   166     0      59  (
  7085     6    45    28     6   166     0      60  )
  7086     6    45    30     6   166     0      84  >>
  7087     6    45    33     6   166     0     112  1
  7088     6    45    34     6   166     0      66  ,
  7089     6    46    15     6   166     0     111  bb.remaining
  7090     6    46    27     6   166     0      59  (
  7091     6    46    28     6   166     0      60  )
  7092     6    46    30     6   166     0      84  >>
  7093     6    46    33     6   166     0     112  1
  7094     6    46    34     6   166     0      60  )
  7095     6    46    35     6   166     0     102  ;
  7096     6    47     9     6   166     0     111  this.bb
  7097     6    47    17     6   166     0      67  =
  7098     6    47    19     6   166     0     111  bb
  7099     6    47    21     6   166     0     102  ;
  7100     6    49     9     6   166     0      36  int
  7101     6    49    13     6   166     0     111  cap
  7102     6    49    17     6   166     0      67  =
  7103     6    49    19     6   166     0     111  this.capacity
  7104     6    49    32     6   166     0      59  (
  7105     6    49    33     6   166     0      60  )
  7106     6    49    34     6   166     0     102  ;
  7107     6    50     9     6   166     0     111  this.limit
  7108     6    50    19     6   166     0      59  (
  7109     6    50    20     6   166     0     111  cap
  7110     6    50    23     6   166     0      60  )
  7111     6    50    24     6   166     0     102  ;
  7112     6    51     9     6   166     0      36  int
  7113     6    51    13     6   166     0     111  pos
  7114     6    51    17     6   166     0      67  =
  7115     6    51    19     6   166     0     111  this.position
  7116     6    51    32     6   166     0      59  (
  7117     6    51    33     6   166     0      60  )
  7118     6    51    34     6   166     0     102  ;
  7119     6    52     9     6   166     0     111  assert
  7120     6    52    16     6   166     0      59  (
  7121     6    52    17     6   166     0     111  pos
  7122     6    52    21     6   166     0      92  <=
  7123     6    52    24     6   166     0     111  cap
  7124     6    52    27     6   166     0      60  )
  7125     6    52    28     6   166     0     102  ;
  7126     6    53     9     6   166     0     111  offset
  7127     6    53    16     6   166     0      67  =
  7128     6    53    18     6   166     0     111  pos
  7129     6    53    21     6   166     0     102  ;
  7130     6    57     5     6   166     0      64  }
  7131     6    57     5     6   166     0     480  ENDMETHOD
  7132     6    57     5     6   167     0     481  STARTMETHOD
  7133     6    59     5     6   167     0     111  ByteBufferAsCharBufferL
  7134     6    59    28     6   167     0      59  (
  7135     6    59    29     6   167     0     111  ByteBuffer
  7136     6    59    40     6   167     0     111  bb
  7137     6    59    42     6   167     0      66  ,
  7138     6    60    38     6   167     0      36  int
  7139     6    60    42     6   167     0     111  mark
  7140     6    60    46     6   167     0      66  ,
  7141     6    60    48     6   167     0      36  int
  7142     6    60    52     6   167     0     111  pos
  7143     6    60    55     6   167     0      66  ,
  7144     6    60    57     6   167     0      36  int
  7145     6    60    61     6   167     0     111  lim
  7146     6    60    64     6   167     0      66  ,
  7147     6    60    66     6   167     0      36  int
  7148     6    60    70     6   167     0     111  cap
  7149     6    60    73     6   167     0      66  ,
  7150     6    61    38     6   167     0      36  int
  7151     6    61    42     6   167     0     111  off
  7152     6    61    45     6   167     0      60  )
  7153     6    62     5     6   167     0      63  {
  7154     6    64     9     6   167     0      27  super
  7155     6    64    14     6   167     0      59  (
  7156     6    64    15     6   167     0     111  mark
  7157     6    64    19     6   167     0      66  ,
  7158     6    64    21     6   167     0     111  pos
  7159     6    64    24     6   167     0      66  ,
  7160     6    64    26     6   167     0     111  lim
  7161     6    64    29     6   167     0      66  ,
  7162     6    64    31     6   167     0     111  cap
  7163     6    64    34     6   167     0      60  )
  7164     6    64    35     6   167     0     102  ;
  7165     6    65     9     6   167     1     111  this.bb
  7166     6    65    17     6   167     1      67  =
  7167     6    65    19     6   167     1     111  bb
  7168     6    65    21     6   167     1     102  ;
  7169     6    66     9     6   167     1     111  offset
  7170     6    66    16     6   167     1      67  =
  7171     6    66    18     6   167     1     111  off
  7172     6    66    21     6   167     1     102  ;
  7173     6    70     5     6   167     0      64  }
  7174     6    70     5     6   167     0     482  ENDMETHOD
  7175     6    70     5     6   168     0     483  STARTMETHOD
  7176     6    72    12     6   168     0     111  CharBuffer
  7177     6    72    23     6   168     0     111  slice
  7178     6    72    28     6   168     0      59  (
  7179     6    72    29     6   168     0      60  )
  7180     6    72    31     6   168     0      63  {
  7181     6    73     9     6   168     1      36  int
  7182     6    73    13     6   168     1     111  pos
  7183     6    73    17     6   168     1      67  =
  7184     6    73    19     6   168     1     111  this.position
  7185     6    73    32     6   168     1      59  (
  7186     6    73    33     6   168     1      60  )
  7187     6    73    34     6   168     1     102  ;
  7188     6    74     9     6   168     1      36  int
  7189     6    74    13     6   168     1     111  lim
  7190     6    74    17     6   168     1      67  =
  7191     6    74    19     6   168     1     111  this.limit
  7192     6    74    29     6   168     1      59  (
  7193     6    74    30     6   168     1      60  )
  7194     6    74    31     6   168     1     102  ;
  7195     6    75     9     6   168     0     111  assert
  7196     6    75    16     6   168     0      59  (
  7197     6    75    17     6   168     0     111  pos
  7198     6    75    21     6   168     0      92  <=
  7199     6    75    24     6   168     0     111  lim
  7200     6    75    27     6   168     0      60  )
  7201     6    75    28     6   168     0     102  ;
  7202     6    76     9     6   168     0      36  int
  7203     6    76    13     6   168     0     111  rem
  7204     6    76    17     6   168     0      67  =
  7205     6    76    19     6   168     0      59  (
  7206     6    76    20     6   168     0     111  pos
  7207     6    76    24     6   168     0      92  <=
  7208     6    76    27     6   168     0     111  lim
  7209     6    76    31     6   168     0      58  ?
  7210     6    76    33     6   168     0     111  lim
  7211     6    76    37     6   168     0      77  -
  7212     6    76    39     6   168     0     111  pos
  7213     6    76    43     6   168     0      65  :
  7214     6    76    45     6   168     0     112  0
  7215     6    76    46     6   168     0      60  )
  7216     6    76    47     6   168     0     102  ;
  7217     6    77     9     6   168     0      36  int
  7218     6    77    13     6   168     0     111  off
  7219     6    77    17     6   168     0      67  =
  7220     6    77    19     6   168     0      59  (
  7221     6    77    20     6   168     0     111  pos
  7222     6    77    24     6   168     0      90  <<
  7223     6    77    27     6   168     0     112  1
  7224     6    77    28     6   168     0      60  )
  7225     6    77    30     6   168     0      74  +
  7226     6    77    32     6   168     0     111  offset
  7227     6    77    38     6   168     0     102  ;
  7228     6    78     9     6   168     0     111  assert
  7229     6    78    16     6   168     0      59  (
  7230     6    78    17     6   168     0     111  off
  7231     6    78    21     6   168     0      88  >=
  7232     6    78    24     6   168     0     112  0
  7233     6    78    25     6   168     0      60  )
  7234     6    78    26     6   168     0     102  ;
  7235     6    79     9     6   168     0      19  return
  7236     6    79    20     6   168     0     111  ByteBufferAsCharBufferL
  7237     6    79    43     6   168     0      59  (
  7238     6    79    44     6   168     0     111  bb
  7239     6    79    46     6   168     0      66  ,
  7240     6    79    48     6   168     0      77  -
  7241     6    79    49     6   168     0     112  1
  7242     6    79    50     6   168     0      66  ,
  7243     6    79    52     6   168     0     112  0
  7244     6    79    53     6   168     0      66  ,
  7245     6    79    55     6   168     0     111  rem
  7246     6    79    58     6   168     0      66  ,
  7247     6    79    60     6   168     0     111  rem
  7248     6    79    63     6   168     0      66  ,
  7249     6    79    65     6   168     0     111  off
  7250     6    79    68     6   168     0      60  )
  7251     6    79    69     6   168     0     102  ;
  7252     6    80     5     6   168     0      64  }
  7253     6    80     5     6   168     0     484  ENDMETHOD
  7254     6    80     5     6   169     0     485  STARTMETHOD
  7255     6    82    12     6   169     0     111  CharBuffer
  7256     6    82    23     6   169     0     111  duplicate
  7257     6    82    32     6   169     0      59  (
  7258     6    82    33     6   169     0      60  )
  7259     6    82    35     6   169     0      63  {
  7260     6    83     9     6   169     0      19  return
  7261     6    83    20     6   169     0     111  ByteBufferAsCharBufferL
  7262     6    83    43     6   169     0      59  (
  7263     6    83    44     6   169     0     111  bb
  7264     6    83    46     6   169     0      66  ,
  7265     6    84    53     6   169     1     111  this.markValue
  7266     6    84    67     6   169     1      59  (
  7267     6    84    68     6   169     1      60  )
  7268     6    84    69     6   169     1      66  ,
  7269     6    85    53     6   169     1     111  this.position
  7270     6    85    66     6   169     1      59  (
  7271     6    85    67     6   169     1      60  )
  7272     6    85    68     6   169     1      66  ,
  7273     6    86    53     6   169     1     111  this.limit
  7274     6    86    63     6   169     1      59  (
  7275     6    86    64     6   169     1      60  )
  7276     6    86    65     6   169     1      66  ,
  7277     6    87    53     6   169     1     111  this.capacity
  7278     6    87    66     6   169     1      59  (
  7279     6    87    67     6   169     1      60  )
  7280     6    87    68     6   169     1      66  ,
  7281     6    88    53     6   169     0     111  offset
  7282     6    88    59     6   169     0      60  )
  7283     6    88    60     6   169     0     102  ;
  7284     6    89     5     6   169     0      64  }
  7285     6    89     5     6   169     0     486  ENDMETHOD
  7286     6    89     5     6   170     0     487  STARTMETHOD
  7287     6    91    12     6   170     0     111  CharBuffer
  7288     6    91    23     6   170     0     111  asReadOnlyBuffer
  7289     6    91    39     6   170     0      59  (
  7290     6    91    40     6   170     0      60  )
  7291     6    91    42     6   170     0      63  {
  7292     6    93     9     6   170     0      19  return
  7293     6    93    20     6   170     0     111  ByteBufferAsCharBufferRL
  7294     6    93    44     6   170     0      59  (
  7295     6    93    45     6   170     0     111  bb
  7296     6    93    47     6   170     0      66  ,
  7297     6    94    50     6   170     1     111  this.markValue
  7298     6    94    64     6   170     1      59  (
  7299     6    94    65     6   170     1      60  )
  7300     6    94    66     6   170     1      66  ,
  7301     6    95    50     6   170     1     111  this.position
  7302     6    95    63     6   170     1      59  (
  7303     6    95    64     6   170     1      60  )
  7304     6    95    65     6   170     1      66  ,
  7305     6    96    50     6   170     1     111  this.limit
  7306     6    96    60     6   170     1      59  (
  7307     6    96    61     6   170     1      60  )
  7308     6    96    62     6   170     1      66  ,
  7309     6    97    50     6   170     1     111  this.capacity
  7310     6    97    63     6   170     1      59  (
  7311     6    97    64     6   170     1      60  )
  7312     6    97    65     6   170     1      66  ,
  7313     6    98    50     6   170     0     111  offset
  7314     6    98    56     6   170     0      60  )
  7315     6    98    57     6   170     0     102  ;
  7316     6   102     5     6   170     0      64  }
  7317     6   102     5     6   170     0     488  ENDMETHOD
  7318     6   102     5     6   171     0     489  STARTMETHOD
  7319     6   106     5     6   171     0      23  protected
  7320     6   106    15     6   171     0      36  int
  7321     6   106    19     6   171     0     111  ix
  7322     6   106    21     6   171     0      59  (
  7323     6   106    22     6   171     0      36  int
  7324     6   106    26     6   171     0     111  i
  7325     6   106    27     6   171     0      60  )
  7326     6   106    29     6   171     0      63  {
  7327     6   107     9     6   171     0      19  return
  7328     6   107    16     6   171     0      59  (
  7329     6   107    17     6   171     0     111  i
  7330     6   107    19     6   171     0      90  <<
  7331     6   107    22     6   171     0     112  1
  7332     6   107    23     6   171     0      60  )
  7333     6   107    25     6   171     0      74  +
  7334     6   107    27     6   171     0     111  offset
  7335     6   107    33     6   171     0     102  ;
  7336     6   108     5     6   171     0      64  }
  7337     6   108     5     6   171     0     490  ENDMETHOD
  7338     6   108     5     6   172     0     491  STARTMETHOD
  7339     6   110    12     6   172     0      40  char
  7340     6   110    17     6   172     0     111  get
  7341     6   110    20     6   172     0      59  (
  7342     6   110    21     6   172     0      60  )
  7343     6   110    23     6   172     0      63  {
  7344     6   111     9     6   172     0      19  return
  7345     6   111    16     6   172     0     111  Bits.getCharL
  7346     6   111    29     6   172     0      59  (
  7347     6   111    30     6   172     0     111  bb
  7348     6   111    32     6   172     0      66  ,
  7349     6   111    34     6   172     0     111  ix
  7350     6   111    36     6   172     0      59  (
  7351     6   111    37     6   172     0     111  nextGetIndex
  7352     6   111    49     6   172     0      59  (
  7353     6   111    50     6   172     0      60  )
  7354     6   111    51     6   172     0      60  )
  7355     6   111    52     6   172     0      60  )
  7356     6   111    53     6   172     0     102  ;
  7357     6   112     5     6   172     0      64  }
  7358     6   112     5     6   172     0     492  ENDMETHOD
  7359     6   112     5     6   173     0     493  STARTMETHOD
  7360     6   114    12     6   173     0      40  char
  7361     6   114    17     6   173     0     111  get
  7362     6   114    20     6   173     0      59  (
  7363     6   114    21     6   173     0      36  int
  7364     6   114    25     6   173     0     111  i
  7365     6   114    26     6   173     0      60  )
  7366     6   114    28     6   173     0      63  {
  7367     6   115     9     6   173     0      19  return
  7368     6   115    16     6   173     0     111  Bits.getCharL
  7369     6   115    29     6   173     0      59  (
  7370     6   115    30     6   173     0     111  bb
  7371     6   115    32     6   173     0      66  ,
  7372     6   115    34     6   173     0     111  ix
  7373     6   115    36     6   173     0      59  (
  7374     6   115    37     6   173     0     111  checkIndex
  7375     6   115    47     6   173     0      59  (
  7376     6   115    48     6   173     0     111  i
  7377     6   115    49     6   173     0      60  )
  7378     6   115    50     6   173     0      60  )
  7379     6   115    51     6   173     0      60  )
  7380     6   115    52     6   173     0     102  ;
  7381     6   116     5     6   173     0      64  }
  7382     6   116     5     6   173     0     494  ENDMETHOD
  7383     6   116     5     6   174     0     495  STARTMETHOD
  7384     6   120    12     6   174     0     111  CharBuffer
  7385     6   120    23     6   174     0     111  put
  7386     6   120    26     6   174     0      59  (
  7387     6   120    27     6   174     0      40  char
  7388     6   120    32     6   174     0     111  x
  7389     6   120    33     6   174     0      60  )
  7390     6   120    35     6   174     0      63  {
  7391     6   122     9     6   174     0     111  Bits.putCharL
  7392     6   122    22     6   174     0      59  (
  7393     6   122    23     6   174     0     111  bb
  7394     6   122    25     6   174     0      66  ,
  7395     6   122    27     6   174     0     111  ix
  7396     6   122    29     6   174     0      59  (
  7397     6   122    30     6   174     0     111  nextPutIndex
  7398     6   122    42     6   174     0      59  (
  7399     6   122    43     6   174     0      60  )
  7400     6   122    44     6   174     0      60  )
  7401     6   122    45     6   174     0      66  ,
  7402     6   122    47     6   174     0     111  x
  7403     6   122    48     6   174     0      60  )
  7404     6   122    49     6   174     0     102  ;
  7405     6   123     9     6   174     0      19  return
  7406     6   123    16     6   174     0      44  this
  7407     6   123    20     6   174     0     102  ;
  7408     6   127     5     6   174     0      64  }
  7409     6   127     5     6   174     0     496  ENDMETHOD
  7410     6   127     5     6   175     0     497  STARTMETHOD
  7411     6   129    12     6   175     0     111  CharBuffer
  7412     6   129    23     6   175     0     111  put
  7413     6   129    26     6   175     0      59  (
  7414     6   129    27     6   175     0      36  int
  7415     6   129    31     6   175     0     111  i
  7416     6   129    32     6   175     0      66  ,
  7417     6   129    34     6   175     0      40  char
  7418     6   129    39     6   175     0     111  x
  7419     6   129    40     6   175     0      60  )
  7420     6   129    42     6   175     0      63  {
  7421     6   131     9     6   175     0     111  Bits.putCharL
  7422     6   131    22     6   175     0      59  (
  7423     6   131    23     6   175     0     111  bb
  7424     6   131    25     6   175     0      66  ,
  7425     6   131    27     6   175     0     111  ix
  7426     6   131    29     6   175     0      59  (
  7427     6   131    30     6   175     0     111  checkIndex
  7428     6   131    40     6   175     0      59  (
  7429     6   131    41     6   175     0     111  i
  7430     6   131    42     6   175     0      60  )
  7431     6   131    43     6   175     0      60  )
  7432     6   131    44     6   175     0      66  ,
  7433     6   131    46     6   175     0     111  x
  7434     6   131    47     6   175     0      60  )
  7435     6   131    48     6   175     0     102  ;
  7436     6   132     9     6   175     0      19  return
  7437     6   132    16     6   175     0      44  this
  7438     6   132    20     6   175     0     102  ;
  7439     6   136     5     6   175     0      64  }
  7440     6   136     5     6   175     0     498  ENDMETHOD
  7441     6   136     5     6   176     0     499  STARTMETHOD
  7442     6   138    12     6   176     0     111  CharBuffer
  7443     6   138    23     6   176     0     111  compact
  7444     6   138    30     6   176     0      59  (
  7445     6   138    31     6   176     0      60  )
  7446     6   138    33     6   176     0      63  {
  7447     6   140     9     6   176     1      36  int
  7448     6   140    13     6   176     1     111  pos
  7449     6   140    17     6   176     1      67  =
  7450     6   140    19     6   176     1     111  position
  7451     6   140    27     6   176     1      59  (
  7452     6   140    28     6   176     1      60  )
  7453     6   140    29     6   176     1     102  ;
  7454     6   141     9     6   176     1      36  int
  7455     6   141    13     6   176     1     111  lim
  7456     6   141    17     6   176     1      67  =
  7457     6   141    19     6   176     1     111  limit
  7458     6   141    24     6   176     1      59  (
  7459     6   141    25     6   176     1      60  )
  7460     6   141    26     6   176     1     102  ;
  7461     6   142     9     6   176     0     111  assert
  7462     6   142    16     6   176     0      59  (
  7463     6   142    17     6   176     0     111  pos
  7464     6   142    21     6   176     0      92  <=
  7465     6   142    24     6   176     0     111  lim
  7466     6   142    27     6   176     0      60  )
  7467     6   142    28     6   176     0     102  ;
  7468     6   143     9     6   176     0      36  int
  7469     6   143    13     6   176     0     111  rem
  7470     6   143    17     6   176     0      67  =
  7471     6   143    19     6   176     0      59  (
  7472     6   143    20     6   176     0     111  pos
  7473     6   143    24     6   176     0      92  <=
  7474     6   143    27     6   176     0     111  lim
  7475     6   143    31     6   176     0      58  ?
  7476     6   143    33     6   176     0     111  lim
  7477     6   143    37     6   176     0      77  -
  7478     6   143    39     6   176     0     111  pos
  7479     6   143    43     6   176     0      65  :
  7480     6   143    45     6   176     0     112  0
  7481     6   143    46     6   176     0      60  )
  7482     6   143    47     6   176     0     102  ;
  7483     6   145     9     6   176     0     111  ByteBuffer
  7484     6   145    20     6   176     0     111  db
  7485     6   145    23     6   176     0      67  =
  7486     6   145    25     6   176     0     111  bb.duplicate
  7487     6   145    37     6   176     0      59  (
  7488     6   145    38     6   176     0      60  )
  7489     6   145    39     6   176     0     102  ;
  7490     6   146     9     6   176     0     111  db.limit
  7491     6   146    17     6   176     0      59  (
  7492     6   146    18     6   176     0     111  ix
  7493     6   146    20     6   176     0      59  (
  7494     6   146    21     6   176     0     111  lim
  7495     6   146    24     6   176     0      60  )
  7496     6   146    25     6   176     0      60  )
  7497     6   146    26     6   176     0     102  ;
  7498     6   147     9     6   176     0     111  db.position
  7499     6   147    20     6   176     0      59  (
  7500     6   147    21     6   176     0     111  ix
  7501     6   147    23     6   176     0      59  (
  7502     6   147    24     6   176     0     112  0
  7503     6   147    25     6   176     0      60  )
  7504     6   147    26     6   176     0      60  )
  7505     6   147    27     6   176     0     102  ;
  7506     6   148     9     6   176     0     111  ByteBuffer
  7507     6   148    20     6   176     0     111  sb
  7508     6   148    23     6   176     0      67  =
  7509     6   148    25     6   176     0     111  db.slice
  7510     6   148    33     6   176     0      59  (
  7511     6   148    34     6   176     0      60  )
  7512     6   148    35     6   176     0     102  ;
  7513     6   149     9     6   176     0     111  sb.position
  7514     6   149    20     6   176     0      59  (
  7515     6   149    21     6   176     0     111  pos
  7516     6   149    25     6   176     0      90  <<
  7517     6   149    28     6   176     0     112  1
  7518     6   149    29     6   176     0      60  )
  7519     6   149    30     6   176     0     102  ;
  7520     6   150     9     6   176     0     111  sb.compact
  7521     6   150    19     6   176     0      59  (
  7522     6   150    20     6   176     0      60  )
  7523     6   150    21     6   176     0     102  ;
  7524     6   151     9     6   176     0     111  position
  7525     6   151    17     6   176     0      59  (
  7526     6   151    18     6   176     0     111  rem
  7527     6   151    21     6   176     0      60  )
  7528     6   151    22     6   176     0     102  ;
  7529     6   152     9     6   176     0     111  limit
  7530     6   152    14     6   176     0      59  (
  7531     6   152    15     6   176     0     111  capacity
  7532     6   152    23     6   176     0      59  (
  7533     6   152    24     6   176     0      60  )
  7534     6   152    25     6   176     0      60  )
  7535     6   152    26     6   176     0     102  ;
  7536     6   153     9     6   176     0      19  return
  7537     6   153    16     6   176     0      44  this
  7538     6   153    20     6   176     0     102  ;
  7539     6   157     5     6   176     0      64  }
  7540     6   157     5     6   176     0     500  ENDMETHOD
  7541     6   157     5     6   177     0     501  STARTMETHOD
  7542     6   159    12     6   177     0      39  boolean
  7543     6   159    20     6   177     0     111  isDirect
  7544     6   159    28     6   177     0      59  (
  7545     6   159    29     6   177     0      60  )
  7546     6   159    31     6   177     0      63  {
  7547     6   160     9     6   177     0      19  return
  7548     6   160    16     6   177     0     111  bb.isDirect
  7549     6   160    27     6   177     0      59  (
  7550     6   160    28     6   177     0      60  )
  7551     6   160    29     6   177     0     102  ;
  7552     6   161     5     6   177     0      64  }
  7553     6   161     5     6   177     0     502  ENDMETHOD
  7554     6   161     5     6   178     0     503  STARTMETHOD
  7555     6   163    12     6   178     0      39  boolean
  7556     6   163    20     6   178     0     111  isReadOnly
  7557     6   163    30     6   178     0      59  (
  7558     6   163    31     6   178     0      60  )
  7559     6   163    33     6   178     0      63  {
  7560     6   164     9     6   178     0      19  return
  7561     6   164    16     6   178     0      43  false
  7562     6   164    21     6   178     0     102  ;
  7563     6   165     5     6   178     0      64  }
  7564     6   165     5     6   178     0     504  ENDMETHOD
  7565     6   165     5     6   179     0     505  STARTMETHOD
  7566     6   169    12     6   179     0     111  String
  7567     6   169    19     6   179     0     111  toString
  7568     6   169    27     6   179     0      59  (
  7569     6   169    28     6   179     0      36  int
  7570     6   169    32     6   179     0     111  start
  7571     6   169    37     6   179     0      66  ,
  7572     6   169    39     6   179     0      36  int
  7573     6   169    43     6   179     0     111  end
  7574     6   169    46     6   179     0      60  )
  7575     6   169    48     6   179     0      63  {
  7576     6   170     9     6   179     0      31  if
  7577     6   170    12     6   179     0      59  (
  7578     6   170    13     6   179     0      59  (
  7579     6   170    14     6   179     0     111  end
  7580     6   170    18     6   179     0      89  >
  7581     6   170    20     6   179     0     111  limit
  7582     6   170    25     6   179     0      59  (
  7583     6   170    26     6   179     0      60  )
  7584     6   170    27     6   179     0      60  )
  7585     6   170    29     6   179     0      98  ||
  7586     6   170    32     6   179     0      59  (
  7587     6   170    33     6   179     0     111  start
  7588     6   170    39     6   179     0      89  >
  7589     6   170    41     6   179     0     111  end
  7590     6   170    44     6   179     0      60  )
  7591     6   170    45     6   179     0      60  )
  7592     6   171    13     6   179     0      20  throw
  7593     6   171    23     6   179     0     111  IndexOutOfBoundsException
  7594     6   171    48     6   179     0      59  (
  7595     6   171    49     6   179     0      60  )
  7596     6   171    50     6   179     0     102  ;
  7597     6   172     9     6   179     0      35  try
  7598     6   172    13     6   179     0      63  {
  7599     6   173    13     6   179     0      36  int
  7600     6   173    17     6   179     0     111  len
  7601     6   173    21     6   179     0      67  =
  7602     6   173    23     6   179     0     111  end
  7603     6   173    27     6   179     0      77  -
  7604     6   173    29     6   179     0     111  start
  7605     6   173    34     6   179     0     102  ;
  7606     6   174    13     6   179     0      40  char
  7607     6   174    17     6   179     0      61  [
  7608     6   174    18     6   179     0      62  ]
  7609     6   174    20     6   179     0     111  ca
  7610     6   174    23     6   179     0      67  =
  7611     6   174    29     6   179     0      40  char
  7612     6   174    33     6   179     0      61  [
  7613     6   174    34     6   179     0     111  len
  7614     6   174    37     6   179     0      62  ]
  7615     6   174    38     6   179     0     102  ;
  7616     6   175    13     6   179     0     111  CharBuffer
  7617     6   175    24     6   179     0     111  cb
  7618     6   175    27     6   179     0      67  =
  7619     6   175    29     6   179     0     111  CharBuffer.wrap
  7620     6   175    44     6   179     0      59  (
  7621     6   175    45     6   179     0     111  ca
  7622     6   175    47     6   179     0      60  )
  7623     6   175    48     6   179     0     102  ;
  7624     6   176    13     6   179     0     111  CharBuffer
  7625     6   176    24     6   179     0     111  db
  7626     6   176    27     6   179     0      67  =
  7627     6   176    29     6   179     0     111  this.duplicate
  7628     6   176    43     6   179     0      59  (
  7629     6   176    44     6   179     0      60  )
  7630     6   176    45     6   179     0     102  ;
  7631     6   177    13     6   179     1     111  db.position
  7632     6   177    24     6   179     1      59  (
  7633     6   177    25     6   179     1     111  start
  7634     6   177    30     6   179     1      60  )
  7635     6   177    31     6   179     1     102  ;
  7636     6   178    13     6   179     1     111  db.limit
  7637     6   178    21     6   179     1      59  (
  7638     6   178    22     6   179     1     111  end
  7639     6   178    25     6   179     1      60  )
  7640     6   178    26     6   179     1     102  ;
  7641     6   179    13     6   179     1     111  cb.put
  7642     6   179    19     6   179     1      59  (
  7643     6   179    20     6   179     1     111  db
  7644     6   179    22     6   179     1      60  )
  7645     6   179    23     6   179     1     102  ;
  7646     6   180    13     6   179     0      19  return
  7647     6   180    24     6   179     0     111  String
  7648     6   180    30     6   179     0      59  (
  7649     6   180    31     6   179     0     111  ca
  7650     6   180    33     6   179     0      60  )
  7651     6   180    34     6   179     0     102  ;
  7652     6   181     9     6   179     0      64  }
  7653     6   181    11     6   179     0      34  catch
  7654     6   181    17     6   179     0      59  (
  7655     6   181    18     6   179     0     111  StringIndexOutOfBoundsException
  7656     6   181    50     6   179     0     111  x
  7657     6   181    51     6   179     0      60  )
  7658     6   181    53     6   179     0      63  {
  7659     6   182    13     6   179     0      20  throw
  7660     6   182    23     6   179     0     111  IndexOutOfBoundsException
  7661     6   182    48     6   179     0      59  (
  7662     6   182    49     6   179     0      60  )
  7663     6   182    50     6   179     0     102  ;
  7664     6   183     9     6   179     0      64  }
  7665     6   184     5     6   179     0      64  }
  7666     6   184     5     6   179     0     506  ENDMETHOD
  7667     6   184     5     6   180     0     507  STARTMETHOD
  7668     6   189    12     6   180     0     111  CharSequence
  7669     6   189    25     6   180     0     111  subSequence
  7670     6   189    36     6   180     0      59  (
  7671     6   189    37     6   180     0      36  int
  7672     6   189    41     6   180     0     111  start
  7673     6   189    46     6   180     0      66  ,
  7674     6   189    48     6   180     0      36  int
  7675     6   189    52     6   180     0     111  end
  7676     6   189    55     6   180     0      60  )
  7677     6   189    57     6   180     0      63  {
  7678     6   190     9     6   180     1      36  int
  7679     6   190    13     6   180     1     111  pos
  7680     6   190    17     6   180     1      67  =
  7681     6   190    19     6   180     1     111  position
  7682     6   190    27     6   180     1      59  (
  7683     6   190    28     6   180     1      60  )
  7684     6   190    29     6   180     1     102  ;
  7685     6   191     9     6   180     1      36  int
  7686     6   191    13     6   180     1     111  lim
  7687     6   191    17     6   180     1      67  =
  7688     6   191    19     6   180     1     111  limit
  7689     6   191    24     6   180     1      59  (
  7690     6   191    25     6   180     1      60  )
  7691     6   191    26     6   180     1     102  ;
  7692     6   192     9     6   180     0     111  assert
  7693     6   192    16     6   180     0      59  (
  7694     6   192    17     6   180     0     111  pos
  7695     6   192    21     6   180     0      92  <=
  7696     6   192    24     6   180     0     111  lim
  7697     6   192    27     6   180     0      60  )
  7698     6   192    28     6   180     0     102  ;
  7699     6   193     9     6   180     0     111  pos
  7700     6   193    13     6   180     0      67  =
  7701     6   193    15     6   180     0      59  (
  7702     6   193    16     6   180     0     111  pos
  7703     6   193    20     6   180     0      92  <=
  7704     6   193    23     6   180     0     111  lim
  7705     6   193    27     6   180     0      58  ?
  7706     6   193    29     6   180     0     111  pos
  7707     6   193    33     6   180     0      65  :
  7708     6   193    35     6   180     0     111  lim
  7709     6   193    38     6   180     0      60  )
  7710     6   193    39     6   180     0     102  ;
  7711     6   194     9     6   180     0      36  int
  7712     6   194    13     6   180     0     111  len
  7713     6   194    17     6   180     0      67  =
  7714     6   194    19     6   180     0     111  lim
  7715     6   194    23     6   180     0      77  -
  7716     6   194    25     6   180     0     111  pos
  7717     6   194    28     6   180     0     102  ;
  7718     6   196     9     6   180     0      31  if
  7719     6   196    12     6   180     0      59  (
  7720     6   196    13     6   180     0      59  (
  7721     6   196    14     6   180     0     111  start
  7722     6   196    20     6   180     0      93  <
  7723     6   196    22     6   180     0     112  0
  7724     6   196    23     6   180     0      60  )
  7725     6   196    25     6   180     0      98  ||
  7726     6   196    28     6   180     0      59  (
  7727     6   196    29     6   180     0     111  end
  7728     6   196    33     6   180     0      89  >
  7729     6   196    35     6   180     0     111  len
  7730     6   196    38     6   180     0      60  )
  7731     6   196    40     6   180     0      98  ||
  7732     6   196    43     6   180     0      59  (
  7733     6   196    44     6   180     0     111  start
  7734     6   196    50     6   180     0      89  >
  7735     6   196    52     6   180     0     111  end
  7736     6   196    55     6   180     0      60  )
  7737     6   196    56     6   180     0      60  )
  7738     6   197    13     6   180     0      20  throw
  7739     6   197    23     6   180     0     111  IndexOutOfBoundsException
  7740     6   197    48     6   180     0      59  (
  7741     6   197    49     6   180     0      60  )
  7742     6   197    50     6   180     0     102  ;
  7743     6   198     9     6   180     0      36  int
  7744     6   198    13     6   180     0     111  sublen
  7745     6   198    20     6   180     0      67  =
  7746     6   198    22     6   180     0     111  end
  7747     6   198    26     6   180     0      77  -
  7748     6   198    28     6   180     0     111  start
  7749     6   198    33     6   180     0     102  ;
  7750     6   199     9     6   180     0      36  int
  7751     6   199    13     6   180     0     111  off
  7752     6   199    17     6   180     0      67  =
  7753     6   199    19     6   180     0     111  offset
  7754     6   199    26     6   180     0      74  +
  7755     6   199    28     6   180     0      59  (
  7756     6   199    29     6   180     0      59  (
  7757     6   199    30     6   180     0     111  pos
  7758     6   199    34     6   180     0      74  +
  7759     6   199    36     6   180     0     111  start
  7760     6   199    41     6   180     0      60  )
  7761     6   199    43     6   180     0      90  <<
  7762     6   199    46     6   180     0     112  1
  7763     6   199    47     6   180     0      60  )
  7764     6   199    48     6   180     0     102  ;
  7765     6   200     9     6   180     0     111  assert
  7766     6   200    16     6   180     0      59  (
  7767     6   200    17     6   180     0     111  off
  7768     6   200    21     6   180     0      88  >=
  7769     6   200    24     6   180     0     112  0
  7770     6   200    25     6   180     0      60  )
  7771     6   200    26     6   180     0     102  ;
  7772     6   201     9     6   180     0      19  return
  7773     6   201    20     6   180     0     111  ByteBufferAsCharBufferL
  7774     6   201    43     6   180     0      59  (
  7775     6   201    44     6   180     0     111  bb
  7776     6   201    46     6   180     0      66  ,
  7777     6   201    48     6   180     0      77  -
  7778     6   201    49     6   180     0     112  1
  7779     6   201    50     6   180     0      66  ,
  7780     6   201    52     6   180     0     112  0
  7781     6   201    53     6   180     0      66  ,
  7782     6   201    55     6   180     0     111  sublen
  7783     6   201    61     6   180     0      66  ,
  7784     6   201    63     6   180     0     111  sublen
  7785     6   201    69     6   180     0      66  ,
  7786     6   201    71     6   180     0     111  off
  7787     6   201    74     6   180     0      60  )
  7788     6   201    75     6   180     0     102  ;
  7789     6   202     5     6   180     0      64  }
  7790     6   202     5     6   180     0     508  ENDMETHOD
  7791     6   202     5     6   181     0     509  STARTMETHOD
  7792     6   207    12     6   181     0     111  ByteOrder
  7793     6   207    22     6   181     0     111  order
  7794     6   207    27     6   181     0      59  (
  7795     6   207    28     6   181     0      60  )
  7796     6   207    30     6   181     0      63  {
  7797     6   212     9     6   181     0      19  return
  7798     6   212    16     6   181     0     111  ByteOrder.LITTLE_ENDIAN
  7799     6   212    39     6   181     0     102  ;
  7800     6   214     5     6   181     0      64  }
  7801     6   214     5     6   181     0     510  ENDMETHOD
  7802     6   216     1     6    -1     0      64  }
  7803     6   216     1     6    -1     1     511  ENDCLASS
  7804     6   216     1    -1    -1     1     512  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsCharBufferL.java
  7805     7     1     1    -1    -1     1     513  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsCharBufferRB.java
  7806     7    28     9    -1    -1     0     111  java.nio
  7807     7    28    17    -1    -1     0     102  ;
  7808     7    31     1     7    -1     0     514  STARTCLASS
  7809     7    31     1     7    -1     0      24  class
  7810     7    31     7     7    -1     0     111  ByteBufferAsCharBufferRB
  7811     7    32     5     7    -1     0      38  extends
  7812     7    32    13     7    -1     0     111  ByteBufferAsCharBufferB
  7813     7    33     1     7    -1     0      63  {
  7814     7    33     1     7   182     0     515  STARTMETHOD
  7815     7    42     5     7   182     0     111  ByteBufferAsCharBufferRB
  7816     7    42    29     7   182     0      59  (
  7817     7    42    30     7   182     0     111  ByteBuffer
  7818     7    42    41     7   182     0     111  bb
  7819     7    42    43     7   182     0      60  )
  7820     7    42    45     7   182     0      63  {
  7821     7    55     9     7   182     0      27  super
  7822     7    55    14     7   182     0      59  (
  7823     7    55    15     7   182     0     111  bb
  7824     7    55    17     7   182     0      60  )
  7825     7    55    18     7   182     0     102  ;
  7826     7    57     5     7   182     0      64  }
  7827     7    57     5     7   182     0     516  ENDMETHOD
  7828     7    57     5     7   183     0     517  STARTMETHOD
  7829     7    59     5     7   183     0     111  ByteBufferAsCharBufferRB
  7830     7    59    29     7   183     0      59  (
  7831     7    59    30     7   183     0     111  ByteBuffer
  7832     7    59    41     7   183     0     111  bb
  7833     7    59    43     7   183     0      66  ,
  7834     7    60    38     7   183     0      36  int
  7835     7    60    42     7   183     0     111  mark
  7836     7    60    46     7   183     0      66  ,
  7837     7    60    48     7   183     0      36  int
  7838     7    60    52     7   183     0     111  pos
  7839     7    60    55     7   183     0      66  ,
  7840     7    60    57     7   183     0      36  int
  7841     7    60    61     7   183     0     111  lim
  7842     7    60    64     7   183     0      66  ,
  7843     7    60    66     7   183     0      36  int
  7844     7    60    70     7   183     0     111  cap
  7845     7    60    73     7   183     0      66  ,
  7846     7    61    38     7   183     0      36  int
  7847     7    61    42     7   183     0     111  off
  7848     7    61    45     7   183     0      60  )
  7849     7    62     5     7   183     0      63  {
  7850     7    68     9     7   183     0      27  super
  7851     7    68    14     7   183     0      59  (
  7852     7    68    15     7   183     0     111  bb
  7853     7    68    17     7   183     0      66  ,
  7854     7    68    19     7   183     0     111  mark
  7855     7    68    23     7   183     0      66  ,
  7856     7    68    25     7   183     0     111  pos
  7857     7    68    28     7   183     0      66  ,
  7858     7    68    30     7   183     0     111  lim
  7859     7    68    33     7   183     0      66  ,
  7860     7    68    35     7   183     0     111  cap
  7861     7    68    38     7   183     0      66  ,
  7862     7    68    40     7   183     0     111  off
  7863     7    68    43     7   183     0      60  )
  7864     7    68    44     7   183     0     102  ;
  7865     7    70     5     7   183     0      64  }
  7866     7    70     5     7   183     0     518  ENDMETHOD
  7867     7    70     5     7   184     0     519  STARTMETHOD
  7868     7    72    12     7   184     0     111  CharBuffer
  7869     7    72    23     7   184     0     111  slice
  7870     7    72    28     7   184     0      59  (
  7871     7    72    29     7   184     0      60  )
  7872     7    72    31     7   184     0      63  {
  7873     7    73     9     7   184     1      36  int
  7874     7    73    13     7   184     1     111  pos
  7875     7    73    17     7   184     1      67  =
  7876     7    73    19     7   184     1     111  this.position
  7877     7    73    32     7   184     1      59  (
  7878     7    73    33     7   184     1      60  )
  7879     7    73    34     7   184     1     102  ;
  7880     7    74     9     7   184     1      36  int
  7881     7    74    13     7   184     1     111  lim
  7882     7    74    17     7   184     1      67  =
  7883     7    74    19     7   184     1     111  this.limit
  7884     7    74    29     7   184     1      59  (
  7885     7    74    30     7   184     1      60  )
  7886     7    74    31     7   184     1     102  ;
  7887     7    75     9     7   184     0     111  assert
  7888     7    75    16     7   184     0      59  (
  7889     7    75    17     7   184     0     111  pos
  7890     7    75    21     7   184     0      92  <=
  7891     7    75    24     7   184     0     111  lim
  7892     7    75    27     7   184     0      60  )
  7893     7    75    28     7   184     0     102  ;
  7894     7    76     9     7   184     0      36  int
  7895     7    76    13     7   184     0     111  rem
  7896     7    76    17     7   184     0      67  =
  7897     7    76    19     7   184     0      59  (
  7898     7    76    20     7   184     0     111  pos
  7899     7    76    24     7   184     0      92  <=
  7900     7    76    27     7   184     0     111  lim
  7901     7    76    31     7   184     0      58  ?
  7902     7    76    33     7   184     0     111  lim
  7903     7    76    37     7   184     0      77  -
  7904     7    76    39     7   184     0     111  pos
  7905     7    76    43     7   184     0      65  :
  7906     7    76    45     7   184     0     112  0
  7907     7    76    46     7   184     0      60  )
  7908     7    76    47     7   184     0     102  ;
  7909     7    77     9     7   184     0      36  int
  7910     7    77    13     7   184     0     111  off
  7911     7    77    17     7   184     0      67  =
  7912     7    77    19     7   184     0      59  (
  7913     7    77    20     7   184     0     111  pos
  7914     7    77    24     7   184     0      90  <<
  7915     7    77    27     7   184     0     112  1
  7916     7    77    28     7   184     0      60  )
  7917     7    77    30     7   184     0      74  +
  7918     7    77    32     7   184     0     111  offset
  7919     7    77    38     7   184     0     102  ;
  7920     7    78     9     7   184     0     111  assert
  7921     7    78    16     7   184     0      59  (
  7922     7    78    17     7   184     0     111  off
  7923     7    78    21     7   184     0      88  >=
  7924     7    78    24     7   184     0     112  0
  7925     7    78    25     7   184     0      60  )
  7926     7    78    26     7   184     0     102  ;
  7927     7    79     9     7   184     0      19  return
  7928     7    79    20     7   184     0     111  ByteBufferAsCharBufferRB
  7929     7    79    44     7   184     0      59  (
  7930     7    79    45     7   184     0     111  bb
  7931     7    79    47     7   184     0      66  ,
  7932     7    79    49     7   184     0      77  -
  7933     7    79    50     7   184     0     112  1
  7934     7    79    51     7   184     0      66  ,
  7935     7    79    53     7   184     0     112  0
  7936     7    79    54     7   184     0      66  ,
  7937     7    79    56     7   184     0     111  rem
  7938     7    79    59     7   184     0      66  ,
  7939     7    79    61     7   184     0     111  rem
  7940     7    79    64     7   184     0      66  ,
  7941     7    79    66     7   184     0     111  off
  7942     7    79    69     7   184     0      60  )
  7943     7    79    70     7   184     0     102  ;
  7944     7    80     5     7   184     0      64  }
  7945     7    80     5     7   184     0     520  ENDMETHOD
  7946     7    80     5     7   185     0     521  STARTMETHOD
  7947     7    82    12     7   185     0     111  CharBuffer
  7948     7    82    23     7   185     0     111  duplicate
  7949     7    82    32     7   185     0      59  (
  7950     7    82    33     7   185     0      60  )
  7951     7    82    35     7   185     0      63  {
  7952     7    83     9     7   185     0      19  return
  7953     7    83    20     7   185     0     111  ByteBufferAsCharBufferRB
  7954     7    83    44     7   185     0      59  (
  7955     7    83    45     7   185     0     111  bb
  7956     7    83    47     7   185     0      66  ,
  7957     7    84    53     7   185     1     111  this.markValue
  7958     7    84    67     7   185     1      59  (
  7959     7    84    68     7   185     1      60  )
  7960     7    84    69     7   185     1      66  ,
  7961     7    85    53     7   185     1     111  this.position
  7962     7    85    66     7   185     1      59  (
  7963     7    85    67     7   185     1      60  )
  7964     7    85    68     7   185     1      66  ,
  7965     7    86    53     7   185     1     111  this.limit
  7966     7    86    63     7   185     1      59  (
  7967     7    86    64     7   185     1      60  )
  7968     7    86    65     7   185     1      66  ,
  7969     7    87    53     7   185     1     111  this.capacity
  7970     7    87    66     7   185     1      59  (
  7971     7    87    67     7   185     1      60  )
  7972     7    87    68     7   185     1      66  ,
  7973     7    88    53     7   185     0     111  offset
  7974     7    88    59     7   185     0      60  )
  7975     7    88    60     7   185     0     102  ;
  7976     7    89     5     7   185     0      64  }
  7977     7    89     5     7   185     0     522  ENDMETHOD
  7978     7    89     5     7   186     0     523  STARTMETHOD
  7979     7    91    12     7   186     0     111  CharBuffer
  7980     7    91    23     7   186     0     111  asReadOnlyBuffer
  7981     7    91    39     7   186     0      59  (
  7982     7    91    40     7   186     0      60  )
  7983     7    91    42     7   186     0      63  {
  7984     7   100     9     7   186     0      19  return
  7985     7   100    16     7   186     0     111  duplicate
  7986     7   100    25     7   186     0      59  (
  7987     7   100    26     7   186     0      60  )
  7988     7   100    27     7   186     0     102  ;
  7989     7   102     5     7   186     0      64  }
  7990     7   102     5     7   186     0     524  ENDMETHOD
  7991     7   102     5     7   187     0     525  STARTMETHOD
  7992     7   120    12     7   187     0     111  CharBuffer
  7993     7   120    23     7   187     0     111  put
  7994     7   120    26     7   187     0      59  (
  7995     7   120    27     7   187     0      40  char
  7996     7   120    32     7   187     0     111  x
  7997     7   120    33     7   187     0      60  )
  7998     7   120    35     7   187     0      63  {
  7999     7   125     9     7   187     0      20  throw
  8000     7   125    19     7   187     0     111  ReadOnlyBufferException
  8001     7   125    42     7   187     0      59  (
  8002     7   125    43     7   187     0      60  )
  8003     7   125    44     7   187     0     102  ;
  8004     7   127     5     7   187     0      64  }
  8005     7   127     5     7   187     0     526  ENDMETHOD
  8006     7   127     5     7   188     0     527  STARTMETHOD
  8007     7   129    12     7   188     0     111  CharBuffer
  8008     7   129    23     7   188     0     111  put
  8009     7   129    26     7   188     0      59  (
  8010     7   129    27     7   188     0      36  int
  8011     7   129    31     7   188     0     111  i
  8012     7   129    32     7   188     0      66  ,
  8013     7   129    34     7   188     0      40  char
  8014     7   129    39     7   188     0     111  x
  8015     7   129    40     7   188     0      60  )
  8016     7   129    42     7   188     0      63  {
  8017     7   134     9     7   188     0      20  throw
  8018     7   134    19     7   188     1     111  ReadOnlyBufferException
  8019     7   134    42     7   188     1      59  (
  8020     7   134    43     7   188     1      60  )
  8021     7   134    44     7   188     1     102  ;
  8022     7   136     5     7   188     1      64  }
  8023     7   136     5     7   188     0     528  ENDMETHOD
  8024     7   136     5     7   189     0     529  STARTMETHOD
  8025     7   138    12     7   189     0     111  CharBuffer
  8026     7   138    23     7   189     0     111  compact
  8027     7   138    30     7   189     0      59  (
  8028     7   138    31     7   189     0      60  )
  8029     7   138    33     7   189     0      63  {
  8030     7   155     9     7   189     0      20  throw
  8031     7   155    19     7   189     1     111  ReadOnlyBufferException
  8032     7   155    42     7   189     1      59  (
  8033     7   155    43     7   189     1      60  )
  8034     7   155    44     7   189     1     102  ;
  8035     7   157     5     7   189     1      64  }
  8036     7   157     5     7   189     0     530  ENDMETHOD
  8037     7   157     5     7   190     0     531  STARTMETHOD
  8038     7   159    12     7   190     0      39  boolean
  8039     7   159    20     7   190     0     111  isDirect
  8040     7   159    28     7   190     0      59  (
  8041     7   159    29     7   190     0      60  )
  8042     7   159    31     7   190     0      63  {
  8043     7   160     9     7   190     0      19  return
  8044     7   160    16     7   190     1     111  bb.isDirect
  8045     7   160    27     7   190     1      59  (
  8046     7   160    28     7   190     1      60  )
  8047     7   160    29     7   190     1     102  ;
  8048     7   161     5     7   190     1      64  }
  8049     7   161     5     7   190     0     532  ENDMETHOD
  8050     7   161     5     7   191     0     533  STARTMETHOD
  8051     7   163    12     7   191     0      39  boolean
  8052     7   163    20     7   191     0     111  isReadOnly
  8053     7   163    30     7   191     0      59  (
  8054     7   163    31     7   191     0      60  )
  8055     7   163    33     7   191     0      63  {
  8056     7   164     9     7   191     0      19  return
  8057     7   164    16     7   191     0      52  true
  8058     7   164    20     7   191     0     102  ;
  8059     7   165     5     7   191     0      64  }
  8060     7   165     5     7   191     0     534  ENDMETHOD
  8061     7   165     5     7   192     0     535  STARTMETHOD
  8062     7   169    12     7   192     0     111  String
  8063     7   169    19     7   192     0     111  toString
  8064     7   169    27     7   192     0      59  (
  8065     7   169    28     7   192     0      36  int
  8066     7   169    32     7   192     0     111  start
  8067     7   169    37     7   192     0      66  ,
  8068     7   169    39     7   192     0      36  int
  8069     7   169    43     7   192     0     111  end
  8070     7   169    46     7   192     0      60  )
  8071     7   169    48     7   192     0      63  {
  8072     7   170     9     7   192     0      31  if
  8073     7   170    12     7   192     0      59  (
  8074     7   170    13     7   192     0      59  (
  8075     7   170    14     7   192     0     111  end
  8076     7   170    18     7   192     0      89  >
  8077     7   170    20     7   192     0     111  limit
  8078     7   170    25     7   192     0      59  (
  8079     7   170    26     7   192     0      60  )
  8080     7   170    27     7   192     0      60  )
  8081     7   170    29     7   192     0      98  ||
  8082     7   170    32     7   192     0      59  (
  8083     7   170    33     7   192     0     111  start
  8084     7   170    39     7   192     0      89  >
  8085     7   170    41     7   192     0     111  end
  8086     7   170    44     7   192     0      60  )
  8087     7   170    45     7   192     0      60  )
  8088     7   171    13     7   192     0      20  throw
  8089     7   171    23     7   192     0     111  IndexOutOfBoundsException
  8090     7   171    48     7   192     0      59  (
  8091     7   171    49     7   192     0      60  )
  8092     7   171    50     7   192     0     102  ;
  8093     7   172     9     7   192     0      35  try
  8094     7   172    13     7   192     0      63  {
  8095     7   173    13     7   192     0      36  int
  8096     7   173    17     7   192     0     111  len
  8097     7   173    21     7   192     0      67  =
  8098     7   173    23     7   192     0     111  end
  8099     7   173    27     7   192     0      77  -
  8100     7   173    29     7   192     0     111  start
  8101     7   173    34     7   192     0     102  ;
  8102     7   174    13     7   192     0      40  char
  8103     7   174    17     7   192     0      61  [
  8104     7   174    18     7   192     0      62  ]
  8105     7   174    20     7   192     0     111  ca
  8106     7   174    23     7   192     0      67  =
  8107     7   174    29     7   192     0      40  char
  8108     7   174    33     7   192     0      61  [
  8109     7   174    34     7   192     0     111  len
  8110     7   174    37     7   192     0      62  ]
  8111     7   174    38     7   192     0     102  ;
  8112     7   175    13     7   192     0     111  CharBuffer
  8113     7   175    24     7   192     0     111  cb
  8114     7   175    27     7   192     0      67  =
  8115     7   175    29     7   192     0     111  CharBuffer.wrap
  8116     7   175    44     7   192     0      59  (
  8117     7   175    45     7   192     0     111  ca
  8118     7   175    47     7   192     0      60  )
  8119     7   175    48     7   192     0     102  ;
  8120     7   176    13     7   192     0     111  CharBuffer
  8121     7   176    24     7   192     0     111  db
  8122     7   176    27     7   192     0      67  =
  8123     7   176    29     7   192     0     111  this.duplicate
  8124     7   176    43     7   192     0      59  (
  8125     7   176    44     7   192     0      60  )
  8126     7   176    45     7   192     0     102  ;
  8127     7   177    13     7   192     1     111  db.position
  8128     7   177    24     7   192     1      59  (
  8129     7   177    25     7   192     1     111  start
  8130     7   177    30     7   192     1      60  )
  8131     7   177    31     7   192     1     102  ;
  8132     7   178    13     7   192     1     111  db.limit
  8133     7   178    21     7   192     1      59  (
  8134     7   178    22     7   192     1     111  end
  8135     7   178    25     7   192     1      60  )
  8136     7   178    26     7   192     1     102  ;
  8137     7   179    13     7   192     1     111  cb.put
  8138     7   179    19     7   192     1      59  (
  8139     7   179    20     7   192     1     111  db
  8140     7   179    22     7   192     1      60  )
  8141     7   179    23     7   192     1     102  ;
  8142     7   180    13     7   192     0      19  return
  8143     7   180    24     7   192     0     111  String
  8144     7   180    30     7   192     0      59  (
  8145     7   180    31     7   192     0     111  ca
  8146     7   180    33     7   192     0      60  )
  8147     7   180    34     7   192     0     102  ;
  8148     7   181     9     7   192     0      64  }
  8149     7   181    11     7   192     0      34  catch
  8150     7   181    17     7   192     0      59  (
  8151     7   181    18     7   192     0     111  StringIndexOutOfBoundsException
  8152     7   181    50     7   192     0     111  x
  8153     7   181    51     7   192     0      60  )
  8154     7   181    53     7   192     0      63  {
  8155     7   182    13     7   192     0      20  throw
  8156     7   182    23     7   192     0     111  IndexOutOfBoundsException
  8157     7   182    48     7   192     0      59  (
  8158     7   182    49     7   192     0      60  )
  8159     7   182    50     7   192     0     102  ;
  8160     7   183     9     7   192     0      64  }
  8161     7   184     5     7   192     0      64  }
  8162     7   184     5     7   192     0     536  ENDMETHOD
  8163     7   184     5     7   193     0     537  STARTMETHOD
  8164     7   189    12     7   193     0     111  CharSequence
  8165     7   189    25     7   193     0     111  subSequence
  8166     7   189    36     7   193     0      59  (
  8167     7   189    37     7   193     0      36  int
  8168     7   189    41     7   193     0     111  start
  8169     7   189    46     7   193     0      66  ,
  8170     7   189    48     7   193     0      36  int
  8171     7   189    52     7   193     0     111  end
  8172     7   189    55     7   193     0      60  )
  8173     7   189    57     7   193     0      63  {
  8174     7   190     9     7   193     1      36  int
  8175     7   190    13     7   193     1     111  pos
  8176     7   190    17     7   193     1      67  =
  8177     7   190    19     7   193     1     111  position
  8178     7   190    27     7   193     1      59  (
  8179     7   190    28     7   193     1      60  )
  8180     7   190    29     7   193     1     102  ;
  8181     7   191     9     7   193     1      36  int
  8182     7   191    13     7   193     1     111  lim
  8183     7   191    17     7   193     1      67  =
  8184     7   191    19     7   193     1     111  limit
  8185     7   191    24     7   193     1      59  (
  8186     7   191    25     7   193     1      60  )
  8187     7   191    26     7   193     1     102  ;
  8188     7   192     9     7   193     0     111  assert
  8189     7   192    16     7   193     0      59  (
  8190     7   192    17     7   193     0     111  pos
  8191     7   192    21     7   193     0      92  <=
  8192     7   192    24     7   193     0     111  lim
  8193     7   192    27     7   193     0      60  )
  8194     7   192    28     7   193     0     102  ;
  8195     7   193     9     7   193     0     111  pos
  8196     7   193    13     7   193     0      67  =
  8197     7   193    15     7   193     0      59  (
  8198     7   193    16     7   193     0     111  pos
  8199     7   193    20     7   193     0      92  <=
  8200     7   193    23     7   193     0     111  lim
  8201     7   193    27     7   193     0      58  ?
  8202     7   193    29     7   193     0     111  pos
  8203     7   193    33     7   193     0      65  :
  8204     7   193    35     7   193     0     111  lim
  8205     7   193    38     7   193     0      60  )
  8206     7   193    39     7   193     0     102  ;
  8207     7   194     9     7   193     0      36  int
  8208     7   194    13     7   193     0     111  len
  8209     7   194    17     7   193     0      67  =
  8210     7   194    19     7   193     0     111  lim
  8211     7   194    23     7   193     0      77  -
  8212     7   194    25     7   193     0     111  pos
  8213     7   194    28     7   193     0     102  ;
  8214     7   196     9     7   193     0      31  if
  8215     7   196    12     7   193     0      59  (
  8216     7   196    13     7   193     0      59  (
  8217     7   196    14     7   193     0     111  start
  8218     7   196    20     7   193     0      93  <
  8219     7   196    22     7   193     0     112  0
  8220     7   196    23     7   193     0      60  )
  8221     7   196    25     7   193     0      98  ||
  8222     7   196    28     7   193     0      59  (
  8223     7   196    29     7   193     0     111  end
  8224     7   196    33     7   193     0      89  >
  8225     7   196    35     7   193     0     111  len
  8226     7   196    38     7   193     0      60  )
  8227     7   196    40     7   193     0      98  ||
  8228     7   196    43     7   193     0      59  (
  8229     7   196    44     7   193     0     111  start
  8230     7   196    50     7   193     0      89  >
  8231     7   196    52     7   193     0     111  end
  8232     7   196    55     7   193     0      60  )
  8233     7   196    56     7   193     0      60  )
  8234     7   197    13     7   193     0      20  throw
  8235     7   197    23     7   193     0     111  IndexOutOfBoundsException
  8236     7   197    48     7   193     0      59  (
  8237     7   197    49     7   193     0      60  )
  8238     7   197    50     7   193     0     102  ;
  8239     7   198     9     7   193     0      36  int
  8240     7   198    13     7   193     0     111  sublen
  8241     7   198    20     7   193     0      67  =
  8242     7   198    22     7   193     0     111  end
  8243     7   198    26     7   193     0      77  -
  8244     7   198    28     7   193     0     111  start
  8245     7   198    33     7   193     0     102  ;
  8246     7   199     9     7   193     0      36  int
  8247     7   199    13     7   193     0     111  off
  8248     7   199    17     7   193     0      67  =
  8249     7   199    19     7   193     0     111  offset
  8250     7   199    26     7   193     0      74  +
  8251     7   199    28     7   193     0      59  (
  8252     7   199    29     7   193     0      59  (
  8253     7   199    30     7   193     0     111  pos
  8254     7   199    34     7   193     0      74  +
  8255     7   199    36     7   193     0     111  start
  8256     7   199    41     7   193     0      60  )
  8257     7   199    43     7   193     0      90  <<
  8258     7   199    46     7   193     0     112  1
  8259     7   199    47     7   193     0      60  )
  8260     7   199    48     7   193     0     102  ;
  8261     7   200     9     7   193     0     111  assert
  8262     7   200    16     7   193     0      59  (
  8263     7   200    17     7   193     0     111  off
  8264     7   200    21     7   193     0      88  >=
  8265     7   200    24     7   193     0     112  0
  8266     7   200    25     7   193     0      60  )
  8267     7   200    26     7   193     0     102  ;
  8268     7   201     9     7   193     0      19  return
  8269     7   201    20     7   193     0     111  ByteBufferAsCharBufferRB
  8270     7   201    44     7   193     0      59  (
  8271     7   201    45     7   193     0     111  bb
  8272     7   201    47     7   193     0      66  ,
  8273     7   201    49     7   193     0      77  -
  8274     7   201    50     7   193     0     112  1
  8275     7   201    51     7   193     0      66  ,
  8276     7   201    53     7   193     0     112  0
  8277     7   201    54     7   193     0      66  ,
  8278     7   201    56     7   193     0     111  sublen
  8279     7   201    62     7   193     0      66  ,
  8280     7   201    64     7   193     0     111  sublen
  8281     7   201    70     7   193     0      66  ,
  8282     7   201    72     7   193     0     111  off
  8283     7   201    75     7   193     0      60  )
  8284     7   201    76     7   193     0     102  ;
  8285     7   202     5     7   193     0      64  }
  8286     7   202     5     7   193     0     538  ENDMETHOD
  8287     7   202     5     7   194     0     539  STARTMETHOD
  8288     7   207    12     7   194     0     111  ByteOrder
  8289     7   207    22     7   194     0     111  order
  8290     7   207    27     7   194     0      59  (
  8291     7   207    28     7   194     0      60  )
  8292     7   207    30     7   194     0      63  {
  8293     7   209     9     7   194     0      19  return
  8294     7   209    16     7   194     0     111  ByteOrder.BIG_ENDIAN
  8295     7   209    36     7   194     0     102  ;
  8296     7   214     5     7   194     0      64  }
  8297     7   214     5     7   194     0     540  ENDMETHOD
  8298     7   216     1     7    -1     0      64  }
  8299     7   216     1     7    -1     1     541  ENDCLASS
  8300     7   216     1    -1    -1     1     542  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsCharBufferRB.java
  8301     8     1     1    -1    -1     1     543  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsCharBufferRL.java
  8302     8    28     9    -1    -1     0     111  java.nio
  8303     8    28    17    -1    -1     0     102  ;
  8304     8    31     1     8    -1     0     544  STARTCLASS
  8305     8    31     1     8    -1     0      24  class
  8306     8    31     7     8    -1     0     111  ByteBufferAsCharBufferRL
  8307     8    32     5     8    -1     0      38  extends
  8308     8    32    13     8    -1     0     111  ByteBufferAsCharBufferL
  8309     8    33     1     8    -1     0      63  {
  8310     8    33     1     8   195     0     545  STARTMETHOD
  8311     8    42     5     8   195     0     111  ByteBufferAsCharBufferRL
  8312     8    42    29     8   195     0      59  (
  8313     8    42    30     8   195     0     111  ByteBuffer
  8314     8    42    41     8   195     0     111  bb
  8315     8    42    43     8   195     0      60  )
  8316     8    42    45     8   195     0      63  {
  8317     8    55     9     8   195     0      27  super
  8318     8    55    14     8   195     0      59  (
  8319     8    55    15     8   195     0     111  bb
  8320     8    55    17     8   195     0      60  )
  8321     8    55    18     8   195     0     102  ;
  8322     8    57     5     8   195     0      64  }
  8323     8    57     5     8   195     0     546  ENDMETHOD
  8324     8    57     5     8   196     0     547  STARTMETHOD
  8325     8    59     5     8   196     0     111  ByteBufferAsCharBufferRL
  8326     8    59    29     8   196     0      59  (
  8327     8    59    30     8   196     0     111  ByteBuffer
  8328     8    59    41     8   196     0     111  bb
  8329     8    59    43     8   196     0      66  ,
  8330     8    60    38     8   196     0      36  int
  8331     8    60    42     8   196     0     111  mark
  8332     8    60    46     8   196     0      66  ,
  8333     8    60    48     8   196     0      36  int
  8334     8    60    52     8   196     0     111  pos
  8335     8    60    55     8   196     0      66  ,
  8336     8    60    57     8   196     0      36  int
  8337     8    60    61     8   196     0     111  lim
  8338     8    60    64     8   196     0      66  ,
  8339     8    60    66     8   196     0      36  int
  8340     8    60    70     8   196     0     111  cap
  8341     8    60    73     8   196     0      66  ,
  8342     8    61    38     8   196     0      36  int
  8343     8    61    42     8   196     0     111  off
  8344     8    61    45     8   196     0      60  )
  8345     8    62     5     8   196     0      63  {
  8346     8    68     9     8   196     0      27  super
  8347     8    68    14     8   196     0      59  (
  8348     8    68    15     8   196     0     111  bb
  8349     8    68    17     8   196     0      66  ,
  8350     8    68    19     8   196     0     111  mark
  8351     8    68    23     8   196     0      66  ,
  8352     8    68    25     8   196     0     111  pos
  8353     8    68    28     8   196     0      66  ,
  8354     8    68    30     8   196     0     111  lim
  8355     8    68    33     8   196     0      66  ,
  8356     8    68    35     8   196     0     111  cap
  8357     8    68    38     8   196     0      66  ,
  8358     8    68    40     8   196     0     111  off
  8359     8    68    43     8   196     0      60  )
  8360     8    68    44     8   196     0     102  ;
  8361     8    70     5     8   196     0      64  }
  8362     8    70     5     8   196     0     548  ENDMETHOD
  8363     8    70     5     8   197     0     549  STARTMETHOD
  8364     8    72    12     8   197     0     111  CharBuffer
  8365     8    72    23     8   197     0     111  slice
  8366     8    72    28     8   197     0      59  (
  8367     8    72    29     8   197     0      60  )
  8368     8    72    31     8   197     0      63  {
  8369     8    73     9     8   197     1      36  int
  8370     8    73    13     8   197     1     111  pos
  8371     8    73    17     8   197     1      67  =
  8372     8    73    19     8   197     1     111  this.position
  8373     8    73    32     8   197     1      59  (
  8374     8    73    33     8   197     1      60  )
  8375     8    73    34     8   197     1     102  ;
  8376     8    74     9     8   197     1      36  int
  8377     8    74    13     8   197     1     111  lim
  8378     8    74    17     8   197     1      67  =
  8379     8    74    19     8   197     1     111  this.limit
  8380     8    74    29     8   197     1      59  (
  8381     8    74    30     8   197     1      60  )
  8382     8    74    31     8   197     1     102  ;
  8383     8    75     9     8   197     0     111  assert
  8384     8    75    16     8   197     0      59  (
  8385     8    75    17     8   197     0     111  pos
  8386     8    75    21     8   197     0      92  <=
  8387     8    75    24     8   197     0     111  lim
  8388     8    75    27     8   197     0      60  )
  8389     8    75    28     8   197     0     102  ;
  8390     8    76     9     8   197     0      36  int
  8391     8    76    13     8   197     0     111  rem
  8392     8    76    17     8   197     0      67  =
  8393     8    76    19     8   197     0      59  (
  8394     8    76    20     8   197     0     111  pos
  8395     8    76    24     8   197     0      92  <=
  8396     8    76    27     8   197     0     111  lim
  8397     8    76    31     8   197     0      58  ?
  8398     8    76    33     8   197     0     111  lim
  8399     8    76    37     8   197     0      77  -
  8400     8    76    39     8   197     0     111  pos
  8401     8    76    43     8   197     0      65  :
  8402     8    76    45     8   197     0     112  0
  8403     8    76    46     8   197     0      60  )
  8404     8    76    47     8   197     0     102  ;
  8405     8    77     9     8   197     0      36  int
  8406     8    77    13     8   197     0     111  off
  8407     8    77    17     8   197     0      67  =
  8408     8    77    19     8   197     0      59  (
  8409     8    77    20     8   197     0     111  pos
  8410     8    77    24     8   197     0      90  <<
  8411     8    77    27     8   197     0     112  1
  8412     8    77    28     8   197     0      60  )
  8413     8    77    30     8   197     0      74  +
  8414     8    77    32     8   197     0     111  offset
  8415     8    77    38     8   197     0     102  ;
  8416     8    78     9     8   197     0     111  assert
  8417     8    78    16     8   197     0      59  (
  8418     8    78    17     8   197     0     111  off
  8419     8    78    21     8   197     0      88  >=
  8420     8    78    24     8   197     0     112  0
  8421     8    78    25     8   197     0      60  )
  8422     8    78    26     8   197     0     102  ;
  8423     8    79     9     8   197     0      19  return
  8424     8    79    20     8   197     0     111  ByteBufferAsCharBufferRL
  8425     8    79    44     8   197     0      59  (
  8426     8    79    45     8   197     0     111  bb
  8427     8    79    47     8   197     0      66  ,
  8428     8    79    49     8   197     0      77  -
  8429     8    79    50     8   197     0     112  1
  8430     8    79    51     8   197     0      66  ,
  8431     8    79    53     8   197     0     112  0
  8432     8    79    54     8   197     0      66  ,
  8433     8    79    56     8   197     0     111  rem
  8434     8    79    59     8   197     0      66  ,
  8435     8    79    61     8   197     0     111  rem
  8436     8    79    64     8   197     0      66  ,
  8437     8    79    66     8   197     0     111  off
  8438     8    79    69     8   197     0      60  )
  8439     8    79    70     8   197     0     102  ;
  8440     8    80     5     8   197     0      64  }
  8441     8    80     5     8   197     0     550  ENDMETHOD
  8442     8    80     5     8   198     0     551  STARTMETHOD
  8443     8    82    12     8   198     0     111  CharBuffer
  8444     8    82    23     8   198     0     111  duplicate
  8445     8    82    32     8   198     0      59  (
  8446     8    82    33     8   198     0      60  )
  8447     8    82    35     8   198     0      63  {
  8448     8    83     9     8   198     0      19  return
  8449     8    83    20     8   198     0     111  ByteBufferAsCharBufferRL
  8450     8    83    44     8   198     0      59  (
  8451     8    83    45     8   198     0     111  bb
  8452     8    83    47     8   198     0      66  ,
  8453     8    84    53     8   198     1     111  this.markValue
  8454     8    84    67     8   198     1      59  (
  8455     8    84    68     8   198     1      60  )
  8456     8    84    69     8   198     1      66  ,
  8457     8    85    53     8   198     1     111  this.position
  8458     8    85    66     8   198     1      59  (
  8459     8    85    67     8   198     1      60  )
  8460     8    85    68     8   198     1      66  ,
  8461     8    86    53     8   198     1     111  this.limit
  8462     8    86    63     8   198     1      59  (
  8463     8    86    64     8   198     1      60  )
  8464     8    86    65     8   198     1      66  ,
  8465     8    87    53     8   198     1     111  this.capacity
  8466     8    87    66     8   198     1      59  (
  8467     8    87    67     8   198     1      60  )
  8468     8    87    68     8   198     1      66  ,
  8469     8    88    53     8   198     0     111  offset
  8470     8    88    59     8   198     0      60  )
  8471     8    88    60     8   198     0     102  ;
  8472     8    89     5     8   198     0      64  }
  8473     8    89     5     8   198     0     552  ENDMETHOD
  8474     8    89     5     8   199     0     553  STARTMETHOD
  8475     8    91    12     8   199     0     111  CharBuffer
  8476     8    91    23     8   199     0     111  asReadOnlyBuffer
  8477     8    91    39     8   199     0      59  (
  8478     8    91    40     8   199     0      60  )
  8479     8    91    42     8   199     0      63  {
  8480     8   100     9     8   199     0      19  return
  8481     8   100    16     8   199     0     111  duplicate
  8482     8   100    25     8   199     0      59  (
  8483     8   100    26     8   199     0      60  )
  8484     8   100    27     8   199     0     102  ;
  8485     8   102     5     8   199     0      64  }
  8486     8   102     5     8   199     0     554  ENDMETHOD
  8487     8   102     5     8   200     0     555  STARTMETHOD
  8488     8   120    12     8   200     0     111  CharBuffer
  8489     8   120    23     8   200     0     111  put
  8490     8   120    26     8   200     0      59  (
  8491     8   120    27     8   200     0      40  char
  8492     8   120    32     8   200     0     111  x
  8493     8   120    33     8   200     0      60  )
  8494     8   120    35     8   200     0      63  {
  8495     8   125     9     8   200     0      20  throw
  8496     8   125    19     8   200     0     111  ReadOnlyBufferException
  8497     8   125    42     8   200     0      59  (
  8498     8   125    43     8   200     0      60  )
  8499     8   125    44     8   200     0     102  ;
  8500     8   127     5     8   200     0      64  }
  8501     8   127     5     8   200     0     556  ENDMETHOD
  8502     8   127     5     8   201     0     557  STARTMETHOD
  8503     8   129    12     8   201     0     111  CharBuffer
  8504     8   129    23     8   201     0     111  put
  8505     8   129    26     8   201     0      59  (
  8506     8   129    27     8   201     0      36  int
  8507     8   129    31     8   201     0     111  i
  8508     8   129    32     8   201     0      66  ,
  8509     8   129    34     8   201     0      40  char
  8510     8   129    39     8   201     0     111  x
  8511     8   129    40     8   201     0      60  )
  8512     8   129    42     8   201     0      63  {
  8513     8   134     9     8   201     0      20  throw
  8514     8   134    19     8   201     1     111  ReadOnlyBufferException
  8515     8   134    42     8   201     1      59  (
  8516     8   134    43     8   201     1      60  )
  8517     8   134    44     8   201     1     102  ;
  8518     8   136     5     8   201     1      64  }
  8519     8   136     5     8   201     0     558  ENDMETHOD
  8520     8   136     5     8   202     0     559  STARTMETHOD
  8521     8   138    12     8   202     0     111  CharBuffer
  8522     8   138    23     8   202     0     111  compact
  8523     8   138    30     8   202     0      59  (
  8524     8   138    31     8   202     0      60  )
  8525     8   138    33     8   202     0      63  {
  8526     8   155     9     8   202     0      20  throw
  8527     8   155    19     8   202     1     111  ReadOnlyBufferException
  8528     8   155    42     8   202     1      59  (
  8529     8   155    43     8   202     1      60  )
  8530     8   155    44     8   202     1     102  ;
  8531     8   157     5     8   202     1      64  }
  8532     8   157     5     8   202     0     560  ENDMETHOD
  8533     8   157     5     8   203     0     561  STARTMETHOD
  8534     8   159    12     8   203     0      39  boolean
  8535     8   159    20     8   203     0     111  isDirect
  8536     8   159    28     8   203     0      59  (
  8537     8   159    29     8   203     0      60  )
  8538     8   159    31     8   203     0      63  {
  8539     8   160     9     8   203     0      19  return
  8540     8   160    16     8   203     1     111  bb.isDirect
  8541     8   160    27     8   203     1      59  (
  8542     8   160    28     8   203     1      60  )
  8543     8   160    29     8   203     1     102  ;
  8544     8   161     5     8   203     1      64  }
  8545     8   161     5     8   203     0     562  ENDMETHOD
  8546     8   161     5     8   204     0     563  STARTMETHOD
  8547     8   163    12     8   204     0      39  boolean
  8548     8   163    20     8   204     0     111  isReadOnly
  8549     8   163    30     8   204     0      59  (
  8550     8   163    31     8   204     0      60  )
  8551     8   163    33     8   204     0      63  {
  8552     8   164     9     8   204     0      19  return
  8553     8   164    16     8   204     0      52  true
  8554     8   164    20     8   204     0     102  ;
  8555     8   165     5     8   204     0      64  }
  8556     8   165     5     8   204     0     564  ENDMETHOD
  8557     8   165     5     8   205     0     565  STARTMETHOD
  8558     8   169    12     8   205     0     111  String
  8559     8   169    19     8   205     0     111  toString
  8560     8   169    27     8   205     0      59  (
  8561     8   169    28     8   205     0      36  int
  8562     8   169    32     8   205     0     111  start
  8563     8   169    37     8   205     0      66  ,
  8564     8   169    39     8   205     0      36  int
  8565     8   169    43     8   205     0     111  end
  8566     8   169    46     8   205     0      60  )
  8567     8   169    48     8   205     0      63  {
  8568     8   170     9     8   205     0      31  if
  8569     8   170    12     8   205     0      59  (
  8570     8   170    13     8   205     0      59  (
  8571     8   170    14     8   205     0     111  end
  8572     8   170    18     8   205     0      89  >
  8573     8   170    20     8   205     0     111  limit
  8574     8   170    25     8   205     0      59  (
  8575     8   170    26     8   205     0      60  )
  8576     8   170    27     8   205     0      60  )
  8577     8   170    29     8   205     0      98  ||
  8578     8   170    32     8   205     0      59  (
  8579     8   170    33     8   205     0     111  start
  8580     8   170    39     8   205     0      89  >
  8581     8   170    41     8   205     0     111  end
  8582     8   170    44     8   205     0      60  )
  8583     8   170    45     8   205     0      60  )
  8584     8   171    13     8   205     0      20  throw
  8585     8   171    23     8   205     0     111  IndexOutOfBoundsException
  8586     8   171    48     8   205     0      59  (
  8587     8   171    49     8   205     0      60  )
  8588     8   171    50     8   205     0     102  ;
  8589     8   172     9     8   205     0      35  try
  8590     8   172    13     8   205     0      63  {
  8591     8   173    13     8   205     0      36  int
  8592     8   173    17     8   205     0     111  len
  8593     8   173    21     8   205     0      67  =
  8594     8   173    23     8   205     0     111  end
  8595     8   173    27     8   205     0      77  -
  8596     8   173    29     8   205     0     111  start
  8597     8   173    34     8   205     0     102  ;
  8598     8   174    13     8   205     0      40  char
  8599     8   174    17     8   205     0      61  [
  8600     8   174    18     8   205     0      62  ]
  8601     8   174    20     8   205     0     111  ca
  8602     8   174    23     8   205     0      67  =
  8603     8   174    29     8   205     0      40  char
  8604     8   174    33     8   205     0      61  [
  8605     8   174    34     8   205     0     111  len
  8606     8   174    37     8   205     0      62  ]
  8607     8   174    38     8   205     0     102  ;
  8608     8   175    13     8   205     0     111  CharBuffer
  8609     8   175    24     8   205     0     111  cb
  8610     8   175    27     8   205     0      67  =
  8611     8   175    29     8   205     0     111  CharBuffer.wrap
  8612     8   175    44     8   205     0      59  (
  8613     8   175    45     8   205     0     111  ca
  8614     8   175    47     8   205     0      60  )
  8615     8   175    48     8   205     0     102  ;
  8616     8   176    13     8   205     0     111  CharBuffer
  8617     8   176    24     8   205     0     111  db
  8618     8   176    27     8   205     0      67  =
  8619     8   176    29     8   205     0     111  this.duplicate
  8620     8   176    43     8   205     0      59  (
  8621     8   176    44     8   205     0      60  )
  8622     8   176    45     8   205     0     102  ;
  8623     8   177    13     8   205     1     111  db.position
  8624     8   177    24     8   205     1      59  (
  8625     8   177    25     8   205     1     111  start
  8626     8   177    30     8   205     1      60  )
  8627     8   177    31     8   205     1     102  ;
  8628     8   178    13     8   205     1     111  db.limit
  8629     8   178    21     8   205     1      59  (
  8630     8   178    22     8   205     1     111  end
  8631     8   178    25     8   205     1      60  )
  8632     8   178    26     8   205     1     102  ;
  8633     8   179    13     8   205     1     111  cb.put
  8634     8   179    19     8   205     1      59  (
  8635     8   179    20     8   205     1     111  db
  8636     8   179    22     8   205     1      60  )
  8637     8   179    23     8   205     1     102  ;
  8638     8   180    13     8   205     0      19  return
  8639     8   180    24     8   205     0     111  String
  8640     8   180    30     8   205     0      59  (
  8641     8   180    31     8   205     0     111  ca
  8642     8   180    33     8   205     0      60  )
  8643     8   180    34     8   205     0     102  ;
  8644     8   181     9     8   205     0      64  }
  8645     8   181    11     8   205     0      34  catch
  8646     8   181    17     8   205     0      59  (
  8647     8   181    18     8   205     0     111  StringIndexOutOfBoundsException
  8648     8   181    50     8   205     0     111  x
  8649     8   181    51     8   205     0      60  )
  8650     8   181    53     8   205     0      63  {
  8651     8   182    13     8   205     0      20  throw
  8652     8   182    23     8   205     0     111  IndexOutOfBoundsException
  8653     8   182    48     8   205     0      59  (
  8654     8   182    49     8   205     0      60  )
  8655     8   182    50     8   205     0     102  ;
  8656     8   183     9     8   205     0      64  }
  8657     8   184     5     8   205     0      64  }
  8658     8   184     5     8   205     0     566  ENDMETHOD
  8659     8   184     5     8   206     0     567  STARTMETHOD
  8660     8   189    12     8   206     0     111  CharSequence
  8661     8   189    25     8   206     0     111  subSequence
  8662     8   189    36     8   206     0      59  (
  8663     8   189    37     8   206     0      36  int
  8664     8   189    41     8   206     0     111  start
  8665     8   189    46     8   206     0      66  ,
  8666     8   189    48     8   206     0      36  int
  8667     8   189    52     8   206     0     111  end
  8668     8   189    55     8   206     0      60  )
  8669     8   189    57     8   206     0      63  {
  8670     8   190     9     8   206     1      36  int
  8671     8   190    13     8   206     1     111  pos
  8672     8   190    17     8   206     1      67  =
  8673     8   190    19     8   206     1     111  position
  8674     8   190    27     8   206     1      59  (
  8675     8   190    28     8   206     1      60  )
  8676     8   190    29     8   206     1     102  ;
  8677     8   191     9     8   206     1      36  int
  8678     8   191    13     8   206     1     111  lim
  8679     8   191    17     8   206     1      67  =
  8680     8   191    19     8   206     1     111  limit
  8681     8   191    24     8   206     1      59  (
  8682     8   191    25     8   206     1      60  )
  8683     8   191    26     8   206     1     102  ;
  8684     8   192     9     8   206     0     111  assert
  8685     8   192    16     8   206     0      59  (
  8686     8   192    17     8   206     0     111  pos
  8687     8   192    21     8   206     0      92  <=
  8688     8   192    24     8   206     0     111  lim
  8689     8   192    27     8   206     0      60  )
  8690     8   192    28     8   206     0     102  ;
  8691     8   193     9     8   206     0     111  pos
  8692     8   193    13     8   206     0      67  =
  8693     8   193    15     8   206     0      59  (
  8694     8   193    16     8   206     0     111  pos
  8695     8   193    20     8   206     0      92  <=
  8696     8   193    23     8   206     0     111  lim
  8697     8   193    27     8   206     0      58  ?
  8698     8   193    29     8   206     0     111  pos
  8699     8   193    33     8   206     0      65  :
  8700     8   193    35     8   206     0     111  lim
  8701     8   193    38     8   206     0      60  )
  8702     8   193    39     8   206     0     102  ;
  8703     8   194     9     8   206     0      36  int
  8704     8   194    13     8   206     0     111  len
  8705     8   194    17     8   206     0      67  =
  8706     8   194    19     8   206     0     111  lim
  8707     8   194    23     8   206     0      77  -
  8708     8   194    25     8   206     0     111  pos
  8709     8   194    28     8   206     0     102  ;
  8710     8   196     9     8   206     0      31  if
  8711     8   196    12     8   206     0      59  (
  8712     8   196    13     8   206     0      59  (
  8713     8   196    14     8   206     0     111  start
  8714     8   196    20     8   206     0      93  <
  8715     8   196    22     8   206     0     112  0
  8716     8   196    23     8   206     0      60  )
  8717     8   196    25     8   206     0      98  ||
  8718     8   196    28     8   206     0      59  (
  8719     8   196    29     8   206     0     111  end
  8720     8   196    33     8   206     0      89  >
  8721     8   196    35     8   206     0     111  len
  8722     8   196    38     8   206     0      60  )
  8723     8   196    40     8   206     0      98  ||
  8724     8   196    43     8   206     0      59  (
  8725     8   196    44     8   206     0     111  start
  8726     8   196    50     8   206     0      89  >
  8727     8   196    52     8   206     0     111  end
  8728     8   196    55     8   206     0      60  )
  8729     8   196    56     8   206     0      60  )
  8730     8   197    13     8   206     0      20  throw
  8731     8   197    23     8   206     0     111  IndexOutOfBoundsException
  8732     8   197    48     8   206     0      59  (
  8733     8   197    49     8   206     0      60  )
  8734     8   197    50     8   206     0     102  ;
  8735     8   198     9     8   206     0      36  int
  8736     8   198    13     8   206     0     111  sublen
  8737     8   198    20     8   206     0      67  =
  8738     8   198    22     8   206     0     111  end
  8739     8   198    26     8   206     0      77  -
  8740     8   198    28     8   206     0     111  start
  8741     8   198    33     8   206     0     102  ;
  8742     8   199     9     8   206     0      36  int
  8743     8   199    13     8   206     0     111  off
  8744     8   199    17     8   206     0      67  =
  8745     8   199    19     8   206     0     111  offset
  8746     8   199    26     8   206     0      74  +
  8747     8   199    28     8   206     0      59  (
  8748     8   199    29     8   206     0      59  (
  8749     8   199    30     8   206     0     111  pos
  8750     8   199    34     8   206     0      74  +
  8751     8   199    36     8   206     0     111  start
  8752     8   199    41     8   206     0      60  )
  8753     8   199    43     8   206     0      90  <<
  8754     8   199    46     8   206     0     112  1
  8755     8   199    47     8   206     0      60  )
  8756     8   199    48     8   206     0     102  ;
  8757     8   200     9     8   206     0     111  assert
  8758     8   200    16     8   206     0      59  (
  8759     8   200    17     8   206     0     111  off
  8760     8   200    21     8   206     0      88  >=
  8761     8   200    24     8   206     0     112  0
  8762     8   200    25     8   206     0      60  )
  8763     8   200    26     8   206     0     102  ;
  8764     8   201     9     8   206     0      19  return
  8765     8   201    20     8   206     0     111  ByteBufferAsCharBufferRL
  8766     8   201    44     8   206     0      59  (
  8767     8   201    45     8   206     0     111  bb
  8768     8   201    47     8   206     0      66  ,
  8769     8   201    49     8   206     0      77  -
  8770     8   201    50     8   206     0     112  1
  8771     8   201    51     8   206     0      66  ,
  8772     8   201    53     8   206     0     112  0
  8773     8   201    54     8   206     0      66  ,
  8774     8   201    56     8   206     0     111  sublen
  8775     8   201    62     8   206     0      66  ,
  8776     8   201    64     8   206     0     111  sublen
  8777     8   201    70     8   206     0      66  ,
  8778     8   201    72     8   206     0     111  off
  8779     8   201    75     8   206     0      60  )
  8780     8   201    76     8   206     0     102  ;
  8781     8   202     5     8   206     0      64  }
  8782     8   202     5     8   206     0     568  ENDMETHOD
  8783     8   202     5     8   207     0     569  STARTMETHOD
  8784     8   207    12     8   207     0     111  ByteOrder
  8785     8   207    22     8   207     0     111  order
  8786     8   207    27     8   207     0      59  (
  8787     8   207    28     8   207     0      60  )
  8788     8   207    30     8   207     0      63  {
  8789     8   212     9     8   207     0      19  return
  8790     8   212    16     8   207     0     111  ByteOrder.LITTLE_ENDIAN
  8791     8   212    39     8   207     0     102  ;
  8792     8   214     5     8   207     0      64  }
  8793     8   214     5     8   207     0     570  ENDMETHOD
  8794     8   216     1     8    -1     0      64  }
  8795     8   216     1     8    -1     1     571  ENDCLASS
  8796     8   216     1    -1    -1     1     572  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsCharBufferRL.java
  8797     9     1     1    -1    -1     1     573  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsDoubleBufferB.java
  8798     9    28     9    -1    -1     0     111  java.nio
  8799     9    28    17    -1    -1     0     102  ;
  8800     9    31     1     9    -1     0     574  STARTCLASS
  8801     9    31     1     9    -1     0      24  class
  8802     9    31     7     9    -1     0     111  ByteBufferAsDoubleBufferB
  8803     9    32     5     9    -1     0      38  extends
  8804     9    32    13     9    -1     0     111  DoubleBuffer
  8805     9    33     1     9    -1     0      63  {
  8806     9    37     5     9    -1     0      23  protected
  8807     9    37    21     9    -1     0     111  ByteBuffer
  8808     9    37    32     9    -1     0     111  bb
  8809     9    37    34     9    -1     0     102  ;
  8810     9    38     5     9    -1     0      23  protected
  8811     9    38    21     9    -1     0      36  int
  8812     9    38    25     9    -1     0     111  offset
  8813     9    38    31     9    -1     0     102  ;
  8814     9    38    31     9   208     0     575  STARTMETHOD
  8815     9    42     5     9   208     0     111  ByteBufferAsDoubleBufferB
  8816     9    42    30     9   208     0      59  (
  8817     9    42    31     9   208     0     111  ByteBuffer
  8818     9    42    42     9   208     0     111  bb
  8819     9    42    44     9   208     0      60  )
  8820     9    42    46     9   208     0      63  {
  8821     9    44     9     9   208     0      27  super
  8822     9    44    14     9   208     0      59  (
  8823     9    44    15     9   208     0      77  -
  8824     9    44    16     9   208     0     112  1
  8825     9    44    17     9   208     0      66  ,
  8826     9    44    19     9   208     0     112  0
  8827     9    44    20     9   208     0      66  ,
  8828     9    45    15     9   208     0     111  bb.remaining
  8829     9    45    27     9   208     0      59  (
  8830     9    45    28     9   208     0      60  )
  8831     9    45    30     9   208     0      84  >>
  8832     9    45    33     9   208     0     112  3
  8833     9    45    34     9   208     0      66  ,
  8834     9    46    15     9   208     0     111  bb.remaining
  8835     9    46    27     9   208     0      59  (
  8836     9    46    28     9   208     0      60  )
  8837     9    46    30     9   208     0      84  >>
  8838     9    46    33     9   208     0     112  3
  8839     9    46    34     9   208     0      60  )
  8840     9    46    35     9   208     0     102  ;
  8841     9    47     9     9   208     0     111  this.bb
  8842     9    47    17     9   208     0      67  =
  8843     9    47    19     9   208     0     111  bb
  8844     9    47    21     9   208     0     102  ;
  8845     9    49     9     9   208     0      36  int
  8846     9    49    13     9   208     0     111  cap
  8847     9    49    17     9   208     0      67  =
  8848     9    49    19     9   208     0     111  this.capacity
  8849     9    49    32     9   208     0      59  (
  8850     9    49    33     9   208     0      60  )
  8851     9    49    34     9   208     0     102  ;
  8852     9    50     9     9   208     0     111  this.limit
  8853     9    50    19     9   208     0      59  (
  8854     9    50    20     9   208     0     111  cap
  8855     9    50    23     9   208     0      60  )
  8856     9    50    24     9   208     0     102  ;
  8857     9    51     9     9   208     0      36  int
  8858     9    51    13     9   208     0     111  pos
  8859     9    51    17     9   208     0      67  =
  8860     9    51    19     9   208     0     111  this.position
  8861     9    51    32     9   208     0      59  (
  8862     9    51    33     9   208     0      60  )
  8863     9    51    34     9   208     0     102  ;
  8864     9    52     9     9   208     0     111  assert
  8865     9    52    16     9   208     0      59  (
  8866     9    52    17     9   208     0     111  pos
  8867     9    52    21     9   208     0      92  <=
  8868     9    52    24     9   208     0     111  cap
  8869     9    52    27     9   208     0      60  )
  8870     9    52    28     9   208     0     102  ;
  8871     9    53     9     9   208     0     111  offset
  8872     9    53    16     9   208     0      67  =
  8873     9    53    18     9   208     0     111  pos
  8874     9    53    21     9   208     0     102  ;
  8875     9    57     5     9   208     0      64  }
  8876     9    57     5     9   208     0     576  ENDMETHOD
  8877     9    57     5     9   209     0     577  STARTMETHOD
  8878     9    59     5     9   209     0     111  ByteBufferAsDoubleBufferB
  8879     9    59    30     9   209     0      59  (
  8880     9    59    31     9   209     0     111  ByteBuffer
  8881     9    59    42     9   209     0     111  bb
  8882     9    59    44     9   209     0      66  ,
  8883     9    60    38     9   209     0      36  int
  8884     9    60    42     9   209     0     111  mark
  8885     9    60    46     9   209     0      66  ,
  8886     9    60    48     9   209     0      36  int
  8887     9    60    52     9   209     0     111  pos
  8888     9    60    55     9   209     0      66  ,
  8889     9    60    57     9   209     0      36  int
  8890     9    60    61     9   209     0     111  lim
  8891     9    60    64     9   209     0      66  ,
  8892     9    60    66     9   209     0      36  int
  8893     9    60    70     9   209     0     111  cap
  8894     9    60    73     9   209     0      66  ,
  8895     9    61    38     9   209     0      36  int
  8896     9    61    42     9   209     0     111  off
  8897     9    61    45     9   209     0      60  )
  8898     9    62     5     9   209     0      63  {
  8899     9    64     9     9   209     0      27  super
  8900     9    64    14     9   209     0      59  (
  8901     9    64    15     9   209     0     111  mark
  8902     9    64    19     9   209     0      66  ,
  8903     9    64    21     9   209     0     111  pos
  8904     9    64    24     9   209     0      66  ,
  8905     9    64    26     9   209     0     111  lim
  8906     9    64    29     9   209     0      66  ,
  8907     9    64    31     9   209     0     111  cap
  8908     9    64    34     9   209     0      60  )
  8909     9    64    35     9   209     0     102  ;
  8910     9    65     9     9   209     1     111  this.bb
  8911     9    65    17     9   209     1      67  =
  8912     9    65    19     9   209     1     111  bb
  8913     9    65    21     9   209     1     102  ;
  8914     9    66     9     9   209     1     111  offset
  8915     9    66    16     9   209     1      67  =
  8916     9    66    18     9   209     1     111  off
  8917     9    66    21     9   209     1     102  ;
  8918     9    70     5     9   209     0      64  }
  8919     9    70     5     9   209     0     578  ENDMETHOD
  8920     9    70     5     9   210     0     579  STARTMETHOD
  8921     9    72    12     9   210     0     111  DoubleBuffer
  8922     9    72    25     9   210     0     111  slice
  8923     9    72    30     9   210     0      59  (
  8924     9    72    31     9   210     0      60  )
  8925     9    72    33     9   210     0      63  {
  8926     9    73     9     9   210     1      36  int
  8927     9    73    13     9   210     1     111  pos
  8928     9    73    17     9   210     1      67  =
  8929     9    73    19     9   210     1     111  this.position
  8930     9    73    32     9   210     1      59  (
  8931     9    73    33     9   210     1      60  )
  8932     9    73    34     9   210     1     102  ;
  8933     9    74     9     9   210     1      36  int
  8934     9    74    13     9   210     1     111  lim
  8935     9    74    17     9   210     1      67  =
  8936     9    74    19     9   210     1     111  this.limit
  8937     9    74    29     9   210     1      59  (
  8938     9    74    30     9   210     1      60  )
  8939     9    74    31     9   210     1     102  ;
  8940     9    75     9     9   210     0     111  assert
  8941     9    75    16     9   210     0      59  (
  8942     9    75    17     9   210     0     111  pos
  8943     9    75    21     9   210     0      92  <=
  8944     9    75    24     9   210     0     111  lim
  8945     9    75    27     9   210     0      60  )
  8946     9    75    28     9   210     0     102  ;
  8947     9    76     9     9   210     0      36  int
  8948     9    76    13     9   210     0     111  rem
  8949     9    76    17     9   210     0      67  =
  8950     9    76    19     9   210     0      59  (
  8951     9    76    20     9   210     0     111  pos
  8952     9    76    24     9   210     0      92  <=
  8953     9    76    27     9   210     0     111  lim
  8954     9    76    31     9   210     0      58  ?
  8955     9    76    33     9   210     0     111  lim
  8956     9    76    37     9   210     0      77  -
  8957     9    76    39     9   210     0     111  pos
  8958     9    76    43     9   210     0      65  :
  8959     9    76    45     9   210     0     112  0
  8960     9    76    46     9   210     0      60  )
  8961     9    76    47     9   210     0     102  ;
  8962     9    77     9     9   210     0      36  int
  8963     9    77    13     9   210     0     111  off
  8964     9    77    17     9   210     0      67  =
  8965     9    77    19     9   210     0      59  (
  8966     9    77    20     9   210     0     111  pos
  8967     9    77    24     9   210     0      90  <<
  8968     9    77    27     9   210     0     112  3
  8969     9    77    28     9   210     0      60  )
  8970     9    77    30     9   210     0      74  +
  8971     9    77    32     9   210     0     111  offset
  8972     9    77    38     9   210     0     102  ;
  8973     9    78     9     9   210     0     111  assert
  8974     9    78    16     9   210     0      59  (
  8975     9    78    17     9   210     0     111  off
  8976     9    78    21     9   210     0      88  >=
  8977     9    78    24     9   210     0     112  0
  8978     9    78    25     9   210     0      60  )
  8979     9    78    26     9   210     0     102  ;
  8980     9    79     9     9   210     0      19  return
  8981     9    79    20     9   210     0     111  ByteBufferAsDoubleBufferB
  8982     9    79    45     9   210     0      59  (
  8983     9    79    46     9   210     0     111  bb
  8984     9    79    48     9   210     0      66  ,
  8985     9    79    50     9   210     0      77  -
  8986     9    79    51     9   210     0     112  1
  8987     9    79    52     9   210     0      66  ,
  8988     9    79    54     9   210     0     112  0
  8989     9    79    55     9   210     0      66  ,
  8990     9    79    57     9   210     0     111  rem
  8991     9    79    60     9   210     0      66  ,
  8992     9    79    62     9   210     0     111  rem
  8993     9    79    65     9   210     0      66  ,
  8994     9    79    67     9   210     0     111  off
  8995     9    79    70     9   210     0      60  )
  8996     9    79    71     9   210     0     102  ;
  8997     9    80     5     9   210     0      64  }
  8998     9    80     5     9   210     0     580  ENDMETHOD
  8999     9    80     5     9   211     0     581  STARTMETHOD
  9000     9    82    12     9   211     0     111  DoubleBuffer
  9001     9    82    25     9   211     0     111  duplicate
  9002     9    82    34     9   211     0      59  (
  9003     9    82    35     9   211     0      60  )
  9004     9    82    37     9   211     0      63  {
  9005     9    83     9     9   211     0      19  return
  9006     9    83    20     9   211     0     111  ByteBufferAsDoubleBufferB
  9007     9    83    45     9   211     0      59  (
  9008     9    83    46     9   211     0     111  bb
  9009     9    83    48     9   211     0      66  ,
  9010     9    84    53     9   211     1     111  this.markValue
  9011     9    84    67     9   211     1      59  (
  9012     9    84    68     9   211     1      60  )
  9013     9    84    69     9   211     1      66  ,
  9014     9    85    53     9   211     1     111  this.position
  9015     9    85    66     9   211     1      59  (
  9016     9    85    67     9   211     1      60  )
  9017     9    85    68     9   211     1      66  ,
  9018     9    86    53     9   211     1     111  this.limit
  9019     9    86    63     9   211     1      59  (
  9020     9    86    64     9   211     1      60  )
  9021     9    86    65     9   211     1      66  ,
  9022     9    87    53     9   211     1     111  this.capacity
  9023     9    87    66     9   211     1      59  (
  9024     9    87    67     9   211     1      60  )
  9025     9    87    68     9   211     1      66  ,
  9026     9    88    53     9   211     0     111  offset
  9027     9    88    59     9   211     0      60  )
  9028     9    88    60     9   211     0     102  ;
  9029     9    89     5     9   211     0      64  }
  9030     9    89     5     9   211     0     582  ENDMETHOD
  9031     9    89     5     9   212     0     583  STARTMETHOD
  9032     9    91    12     9   212     0     111  DoubleBuffer
  9033     9    91    25     9   212     0     111  asReadOnlyBuffer
  9034     9    91    41     9   212     0      59  (
  9035     9    91    42     9   212     0      60  )
  9036     9    91    44     9   212     0      63  {
  9037     9    93     9     9   212     0      19  return
  9038     9    93    20     9   212     0     111  ByteBufferAsDoubleBufferRB
  9039     9    93    46     9   212     0      59  (
  9040     9    93    47     9   212     0     111  bb
  9041     9    93    49     9   212     0      66  ,
  9042     9    94    50     9   212     1     111  this.markValue
  9043     9    94    64     9   212     1      59  (
  9044     9    94    65     9   212     1      60  )
  9045     9    94    66     9   212     1      66  ,
  9046     9    95    50     9   212     1     111  this.position
  9047     9    95    63     9   212     1      59  (
  9048     9    95    64     9   212     1      60  )
  9049     9    95    65     9   212     1      66  ,
  9050     9    96    50     9   212     1     111  this.limit
  9051     9    96    60     9   212     1      59  (
  9052     9    96    61     9   212     1      60  )
  9053     9    96    62     9   212     1      66  ,
  9054     9    97    50     9   212     1     111  this.capacity
  9055     9    97    63     9   212     1      59  (
  9056     9    97    64     9   212     1      60  )
  9057     9    97    65     9   212     1      66  ,
  9058     9    98    50     9   212     0     111  offset
  9059     9    98    56     9   212     0      60  )
  9060     9    98    57     9   212     0     102  ;
  9061     9   102     5     9   212     0      64  }
  9062     9   102     5     9   212     0     584  ENDMETHOD
  9063     9   102     5     9   213     0     585  STARTMETHOD
  9064     9   106     5     9   213     0      23  protected
  9065     9   106    15     9   213     0      36  int
  9066     9   106    19     9   213     0     111  ix
  9067     9   106    21     9   213     0      59  (
  9068     9   106    22     9   213     0      36  int
  9069     9   106    26     9   213     0     111  i
  9070     9   106    27     9   213     0      60  )
  9071     9   106    29     9   213     0      63  {
  9072     9   107     9     9   213     0      19  return
  9073     9   107    16     9   213     0      59  (
  9074     9   107    17     9   213     0     111  i
  9075     9   107    19     9   213     0      90  <<
  9076     9   107    22     9   213     0     112  3
  9077     9   107    23     9   213     0      60  )
  9078     9   107    25     9   213     0      74  +
  9079     9   107    27     9   213     0     111  offset
  9080     9   107    33     9   213     0     102  ;
  9081     9   108     5     9   213     0      64  }
  9082     9   108     5     9   213     0     586  ENDMETHOD
  9083     9   108     5     9   214     0     587  STARTMETHOD
  9084     9   110    12     9   214     0      32  double
  9085     9   110    19     9   214     0     111  get
  9086     9   110    22     9   214     0      59  (
  9087     9   110    23     9   214     0      60  )
  9088     9   110    25     9   214     0      63  {
  9089     9   111     9     9   214     0      19  return
  9090     9   111    16     9   214     0     111  Bits.getDoubleB
  9091     9   111    31     9   214     0      59  (
  9092     9   111    32     9   214     0     111  bb
  9093     9   111    34     9   214     0      66  ,
  9094     9   111    36     9   214     0     111  ix
  9095     9   111    38     9   214     0      59  (
  9096     9   111    39     9   214     0     111  nextGetIndex
  9097     9   111    51     9   214     0      59  (
  9098     9   111    52     9   214     0      60  )
  9099     9   111    53     9   214     0      60  )
  9100     9   111    54     9   214     0      60  )
  9101     9   111    55     9   214     0     102  ;
  9102     9   112     5     9   214     0      64  }
  9103     9   112     5     9   214     0     588  ENDMETHOD
  9104     9   112     5     9   215     0     589  STARTMETHOD
  9105     9   114    12     9   215     0      32  double
  9106     9   114    19     9   215     0     111  get
  9107     9   114    22     9   215     0      59  (
  9108     9   114    23     9   215     0      36  int
  9109     9   114    27     9   215     0     111  i
  9110     9   114    28     9   215     0      60  )
  9111     9   114    30     9   215     0      63  {
  9112     9   115     9     9   215     0      19  return
  9113     9   115    16     9   215     0     111  Bits.getDoubleB
  9114     9   115    31     9   215     0      59  (
  9115     9   115    32     9   215     0     111  bb
  9116     9   115    34     9   215     0      66  ,
  9117     9   115    36     9   215     0     111  ix
  9118     9   115    38     9   215     0      59  (
  9119     9   115    39     9   215     0     111  checkIndex
  9120     9   115    49     9   215     0      59  (
  9121     9   115    50     9   215     0     111  i
  9122     9   115    51     9   215     0      60  )
  9123     9   115    52     9   215     0      60  )
  9124     9   115    53     9   215     0      60  )
  9125     9   115    54     9   215     0     102  ;
  9126     9   116     5     9   215     0      64  }
  9127     9   116     5     9   215     0     590  ENDMETHOD
  9128     9   116     5     9   216     0     591  STARTMETHOD
  9129     9   120    12     9   216     0     111  DoubleBuffer
  9130     9   120    25     9   216     0     111  put
  9131     9   120    28     9   216     0      59  (
  9132     9   120    29     9   216     0      32  double
  9133     9   120    36     9   216     0     111  x
  9134     9   120    37     9   216     0      60  )
  9135     9   120    39     9   216     0      63  {
  9136     9   122     9     9   216     0     111  Bits.putDoubleB
  9137     9   122    24     9   216     0      59  (
  9138     9   122    25     9   216     0     111  bb
  9139     9   122    27     9   216     0      66  ,
  9140     9   122    29     9   216     0     111  ix
  9141     9   122    31     9   216     0      59  (
  9142     9   122    32     9   216     0     111  nextPutIndex
  9143     9   122    44     9   216     0      59  (
  9144     9   122    45     9   216     0      60  )
  9145     9   122    46     9   216     0      60  )
  9146     9   122    47     9   216     0      66  ,
  9147     9   122    49     9   216     0     111  x
  9148     9   122    50     9   216     0      60  )
  9149     9   122    51     9   216     0     102  ;
  9150     9   123     9     9   216     0      19  return
  9151     9   123    16     9   216     0      44  this
  9152     9   123    20     9   216     0     102  ;
  9153     9   127     5     9   216     0      64  }
  9154     9   127     5     9   216     0     592  ENDMETHOD
  9155     9   127     5     9   217     0     593  STARTMETHOD
  9156     9   129    12     9   217     0     111  DoubleBuffer
  9157     9   129    25     9   217     0     111  put
  9158     9   129    28     9   217     0      59  (
  9159     9   129    29     9   217     0      36  int
  9160     9   129    33     9   217     0     111  i
  9161     9   129    34     9   217     0      66  ,
  9162     9   129    36     9   217     0      32  double
  9163     9   129    43     9   217     0     111  x
  9164     9   129    44     9   217     0      60  )
  9165     9   129    46     9   217     0      63  {
  9166     9   131     9     9   217     0     111  Bits.putDoubleB
  9167     9   131    24     9   217     0      59  (
  9168     9   131    25     9   217     0     111  bb
  9169     9   131    27     9   217     0      66  ,
  9170     9   131    29     9   217     0     111  ix
  9171     9   131    31     9   217     0      59  (
  9172     9   131    32     9   217     0     111  checkIndex
  9173     9   131    42     9   217     0      59  (
  9174     9   131    43     9   217     0     111  i
  9175     9   131    44     9   217     0      60  )
  9176     9   131    45     9   217     0      60  )
  9177     9   131    46     9   217     0      66  ,
  9178     9   131    48     9   217     0     111  x
  9179     9   131    49     9   217     0      60  )
  9180     9   131    50     9   217     0     102  ;
  9181     9   132     9     9   217     0      19  return
  9182     9   132    16     9   217     0      44  this
  9183     9   132    20     9   217     0     102  ;
  9184     9   136     5     9   217     0      64  }
  9185     9   136     5     9   217     0     594  ENDMETHOD
  9186     9   136     5     9   218     0     595  STARTMETHOD
  9187     9   138    12     9   218     0     111  DoubleBuffer
  9188     9   138    25     9   218     0     111  compact
  9189     9   138    32     9   218     0      59  (
  9190     9   138    33     9   218     0      60  )
  9191     9   138    35     9   218     0      63  {
  9192     9   140     9     9   218     1      36  int
  9193     9   140    13     9   218     1     111  pos
  9194     9   140    17     9   218     1      67  =
  9195     9   140    19     9   218     1     111  position
  9196     9   140    27     9   218     1      59  (
  9197     9   140    28     9   218     1      60  )
  9198     9   140    29     9   218     1     102  ;
  9199     9   141     9     9   218     1      36  int
  9200     9   141    13     9   218     1     111  lim
  9201     9   141    17     9   218     1      67  =
  9202     9   141    19     9   218     1     111  limit
  9203     9   141    24     9   218     1      59  (
  9204     9   141    25     9   218     1      60  )
  9205     9   141    26     9   218     1     102  ;
  9206     9   142     9     9   218     0     111  assert
  9207     9   142    16     9   218     0      59  (
  9208     9   142    17     9   218     0     111  pos
  9209     9   142    21     9   218     0      92  <=
  9210     9   142    24     9   218     0     111  lim
  9211     9   142    27     9   218     0      60  )
  9212     9   142    28     9   218     0     102  ;
  9213     9   143     9     9   218     0      36  int
  9214     9   143    13     9   218     0     111  rem
  9215     9   143    17     9   218     0      67  =
  9216     9   143    19     9   218     0      59  (
  9217     9   143    20     9   218     0     111  pos
  9218     9   143    24     9   218     0      92  <=
  9219     9   143    27     9   218     0     111  lim
  9220     9   143    31     9   218     0      58  ?
  9221     9   143    33     9   218     0     111  lim
  9222     9   143    37     9   218     0      77  -
  9223     9   143    39     9   218     0     111  pos
  9224     9   143    43     9   218     0      65  :
  9225     9   143    45     9   218     0     112  0
  9226     9   143    46     9   218     0      60  )
  9227     9   143    47     9   218     0     102  ;
  9228     9   145     9     9   218     0     111  ByteBuffer
  9229     9   145    20     9   218     0     111  db
  9230     9   145    23     9   218     0      67  =
  9231     9   145    25     9   218     0     111  bb.duplicate
  9232     9   145    37     9   218     0      59  (
  9233     9   145    38     9   218     0      60  )
  9234     9   145    39     9   218     0     102  ;
  9235     9   146     9     9   218     0     111  db.limit
  9236     9   146    17     9   218     0      59  (
  9237     9   146    18     9   218     0     111  ix
  9238     9   146    20     9   218     0      59  (
  9239     9   146    21     9   218     0     111  lim
  9240     9   146    24     9   218     0      60  )
  9241     9   146    25     9   218     0      60  )
  9242     9   146    26     9   218     0     102  ;
  9243     9   147     9     9   218     0     111  db.position
  9244     9   147    20     9   218     0      59  (
  9245     9   147    21     9   218     0     111  ix
  9246     9   147    23     9   218     0      59  (
  9247     9   147    24     9   218     0     112  0
  9248     9   147    25     9   218     0      60  )
  9249     9   147    26     9   218     0      60  )
  9250     9   147    27     9   218     0     102  ;
  9251     9   148     9     9   218     0     111  ByteBuffer
  9252     9   148    20     9   218     0     111  sb
  9253     9   148    23     9   218     0      67  =
  9254     9   148    25     9   218     0     111  db.slice
  9255     9   148    33     9   218     0      59  (
  9256     9   148    34     9   218     0      60  )
  9257     9   148    35     9   218     0     102  ;
  9258     9   149     9     9   218     0     111  sb.position
  9259     9   149    20     9   218     0      59  (
  9260     9   149    21     9   218     0     111  pos
  9261     9   149    25     9   218     0      90  <<
  9262     9   149    28     9   218     0     112  3
  9263     9   149    29     9   218     0      60  )
  9264     9   149    30     9   218     0     102  ;
  9265     9   150     9     9   218     0     111  sb.compact
  9266     9   150    19     9   218     0      59  (
  9267     9   150    20     9   218     0      60  )
  9268     9   150    21     9   218     0     102  ;
  9269     9   151     9     9   218     0     111  position
  9270     9   151    17     9   218     0      59  (
  9271     9   151    18     9   218     0     111  rem
  9272     9   151    21     9   218     0      60  )
  9273     9   151    22     9   218     0     102  ;
  9274     9   152     9     9   218     0     111  limit
  9275     9   152    14     9   218     0      59  (
  9276     9   152    15     9   218     0     111  capacity
  9277     9   152    23     9   218     0      59  (
  9278     9   152    24     9   218     0      60  )
  9279     9   152    25     9   218     0      60  )
  9280     9   152    26     9   218     0     102  ;
  9281     9   153     9     9   218     0      19  return
  9282     9   153    16     9   218     0      44  this
  9283     9   153    20     9   218     0     102  ;
  9284     9   157     5     9   218     0      64  }
  9285     9   157     5     9   218     0     596  ENDMETHOD
  9286     9   157     5     9   219     0     597  STARTMETHOD
  9287     9   159    12     9   219     0      39  boolean
  9288     9   159    20     9   219     0     111  isDirect
  9289     9   159    28     9   219     0      59  (
  9290     9   159    29     9   219     0      60  )
  9291     9   159    31     9   219     0      63  {
  9292     9   160     9     9   219     0      19  return
  9293     9   160    16     9   219     0     111  bb.isDirect
  9294     9   160    27     9   219     0      59  (
  9295     9   160    28     9   219     0      60  )
  9296     9   160    29     9   219     1     102  ;
  9297     9   161     5     9   219     1      64  }
  9298     9   161     5     9   219     0     598  ENDMETHOD
  9299     9   161     5     9   220     0     599  STARTMETHOD
  9300     9   163    12     9   220     0      39  boolean
  9301     9   163    20     9   220     0     111  isReadOnly
  9302     9   163    30     9   220     0      59  (
  9303     9   163    31     9   220     0      60  )
  9304     9   163    33     9   220     0      63  {
  9305     9   164     9     9   220     0      19  return
  9306     9   164    16     9   220     0      43  false
  9307     9   164    21     9   220     1     102  ;
  9308     9   165     5     9   220     1      64  }
  9309     9   165     5     9   220     0     600  ENDMETHOD
  9310     9   165     5     9   221     0     601  STARTMETHOD
  9311     9   207    12     9   221     0     111  ByteOrder
  9312     9   207    22     9   221     0     111  order
  9313     9   207    27     9   221     0      59  (
  9314     9   207    28     9   221     0      60  )
  9315     9   207    30     9   221     0      63  {
  9316     9   209     9     9   221     0      19  return
  9317     9   209    16     9   221     0     111  ByteOrder.BIG_ENDIAN
  9318     9   209    36     9   221     1     102  ;
  9319     9   214     5     9   221     1      64  }
  9320     9   214     5     9   221     0     602  ENDMETHOD
  9321     9   216     1     9    -1     0      64  }
  9322     9   216     1     9    -1     1     603  ENDCLASS
  9323     9   216     1    -1    -1     1     604  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsDoubleBufferB.java
  9324    10     1     1    -1    -1     1     605  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsDoubleBufferL.java
  9325    10    28     9    -1    -1     0     111  java.nio
  9326    10    28    17    -1    -1     0     102  ;
  9327    10    31     1    10    -1     0     606  STARTCLASS
  9328    10    31     1    10    -1     0      24  class
  9329    10    31     7    10    -1     0     111  ByteBufferAsDoubleBufferL
  9330    10    32     5    10    -1     0      38  extends
  9331    10    32    13    10    -1     0     111  DoubleBuffer
  9332    10    33     1    10    -1     0      63  {
  9333    10    37     5    10    -1     0      23  protected
  9334    10    37    21    10    -1     0     111  ByteBuffer
  9335    10    37    32    10    -1     0     111  bb
  9336    10    37    34    10    -1     0     102  ;
  9337    10    38     5    10    -1     0      23  protected
  9338    10    38    21    10    -1     0      36  int
  9339    10    38    25    10    -1     0     111  offset
  9340    10    38    31    10    -1     0     102  ;
  9341    10    38    31    10   222     0     607  STARTMETHOD
  9342    10    42     5    10   222     0     111  ByteBufferAsDoubleBufferL
  9343    10    42    30    10   222     0      59  (
  9344    10    42    31    10   222     0     111  ByteBuffer
  9345    10    42    42    10   222     0     111  bb
  9346    10    42    44    10   222     0      60  )
  9347    10    42    46    10   222     0      63  {
  9348    10    44     9    10   222     0      27  super
  9349    10    44    14    10   222     0      59  (
  9350    10    44    15    10   222     0      77  -
  9351    10    44    16    10   222     0     112  1
  9352    10    44    17    10   222     0      66  ,
  9353    10    44    19    10   222     0     112  0
  9354    10    44    20    10   222     0      66  ,
  9355    10    45    15    10   222     0     111  bb.remaining
  9356    10    45    27    10   222     0      59  (
  9357    10    45    28    10   222     0      60  )
  9358    10    45    30    10   222     0      84  >>
  9359    10    45    33    10   222     0     112  3
  9360    10    45    34    10   222     0      66  ,
  9361    10    46    15    10   222     0     111  bb.remaining
  9362    10    46    27    10   222     0      59  (
  9363    10    46    28    10   222     0      60  )
  9364    10    46    30    10   222     0      84  >>
  9365    10    46    33    10   222     0     112  3
  9366    10    46    34    10   222     0      60  )
  9367    10    46    35    10   222     0     102  ;
  9368    10    47     9    10   222     0     111  this.bb
  9369    10    47    17    10   222     0      67  =
  9370    10    47    19    10   222     0     111  bb
  9371    10    47    21    10   222     0     102  ;
  9372    10    49     9    10   222     0      36  int
  9373    10    49    13    10   222     0     111  cap
  9374    10    49    17    10   222     0      67  =
  9375    10    49    19    10   222     0     111  this.capacity
  9376    10    49    32    10   222     0      59  (
  9377    10    49    33    10   222     0      60  )
  9378    10    49    34    10   222     0     102  ;
  9379    10    50     9    10   222     0     111  this.limit
  9380    10    50    19    10   222     0      59  (
  9381    10    50    20    10   222     0     111  cap
  9382    10    50    23    10   222     0      60  )
  9383    10    50    24    10   222     0     102  ;
  9384    10    51     9    10   222     0      36  int
  9385    10    51    13    10   222     0     111  pos
  9386    10    51    17    10   222     0      67  =
  9387    10    51    19    10   222     0     111  this.position
  9388    10    51    32    10   222     0      59  (
  9389    10    51    33    10   222     0      60  )
  9390    10    51    34    10   222     0     102  ;
  9391    10    52     9    10   222     0     111  assert
  9392    10    52    16    10   222     0      59  (
  9393    10    52    17    10   222     0     111  pos
  9394    10    52    21    10   222     0      92  <=
  9395    10    52    24    10   222     0     111  cap
  9396    10    52    27    10   222     0      60  )
  9397    10    52    28    10   222     0     102  ;
  9398    10    53     9    10   222     0     111  offset
  9399    10    53    16    10   222     0      67  =
  9400    10    53    18    10   222     0     111  pos
  9401    10    53    21    10   222     0     102  ;
  9402    10    57     5    10   222     0      64  }
  9403    10    57     5    10   222     0     608  ENDMETHOD
  9404    10    57     5    10   223     0     609  STARTMETHOD
  9405    10    59     5    10   223     0     111  ByteBufferAsDoubleBufferL
  9406    10    59    30    10   223     0      59  (
  9407    10    59    31    10   223     0     111  ByteBuffer
  9408    10    59    42    10   223     0     111  bb
  9409    10    59    44    10   223     0      66  ,
  9410    10    60    38    10   223     0      36  int
  9411    10    60    42    10   223     0     111  mark
  9412    10    60    46    10   223     0      66  ,
  9413    10    60    48    10   223     0      36  int
  9414    10    60    52    10   223     0     111  pos
  9415    10    60    55    10   223     0      66  ,
  9416    10    60    57    10   223     0      36  int
  9417    10    60    61    10   223     0     111  lim
  9418    10    60    64    10   223     0      66  ,
  9419    10    60    66    10   223     0      36  int
  9420    10    60    70    10   223     0     111  cap
  9421    10    60    73    10   223     0      66  ,
  9422    10    61    38    10   223     0      36  int
  9423    10    61    42    10   223     0     111  off
  9424    10    61    45    10   223     0      60  )
  9425    10    62     5    10   223     0      63  {
  9426    10    64     9    10   223     0      27  super
  9427    10    64    14    10   223     0      59  (
  9428    10    64    15    10   223     0     111  mark
  9429    10    64    19    10   223     0      66  ,
  9430    10    64    21    10   223     0     111  pos
  9431    10    64    24    10   223     0      66  ,
  9432    10    64    26    10   223     0     111  lim
  9433    10    64    29    10   223     0      66  ,
  9434    10    64    31    10   223     0     111  cap
  9435    10    64    34    10   223     0      60  )
  9436    10    64    35    10   223     0     102  ;
  9437    10    65     9    10   223     1     111  this.bb
  9438    10    65    17    10   223     1      67  =
  9439    10    65    19    10   223     1     111  bb
  9440    10    65    21    10   223     1     102  ;
  9441    10    66     9    10   223     1     111  offset
  9442    10    66    16    10   223     1      67  =
  9443    10    66    18    10   223     1     111  off
  9444    10    66    21    10   223     1     102  ;
  9445    10    70     5    10   223     0      64  }
  9446    10    70     5    10   223     0     610  ENDMETHOD
  9447    10    70     5    10   224     0     611  STARTMETHOD
  9448    10    72    12    10   224     0     111  DoubleBuffer
  9449    10    72    25    10   224     0     111  slice
  9450    10    72    30    10   224     0      59  (
  9451    10    72    31    10   224     0      60  )
  9452    10    72    33    10   224     0      63  {
  9453    10    73     9    10   224     1      36  int
  9454    10    73    13    10   224     1     111  pos
  9455    10    73    17    10   224     1      67  =
  9456    10    73    19    10   224     1     111  this.position
  9457    10    73    32    10   224     1      59  (
  9458    10    73    33    10   224     1      60  )
  9459    10    73    34    10   224     1     102  ;
  9460    10    74     9    10   224     1      36  int
  9461    10    74    13    10   224     1     111  lim
  9462    10    74    17    10   224     1      67  =
  9463    10    74    19    10   224     1     111  this.limit
  9464    10    74    29    10   224     1      59  (
  9465    10    74    30    10   224     1      60  )
  9466    10    74    31    10   224     1     102  ;
  9467    10    75     9    10   224     0     111  assert
  9468    10    75    16    10   224     0      59  (
  9469    10    75    17    10   224     0     111  pos
  9470    10    75    21    10   224     0      92  <=
  9471    10    75    24    10   224     0     111  lim
  9472    10    75    27    10   224     0      60  )
  9473    10    75    28    10   224     0     102  ;
  9474    10    76     9    10   224     0      36  int
  9475    10    76    13    10   224     0     111  rem
  9476    10    76    17    10   224     0      67  =
  9477    10    76    19    10   224     0      59  (
  9478    10    76    20    10   224     0     111  pos
  9479    10    76    24    10   224     0      92  <=
  9480    10    76    27    10   224     0     111  lim
  9481    10    76    31    10   224     0      58  ?
  9482    10    76    33    10   224     0     111  lim
  9483    10    76    37    10   224     0      77  -
  9484    10    76    39    10   224     0     111  pos
  9485    10    76    43    10   224     0      65  :
  9486    10    76    45    10   224     0     112  0
  9487    10    76    46    10   224     0      60  )
  9488    10    76    47    10   224     0     102  ;
  9489    10    77     9    10   224     0      36  int
  9490    10    77    13    10   224     0     111  off
  9491    10    77    17    10   224     0      67  =
  9492    10    77    19    10   224     0      59  (
  9493    10    77    20    10   224     0     111  pos
  9494    10    77    24    10   224     0      90  <<
  9495    10    77    27    10   224     0     112  3
  9496    10    77    28    10   224     0      60  )
  9497    10    77    30    10   224     0      74  +
  9498    10    77    32    10   224     0     111  offset
  9499    10    77    38    10   224     0     102  ;
  9500    10    78     9    10   224     0     111  assert
  9501    10    78    16    10   224     0      59  (
  9502    10    78    17    10   224     0     111  off
  9503    10    78    21    10   224     0      88  >=
  9504    10    78    24    10   224     0     112  0
  9505    10    78    25    10   224     0      60  )
  9506    10    78    26    10   224     0     102  ;
  9507    10    79     9    10   224     0      19  return
  9508    10    79    20    10   224     0     111  ByteBufferAsDoubleBufferL
  9509    10    79    45    10   224     0      59  (
  9510    10    79    46    10   224     0     111  bb
  9511    10    79    48    10   224     0      66  ,
  9512    10    79    50    10   224     0      77  -
  9513    10    79    51    10   224     0     112  1
  9514    10    79    52    10   224     0      66  ,
  9515    10    79    54    10   224     0     112  0
  9516    10    79    55    10   224     0      66  ,
  9517    10    79    57    10   224     0     111  rem
  9518    10    79    60    10   224     0      66  ,
  9519    10    79    62    10   224     0     111  rem
  9520    10    79    65    10   224     0      66  ,
  9521    10    79    67    10   224     0     111  off
  9522    10    79    70    10   224     0      60  )
  9523    10    79    71    10   224     0     102  ;
  9524    10    80     5    10   224     0      64  }
  9525    10    80     5    10   224     0     612  ENDMETHOD
  9526    10    80     5    10   225     0     613  STARTMETHOD
  9527    10    82    12    10   225     0     111  DoubleBuffer
  9528    10    82    25    10   225     0     111  duplicate
  9529    10    82    34    10   225     0      59  (
  9530    10    82    35    10   225     0      60  )
  9531    10    82    37    10   225     0      63  {
  9532    10    83     9    10   225     0      19  return
  9533    10    83    20    10   225     0     111  ByteBufferAsDoubleBufferL
  9534    10    83    45    10   225     0      59  (
  9535    10    83    46    10   225     0     111  bb
  9536    10    83    48    10   225     0      66  ,
  9537    10    84    53    10   225     1     111  this.markValue
  9538    10    84    67    10   225     1      59  (
  9539    10    84    68    10   225     1      60  )
  9540    10    84    69    10   225     1      66  ,
  9541    10    85    53    10   225     1     111  this.position
  9542    10    85    66    10   225     1      59  (
  9543    10    85    67    10   225     1      60  )
  9544    10    85    68    10   225     1      66  ,
  9545    10    86    53    10   225     1     111  this.limit
  9546    10    86    63    10   225     1      59  (
  9547    10    86    64    10   225     1      60  )
  9548    10    86    65    10   225     1      66  ,
  9549    10    87    53    10   225     1     111  this.capacity
  9550    10    87    66    10   225     1      59  (
  9551    10    87    67    10   225     1      60  )
  9552    10    87    68    10   225     1      66  ,
  9553    10    88    53    10   225     0     111  offset
  9554    10    88    59    10   225     0      60  )
  9555    10    88    60    10   225     0     102  ;
  9556    10    89     5    10   225     0      64  }
  9557    10    89     5    10   225     0     614  ENDMETHOD
  9558    10    89     5    10   226     0     615  STARTMETHOD
  9559    10    91    12    10   226     0     111  DoubleBuffer
  9560    10    91    25    10   226     0     111  asReadOnlyBuffer
  9561    10    91    41    10   226     0      59  (
  9562    10    91    42    10   226     0      60  )
  9563    10    91    44    10   226     0      63  {
  9564    10    93     9    10   226     0      19  return
  9565    10    93    20    10   226     0     111  ByteBufferAsDoubleBufferRL
  9566    10    93    46    10   226     0      59  (
  9567    10    93    47    10   226     0     111  bb
  9568    10    93    49    10   226     0      66  ,
  9569    10    94    50    10   226     1     111  this.markValue
  9570    10    94    64    10   226     1      59  (
  9571    10    94    65    10   226     1      60  )
  9572    10    94    66    10   226     1      66  ,
  9573    10    95    50    10   226     1     111  this.position
  9574    10    95    63    10   226     1      59  (
  9575    10    95    64    10   226     1      60  )
  9576    10    95    65    10   226     1      66  ,
  9577    10    96    50    10   226     1     111  this.limit
  9578    10    96    60    10   226     1      59  (
  9579    10    96    61    10   226     1      60  )
  9580    10    96    62    10   226     1      66  ,
  9581    10    97    50    10   226     1     111  this.capacity
  9582    10    97    63    10   226     1      59  (
  9583    10    97    64    10   226     1      60  )
  9584    10    97    65    10   226     1      66  ,
  9585    10    98    50    10   226     0     111  offset
  9586    10    98    56    10   226     0      60  )
  9587    10    98    57    10   226     0     102  ;
  9588    10   102     5    10   226     0      64  }
  9589    10   102     5    10   226     0     616  ENDMETHOD
  9590    10   102     5    10   227     0     617  STARTMETHOD
  9591    10   106     5    10   227     0      23  protected
  9592    10   106    15    10   227     0      36  int
  9593    10   106    19    10   227     0     111  ix
  9594    10   106    21    10   227     0      59  (
  9595    10   106    22    10   227     0      36  int
  9596    10   106    26    10   227     0     111  i
  9597    10   106    27    10   227     0      60  )
  9598    10   106    29    10   227     0      63  {
  9599    10   107     9    10   227     0      19  return
  9600    10   107    16    10   227     0      59  (
  9601    10   107    17    10   227     0     111  i
  9602    10   107    19    10   227     0      90  <<
  9603    10   107    22    10   227     0     112  3
  9604    10   107    23    10   227     0      60  )
  9605    10   107    25    10   227     0      74  +
  9606    10   107    27    10   227     0     111  offset
  9607    10   107    33    10   227     0     102  ;
  9608    10   108     5    10   227     0      64  }
  9609    10   108     5    10   227     0     618  ENDMETHOD
  9610    10   108     5    10   228     0     619  STARTMETHOD
  9611    10   110    12    10   228     0      32  double
  9612    10   110    19    10   228     0     111  get
  9613    10   110    22    10   228     0      59  (
  9614    10   110    23    10   228     0      60  )
  9615    10   110    25    10   228     0      63  {
  9616    10   111     9    10   228     0      19  return
  9617    10   111    16    10   228     0     111  Bits.getDoubleL
  9618    10   111    31    10   228     0      59  (
  9619    10   111    32    10   228     0     111  bb
  9620    10   111    34    10   228     0      66  ,
  9621    10   111    36    10   228     0     111  ix
  9622    10   111    38    10   228     0      59  (
  9623    10   111    39    10   228     0     111  nextGetIndex
  9624    10   111    51    10   228     0      59  (
  9625    10   111    52    10   228     0      60  )
  9626    10   111    53    10   228     0      60  )
  9627    10   111    54    10   228     0      60  )
  9628    10   111    55    10   228     0     102  ;
  9629    10   112     5    10   228     0      64  }
  9630    10   112     5    10   228     0     620  ENDMETHOD
  9631    10   112     5    10   229     0     621  STARTMETHOD
  9632    10   114    12    10   229     0      32  double
  9633    10   114    19    10   229     0     111  get
  9634    10   114    22    10   229     0      59  (
  9635    10   114    23    10   229     0      36  int
  9636    10   114    27    10   229     0     111  i
  9637    10   114    28    10   229     0      60  )
  9638    10   114    30    10   229     0      63  {
  9639    10   115     9    10   229     0      19  return
  9640    10   115    16    10   229     0     111  Bits.getDoubleL
  9641    10   115    31    10   229     0      59  (
  9642    10   115    32    10   229     0     111  bb
  9643    10   115    34    10   229     0      66  ,
  9644    10   115    36    10   229     0     111  ix
  9645    10   115    38    10   229     0      59  (
  9646    10   115    39    10   229     0     111  checkIndex
  9647    10   115    49    10   229     0      59  (
  9648    10   115    50    10   229     0     111  i
  9649    10   115    51    10   229     0      60  )
  9650    10   115    52    10   229     0      60  )
  9651    10   115    53    10   229     0      60  )
  9652    10   115    54    10   229     0     102  ;
  9653    10   116     5    10   229     0      64  }
  9654    10   116     5    10   229     0     622  ENDMETHOD
  9655    10   116     5    10   230     0     623  STARTMETHOD
  9656    10   120    12    10   230     0     111  DoubleBuffer
  9657    10   120    25    10   230     0     111  put
  9658    10   120    28    10   230     0      59  (
  9659    10   120    29    10   230     0      32  double
  9660    10   120    36    10   230     0     111  x
  9661    10   120    37    10   230     0      60  )
  9662    10   120    39    10   230     0      63  {
  9663    10   122     9    10   230     0     111  Bits.putDoubleL
  9664    10   122    24    10   230     0      59  (
  9665    10   122    25    10   230     0     111  bb
  9666    10   122    27    10   230     0      66  ,
  9667    10   122    29    10   230     0     111  ix
  9668    10   122    31    10   230     0      59  (
  9669    10   122    32    10   230     0     111  nextPutIndex
  9670    10   122    44    10   230     0      59  (
  9671    10   122    45    10   230     0      60  )
  9672    10   122    46    10   230     0      60  )
  9673    10   122    47    10   230     0      66  ,
  9674    10   122    49    10   230     0     111  x
  9675    10   122    50    10   230     0      60  )
  9676    10   122    51    10   230     0     102  ;
  9677    10   123     9    10   230     0      19  return
  9678    10   123    16    10   230     0      44  this
  9679    10   123    20    10   230     0     102  ;
  9680    10   127     5    10   230     0      64  }
  9681    10   127     5    10   230     0     624  ENDMETHOD
  9682    10   127     5    10   231     0     625  STARTMETHOD
  9683    10   129    12    10   231     0     111  DoubleBuffer
  9684    10   129    25    10   231     0     111  put
  9685    10   129    28    10   231     0      59  (
  9686    10   129    29    10   231     0      36  int
  9687    10   129    33    10   231     0     111  i
  9688    10   129    34    10   231     0      66  ,
  9689    10   129    36    10   231     0      32  double
  9690    10   129    43    10   231     0     111  x
  9691    10   129    44    10   231     0      60  )
  9692    10   129    46    10   231     0      63  {
  9693    10   131     9    10   231     0     111  Bits.putDoubleL
  9694    10   131    24    10   231     0      59  (
  9695    10   131    25    10   231     0     111  bb
  9696    10   131    27    10   231     0      66  ,
  9697    10   131    29    10   231     0     111  ix
  9698    10   131    31    10   231     0      59  (
  9699    10   131    32    10   231     0     111  checkIndex
  9700    10   131    42    10   231     0      59  (
  9701    10   131    43    10   231     0     111  i
  9702    10   131    44    10   231     0      60  )
  9703    10   131    45    10   231     0      60  )
  9704    10   131    46    10   231     0      66  ,
  9705    10   131    48    10   231     0     111  x
  9706    10   131    49    10   231     0      60  )
  9707    10   131    50    10   231     0     102  ;
  9708    10   132     9    10   231     0      19  return
  9709    10   132    16    10   231     0      44  this
  9710    10   132    20    10   231     0     102  ;
  9711    10   136     5    10   231     0      64  }
  9712    10   136     5    10   231     0     626  ENDMETHOD
  9713    10   136     5    10   232     0     627  STARTMETHOD
  9714    10   138    12    10   232     0     111  DoubleBuffer
  9715    10   138    25    10   232     0     111  compact
  9716    10   138    32    10   232     0      59  (
  9717    10   138    33    10   232     0      60  )
  9718    10   138    35    10   232     0      63  {
  9719    10   140     9    10   232     1      36  int
  9720    10   140    13    10   232     1     111  pos
  9721    10   140    17    10   232     1      67  =
  9722    10   140    19    10   232     1     111  position
  9723    10   140    27    10   232     1      59  (
  9724    10   140    28    10   232     1      60  )
  9725    10   140    29    10   232     1     102  ;
  9726    10   141     9    10   232     1      36  int
  9727    10   141    13    10   232     1     111  lim
  9728    10   141    17    10   232     1      67  =
  9729    10   141    19    10   232     1     111  limit
  9730    10   141    24    10   232     1      59  (
  9731    10   141    25    10   232     1      60  )
  9732    10   141    26    10   232     1     102  ;
  9733    10   142     9    10   232     0     111  assert
  9734    10   142    16    10   232     0      59  (
  9735    10   142    17    10   232     0     111  pos
  9736    10   142    21    10   232     0      92  <=
  9737    10   142    24    10   232     0     111  lim
  9738    10   142    27    10   232     0      60  )
  9739    10   142    28    10   232     0     102  ;
  9740    10   143     9    10   232     0      36  int
  9741    10   143    13    10   232     0     111  rem
  9742    10   143    17    10   232     0      67  =
  9743    10   143    19    10   232     0      59  (
  9744    10   143    20    10   232     0     111  pos
  9745    10   143    24    10   232     0      92  <=
  9746    10   143    27    10   232     0     111  lim
  9747    10   143    31    10   232     0      58  ?
  9748    10   143    33    10   232     0     111  lim
  9749    10   143    37    10   232     0      77  -
  9750    10   143    39    10   232     0     111  pos
  9751    10   143    43    10   232     0      65  :
  9752    10   143    45    10   232     0     112  0
  9753    10   143    46    10   232     0      60  )
  9754    10   143    47    10   232     0     102  ;
  9755    10   145     9    10   232     0     111  ByteBuffer
  9756    10   145    20    10   232     0     111  db
  9757    10   145    23    10   232     0      67  =
  9758    10   145    25    10   232     0     111  bb.duplicate
  9759    10   145    37    10   232     0      59  (
  9760    10   145    38    10   232     0      60  )
  9761    10   145    39    10   232     0     102  ;
  9762    10   146     9    10   232     0     111  db.limit
  9763    10   146    17    10   232     0      59  (
  9764    10   146    18    10   232     0     111  ix
  9765    10   146    20    10   232     0      59  (
  9766    10   146    21    10   232     0     111  lim
  9767    10   146    24    10   232     0      60  )
  9768    10   146    25    10   232     0      60  )
  9769    10   146    26    10   232     0     102  ;
  9770    10   147     9    10   232     0     111  db.position
  9771    10   147    20    10   232     0      59  (
  9772    10   147    21    10   232     0     111  ix
  9773    10   147    23    10   232     0      59  (
  9774    10   147    24    10   232     0     112  0
  9775    10   147    25    10   232     0      60  )
  9776    10   147    26    10   232     0      60  )
  9777    10   147    27    10   232     0     102  ;
  9778    10   148     9    10   232     0     111  ByteBuffer
  9779    10   148    20    10   232     0     111  sb
  9780    10   148    23    10   232     0      67  =
  9781    10   148    25    10   232     0     111  db.slice
  9782    10   148    33    10   232     0      59  (
  9783    10   148    34    10   232     0      60  )
  9784    10   148    35    10   232     0     102  ;
  9785    10   149     9    10   232     0     111  sb.position
  9786    10   149    20    10   232     0      59  (
  9787    10   149    21    10   232     0     111  pos
  9788    10   149    25    10   232     0      90  <<
  9789    10   149    28    10   232     0     112  3
  9790    10   149    29    10   232     0      60  )
  9791    10   149    30    10   232     0     102  ;
  9792    10   150     9    10   232     0     111  sb.compact
  9793    10   150    19    10   232     0      59  (
  9794    10   150    20    10   232     0      60  )
  9795    10   150    21    10   232     0     102  ;
  9796    10   151     9    10   232     0     111  position
  9797    10   151    17    10   232     0      59  (
  9798    10   151    18    10   232     0     111  rem
  9799    10   151    21    10   232     0      60  )
  9800    10   151    22    10   232     0     102  ;
  9801    10   152     9    10   232     0     111  limit
  9802    10   152    14    10   232     0      59  (
  9803    10   152    15    10   232     0     111  capacity
  9804    10   152    23    10   232     0      59  (
  9805    10   152    24    10   232     0      60  )
  9806    10   152    25    10   232     0      60  )
  9807    10   152    26    10   232     0     102  ;
  9808    10   153     9    10   232     0      19  return
  9809    10   153    16    10   232     0      44  this
  9810    10   153    20    10   232     0     102  ;
  9811    10   157     5    10   232     0      64  }
  9812    10   157     5    10   232     0     628  ENDMETHOD
  9813    10   157     5    10   233     0     629  STARTMETHOD
  9814    10   159    12    10   233     0      39  boolean
  9815    10   159    20    10   233     0     111  isDirect
  9816    10   159    28    10   233     0      59  (
  9817    10   159    29    10   233     0      60  )
  9818    10   159    31    10   233     0      63  {
  9819    10   160     9    10   233     0      19  return
  9820    10   160    16    10   233     0     111  bb.isDirect
  9821    10   160    27    10   233     0      59  (
  9822    10   160    28    10   233     0      60  )
  9823    10   160    29    10   233     1     102  ;
  9824    10   161     5    10   233     1      64  }
  9825    10   161     5    10   233     0     630  ENDMETHOD
  9826    10   161     5    10   234     0     631  STARTMETHOD
  9827    10   163    12    10   234     0      39  boolean
  9828    10   163    20    10   234     0     111  isReadOnly
  9829    10   163    30    10   234     0      59  (
  9830    10   163    31    10   234     0      60  )
  9831    10   163    33    10   234     0      63  {
  9832    10   164     9    10   234     0      19  return
  9833    10   164    16    10   234     0      43  false
  9834    10   164    21    10   234     1     102  ;
  9835    10   165     5    10   234     1      64  }
  9836    10   165     5    10   234     0     632  ENDMETHOD
  9837    10   165     5    10   235     0     633  STARTMETHOD
  9838    10   207    12    10   235     0     111  ByteOrder
  9839    10   207    22    10   235     0     111  order
  9840    10   207    27    10   235     0      59  (
  9841    10   207    28    10   235     0      60  )
  9842    10   207    30    10   235     0      63  {
  9843    10   212     9    10   235     0      19  return
  9844    10   212    16    10   235     0     111  ByteOrder.LITTLE_ENDIAN
  9845    10   212    39    10   235     1     102  ;
  9846    10   214     5    10   235     1      64  }
  9847    10   214     5    10   235     0     634  ENDMETHOD
  9848    10   216     1    10    -1     0      64  }
  9849    10   216     1    10    -1     1     635  ENDCLASS
  9850    10   216     1    -1    -1     1     636  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsDoubleBufferL.java
  9851    11     1     1    -1    -1     1     637  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsDoubleBufferRB.java
  9852    11    28     9    -1    -1     0     111  java.nio
  9853    11    28    17    -1    -1     0     102  ;
  9854    11    31     1    11    -1     0     638  STARTCLASS
  9855    11    31     1    11    -1     0      24  class
  9856    11    31     7    11    -1     0     111  ByteBufferAsDoubleBufferRB
  9857    11    32     5    11    -1     0      38  extends
  9858    11    32    13    11    -1     0     111  ByteBufferAsDoubleBufferB
  9859    11    33     1    11    -1     0      63  {
  9860    11    33     1    11   236     0     639  STARTMETHOD
  9861    11    42     5    11   236     0     111  ByteBufferAsDoubleBufferRB
  9862    11    42    31    11   236     0      59  (
  9863    11    42    32    11   236     0     111  ByteBuffer
  9864    11    42    43    11   236     0     111  bb
  9865    11    42    45    11   236     0      60  )
  9866    11    42    47    11   236     0      63  {
  9867    11    55     9    11   236     0      27  super
  9868    11    55    14    11   236     0      59  (
  9869    11    55    15    11   236     0     111  bb
  9870    11    55    17    11   236     0      60  )
  9871    11    55    18    11   236     0     102  ;
  9872    11    57     5    11   236     0      64  }
  9873    11    57     5    11   236     0     640  ENDMETHOD
  9874    11    57     5    11   237     0     641  STARTMETHOD
  9875    11    59     5    11   237     0     111  ByteBufferAsDoubleBufferRB
  9876    11    59    31    11   237     0      59  (
  9877    11    59    32    11   237     0     111  ByteBuffer
  9878    11    59    43    11   237     0     111  bb
  9879    11    59    45    11   237     0      66  ,
  9880    11    60    38    11   237     0      36  int
  9881    11    60    42    11   237     0     111  mark
  9882    11    60    46    11   237     0      66  ,
  9883    11    60    48    11   237     0      36  int
  9884    11    60    52    11   237     0     111  pos
  9885    11    60    55    11   237     0      66  ,
  9886    11    60    57    11   237     0      36  int
  9887    11    60    61    11   237     0     111  lim
  9888    11    60    64    11   237     0      66  ,
  9889    11    60    66    11   237     0      36  int
  9890    11    60    70    11   237     0     111  cap
  9891    11    60    73    11   237     0      66  ,
  9892    11    61    38    11   237     0      36  int
  9893    11    61    42    11   237     0     111  off
  9894    11    61    45    11   237     0      60  )
  9895    11    62     5    11   237     0      63  {
  9896    11    68     9    11   237     0      27  super
  9897    11    68    14    11   237     0      59  (
  9898    11    68    15    11   237     0     111  bb
  9899    11    68    17    11   237     0      66  ,
  9900    11    68    19    11   237     0     111  mark
  9901    11    68    23    11   237     0      66  ,
  9902    11    68    25    11   237     0     111  pos
  9903    11    68    28    11   237     0      66  ,
  9904    11    68    30    11   237     0     111  lim
  9905    11    68    33    11   237     0      66  ,
  9906    11    68    35    11   237     0     111  cap
  9907    11    68    38    11   237     0      66  ,
  9908    11    68    40    11   237     0     111  off
  9909    11    68    43    11   237     0      60  )
  9910    11    68    44    11   237     0     102  ;
  9911    11    70     5    11   237     0      64  }
  9912    11    70     5    11   237     0     642  ENDMETHOD
  9913    11    70     5    11   238     0     643  STARTMETHOD
  9914    11    72    12    11   238     0     111  DoubleBuffer
  9915    11    72    25    11   238     0     111  slice
  9916    11    72    30    11   238     0      59  (
  9917    11    72    31    11   238     0      60  )
  9918    11    72    33    11   238     0      63  {
  9919    11    73     9    11   238     1      36  int
  9920    11    73    13    11   238     1     111  pos
  9921    11    73    17    11   238     1      67  =
  9922    11    73    19    11   238     1     111  this.position
  9923    11    73    32    11   238     1      59  (
  9924    11    73    33    11   238     1      60  )
  9925    11    73    34    11   238     1     102  ;
  9926    11    74     9    11   238     1      36  int
  9927    11    74    13    11   238     1     111  lim
  9928    11    74    17    11   238     1      67  =
  9929    11    74    19    11   238     1     111  this.limit
  9930    11    74    29    11   238     1      59  (
  9931    11    74    30    11   238     1      60  )
  9932    11    74    31    11   238     1     102  ;
  9933    11    75     9    11   238     0     111  assert
  9934    11    75    16    11   238     0      59  (
  9935    11    75    17    11   238     0     111  pos
  9936    11    75    21    11   238     0      92  <=
  9937    11    75    24    11   238     0     111  lim
  9938    11    75    27    11   238     0      60  )
  9939    11    75    28    11   238     0     102  ;
  9940    11    76     9    11   238     0      36  int
  9941    11    76    13    11   238     0     111  rem
  9942    11    76    17    11   238     0      67  =
  9943    11    76    19    11   238     0      59  (
  9944    11    76    20    11   238     0     111  pos
  9945    11    76    24    11   238     0      92  <=
  9946    11    76    27    11   238     0     111  lim
  9947    11    76    31    11   238     0      58  ?
  9948    11    76    33    11   238     0     111  lim
  9949    11    76    37    11   238     0      77  -
  9950    11    76    39    11   238     0     111  pos
  9951    11    76    43    11   238     0      65  :
  9952    11    76    45    11   238     0     112  0
  9953    11    76    46    11   238     0      60  )
  9954    11    76    47    11   238     0     102  ;
  9955    11    77     9    11   238     0      36  int
  9956    11    77    13    11   238     0     111  off
  9957    11    77    17    11   238     0      67  =
  9958    11    77    19    11   238     0      59  (
  9959    11    77    20    11   238     0     111  pos
  9960    11    77    24    11   238     0      90  <<
  9961    11    77    27    11   238     0     112  3
  9962    11    77    28    11   238     0      60  )
  9963    11    77    30    11   238     0      74  +
  9964    11    77    32    11   238     0     111  offset
  9965    11    77    38    11   238     0     102  ;
  9966    11    78     9    11   238     0     111  assert
  9967    11    78    16    11   238     0      59  (
  9968    11    78    17    11   238     0     111  off
  9969    11    78    21    11   238     0      88  >=
  9970    11    78    24    11   238     0     112  0
  9971    11    78    25    11   238     0      60  )
  9972    11    78    26    11   238     0     102  ;
  9973    11    79     9    11   238     0      19  return
  9974    11    79    20    11   238     0     111  ByteBufferAsDoubleBufferRB
  9975    11    79    46    11   238     0      59  (
  9976    11    79    47    11   238     0     111  bb
  9977    11    79    49    11   238     0      66  ,
  9978    11    79    51    11   238     0      77  -
  9979    11    79    52    11   238     0     112  1
  9980    11    79    53    11   238     0      66  ,
  9981    11    79    55    11   238     0     112  0
  9982    11    79    56    11   238     0      66  ,
  9983    11    79    58    11   238     0     111  rem
  9984    11    79    61    11   238     0      66  ,
  9985    11    79    63    11   238     0     111  rem
  9986    11    79    66    11   238     0      66  ,
  9987    11    79    68    11   238     0     111  off
  9988    11    79    71    11   238     0      60  )
  9989    11    79    72    11   238     0     102  ;
  9990    11    80     5    11   238     0      64  }
  9991    11    80     5    11   238     0     644  ENDMETHOD
  9992    11    80     5    11   239     0     645  STARTMETHOD
  9993    11    82    12    11   239     0     111  DoubleBuffer
  9994    11    82    25    11   239     0     111  duplicate
  9995    11    82    34    11   239     0      59  (
  9996    11    82    35    11   239     0      60  )
  9997    11    82    37    11   239     0      63  {
  9998    11    83     9    11   239     0      19  return
  9999    11    83    20    11   239     0     111  ByteBufferAsDoubleBufferRB
 10000    11    83    46    11   239     0      59  (
 10001    11    83    47    11   239     0     111  bb
 10002    11    83    49    11   239     0      66  ,
 10003    11    84    53    11   239     1     111  this.markValue
 10004    11    84    67    11   239     1      59  (
 10005    11    84    68    11   239     1      60  )
 10006    11    84    69    11   239     1      66  ,
 10007    11    85    53    11   239     1     111  this.position
 10008    11    85    66    11   239     1      59  (
 10009    11    85    67    11   239     1      60  )
 10010    11    85    68    11   239     1      66  ,
 10011    11    86    53    11   239     1     111  this.limit
 10012    11    86    63    11   239     1      59  (
 10013    11    86    64    11   239     1      60  )
 10014    11    86    65    11   239     1      66  ,
 10015    11    87    53    11   239     1     111  this.capacity
 10016    11    87    66    11   239     1      59  (
 10017    11    87    67    11   239     1      60  )
 10018    11    87    68    11   239     1      66  ,
 10019    11    88    53    11   239     0     111  offset
 10020    11    88    59    11   239     0      60  )
 10021    11    88    60    11   239     0     102  ;
 10022    11    89     5    11   239     0      64  }
 10023    11    89     5    11   239     0     646  ENDMETHOD
 10024    11    89     5    11   240     0     647  STARTMETHOD
 10025    11    91    12    11   240     0     111  DoubleBuffer
 10026    11    91    25    11   240     0     111  asReadOnlyBuffer
 10027    11    91    41    11   240     0      59  (
 10028    11    91    42    11   240     0      60  )
 10029    11    91    44    11   240     0      63  {
 10030    11   100     9    11   240     0      19  return
 10031    11   100    16    11   240     0     111  duplicate
 10032    11   100    25    11   240     0      59  (
 10033    11   100    26    11   240     0      60  )
 10034    11   100    27    11   240     0     102  ;
 10035    11   102     5    11   240     0      64  }
 10036    11   102     5    11   240     0     648  ENDMETHOD
 10037    11   102     5    11   241     0     649  STARTMETHOD
 10038    11   120    12    11   241     0     111  DoubleBuffer
 10039    11   120    25    11   241     0     111  put
 10040    11   120    28    11   241     0      59  (
 10041    11   120    29    11   241     0      32  double
 10042    11   120    36    11   241     0     111  x
 10043    11   120    37    11   241     0      60  )
 10044    11   120    39    11   241     0      63  {
 10045    11   125     9    11   241     0      20  throw
 10046    11   125    19    11   241     0     111  ReadOnlyBufferException
 10047    11   125    42    11   241     0      59  (
 10048    11   125    43    11   241     0      60  )
 10049    11   125    44    11   241     0     102  ;
 10050    11   127     5    11   241     0      64  }
 10051    11   127     5    11   241     0     650  ENDMETHOD
 10052    11   127     5    11   242     0     651  STARTMETHOD
 10053    11   129    12    11   242     0     111  DoubleBuffer
 10054    11   129    25    11   242     0     111  put
 10055    11   129    28    11   242     0      59  (
 10056    11   129    29    11   242     0      36  int
 10057    11   129    33    11   242     0     111  i
 10058    11   129    34    11   242     0      66  ,
 10059    11   129    36    11   242     0      32  double
 10060    11   129    43    11   242     0     111  x
 10061    11   129    44    11   242     0      60  )
 10062    11   129    46    11   242     0      63  {
 10063    11   134     9    11   242     0      20  throw
 10064    11   134    19    11   242     1     111  ReadOnlyBufferException
 10065    11   134    42    11   242     1      59  (
 10066    11   134    43    11   242     1      60  )
 10067    11   134    44    11   242     1     102  ;
 10068    11   136     5    11   242     1      64  }
 10069    11   136     5    11   242     0     652  ENDMETHOD
 10070    11   136     5    11   243     0     653  STARTMETHOD
 10071    11   138    12    11   243     0     111  DoubleBuffer
 10072    11   138    25    11   243     0     111  compact
 10073    11   138    32    11   243     0      59  (
 10074    11   138    33    11   243     0      60  )
 10075    11   138    35    11   243     0      63  {
 10076    11   155     9    11   243     0      20  throw
 10077    11   155    19    11   243     1     111  ReadOnlyBufferException
 10078    11   155    42    11   243     1      59  (
 10079    11   155    43    11   243     1      60  )
 10080    11   155    44    11   243     1     102  ;
 10081    11   157     5    11   243     1      64  }
 10082    11   157     5    11   243     0     654  ENDMETHOD
 10083    11   157     5    11   244     0     655  STARTMETHOD
 10084    11   159    12    11   244     0      39  boolean
 10085    11   159    20    11   244     0     111  isDirect
 10086    11   159    28    11   244     0      59  (
 10087    11   159    29    11   244     0      60  )
 10088    11   159    31    11   244     0      63  {
 10089    11   160     9    11   244     0      19  return
 10090    11   160    16    11   244     1     111  bb.isDirect
 10091    11   160    27    11   244     1      59  (
 10092    11   160    28    11   244     1      60  )
 10093    11   160    29    11   244     1     102  ;
 10094    11   161     5    11   244     1      64  }
 10095    11   161     5    11   244     0     656  ENDMETHOD
 10096    11   161     5    11   245     0     657  STARTMETHOD
 10097    11   163    12    11   245     0      39  boolean
 10098    11   163    20    11   245     0     111  isReadOnly
 10099    11   163    30    11   245     0      59  (
 10100    11   163    31    11   245     0      60  )
 10101    11   163    33    11   245     0      63  {
 10102    11   164     9    11   245     0      19  return
 10103    11   164    16    11   245     0      52  true
 10104    11   164    20    11   245     0     102  ;
 10105    11   165     5    11   245     0      64  }
 10106    11   165     5    11   245     0     658  ENDMETHOD
 10107    11   165     5    11   246     0     659  STARTMETHOD
 10108    11   207    12    11   246     0     111  ByteOrder
 10109    11   207    22    11   246     0     111  order
 10110    11   207    27    11   246     0      59  (
 10111    11   207    28    11   246     0      60  )
 10112    11   207    30    11   246     0      63  {
 10113    11   209     9    11   246     0      19  return
 10114    11   209    16    11   246     0     111  ByteOrder.BIG_ENDIAN
 10115    11   209    36    11   246     0     102  ;
 10116    11   214     5    11   246     0      64  }
 10117    11   214     5    11   246     0     660  ENDMETHOD
 10118    11   216     1    11    -1     0      64  }
 10119    11   216     1    11    -1     1     661  ENDCLASS
 10120    11   216     1    -1    -1     1     662  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsDoubleBufferRB.java
 10121    12     1     1    -1    -1     1     663  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsDoubleBufferRL.java
 10122    12    28     9    -1    -1     0     111  java.nio
 10123    12    28    17    -1    -1     0     102  ;
 10124    12    31     1    12    -1     0     664  STARTCLASS
 10125    12    31     1    12    -1     0      24  class
 10126    12    31     7    12    -1     0     111  ByteBufferAsDoubleBufferRL
 10127    12    32     5    12    -1     0      38  extends
 10128    12    32    13    12    -1     0     111  ByteBufferAsDoubleBufferL
 10129    12    33     1    12    -1     0      63  {
 10130    12    33     1    12   247     0     665  STARTMETHOD
 10131    12    42     5    12   247     0     111  ByteBufferAsDoubleBufferRL
 10132    12    42    31    12   247     0      59  (
 10133    12    42    32    12   247     0     111  ByteBuffer
 10134    12    42    43    12   247     0     111  bb
 10135    12    42    45    12   247     0      60  )
 10136    12    42    47    12   247     0      63  {
 10137    12    55     9    12   247     0      27  super
 10138    12    55    14    12   247     0      59  (
 10139    12    55    15    12   247     0     111  bb
 10140    12    55    17    12   247     0      60  )
 10141    12    55    18    12   247     0     102  ;
 10142    12    57     5    12   247     0      64  }
 10143    12    57     5    12   247     0     666  ENDMETHOD
 10144    12    57     5    12   248     0     667  STARTMETHOD
 10145    12    59     5    12   248     0     111  ByteBufferAsDoubleBufferRL
 10146    12    59    31    12   248     0      59  (
 10147    12    59    32    12   248     0     111  ByteBuffer
 10148    12    59    43    12   248     0     111  bb
 10149    12    59    45    12   248     0      66  ,
 10150    12    60    38    12   248     0      36  int
 10151    12    60    42    12   248     0     111  mark
 10152    12    60    46    12   248     0      66  ,
 10153    12    60    48    12   248     0      36  int
 10154    12    60    52    12   248     0     111  pos
 10155    12    60    55    12   248     0      66  ,
 10156    12    60    57    12   248     0      36  int
 10157    12    60    61    12   248     0     111  lim
 10158    12    60    64    12   248     0      66  ,
 10159    12    60    66    12   248     0      36  int
 10160    12    60    70    12   248     0     111  cap
 10161    12    60    73    12   248     0      66  ,
 10162    12    61    38    12   248     0      36  int
 10163    12    61    42    12   248     0     111  off
 10164    12    61    45    12   248     0      60  )
 10165    12    62     5    12   248     0      63  {
 10166    12    68     9    12   248     0      27  super
 10167    12    68    14    12   248     0      59  (
 10168    12    68    15    12   248     0     111  bb
 10169    12    68    17    12   248     0      66  ,
 10170    12    68    19    12   248     0     111  mark
 10171    12    68    23    12   248     0      66  ,
 10172    12    68    25    12   248     0     111  pos
 10173    12    68    28    12   248     0      66  ,
 10174    12    68    30    12   248     0     111  lim
 10175    12    68    33    12   248     0      66  ,
 10176    12    68    35    12   248     0     111  cap
 10177    12    68    38    12   248     0      66  ,
 10178    12    68    40    12   248     0     111  off
 10179    12    68    43    12   248     0      60  )
 10180    12    68    44    12   248     0     102  ;
 10181    12    70     5    12   248     0      64  }
 10182    12    70     5    12   248     0     668  ENDMETHOD
 10183    12    70     5    12   249     0     669  STARTMETHOD
 10184    12    72    12    12   249     0     111  DoubleBuffer
 10185    12    72    25    12   249     0     111  slice
 10186    12    72    30    12   249     0      59  (
 10187    12    72    31    12   249     0      60  )
 10188    12    72    33    12   249     0      63  {
 10189    12    73     9    12   249     1      36  int
 10190    12    73    13    12   249     1     111  pos
 10191    12    73    17    12   249     1      67  =
 10192    12    73    19    12   249     1     111  this.position
 10193    12    73    32    12   249     1      59  (
 10194    12    73    33    12   249     1      60  )
 10195    12    73    34    12   249     1     102  ;
 10196    12    74     9    12   249     1      36  int
 10197    12    74    13    12   249     1     111  lim
 10198    12    74    17    12   249     1      67  =
 10199    12    74    19    12   249     1     111  this.limit
 10200    12    74    29    12   249     1      59  (
 10201    12    74    30    12   249     1      60  )
 10202    12    74    31    12   249     1     102  ;
 10203    12    75     9    12   249     0     111  assert
 10204    12    75    16    12   249     0      59  (
 10205    12    75    17    12   249     0     111  pos
 10206    12    75    21    12   249     0      92  <=
 10207    12    75    24    12   249     0     111  lim
 10208    12    75    27    12   249     0      60  )
 10209    12    75    28    12   249     0     102  ;
 10210    12    76     9    12   249     0      36  int
 10211    12    76    13    12   249     0     111  rem
 10212    12    76    17    12   249     0      67  =
 10213    12    76    19    12   249     0      59  (
 10214    12    76    20    12   249     0     111  pos
 10215    12    76    24    12   249     0      92  <=
 10216    12    76    27    12   249     0     111  lim
 10217    12    76    31    12   249     0      58  ?
 10218    12    76    33    12   249     0     111  lim
 10219    12    76    37    12   249     0      77  -
 10220    12    76    39    12   249     0     111  pos
 10221    12    76    43    12   249     0      65  :
 10222    12    76    45    12   249     0     112  0
 10223    12    76    46    12   249     0      60  )
 10224    12    76    47    12   249     0     102  ;
 10225    12    77     9    12   249     0      36  int
 10226    12    77    13    12   249     0     111  off
 10227    12    77    17    12   249     0      67  =
 10228    12    77    19    12   249     0      59  (
 10229    12    77    20    12   249     0     111  pos
 10230    12    77    24    12   249     0      90  <<
 10231    12    77    27    12   249     0     112  3
 10232    12    77    28    12   249     0      60  )
 10233    12    77    30    12   249     0      74  +
 10234    12    77    32    12   249     0     111  offset
 10235    12    77    38    12   249     0     102  ;
 10236    12    78     9    12   249     0     111  assert
 10237    12    78    16    12   249     0      59  (
 10238    12    78    17    12   249     0     111  off
 10239    12    78    21    12   249     0      88  >=
 10240    12    78    24    12   249     0     112  0
 10241    12    78    25    12   249     0      60  )
 10242    12    78    26    12   249     0     102  ;
 10243    12    79     9    12   249     0      19  return
 10244    12    79    20    12   249     0     111  ByteBufferAsDoubleBufferRL
 10245    12    79    46    12   249     0      59  (
 10246    12    79    47    12   249     0     111  bb
 10247    12    79    49    12   249     0      66  ,
 10248    12    79    51    12   249     0      77  -
 10249    12    79    52    12   249     0     112  1
 10250    12    79    53    12   249     0      66  ,
 10251    12    79    55    12   249     0     112  0
 10252    12    79    56    12   249     0      66  ,
 10253    12    79    58    12   249     0     111  rem
 10254    12    79    61    12   249     0      66  ,
 10255    12    79    63    12   249     0     111  rem
 10256    12    79    66    12   249     0      66  ,
 10257    12    79    68    12   249     0     111  off
 10258    12    79    71    12   249     0      60  )
 10259    12    79    72    12   249     0     102  ;
 10260    12    80     5    12   249     0      64  }
 10261    12    80     5    12   249     0     670  ENDMETHOD
 10262    12    80     5    12   250     0     671  STARTMETHOD
 10263    12    82    12    12   250     0     111  DoubleBuffer
 10264    12    82    25    12   250     0     111  duplicate
 10265    12    82    34    12   250     0      59  (
 10266    12    82    35    12   250     0      60  )
 10267    12    82    37    12   250     0      63  {
 10268    12    83     9    12   250     0      19  return
 10269    12    83    20    12   250     0     111  ByteBufferAsDoubleBufferRL
 10270    12    83    46    12   250     0      59  (
 10271    12    83    47    12   250     0     111  bb
 10272    12    83    49    12   250     0      66  ,
 10273    12    84    53    12   250     1     111  this.markValue
 10274    12    84    67    12   250     1      59  (
 10275    12    84    68    12   250     1      60  )
 10276    12    84    69    12   250     1      66  ,
 10277    12    85    53    12   250     1     111  this.position
 10278    12    85    66    12   250     1      59  (
 10279    12    85    67    12   250     1      60  )
 10280    12    85    68    12   250     1      66  ,
 10281    12    86    53    12   250     1     111  this.limit
 10282    12    86    63    12   250     1      59  (
 10283    12    86    64    12   250     1      60  )
 10284    12    86    65    12   250     1      66  ,
 10285    12    87    53    12   250     1     111  this.capacity
 10286    12    87    66    12   250     1      59  (
 10287    12    87    67    12   250     1      60  )
 10288    12    87    68    12   250     1      66  ,
 10289    12    88    53    12   250     0     111  offset
 10290    12    88    59    12   250     0      60  )
 10291    12    88    60    12   250     0     102  ;
 10292    12    89     5    12   250     0      64  }
 10293    12    89     5    12   250     0     672  ENDMETHOD
 10294    12    89     5    12   251     0     673  STARTMETHOD
 10295    12    91    12    12   251     0     111  DoubleBuffer
 10296    12    91    25    12   251     0     111  asReadOnlyBuffer
 10297    12    91    41    12   251     0      59  (
 10298    12    91    42    12   251     0      60  )
 10299    12    91    44    12   251     0      63  {
 10300    12   100     9    12   251     0      19  return
 10301    12   100    16    12   251     0     111  duplicate
 10302    12   100    25    12   251     0      59  (
 10303    12   100    26    12   251     0      60  )
 10304    12   100    27    12   251     0     102  ;
 10305    12   102     5    12   251     0      64  }
 10306    12   102     5    12   251     0     674  ENDMETHOD
 10307    12   102     5    12   252     0     675  STARTMETHOD
 10308    12   120    12    12   252     0     111  DoubleBuffer
 10309    12   120    25    12   252     0     111  put
 10310    12   120    28    12   252     0      59  (
 10311    12   120    29    12   252     0      32  double
 10312    12   120    36    12   252     0     111  x
 10313    12   120    37    12   252     0      60  )
 10314    12   120    39    12   252     0      63  {
 10315    12   125     9    12   252     0      20  throw
 10316    12   125    19    12   252     0     111  ReadOnlyBufferException
 10317    12   125    42    12   252     0      59  (
 10318    12   125    43    12   252     0      60  )
 10319    12   125    44    12   252     0     102  ;
 10320    12   127     5    12   252     0      64  }
 10321    12   127     5    12   252     0     676  ENDMETHOD
 10322    12   127     5    12   253     0     677  STARTMETHOD
 10323    12   129    12    12   253     0     111  DoubleBuffer
 10324    12   129    25    12   253     0     111  put
 10325    12   129    28    12   253     0      59  (
 10326    12   129    29    12   253     0      36  int
 10327    12   129    33    12   253     0     111  i
 10328    12   129    34    12   253     0      66  ,
 10329    12   129    36    12   253     0      32  double
 10330    12   129    43    12   253     0     111  x
 10331    12   129    44    12   253     0      60  )
 10332    12   129    46    12   253     0      63  {
 10333    12   134     9    12   253     0      20  throw
 10334    12   134    19    12   253     1     111  ReadOnlyBufferException
 10335    12   134    42    12   253     1      59  (
 10336    12   134    43    12   253     1      60  )
 10337    12   134    44    12   253     1     102  ;
 10338    12   136     5    12   253     1      64  }
 10339    12   136     5    12   253     0     678  ENDMETHOD
 10340    12   136     5    12   254     0     679  STARTMETHOD
 10341    12   138    12    12   254     0     111  DoubleBuffer
 10342    12   138    25    12   254     0     111  compact
 10343    12   138    32    12   254     0      59  (
 10344    12   138    33    12   254     0      60  )
 10345    12   138    35    12   254     0      63  {
 10346    12   155     9    12   254     0      20  throw
 10347    12   155    19    12   254     1     111  ReadOnlyBufferException
 10348    12   155    42    12   254     1      59  (
 10349    12   155    43    12   254     1      60  )
 10350    12   155    44    12   254     1     102  ;
 10351    12   157     5    12   254     1      64  }
 10352    12   157     5    12   254     0     680  ENDMETHOD
 10353    12   157     5    12   255     0     681  STARTMETHOD
 10354    12   159    12    12   255     0      39  boolean
 10355    12   159    20    12   255     0     111  isDirect
 10356    12   159    28    12   255     0      59  (
 10357    12   159    29    12   255     0      60  )
 10358    12   159    31    12   255     0      63  {
 10359    12   160     9    12   255     0      19  return
 10360    12   160    16    12   255     1     111  bb.isDirect
 10361    12   160    27    12   255     1      59  (
 10362    12   160    28    12   255     1      60  )
 10363    12   160    29    12   255     1     102  ;
 10364    12   161     5    12   255     1      64  }
 10365    12   161     5    12   255     0     682  ENDMETHOD
 10366    12   161     5    12   256     0     683  STARTMETHOD
 10367    12   163    12    12   256     0      39  boolean
 10368    12   163    20    12   256     0     111  isReadOnly
 10369    12   163    30    12   256     0      59  (
 10370    12   163    31    12   256     0      60  )
 10371    12   163    33    12   256     0      63  {
 10372    12   164     9    12   256     0      19  return
 10373    12   164    16    12   256     0      52  true
 10374    12   164    20    12   256     0     102  ;
 10375    12   165     5    12   256     0      64  }
 10376    12   165     5    12   256     0     684  ENDMETHOD
 10377    12   165     5    12   257     0     685  STARTMETHOD
 10378    12   207    12    12   257     0     111  ByteOrder
 10379    12   207    22    12   257     0     111  order
 10380    12   207    27    12   257     0      59  (
 10381    12   207    28    12   257     0      60  )
 10382    12   207    30    12   257     0      63  {
 10383    12   212     9    12   257     0      19  return
 10384    12   212    16    12   257     0     111  ByteOrder.LITTLE_ENDIAN
 10385    12   212    39    12   257     0     102  ;
 10386    12   214     5    12   257     0      64  }
 10387    12   214     5    12   257     0     686  ENDMETHOD
 10388    12   216     1    12    -1     0      64  }
 10389    12   216     1    12    -1     1     687  ENDCLASS
 10390    12   216     1    -1    -1     1     688  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsDoubleBufferRL.java
 10391    13     1     1    -1    -1     1     689  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsFloatBufferB.java
 10392    13    28     9    -1    -1     0     111  java.nio
 10393    13    28    17    -1    -1     0     102  ;
 10394    13    31     1    13    -1     0     690  STARTCLASS
 10395    13    31     1    13    -1     0      24  class
 10396    13    31     7    13    -1     0     111  ByteBufferAsFloatBufferB
 10397    13    32     5    13    -1     0      38  extends
 10398    13    32    13    13    -1     0     111  FloatBuffer
 10399    13    33     1    13    -1     0      63  {
 10400    13    37     5    13    -1     0      23  protected
 10401    13    37    21    13    -1     0     111  ByteBuffer
 10402    13    37    32    13    -1     0     111  bb
 10403    13    37    34    13    -1     0     102  ;
 10404    13    38     5    13    -1     0      23  protected
 10405    13    38    21    13    -1     0      36  int
 10406    13    38    25    13    -1     0     111  offset
 10407    13    38    31    13    -1     0     102  ;
 10408    13    38    31    13   258     0     691  STARTMETHOD
 10409    13    42     5    13   258     0     111  ByteBufferAsFloatBufferB
 10410    13    42    29    13   258     0      59  (
 10411    13    42    30    13   258     0     111  ByteBuffer
 10412    13    42    41    13   258     0     111  bb
 10413    13    42    43    13   258     0      60  )
 10414    13    42    45    13   258     0      63  {
 10415    13    44     9    13   258     0      27  super
 10416    13    44    14    13   258     0      59  (
 10417    13    44    15    13   258     0      77  -
 10418    13    44    16    13   258     0     112  1
 10419    13    44    17    13   258     0      66  ,
 10420    13    44    19    13   258     0     112  0
 10421    13    44    20    13   258     0      66  ,
 10422    13    45    15    13   258     0     111  bb.remaining
 10423    13    45    27    13   258     0      59  (
 10424    13    45    28    13   258     0      60  )
 10425    13    45    30    13   258     0      84  >>
 10426    13    45    33    13   258     0     112  2
 10427    13    45    34    13   258     0      66  ,
 10428    13    46    15    13   258     0     111  bb.remaining
 10429    13    46    27    13   258     0      59  (
 10430    13    46    28    13   258     0      60  )
 10431    13    46    30    13   258     0      84  >>
 10432    13    46    33    13   258     0     112  2
 10433    13    46    34    13   258     0      60  )
 10434    13    46    35    13   258     0     102  ;
 10435    13    47     9    13   258     0     111  this.bb
 10436    13    47    17    13   258     0      67  =
 10437    13    47    19    13   258     0     111  bb
 10438    13    47    21    13   258     0     102  ;
 10439    13    49     9    13   258     0      36  int
 10440    13    49    13    13   258     0     111  cap
 10441    13    49    17    13   258     0      67  =
 10442    13    49    19    13   258     0     111  this.capacity
 10443    13    49    32    13   258     0      59  (
 10444    13    49    33    13   258     0      60  )
 10445    13    49    34    13   258     0     102  ;
 10446    13    50     9    13   258     0     111  this.limit
 10447    13    50    19    13   258     0      59  (
 10448    13    50    20    13   258     0     111  cap
 10449    13    50    23    13   258     0      60  )
 10450    13    50    24    13   258     0     102  ;
 10451    13    51     9    13   258     0      36  int
 10452    13    51    13    13   258     0     111  pos
 10453    13    51    17    13   258     0      67  =
 10454    13    51    19    13   258     0     111  this.position
 10455    13    51    32    13   258     0      59  (
 10456    13    51    33    13   258     0      60  )
 10457    13    51    34    13   258     0     102  ;
 10458    13    52     9    13   258     0     111  assert
 10459    13    52    16    13   258     0      59  (
 10460    13    52    17    13   258     0     111  pos
 10461    13    52    21    13   258     0      92  <=
 10462    13    52    24    13   258     0     111  cap
 10463    13    52    27    13   258     0      60  )
 10464    13    52    28    13   258     0     102  ;
 10465    13    53     9    13   258     0     111  offset
 10466    13    53    16    13   258     0      67  =
 10467    13    53    18    13   258     0     111  pos
 10468    13    53    21    13   258     0     102  ;
 10469    13    57     5    13   258     0      64  }
 10470    13    57     5    13   258     0     692  ENDMETHOD
 10471    13    57     5    13   259     0     693  STARTMETHOD
 10472    13    59     5    13   259     0     111  ByteBufferAsFloatBufferB
 10473    13    59    29    13   259     0      59  (
 10474    13    59    30    13   259     0     111  ByteBuffer
 10475    13    59    41    13   259     0     111  bb
 10476    13    59    43    13   259     0      66  ,
 10477    13    60    38    13   259     0      36  int
 10478    13    60    42    13   259     0     111  mark
 10479    13    60    46    13   259     0      66  ,
 10480    13    60    48    13   259     0      36  int
 10481    13    60    52    13   259     0     111  pos
 10482    13    60    55    13   259     0      66  ,
 10483    13    60    57    13   259     0      36  int
 10484    13    60    61    13   259     0     111  lim
 10485    13    60    64    13   259     0      66  ,
 10486    13    60    66    13   259     0      36  int
 10487    13    60    70    13   259     0     111  cap
 10488    13    60    73    13   259     0      66  ,
 10489    13    61    38    13   259     0      36  int
 10490    13    61    42    13   259     0     111  off
 10491    13    61    45    13   259     0      60  )
 10492    13    62     5    13   259     0      63  {
 10493    13    64     9    13   259     0      27  super
 10494    13    64    14    13   259     0      59  (
 10495    13    64    15    13   259     0     111  mark
 10496    13    64    19    13   259     0      66  ,
 10497    13    64    21    13   259     0     111  pos
 10498    13    64    24    13   259     0      66  ,
 10499    13    64    26    13   259     0     111  lim
 10500    13    64    29    13   259     0      66  ,
 10501    13    64    31    13   259     0     111  cap
 10502    13    64    34    13   259     0      60  )
 10503    13    64    35    13   259     0     102  ;
 10504    13    65     9    13   259     1     111  this.bb
 10505    13    65    17    13   259     1      67  =
 10506    13    65    19    13   259     1     111  bb
 10507    13    65    21    13   259     1     102  ;
 10508    13    66     9    13   259     1     111  offset
 10509    13    66    16    13   259     1      67  =
 10510    13    66    18    13   259     1     111  off
 10511    13    66    21    13   259     1     102  ;
 10512    13    70     5    13   259     0      64  }
 10513    13    70     5    13   259     0     694  ENDMETHOD
 10514    13    70     5    13   260     0     695  STARTMETHOD
 10515    13    72    12    13   260     0     111  FloatBuffer
 10516    13    72    24    13   260     0     111  slice
 10517    13    72    29    13   260     0      59  (
 10518    13    72    30    13   260     0      60  )
 10519    13    72    32    13   260     0      63  {
 10520    13    73     9    13   260     1      36  int
 10521    13    73    13    13   260     1     111  pos
 10522    13    73    17    13   260     1      67  =
 10523    13    73    19    13   260     1     111  this.position
 10524    13    73    32    13   260     1      59  (
 10525    13    73    33    13   260     1      60  )
 10526    13    73    34    13   260     1     102  ;
 10527    13    74     9    13   260     1      36  int
 10528    13    74    13    13   260     1     111  lim
 10529    13    74    17    13   260     1      67  =
 10530    13    74    19    13   260     1     111  this.limit
 10531    13    74    29    13   260     1      59  (
 10532    13    74    30    13   260     1      60  )
 10533    13    74    31    13   260     1     102  ;
 10534    13    75     9    13   260     0     111  assert
 10535    13    75    16    13   260     0      59  (
 10536    13    75    17    13   260     0     111  pos
 10537    13    75    21    13   260     0      92  <=
 10538    13    75    24    13   260     0     111  lim
 10539    13    75    27    13   260     0      60  )
 10540    13    75    28    13   260     0     102  ;
 10541    13    76     9    13   260     0      36  int
 10542    13    76    13    13   260     0     111  rem
 10543    13    76    17    13   260     0      67  =
 10544    13    76    19    13   260     0      59  (
 10545    13    76    20    13   260     0     111  pos
 10546    13    76    24    13   260     0      92  <=
 10547    13    76    27    13   260     0     111  lim
 10548    13    76    31    13   260     0      58  ?
 10549    13    76    33    13   260     0     111  lim
 10550    13    76    37    13   260     0      77  -
 10551    13    76    39    13   260     0     111  pos
 10552    13    76    43    13   260     0      65  :
 10553    13    76    45    13   260     0     112  0
 10554    13    76    46    13   260     0      60  )
 10555    13    76    47    13   260     0     102  ;
 10556    13    77     9    13   260     0      36  int
 10557    13    77    13    13   260     0     111  off
 10558    13    77    17    13   260     0      67  =
 10559    13    77    19    13   260     0      59  (
 10560    13    77    20    13   260     0     111  pos
 10561    13    77    24    13   260     0      90  <<
 10562    13    77    27    13   260     0     112  2
 10563    13    77    28    13   260     0      60  )
 10564    13    77    30    13   260     0      74  +
 10565    13    77    32    13   260     0     111  offset
 10566    13    77    38    13   260     0     102  ;
 10567    13    78     9    13   260     0     111  assert
 10568    13    78    16    13   260     0      59  (
 10569    13    78    17    13   260     0     111  off
 10570    13    78    21    13   260     0      88  >=
 10571    13    78    24    13   260     0     112  0
 10572    13    78    25    13   260     0      60  )
 10573    13    78    26    13   260     0     102  ;
 10574    13    79     9    13   260     0      19  return
 10575    13    79    20    13   260     0     111  ByteBufferAsFloatBufferB
 10576    13    79    44    13   260     0      59  (
 10577    13    79    45    13   260     0     111  bb
 10578    13    79    47    13   260     0      66  ,
 10579    13    79    49    13   260     0      77  -
 10580    13    79    50    13   260     0     112  1
 10581    13    79    51    13   260     0      66  ,
 10582    13    79    53    13   260     0     112  0
 10583    13    79    54    13   260     0      66  ,
 10584    13    79    56    13   260     0     111  rem
 10585    13    79    59    13   260     0      66  ,
 10586    13    79    61    13   260     0     111  rem
 10587    13    79    64    13   260     0      66  ,
 10588    13    79    66    13   260     0     111  off
 10589    13    79    69    13   260     0      60  )
 10590    13    79    70    13   260     0     102  ;
 10591    13    80     5    13   260     0      64  }
 10592    13    80     5    13   260     0     696  ENDMETHOD
 10593    13    80     5    13   261     0     697  STARTMETHOD
 10594    13    82    12    13   261     0     111  FloatBuffer
 10595    13    82    24    13   261     0     111  duplicate
 10596    13    82    33    13   261     0      59  (
 10597    13    82    34    13   261     0      60  )
 10598    13    82    36    13   261     0      63  {
 10599    13    83     9    13   261     0      19  return
 10600    13    83    20    13   261     0     111  ByteBufferAsFloatBufferB
 10601    13    83    44    13   261     0      59  (
 10602    13    83    45    13   261     0     111  bb
 10603    13    83    47    13   261     0      66  ,
 10604    13    84    53    13   261     1     111  this.markValue
 10605    13    84    67    13   261     1      59  (
 10606    13    84    68    13   261     1      60  )
 10607    13    84    69    13   261     1      66  ,
 10608    13    85    53    13   261     1     111  this.position
 10609    13    85    66    13   261     1      59  (
 10610    13    85    67    13   261     1      60  )
 10611    13    85    68    13   261     1      66  ,
 10612    13    86    53    13   261     1     111  this.limit
 10613    13    86    63    13   261     1      59  (
 10614    13    86    64    13   261     1      60  )
 10615    13    86    65    13   261     1      66  ,
 10616    13    87    53    13   261     1     111  this.capacity
 10617    13    87    66    13   261     1      59  (
 10618    13    87    67    13   261     1      60  )
 10619    13    87    68    13   261     1      66  ,
 10620    13    88    53    13   261     0     111  offset
 10621    13    88    59    13   261     0      60  )
 10622    13    88    60    13   261     0     102  ;
 10623    13    89     5    13   261     0      64  }
 10624    13    89     5    13   261     0     698  ENDMETHOD
 10625    13    89     5    13   262     0     699  STARTMETHOD
 10626    13    91    12    13   262     0     111  FloatBuffer
 10627    13    91    24    13   262     0     111  asReadOnlyBuffer
 10628    13    91    40    13   262     0      59  (
 10629    13    91    41    13   262     0      60  )
 10630    13    91    43    13   262     0      63  {
 10631    13    93     9    13   262     0      19  return
 10632    13    93    20    13   262     0     111  ByteBufferAsFloatBufferRB
 10633    13    93    45    13   262     0      59  (
 10634    13    93    46    13   262     0     111  bb
 10635    13    93    48    13   262     0      66  ,
 10636    13    94    50    13   262     1     111  this.markValue
 10637    13    94    64    13   262     1      59  (
 10638    13    94    65    13   262     1      60  )
 10639    13    94    66    13   262     1      66  ,
 10640    13    95    50    13   262     1     111  this.position
 10641    13    95    63    13   262     1      59  (
 10642    13    95    64    13   262     1      60  )
 10643    13    95    65    13   262     1      66  ,
 10644    13    96    50    13   262     1     111  this.limit
 10645    13    96    60    13   262     1      59  (
 10646    13    96    61    13   262     1      60  )
 10647    13    96    62    13   262     1      66  ,
 10648    13    97    50    13   262     1     111  this.capacity
 10649    13    97    63    13   262     1      59  (
 10650    13    97    64    13   262     1      60  )
 10651    13    97    65    13   262     1      66  ,
 10652    13    98    50    13   262     0     111  offset
 10653    13    98    56    13   262     0      60  )
 10654    13    98    57    13   262     1     102  ;
 10655    13   102     5    13   262     1      64  }
 10656    13   102     5    13   262     0     700  ENDMETHOD
 10657    13   102     5    13   263     0     701  STARTMETHOD
 10658    13   106     5    13   263     0      23  protected
 10659    13   106    15    13   263     0      36  int
 10660    13   106    19    13   263     0     111  ix
 10661    13   106    21    13   263     0      59  (
 10662    13   106    22    13   263     0      36  int
 10663    13   106    26    13   263     0     111  i
 10664    13   106    27    13   263     0      60  )
 10665    13   106    29    13   263     0      63  {
 10666    13   107     9    13   263     0      19  return
 10667    13   107    16    13   263     0      59  (
 10668    13   107    17    13   263     0     111  i
 10669    13   107    19    13   263     0      90  <<
 10670    13   107    22    13   263     0     112  2
 10671    13   107    23    13   263     0      60  )
 10672    13   107    25    13   263     0      74  +
 10673    13   107    27    13   263     0     111  offset
 10674    13   107    33    13   263     1     102  ;
 10675    13   108     5    13   263     1      64  }
 10676    13   108     5    13   263     0     702  ENDMETHOD
 10677    13   108     5    13   264     0     703  STARTMETHOD
 10678    13   110    18    13   264     0     111  get
 10679    13   110    21    13   264     0      59  (
 10680    13   110    22    13   264     0      60  )
 10681    13   110    24    13   264     0      63  {
 10682    13   111     9    13   264     0      19  return
 10683    13   111    16    13   264     0     111  Bits.getFloatB
 10684    13   111    30    13   264     0      59  (
 10685    13   111    31    13   264     0     111  bb
 10686    13   111    33    13   264     0      66  ,
 10687    13   111    35    13   264     0     111  ix
 10688    13   111    37    13   264     0      59  (
 10689    13   111    38    13   264     0     111  nextGetIndex
 10690    13   111    50    13   264     0      59  (
 10691    13   111    51    13   264     0      60  )
 10692    13   111    52    13   264     0      60  )
 10693    13   111    53    13   264     0      60  )
 10694    13   111    54    13   264     1     102  ;
 10695    13   112     5    13   264     1      64  }
 10696    13   112     5    13   264     0     704  ENDMETHOD
 10697    13   112     5    13   265     0     705  STARTMETHOD
 10698    13   114    18    13   265     0     111  get
 10699    13   114    21    13   265     0      59  (
 10700    13   114    22    13   265     0      36  int
 10701    13   114    26    13   265     0     111  i
 10702    13   114    27    13   265     0      60  )
 10703    13   114    29    13   265     0      63  {
 10704    13   115     9    13   265     0      19  return
 10705    13   115    16    13   265     0     111  Bits.getFloatB
 10706    13   115    30    13   265     0      59  (
 10707    13   115    31    13   265     0     111  bb
 10708    13   115    33    13   265     0      66  ,
 10709    13   115    35    13   265     0     111  ix
 10710    13   115    37    13   265     0      59  (
 10711    13   115    38    13   265     0     111  checkIndex
 10712    13   115    48    13   265     0      59  (
 10713    13   115    49    13   265     0     111  i
 10714    13   115    50    13   265     0      60  )
 10715    13   115    51    13   265     0      60  )
 10716    13   115    52    13   265     0      60  )
 10717    13   115    53    13   265     0     102  ;
 10718    13   116     5    13   265     0      64  }
 10719    13   116     5    13   265     0     706  ENDMETHOD
 10720    13   116     5    13   266     0     707  STARTMETHOD
 10721    13   120    12    13   266     0     111  FloatBuffer
 10722    13   120    24    13   266     0     111  put
 10723    13   120    27    13   266     0      59  (
 10724    13   120    34    13   266     0     111  x
 10725    13   120    35    13   266     0      60  )
 10726    13   120    37    13   266     0      63  {
 10727    13   122     9    13   266     0     111  Bits.putFloatB
 10728    13   122    23    13   266     0      59  (
 10729    13   122    24    13   266     0     111  bb
 10730    13   122    26    13   266     0      66  ,
 10731    13   122    28    13   266     0     111  ix
 10732    13   122    30    13   266     0      59  (
 10733    13   122    31    13   266     0     111  nextPutIndex
 10734    13   122    43    13   266     0      59  (
 10735    13   122    44    13   266     0      60  )
 10736    13   122    45    13   266     0      60  )
 10737    13   122    46    13   266     0      66  ,
 10738    13   122    48    13   266     0     111  x
 10739    13   122    49    13   266     0      60  )
 10740    13   122    50    13   266     0     102  ;
 10741    13   123     9    13   266     0      19  return
 10742    13   123    16    13   266     0      44  this
 10743    13   123    20    13   266     0     102  ;
 10744    13   127     5    13   266     0      64  }
 10745    13   127     5    13   266     0     708  ENDMETHOD
 10746    13   127     5    13   267     0     709  STARTMETHOD
 10747    13   129    12    13   267     0     111  FloatBuffer
 10748    13   129    24    13   267     0     111  put
 10749    13   129    27    13   267     0      59  (
 10750    13   129    28    13   267     0      36  int
 10751    13   129    32    13   267     0     111  i
 10752    13   129    33    13   267     0      66  ,
 10753    13   129    41    13   267     0     111  x
 10754    13   129    42    13   267     0      60  )
 10755    13   129    44    13   267     0      63  {
 10756    13   131     9    13   267     0     111  Bits.putFloatB
 10757    13   131    23    13   267     0      59  (
 10758    13   131    24    13   267     0     111  bb
 10759    13   131    26    13   267     0      66  ,
 10760    13   131    28    13   267     0     111  ix
 10761    13   131    30    13   267     0      59  (
 10762    13   131    31    13   267     0     111  checkIndex
 10763    13   131    41    13   267     0      59  (
 10764    13   131    42    13   267     0     111  i
 10765    13   131    43    13   267     0      60  )
 10766    13   131    44    13   267     0      60  )
 10767    13   131    45    13   267     0      66  ,
 10768    13   131    47    13   267     0     111  x
 10769    13   131    48    13   267     0      60  )
 10770    13   131    49    13   267     0     102  ;
 10771    13   132     9    13   267     0      19  return
 10772    13   132    16    13   267     0      44  this
 10773    13   132    20    13   267     0     102  ;
 10774    13   136     5    13   267     0      64  }
 10775    13   136     5    13   267     0     710  ENDMETHOD
 10776    13   136     5    13   268     0     711  STARTMETHOD
 10777    13   138    12    13   268     0     111  FloatBuffer
 10778    13   138    24    13   268     0     111  compact
 10779    13   138    31    13   268     0      59  (
 10780    13   138    32    13   268     0      60  )
 10781    13   138    34    13   268     0      63  {
 10782    13   140     9    13   268     1      36  int
 10783    13   140    13    13   268     1     111  pos
 10784    13   140    17    13   268     1      67  =
 10785    13   140    19    13   268     1     111  position
 10786    13   140    27    13   268     1      59  (
 10787    13   140    28    13   268     1      60  )
 10788    13   140    29    13   268     1     102  ;
 10789    13   141     9    13   268     1      36  int
 10790    13   141    13    13   268     1     111  lim
 10791    13   141    17    13   268     1      67  =
 10792    13   141    19    13   268     1     111  limit
 10793    13   141    24    13   268     1      59  (
 10794    13   141    25    13   268     1      60  )
 10795    13   141    26    13   268     1     102  ;
 10796    13   142     9    13   268     0     111  assert
 10797    13   142    16    13   268     0      59  (
 10798    13   142    17    13   268     0     111  pos
 10799    13   142    21    13   268     0      92  <=
 10800    13   142    24    13   268     0     111  lim
 10801    13   142    27    13   268     0      60  )
 10802    13   142    28    13   268     0     102  ;
 10803    13   143     9    13   268     0      36  int
 10804    13   143    13    13   268     0     111  rem
 10805    13   143    17    13   268     0      67  =
 10806    13   143    19    13   268     0      59  (
 10807    13   143    20    13   268     0     111  pos
 10808    13   143    24    13   268     0      92  <=
 10809    13   143    27    13   268     0     111  lim
 10810    13   143    31    13   268     0      58  ?
 10811    13   143    33    13   268     0     111  lim
 10812    13   143    37    13   268     0      77  -
 10813    13   143    39    13   268     0     111  pos
 10814    13   143    43    13   268     0      65  :
 10815    13   143    45    13   268     0     112  0
 10816    13   143    46    13   268     0      60  )
 10817    13   143    47    13   268     0     102  ;
 10818    13   145     9    13   268     0     111  ByteBuffer
 10819    13   145    20    13   268     0     111  db
 10820    13   145    23    13   268     0      67  =
 10821    13   145    25    13   268     0     111  bb.duplicate
 10822    13   145    37    13   268     0      59  (
 10823    13   145    38    13   268     0      60  )
 10824    13   145    39    13   268     0     102  ;
 10825    13   146     9    13   268     0     111  db.limit
 10826    13   146    17    13   268     0      59  (
 10827    13   146    18    13   268     0     111  ix
 10828    13   146    20    13   268     0      59  (
 10829    13   146    21    13   268     0     111  lim
 10830    13   146    24    13   268     0      60  )
 10831    13   146    25    13   268     0      60  )
 10832    13   146    26    13   268     0     102  ;
 10833    13   147     9    13   268     0     111  db.position
 10834    13   147    20    13   268     0      59  (
 10835    13   147    21    13   268     0     111  ix
 10836    13   147    23    13   268     0      59  (
 10837    13   147    24    13   268     0     112  0
 10838    13   147    25    13   268     0      60  )
 10839    13   147    26    13   268     0      60  )
 10840    13   147    27    13   268     0     102  ;
 10841    13   148     9    13   268     0     111  ByteBuffer
 10842    13   148    20    13   268     0     111  sb
 10843    13   148    23    13   268     0      67  =
 10844    13   148    25    13   268     0     111  db.slice
 10845    13   148    33    13   268     0      59  (
 10846    13   148    34    13   268     0      60  )
 10847    13   148    35    13   268     0     102  ;
 10848    13   149     9    13   268     0     111  sb.position
 10849    13   149    20    13   268     0      59  (
 10850    13   149    21    13   268     0     111  pos
 10851    13   149    25    13   268     0      90  <<
 10852    13   149    28    13   268     0     112  2
 10853    13   149    29    13   268     0      60  )
 10854    13   149    30    13   268     0     102  ;
 10855    13   150     9    13   268     0     111  sb.compact
 10856    13   150    19    13   268     0      59  (
 10857    13   150    20    13   268     0      60  )
 10858    13   150    21    13   268     0     102  ;
 10859    13   151     9    13   268     0     111  position
 10860    13   151    17    13   268     0      59  (
 10861    13   151    18    13   268     0     111  rem
 10862    13   151    21    13   268     0      60  )
 10863    13   151    22    13   268     0     102  ;
 10864    13   152     9    13   268     0     111  limit
 10865    13   152    14    13   268     0      59  (
 10866    13   152    15    13   268     0     111  capacity
 10867    13   152    23    13   268     0      59  (
 10868    13   152    24    13   268     0      60  )
 10869    13   152    25    13   268     0      60  )
 10870    13   152    26    13   268     0     102  ;
 10871    13   153     9    13   268     0      19  return
 10872    13   153    16    13   268     0      44  this
 10873    13   153    20    13   268     0     102  ;
 10874    13   157     5    13   268     0      64  }
 10875    13   157     5    13   268     0     712  ENDMETHOD
 10876    13   157     5    13   269     0     713  STARTMETHOD
 10877    13   159    12    13   269     0      39  boolean
 10878    13   159    20    13   269     0     111  isDirect
 10879    13   159    28    13   269     0      59  (
 10880    13   159    29    13   269     0      60  )
 10881    13   159    31    13   269     0      63  {
 10882    13   160     9    13   269     0      19  return
 10883    13   160    16    13   269     0     111  bb.isDirect
 10884    13   160    27    13   269     0      59  (
 10885    13   160    28    13   269     0      60  )
 10886    13   160    29    13   269     1     102  ;
 10887    13   161     5    13   269     1      64  }
 10888    13   161     5    13   269     0     714  ENDMETHOD
 10889    13   161     5    13   270     0     715  STARTMETHOD
 10890    13   163    12    13   270     0      39  boolean
 10891    13   163    20    13   270     0     111  isReadOnly
 10892    13   163    30    13   270     0      59  (
 10893    13   163    31    13   270     0      60  )
 10894    13   163    33    13   270     0      63  {
 10895    13   164     9    13   270     0      19  return
 10896    13   164    16    13   270     0      43  false
 10897    13   164    21    13   270     1     102  ;
 10898    13   165     5    13   270     1      64  }
 10899    13   165     5    13   270     0     716  ENDMETHOD
 10900    13   165     5    13   271     0     717  STARTMETHOD
 10901    13   207    12    13   271     0     111  ByteOrder
 10902    13   207    22    13   271     0     111  order
 10903    13   207    27    13   271     0      59  (
 10904    13   207    28    13   271     0      60  )
 10905    13   207    30    13   271     0      63  {
 10906    13   209     9    13   271     0      19  return
 10907    13   209    16    13   271     0     111  ByteOrder.BIG_ENDIAN
 10908    13   209    36    13   271     1     102  ;
 10909    13   214     5    13   271     1      64  }
 10910    13   214     5    13   271     0     718  ENDMETHOD
 10911    13   216     1    13    -1     0      64  }
 10912    13   216     1    13    -1     1     719  ENDCLASS
 10913    13   216     1    -1    -1     1     720  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsFloatBufferB.java
 10914    14     1     1    -1    -1     1     721  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsFloatBufferL.java
 10915    14    28     9    -1    -1     0     111  java.nio
 10916    14    28    17    -1    -1     0     102  ;
 10917    14    31     1    14    -1     0     722  STARTCLASS
 10918    14    31     1    14    -1     0      24  class
 10919    14    31     7    14    -1     0     111  ByteBufferAsFloatBufferL
 10920    14    32     5    14    -1     0      38  extends
 10921    14    32    13    14    -1     0     111  FloatBuffer
 10922    14    33     1    14    -1     0      63  {
 10923    14    37     5    14    -1     0      23  protected
 10924    14    37    21    14    -1     0     111  ByteBuffer
 10925    14    37    32    14    -1     0     111  bb
 10926    14    37    34    14    -1     0     102  ;
 10927    14    38     5    14    -1     0      23  protected
 10928    14    38    21    14    -1     0      36  int
 10929    14    38    25    14    -1     0     111  offset
 10930    14    38    31    14    -1     0     102  ;
 10931    14    38    31    14   272     0     723  STARTMETHOD
 10932    14    42     5    14   272     0     111  ByteBufferAsFloatBufferL
 10933    14    42    29    14   272     0      59  (
 10934    14    42    30    14   272     0     111  ByteBuffer
 10935    14    42    41    14   272     0     111  bb
 10936    14    42    43    14   272     0      60  )
 10937    14    42    45    14   272     0      63  {
 10938    14    44     9    14   272     0      27  super
 10939    14    44    14    14   272     0      59  (
 10940    14    44    15    14   272     0      77  -
 10941    14    44    16    14   272     0     112  1
 10942    14    44    17    14   272     0      66  ,
 10943    14    44    19    14   272     0     112  0
 10944    14    44    20    14   272     0      66  ,
 10945    14    45    15    14   272     0     111  bb.remaining
 10946    14    45    27    14   272     0      59  (
 10947    14    45    28    14   272     0      60  )
 10948    14    45    30    14   272     0      84  >>
 10949    14    45    33    14   272     0     112  2
 10950    14    45    34    14   272     0      66  ,
 10951    14    46    15    14   272     0     111  bb.remaining
 10952    14    46    27    14   272     0      59  (
 10953    14    46    28    14   272     0      60  )
 10954    14    46    30    14   272     0      84  >>
 10955    14    46    33    14   272     0     112  2
 10956    14    46    34    14   272     0      60  )
 10957    14    46    35    14   272     0     102  ;
 10958    14    47     9    14   272     0     111  this.bb
 10959    14    47    17    14   272     0      67  =
 10960    14    47    19    14   272     0     111  bb
 10961    14    47    21    14   272     0     102  ;
 10962    14    49     9    14   272     0      36  int
 10963    14    49    13    14   272     0     111  cap
 10964    14    49    17    14   272     0      67  =
 10965    14    49    19    14   272     0     111  this.capacity
 10966    14    49    32    14   272     0      59  (
 10967    14    49    33    14   272     0      60  )
 10968    14    49    34    14   272     0     102  ;
 10969    14    50     9    14   272     0     111  this.limit
 10970    14    50    19    14   272     0      59  (
 10971    14    50    20    14   272     0     111  cap
 10972    14    50    23    14   272     0      60  )
 10973    14    50    24    14   272     0     102  ;
 10974    14    51     9    14   272     0      36  int
 10975    14    51    13    14   272     0     111  pos
 10976    14    51    17    14   272     0      67  =
 10977    14    51    19    14   272     0     111  this.position
 10978    14    51    32    14   272     0      59  (
 10979    14    51    33    14   272     0      60  )
 10980    14    51    34    14   272     0     102  ;
 10981    14    52     9    14   272     0     111  assert
 10982    14    52    16    14   272     0      59  (
 10983    14    52    17    14   272     0     111  pos
 10984    14    52    21    14   272     0      92  <=
 10985    14    52    24    14   272     0     111  cap
 10986    14    52    27    14   272     0      60  )
 10987    14    52    28    14   272     0     102  ;
 10988    14    53     9    14   272     0     111  offset
 10989    14    53    16    14   272     0      67  =
 10990    14    53    18    14   272     0     111  pos
 10991    14    53    21    14   272     0     102  ;
 10992    14    57     5    14   272     0      64  }
 10993    14    57     5    14   272     0     724  ENDMETHOD
 10994    14    57     5    14   273     0     725  STARTMETHOD
 10995    14    59     5    14   273     0     111  ByteBufferAsFloatBufferL
 10996    14    59    29    14   273     0      59  (
 10997    14    59    30    14   273     0     111  ByteBuffer
 10998    14    59    41    14   273     0     111  bb
 10999    14    59    43    14   273     0      66  ,
 11000    14    60    38    14   273     0      36  int
 11001    14    60    42    14   273     0     111  mark
 11002    14    60    46    14   273     0      66  ,
 11003    14    60    48    14   273     0      36  int
 11004    14    60    52    14   273     0     111  pos
 11005    14    60    55    14   273     0      66  ,
 11006    14    60    57    14   273     0      36  int
 11007    14    60    61    14   273     0     111  lim
 11008    14    60    64    14   273     0      66  ,
 11009    14    60    66    14   273     0      36  int
 11010    14    60    70    14   273     0     111  cap
 11011    14    60    73    14   273     0      66  ,
 11012    14    61    38    14   273     0      36  int
 11013    14    61    42    14   273     0     111  off
 11014    14    61    45    14   273     0      60  )
 11015    14    62     5    14   273     0      63  {
 11016    14    64     9    14   273     0      27  super
 11017    14    64    14    14   273     0      59  (
 11018    14    64    15    14   273     0     111  mark
 11019    14    64    19    14   273     0      66  ,
 11020    14    64    21    14   273     0     111  pos
 11021    14    64    24    14   273     0      66  ,
 11022    14    64    26    14   273     0     111  lim
 11023    14    64    29    14   273     0      66  ,
 11024    14    64    31    14   273     0     111  cap
 11025    14    64    34    14   273     0      60  )
 11026    14    64    35    14   273     0     102  ;
 11027    14    65     9    14   273     1     111  this.bb
 11028    14    65    17    14   273     1      67  =
 11029    14    65    19    14   273     1     111  bb
 11030    14    65    21    14   273     1     102  ;
 11031    14    66     9    14   273     1     111  offset
 11032    14    66    16    14   273     1      67  =
 11033    14    66    18    14   273     1     111  off
 11034    14    66    21    14   273     1     102  ;
 11035    14    70     5    14   273     0      64  }
 11036    14    70     5    14   273     0     726  ENDMETHOD
 11037    14    70     5    14   274     0     727  STARTMETHOD
 11038    14    72    12    14   274     0     111  FloatBuffer
 11039    14    72    24    14   274     0     111  slice
 11040    14    72    29    14   274     0      59  (
 11041    14    72    30    14   274     0      60  )
 11042    14    72    32    14   274     0      63  {
 11043    14    73     9    14   274     1      36  int
 11044    14    73    13    14   274     1     111  pos
 11045    14    73    17    14   274     1      67  =
 11046    14    73    19    14   274     1     111  this.position
 11047    14    73    32    14   274     1      59  (
 11048    14    73    33    14   274     1      60  )
 11049    14    73    34    14   274     1     102  ;
 11050    14    74     9    14   274     1      36  int
 11051    14    74    13    14   274     1     111  lim
 11052    14    74    17    14   274     1      67  =
 11053    14    74    19    14   274     1     111  this.limit
 11054    14    74    29    14   274     1      59  (
 11055    14    74    30    14   274     1      60  )
 11056    14    74    31    14   274     1     102  ;
 11057    14    75     9    14   274     0     111  assert
 11058    14    75    16    14   274     0      59  (
 11059    14    75    17    14   274     0     111  pos
 11060    14    75    21    14   274     0      92  <=
 11061    14    75    24    14   274     0     111  lim
 11062    14    75    27    14   274     0      60  )
 11063    14    75    28    14   274     0     102  ;
 11064    14    76     9    14   274     0      36  int
 11065    14    76    13    14   274     0     111  rem
 11066    14    76    17    14   274     0      67  =
 11067    14    76    19    14   274     0      59  (
 11068    14    76    20    14   274     0     111  pos
 11069    14    76    24    14   274     0      92  <=
 11070    14    76    27    14   274     0     111  lim
 11071    14    76    31    14   274     0      58  ?
 11072    14    76    33    14   274     0     111  lim
 11073    14    76    37    14   274     0      77  -
 11074    14    76    39    14   274     0     111  pos
 11075    14    76    43    14   274     0      65  :
 11076    14    76    45    14   274     0     112  0
 11077    14    76    46    14   274     0      60  )
 11078    14    76    47    14   274     0     102  ;
 11079    14    77     9    14   274     0      36  int
 11080    14    77    13    14   274     0     111  off
 11081    14    77    17    14   274     0      67  =
 11082    14    77    19    14   274     0      59  (
 11083    14    77    20    14   274     0     111  pos
 11084    14    77    24    14   274     0      90  <<
 11085    14    77    27    14   274     0     112  2
 11086    14    77    28    14   274     0      60  )
 11087    14    77    30    14   274     0      74  +
 11088    14    77    32    14   274     0     111  offset
 11089    14    77    38    14   274     0     102  ;
 11090    14    78     9    14   274     0     111  assert
 11091    14    78    16    14   274     0      59  (
 11092    14    78    17    14   274     0     111  off
 11093    14    78    21    14   274     0      88  >=
 11094    14    78    24    14   274     0     112  0
 11095    14    78    25    14   274     0      60  )
 11096    14    78    26    14   274     0     102  ;
 11097    14    79     9    14   274     0      19  return
 11098    14    79    20    14   274     0     111  ByteBufferAsFloatBufferL
 11099    14    79    44    14   274     0      59  (
 11100    14    79    45    14   274     0     111  bb
 11101    14    79    47    14   274     0      66  ,
 11102    14    79    49    14   274     0      77  -
 11103    14    79    50    14   274     0     112  1
 11104    14    79    51    14   274     0      66  ,
 11105    14    79    53    14   274     0     112  0
 11106    14    79    54    14   274     0      66  ,
 11107    14    79    56    14   274     0     111  rem
 11108    14    79    59    14   274     0      66  ,
 11109    14    79    61    14   274     0     111  rem
 11110    14    79    64    14   274     0      66  ,
 11111    14    79    66    14   274     0     111  off
 11112    14    79    69    14   274     0      60  )
 11113    14    79    70    14   274     0     102  ;
 11114    14    80     5    14   274     0      64  }
 11115    14    80     5    14   274     0     728  ENDMETHOD
 11116    14    80     5    14   275     0     729  STARTMETHOD
 11117    14    82    12    14   275     0     111  FloatBuffer
 11118    14    82    24    14   275     0     111  duplicate
 11119    14    82    33    14   275     0      59  (
 11120    14    82    34    14   275     0      60  )
 11121    14    82    36    14   275     0      63  {
 11122    14    83     9    14   275     0      19  return
 11123    14    83    20    14   275     0     111  ByteBufferAsFloatBufferL
 11124    14    83    44    14   275     0      59  (
 11125    14    83    45    14   275     0     111  bb
 11126    14    83    47    14   275     0      66  ,
 11127    14    84    53    14   275     1     111  this.markValue
 11128    14    84    67    14   275     1      59  (
 11129    14    84    68    14   275     1      60  )
 11130    14    84    69    14   275     1      66  ,
 11131    14    85    53    14   275     1     111  this.position
 11132    14    85    66    14   275     1      59  (
 11133    14    85    67    14   275     1      60  )
 11134    14    85    68    14   275     1      66  ,
 11135    14    86    53    14   275     1     111  this.limit
 11136    14    86    63    14   275     1      59  (
 11137    14    86    64    14   275     1      60  )
 11138    14    86    65    14   275     1      66  ,
 11139    14    87    53    14   275     1     111  this.capacity
 11140    14    87    66    14   275     1      59  (
 11141    14    87    67    14   275     1      60  )
 11142    14    87    68    14   275     1      66  ,
 11143    14    88    53    14   275     0     111  offset
 11144    14    88    59    14   275     0      60  )
 11145    14    88    60    14   275     0     102  ;
 11146    14    89     5    14   275     0      64  }
 11147    14    89     5    14   275     0     730  ENDMETHOD
 11148    14    89     5    14   276     0     731  STARTMETHOD
 11149    14    91    12    14   276     0     111  FloatBuffer
 11150    14    91    24    14   276     0     111  asReadOnlyBuffer
 11151    14    91    40    14   276     0      59  (
 11152    14    91    41    14   276     0      60  )
 11153    14    91    43    14   276     0      63  {
 11154    14    93     9    14   276     0      19  return
 11155    14    93    20    14   276     0     111  ByteBufferAsFloatBufferRL
 11156    14    93    45    14   276     0      59  (
 11157    14    93    46    14   276     0     111  bb
 11158    14    93    48    14   276     0      66  ,
 11159    14    94    50    14   276     1     111  this.markValue
 11160    14    94    64    14   276     1      59  (
 11161    14    94    65    14   276     1      60  )
 11162    14    94    66    14   276     1      66  ,
 11163    14    95    50    14   276     1     111  this.position
 11164    14    95    63    14   276     1      59  (
 11165    14    95    64    14   276     1      60  )
 11166    14    95    65    14   276     1      66  ,
 11167    14    96    50    14   276     1     111  this.limit
 11168    14    96    60    14   276     1      59  (
 11169    14    96    61    14   276     1      60  )
 11170    14    96    62    14   276     1      66  ,
 11171    14    97    50    14   276     1     111  this.capacity
 11172    14    97    63    14   276     1      59  (
 11173    14    97    64    14   276     1      60  )
 11174    14    97    65    14   276     1      66  ,
 11175    14    98    50    14   276     0     111  offset
 11176    14    98    56    14   276     0      60  )
 11177    14    98    57    14   276     1     102  ;
 11178    14   102     5    14   276     1      64  }
 11179    14   102     5    14   276     0     732  ENDMETHOD
 11180    14   102     5    14   277     0     733  STARTMETHOD
 11181    14   106     5    14   277     0      23  protected
 11182    14   106    15    14   277     0      36  int
 11183    14   106    19    14   277     0     111  ix
 11184    14   106    21    14   277     0      59  (
 11185    14   106    22    14   277     0      36  int
 11186    14   106    26    14   277     0     111  i
 11187    14   106    27    14   277     0      60  )
 11188    14   106    29    14   277     0      63  {
 11189    14   107     9    14   277     0      19  return
 11190    14   107    16    14   277     0      59  (
 11191    14   107    17    14   277     0     111  i
 11192    14   107    19    14   277     0      90  <<
 11193    14   107    22    14   277     0     112  2
 11194    14   107    23    14   277     0      60  )
 11195    14   107    25    14   277     0      74  +
 11196    14   107    27    14   277     0     111  offset
 11197    14   107    33    14   277     1     102  ;
 11198    14   108     5    14   277     1      64  }
 11199    14   108     5    14   277     0     734  ENDMETHOD
 11200    14   108     5    14   278     0     735  STARTMETHOD
 11201    14   110    18    14   278     0     111  get
 11202    14   110    21    14   278     0      59  (
 11203    14   110    22    14   278     0      60  )
 11204    14   110    24    14   278     0      63  {
 11205    14   111     9    14   278     0      19  return
 11206    14   111    16    14   278     0     111  Bits.getFloatL
 11207    14   111    30    14   278     0      59  (
 11208    14   111    31    14   278     0     111  bb
 11209    14   111    33    14   278     0      66  ,
 11210    14   111    35    14   278     0     111  ix
 11211    14   111    37    14   278     0      59  (
 11212    14   111    38    14   278     0     111  nextGetIndex
 11213    14   111    50    14   278     0      59  (
 11214    14   111    51    14   278     0      60  )
 11215    14   111    52    14   278     0      60  )
 11216    14   111    53    14   278     0      60  )
 11217    14   111    54    14   278     1     102  ;
 11218    14   112     5    14   278     1      64  }
 11219    14   112     5    14   278     0     736  ENDMETHOD
 11220    14   112     5    14   279     0     737  STARTMETHOD
 11221    14   114    18    14   279     0     111  get
 11222    14   114    21    14   279     0      59  (
 11223    14   114    22    14   279     0      36  int
 11224    14   114    26    14   279     0     111  i
 11225    14   114    27    14   279     0      60  )
 11226    14   114    29    14   279     0      63  {
 11227    14   115     9    14   279     0      19  return
 11228    14   115    16    14   279     0     111  Bits.getFloatL
 11229    14   115    30    14   279     0      59  (
 11230    14   115    31    14   279     0     111  bb
 11231    14   115    33    14   279     0      66  ,
 11232    14   115    35    14   279     0     111  ix
 11233    14   115    37    14   279     0      59  (
 11234    14   115    38    14   279     0     111  checkIndex
 11235    14   115    48    14   279     0      59  (
 11236    14   115    49    14   279     0     111  i
 11237    14   115    50    14   279     0      60  )
 11238    14   115    51    14   279     0      60  )
 11239    14   115    52    14   279     0      60  )
 11240    14   115    53    14   279     0     102  ;
 11241    14   116     5    14   279     0      64  }
 11242    14   116     5    14   279     0     738  ENDMETHOD
 11243    14   116     5    14   280     0     739  STARTMETHOD
 11244    14   120    12    14   280     0     111  FloatBuffer
 11245    14   120    24    14   280     0     111  put
 11246    14   120    27    14   280     0      59  (
 11247    14   120    34    14   280     0     111  x
 11248    14   120    35    14   280     0      60  )
 11249    14   120    37    14   280     0      63  {
 11250    14   122     9    14   280     0     111  Bits.putFloatL
 11251    14   122    23    14   280     0      59  (
 11252    14   122    24    14   280     0     111  bb
 11253    14   122    26    14   280     0      66  ,
 11254    14   122    28    14   280     0     111  ix
 11255    14   122    30    14   280     0      59  (
 11256    14   122    31    14   280     0     111  nextPutIndex
 11257    14   122    43    14   280     0      59  (
 11258    14   122    44    14   280     0      60  )
 11259    14   122    45    14   280     0      60  )
 11260    14   122    46    14   280     0      66  ,
 11261    14   122    48    14   280     0     111  x
 11262    14   122    49    14   280     0      60  )
 11263    14   122    50    14   280     0     102  ;
 11264    14   123     9    14   280     0      19  return
 11265    14   123    16    14   280     0      44  this
 11266    14   123    20    14   280     0     102  ;
 11267    14   127     5    14   280     0      64  }
 11268    14   127     5    14   280     0     740  ENDMETHOD
 11269    14   127     5    14   281     0     741  STARTMETHOD
 11270    14   129    12    14   281     0     111  FloatBuffer
 11271    14   129    24    14   281     0     111  put
 11272    14   129    27    14   281     0      59  (
 11273    14   129    28    14   281     0      36  int
 11274    14   129    32    14   281     0     111  i
 11275    14   129    33    14   281     0      66  ,
 11276    14   129    41    14   281     0     111  x
 11277    14   129    42    14   281     0      60  )
 11278    14   129    44    14   281     0      63  {
 11279    14   131     9    14   281     0     111  Bits.putFloatL
 11280    14   131    23    14   281     0      59  (
 11281    14   131    24    14   281     0     111  bb
 11282    14   131    26    14   281     0      66  ,
 11283    14   131    28    14   281     0     111  ix
 11284    14   131    30    14   281     0      59  (
 11285    14   131    31    14   281     0     111  checkIndex
 11286    14   131    41    14   281     0      59  (
 11287    14   131    42    14   281     0     111  i
 11288    14   131    43    14   281     0      60  )
 11289    14   131    44    14   281     0      60  )
 11290    14   131    45    14   281     0      66  ,
 11291    14   131    47    14   281     0     111  x
 11292    14   131    48    14   281     0      60  )
 11293    14   131    49    14   281     0     102  ;
 11294    14   132     9    14   281     0      19  return
 11295    14   132    16    14   281     0      44  this
 11296    14   132    20    14   281     0     102  ;
 11297    14   136     5    14   281     0      64  }
 11298    14   136     5    14   281     0     742  ENDMETHOD
 11299    14   136     5    14   282     0     743  STARTMETHOD
 11300    14   138    12    14   282     0     111  FloatBuffer
 11301    14   138    24    14   282     0     111  compact
 11302    14   138    31    14   282     0      59  (
 11303    14   138    32    14   282     0      60  )
 11304    14   138    34    14   282     0      63  {
 11305    14   140     9    14   282     1      36  int
 11306    14   140    13    14   282     1     111  pos
 11307    14   140    17    14   282     1      67  =
 11308    14   140    19    14   282     1     111  position
 11309    14   140    27    14   282     1      59  (
 11310    14   140    28    14   282     1      60  )
 11311    14   140    29    14   282     1     102  ;
 11312    14   141     9    14   282     1      36  int
 11313    14   141    13    14   282     1     111  lim
 11314    14   141    17    14   282     1      67  =
 11315    14   141    19    14   282     1     111  limit
 11316    14   141    24    14   282     1      59  (
 11317    14   141    25    14   282     1      60  )
 11318    14   141    26    14   282     1     102  ;
 11319    14   142     9    14   282     0     111  assert
 11320    14   142    16    14   282     0      59  (
 11321    14   142    17    14   282     0     111  pos
 11322    14   142    21    14   282     0      92  <=
 11323    14   142    24    14   282     0     111  lim
 11324    14   142    27    14   282     0      60  )
 11325    14   142    28    14   282     0     102  ;
 11326    14   143     9    14   282     0      36  int
 11327    14   143    13    14   282     0     111  rem
 11328    14   143    17    14   282     0      67  =
 11329    14   143    19    14   282     0      59  (
 11330    14   143    20    14   282     0     111  pos
 11331    14   143    24    14   282     0      92  <=
 11332    14   143    27    14   282     0     111  lim
 11333    14   143    31    14   282     0      58  ?
 11334    14   143    33    14   282     0     111  lim
 11335    14   143    37    14   282     0      77  -
 11336    14   143    39    14   282     0     111  pos
 11337    14   143    43    14   282     0      65  :
 11338    14   143    45    14   282     0     112  0
 11339    14   143    46    14   282     0      60  )
 11340    14   143    47    14   282     0     102  ;
 11341    14   145     9    14   282     0     111  ByteBuffer
 11342    14   145    20    14   282     0     111  db
 11343    14   145    23    14   282     0      67  =
 11344    14   145    25    14   282     0     111  bb.duplicate
 11345    14   145    37    14   282     0      59  (
 11346    14   145    38    14   282     0      60  )
 11347    14   145    39    14   282     0     102  ;
 11348    14   146     9    14   282     0     111  db.limit
 11349    14   146    17    14   282     0      59  (
 11350    14   146    18    14   282     0     111  ix
 11351    14   146    20    14   282     0      59  (
 11352    14   146    21    14   282     0     111  lim
 11353    14   146    24    14   282     0      60  )
 11354    14   146    25    14   282     0      60  )
 11355    14   146    26    14   282     0     102  ;
 11356    14   147     9    14   282     0     111  db.position
 11357    14   147    20    14   282     0      59  (
 11358    14   147    21    14   282     0     111  ix
 11359    14   147    23    14   282     0      59  (
 11360    14   147    24    14   282     0     112  0
 11361    14   147    25    14   282     0      60  )
 11362    14   147    26    14   282     0      60  )
 11363    14   147    27    14   282     0     102  ;
 11364    14   148     9    14   282     0     111  ByteBuffer
 11365    14   148    20    14   282     0     111  sb
 11366    14   148    23    14   282     0      67  =
 11367    14   148    25    14   282     0     111  db.slice
 11368    14   148    33    14   282     0      59  (
 11369    14   148    34    14   282     0      60  )
 11370    14   148    35    14   282     0     102  ;
 11371    14   149     9    14   282     0     111  sb.position
 11372    14   149    20    14   282     0      59  (
 11373    14   149    21    14   282     0     111  pos
 11374    14   149    25    14   282     0      90  <<
 11375    14   149    28    14   282     0     112  2
 11376    14   149    29    14   282     0      60  )
 11377    14   149    30    14   282     0     102  ;
 11378    14   150     9    14   282     0     111  sb.compact
 11379    14   150    19    14   282     0      59  (
 11380    14   150    20    14   282     0      60  )
 11381    14   150    21    14   282     0     102  ;
 11382    14   151     9    14   282     0     111  position
 11383    14   151    17    14   282     0      59  (
 11384    14   151    18    14   282     0     111  rem
 11385    14   151    21    14   282     0      60  )
 11386    14   151    22    14   282     0     102  ;
 11387    14   152     9    14   282     0     111  limit
 11388    14   152    14    14   282     0      59  (
 11389    14   152    15    14   282     0     111  capacity
 11390    14   152    23    14   282     0      59  (
 11391    14   152    24    14   282     0      60  )
 11392    14   152    25    14   282     0      60  )
 11393    14   152    26    14   282     0     102  ;
 11394    14   153     9    14   282     0      19  return
 11395    14   153    16    14   282     0      44  this
 11396    14   153    20    14   282     0     102  ;
 11397    14   157     5    14   282     0      64  }
 11398    14   157     5    14   282     0     744  ENDMETHOD
 11399    14   157     5    14   283     0     745  STARTMETHOD
 11400    14   159    12    14   283     0      39  boolean
 11401    14   159    20    14   283     0     111  isDirect
 11402    14   159    28    14   283     0      59  (
 11403    14   159    29    14   283     0      60  )
 11404    14   159    31    14   283     0      63  {
 11405    14   160     9    14   283     0      19  return
 11406    14   160    16    14   283     0     111  bb.isDirect
 11407    14   160    27    14   283     0      59  (
 11408    14   160    28    14   283     0      60  )
 11409    14   160    29    14   283     1     102  ;
 11410    14   161     5    14   283     1      64  }
 11411    14   161     5    14   283     0     746  ENDMETHOD
 11412    14   161     5    14   284     0     747  STARTMETHOD
 11413    14   163    12    14   284     0      39  boolean
 11414    14   163    20    14   284     0     111  isReadOnly
 11415    14   163    30    14   284     0      59  (
 11416    14   163    31    14   284     0      60  )
 11417    14   163    33    14   284     0      63  {
 11418    14   164     9    14   284     0      19  return
 11419    14   164    16    14   284     0      43  false
 11420    14   164    21    14   284     1     102  ;
 11421    14   165     5    14   284     1      64  }
 11422    14   165     5    14   284     0     748  ENDMETHOD
 11423    14   165     5    14   285     0     749  STARTMETHOD
 11424    14   207    12    14   285     0     111  ByteOrder
 11425    14   207    22    14   285     0     111  order
 11426    14   207    27    14   285     0      59  (
 11427    14   207    28    14   285     0      60  )
 11428    14   207    30    14   285     0      63  {
 11429    14   212     9    14   285     0      19  return
 11430    14   212    16    14   285     0     111  ByteOrder.LITTLE_ENDIAN
 11431    14   212    39    14   285     1     102  ;
 11432    14   214     5    14   285     1      64  }
 11433    14   214     5    14   285     0     750  ENDMETHOD
 11434    14   216     1    14    -1     0      64  }
 11435    14   216     1    14    -1     1     751  ENDCLASS
 11436    14   216     1    -1    -1     1     752  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsFloatBufferL.java
 11437    15     1     1    -1    -1     1     753  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsFloatBufferRB.java
 11438    15    28     9    -1    -1     0     111  java.nio
 11439    15    28    17    -1    -1     0     102  ;
 11440    15    31     1    15    -1     0     754  STARTCLASS
 11441    15    31     1    15    -1     0      24  class
 11442    15    31     7    15    -1     0     111  ByteBufferAsFloatBufferRB
 11443    15    32     5    15    -1     0      38  extends
 11444    15    32    13    15    -1     0     111  ByteBufferAsFloatBufferB
 11445    15    33     1    15    -1     0      63  {
 11446    15    33     1    15   286     0     755  STARTMETHOD
 11447    15    42     5    15   286     0     111  ByteBufferAsFloatBufferRB
 11448    15    42    30    15   286     0      59  (
 11449    15    42    31    15   286     0     111  ByteBuffer
 11450    15    42    42    15   286     0     111  bb
 11451    15    42    44    15   286     0      60  )
 11452    15    42    46    15   286     0      63  {
 11453    15    55     9    15   286     0      27  super
 11454    15    55    14    15   286     0      59  (
 11455    15    55    15    15   286     0     111  bb
 11456    15    55    17    15   286     0      60  )
 11457    15    55    18    15   286     0     102  ;
 11458    15    57     5    15   286     0      64  }
 11459    15    57     5    15   286     0     756  ENDMETHOD
 11460    15    57     5    15   287     0     757  STARTMETHOD
 11461    15    59     5    15   287     0     111  ByteBufferAsFloatBufferRB
 11462    15    59    30    15   287     0      59  (
 11463    15    59    31    15   287     0     111  ByteBuffer
 11464    15    59    42    15   287     0     111  bb
 11465    15    59    44    15   287     0      66  ,
 11466    15    60    38    15   287     0      36  int
 11467    15    60    42    15   287     0     111  mark
 11468    15    60    46    15   287     0      66  ,
 11469    15    60    48    15   287     0      36  int
 11470    15    60    52    15   287     0     111  pos
 11471    15    60    55    15   287     0      66  ,
 11472    15    60    57    15   287     0      36  int
 11473    15    60    61    15   287     0     111  lim
 11474    15    60    64    15   287     0      66  ,
 11475    15    60    66    15   287     0      36  int
 11476    15    60    70    15   287     0     111  cap
 11477    15    60    73    15   287     0      66  ,
 11478    15    61    38    15   287     0      36  int
 11479    15    61    42    15   287     0     111  off
 11480    15    61    45    15   287     0      60  )
 11481    15    62     5    15   287     0      63  {
 11482    15    68     9    15   287     0      27  super
 11483    15    68    14    15   287     0      59  (
 11484    15    68    15    15   287     0     111  bb
 11485    15    68    17    15   287     0      66  ,
 11486    15    68    19    15   287     0     111  mark
 11487    15    68    23    15   287     0      66  ,
 11488    15    68    25    15   287     0     111  pos
 11489    15    68    28    15   287     0      66  ,
 11490    15    68    30    15   287     0     111  lim
 11491    15    68    33    15   287     0      66  ,
 11492    15    68    35    15   287     0     111  cap
 11493    15    68    38    15   287     0      66  ,
 11494    15    68    40    15   287     0     111  off
 11495    15    68    43    15   287     0      60  )
 11496    15    68    44    15   287     0     102  ;
 11497    15    70     5    15   287     0      64  }
 11498    15    70     5    15   287     0     758  ENDMETHOD
 11499    15    70     5    15   288     0     759  STARTMETHOD
 11500    15    72    12    15   288     0     111  FloatBuffer
 11501    15    72    24    15   288     0     111  slice
 11502    15    72    29    15   288     0      59  (
 11503    15    72    30    15   288     0      60  )
 11504    15    72    32    15   288     0      63  {
 11505    15    73     9    15   288     1      36  int
 11506    15    73    13    15   288     1     111  pos
 11507    15    73    17    15   288     1      67  =
 11508    15    73    19    15   288     1     111  this.position
 11509    15    73    32    15   288     1      59  (
 11510    15    73    33    15   288     1      60  )
 11511    15    73    34    15   288     1     102  ;
 11512    15    74     9    15   288     1      36  int
 11513    15    74    13    15   288     1     111  lim
 11514    15    74    17    15   288     1      67  =
 11515    15    74    19    15   288     1     111  this.limit
 11516    15    74    29    15   288     1      59  (
 11517    15    74    30    15   288     1      60  )
 11518    15    74    31    15   288     1     102  ;
 11519    15    75     9    15   288     0     111  assert
 11520    15    75    16    15   288     0      59  (
 11521    15    75    17    15   288     0     111  pos
 11522    15    75    21    15   288     0      92  <=
 11523    15    75    24    15   288     0     111  lim
 11524    15    75    27    15   288     0      60  )
 11525    15    75    28    15   288     0     102  ;
 11526    15    76     9    15   288     0      36  int
 11527    15    76    13    15   288     0     111  rem
 11528    15    76    17    15   288     0      67  =
 11529    15    76    19    15   288     0      59  (
 11530    15    76    20    15   288     0     111  pos
 11531    15    76    24    15   288     0      92  <=
 11532    15    76    27    15   288     0     111  lim
 11533    15    76    31    15   288     0      58  ?
 11534    15    76    33    15   288     0     111  lim
 11535    15    76    37    15   288     0      77  -
 11536    15    76    39    15   288     0     111  pos
 11537    15    76    43    15   288     0      65  :
 11538    15    76    45    15   288     0     112  0
 11539    15    76    46    15   288     0      60  )
 11540    15    76    47    15   288     0     102  ;
 11541    15    77     9    15   288     0      36  int
 11542    15    77    13    15   288     0     111  off
 11543    15    77    17    15   288     0      67  =
 11544    15    77    19    15   288     0      59  (
 11545    15    77    20    15   288     0     111  pos
 11546    15    77    24    15   288     0      90  <<
 11547    15    77    27    15   288     0     112  2
 11548    15    77    28    15   288     0      60  )
 11549    15    77    30    15   288     0      74  +
 11550    15    77    32    15   288     0     111  offset
 11551    15    77    38    15   288     0     102  ;
 11552    15    78     9    15   288     0     111  assert
 11553    15    78    16    15   288     0      59  (
 11554    15    78    17    15   288     0     111  off
 11555    15    78    21    15   288     0      88  >=
 11556    15    78    24    15   288     0     112  0
 11557    15    78    25    15   288     0      60  )
 11558    15    78    26    15   288     0     102  ;
 11559    15    79     9    15   288     0      19  return
 11560    15    79    20    15   288     0     111  ByteBufferAsFloatBufferRB
 11561    15    79    45    15   288     0      59  (
 11562    15    79    46    15   288     0     111  bb
 11563    15    79    48    15   288     0      66  ,
 11564    15    79    50    15   288     0      77  -
 11565    15    79    51    15   288     0     112  1
 11566    15    79    52    15   288     0      66  ,
 11567    15    79    54    15   288     0     112  0
 11568    15    79    55    15   288     0      66  ,
 11569    15    79    57    15   288     0     111  rem
 11570    15    79    60    15   288     0      66  ,
 11571    15    79    62    15   288     0     111  rem
 11572    15    79    65    15   288     0      66  ,
 11573    15    79    67    15   288     0     111  off
 11574    15    79    70    15   288     0      60  )
 11575    15    79    71    15   288     0     102  ;
 11576    15    80     5    15   288     0      64  }
 11577    15    80     5    15   288     0     760  ENDMETHOD
 11578    15    80     5    15   289     0     761  STARTMETHOD
 11579    15    82    12    15   289     0     111  FloatBuffer
 11580    15    82    24    15   289     0     111  duplicate
 11581    15    82    33    15   289     0      59  (
 11582    15    82    34    15   289     0      60  )
 11583    15    82    36    15   289     0      63  {
 11584    15    83     9    15   289     0      19  return
 11585    15    83    20    15   289     0     111  ByteBufferAsFloatBufferRB
 11586    15    83    45    15   289     0      59  (
 11587    15    83    46    15   289     0     111  bb
 11588    15    83    48    15   289     0      66  ,
 11589    15    84    53    15   289     1     111  this.markValue
 11590    15    84    67    15   289     1      59  (
 11591    15    84    68    15   289     1      60  )
 11592    15    84    69    15   289     1      66  ,
 11593    15    85    53    15   289     1     111  this.position
 11594    15    85    66    15   289     1      59  (
 11595    15    85    67    15   289     1      60  )
 11596    15    85    68    15   289     1      66  ,
 11597    15    86    53    15   289     1     111  this.limit
 11598    15    86    63    15   289     1      59  (
 11599    15    86    64    15   289     1      60  )
 11600    15    86    65    15   289     1      66  ,
 11601    15    87    53    15   289     1     111  this.capacity
 11602    15    87    66    15   289     1      59  (
 11603    15    87    67    15   289     1      60  )
 11604    15    87    68    15   289     1      66  ,
 11605    15    88    53    15   289     0     111  offset
 11606    15    88    59    15   289     0      60  )
 11607    15    88    60    15   289     0     102  ;
 11608    15    89     5    15   289     0      64  }
 11609    15    89     5    15   289     0     762  ENDMETHOD
 11610    15    89     5    15   290     0     763  STARTMETHOD
 11611    15    91    12    15   290     0     111  FloatBuffer
 11612    15    91    24    15   290     0     111  asReadOnlyBuffer
 11613    15    91    40    15   290     0      59  (
 11614    15    91    41    15   290     0      60  )
 11615    15    91    43    15   290     0      63  {
 11616    15   100     9    15   290     0      19  return
 11617    15   100    16    15   290     0     111  duplicate
 11618    15   100    25    15   290     0      59  (
 11619    15   100    26    15   290     0      60  )
 11620    15   100    27    15   290     0     102  ;
 11621    15   102     5    15   290     0      64  }
 11622    15   102     5    15   290     0     764  ENDMETHOD
 11623    15   102     5    15   291     0     765  STARTMETHOD
 11624    15   120    12    15   291     0     111  FloatBuffer
 11625    15   120    24    15   291     0     111  put
 11626    15   120    27    15   291     0      59  (
 11627    15   120    34    15   291     0     111  x
 11628    15   120    35    15   291     0      60  )
 11629    15   120    37    15   291     0      63  {
 11630    15   125     9    15   291     0      20  throw
 11631    15   125    19    15   291     0     111  ReadOnlyBufferException
 11632    15   125    42    15   291     0      59  (
 11633    15   125    43    15   291     0      60  )
 11634    15   125    44    15   291     0     102  ;
 11635    15   127     5    15   291     0      64  }
 11636    15   127     5    15   291     0     766  ENDMETHOD
 11637    15   127     5    15   292     0     767  STARTMETHOD
 11638    15   129    12    15   292     0     111  FloatBuffer
 11639    15   129    24    15   292     0     111  put
 11640    15   129    27    15   292     0      59  (
 11641    15   129    28    15   292     0      36  int
 11642    15   129    32    15   292     0     111  i
 11643    15   129    33    15   292     0      66  ,
 11644    15   129    41    15   292     0     111  x
 11645    15   129    42    15   292     0      60  )
 11646    15   129    44    15   292     0      63  {
 11647    15   134     9    15   292     0      20  throw
 11648    15   134    19    15   292     1     111  ReadOnlyBufferException
 11649    15   134    42    15   292     1      59  (
 11650    15   134    43    15   292     1      60  )
 11651    15   134    44    15   292     1     102  ;
 11652    15   136     5    15   292     1      64  }
 11653    15   136     5    15   292     0     768  ENDMETHOD
 11654    15   136     5    15   293     0     769  STARTMETHOD
 11655    15   138    12    15   293     0     111  FloatBuffer
 11656    15   138    24    15   293     0     111  compact
 11657    15   138    31    15   293     0      59  (
 11658    15   138    32    15   293     0      60  )
 11659    15   138    34    15   293     0      63  {
 11660    15   155     9    15   293     0      20  throw
 11661    15   155    19    15   293     1     111  ReadOnlyBufferException
 11662    15   155    42    15   293     1      59  (
 11663    15   155    43    15   293     1      60  )
 11664    15   155    44    15   293     1     102  ;
 11665    15   157     5    15   293     1      64  }
 11666    15   157     5    15   293     0     770  ENDMETHOD
 11667    15   157     5    15   294     0     771  STARTMETHOD
 11668    15   159    12    15   294     0      39  boolean
 11669    15   159    20    15   294     0     111  isDirect
 11670    15   159    28    15   294     0      59  (
 11671    15   159    29    15   294     0      60  )
 11672    15   159    31    15   294     0      63  {
 11673    15   160     9    15   294     0      19  return
 11674    15   160    16    15   294     1     111  bb.isDirect
 11675    15   160    27    15   294     1      59  (
 11676    15   160    28    15   294     1      60  )
 11677    15   160    29    15   294     1     102  ;
 11678    15   161     5    15   294     1      64  }
 11679    15   161     5    15   294     0     772  ENDMETHOD
 11680    15   161     5    15   295     0     773  STARTMETHOD
 11681    15   163    12    15   295     0      39  boolean
 11682    15   163    20    15   295     0     111  isReadOnly
 11683    15   163    30    15   295     0      59  (
 11684    15   163    31    15   295     0      60  )
 11685    15   163    33    15   295     0      63  {
 11686    15   164     9    15   295     0      19  return
 11687    15   164    16    15   295     0      52  true
 11688    15   164    20    15   295     0     102  ;
 11689    15   165     5    15   295     0      64  }
 11690    15   165     5    15   295     0     774  ENDMETHOD
 11691    15   165     5    15   296     0     775  STARTMETHOD
 11692    15   207    12    15   296     0     111  ByteOrder
 11693    15   207    22    15   296     0     111  order
 11694    15   207    27    15   296     0      59  (
 11695    15   207    28    15   296     0      60  )
 11696    15   207    30    15   296     0      63  {
 11697    15   209     9    15   296     0      19  return
 11698    15   209    16    15   296     0     111  ByteOrder.BIG_ENDIAN
 11699    15   209    36    15   296     0     102  ;
 11700    15   214     5    15   296     0      64  }
 11701    15   214     5    15   296     0     776  ENDMETHOD
 11702    15   216     1    15    -1     0      64  }
 11703    15   216     1    15    -1     1     777  ENDCLASS
 11704    15   216     1    -1    -1     1     778  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsFloatBufferRB.java
 11705    16     1     1    -1    -1     1     779  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsFloatBufferRL.java
 11706    16    28     9    -1    -1     0     111  java.nio
 11707    16    28    17    -1    -1     0     102  ;
 11708    16    31     1    16    -1     0     780  STARTCLASS
 11709    16    31     1    16    -1     0      24  class
 11710    16    31     7    16    -1     0     111  ByteBufferAsFloatBufferRL
 11711    16    32     5    16    -1     0      38  extends
 11712    16    32    13    16    -1     0     111  ByteBufferAsFloatBufferL
 11713    16    33     1    16    -1     0      63  {
 11714    16    33     1    16   297     0     781  STARTMETHOD
 11715    16    42     5    16   297     0     111  ByteBufferAsFloatBufferRL
 11716    16    42    30    16   297     0      59  (
 11717    16    42    31    16   297     0     111  ByteBuffer
 11718    16    42    42    16   297     0     111  bb
 11719    16    42    44    16   297     0      60  )
 11720    16    42    46    16   297     0      63  {
 11721    16    55     9    16   297     0      27  super
 11722    16    55    14    16   297     0      59  (
 11723    16    55    15    16   297     0     111  bb
 11724    16    55    17    16   297     0      60  )
 11725    16    55    18    16   297     0     102  ;
 11726    16    57     5    16   297     0      64  }
 11727    16    57     5    16   297     0     782  ENDMETHOD
 11728    16    57     5    16   298     0     783  STARTMETHOD
 11729    16    59     5    16   298     0     111  ByteBufferAsFloatBufferRL
 11730    16    59    30    16   298     0      59  (
 11731    16    59    31    16   298     0     111  ByteBuffer
 11732    16    59    42    16   298     0     111  bb
 11733    16    59    44    16   298     0      66  ,
 11734    16    60    38    16   298     0      36  int
 11735    16    60    42    16   298     0     111  mark
 11736    16    60    46    16   298     0      66  ,
 11737    16    60    48    16   298     0      36  int
 11738    16    60    52    16   298     0     111  pos
 11739    16    60    55    16   298     0      66  ,
 11740    16    60    57    16   298     0      36  int
 11741    16    60    61    16   298     0     111  lim
 11742    16    60    64    16   298     0      66  ,
 11743    16    60    66    16   298     0      36  int
 11744    16    60    70    16   298     0     111  cap
 11745    16    60    73    16   298     0      66  ,
 11746    16    61    38    16   298     0      36  int
 11747    16    61    42    16   298     0     111  off
 11748    16    61    45    16   298     0      60  )
 11749    16    62     5    16   298     0      63  {
 11750    16    68     9    16   298     0      27  super
 11751    16    68    14    16   298     0      59  (
 11752    16    68    15    16   298     0     111  bb
 11753    16    68    17    16   298     0      66  ,
 11754    16    68    19    16   298     0     111  mark
 11755    16    68    23    16   298     0      66  ,
 11756    16    68    25    16   298     0     111  pos
 11757    16    68    28    16   298     0      66  ,
 11758    16    68    30    16   298     0     111  lim
 11759    16    68    33    16   298     0      66  ,
 11760    16    68    35    16   298     0     111  cap
 11761    16    68    38    16   298     0      66  ,
 11762    16    68    40    16   298     0     111  off
 11763    16    68    43    16   298     0      60  )
 11764    16    68    44    16   298     0     102  ;
 11765    16    70     5    16   298     0      64  }
 11766    16    70     5    16   298     0     784  ENDMETHOD
 11767    16    70     5    16   299     0     785  STARTMETHOD
 11768    16    72    12    16   299     0     111  FloatBuffer
 11769    16    72    24    16   299     0     111  slice
 11770    16    72    29    16   299     0      59  (
 11771    16    72    30    16   299     0      60  )
 11772    16    72    32    16   299     0      63  {
 11773    16    73     9    16   299     1      36  int
 11774    16    73    13    16   299     1     111  pos
 11775    16    73    17    16   299     1      67  =
 11776    16    73    19    16   299     1     111  this.position
 11777    16    73    32    16   299     1      59  (
 11778    16    73    33    16   299     1      60  )
 11779    16    73    34    16   299     1     102  ;
 11780    16    74     9    16   299     1      36  int
 11781    16    74    13    16   299     1     111  lim
 11782    16    74    17    16   299     1      67  =
 11783    16    74    19    16   299     1     111  this.limit
 11784    16    74    29    16   299     1      59  (
 11785    16    74    30    16   299     1      60  )
 11786    16    74    31    16   299     1     102  ;
 11787    16    75     9    16   299     0     111  assert
 11788    16    75    16    16   299     0      59  (
 11789    16    75    17    16   299     0     111  pos
 11790    16    75    21    16   299     0      92  <=
 11791    16    75    24    16   299     0     111  lim
 11792    16    75    27    16   299     0      60  )
 11793    16    75    28    16   299     0     102  ;
 11794    16    76     9    16   299     0      36  int
 11795    16    76    13    16   299     0     111  rem
 11796    16    76    17    16   299     0      67  =
 11797    16    76    19    16   299     0      59  (
 11798    16    76    20    16   299     0     111  pos
 11799    16    76    24    16   299     0      92  <=
 11800    16    76    27    16   299     0     111  lim
 11801    16    76    31    16   299     0      58  ?
 11802    16    76    33    16   299     0     111  lim
 11803    16    76    37    16   299     0      77  -
 11804    16    76    39    16   299     0     111  pos
 11805    16    76    43    16   299     0      65  :
 11806    16    76    45    16   299     0     112  0
 11807    16    76    46    16   299     0      60  )
 11808    16    76    47    16   299     0     102  ;
 11809    16    77     9    16   299     0      36  int
 11810    16    77    13    16   299     0     111  off
 11811    16    77    17    16   299     0      67  =
 11812    16    77    19    16   299     0      59  (
 11813    16    77    20    16   299     0     111  pos
 11814    16    77    24    16   299     0      90  <<
 11815    16    77    27    16   299     0     112  2
 11816    16    77    28    16   299     0      60  )
 11817    16    77    30    16   299     0      74  +
 11818    16    77    32    16   299     0     111  offset
 11819    16    77    38    16   299     0     102  ;
 11820    16    78     9    16   299     0     111  assert
 11821    16    78    16    16   299     0      59  (
 11822    16    78    17    16   299     0     111  off
 11823    16    78    21    16   299     0      88  >=
 11824    16    78    24    16   299     0     112  0
 11825    16    78    25    16   299     0      60  )
 11826    16    78    26    16   299     0     102  ;
 11827    16    79     9    16   299     0      19  return
 11828    16    79    20    16   299     0     111  ByteBufferAsFloatBufferRL
 11829    16    79    45    16   299     0      59  (
 11830    16    79    46    16   299     0     111  bb
 11831    16    79    48    16   299     0      66  ,
 11832    16    79    50    16   299     0      77  -
 11833    16    79    51    16   299     0     112  1
 11834    16    79    52    16   299     0      66  ,
 11835    16    79    54    16   299     0     112  0
 11836    16    79    55    16   299     0      66  ,
 11837    16    79    57    16   299     0     111  rem
 11838    16    79    60    16   299     0      66  ,
 11839    16    79    62    16   299     0     111  rem
 11840    16    79    65    16   299     0      66  ,
 11841    16    79    67    16   299     0     111  off
 11842    16    79    70    16   299     0      60  )
 11843    16    79    71    16   299     0     102  ;
 11844    16    80     5    16   299     0      64  }
 11845    16    80     5    16   299     0     786  ENDMETHOD
 11846    16    80     5    16   300     0     787  STARTMETHOD
 11847    16    82    12    16   300     0     111  FloatBuffer
 11848    16    82    24    16   300     0     111  duplicate
 11849    16    82    33    16   300     0      59  (
 11850    16    82    34    16   300     0      60  )
 11851    16    82    36    16   300     0      63  {
 11852    16    83     9    16   300     0      19  return
 11853    16    83    20    16   300     0     111  ByteBufferAsFloatBufferRL
 11854    16    83    45    16   300     0      59  (
 11855    16    83    46    16   300     0     111  bb
 11856    16    83    48    16   300     0      66  ,
 11857    16    84    53    16   300     1     111  this.markValue
 11858    16    84    67    16   300     1      59  (
 11859    16    84    68    16   300     1      60  )
 11860    16    84    69    16   300     1      66  ,
 11861    16    85    53    16   300     1     111  this.position
 11862    16    85    66    16   300     1      59  (
 11863    16    85    67    16   300     1      60  )
 11864    16    85    68    16   300     1      66  ,
 11865    16    86    53    16   300     1     111  this.limit
 11866    16    86    63    16   300     1      59  (
 11867    16    86    64    16   300     1      60  )
 11868    16    86    65    16   300     1      66  ,
 11869    16    87    53    16   300     1     111  this.capacity
 11870    16    87    66    16   300     1      59  (
 11871    16    87    67    16   300     1      60  )
 11872    16    87    68    16   300     1      66  ,
 11873    16    88    53    16   300     0     111  offset
 11874    16    88    59    16   300     0      60  )
 11875    16    88    60    16   300     0     102  ;
 11876    16    89     5    16   300     0      64  }
 11877    16    89     5    16   300     0     788  ENDMETHOD
 11878    16    89     5    16   301     0     789  STARTMETHOD
 11879    16    91    12    16   301     0     111  FloatBuffer
 11880    16    91    24    16   301     0     111  asReadOnlyBuffer
 11881    16    91    40    16   301     0      59  (
 11882    16    91    41    16   301     0      60  )
 11883    16    91    43    16   301     0      63  {
 11884    16   100     9    16   301     0      19  return
 11885    16   100    16    16   301     0     111  duplicate
 11886    16   100    25    16   301     0      59  (
 11887    16   100    26    16   301     0      60  )
 11888    16   100    27    16   301     0     102  ;
 11889    16   102     5    16   301     0      64  }
 11890    16   102     5    16   301     0     790  ENDMETHOD
 11891    16   102     5    16   302     0     791  STARTMETHOD
 11892    16   120    12    16   302     0     111  FloatBuffer
 11893    16   120    24    16   302     0     111  put
 11894    16   120    27    16   302     0      59  (
 11895    16   120    34    16   302     0     111  x
 11896    16   120    35    16   302     0      60  )
 11897    16   120    37    16   302     0      63  {
 11898    16   125     9    16   302     0      20  throw
 11899    16   125    19    16   302     0     111  ReadOnlyBufferException
 11900    16   125    42    16   302     0      59  (
 11901    16   125    43    16   302     0      60  )
 11902    16   125    44    16   302     0     102  ;
 11903    16   127     5    16   302     0      64  }
 11904    16   127     5    16   302     0     792  ENDMETHOD
 11905    16   127     5    16   303     0     793  STARTMETHOD
 11906    16   129    12    16   303     0     111  FloatBuffer
 11907    16   129    24    16   303     0     111  put
 11908    16   129    27    16   303     0      59  (
 11909    16   129    28    16   303     0      36  int
 11910    16   129    32    16   303     0     111  i
 11911    16   129    33    16   303     0      66  ,
 11912    16   129    41    16   303     0     111  x
 11913    16   129    42    16   303     0      60  )
 11914    16   129    44    16   303     0      63  {
 11915    16   134     9    16   303     0      20  throw
 11916    16   134    19    16   303     1     111  ReadOnlyBufferException
 11917    16   134    42    16   303     1      59  (
 11918    16   134    43    16   303     1      60  )
 11919    16   134    44    16   303     1     102  ;
 11920    16   136     5    16   303     1      64  }
 11921    16   136     5    16   303     0     794  ENDMETHOD
 11922    16   136     5    16   304     0     795  STARTMETHOD
 11923    16   138    12    16   304     0     111  FloatBuffer
 11924    16   138    24    16   304     0     111  compact
 11925    16   138    31    16   304     0      59  (
 11926    16   138    32    16   304     0      60  )
 11927    16   138    34    16   304     0      63  {
 11928    16   155     9    16   304     0      20  throw
 11929    16   155    19    16   304     1     111  ReadOnlyBufferException
 11930    16   155    42    16   304     1      59  (
 11931    16   155    43    16   304     1      60  )
 11932    16   155    44    16   304     1     102  ;
 11933    16   157     5    16   304     1      64  }
 11934    16   157     5    16   304     0     796  ENDMETHOD
 11935    16   157     5    16   305     0     797  STARTMETHOD
 11936    16   159    12    16   305     0      39  boolean
 11937    16   159    20    16   305     0     111  isDirect
 11938    16   159    28    16   305     0      59  (
 11939    16   159    29    16   305     0      60  )
 11940    16   159    31    16   305     0      63  {
 11941    16   160     9    16   305     0      19  return
 11942    16   160    16    16   305     1     111  bb.isDirect
 11943    16   160    27    16   305     1      59  (
 11944    16   160    28    16   305     1      60  )
 11945    16   160    29    16   305     1     102  ;
 11946    16   161     5    16   305     1      64  }
 11947    16   161     5    16   305     0     798  ENDMETHOD
 11948    16   161     5    16   306     0     799  STARTMETHOD
 11949    16   163    12    16   306     0      39  boolean
 11950    16   163    20    16   306     0     111  isReadOnly
 11951    16   163    30    16   306     0      59  (
 11952    16   163    31    16   306     0      60  )
 11953    16   163    33    16   306     0      63  {
 11954    16   164     9    16   306     0      19  return
 11955    16   164    16    16   306     0      52  true
 11956    16   164    20    16   306     0     102  ;
 11957    16   165     5    16   306     0      64  }
 11958    16   165     5    16   306     0     800  ENDMETHOD
 11959    16   165     5    16   307     0     801  STARTMETHOD
 11960    16   207    12    16   307     0     111  ByteOrder
 11961    16   207    22    16   307     0     111  order
 11962    16   207    27    16   307     0      59  (
 11963    16   207    28    16   307     0      60  )
 11964    16   207    30    16   307     0      63  {
 11965    16   212     9    16   307     0      19  return
 11966    16   212    16    16   307     0     111  ByteOrder.LITTLE_ENDIAN
 11967    16   212    39    16   307     0     102  ;
 11968    16   214     5    16   307     0      64  }
 11969    16   214     5    16   307     0     802  ENDMETHOD
 11970    16   216     1    16    -1     0      64  }
 11971    16   216     1    16    -1     1     803  ENDCLASS
 11972    16   216     1    -1    -1     1     804  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsFloatBufferRL.java
 11973    17     1     1    -1    -1     1     805  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsIntBufferB.java
 11974    17    28     9    -1    -1     0     111  java.nio
 11975    17    28    17    -1    -1     0     102  ;
 11976    17    31     1    17    -1     0     806  STARTCLASS
 11977    17    31     1    17    -1     0      24  class
 11978    17    31     7    17    -1     0     111  ByteBufferAsIntBufferB
 11979    17    32     5    17    -1     0      38  extends
 11980    17    32    13    17    -1     0     111  IntBuffer
 11981    17    33     1    17    -1     0      63  {
 11982    17    37     5    17    -1     0      23  protected
 11983    17    37    21    17    -1     0     111  ByteBuffer
 11984    17    37    32    17    -1     0     111  bb
 11985    17    37    34    17    -1     0     102  ;
 11986    17    38     5    17    -1     0      23  protected
 11987    17    38    21    17    -1     0      36  int
 11988    17    38    25    17    -1     0     111  offset
 11989    17    38    31    17    -1     0     102  ;
 11990    17    38    31    17   308     0     807  STARTMETHOD
 11991    17    42     5    17   308     0     111  ByteBufferAsIntBufferB
 11992    17    42    27    17   308     0      59  (
 11993    17    42    28    17   308     0     111  ByteBuffer
 11994    17    42    39    17   308     0     111  bb
 11995    17    42    41    17   308     0      60  )
 11996    17    42    43    17   308     0      63  {
 11997    17    44     9    17   308     0      27  super
 11998    17    44    14    17   308     0      59  (
 11999    17    44    15    17   308     0      77  -
 12000    17    44    16    17   308     0     112  1
 12001    17    44    17    17   308     0      66  ,
 12002    17    44    19    17   308     0     112  0
 12003    17    44    20    17   308     0      66  ,
 12004    17    45    15    17   308     0     111  bb.remaining
 12005    17    45    27    17   308     0      59  (
 12006    17    45    28    17   308     0      60  )
 12007    17    45    30    17   308     0      84  >>
 12008    17    45    33    17   308     0     112  2
 12009    17    45    34    17   308     0      66  ,
 12010    17    46    15    17   308     0     111  bb.remaining
 12011    17    46    27    17   308     0      59  (
 12012    17    46    28    17   308     0      60  )
 12013    17    46    30    17   308     0      84  >>
 12014    17    46    33    17   308     0     112  2
 12015    17    46    34    17   308     0      60  )
 12016    17    46    35    17   308     0     102  ;
 12017    17    47     9    17   308     0     111  this.bb
 12018    17    47    17    17   308     0      67  =
 12019    17    47    19    17   308     0     111  bb
 12020    17    47    21    17   308     0     102  ;
 12021    17    49     9    17   308     0      36  int
 12022    17    49    13    17   308     0     111  cap
 12023    17    49    17    17   308     0      67  =
 12024    17    49    19    17   308     0     111  this.capacity
 12025    17    49    32    17   308     0      59  (
 12026    17    49    33    17   308     0      60  )
 12027    17    49    34    17   308     0     102  ;
 12028    17    50     9    17   308     0     111  this.limit
 12029    17    50    19    17   308     0      59  (
 12030    17    50    20    17   308     0     111  cap
 12031    17    50    23    17   308     0      60  )
 12032    17    50    24    17   308     0     102  ;
 12033    17    51     9    17   308     0      36  int
 12034    17    51    13    17   308     0     111  pos
 12035    17    51    17    17   308     0      67  =
 12036    17    51    19    17   308     0     111  this.position
 12037    17    51    32    17   308     0      59  (
 12038    17    51    33    17   308     0      60  )
 12039    17    51    34    17   308     0     102  ;
 12040    17    52     9    17   308     0     111  assert
 12041    17    52    16    17   308     0      59  (
 12042    17    52    17    17   308     0     111  pos
 12043    17    52    21    17   308     0      92  <=
 12044    17    52    24    17   308     0     111  cap
 12045    17    52    27    17   308     0      60  )
 12046    17    52    28    17   308     0     102  ;
 12047    17    53     9    17   308     0     111  offset
 12048    17    53    16    17   308     0      67  =
 12049    17    53    18    17   308     0     111  pos
 12050    17    53    21    17   308     0     102  ;
 12051    17    57     5    17   308     0      64  }
 12052    17    57     5    17   308     0     808  ENDMETHOD
 12053    17    57     5    17   309     0     809  STARTMETHOD
 12054    17    59     5    17   309     0     111  ByteBufferAsIntBufferB
 12055    17    59    27    17   309     0      59  (
 12056    17    59    28    17   309     0     111  ByteBuffer
 12057    17    59    39    17   309     0     111  bb
 12058    17    59    41    17   309     0      66  ,
 12059    17    60    38    17   309     0      36  int
 12060    17    60    42    17   309     0     111  mark
 12061    17    60    46    17   309     0      66  ,
 12062    17    60    48    17   309     0      36  int
 12063    17    60    52    17   309     0     111  pos
 12064    17    60    55    17   309     0      66  ,
 12065    17    60    57    17   309     0      36  int
 12066    17    60    61    17   309     0     111  lim
 12067    17    60    64    17   309     0      66  ,
 12068    17    60    66    17   309     0      36  int
 12069    17    60    70    17   309     0     111  cap
 12070    17    60    73    17   309     0      66  ,
 12071    17    61    38    17   309     0      36  int
 12072    17    61    42    17   309     0     111  off
 12073    17    61    45    17   309     0      60  )
 12074    17    62     5    17   309     0      63  {
 12075    17    64     9    17   309     0      27  super
 12076    17    64    14    17   309     0      59  (
 12077    17    64    15    17   309     0     111  mark
 12078    17    64    19    17   309     0      66  ,
 12079    17    64    21    17   309     0     111  pos
 12080    17    64    24    17   309     0      66  ,
 12081    17    64    26    17   309     0     111  lim
 12082    17    64    29    17   309     0      66  ,
 12083    17    64    31    17   309     0     111  cap
 12084    17    64    34    17   309     0      60  )
 12085    17    64    35    17   309     0     102  ;
 12086    17    65     9    17   309     1     111  this.bb
 12087    17    65    17    17   309     1      67  =
 12088    17    65    19    17   309     1     111  bb
 12089    17    65    21    17   309     1     102  ;
 12090    17    66     9    17   309     1     111  offset
 12091    17    66    16    17   309     1      67  =
 12092    17    66    18    17   309     1     111  off
 12093    17    66    21    17   309     1     102  ;
 12094    17    70     5    17   309     0      64  }
 12095    17    70     5    17   309     0     810  ENDMETHOD
 12096    17    70     5    17   310     0     811  STARTMETHOD
 12097    17    72    12    17   310     0     111  IntBuffer
 12098    17    72    22    17   310     0     111  slice
 12099    17    72    27    17   310     0      59  (
 12100    17    72    28    17   310     0      60  )
 12101    17    72    30    17   310     0      63  {
 12102    17    73     9    17   310     1      36  int
 12103    17    73    13    17   310     1     111  pos
 12104    17    73    17    17   310     1      67  =
 12105    17    73    19    17   310     1     111  this.position
 12106    17    73    32    17   310     1      59  (
 12107    17    73    33    17   310     1      60  )
 12108    17    73    34    17   310     1     102  ;
 12109    17    74     9    17   310     1      36  int
 12110    17    74    13    17   310     1     111  lim
 12111    17    74    17    17   310     1      67  =
 12112    17    74    19    17   310     1     111  this.limit
 12113    17    74    29    17   310     1      59  (
 12114    17    74    30    17   310     1      60  )
 12115    17    74    31    17   310     1     102  ;
 12116    17    75     9    17   310     0     111  assert
 12117    17    75    16    17   310     0      59  (
 12118    17    75    17    17   310     0     111  pos
 12119    17    75    21    17   310     0      92  <=
 12120    17    75    24    17   310     0     111  lim
 12121    17    75    27    17   310     0      60  )
 12122    17    75    28    17   310     0     102  ;
 12123    17    76     9    17   310     0      36  int
 12124    17    76    13    17   310     0     111  rem
 12125    17    76    17    17   310     0      67  =
 12126    17    76    19    17   310     0      59  (
 12127    17    76    20    17   310     0     111  pos
 12128    17    76    24    17   310     0      92  <=
 12129    17    76    27    17   310     0     111  lim
 12130    17    76    31    17   310     0      58  ?
 12131    17    76    33    17   310     0     111  lim
 12132    17    76    37    17   310     0      77  -
 12133    17    76    39    17   310     0     111  pos
 12134    17    76    43    17   310     0      65  :
 12135    17    76    45    17   310     0     112  0
 12136    17    76    46    17   310     0      60  )
 12137    17    76    47    17   310     0     102  ;
 12138    17    77     9    17   310     0      36  int
 12139    17    77    13    17   310     0     111  off
 12140    17    77    17    17   310     0      67  =
 12141    17    77    19    17   310     0      59  (
 12142    17    77    20    17   310     0     111  pos
 12143    17    77    24    17   310     0      90  <<
 12144    17    77    27    17   310     0     112  2
 12145    17    77    28    17   310     0      60  )
 12146    17    77    30    17   310     0      74  +
 12147    17    77    32    17   310     0     111  offset
 12148    17    77    38    17   310     0     102  ;
 12149    17    78     9    17   310     0     111  assert
 12150    17    78    16    17   310     0      59  (
 12151    17    78    17    17   310     0     111  off
 12152    17    78    21    17   310     0      88  >=
 12153    17    78    24    17   310     0     112  0
 12154    17    78    25    17   310     0      60  )
 12155    17    78    26    17   310     0     102  ;
 12156    17    79     9    17   310     0      19  return
 12157    17    79    20    17   310     0     111  ByteBufferAsIntBufferB
 12158    17    79    42    17   310     0      59  (
 12159    17    79    43    17   310     0     111  bb
 12160    17    79    45    17   310     0      66  ,
 12161    17    79    47    17   310     0      77  -
 12162    17    79    48    17   310     0     112  1
 12163    17    79    49    17   310     0      66  ,
 12164    17    79    51    17   310     0     112  0
 12165    17    79    52    17   310     0      66  ,
 12166    17    79    54    17   310     0     111  rem
 12167    17    79    57    17   310     0      66  ,
 12168    17    79    59    17   310     0     111  rem
 12169    17    79    62    17   310     0      66  ,
 12170    17    79    64    17   310     0     111  off
 12171    17    79    67    17   310     0      60  )
 12172    17    79    68    17   310     0     102  ;
 12173    17    80     5    17   310     0      64  }
 12174    17    80     5    17   310     0     812  ENDMETHOD
 12175    17    80     5    17   311     0     813  STARTMETHOD
 12176    17    82    12    17   311     0     111  IntBuffer
 12177    17    82    22    17   311     0     111  duplicate
 12178    17    82    31    17   311     0      59  (
 12179    17    82    32    17   311     0      60  )
 12180    17    82    34    17   311     0      63  {
 12181    17    83     9    17   311     0      19  return
 12182    17    83    20    17   311     0     111  ByteBufferAsIntBufferB
 12183    17    83    42    17   311     0      59  (
 12184    17    83    43    17   311     0     111  bb
 12185    17    83    45    17   311     0      66  ,
 12186    17    84    53    17   311     1     111  this.markValue
 12187    17    84    67    17   311     1      59  (
 12188    17    84    68    17   311     1      60  )
 12189    17    84    69    17   311     1      66  ,
 12190    17    85    53    17   311     1     111  this.position
 12191    17    85    66    17   311     1      59  (
 12192    17    85    67    17   311     1      60  )
 12193    17    85    68    17   311     1      66  ,
 12194    17    86    53    17   311     1     111  this.limit
 12195    17    86    63    17   311     1      59  (
 12196    17    86    64    17   311     1      60  )
 12197    17    86    65    17   311     1      66  ,
 12198    17    87    53    17   311     1     111  this.capacity
 12199    17    87    66    17   311     1      59  (
 12200    17    87    67    17   311     1      60  )
 12201    17    87    68    17   311     1      66  ,
 12202    17    88    53    17   311     0     111  offset
 12203    17    88    59    17   311     0      60  )
 12204    17    88    60    17   311     0     102  ;
 12205    17    89     5    17   311     0      64  }
 12206    17    89     5    17   311     0     814  ENDMETHOD
 12207    17    89     5    17   312     0     815  STARTMETHOD
 12208    17    91    12    17   312     0     111  IntBuffer
 12209    17    91    22    17   312     0     111  asReadOnlyBuffer
 12210    17    91    38    17   312     0      59  (
 12211    17    91    39    17   312     0      60  )
 12212    17    91    41    17   312     0      63  {
 12213    17    93     9    17   312     0      19  return
 12214    17    93    20    17   312     0     111  ByteBufferAsIntBufferRB
 12215    17    93    43    17   312     0      59  (
 12216    17    93    44    17   312     0     111  bb
 12217    17    93    46    17   312     0      66  ,
 12218    17    94    50    17   312     1     111  this.markValue
 12219    17    94    64    17   312     1      59  (
 12220    17    94    65    17   312     1      60  )
 12221    17    94    66    17   312     1      66  ,
 12222    17    95    50    17   312     1     111  this.position
 12223    17    95    63    17   312     1      59  (
 12224    17    95    64    17   312     1      60  )
 12225    17    95    65    17   312     1      66  ,
 12226    17    96    50    17   312     1     111  this.limit
 12227    17    96    60    17   312     1      59  (
 12228    17    96    61    17   312     1      60  )
 12229    17    96    62    17   312     1      66  ,
 12230    17    97    50    17   312     1     111  this.capacity
 12231    17    97    63    17   312     1      59  (
 12232    17    97    64    17   312     1      60  )
 12233    17    97    65    17   312     1      66  ,
 12234    17    98    50    17   312     0     111  offset
 12235    17    98    56    17   312     0      60  )
 12236    17    98    57    17   312     0     102  ;
 12237    17   102     5    17   312     0      64  }
 12238    17   102     5    17   312     0     816  ENDMETHOD
 12239    17   102     5    17   313     0     817  STARTMETHOD
 12240    17   106     5    17   313     0      23  protected
 12241    17   106    15    17   313     0      36  int
 12242    17   106    19    17   313     0     111  ix
 12243    17   106    21    17   313     0      59  (
 12244    17   106    22    17   313     0      36  int
 12245    17   106    26    17   313     0     111  i
 12246    17   106    27    17   313     0      60  )
 12247    17   106    29    17   313     0      63  {
 12248    17   107     9    17   313     0      19  return
 12249    17   107    16    17   313     0      59  (
 12250    17   107    17    17   313     0     111  i
 12251    17   107    19    17   313     0      90  <<
 12252    17   107    22    17   313     0     112  2
 12253    17   107    23    17   313     0      60  )
 12254    17   107    25    17   313     0      74  +
 12255    17   107    27    17   313     0     111  offset
 12256    17   107    33    17   313     0     102  ;
 12257    17   108     5    17   313     0      64  }
 12258    17   108     5    17   313     0     818  ENDMETHOD
 12259    17   108     5    17   314     0     819  STARTMETHOD
 12260    17   110    12    17   314     0      36  int
 12261    17   110    16    17   314     0     111  get
 12262    17   110    19    17   314     0      59  (
 12263    17   110    20    17   314     0      60  )
 12264    17   110    22    17   314     0      63  {
 12265    17   111     9    17   314     0      19  return
 12266    17   111    16    17   314     0     111  Bits.getIntB
 12267    17   111    28    17   314     0      59  (
 12268    17   111    29    17   314     0     111  bb
 12269    17   111    31    17   314     0      66  ,
 12270    17   111    33    17   314     0     111  ix
 12271    17   111    35    17   314     0      59  (
 12272    17   111    36    17   314     0     111  nextGetIndex
 12273    17   111    48    17   314     0      59  (
 12274    17   111    49    17   314     0      60  )
 12275    17   111    50    17   314     0      60  )
 12276    17   111    51    17   314     0      60  )
 12277    17   111    52    17   314     0     102  ;
 12278    17   112     5    17   314     0      64  }
 12279    17   112     5    17   314     0     820  ENDMETHOD
 12280    17   112     5    17   315     0     821  STARTMETHOD
 12281    17   114    12    17   315     0      36  int
 12282    17   114    16    17   315     0     111  get
 12283    17   114    19    17   315     0      59  (
 12284    17   114    20    17   315     0      36  int
 12285    17   114    24    17   315     0     111  i
 12286    17   114    25    17   315     0      60  )
 12287    17   114    27    17   315     0      63  {
 12288    17   115     9    17   315     0      19  return
 12289    17   115    16    17   315     0     111  Bits.getIntB
 12290    17   115    28    17   315     0      59  (
 12291    17   115    29    17   315     0     111  bb
 12292    17   115    31    17   315     0      66  ,
 12293    17   115    33    17   315     0     111  ix
 12294    17   115    35    17   315     0      59  (
 12295    17   115    36    17   315     0     111  checkIndex
 12296    17   115    46    17   315     0      59  (
 12297    17   115    47    17   315     0     111  i
 12298    17   115    48    17   315     0      60  )
 12299    17   115    49    17   315     0      60  )
 12300    17   115    50    17   315     0      60  )
 12301    17   115    51    17   315     0     102  ;
 12302    17   116     5    17   315     0      64  }
 12303    17   116     5    17   315     0     822  ENDMETHOD
 12304    17   116     5    17   316     0     823  STARTMETHOD
 12305    17   120    12    17   316     0     111  IntBuffer
 12306    17   120    22    17   316     0     111  put
 12307    17   120    25    17   316     0      59  (
 12308    17   120    26    17   316     0      36  int
 12309    17   120    30    17   316     0     111  x
 12310    17   120    31    17   316     0      60  )
 12311    17   120    33    17   316     0      63  {
 12312    17   122     9    17   316     0     111  Bits.putIntB
 12313    17   122    21    17   316     0      59  (
 12314    17   122    22    17   316     0     111  bb
 12315    17   122    24    17   316     0      66  ,
 12316    17   122    26    17   316     0     111  ix
 12317    17   122    28    17   316     0      59  (
 12318    17   122    29    17   316     0     111  nextPutIndex
 12319    17   122    41    17   316     0      59  (
 12320    17   122    42    17   316     0      60  )
 12321    17   122    43    17   316     0      60  )
 12322    17   122    44    17   316     0      66  ,
 12323    17   122    46    17   316     0     111  x
 12324    17   122    47    17   316     0      60  )
 12325    17   122    48    17   316     0     102  ;
 12326    17   123     9    17   316     0      19  return
 12327    17   123    16    17   316     0      44  this
 12328    17   123    20    17   316     0     102  ;
 12329    17   127     5    17   316     0      64  }
 12330    17   127     5    17   316     0     824  ENDMETHOD
 12331    17   127     5    17   317     0     825  STARTMETHOD
 12332    17   129    12    17   317     0     111  IntBuffer
 12333    17   129    22    17   317     0     111  put
 12334    17   129    25    17   317     0      59  (
 12335    17   129    26    17   317     0      36  int
 12336    17   129    30    17   317     0     111  i
 12337    17   129    31    17   317     0      66  ,
 12338    17   129    33    17   317     0      36  int
 12339    17   129    37    17   317     0     111  x
 12340    17   129    38    17   317     0      60  )
 12341    17   129    40    17   317     0      63  {
 12342    17   131     9    17   317     0     111  Bits.putIntB
 12343    17   131    21    17   317     0      59  (
 12344    17   131    22    17   317     0     111  bb
 12345    17   131    24    17   317     0      66  ,
 12346    17   131    26    17   317     0     111  ix
 12347    17   131    28    17   317     0      59  (
 12348    17   131    29    17   317     0     111  checkIndex
 12349    17   131    39    17   317     0      59  (
 12350    17   131    40    17   317     0     111  i
 12351    17   131    41    17   317     0      60  )
 12352    17   131    42    17   317     0      60  )
 12353    17   131    43    17   317     0      66  ,
 12354    17   131    45    17   317     0     111  x
 12355    17   131    46    17   317     0      60  )
 12356    17   131    47    17   317     0     102  ;
 12357    17   132     9    17   317     0      19  return
 12358    17   132    16    17   317     0      44  this
 12359    17   132    20    17   317     0     102  ;
 12360    17   136     5    17   317     0      64  }
 12361    17   136     5    17   317     0     826  ENDMETHOD
 12362    17   136     5    17   318     0     827  STARTMETHOD
 12363    17   138    12    17   318     0     111  IntBuffer
 12364    17   138    22    17   318     0     111  compact
 12365    17   138    29    17   318     0      59  (
 12366    17   138    30    17   318     0      60  )
 12367    17   138    32    17   318     0      63  {
 12368    17   140     9    17   318     1      36  int
 12369    17   140    13    17   318     1     111  pos
 12370    17   140    17    17   318     1      67  =
 12371    17   140    19    17   318     1     111  position
 12372    17   140    27    17   318     1      59  (
 12373    17   140    28    17   318     1      60  )
 12374    17   140    29    17   318     1     102  ;
 12375    17   141     9    17   318     1      36  int
 12376    17   141    13    17   318     1     111  lim
 12377    17   141    17    17   318     1      67  =
 12378    17   141    19    17   318     1     111  limit
 12379    17   141    24    17   318     1      59  (
 12380    17   141    25    17   318     1      60  )
 12381    17   141    26    17   318     1     102  ;
 12382    17   142     9    17   318     0     111  assert
 12383    17   142    16    17   318     0      59  (
 12384    17   142    17    17   318     0     111  pos
 12385    17   142    21    17   318     0      92  <=
 12386    17   142    24    17   318     0     111  lim
 12387    17   142    27    17   318     0      60  )
 12388    17   142    28    17   318     0     102  ;
 12389    17   143     9    17   318     0      36  int
 12390    17   143    13    17   318     0     111  rem
 12391    17   143    17    17   318     0      67  =
 12392    17   143    19    17   318     0      59  (
 12393    17   143    20    17   318     0     111  pos
 12394    17   143    24    17   318     0      92  <=
 12395    17   143    27    17   318     0     111  lim
 12396    17   143    31    17   318     0      58  ?
 12397    17   143    33    17   318     0     111  lim
 12398    17   143    37    17   318     0      77  -
 12399    17   143    39    17   318     0     111  pos
 12400    17   143    43    17   318     0      65  :
 12401    17   143    45    17   318     0     112  0
 12402    17   143    46    17   318     0      60  )
 12403    17   143    47    17   318     0     102  ;
 12404    17   145     9    17   318     0     111  ByteBuffer
 12405    17   145    20    17   318     0     111  db
 12406    17   145    23    17   318     0      67  =
 12407    17   145    25    17   318     0     111  bb.duplicate
 12408    17   145    37    17   318     0      59  (
 12409    17   145    38    17   318     0      60  )
 12410    17   145    39    17   318     0     102  ;
 12411    17   146     9    17   318     0     111  db.limit
 12412    17   146    17    17   318     0      59  (
 12413    17   146    18    17   318     0     111  ix
 12414    17   146    20    17   318     0      59  (
 12415    17   146    21    17   318     0     111  lim
 12416    17   146    24    17   318     0      60  )
 12417    17   146    25    17   318     0      60  )
 12418    17   146    26    17   318     0     102  ;
 12419    17   147     9    17   318     0     111  db.position
 12420    17   147    20    17   318     0      59  (
 12421    17   147    21    17   318     0     111  ix
 12422    17   147    23    17   318     0      59  (
 12423    17   147    24    17   318     0     112  0
 12424    17   147    25    17   318     0      60  )
 12425    17   147    26    17   318     0      60  )
 12426    17   147    27    17   318     0     102  ;
 12427    17   148     9    17   318     0     111  ByteBuffer
 12428    17   148    20    17   318     0     111  sb
 12429    17   148    23    17   318     0      67  =
 12430    17   148    25    17   318     0     111  db.slice
 12431    17   148    33    17   318     0      59  (
 12432    17   148    34    17   318     0      60  )
 12433    17   148    35    17   318     0     102  ;
 12434    17   149     9    17   318     0     111  sb.position
 12435    17   149    20    17   318     0      59  (
 12436    17   149    21    17   318     0     111  pos
 12437    17   149    25    17   318     0      90  <<
 12438    17   149    28    17   318     0     112  2
 12439    17   149    29    17   318     0      60  )
 12440    17   149    30    17   318     0     102  ;
 12441    17   150     9    17   318     0     111  sb.compact
 12442    17   150    19    17   318     0      59  (
 12443    17   150    20    17   318     0      60  )
 12444    17   150    21    17   318     0     102  ;
 12445    17   151     9    17   318     0     111  position
 12446    17   151    17    17   318     0      59  (
 12447    17   151    18    17   318     0     111  rem
 12448    17   151    21    17   318     0      60  )
 12449    17   151    22    17   318     0     102  ;
 12450    17   152     9    17   318     0     111  limit
 12451    17   152    14    17   318     0      59  (
 12452    17   152    15    17   318     0     111  capacity
 12453    17   152    23    17   318     0      59  (
 12454    17   152    24    17   318     0      60  )
 12455    17   152    25    17   318     0      60  )
 12456    17   152    26    17   318     0     102  ;
 12457    17   153     9    17   318     0      19  return
 12458    17   153    16    17   318     0      44  this
 12459    17   153    20    17   318     0     102  ;
 12460    17   157     5    17   318     0      64  }
 12461    17   157     5    17   318     0     828  ENDMETHOD
 12462    17   157     5    17   319     0     829  STARTMETHOD
 12463    17   159    12    17   319     0      39  boolean
 12464    17   159    20    17   319     0     111  isDirect
 12465    17   159    28    17   319     0      59  (
 12466    17   159    29    17   319     0      60  )
 12467    17   159    31    17   319     0      63  {
 12468    17   160     9    17   319     0      19  return
 12469    17   160    16    17   319     0     111  bb.isDirect
 12470    17   160    27    17   319     0      59  (
 12471    17   160    28    17   319     0      60  )
 12472    17   160    29    17   319     1     102  ;
 12473    17   161     5    17   319     1      64  }
 12474    17   161     5    17   319     0     830  ENDMETHOD
 12475    17   161     5    17   320     0     831  STARTMETHOD
 12476    17   163    12    17   320     0      39  boolean
 12477    17   163    20    17   320     0     111  isReadOnly
 12478    17   163    30    17   320     0      59  (
 12479    17   163    31    17   320     0      60  )
 12480    17   163    33    17   320     0      63  {
 12481    17   164     9    17   320     0      19  return
 12482    17   164    16    17   320     0      43  false
 12483    17   164    21    17   320     1     102  ;
 12484    17   165     5    17   320     1      64  }
 12485    17   165     5    17   320     0     832  ENDMETHOD
 12486    17   165     5    17   321     0     833  STARTMETHOD
 12487    17   207    12    17   321     0     111  ByteOrder
 12488    17   207    22    17   321     0     111  order
 12489    17   207    27    17   321     0      59  (
 12490    17   207    28    17   321     0      60  )
 12491    17   207    30    17   321     0      63  {
 12492    17   209     9    17   321     0      19  return
 12493    17   209    16    17   321     0     111  ByteOrder.BIG_ENDIAN
 12494    17   209    36    17   321     1     102  ;
 12495    17   214     5    17   321     1      64  }
 12496    17   214     5    17   321     0     834  ENDMETHOD
 12497    17   216     1    17    -1     0      64  }
 12498    17   216     1    17    -1     1     835  ENDCLASS
 12499    17   216     1    -1    -1     1     836  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsIntBufferB.java
 12500    18     1     1    -1    -1     1     837  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsIntBufferL.java
 12501    18    28     9    -1    -1     0     111  java.nio
 12502    18    28    17    -1    -1     0     102  ;
 12503    18    31     1    18    -1     0     838  STARTCLASS
 12504    18    31     1    18    -1     0      24  class
 12505    18    31     7    18    -1     0     111  ByteBufferAsIntBufferL
 12506    18    32     5    18    -1     0      38  extends
 12507    18    32    13    18    -1     0     111  IntBuffer
 12508    18    33     1    18    -1     0      63  {
 12509    18    37     5    18    -1     0      23  protected
 12510    18    37    21    18    -1     0     111  ByteBuffer
 12511    18    37    32    18    -1     0     111  bb
 12512    18    37    34    18    -1     0     102  ;
 12513    18    38     5    18    -1     0      23  protected
 12514    18    38    21    18    -1     0      36  int
 12515    18    38    25    18    -1     0     111  offset
 12516    18    38    31    18    -1     0     102  ;
 12517    18    38    31    18   322     0     839  STARTMETHOD
 12518    18    42     5    18   322     0     111  ByteBufferAsIntBufferL
 12519    18    42    27    18   322     0      59  (
 12520    18    42    28    18   322     0     111  ByteBuffer
 12521    18    42    39    18   322     0     111  bb
 12522    18    42    41    18   322     0      60  )
 12523    18    42    43    18   322     0      63  {
 12524    18    44     9    18   322     0      27  super
 12525    18    44    14    18   322     0      59  (
 12526    18    44    15    18   322     0      77  -
 12527    18    44    16    18   322     0     112  1
 12528    18    44    17    18   322     0      66  ,
 12529    18    44    19    18   322     0     112  0
 12530    18    44    20    18   322     0      66  ,
 12531    18    45    15    18   322     0     111  bb.remaining
 12532    18    45    27    18   322     0      59  (
 12533    18    45    28    18   322     0      60  )
 12534    18    45    30    18   322     0      84  >>
 12535    18    45    33    18   322     0     112  2
 12536    18    45    34    18   322     0      66  ,
 12537    18    46    15    18   322     0     111  bb.remaining
 12538    18    46    27    18   322     0      59  (
 12539    18    46    28    18   322     0      60  )
 12540    18    46    30    18   322     0      84  >>
 12541    18    46    33    18   322     0     112  2
 12542    18    46    34    18   322     0      60  )
 12543    18    46    35    18   322     0     102  ;
 12544    18    47     9    18   322     0     111  this.bb
 12545    18    47    17    18   322     0      67  =
 12546    18    47    19    18   322     0     111  bb
 12547    18    47    21    18   322     0     102  ;
 12548    18    49     9    18   322     0      36  int
 12549    18    49    13    18   322     0     111  cap
 12550    18    49    17    18   322     0      67  =
 12551    18    49    19    18   322     0     111  this.capacity
 12552    18    49    32    18   322     0      59  (
 12553    18    49    33    18   322     0      60  )
 12554    18    49    34    18   322     0     102  ;
 12555    18    50     9    18   322     0     111  this.limit
 12556    18    50    19    18   322     0      59  (
 12557    18    50    20    18   322     0     111  cap
 12558    18    50    23    18   322     0      60  )
 12559    18    50    24    18   322     0     102  ;
 12560    18    51     9    18   322     0      36  int
 12561    18    51    13    18   322     0     111  pos
 12562    18    51    17    18   322     0      67  =
 12563    18    51    19    18   322     0     111  this.position
 12564    18    51    32    18   322     0      59  (
 12565    18    51    33    18   322     0      60  )
 12566    18    51    34    18   322     0     102  ;
 12567    18    52     9    18   322     0     111  assert
 12568    18    52    16    18   322     0      59  (
 12569    18    52    17    18   322     0     111  pos
 12570    18    52    21    18   322     0      92  <=
 12571    18    52    24    18   322     0     111  cap
 12572    18    52    27    18   322     0      60  )
 12573    18    52    28    18   322     0     102  ;
 12574    18    53     9    18   322     0     111  offset
 12575    18    53    16    18   322     0      67  =
 12576    18    53    18    18   322     0     111  pos
 12577    18    53    21    18   322     0     102  ;
 12578    18    57     5    18   322     0      64  }
 12579    18    57     5    18   322     0     840  ENDMETHOD
 12580    18    57     5    18   323     0     841  STARTMETHOD
 12581    18    59     5    18   323     0     111  ByteBufferAsIntBufferL
 12582    18    59    27    18   323     0      59  (
 12583    18    59    28    18   323     0     111  ByteBuffer
 12584    18    59    39    18   323     0     111  bb
 12585    18    59    41    18   323     0      66  ,
 12586    18    60    38    18   323     0      36  int
 12587    18    60    42    18   323     0     111  mark
 12588    18    60    46    18   323     0      66  ,
 12589    18    60    48    18   323     0      36  int
 12590    18    60    52    18   323     0     111  pos
 12591    18    60    55    18   323     0      66  ,
 12592    18    60    57    18   323     0      36  int
 12593    18    60    61    18   323     0     111  lim
 12594    18    60    64    18   323     0      66  ,
 12595    18    60    66    18   323     0      36  int
 12596    18    60    70    18   323     0     111  cap
 12597    18    60    73    18   323     0      66  ,
 12598    18    61    38    18   323     0      36  int
 12599    18    61    42    18   323     0     111  off
 12600    18    61    45    18   323     0      60  )
 12601    18    62     5    18   323     0      63  {
 12602    18    64     9    18   323     0      27  super
 12603    18    64    14    18   323     0      59  (
 12604    18    64    15    18   323     0     111  mark
 12605    18    64    19    18   323     0      66  ,
 12606    18    64    21    18   323     0     111  pos
 12607    18    64    24    18   323     0      66  ,
 12608    18    64    26    18   323     0     111  lim
 12609    18    64    29    18   323     0      66  ,
 12610    18    64    31    18   323     0     111  cap
 12611    18    64    34    18   323     0      60  )
 12612    18    64    35    18   323     0     102  ;
 12613    18    65     9    18   323     1     111  this.bb
 12614    18    65    17    18   323     1      67  =
 12615    18    65    19    18   323     1     111  bb
 12616    18    65    21    18   323     1     102  ;
 12617    18    66     9    18   323     1     111  offset
 12618    18    66    16    18   323     1      67  =
 12619    18    66    18    18   323     1     111  off
 12620    18    66    21    18   323     1     102  ;
 12621    18    70     5    18   323     0      64  }
 12622    18    70     5    18   323     0     842  ENDMETHOD
 12623    18    70     5    18   324     0     843  STARTMETHOD
 12624    18    72    12    18   324     0     111  IntBuffer
 12625    18    72    22    18   324     0     111  slice
 12626    18    72    27    18   324     0      59  (
 12627    18    72    28    18   324     0      60  )
 12628    18    72    30    18   324     0      63  {
 12629    18    73     9    18   324     1      36  int
 12630    18    73    13    18   324     1     111  pos
 12631    18    73    17    18   324     1      67  =
 12632    18    73    19    18   324     1     111  this.position
 12633    18    73    32    18   324     1      59  (
 12634    18    73    33    18   324     1      60  )
 12635    18    73    34    18   324     1     102  ;
 12636    18    74     9    18   324     1      36  int
 12637    18    74    13    18   324     1     111  lim
 12638    18    74    17    18   324     1      67  =
 12639    18    74    19    18   324     1     111  this.limit
 12640    18    74    29    18   324     1      59  (
 12641    18    74    30    18   324     1      60  )
 12642    18    74    31    18   324     1     102  ;
 12643    18    75     9    18   324     0     111  assert
 12644    18    75    16    18   324     0      59  (
 12645    18    75    17    18   324     0     111  pos
 12646    18    75    21    18   324     0      92  <=
 12647    18    75    24    18   324     0     111  lim
 12648    18    75    27    18   324     0      60  )
 12649    18    75    28    18   324     0     102  ;
 12650    18    76     9    18   324     0      36  int
 12651    18    76    13    18   324     0     111  rem
 12652    18    76    17    18   324     0      67  =
 12653    18    76    19    18   324     0      59  (
 12654    18    76    20    18   324     0     111  pos
 12655    18    76    24    18   324     0      92  <=
 12656    18    76    27    18   324     0     111  lim
 12657    18    76    31    18   324     0      58  ?
 12658    18    76    33    18   324     0     111  lim
 12659    18    76    37    18   324     0      77  -
 12660    18    76    39    18   324     0     111  pos
 12661    18    76    43    18   324     0      65  :
 12662    18    76    45    18   324     0     112  0
 12663    18    76    46    18   324     0      60  )
 12664    18    76    47    18   324     0     102  ;
 12665    18    77     9    18   324     0      36  int
 12666    18    77    13    18   324     0     111  off
 12667    18    77    17    18   324     0      67  =
 12668    18    77    19    18   324     0      59  (
 12669    18    77    20    18   324     0     111  pos
 12670    18    77    24    18   324     0      90  <<
 12671    18    77    27    18   324     0     112  2
 12672    18    77    28    18   324     0      60  )
 12673    18    77    30    18   324     0      74  +
 12674    18    77    32    18   324     0     111  offset
 12675    18    77    38    18   324     0     102  ;
 12676    18    78     9    18   324     0     111  assert
 12677    18    78    16    18   324     0      59  (
 12678    18    78    17    18   324     0     111  off
 12679    18    78    21    18   324     0      88  >=
 12680    18    78    24    18   324     0     112  0
 12681    18    78    25    18   324     0      60  )
 12682    18    78    26    18   324     0     102  ;
 12683    18    79     9    18   324     0      19  return
 12684    18    79    20    18   324     0     111  ByteBufferAsIntBufferL
 12685    18    79    42    18   324     0      59  (
 12686    18    79    43    18   324     0     111  bb
 12687    18    79    45    18   324     0      66  ,
 12688    18    79    47    18   324     0      77  -
 12689    18    79    48    18   324     0     112  1
 12690    18    79    49    18   324     0      66  ,
 12691    18    79    51    18   324     0     112  0
 12692    18    79    52    18   324     0      66  ,
 12693    18    79    54    18   324     0     111  rem
 12694    18    79    57    18   324     0      66  ,
 12695    18    79    59    18   324     0     111  rem
 12696    18    79    62    18   324     0      66  ,
 12697    18    79    64    18   324     0     111  off
 12698    18    79    67    18   324     0      60  )
 12699    18    79    68    18   324     0     102  ;
 12700    18    80     5    18   324     0      64  }
 12701    18    80     5    18   324     0     844  ENDMETHOD
 12702    18    80     5    18   325     0     845  STARTMETHOD
 12703    18    82    12    18   325     0     111  IntBuffer
 12704    18    82    22    18   325     0     111  duplicate
 12705    18    82    31    18   325     0      59  (
 12706    18    82    32    18   325     0      60  )
 12707    18    82    34    18   325     0      63  {
 12708    18    83     9    18   325     0      19  return
 12709    18    83    20    18   325     0     111  ByteBufferAsIntBufferL
 12710    18    83    42    18   325     0      59  (
 12711    18    83    43    18   325     0     111  bb
 12712    18    83    45    18   325     0      66  ,
 12713    18    84    53    18   325     1     111  this.markValue
 12714    18    84    67    18   325     1      59  (
 12715    18    84    68    18   325     1      60  )
 12716    18    84    69    18   325     1      66  ,
 12717    18    85    53    18   325     1     111  this.position
 12718    18    85    66    18   325     1      59  (
 12719    18    85    67    18   325     1      60  )
 12720    18    85    68    18   325     1      66  ,
 12721    18    86    53    18   325     1     111  this.limit
 12722    18    86    63    18   325     1      59  (
 12723    18    86    64    18   325     1      60  )
 12724    18    86    65    18   325     1      66  ,
 12725    18    87    53    18   325     1     111  this.capacity
 12726    18    87    66    18   325     1      59  (
 12727    18    87    67    18   325     1      60  )
 12728    18    87    68    18   325     1      66  ,
 12729    18    88    53    18   325     0     111  offset
 12730    18    88    59    18   325     0      60  )
 12731    18    88    60    18   325     0     102  ;
 12732    18    89     5    18   325     0      64  }
 12733    18    89     5    18   325     0     846  ENDMETHOD
 12734    18    89     5    18   326     0     847  STARTMETHOD
 12735    18    91    12    18   326     0     111  IntBuffer
 12736    18    91    22    18   326     0     111  asReadOnlyBuffer
 12737    18    91    38    18   326     0      59  (
 12738    18    91    39    18   326     0      60  )
 12739    18    91    41    18   326     0      63  {
 12740    18    93     9    18   326     0      19  return
 12741    18    93    20    18   326     0     111  ByteBufferAsIntBufferRL
 12742    18    93    43    18   326     0      59  (
 12743    18    93    44    18   326     0     111  bb
 12744    18    93    46    18   326     0      66  ,
 12745    18    94    50    18   326     1     111  this.markValue
 12746    18    94    64    18   326     1      59  (
 12747    18    94    65    18   326     1      60  )
 12748    18    94    66    18   326     1      66  ,
 12749    18    95    50    18   326     1     111  this.position
 12750    18    95    63    18   326     1      59  (
 12751    18    95    64    18   326     1      60  )
 12752    18    95    65    18   326     1      66  ,
 12753    18    96    50    18   326     1     111  this.limit
 12754    18    96    60    18   326     1      59  (
 12755    18    96    61    18   326     1      60  )
 12756    18    96    62    18   326     1      66  ,
 12757    18    97    50    18   326     1     111  this.capacity
 12758    18    97    63    18   326     1      59  (
 12759    18    97    64    18   326     1      60  )
 12760    18    97    65    18   326     1      66  ,
 12761    18    98    50    18   326     0     111  offset
 12762    18    98    56    18   326     0      60  )
 12763    18    98    57    18   326     0     102  ;
 12764    18   102     5    18   326     0      64  }
 12765    18   102     5    18   326     0     848  ENDMETHOD
 12766    18   102     5    18   327     0     849  STARTMETHOD
 12767    18   106     5    18   327     0      23  protected
 12768    18   106    15    18   327     0      36  int
 12769    18   106    19    18   327     0     111  ix
 12770    18   106    21    18   327     0      59  (
 12771    18   106    22    18   327     0      36  int
 12772    18   106    26    18   327     0     111  i
 12773    18   106    27    18   327     0      60  )
 12774    18   106    29    18   327     0      63  {
 12775    18   107     9    18   327     0      19  return
 12776    18   107    16    18   327     0      59  (
 12777    18   107    17    18   327     0     111  i
 12778    18   107    19    18   327     0      90  <<
 12779    18   107    22    18   327     0     112  2
 12780    18   107    23    18   327     0      60  )
 12781    18   107    25    18   327     0      74  +
 12782    18   107    27    18   327     0     111  offset
 12783    18   107    33    18   327     0     102  ;
 12784    18   108     5    18   327     0      64  }
 12785    18   108     5    18   327     0     850  ENDMETHOD
 12786    18   108     5    18   328     0     851  STARTMETHOD
 12787    18   110    12    18   328     0      36  int
 12788    18   110    16    18   328     0     111  get
 12789    18   110    19    18   328     0      59  (
 12790    18   110    20    18   328     0      60  )
 12791    18   110    22    18   328     0      63  {
 12792    18   111     9    18   328     0      19  return
 12793    18   111    16    18   328     0     111  Bits.getIntL
 12794    18   111    28    18   328     0      59  (
 12795    18   111    29    18   328     0     111  bb
 12796    18   111    31    18   328     0      66  ,
 12797    18   111    33    18   328     0     111  ix
 12798    18   111    35    18   328     0      59  (
 12799    18   111    36    18   328     0     111  nextGetIndex
 12800    18   111    48    18   328     0      59  (
 12801    18   111    49    18   328     0      60  )
 12802    18   111    50    18   328     0      60  )
 12803    18   111    51    18   328     0      60  )
 12804    18   111    52    18   328     0     102  ;
 12805    18   112     5    18   328     0      64  }
 12806    18   112     5    18   328     0     852  ENDMETHOD
 12807    18   112     5    18   329     0     853  STARTMETHOD
 12808    18   114    12    18   329     0      36  int
 12809    18   114    16    18   329     0     111  get
 12810    18   114    19    18   329     0      59  (
 12811    18   114    20    18   329     0      36  int
 12812    18   114    24    18   329     0     111  i
 12813    18   114    25    18   329     0      60  )
 12814    18   114    27    18   329     0      63  {
 12815    18   115     9    18   329     0      19  return
 12816    18   115    16    18   329     0     111  Bits.getIntL
 12817    18   115    28    18   329     0      59  (
 12818    18   115    29    18   329     0     111  bb
 12819    18   115    31    18   329     0      66  ,
 12820    18   115    33    18   329     0     111  ix
 12821    18   115    35    18   329     0      59  (
 12822    18   115    36    18   329     0     111  checkIndex
 12823    18   115    46    18   329     0      59  (
 12824    18   115    47    18   329     0     111  i
 12825    18   115    48    18   329     0      60  )
 12826    18   115    49    18   329     0      60  )
 12827    18   115    50    18   329     0      60  )
 12828    18   115    51    18   329     0     102  ;
 12829    18   116     5    18   329     0      64  }
 12830    18   116     5    18   329     0     854  ENDMETHOD
 12831    18   116     5    18   330     0     855  STARTMETHOD
 12832    18   120    12    18   330     0     111  IntBuffer
 12833    18   120    22    18   330     0     111  put
 12834    18   120    25    18   330     0      59  (
 12835    18   120    26    18   330     0      36  int
 12836    18   120    30    18   330     0     111  x
 12837    18   120    31    18   330     0      60  )
 12838    18   120    33    18   330     0      63  {
 12839    18   122     9    18   330     0     111  Bits.putIntL
 12840    18   122    21    18   330     0      59  (
 12841    18   122    22    18   330     0     111  bb
 12842    18   122    24    18   330     0      66  ,
 12843    18   122    26    18   330     0     111  ix
 12844    18   122    28    18   330     0      59  (
 12845    18   122    29    18   330     0     111  nextPutIndex
 12846    18   122    41    18   330     0      59  (
 12847    18   122    42    18   330     0      60  )
 12848    18   122    43    18   330     0      60  )
 12849    18   122    44    18   330     0      66  ,
 12850    18   122    46    18   330     0     111  x
 12851    18   122    47    18   330     0      60  )
 12852    18   122    48    18   330     0     102  ;
 12853    18   123     9    18   330     0      19  return
 12854    18   123    16    18   330     0      44  this
 12855    18   123    20    18   330     0     102  ;
 12856    18   127     5    18   330     0      64  }
 12857    18   127     5    18   330     0     856  ENDMETHOD
 12858    18   127     5    18   331     0     857  STARTMETHOD
 12859    18   129    12    18   331     0     111  IntBuffer
 12860    18   129    22    18   331     0     111  put
 12861    18   129    25    18   331     0      59  (
 12862    18   129    26    18   331     0      36  int
 12863    18   129    30    18   331     0     111  i
 12864    18   129    31    18   331     0      66  ,
 12865    18   129    33    18   331     0      36  int
 12866    18   129    37    18   331     0     111  x
 12867    18   129    38    18   331     0      60  )
 12868    18   129    40    18   331     0      63  {
 12869    18   131     9    18   331     0     111  Bits.putIntL
 12870    18   131    21    18   331     0      59  (
 12871    18   131    22    18   331     0     111  bb
 12872    18   131    24    18   331     0      66  ,
 12873    18   131    26    18   331     0     111  ix
 12874    18   131    28    18   331     0      59  (
 12875    18   131    29    18   331     0     111  checkIndex
 12876    18   131    39    18   331     0      59  (
 12877    18   131    40    18   331     0     111  i
 12878    18   131    41    18   331     0      60  )
 12879    18   131    42    18   331     0      60  )
 12880    18   131    43    18   331     0      66  ,
 12881    18   131    45    18   331     0     111  x
 12882    18   131    46    18   331     0      60  )
 12883    18   131    47    18   331     0     102  ;
 12884    18   132     9    18   331     0      19  return
 12885    18   132    16    18   331     0      44  this
 12886    18   132    20    18   331     0     102  ;
 12887    18   136     5    18   331     0      64  }
 12888    18   136     5    18   331     0     858  ENDMETHOD
 12889    18   136     5    18   332     0     859  STARTMETHOD
 12890    18   138    12    18   332     0     111  IntBuffer
 12891    18   138    22    18   332     0     111  compact
 12892    18   138    29    18   332     0      59  (
 12893    18   138    30    18   332     0      60  )
 12894    18   138    32    18   332     0      63  {
 12895    18   140     9    18   332     1      36  int
 12896    18   140    13    18   332     1     111  pos
 12897    18   140    17    18   332     1      67  =
 12898    18   140    19    18   332     1     111  position
 12899    18   140    27    18   332     1      59  (
 12900    18   140    28    18   332     1      60  )
 12901    18   140    29    18   332     1     102  ;
 12902    18   141     9    18   332     1      36  int
 12903    18   141    13    18   332     1     111  lim
 12904    18   141    17    18   332     1      67  =
 12905    18   141    19    18   332     1     111  limit
 12906    18   141    24    18   332     1      59  (
 12907    18   141    25    18   332     1      60  )
 12908    18   141    26    18   332     1     102  ;
 12909    18   142     9    18   332     0     111  assert
 12910    18   142    16    18   332     0      59  (
 12911    18   142    17    18   332     0     111  pos
 12912    18   142    21    18   332     0      92  <=
 12913    18   142    24    18   332     0     111  lim
 12914    18   142    27    18   332     0      60  )
 12915    18   142    28    18   332     0     102  ;
 12916    18   143     9    18   332     0      36  int
 12917    18   143    13    18   332     0     111  rem
 12918    18   143    17    18   332     0      67  =
 12919    18   143    19    18   332     0      59  (
 12920    18   143    20    18   332     0     111  pos
 12921    18   143    24    18   332     0      92  <=
 12922    18   143    27    18   332     0     111  lim
 12923    18   143    31    18   332     0      58  ?
 12924    18   143    33    18   332     0     111  lim
 12925    18   143    37    18   332     0      77  -
 12926    18   143    39    18   332     0     111  pos
 12927    18   143    43    18   332     0      65  :
 12928    18   143    45    18   332     0     112  0
 12929    18   143    46    18   332     0      60  )
 12930    18   143    47    18   332     0     102  ;
 12931    18   145     9    18   332     0     111  ByteBuffer
 12932    18   145    20    18   332     0     111  db
 12933    18   145    23    18   332     0      67  =
 12934    18   145    25    18   332     0     111  bb.duplicate
 12935    18   145    37    18   332     0      59  (
 12936    18   145    38    18   332     0      60  )
 12937    18   145    39    18   332     0     102  ;
 12938    18   146     9    18   332     0     111  db.limit
 12939    18   146    17    18   332     0      59  (
 12940    18   146    18    18   332     0     111  ix
 12941    18   146    20    18   332     0      59  (
 12942    18   146    21    18   332     0     111  lim
 12943    18   146    24    18   332     0      60  )
 12944    18   146    25    18   332     0      60  )
 12945    18   146    26    18   332     0     102  ;
 12946    18   147     9    18   332     0     111  db.position
 12947    18   147    20    18   332     0      59  (
 12948    18   147    21    18   332     0     111  ix
 12949    18   147    23    18   332     0      59  (
 12950    18   147    24    18   332     0     112  0
 12951    18   147    25    18   332     0      60  )
 12952    18   147    26    18   332     0      60  )
 12953    18   147    27    18   332     0     102  ;
 12954    18   148     9    18   332     0     111  ByteBuffer
 12955    18   148    20    18   332     0     111  sb
 12956    18   148    23    18   332     0      67  =
 12957    18   148    25    18   332     0     111  db.slice
 12958    18   148    33    18   332     0      59  (
 12959    18   148    34    18   332     0      60  )
 12960    18   148    35    18   332     0     102  ;
 12961    18   149     9    18   332     0     111  sb.position
 12962    18   149    20    18   332     0      59  (
 12963    18   149    21    18   332     0     111  pos
 12964    18   149    25    18   332     0      90  <<
 12965    18   149    28    18   332     0     112  2
 12966    18   149    29    18   332     0      60  )
 12967    18   149    30    18   332     0     102  ;
 12968    18   150     9    18   332     0     111  sb.compact
 12969    18   150    19    18   332     0      59  (
 12970    18   150    20    18   332     0      60  )
 12971    18   150    21    18   332     0     102  ;
 12972    18   151     9    18   332     0     111  position
 12973    18   151    17    18   332     0      59  (
 12974    18   151    18    18   332     0     111  rem
 12975    18   151    21    18   332     0      60  )
 12976    18   151    22    18   332     0     102  ;
 12977    18   152     9    18   332     0     111  limit
 12978    18   152    14    18   332     0      59  (
 12979    18   152    15    18   332     0     111  capacity
 12980    18   152    23    18   332     0      59  (
 12981    18   152    24    18   332     0      60  )
 12982    18   152    25    18   332     0      60  )
 12983    18   152    26    18   332     0     102  ;
 12984    18   153     9    18   332     0      19  return
 12985    18   153    16    18   332     0      44  this
 12986    18   153    20    18   332     0     102  ;
 12987    18   157     5    18   332     0      64  }
 12988    18   157     5    18   332     0     860  ENDMETHOD
 12989    18   157     5    18   333     0     861  STARTMETHOD
 12990    18   159    12    18   333     0      39  boolean
 12991    18   159    20    18   333     0     111  isDirect
 12992    18   159    28    18   333     0      59  (
 12993    18   159    29    18   333     0      60  )
 12994    18   159    31    18   333     0      63  {
 12995    18   160     9    18   333     0      19  return
 12996    18   160    16    18   333     0     111  bb.isDirect
 12997    18   160    27    18   333     0      59  (
 12998    18   160    28    18   333     0      60  )
 12999    18   160    29    18   333     1     102  ;
 13000    18   161     5    18   333     1      64  }
 13001    18   161     5    18   333     0     862  ENDMETHOD
 13002    18   161     5    18   334     0     863  STARTMETHOD
 13003    18   163    12    18   334     0      39  boolean
 13004    18   163    20    18   334     0     111  isReadOnly
 13005    18   163    30    18   334     0      59  (
 13006    18   163    31    18   334     0      60  )
 13007    18   163    33    18   334     0      63  {
 13008    18   164     9    18   334     0      19  return
 13009    18   164    16    18   334     0      43  false
 13010    18   164    21    18   334     1     102  ;
 13011    18   165     5    18   334     1      64  }
 13012    18   165     5    18   334     0     864  ENDMETHOD
 13013    18   165     5    18   335     0     865  STARTMETHOD
 13014    18   207    12    18   335     0     111  ByteOrder
 13015    18   207    22    18   335     0     111  order
 13016    18   207    27    18   335     0      59  (
 13017    18   207    28    18   335     0      60  )
 13018    18   207    30    18   335     0      63  {
 13019    18   212     9    18   335     0      19  return
 13020    18   212    16    18   335     0     111  ByteOrder.LITTLE_ENDIAN
 13021    18   212    39    18   335     1     102  ;
 13022    18   214     5    18   335     1      64  }
 13023    18   214     5    18   335     0     866  ENDMETHOD
 13024    18   216     1    18    -1     0      64  }
 13025    18   216     1    18    -1     1     867  ENDCLASS
 13026    18   216     1    -1    -1     1     868  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsIntBufferL.java
 13027    19     1     1    -1    -1     1     869  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsIntBufferRB.java
 13028    19    28     9    -1    -1     0     111  java.nio
 13029    19    28    17    -1    -1     0     102  ;
 13030    19    31     1    19    -1     0     870  STARTCLASS
 13031    19    31     1    19    -1     0      24  class
 13032    19    31     7    19    -1     0     111  ByteBufferAsIntBufferRB
 13033    19    32     5    19    -1     0      38  extends
 13034    19    32    13    19    -1     0     111  ByteBufferAsIntBufferB
 13035    19    33     1    19    -1     0      63  {
 13036    19    33     1    19   336     0     871  STARTMETHOD
 13037    19    42     5    19   336     0     111  ByteBufferAsIntBufferRB
 13038    19    42    28    19   336     0      59  (
 13039    19    42    29    19   336     0     111  ByteBuffer
 13040    19    42    40    19   336     0     111  bb
 13041    19    42    42    19   336     0      60  )
 13042    19    42    44    19   336     0      63  {
 13043    19    55     9    19   336     0      27  super
 13044    19    55    14    19   336     0      59  (
 13045    19    55    15    19   336     0     111  bb
 13046    19    55    17    19   336     0      60  )
 13047    19    55    18    19   336     0     102  ;
 13048    19    57     5    19   336     0      64  }
 13049    19    57     5    19   336     0     872  ENDMETHOD
 13050    19    57     5    19   337     0     873  STARTMETHOD
 13051    19    59     5    19   337     0     111  ByteBufferAsIntBufferRB
 13052    19    59    28    19   337     0      59  (
 13053    19    59    29    19   337     0     111  ByteBuffer
 13054    19    59    40    19   337     0     111  bb
 13055    19    59    42    19   337     0      66  ,
 13056    19    60    38    19   337     0      36  int
 13057    19    60    42    19   337     0     111  mark
 13058    19    60    46    19   337     0      66  ,
 13059    19    60    48    19   337     0      36  int
 13060    19    60    52    19   337     0     111  pos
 13061    19    60    55    19   337     0      66  ,
 13062    19    60    57    19   337     0      36  int
 13063    19    60    61    19   337     0     111  lim
 13064    19    60    64    19   337     0      66  ,
 13065    19    60    66    19   337     0      36  int
 13066    19    60    70    19   337     0     111  cap
 13067    19    60    73    19   337     0      66  ,
 13068    19    61    38    19   337     0      36  int
 13069    19    61    42    19   337     0     111  off
 13070    19    61    45    19   337     0      60  )
 13071    19    62     5    19   337     0      63  {
 13072    19    68     9    19   337     0      27  super
 13073    19    68    14    19   337     0      59  (
 13074    19    68    15    19   337     0     111  bb
 13075    19    68    17    19   337     0      66  ,
 13076    19    68    19    19   337     0     111  mark
 13077    19    68    23    19   337     0      66  ,
 13078    19    68    25    19   337     0     111  pos
 13079    19    68    28    19   337     0      66  ,
 13080    19    68    30    19   337     0     111  lim
 13081    19    68    33    19   337     0      66  ,
 13082    19    68    35    19   337     0     111  cap
 13083    19    68    38    19   337     0      66  ,
 13084    19    68    40    19   337     0     111  off
 13085    19    68    43    19   337     0      60  )
 13086    19    68    44    19   337     0     102  ;
 13087    19    70     5    19   337     0      64  }
 13088    19    70     5    19   337     0     874  ENDMETHOD
 13089    19    70     5    19   338     0     875  STARTMETHOD
 13090    19    72    12    19   338     0     111  IntBuffer
 13091    19    72    22    19   338     0     111  slice
 13092    19    72    27    19   338     0      59  (
 13093    19    72    28    19   338     0      60  )
 13094    19    72    30    19   338     0      63  {
 13095    19    73     9    19   338     1      36  int
 13096    19    73    13    19   338     1     111  pos
 13097    19    73    17    19   338     1      67  =
 13098    19    73    19    19   338     1     111  this.position
 13099    19    73    32    19   338     1      59  (
 13100    19    73    33    19   338     1      60  )
 13101    19    73    34    19   338     1     102  ;
 13102    19    74     9    19   338     1      36  int
 13103    19    74    13    19   338     1     111  lim
 13104    19    74    17    19   338     1      67  =
 13105    19    74    19    19   338     1     111  this.limit
 13106    19    74    29    19   338     1      59  (
 13107    19    74    30    19   338     1      60  )
 13108    19    74    31    19   338     1     102  ;
 13109    19    75     9    19   338     0     111  assert
 13110    19    75    16    19   338     0      59  (
 13111    19    75    17    19   338     0     111  pos
 13112    19    75    21    19   338     0      92  <=
 13113    19    75    24    19   338     0     111  lim
 13114    19    75    27    19   338     0      60  )
 13115    19    75    28    19   338     0     102  ;
 13116    19    76     9    19   338     0      36  int
 13117    19    76    13    19   338     0     111  rem
 13118    19    76    17    19   338     0      67  =
 13119    19    76    19    19   338     0      59  (
 13120    19    76    20    19   338     0     111  pos
 13121    19    76    24    19   338     0      92  <=
 13122    19    76    27    19   338     0     111  lim
 13123    19    76    31    19   338     0      58  ?
 13124    19    76    33    19   338     0     111  lim
 13125    19    76    37    19   338     0      77  -
 13126    19    76    39    19   338     0     111  pos
 13127    19    76    43    19   338     0      65  :
 13128    19    76    45    19   338     0     112  0
 13129    19    76    46    19   338     0      60  )
 13130    19    76    47    19   338     0     102  ;
 13131    19    77     9    19   338     0      36  int
 13132    19    77    13    19   338     0     111  off
 13133    19    77    17    19   338     0      67  =
 13134    19    77    19    19   338     0      59  (
 13135    19    77    20    19   338     0     111  pos
 13136    19    77    24    19   338     0      90  <<
 13137    19    77    27    19   338     0     112  2
 13138    19    77    28    19   338     0      60  )
 13139    19    77    30    19   338     0      74  +
 13140    19    77    32    19   338     0     111  offset
 13141    19    77    38    19   338     0     102  ;
 13142    19    78     9    19   338     0     111  assert
 13143    19    78    16    19   338     0      59  (
 13144    19    78    17    19   338     0     111  off
 13145    19    78    21    19   338     0      88  >=
 13146    19    78    24    19   338     0     112  0
 13147    19    78    25    19   338     0      60  )
 13148    19    78    26    19   338     0     102  ;
 13149    19    79     9    19   338     0      19  return
 13150    19    79    20    19   338     0     111  ByteBufferAsIntBufferRB
 13151    19    79    43    19   338     0      59  (
 13152    19    79    44    19   338     0     111  bb
 13153    19    79    46    19   338     0      66  ,
 13154    19    79    48    19   338     0      77  -
 13155    19    79    49    19   338     0     112  1
 13156    19    79    50    19   338     0      66  ,
 13157    19    79    52    19   338     0     112  0
 13158    19    79    53    19   338     0      66  ,
 13159    19    79    55    19   338     0     111  rem
 13160    19    79    58    19   338     0      66  ,
 13161    19    79    60    19   338     0     111  rem
 13162    19    79    63    19   338     0      66  ,
 13163    19    79    65    19   338     0     111  off
 13164    19    79    68    19   338     0      60  )
 13165    19    79    69    19   338     0     102  ;
 13166    19    80     5    19   338     0      64  }
 13167    19    80     5    19   338     0     876  ENDMETHOD
 13168    19    80     5    19   339     0     877  STARTMETHOD
 13169    19    82    12    19   339     0     111  IntBuffer
 13170    19    82    22    19   339     0     111  duplicate
 13171    19    82    31    19   339     0      59  (
 13172    19    82    32    19   339     0      60  )
 13173    19    82    34    19   339     0      63  {
 13174    19    83     9    19   339     0      19  return
 13175    19    83    20    19   339     0     111  ByteBufferAsIntBufferRB
 13176    19    83    43    19   339     0      59  (
 13177    19    83    44    19   339     0     111  bb
 13178    19    83    46    19   339     0      66  ,
 13179    19    84    53    19   339     1     111  this.markValue
 13180    19    84    67    19   339     1      59  (
 13181    19    84    68    19   339     1      60  )
 13182    19    84    69    19   339     1      66  ,
 13183    19    85    53    19   339     1     111  this.position
 13184    19    85    66    19   339     1      59  (
 13185    19    85    67    19   339     1      60  )
 13186    19    85    68    19   339     1      66  ,
 13187    19    86    53    19   339     1     111  this.limit
 13188    19    86    63    19   339     1      59  (
 13189    19    86    64    19   339     1      60  )
 13190    19    86    65    19   339     1      66  ,
 13191    19    87    53    19   339     1     111  this.capacity
 13192    19    87    66    19   339     1      59  (
 13193    19    87    67    19   339     1      60  )
 13194    19    87    68    19   339     1      66  ,
 13195    19    88    53    19   339     0     111  offset
 13196    19    88    59    19   339     0      60  )
 13197    19    88    60    19   339     0     102  ;
 13198    19    89     5    19   339     0      64  }
 13199    19    89     5    19   339     0     878  ENDMETHOD
 13200    19    89     5    19   340     0     879  STARTMETHOD
 13201    19    91    12    19   340     0     111  IntBuffer
 13202    19    91    22    19   340     0     111  asReadOnlyBuffer
 13203    19    91    38    19   340     0      59  (
 13204    19    91    39    19   340     0      60  )
 13205    19    91    41    19   340     0      63  {
 13206    19   100     9    19   340     0      19  return
 13207    19   100    16    19   340     0     111  duplicate
 13208    19   100    25    19   340     0      59  (
 13209    19   100    26    19   340     0      60  )
 13210    19   100    27    19   340     0     102  ;
 13211    19   102     5    19   340     0      64  }
 13212    19   102     5    19   340     0     880  ENDMETHOD
 13213    19   102     5    19   341     0     881  STARTMETHOD
 13214    19   120    12    19   341     0     111  IntBuffer
 13215    19   120    22    19   341     0     111  put
 13216    19   120    25    19   341     0      59  (
 13217    19   120    26    19   341     0      36  int
 13218    19   120    30    19   341     0     111  x
 13219    19   120    31    19   341     0      60  )
 13220    19   120    33    19   341     0      63  {
 13221    19   125     9    19   341     0      20  throw
 13222    19   125    19    19   341     0     111  ReadOnlyBufferException
 13223    19   125    42    19   341     0      59  (
 13224    19   125    43    19   341     0      60  )
 13225    19   125    44    19   341     0     102  ;
 13226    19   127     5    19   341     0      64  }
 13227    19   127     5    19   341     0     882  ENDMETHOD
 13228    19   127     5    19   342     0     883  STARTMETHOD
 13229    19   129    12    19   342     0     111  IntBuffer
 13230    19   129    22    19   342     0     111  put
 13231    19   129    25    19   342     0      59  (
 13232    19   129    26    19   342     0      36  int
 13233    19   129    30    19   342     0     111  i
 13234    19   129    31    19   342     0      66  ,
 13235    19   129    33    19   342     0      36  int
 13236    19   129    37    19   342     0     111  x
 13237    19   129    38    19   342     0      60  )
 13238    19   129    40    19   342     0      63  {
 13239    19   134     9    19   342     0      20  throw
 13240    19   134    19    19   342     1     111  ReadOnlyBufferException
 13241    19   134    42    19   342     1      59  (
 13242    19   134    43    19   342     1      60  )
 13243    19   134    44    19   342     1     102  ;
 13244    19   136     5    19   342     1      64  }
 13245    19   136     5    19   342     0     884  ENDMETHOD
 13246    19   136     5    19   343     0     885  STARTMETHOD
 13247    19   138    12    19   343     0     111  IntBuffer
 13248    19   138    22    19   343     0     111  compact
 13249    19   138    29    19   343     0      59  (
 13250    19   138    30    19   343     0      60  )
 13251    19   138    32    19   343     0      63  {
 13252    19   155     9    19   343     0      20  throw
 13253    19   155    19    19   343     1     111  ReadOnlyBufferException
 13254    19   155    42    19   343     1      59  (
 13255    19   155    43    19   343     1      60  )
 13256    19   155    44    19   343     1     102  ;
 13257    19   157     5    19   343     1      64  }
 13258    19   157     5    19   343     0     886  ENDMETHOD
 13259    19   157     5    19   344     0     887  STARTMETHOD
 13260    19   159    12    19   344     0      39  boolean
 13261    19   159    20    19   344     0     111  isDirect
 13262    19   159    28    19   344     0      59  (
 13263    19   159    29    19   344     0      60  )
 13264    19   159    31    19   344     0      63  {
 13265    19   160     9    19   344     0      19  return
 13266    19   160    16    19   344     1     111  bb.isDirect
 13267    19   160    27    19   344     1      59  (
 13268    19   160    28    19   344     1      60  )
 13269    19   160    29    19   344     1     102  ;
 13270    19   161     5    19   344     1      64  }
 13271    19   161     5    19   344     0     888  ENDMETHOD
 13272    19   161     5    19   345     0     889  STARTMETHOD
 13273    19   163    12    19   345     0      39  boolean
 13274    19   163    20    19   345     0     111  isReadOnly
 13275    19   163    30    19   345     0      59  (
 13276    19   163    31    19   345     0      60  )
 13277    19   163    33    19   345     0      63  {
 13278    19   164     9    19   345     0      19  return
 13279    19   164    16    19   345     0      52  true
 13280    19   164    20    19   345     0     102  ;
 13281    19   165     5    19   345     0      64  }
 13282    19   165     5    19   345     0     890  ENDMETHOD
 13283    19   165     5    19   346     0     891  STARTMETHOD
 13284    19   207    12    19   346     0     111  ByteOrder
 13285    19   207    22    19   346     0     111  order
 13286    19   207    27    19   346     0      59  (
 13287    19   207    28    19   346     0      60  )
 13288    19   207    30    19   346     0      63  {
 13289    19   209     9    19   346     0      19  return
 13290    19   209    16    19   346     0     111  ByteOrder.BIG_ENDIAN
 13291    19   209    36    19   346     0     102  ;
 13292    19   214     5    19   346     0      64  }
 13293    19   214     5    19   346     0     892  ENDMETHOD
 13294    19   216     1    19    -1     0      64  }
 13295    19   216     1    19    -1     1     893  ENDCLASS
 13296    19   216     1    -1    -1     1     894  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsIntBufferRB.java
 13297    20     1     1    -1    -1     1     895  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsIntBufferRL.java
 13298    20    28     9    -1    -1     0     111  java.nio
 13299    20    28    17    -1    -1     0     102  ;
 13300    20    31     1    20    -1     0     896  STARTCLASS
 13301    20    31     1    20    -1     0      24  class
 13302    20    31     7    20    -1     0     111  ByteBufferAsIntBufferRL
 13303    20    32     5    20    -1     0      38  extends
 13304    20    32    13    20    -1     0     111  ByteBufferAsIntBufferL
 13305    20    33     1    20    -1     0      63  {
 13306    20    33     1    20   347     0     897  STARTMETHOD
 13307    20    42     5    20   347     0     111  ByteBufferAsIntBufferRL
 13308    20    42    28    20   347     0      59  (
 13309    20    42    29    20   347     0     111  ByteBuffer
 13310    20    42    40    20   347     0     111  bb
 13311    20    42    42    20   347     0      60  )
 13312    20    42    44    20   347     0      63  {
 13313    20    55     9    20   347     0      27  super
 13314    20    55    14    20   347     0      59  (
 13315    20    55    15    20   347     0     111  bb
 13316    20    55    17    20   347     0      60  )
 13317    20    55    18    20   347     0     102  ;
 13318    20    57     5    20   347     0      64  }
 13319    20    57     5    20   347     0     898  ENDMETHOD
 13320    20    57     5    20   348     0     899  STARTMETHOD
 13321    20    59     5    20   348     0     111  ByteBufferAsIntBufferRL
 13322    20    59    28    20   348     0      59  (
 13323    20    59    29    20   348     0     111  ByteBuffer
 13324    20    59    40    20   348     0     111  bb
 13325    20    59    42    20   348     0      66  ,
 13326    20    60    38    20   348     0      36  int
 13327    20    60    42    20   348     0     111  mark
 13328    20    60    46    20   348     0      66  ,
 13329    20    60    48    20   348     0      36  int
 13330    20    60    52    20   348     0     111  pos
 13331    20    60    55    20   348     0      66  ,
 13332    20    60    57    20   348     0      36  int
 13333    20    60    61    20   348     0     111  lim
 13334    20    60    64    20   348     0      66  ,
 13335    20    60    66    20   348     0      36  int
 13336    20    60    70    20   348     0     111  cap
 13337    20    60    73    20   348     0      66  ,
 13338    20    61    38    20   348     0      36  int
 13339    20    61    42    20   348     0     111  off
 13340    20    61    45    20   348     0      60  )
 13341    20    62     5    20   348     0      63  {
 13342    20    68     9    20   348     0      27  super
 13343    20    68    14    20   348     0      59  (
 13344    20    68    15    20   348     0     111  bb
 13345    20    68    17    20   348     0      66  ,
 13346    20    68    19    20   348     0     111  mark
 13347    20    68    23    20   348     0      66  ,
 13348    20    68    25    20   348     0     111  pos
 13349    20    68    28    20   348     0      66  ,
 13350    20    68    30    20   348     0     111  lim
 13351    20    68    33    20   348     0      66  ,
 13352    20    68    35    20   348     0     111  cap
 13353    20    68    38    20   348     0      66  ,
 13354    20    68    40    20   348     0     111  off
 13355    20    68    43    20   348     0      60  )
 13356    20    68    44    20   348     0     102  ;
 13357    20    70     5    20   348     0      64  }
 13358    20    70     5    20   348     0     900  ENDMETHOD
 13359    20    70     5    20   349     0     901  STARTMETHOD
 13360    20    72    12    20   349     0     111  IntBuffer
 13361    20    72    22    20   349     0     111  slice
 13362    20    72    27    20   349     0      59  (
 13363    20    72    28    20   349     0      60  )
 13364    20    72    30    20   349     0      63  {
 13365    20    73     9    20   349     1      36  int
 13366    20    73    13    20   349     1     111  pos
 13367    20    73    17    20   349     1      67  =
 13368    20    73    19    20   349     1     111  this.position
 13369    20    73    32    20   349     1      59  (
 13370    20    73    33    20   349     1      60  )
 13371    20    73    34    20   349     1     102  ;
 13372    20    74     9    20   349     1      36  int
 13373    20    74    13    20   349     1     111  lim
 13374    20    74    17    20   349     1      67  =
 13375    20    74    19    20   349     1     111  this.limit
 13376    20    74    29    20   349     1      59  (
 13377    20    74    30    20   349     1      60  )
 13378    20    74    31    20   349     1     102  ;
 13379    20    75     9    20   349     0     111  assert
 13380    20    75    16    20   349     0      59  (
 13381    20    75    17    20   349     0     111  pos
 13382    20    75    21    20   349     0      92  <=
 13383    20    75    24    20   349     0     111  lim
 13384    20    75    27    20   349     0      60  )
 13385    20    75    28    20   349     0     102  ;
 13386    20    76     9    20   349     0      36  int
 13387    20    76    13    20   349     0     111  rem
 13388    20    76    17    20   349     0      67  =
 13389    20    76    19    20   349     0      59  (
 13390    20    76    20    20   349     0     111  pos
 13391    20    76    24    20   349     0      92  <=
 13392    20    76    27    20   349     0     111  lim
 13393    20    76    31    20   349     0      58  ?
 13394    20    76    33    20   349     0     111  lim
 13395    20    76    37    20   349     0      77  -
 13396    20    76    39    20   349     0     111  pos
 13397    20    76    43    20   349     0      65  :
 13398    20    76    45    20   349     0     112  0
 13399    20    76    46    20   349     0      60  )
 13400    20    76    47    20   349     0     102  ;
 13401    20    77     9    20   349     0      36  int
 13402    20    77    13    20   349     0     111  off
 13403    20    77    17    20   349     0      67  =
 13404    20    77    19    20   349     0      59  (
 13405    20    77    20    20   349     0     111  pos
 13406    20    77    24    20   349     0      90  <<
 13407    20    77    27    20   349     0     112  2
 13408    20    77    28    20   349     0      60  )
 13409    20    77    30    20   349     0      74  +
 13410    20    77    32    20   349     0     111  offset
 13411    20    77    38    20   349     0     102  ;
 13412    20    78     9    20   349     0     111  assert
 13413    20    78    16    20   349     0      59  (
 13414    20    78    17    20   349     0     111  off
 13415    20    78    21    20   349     0      88  >=
 13416    20    78    24    20   349     0     112  0
 13417    20    78    25    20   349     0      60  )
 13418    20    78    26    20   349     0     102  ;
 13419    20    79     9    20   349     0      19  return
 13420    20    79    20    20   349     0     111  ByteBufferAsIntBufferRL
 13421    20    79    43    20   349     0      59  (
 13422    20    79    44    20   349     0     111  bb
 13423    20    79    46    20   349     0      66  ,
 13424    20    79    48    20   349     0      77  -
 13425    20    79    49    20   349     0     112  1
 13426    20    79    50    20   349     0      66  ,
 13427    20    79    52    20   349     0     112  0
 13428    20    79    53    20   349     0      66  ,
 13429    20    79    55    20   349     0     111  rem
 13430    20    79    58    20   349     0      66  ,
 13431    20    79    60    20   349     0     111  rem
 13432    20    79    63    20   349     0      66  ,
 13433    20    79    65    20   349     0     111  off
 13434    20    79    68    20   349     0      60  )
 13435    20    79    69    20   349     0     102  ;
 13436    20    80     5    20   349     0      64  }
 13437    20    80     5    20   349     0     902  ENDMETHOD
 13438    20    80     5    20   350     0     903  STARTMETHOD
 13439    20    82    12    20   350     0     111  IntBuffer
 13440    20    82    22    20   350     0     111  duplicate
 13441    20    82    31    20   350     0      59  (
 13442    20    82    32    20   350     0      60  )
 13443    20    82    34    20   350     0      63  {
 13444    20    83     9    20   350     0      19  return
 13445    20    83    20    20   350     0     111  ByteBufferAsIntBufferRL
 13446    20    83    43    20   350     0      59  (
 13447    20    83    44    20   350     0     111  bb
 13448    20    83    46    20   350     0      66  ,
 13449    20    84    53    20   350     1     111  this.markValue
 13450    20    84    67    20   350     1      59  (
 13451    20    84    68    20   350     1      60  )
 13452    20    84    69    20   350     1      66  ,
 13453    20    85    53    20   350     1     111  this.position
 13454    20    85    66    20   350     1      59  (
 13455    20    85    67    20   350     1      60  )
 13456    20    85    68    20   350     1      66  ,
 13457    20    86    53    20   350     1     111  this.limit
 13458    20    86    63    20   350     1      59  (
 13459    20    86    64    20   350     1      60  )
 13460    20    86    65    20   350     1      66  ,
 13461    20    87    53    20   350     1     111  this.capacity
 13462    20    87    66    20   350     1      59  (
 13463    20    87    67    20   350     1      60  )
 13464    20    87    68    20   350     1      66  ,
 13465    20    88    53    20   350     0     111  offset
 13466    20    88    59    20   350     0      60  )
 13467    20    88    60    20   350     0     102  ;
 13468    20    89     5    20   350     0      64  }
 13469    20    89     5    20   350     0     904  ENDMETHOD
 13470    20    89     5    20   351     0     905  STARTMETHOD
 13471    20    91    12    20   351     0     111  IntBuffer
 13472    20    91    22    20   351     0     111  asReadOnlyBuffer
 13473    20    91    38    20   351     0      59  (
 13474    20    91    39    20   351     0      60  )
 13475    20    91    41    20   351     0      63  {
 13476    20   100     9    20   351     0      19  return
 13477    20   100    16    20   351     0     111  duplicate
 13478    20   100    25    20   351     0      59  (
 13479    20   100    26    20   351     0      60  )
 13480    20   100    27    20   351     0     102  ;
 13481    20   102     5    20   351     0      64  }
 13482    20   102     5    20   351     0     906  ENDMETHOD
 13483    20   102     5    20   352     0     907  STARTMETHOD
 13484    20   120    12    20   352     0     111  IntBuffer
 13485    20   120    22    20   352     0     111  put
 13486    20   120    25    20   352     0      59  (
 13487    20   120    26    20   352     0      36  int
 13488    20   120    30    20   352     0     111  x
 13489    20   120    31    20   352     0      60  )
 13490    20   120    33    20   352     0      63  {
 13491    20   125     9    20   352     0      20  throw
 13492    20   125    19    20   352     0     111  ReadOnlyBufferException
 13493    20   125    42    20   352     0      59  (
 13494    20   125    43    20   352     0      60  )
 13495    20   125    44    20   352     0     102  ;
 13496    20   127     5    20   352     0      64  }
 13497    20   127     5    20   352     0     908  ENDMETHOD
 13498    20   127     5    20   353     0     909  STARTMETHOD
 13499    20   129    12    20   353     0     111  IntBuffer
 13500    20   129    22    20   353     0     111  put
 13501    20   129    25    20   353     0      59  (
 13502    20   129    26    20   353     0      36  int
 13503    20   129    30    20   353     0     111  i
 13504    20   129    31    20   353     0      66  ,
 13505    20   129    33    20   353     0      36  int
 13506    20   129    37    20   353     0     111  x
 13507    20   129    38    20   353     0      60  )
 13508    20   129    40    20   353     0      63  {
 13509    20   134     9    20   353     0      20  throw
 13510    20   134    19    20   353     1     111  ReadOnlyBufferException
 13511    20   134    42    20   353     1      59  (
 13512    20   134    43    20   353     1      60  )
 13513    20   134    44    20   353     1     102  ;
 13514    20   136     5    20   353     1      64  }
 13515    20   136     5    20   353     0     910  ENDMETHOD
 13516    20   136     5    20   354     0     911  STARTMETHOD
 13517    20   138    12    20   354     0     111  IntBuffer
 13518    20   138    22    20   354     0     111  compact
 13519    20   138    29    20   354     0      59  (
 13520    20   138    30    20   354     0      60  )
 13521    20   138    32    20   354     0      63  {
 13522    20   155     9    20   354     0      20  throw
 13523    20   155    19    20   354     1     111  ReadOnlyBufferException
 13524    20   155    42    20   354     1      59  (
 13525    20   155    43    20   354     1      60  )
 13526    20   155    44    20   354     1     102  ;
 13527    20   157     5    20   354     1      64  }
 13528    20   157     5    20   354     0     912  ENDMETHOD
 13529    20   157     5    20   355     0     913  STARTMETHOD
 13530    20   159    12    20   355     0      39  boolean
 13531    20   159    20    20   355     0     111  isDirect
 13532    20   159    28    20   355     0      59  (
 13533    20   159    29    20   355     0      60  )
 13534    20   159    31    20   355     0      63  {
 13535    20   160     9    20   355     0      19  return
 13536    20   160    16    20   355     1     111  bb.isDirect
 13537    20   160    27    20   355     1      59  (
 13538    20   160    28    20   355     1      60  )
 13539    20   160    29    20   355     1     102  ;
 13540    20   161     5    20   355     1      64  }
 13541    20   161     5    20   355     0     914  ENDMETHOD
 13542    20   161     5    20   356     0     915  STARTMETHOD
 13543    20   163    12    20   356     0      39  boolean
 13544    20   163    20    20   356     0     111  isReadOnly
 13545    20   163    30    20   356     0      59  (
 13546    20   163    31    20   356     0      60  )
 13547    20   163    33    20   356     0      63  {
 13548    20   164     9    20   356     0      19  return
 13549    20   164    16    20   356     0      52  true
 13550    20   164    20    20   356     0     102  ;
 13551    20   165     5    20   356     0      64  }
 13552    20   165     5    20   356     0     916  ENDMETHOD
 13553    20   165     5    20   357     0     917  STARTMETHOD
 13554    20   207    12    20   357     0     111  ByteOrder
 13555    20   207    22    20   357     0     111  order
 13556    20   207    27    20   357     0      59  (
 13557    20   207    28    20   357     0      60  )
 13558    20   207    30    20   357     0      63  {
 13559    20   212     9    20   357     0      19  return
 13560    20   212    16    20   357     0     111  ByteOrder.LITTLE_ENDIAN
 13561    20   212    39    20   357     0     102  ;
 13562    20   214     5    20   357     0      64  }
 13563    20   214     5    20   357     0     918  ENDMETHOD
 13564    20   216     1    20    -1     0      64  }
 13565    20   216     1    20    -1     1     919  ENDCLASS
 13566    20   216     1    -1    -1     1     920  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsIntBufferRL.java
 13567    21     1     1    -1    -1     1     921  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsLongBufferB.java
 13568    21    28     9    -1    -1     0     111  java.nio
 13569    21    28    17    -1    -1     0     102  ;
 13570    21    31     1    21    -1     0     922  STARTCLASS
 13571    21    31     1    21    -1     0      24  class
 13572    21    31     7    21    -1     0     111  ByteBufferAsLongBufferB
 13573    21    32     5    21    -1     0      38  extends
 13574    21    32    13    21    -1     0     111  LongBuffer
 13575    21    33     1    21    -1     0      63  {
 13576    21    37     5    21    -1     0      23  protected
 13577    21    37    21    21    -1     0     111  ByteBuffer
 13578    21    37    32    21    -1     0     111  bb
 13579    21    37    34    21    -1     0     102  ;
 13580    21    38     5    21    -1     0      23  protected
 13581    21    38    21    21    -1     0      36  int
 13582    21    38    25    21    -1     0     111  offset
 13583    21    38    31    21    -1     0     102  ;
 13584    21    38    31    21   358     0     923  STARTMETHOD
 13585    21    42     5    21   358     0     111  ByteBufferAsLongBufferB
 13586    21    42    28    21   358     0      59  (
 13587    21    42    29    21   358     0     111  ByteBuffer
 13588    21    42    40    21   358     0     111  bb
 13589    21    42    42    21   358     0      60  )
 13590    21    42    44    21   358     0      63  {
 13591    21    44     9    21   358     0      27  super
 13592    21    44    14    21   358     0      59  (
 13593    21    44    15    21   358     0      77  -
 13594    21    44    16    21   358     0     112  1
 13595    21    44    17    21   358     0      66  ,
 13596    21    44    19    21   358     0     112  0
 13597    21    44    20    21   358     0      66  ,
 13598    21    45    15    21   358     0     111  bb.remaining
 13599    21    45    27    21   358     0      59  (
 13600    21    45    28    21   358     0      60  )
 13601    21    45    30    21   358     0      84  >>
 13602    21    45    33    21   358     0     112  3
 13603    21    45    34    21   358     0      66  ,
 13604    21    46    15    21   358     0     111  bb.remaining
 13605    21    46    27    21   358     0      59  (
 13606    21    46    28    21   358     0      60  )
 13607    21    46    30    21   358     0      84  >>
 13608    21    46    33    21   358     0     112  3
 13609    21    46    34    21   358     0      60  )
 13610    21    46    35    21   358     0     102  ;
 13611    21    47     9    21   358     0     111  this.bb
 13612    21    47    17    21   358     0      67  =
 13613    21    47    19    21   358     0     111  bb
 13614    21    47    21    21   358     0     102  ;
 13615    21    49     9    21   358     0      36  int
 13616    21    49    13    21   358     0     111  cap
 13617    21    49    17    21   358     0      67  =
 13618    21    49    19    21   358     0     111  this.capacity
 13619    21    49    32    21   358     0      59  (
 13620    21    49    33    21   358     0      60  )
 13621    21    49    34    21   358     0     102  ;
 13622    21    50     9    21   358     0     111  this.limit
 13623    21    50    19    21   358     0      59  (
 13624    21    50    20    21   358     0     111  cap
 13625    21    50    23    21   358     0      60  )
 13626    21    50    24    21   358     0     102  ;
 13627    21    51     9    21   358     0      36  int
 13628    21    51    13    21   358     0     111  pos
 13629    21    51    17    21   358     0      67  =
 13630    21    51    19    21   358     0     111  this.position
 13631    21    51    32    21   358     0      59  (
 13632    21    51    33    21   358     0      60  )
 13633    21    51    34    21   358     0     102  ;
 13634    21    52     9    21   358     0     111  assert
 13635    21    52    16    21   358     0      59  (
 13636    21    52    17    21   358     0     111  pos
 13637    21    52    21    21   358     0      92  <=
 13638    21    52    24    21   358     0     111  cap
 13639    21    52    27    21   358     0      60  )
 13640    21    52    28    21   358     0     102  ;
 13641    21    53     9    21   358     0     111  offset
 13642    21    53    16    21   358     0      67  =
 13643    21    53    18    21   358     0     111  pos
 13644    21    53    21    21   358     0     102  ;
 13645    21    57     5    21   358     0      64  }
 13646    21    57     5    21   358     0     924  ENDMETHOD
 13647    21    57     5    21   359     0     925  STARTMETHOD
 13648    21    59     5    21   359     0     111  ByteBufferAsLongBufferB
 13649    21    59    28    21   359     0      59  (
 13650    21    59    29    21   359     0     111  ByteBuffer
 13651    21    59    40    21   359     0     111  bb
 13652    21    59    42    21   359     0      66  ,
 13653    21    60    38    21   359     0      36  int
 13654    21    60    42    21   359     0     111  mark
 13655    21    60    46    21   359     0      66  ,
 13656    21    60    48    21   359     0      36  int
 13657    21    60    52    21   359     0     111  pos
 13658    21    60    55    21   359     0      66  ,
 13659    21    60    57    21   359     0      36  int
 13660    21    60    61    21   359     0     111  lim
 13661    21    60    64    21   359     0      66  ,
 13662    21    60    66    21   359     0      36  int
 13663    21    60    70    21   359     0     111  cap
 13664    21    60    73    21   359     0      66  ,
 13665    21    61    38    21   359     0      36  int
 13666    21    61    42    21   359     0     111  off
 13667    21    61    45    21   359     0      60  )
 13668    21    62     5    21   359     0      63  {
 13669    21    64     9    21   359     0      27  super
 13670    21    64    14    21   359     0      59  (
 13671    21    64    15    21   359     0     111  mark
 13672    21    64    19    21   359     0      66  ,
 13673    21    64    21    21   359     0     111  pos
 13674    21    64    24    21   359     0      66  ,
 13675    21    64    26    21   359     0     111  lim
 13676    21    64    29    21   359     0      66  ,
 13677    21    64    31    21   359     0     111  cap
 13678    21    64    34    21   359     0      60  )
 13679    21    64    35    21   359     0     102  ;
 13680    21    65     9    21   359     1     111  this.bb
 13681    21    65    17    21   359     1      67  =
 13682    21    65    19    21   359     1     111  bb
 13683    21    65    21    21   359     1     102  ;
 13684    21    66     9    21   359     1     111  offset
 13685    21    66    16    21   359     1      67  =
 13686    21    66    18    21   359     1     111  off
 13687    21    66    21    21   359     1     102  ;
 13688    21    70     5    21   359     0      64  }
 13689    21    70     5    21   359     0     926  ENDMETHOD
 13690    21    70     5    21   360     0     927  STARTMETHOD
 13691    21    72    12    21   360     0     111  LongBuffer
 13692    21    72    23    21   360     0     111  slice
 13693    21    72    28    21   360     0      59  (
 13694    21    72    29    21   360     0      60  )
 13695    21    72    31    21   360     0      63  {
 13696    21    73     9    21   360     1      36  int
 13697    21    73    13    21   360     1     111  pos
 13698    21    73    17    21   360     1      67  =
 13699    21    73    19    21   360     1     111  this.position
 13700    21    73    32    21   360     1      59  (
 13701    21    73    33    21   360     1      60  )
 13702    21    73    34    21   360     1     102  ;
 13703    21    74     9    21   360     1      36  int
 13704    21    74    13    21   360     1     111  lim
 13705    21    74    17    21   360     1      67  =
 13706    21    74    19    21   360     1     111  this.limit
 13707    21    74    29    21   360     1      59  (
 13708    21    74    30    21   360     1      60  )
 13709    21    74    31    21   360     1     102  ;
 13710    21    75     9    21   360     0     111  assert
 13711    21    75    16    21   360     0      59  (
 13712    21    75    17    21   360     0     111  pos
 13713    21    75    21    21   360     0      92  <=
 13714    21    75    24    21   360     0     111  lim
 13715    21    75    27    21   360     0      60  )
 13716    21    75    28    21   360     0     102  ;
 13717    21    76     9    21   360     0      36  int
 13718    21    76    13    21   360     0     111  rem
 13719    21    76    17    21   360     0      67  =
 13720    21    76    19    21   360     0      59  (
 13721    21    76    20    21   360     0     111  pos
 13722    21    76    24    21   360     0      92  <=
 13723    21    76    27    21   360     0     111  lim
 13724    21    76    31    21   360     0      58  ?
 13725    21    76    33    21   360     0     111  lim
 13726    21    76    37    21   360     0      77  -
 13727    21    76    39    21   360     0     111  pos
 13728    21    76    43    21   360     0      65  :
 13729    21    76    45    21   360     0     112  0
 13730    21    76    46    21   360     0      60  )
 13731    21    76    47    21   360     0     102  ;
 13732    21    77     9    21   360     0      36  int
 13733    21    77    13    21   360     0     111  off
 13734    21    77    17    21   360     0      67  =
 13735    21    77    19    21   360     0      59  (
 13736    21    77    20    21   360     0     111  pos
 13737    21    77    24    21   360     0      90  <<
 13738    21    77    27    21   360     0     112  3
 13739    21    77    28    21   360     0      60  )
 13740    21    77    30    21   360     0      74  +
 13741    21    77    32    21   360     0     111  offset
 13742    21    77    38    21   360     0     102  ;
 13743    21    78     9    21   360     0     111  assert
 13744    21    78    16    21   360     0      59  (
 13745    21    78    17    21   360     0     111  off
 13746    21    78    21    21   360     0      88  >=
 13747    21    78    24    21   360     0     112  0
 13748    21    78    25    21   360     0      60  )
 13749    21    78    26    21   360     0     102  ;
 13750    21    79     9    21   360     0      19  return
 13751    21    79    20    21   360     0     111  ByteBufferAsLongBufferB
 13752    21    79    43    21   360     0      59  (
 13753    21    79    44    21   360     0     111  bb
 13754    21    79    46    21   360     0      66  ,
 13755    21    79    48    21   360     0      77  -
 13756    21    79    49    21   360     0     112  1
 13757    21    79    50    21   360     0      66  ,
 13758    21    79    52    21   360     0     112  0
 13759    21    79    53    21   360     0      66  ,
 13760    21    79    55    21   360     0     111  rem
 13761    21    79    58    21   360     0      66  ,
 13762    21    79    60    21   360     0     111  rem
 13763    21    79    63    21   360     0      66  ,
 13764    21    79    65    21   360     0     111  off
 13765    21    79    68    21   360     0      60  )
 13766    21    79    69    21   360     0     102  ;
 13767    21    80     5    21   360     0      64  }
 13768    21    80     5    21   360     0     928  ENDMETHOD
 13769    21    80     5    21   361     0     929  STARTMETHOD
 13770    21    82    12    21   361     0     111  LongBuffer
 13771    21    82    23    21   361     0     111  duplicate
 13772    21    82    32    21   361     0      59  (
 13773    21    82    33    21   361     0      60  )
 13774    21    82    35    21   361     0      63  {
 13775    21    83     9    21   361     0      19  return
 13776    21    83    20    21   361     0     111  ByteBufferAsLongBufferB
 13777    21    83    43    21   361     0      59  (
 13778    21    83    44    21   361     0     111  bb
 13779    21    83    46    21   361     0      66  ,
 13780    21    84    53    21   361     1     111  this.markValue
 13781    21    84    67    21   361     1      59  (
 13782    21    84    68    21   361     1      60  )
 13783    21    84    69    21   361     1      66  ,
 13784    21    85    53    21   361     1     111  this.position
 13785    21    85    66    21   361     1      59  (
 13786    21    85    67    21   361     1      60  )
 13787    21    85    68    21   361     1      66  ,
 13788    21    86    53    21   361     1     111  this.limit
 13789    21    86    63    21   361     1      59  (
 13790    21    86    64    21   361     1      60  )
 13791    21    86    65    21   361     1      66  ,
 13792    21    87    53    21   361     1     111  this.capacity
 13793    21    87    66    21   361     1      59  (
 13794    21    87    67    21   361     1      60  )
 13795    21    87    68    21   361     1      66  ,
 13796    21    88    53    21   361     0     111  offset
 13797    21    88    59    21   361     0      60  )
 13798    21    88    60    21   361     0     102  ;
 13799    21    89     5    21   361     0      64  }
 13800    21    89     5    21   361     0     930  ENDMETHOD
 13801    21    89     5    21   362     0     931  STARTMETHOD
 13802    21    91    12    21   362     0     111  LongBuffer
 13803    21    91    23    21   362     0     111  asReadOnlyBuffer
 13804    21    91    39    21   362     0      59  (
 13805    21    91    40    21   362     0      60  )
 13806    21    91    42    21   362     0      63  {
 13807    21    93     9    21   362     0      19  return
 13808    21    93    20    21   362     0     111  ByteBufferAsLongBufferRB
 13809    21    93    44    21   362     0      59  (
 13810    21    93    45    21   362     0     111  bb
 13811    21    93    47    21   362     0      66  ,
 13812    21    94    50    21   362     1     111  this.markValue
 13813    21    94    64    21   362     1      59  (
 13814    21    94    65    21   362     1      60  )
 13815    21    94    66    21   362     1      66  ,
 13816    21    95    50    21   362     1     111  this.position
 13817    21    95    63    21   362     1      59  (
 13818    21    95    64    21   362     1      60  )
 13819    21    95    65    21   362     1      66  ,
 13820    21    96    50    21   362     1     111  this.limit
 13821    21    96    60    21   362     1      59  (
 13822    21    96    61    21   362     1      60  )
 13823    21    96    62    21   362     1      66  ,
 13824    21    97    50    21   362     1     111  this.capacity
 13825    21    97    63    21   362     1      59  (
 13826    21    97    64    21   362     1      60  )
 13827    21    97    65    21   362     1      66  ,
 13828    21    98    50    21   362     0     111  offset
 13829    21    98    56    21   362     0      60  )
 13830    21    98    57    21   362     0     102  ;
 13831    21   102     5    21   362     0      64  }
 13832    21   102     5    21   362     0     932  ENDMETHOD
 13833    21   102     5    21   363     0     933  STARTMETHOD
 13834    21   106     5    21   363     0      23  protected
 13835    21   106    15    21   363     0      36  int
 13836    21   106    19    21   363     0     111  ix
 13837    21   106    21    21   363     0      59  (
 13838    21   106    22    21   363     0      36  int
 13839    21   106    26    21   363     0     111  i
 13840    21   106    27    21   363     0      60  )
 13841    21   106    29    21   363     0      63  {
 13842    21   107     9    21   363     0      19  return
 13843    21   107    16    21   363     0      59  (
 13844    21   107    17    21   363     0     111  i
 13845    21   107    19    21   363     0      90  <<
 13846    21   107    22    21   363     0     112  3
 13847    21   107    23    21   363     0      60  )
 13848    21   107    25    21   363     0      74  +
 13849    21   107    27    21   363     0     111  offset
 13850    21   107    33    21   363     0     102  ;
 13851    21   108     5    21   363     0      64  }
 13852    21   108     5    21   363     0     934  ENDMETHOD
 13853    21   108     5    21   364     0     935  STARTMETHOD
 13854    21   110    12    21   364     0      53  long
 13855    21   110    17    21   364     0     111  get
 13856    21   110    20    21   364     0      59  (
 13857    21   110    21    21   364     0      60  )
 13858    21   110    23    21   364     0      63  {
 13859    21   111     9    21   364     0      19  return
 13860    21   111    16    21   364     0     111  Bits.getLongB
 13861    21   111    29    21   364     0      59  (
 13862    21   111    30    21   364     0     111  bb
 13863    21   111    32    21   364     0      66  ,
 13864    21   111    34    21   364     0     111  ix
 13865    21   111    36    21   364     0      59  (
 13866    21   111    37    21   364     0     111  nextGetIndex
 13867    21   111    49    21   364     0      59  (
 13868    21   111    50    21   364     0      60  )
 13869    21   111    51    21   364     0      60  )
 13870    21   111    52    21   364     0      60  )
 13871    21   111    53    21   364     0     102  ;
 13872    21   112     5    21   364     0      64  }
 13873    21   112     5    21   364     0     936  ENDMETHOD
 13874    21   112     5    21   365     0     937  STARTMETHOD
 13875    21   114    12    21   365     0      53  long
 13876    21   114    17    21   365     0     111  get
 13877    21   114    20    21   365     0      59  (
 13878    21   114    21    21   365     0      36  int
 13879    21   114    25    21   365     0     111  i
 13880    21   114    26    21   365     0      60  )
 13881    21   114    28    21   365     0      63  {
 13882    21   115     9    21   365     0      19  return
 13883    21   115    16    21   365     0     111  Bits.getLongB
 13884    21   115    29    21   365     0      59  (
 13885    21   115    30    21   365     0     111  bb
 13886    21   115    32    21   365     0      66  ,
 13887    21   115    34    21   365     0     111  ix
 13888    21   115    36    21   365     0      59  (
 13889    21   115    37    21   365     0     111  checkIndex
 13890    21   115    47    21   365     0      59  (
 13891    21   115    48    21   365     0     111  i
 13892    21   115    49    21   365     0      60  )
 13893    21   115    50    21   365     0      60  )
 13894    21   115    51    21   365     0      60  )
 13895    21   115    52    21   365     0     102  ;
 13896    21   116     5    21   365     0      64  }
 13897    21   116     5    21   365     0     938  ENDMETHOD
 13898    21   116     5    21   366     0     939  STARTMETHOD
 13899    21   120    12    21   366     0     111  LongBuffer
 13900    21   120    23    21   366     0     111  put
 13901    21   120    26    21   366     0      59  (
 13902    21   120    27    21   366     0      53  long
 13903    21   120    32    21   366     0     111  x
 13904    21   120    33    21   366     0      60  )
 13905    21   120    35    21   366     0      63  {
 13906    21   122     9    21   366     0     111  Bits.putLongB
 13907    21   122    22    21   366     0      59  (
 13908    21   122    23    21   366     0     111  bb
 13909    21   122    25    21   366     0      66  ,
 13910    21   122    27    21   366     0     111  ix
 13911    21   122    29    21   366     0      59  (
 13912    21   122    30    21   366     0     111  nextPutIndex
 13913    21   122    42    21   366     0      59  (
 13914    21   122    43    21   366     0      60  )
 13915    21   122    44    21   366     0      60  )
 13916    21   122    45    21   366     0      66  ,
 13917    21   122    47    21   366     0     111  x
 13918    21   122    48    21   366     0      60  )
 13919    21   122    49    21   366     0     102  ;
 13920    21   123     9    21   366     0      19  return
 13921    21   123    16    21   366     0      44  this
 13922    21   123    20    21   366     0     102  ;
 13923    21   127     5    21   366     0      64  }
 13924    21   127     5    21   366     0     940  ENDMETHOD
 13925    21   127     5    21   367     0     941  STARTMETHOD
 13926    21   129    12    21   367     0     111  LongBuffer
 13927    21   129    23    21   367     0     111  put
 13928    21   129    26    21   367     0      59  (
 13929    21   129    27    21   367     0      36  int
 13930    21   129    31    21   367     0     111  i
 13931    21   129    32    21   367     0      66  ,
 13932    21   129    34    21   367     0      53  long
 13933    21   129    39    21   367     0     111  x
 13934    21   129    40    21   367     0      60  )
 13935    21   129    42    21   367     0      63  {
 13936    21   131     9    21   367     0     111  Bits.putLongB
 13937    21   131    22    21   367     0      59  (
 13938    21   131    23    21   367     0     111  bb
 13939    21   131    25    21   367     0      66  ,
 13940    21   131    27    21   367     0     111  ix
 13941    21   131    29    21   367     0      59  (
 13942    21   131    30    21   367     0     111  checkIndex
 13943    21   131    40    21   367     0      59  (
 13944    21   131    41    21   367     0     111  i
 13945    21   131    42    21   367     0      60  )
 13946    21   131    43    21   367     0      60  )
 13947    21   131    44    21   367     0      66  ,
 13948    21   131    46    21   367     0     111  x
 13949    21   131    47    21   367     0      60  )
 13950    21   131    48    21   367     0     102  ;
 13951    21   132     9    21   367     0      19  return
 13952    21   132    16    21   367     0      44  this
 13953    21   132    20    21   367     0     102  ;
 13954    21   136     5    21   367     0      64  }
 13955    21   136     5    21   367     0     942  ENDMETHOD
 13956    21   136     5    21   368     0     943  STARTMETHOD
 13957    21   138    12    21   368     0     111  LongBuffer
 13958    21   138    23    21   368     0     111  compact
 13959    21   138    30    21   368     0      59  (
 13960    21   138    31    21   368     0      60  )
 13961    21   138    33    21   368     0      63  {
 13962    21   140     9    21   368     1      36  int
 13963    21   140    13    21   368     1     111  pos
 13964    21   140    17    21   368     1      67  =
 13965    21   140    19    21   368     1     111  position
 13966    21   140    27    21   368     1      59  (
 13967    21   140    28    21   368     1      60  )
 13968    21   140    29    21   368     1     102  ;
 13969    21   141     9    21   368     1      36  int
 13970    21   141    13    21   368     1     111  lim
 13971    21   141    17    21   368     1      67  =
 13972    21   141    19    21   368     1     111  limit
 13973    21   141    24    21   368     1      59  (
 13974    21   141    25    21   368     1      60  )
 13975    21   141    26    21   368     1     102  ;
 13976    21   142     9    21   368     0     111  assert
 13977    21   142    16    21   368     0      59  (
 13978    21   142    17    21   368     0     111  pos
 13979    21   142    21    21   368     0      92  <=
 13980    21   142    24    21   368     0     111  lim
 13981    21   142    27    21   368     0      60  )
 13982    21   142    28    21   368     0     102  ;
 13983    21   143     9    21   368     0      36  int
 13984    21   143    13    21   368     0     111  rem
 13985    21   143    17    21   368     0      67  =
 13986    21   143    19    21   368     0      59  (
 13987    21   143    20    21   368     0     111  pos
 13988    21   143    24    21   368     0      92  <=
 13989    21   143    27    21   368     0     111  lim
 13990    21   143    31    21   368     0      58  ?
 13991    21   143    33    21   368     0     111  lim
 13992    21   143    37    21   368     0      77  -
 13993    21   143    39    21   368     0     111  pos
 13994    21   143    43    21   368     0      65  :
 13995    21   143    45    21   368     0     112  0
 13996    21   143    46    21   368     0      60  )
 13997    21   143    47    21   368     0     102  ;
 13998    21   145     9    21   368     0     111  ByteBuffer
 13999    21   145    20    21   368     0     111  db
 14000    21   145    23    21   368     0      67  =
 14001    21   145    25    21   368     0     111  bb.duplicate
 14002    21   145    37    21   368     0      59  (
 14003    21   145    38    21   368     0      60  )
 14004    21   145    39    21   368     0     102  ;
 14005    21   146     9    21   368     0     111  db.limit
 14006    21   146    17    21   368     0      59  (
 14007    21   146    18    21   368     0     111  ix
 14008    21   146    20    21   368     0      59  (
 14009    21   146    21    21   368     0     111  lim
 14010    21   146    24    21   368     0      60  )
 14011    21   146    25    21   368     0      60  )
 14012    21   146    26    21   368     0     102  ;
 14013    21   147     9    21   368     0     111  db.position
 14014    21   147    20    21   368     0      59  (
 14015    21   147    21    21   368     0     111  ix
 14016    21   147    23    21   368     0      59  (
 14017    21   147    24    21   368     0     112  0
 14018    21   147    25    21   368     0      60  )
 14019    21   147    26    21   368     0      60  )
 14020    21   147    27    21   368     0     102  ;
 14021    21   148     9    21   368     0     111  ByteBuffer
 14022    21   148    20    21   368     0     111  sb
 14023    21   148    23    21   368     0      67  =
 14024    21   148    25    21   368     0     111  db.slice
 14025    21   148    33    21   368     0      59  (
 14026    21   148    34    21   368     0      60  )
 14027    21   148    35    21   368     0     102  ;
 14028    21   149     9    21   368     0     111  sb.position
 14029    21   149    20    21   368     0      59  (
 14030    21   149    21    21   368     0     111  pos
 14031    21   149    25    21   368     0      90  <<
 14032    21   149    28    21   368     0     112  3
 14033    21   149    29    21   368     0      60  )
 14034    21   149    30    21   368     0     102  ;
 14035    21   150     9    21   368     0     111  sb.compact
 14036    21   150    19    21   368     0      59  (
 14037    21   150    20    21   368     0      60  )
 14038    21   150    21    21   368     0     102  ;
 14039    21   151     9    21   368     0     111  position
 14040    21   151    17    21   368     0      59  (
 14041    21   151    18    21   368     0     111  rem
 14042    21   151    21    21   368     0      60  )
 14043    21   151    22    21   368     0     102  ;
 14044    21   152     9    21   368     0     111  limit
 14045    21   152    14    21   368     0      59  (
 14046    21   152    15    21   368     0     111  capacity
 14047    21   152    23    21   368     0      59  (
 14048    21   152    24    21   368     0      60  )
 14049    21   152    25    21   368     0      60  )
 14050    21   152    26    21   368     0     102  ;
 14051    21   153     9    21   368     0      19  return
 14052    21   153    16    21   368     0      44  this
 14053    21   153    20    21   368     0     102  ;
 14054    21   157     5    21   368     0      64  }
 14055    21   157     5    21   368     0     944  ENDMETHOD
 14056    21   157     5    21   369     0     945  STARTMETHOD
 14057    21   159    12    21   369     0      39  boolean
 14058    21   159    20    21   369     0     111  isDirect
 14059    21   159    28    21   369     0      59  (
 14060    21   159    29    21   369     0      60  )
 14061    21   159    31    21   369     0      63  {
 14062    21   160     9    21   369     0      19  return
 14063    21   160    16    21   369     0     111  bb.isDirect
 14064    21   160    27    21   369     0      59  (
 14065    21   160    28    21   369     0      60  )
 14066    21   160    29    21   369     1     102  ;
 14067    21   161     5    21   369     1      64  }
 14068    21   161     5    21   369     0     946  ENDMETHOD
 14069    21   161     5    21   370     0     947  STARTMETHOD
 14070    21   163    12    21   370     0      39  boolean
 14071    21   163    20    21   370     0     111  isReadOnly
 14072    21   163    30    21   370     0      59  (
 14073    21   163    31    21   370     0      60  )
 14074    21   163    33    21   370     0      63  {
 14075    21   164     9    21   370     0      19  return
 14076    21   164    16    21   370     0      43  false
 14077    21   164    21    21   370     1     102  ;
 14078    21   165     5    21   370     1      64  }
 14079    21   165     5    21   370     0     948  ENDMETHOD
 14080    21   165     5    21   371     0     949  STARTMETHOD
 14081    21   207    12    21   371     0     111  ByteOrder
 14082    21   207    22    21   371     0     111  order
 14083    21   207    27    21   371     0      59  (
 14084    21   207    28    21   371     0      60  )
 14085    21   207    30    21   371     0      63  {
 14086    21   209     9    21   371     0      19  return
 14087    21   209    16    21   371     0     111  ByteOrder.BIG_ENDIAN
 14088    21   209    36    21   371     1     102  ;
 14089    21   214     5    21   371     1      64  }
 14090    21   214     5    21   371     0     950  ENDMETHOD
 14091    21   216     1    21    -1     0      64  }
 14092    21   216     1    21    -1     1     951  ENDCLASS
 14093    21   216     1    -1    -1     1     952  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsLongBufferB.java
 14094    22     1     1    -1    -1     1     953  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsLongBufferL.java
 14095    22    28     9    -1    -1     0     111  java.nio
 14096    22    28    17    -1    -1     0     102  ;
 14097    22    31     1    22    -1     0     954  STARTCLASS
 14098    22    31     1    22    -1     0      24  class
 14099    22    31     7    22    -1     0     111  ByteBufferAsLongBufferL
 14100    22    32     5    22    -1     0      38  extends
 14101    22    32    13    22    -1     0     111  LongBuffer
 14102    22    33     1    22    -1     0      63  {
 14103    22    37     5    22    -1     0      23  protected
 14104    22    37    21    22    -1     0     111  ByteBuffer
 14105    22    37    32    22    -1     0     111  bb
 14106    22    37    34    22    -1     0     102  ;
 14107    22    38     5    22    -1     0      23  protected
 14108    22    38    21    22    -1     0      36  int
 14109    22    38    25    22    -1     0     111  offset
 14110    22    38    31    22    -1     0     102  ;
 14111    22    38    31    22   372     0     955  STARTMETHOD
 14112    22    42     5    22   372     0     111  ByteBufferAsLongBufferL
 14113    22    42    28    22   372     0      59  (
 14114    22    42    29    22   372     0     111  ByteBuffer
 14115    22    42    40    22   372     0     111  bb
 14116    22    42    42    22   372     0      60  )
 14117    22    42    44    22   372     0      63  {
 14118    22    44     9    22   372     0      27  super
 14119    22    44    14    22   372     0      59  (
 14120    22    44    15    22   372     0      77  -
 14121    22    44    16    22   372     0     112  1
 14122    22    44    17    22   372     0      66  ,
 14123    22    44    19    22   372     0     112  0
 14124    22    44    20    22   372     0      66  ,
 14125    22    45    15    22   372     0     111  bb.remaining
 14126    22    45    27    22   372     0      59  (
 14127    22    45    28    22   372     0      60  )
 14128    22    45    30    22   372     0      84  >>
 14129    22    45    33    22   372     0     112  3
 14130    22    45    34    22   372     0      66  ,
 14131    22    46    15    22   372     0     111  bb.remaining
 14132    22    46    27    22   372     0      59  (
 14133    22    46    28    22   372     0      60  )
 14134    22    46    30    22   372     0      84  >>
 14135    22    46    33    22   372     0     112  3
 14136    22    46    34    22   372     0      60  )
 14137    22    46    35    22   372     0     102  ;
 14138    22    47     9    22   372     0     111  this.bb
 14139    22    47    17    22   372     0      67  =
 14140    22    47    19    22   372     0     111  bb
 14141    22    47    21    22   372     0     102  ;
 14142    22    49     9    22   372     0      36  int
 14143    22    49    13    22   372     0     111  cap
 14144    22    49    17    22   372     0      67  =
 14145    22    49    19    22   372     0     111  this.capacity
 14146    22    49    32    22   372     0      59  (
 14147    22    49    33    22   372     0      60  )
 14148    22    49    34    22   372     0     102  ;
 14149    22    50     9    22   372     0     111  this.limit
 14150    22    50    19    22   372     0      59  (
 14151    22    50    20    22   372     0     111  cap
 14152    22    50    23    22   372     0      60  )
 14153    22    50    24    22   372     0     102  ;
 14154    22    51     9    22   372     0      36  int
 14155    22    51    13    22   372     0     111  pos
 14156    22    51    17    22   372     0      67  =
 14157    22    51    19    22   372     0     111  this.position
 14158    22    51    32    22   372     0      59  (
 14159    22    51    33    22   372     0      60  )
 14160    22    51    34    22   372     0     102  ;
 14161    22    52     9    22   372     0     111  assert
 14162    22    52    16    22   372     0      59  (
 14163    22    52    17    22   372     0     111  pos
 14164    22    52    21    22   372     0      92  <=
 14165    22    52    24    22   372     0     111  cap
 14166    22    52    27    22   372     0      60  )
 14167    22    52    28    22   372     0     102  ;
 14168    22    53     9    22   372     0     111  offset
 14169    22    53    16    22   372     0      67  =
 14170    22    53    18    22   372     0     111  pos
 14171    22    53    21    22   372     0     102  ;
 14172    22    57     5    22   372     0      64  }
 14173    22    57     5    22   372     0     956  ENDMETHOD
 14174    22    57     5    22   373     0     957  STARTMETHOD
 14175    22    59     5    22   373     0     111  ByteBufferAsLongBufferL
 14176    22    59    28    22   373     0      59  (
 14177    22    59    29    22   373     0     111  ByteBuffer
 14178    22    59    40    22   373     0     111  bb
 14179    22    59    42    22   373     0      66  ,
 14180    22    60    38    22   373     0      36  int
 14181    22    60    42    22   373     0     111  mark
 14182    22    60    46    22   373     0      66  ,
 14183    22    60    48    22   373     0      36  int
 14184    22    60    52    22   373     0     111  pos
 14185    22    60    55    22   373     0      66  ,
 14186    22    60    57    22   373     0      36  int
 14187    22    60    61    22   373     0     111  lim
 14188    22    60    64    22   373     0      66  ,
 14189    22    60    66    22   373     0      36  int
 14190    22    60    70    22   373     0     111  cap
 14191    22    60    73    22   373     0      66  ,
 14192    22    61    38    22   373     0      36  int
 14193    22    61    42    22   373     0     111  off
 14194    22    61    45    22   373     0      60  )
 14195    22    62     5    22   373     0      63  {
 14196    22    64     9    22   373     0      27  super
 14197    22    64    14    22   373     0      59  (
 14198    22    64    15    22   373     0     111  mark
 14199    22    64    19    22   373     0      66  ,
 14200    22    64    21    22   373     0     111  pos
 14201    22    64    24    22   373     0      66  ,
 14202    22    64    26    22   373     0     111  lim
 14203    22    64    29    22   373     0      66  ,
 14204    22    64    31    22   373     0     111  cap
 14205    22    64    34    22   373     0      60  )
 14206    22    64    35    22   373     0     102  ;
 14207    22    65     9    22   373     1     111  this.bb
 14208    22    65    17    22   373     1      67  =
 14209    22    65    19    22   373     1     111  bb
 14210    22    65    21    22   373     1     102  ;
 14211    22    66     9    22   373     1     111  offset
 14212    22    66    16    22   373     1      67  =
 14213    22    66    18    22   373     1     111  off
 14214    22    66    21    22   373     1     102  ;
 14215    22    70     5    22   373     0      64  }
 14216    22    70     5    22   373     0     958  ENDMETHOD
 14217    22    70     5    22   374     0     959  STARTMETHOD
 14218    22    72    12    22   374     0     111  LongBuffer
 14219    22    72    23    22   374     0     111  slice
 14220    22    72    28    22   374     0      59  (
 14221    22    72    29    22   374     0      60  )
 14222    22    72    31    22   374     0      63  {
 14223    22    73     9    22   374     1      36  int
 14224    22    73    13    22   374     1     111  pos
 14225    22    73    17    22   374     1      67  =
 14226    22    73    19    22   374     1     111  this.position
 14227    22    73    32    22   374     1      59  (
 14228    22    73    33    22   374     1      60  )
 14229    22    73    34    22   374     1     102  ;
 14230    22    74     9    22   374     1      36  int
 14231    22    74    13    22   374     1     111  lim
 14232    22    74    17    22   374     1      67  =
 14233    22    74    19    22   374     1     111  this.limit
 14234    22    74    29    22   374     1      59  (
 14235    22    74    30    22   374     1      60  )
 14236    22    74    31    22   374     1     102  ;
 14237    22    75     9    22   374     0     111  assert
 14238    22    75    16    22   374     0      59  (
 14239    22    75    17    22   374     0     111  pos
 14240    22    75    21    22   374     0      92  <=
 14241    22    75    24    22   374     0     111  lim
 14242    22    75    27    22   374     0      60  )
 14243    22    75    28    22   374     0     102  ;
 14244    22    76     9    22   374     0      36  int
 14245    22    76    13    22   374     0     111  rem
 14246    22    76    17    22   374     0      67  =
 14247    22    76    19    22   374     0      59  (
 14248    22    76    20    22   374     0     111  pos
 14249    22    76    24    22   374     0      92  <=
 14250    22    76    27    22   374     0     111  lim
 14251    22    76    31    22   374     0      58  ?
 14252    22    76    33    22   374     0     111  lim
 14253    22    76    37    22   374     0      77  -
 14254    22    76    39    22   374     0     111  pos
 14255    22    76    43    22   374     0      65  :
 14256    22    76    45    22   374     0     112  0
 14257    22    76    46    22   374     0      60  )
 14258    22    76    47    22   374     0     102  ;
 14259    22    77     9    22   374     0      36  int
 14260    22    77    13    22   374     0     111  off
 14261    22    77    17    22   374     0      67  =
 14262    22    77    19    22   374     0      59  (
 14263    22    77    20    22   374     0     111  pos
 14264    22    77    24    22   374     0      90  <<
 14265    22    77    27    22   374     0     112  3
 14266    22    77    28    22   374     0      60  )
 14267    22    77    30    22   374     0      74  +
 14268    22    77    32    22   374     0     111  offset
 14269    22    77    38    22   374     0     102  ;
 14270    22    78     9    22   374     0     111  assert
 14271    22    78    16    22   374     0      59  (
 14272    22    78    17    22   374     0     111  off
 14273    22    78    21    22   374     0      88  >=
 14274    22    78    24    22   374     0     112  0
 14275    22    78    25    22   374     0      60  )
 14276    22    78    26    22   374     0     102  ;
 14277    22    79     9    22   374     0      19  return
 14278    22    79    20    22   374     0     111  ByteBufferAsLongBufferL
 14279    22    79    43    22   374     0      59  (
 14280    22    79    44    22   374     0     111  bb
 14281    22    79    46    22   374     0      66  ,
 14282    22    79    48    22   374     0      77  -
 14283    22    79    49    22   374     0     112  1
 14284    22    79    50    22   374     0      66  ,
 14285    22    79    52    22   374     0     112  0
 14286    22    79    53    22   374     0      66  ,
 14287    22    79    55    22   374     0     111  rem
 14288    22    79    58    22   374     0      66  ,
 14289    22    79    60    22   374     0     111  rem
 14290    22    79    63    22   374     0      66  ,
 14291    22    79    65    22   374     0     111  off
 14292    22    79    68    22   374     0      60  )
 14293    22    79    69    22   374     0     102  ;
 14294    22    80     5    22   374     0      64  }
 14295    22    80     5    22   374     0     960  ENDMETHOD
 14296    22    80     5    22   375     0     961  STARTMETHOD
 14297    22    82    12    22   375     0     111  LongBuffer
 14298    22    82    23    22   375     0     111  duplicate
 14299    22    82    32    22   375     0      59  (
 14300    22    82    33    22   375     0      60  )
 14301    22    82    35    22   375     0      63  {
 14302    22    83     9    22   375     0      19  return
 14303    22    83    20    22   375     0     111  ByteBufferAsLongBufferL
 14304    22    83    43    22   375     0      59  (
 14305    22    83    44    22   375     0     111  bb
 14306    22    83    46    22   375     0      66  ,
 14307    22    84    53    22   375     1     111  this.markValue
 14308    22    84    67    22   375     1      59  (
 14309    22    84    68    22   375     1      60  )
 14310    22    84    69    22   375     1      66  ,
 14311    22    85    53    22   375     1     111  this.position
 14312    22    85    66    22   375     1      59  (
 14313    22    85    67    22   375     1      60  )
 14314    22    85    68    22   375     1      66  ,
 14315    22    86    53    22   375     1     111  this.limit
 14316    22    86    63    22   375     1      59  (
 14317    22    86    64    22   375     1      60  )
 14318    22    86    65    22   375     1      66  ,
 14319    22    87    53    22   375     1     111  this.capacity
 14320    22    87    66    22   375     1      59  (
 14321    22    87    67    22   375     1      60  )
 14322    22    87    68    22   375     1      66  ,
 14323    22    88    53    22   375     0     111  offset
 14324    22    88    59    22   375     0      60  )
 14325    22    88    60    22   375     0     102  ;
 14326    22    89     5    22   375     0      64  }
 14327    22    89     5    22   375     0     962  ENDMETHOD
 14328    22    89     5    22   376     0     963  STARTMETHOD
 14329    22    91    12    22   376     0     111  LongBuffer
 14330    22    91    23    22   376     0     111  asReadOnlyBuffer
 14331    22    91    39    22   376     0      59  (
 14332    22    91    40    22   376     0      60  )
 14333    22    91    42    22   376     0      63  {
 14334    22    93     9    22   376     0      19  return
 14335    22    93    20    22   376     0     111  ByteBufferAsLongBufferRL
 14336    22    93    44    22   376     0      59  (
 14337    22    93    45    22   376     0     111  bb
 14338    22    93    47    22   376     0      66  ,
 14339    22    94    50    22   376     1     111  this.markValue
 14340    22    94    64    22   376     1      59  (
 14341    22    94    65    22   376     1      60  )
 14342    22    94    66    22   376     1      66  ,
 14343    22    95    50    22   376     1     111  this.position
 14344    22    95    63    22   376     1      59  (
 14345    22    95    64    22   376     1      60  )
 14346    22    95    65    22   376     1      66  ,
 14347    22    96    50    22   376     1     111  this.limit
 14348    22    96    60    22   376     1      59  (
 14349    22    96    61    22   376     1      60  )
 14350    22    96    62    22   376     1      66  ,
 14351    22    97    50    22   376     1     111  this.capacity
 14352    22    97    63    22   376     1      59  (
 14353    22    97    64    22   376     1      60  )
 14354    22    97    65    22   376     1      66  ,
 14355    22    98    50    22   376     0     111  offset
 14356    22    98    56    22   376     0      60  )
 14357    22    98    57    22   376     0     102  ;
 14358    22   102     5    22   376     0      64  }
 14359    22   102     5    22   376     0     964  ENDMETHOD
 14360    22   102     5    22   377     0     965  STARTMETHOD
 14361    22   106     5    22   377     0      23  protected
 14362    22   106    15    22   377     0      36  int
 14363    22   106    19    22   377     0     111  ix
 14364    22   106    21    22   377     0      59  (
 14365    22   106    22    22   377     0      36  int
 14366    22   106    26    22   377     0     111  i
 14367    22   106    27    22   377     0      60  )
 14368    22   106    29    22   377     0      63  {
 14369    22   107     9    22   377     0      19  return
 14370    22   107    16    22   377     0      59  (
 14371    22   107    17    22   377     0     111  i
 14372    22   107    19    22   377     0      90  <<
 14373    22   107    22    22   377     0     112  3
 14374    22   107    23    22   377     0      60  )
 14375    22   107    25    22   377     0      74  +
 14376    22   107    27    22   377     0     111  offset
 14377    22   107    33    22   377     0     102  ;
 14378    22   108     5    22   377     0      64  }
 14379    22   108     5    22   377     0     966  ENDMETHOD
 14380    22   108     5    22   378     0     967  STARTMETHOD
 14381    22   110    12    22   378     0      53  long
 14382    22   110    17    22   378     0     111  get
 14383    22   110    20    22   378     0      59  (
 14384    22   110    21    22   378     0      60  )
 14385    22   110    23    22   378     0      63  {
 14386    22   111     9    22   378     0      19  return
 14387    22   111    16    22   378     0     111  Bits.getLongL
 14388    22   111    29    22   378     0      59  (
 14389    22   111    30    22   378     0     111  bb
 14390    22   111    32    22   378     0      66  ,
 14391    22   111    34    22   378     0     111  ix
 14392    22   111    36    22   378     0      59  (
 14393    22   111    37    22   378     0     111  nextGetIndex
 14394    22   111    49    22   378     0      59  (
 14395    22   111    50    22   378     0      60  )
 14396    22   111    51    22   378     0      60  )
 14397    22   111    52    22   378     0      60  )
 14398    22   111    53    22   378     0     102  ;
 14399    22   112     5    22   378     0      64  }
 14400    22   112     5    22   378     0     968  ENDMETHOD
 14401    22   112     5    22   379     0     969  STARTMETHOD
 14402    22   114    12    22   379     0      53  long
 14403    22   114    17    22   379     0     111  get
 14404    22   114    20    22   379     0      59  (
 14405    22   114    21    22   379     0      36  int
 14406    22   114    25    22   379     0     111  i
 14407    22   114    26    22   379     0      60  )
 14408    22   114    28    22   379     0      63  {
 14409    22   115     9    22   379     0      19  return
 14410    22   115    16    22   379     0     111  Bits.getLongL
 14411    22   115    29    22   379     0      59  (
 14412    22   115    30    22   379     0     111  bb
 14413    22   115    32    22   379     0      66  ,
 14414    22   115    34    22   379     0     111  ix
 14415    22   115    36    22   379     0      59  (
 14416    22   115    37    22   379     0     111  checkIndex
 14417    22   115    47    22   379     0      59  (
 14418    22   115    48    22   379     0     111  i
 14419    22   115    49    22   379     0      60  )
 14420    22   115    50    22   379     0      60  )
 14421    22   115    51    22   379     0      60  )
 14422    22   115    52    22   379     0     102  ;
 14423    22   116     5    22   379     0      64  }
 14424    22   116     5    22   379     0     970  ENDMETHOD
 14425    22   116     5    22   380     0     971  STARTMETHOD
 14426    22   120    12    22   380     0     111  LongBuffer
 14427    22   120    23    22   380     0     111  put
 14428    22   120    26    22   380     0      59  (
 14429    22   120    27    22   380     0      53  long
 14430    22   120    32    22   380     0     111  x
 14431    22   120    33    22   380     0      60  )
 14432    22   120    35    22   380     0      63  {
 14433    22   122     9    22   380     0     111  Bits.putLongL
 14434    22   122    22    22   380     0      59  (
 14435    22   122    23    22   380     0     111  bb
 14436    22   122    25    22   380     0      66  ,
 14437    22   122    27    22   380     0     111  ix
 14438    22   122    29    22   380     0      59  (
 14439    22   122    30    22   380     0     111  nextPutIndex
 14440    22   122    42    22   380     0      59  (
 14441    22   122    43    22   380     0      60  )
 14442    22   122    44    22   380     0      60  )
 14443    22   122    45    22   380     0      66  ,
 14444    22   122    47    22   380     0     111  x
 14445    22   122    48    22   380     0      60  )
 14446    22   122    49    22   380     0     102  ;
 14447    22   123     9    22   380     0      19  return
 14448    22   123    16    22   380     0      44  this
 14449    22   123    20    22   380     0     102  ;
 14450    22   127     5    22   380     0      64  }
 14451    22   127     5    22   380     0     972  ENDMETHOD
 14452    22   127     5    22   381     0     973  STARTMETHOD
 14453    22   129    12    22   381     0     111  LongBuffer
 14454    22   129    23    22   381     0     111  put
 14455    22   129    26    22   381     0      59  (
 14456    22   129    27    22   381     0      36  int
 14457    22   129    31    22   381     0     111  i
 14458    22   129    32    22   381     0      66  ,
 14459    22   129    34    22   381     0      53  long
 14460    22   129    39    22   381     0     111  x
 14461    22   129    40    22   381     0      60  )
 14462    22   129    42    22   381     0      63  {
 14463    22   131     9    22   381     0     111  Bits.putLongL
 14464    22   131    22    22   381     0      59  (
 14465    22   131    23    22   381     0     111  bb
 14466    22   131    25    22   381     0      66  ,
 14467    22   131    27    22   381     0     111  ix
 14468    22   131    29    22   381     0      59  (
 14469    22   131    30    22   381     0     111  checkIndex
 14470    22   131    40    22   381     0      59  (
 14471    22   131    41    22   381     0     111  i
 14472    22   131    42    22   381     0      60  )
 14473    22   131    43    22   381     0      60  )
 14474    22   131    44    22   381     0      66  ,
 14475    22   131    46    22   381     0     111  x
 14476    22   131    47    22   381     0      60  )
 14477    22   131    48    22   381     0     102  ;
 14478    22   132     9    22   381     0      19  return
 14479    22   132    16    22   381     0      44  this
 14480    22   132    20    22   381     0     102  ;
 14481    22   136     5    22   381     0      64  }
 14482    22   136     5    22   381     0     974  ENDMETHOD
 14483    22   136     5    22   382     0     975  STARTMETHOD
 14484    22   138    12    22   382     0     111  LongBuffer
 14485    22   138    23    22   382     0     111  compact
 14486    22   138    30    22   382     0      59  (
 14487    22   138    31    22   382     0      60  )
 14488    22   138    33    22   382     0      63  {
 14489    22   140     9    22   382     1      36  int
 14490    22   140    13    22   382     1     111  pos
 14491    22   140    17    22   382     1      67  =
 14492    22   140    19    22   382     1     111  position
 14493    22   140    27    22   382     1      59  (
 14494    22   140    28    22   382     1      60  )
 14495    22   140    29    22   382     1     102  ;
 14496    22   141     9    22   382     1      36  int
 14497    22   141    13    22   382     1     111  lim
 14498    22   141    17    22   382     1      67  =
 14499    22   141    19    22   382     1     111  limit
 14500    22   141    24    22   382     1      59  (
 14501    22   141    25    22   382     1      60  )
 14502    22   141    26    22   382     1     102  ;
 14503    22   142     9    22   382     0     111  assert
 14504    22   142    16    22   382     0      59  (
 14505    22   142    17    22   382     0     111  pos
 14506    22   142    21    22   382     0      92  <=
 14507    22   142    24    22   382     0     111  lim
 14508    22   142    27    22   382     0      60  )
 14509    22   142    28    22   382     0     102  ;
 14510    22   143     9    22   382     0      36  int
 14511    22   143    13    22   382     0     111  rem
 14512    22   143    17    22   382     0      67  =
 14513    22   143    19    22   382     0      59  (
 14514    22   143    20    22   382     0     111  pos
 14515    22   143    24    22   382     0      92  <=
 14516    22   143    27    22   382     0     111  lim
 14517    22   143    31    22   382     0      58  ?
 14518    22   143    33    22   382     0     111  lim
 14519    22   143    37    22   382     0      77  -
 14520    22   143    39    22   382     0     111  pos
 14521    22   143    43    22   382     0      65  :
 14522    22   143    45    22   382     0     112  0
 14523    22   143    46    22   382     0      60  )
 14524    22   143    47    22   382     0     102  ;
 14525    22   145     9    22   382     0     111  ByteBuffer
 14526    22   145    20    22   382     0     111  db
 14527    22   145    23    22   382     0      67  =
 14528    22   145    25    22   382     0     111  bb.duplicate
 14529    22   145    37    22   382     0      59  (
 14530    22   145    38    22   382     0      60  )
 14531    22   145    39    22   382     0     102  ;
 14532    22   146     9    22   382     0     111  db.limit
 14533    22   146    17    22   382     0      59  (
 14534    22   146    18    22   382     0     111  ix
 14535    22   146    20    22   382     0      59  (
 14536    22   146    21    22   382     0     111  lim
 14537    22   146    24    22   382     0      60  )
 14538    22   146    25    22   382     0      60  )
 14539    22   146    26    22   382     0     102  ;
 14540    22   147     9    22   382     0     111  db.position
 14541    22   147    20    22   382     0      59  (
 14542    22   147    21    22   382     0     111  ix
 14543    22   147    23    22   382     0      59  (
 14544    22   147    24    22   382     0     112  0
 14545    22   147    25    22   382     0      60  )
 14546    22   147    26    22   382     0      60  )
 14547    22   147    27    22   382     0     102  ;
 14548    22   148     9    22   382     0     111  ByteBuffer
 14549    22   148    20    22   382     0     111  sb
 14550    22   148    23    22   382     0      67  =
 14551    22   148    25    22   382     0     111  db.slice
 14552    22   148    33    22   382     0      59  (
 14553    22   148    34    22   382     0      60  )
 14554    22   148    35    22   382     0     102  ;
 14555    22   149     9    22   382     0     111  sb.position
 14556    22   149    20    22   382     0      59  (
 14557    22   149    21    22   382     0     111  pos
 14558    22   149    25    22   382     0      90  <<
 14559    22   149    28    22   382     0     112  3
 14560    22   149    29    22   382     0      60  )
 14561    22   149    30    22   382     0     102  ;
 14562    22   150     9    22   382     0     111  sb.compact
 14563    22   150    19    22   382     0      59  (
 14564    22   150    20    22   382     0      60  )
 14565    22   150    21    22   382     0     102  ;
 14566    22   151     9    22   382     0     111  position
 14567    22   151    17    22   382     0      59  (
 14568    22   151    18    22   382     0     111  rem
 14569    22   151    21    22   382     0      60  )
 14570    22   151    22    22   382     0     102  ;
 14571    22   152     9    22   382     0     111  limit
 14572    22   152    14    22   382     0      59  (
 14573    22   152    15    22   382     0     111  capacity
 14574    22   152    23    22   382     0      59  (
 14575    22   152    24    22   382     0      60  )
 14576    22   152    25    22   382     0      60  )
 14577    22   152    26    22   382     0     102  ;
 14578    22   153     9    22   382     0      19  return
 14579    22   153    16    22   382     0      44  this
 14580    22   153    20    22   382     0     102  ;
 14581    22   157     5    22   382     0      64  }
 14582    22   157     5    22   382     0     976  ENDMETHOD
 14583    22   157     5    22   383     0     977  STARTMETHOD
 14584    22   159    12    22   383     0      39  boolean
 14585    22   159    20    22   383     0     111  isDirect
 14586    22   159    28    22   383     0      59  (
 14587    22   159    29    22   383     0      60  )
 14588    22   159    31    22   383     0      63  {
 14589    22   160     9    22   383     0      19  return
 14590    22   160    16    22   383     0     111  bb.isDirect
 14591    22   160    27    22   383     0      59  (
 14592    22   160    28    22   383     0      60  )
 14593    22   160    29    22   383     1     102  ;
 14594    22   161     5    22   383     1      64  }
 14595    22   161     5    22   383     0     978  ENDMETHOD
 14596    22   161     5    22   384     0     979  STARTMETHOD
 14597    22   163    12    22   384     0      39  boolean
 14598    22   163    20    22   384     0     111  isReadOnly
 14599    22   163    30    22   384     0      59  (
 14600    22   163    31    22   384     0      60  )
 14601    22   163    33    22   384     0      63  {
 14602    22   164     9    22   384     0      19  return
 14603    22   164    16    22   384     0      43  false
 14604    22   164    21    22   384     1     102  ;
 14605    22   165     5    22   384     1      64  }
 14606    22   165     5    22   384     0     980  ENDMETHOD
 14607    22   165     5    22   385     0     981  STARTMETHOD
 14608    22   207    12    22   385     0     111  ByteOrder
 14609    22   207    22    22   385     0     111  order
 14610    22   207    27    22   385     0      59  (
 14611    22   207    28    22   385     0      60  )
 14612    22   207    30    22   385     0      63  {
 14613    22   212     9    22   385     0      19  return
 14614    22   212    16    22   385     0     111  ByteOrder.LITTLE_ENDIAN
 14615    22   212    39    22   385     1     102  ;
 14616    22   214     5    22   385     1      64  }
 14617    22   214     5    22   385     0     982  ENDMETHOD
 14618    22   216     1    22    -1     0      64  }
 14619    22   216     1    22    -1     1     983  ENDCLASS
 14620    22   216     1    -1    -1     1     984  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsLongBufferL.java
 14621    23     1     1    -1    -1     1     985  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsLongBufferRB.java
 14622    23    28     9    -1    -1     0     111  java.nio
 14623    23    28    17    -1    -1     0     102  ;
 14624    23    31     1    23    -1     0     986  STARTCLASS
 14625    23    31     1    23    -1     0      24  class
 14626    23    31     7    23    -1     0     111  ByteBufferAsLongBufferRB
 14627    23    32     5    23    -1     0      38  extends
 14628    23    32    13    23    -1     0     111  ByteBufferAsLongBufferB
 14629    23    33     1    23    -1     0      63  {
 14630    23    33     1    23   386     0     987  STARTMETHOD
 14631    23    42     5    23   386     0     111  ByteBufferAsLongBufferRB
 14632    23    42    29    23   386     0      59  (
 14633    23    42    30    23   386     0     111  ByteBuffer
 14634    23    42    41    23   386     0     111  bb
 14635    23    42    43    23   386     0      60  )
 14636    23    42    45    23   386     0      63  {
 14637    23    55     9    23   386     0      27  super
 14638    23    55    14    23   386     0      59  (
 14639    23    55    15    23   386     0     111  bb
 14640    23    55    17    23   386     0      60  )
 14641    23    55    18    23   386     0     102  ;
 14642    23    57     5    23   386     0      64  }
 14643    23    57     5    23   386     0     988  ENDMETHOD
 14644    23    57     5    23   387     0     989  STARTMETHOD
 14645    23    59     5    23   387     0     111  ByteBufferAsLongBufferRB
 14646    23    59    29    23   387     0      59  (
 14647    23    59    30    23   387     0     111  ByteBuffer
 14648    23    59    41    23   387     0     111  bb
 14649    23    59    43    23   387     0      66  ,
 14650    23    60    38    23   387     0      36  int
 14651    23    60    42    23   387     0     111  mark
 14652    23    60    46    23   387     0      66  ,
 14653    23    60    48    23   387     0      36  int
 14654    23    60    52    23   387     0     111  pos
 14655    23    60    55    23   387     0      66  ,
 14656    23    60    57    23   387     0      36  int
 14657    23    60    61    23   387     0     111  lim
 14658    23    60    64    23   387     0      66  ,
 14659    23    60    66    23   387     0      36  int
 14660    23    60    70    23   387     0     111  cap
 14661    23    60    73    23   387     0      66  ,
 14662    23    61    38    23   387     0      36  int
 14663    23    61    42    23   387     0     111  off
 14664    23    61    45    23   387     0      60  )
 14665    23    62     5    23   387     0      63  {
 14666    23    68     9    23   387     0      27  super
 14667    23    68    14    23   387     0      59  (
 14668    23    68    15    23   387     0     111  bb
 14669    23    68    17    23   387     0      66  ,
 14670    23    68    19    23   387     0     111  mark
 14671    23    68    23    23   387     0      66  ,
 14672    23    68    25    23   387     0     111  pos
 14673    23    68    28    23   387     0      66  ,
 14674    23    68    30    23   387     0     111  lim
 14675    23    68    33    23   387     0      66  ,
 14676    23    68    35    23   387     0     111  cap
 14677    23    68    38    23   387     0      66  ,
 14678    23    68    40    23   387     0     111  off
 14679    23    68    43    23   387     0      60  )
 14680    23    68    44    23   387     0     102  ;
 14681    23    70     5    23   387     0      64  }
 14682    23    70     5    23   387     0     990  ENDMETHOD
 14683    23    70     5    23   388     0     991  STARTMETHOD
 14684    23    72    12    23   388     0     111  LongBuffer
 14685    23    72    23    23   388     0     111  slice
 14686    23    72    28    23   388     0      59  (
 14687    23    72    29    23   388     0      60  )
 14688    23    72    31    23   388     0      63  {
 14689    23    73     9    23   388     1      36  int
 14690    23    73    13    23   388     1     111  pos
 14691    23    73    17    23   388     1      67  =
 14692    23    73    19    23   388     1     111  this.position
 14693    23    73    32    23   388     1      59  (
 14694    23    73    33    23   388     1      60  )
 14695    23    73    34    23   388     1     102  ;
 14696    23    74     9    23   388     1      36  int
 14697    23    74    13    23   388     1     111  lim
 14698    23    74    17    23   388     1      67  =
 14699    23    74    19    23   388     1     111  this.limit
 14700    23    74    29    23   388     1      59  (
 14701    23    74    30    23   388     1      60  )
 14702    23    74    31    23   388     1     102  ;
 14703    23    75     9    23   388     0     111  assert
 14704    23    75    16    23   388     0      59  (
 14705    23    75    17    23   388     0     111  pos
 14706    23    75    21    23   388     0      92  <=
 14707    23    75    24    23   388     0     111  lim
 14708    23    75    27    23   388     0      60  )
 14709    23    75    28    23   388     0     102  ;
 14710    23    76     9    23   388     0      36  int
 14711    23    76    13    23   388     0     111  rem
 14712    23    76    17    23   388     0      67  =
 14713    23    76    19    23   388     0      59  (
 14714    23    76    20    23   388     0     111  pos
 14715    23    76    24    23   388     0      92  <=
 14716    23    76    27    23   388     0     111  lim
 14717    23    76    31    23   388     0      58  ?
 14718    23    76    33    23   388     0     111  lim
 14719    23    76    37    23   388     0      77  -
 14720    23    76    39    23   388     0     111  pos
 14721    23    76    43    23   388     0      65  :
 14722    23    76    45    23   388     0     112  0
 14723    23    76    46    23   388     0      60  )
 14724    23    76    47    23   388     0     102  ;
 14725    23    77     9    23   388     0      36  int
 14726    23    77    13    23   388     0     111  off
 14727    23    77    17    23   388     0      67  =
 14728    23    77    19    23   388     0      59  (
 14729    23    77    20    23   388     0     111  pos
 14730    23    77    24    23   388     0      90  <<
 14731    23    77    27    23   388     0     112  3
 14732    23    77    28    23   388     0      60  )
 14733    23    77    30    23   388     0      74  +
 14734    23    77    32    23   388     0     111  offset
 14735    23    77    38    23   388     0     102  ;
 14736    23    78     9    23   388     0     111  assert
 14737    23    78    16    23   388     0      59  (
 14738    23    78    17    23   388     0     111  off
 14739    23    78    21    23   388     0      88  >=
 14740    23    78    24    23   388     0     112  0
 14741    23    78    25    23   388     0      60  )
 14742    23    78    26    23   388     0     102  ;
 14743    23    79     9    23   388     0      19  return
 14744    23    79    20    23   388     0     111  ByteBufferAsLongBufferRB
 14745    23    79    44    23   388     0      59  (
 14746    23    79    45    23   388     0     111  bb
 14747    23    79    47    23   388     0      66  ,
 14748    23    79    49    23   388     0      77  -
 14749    23    79    50    23   388     0     112  1
 14750    23    79    51    23   388     0      66  ,
 14751    23    79    53    23   388     0     112  0
 14752    23    79    54    23   388     0      66  ,
 14753    23    79    56    23   388     0     111  rem
 14754    23    79    59    23   388     0      66  ,
 14755    23    79    61    23   388     0     111  rem
 14756    23    79    64    23   388     0      66  ,
 14757    23    79    66    23   388     0     111  off
 14758    23    79    69    23   388     0      60  )
 14759    23    79    70    23   388     0     102  ;
 14760    23    80     5    23   388     0      64  }
 14761    23    80     5    23   388     0     992  ENDMETHOD
 14762    23    80     5    23   389     0     993  STARTMETHOD
 14763    23    82    12    23   389     0     111  LongBuffer
 14764    23    82    23    23   389     0     111  duplicate
 14765    23    82    32    23   389     0      59  (
 14766    23    82    33    23   389     0      60  )
 14767    23    82    35    23   389     0      63  {
 14768    23    83     9    23   389     0      19  return
 14769    23    83    20    23   389     0     111  ByteBufferAsLongBufferRB
 14770    23    83    44    23   389     0      59  (
 14771    23    83    45    23   389     0     111  bb
 14772    23    83    47    23   389     0      66  ,
 14773    23    84    53    23   389     1     111  this.markValue
 14774    23    84    67    23   389     1      59  (
 14775    23    84    68    23   389     1      60  )
 14776    23    84    69    23   389     1      66  ,
 14777    23    85    53    23   389     1     111  this.position
 14778    23    85    66    23   389     1      59  (
 14779    23    85    67    23   389     1      60  )
 14780    23    85    68    23   389     1      66  ,
 14781    23    86    53    23   389     1     111  this.limit
 14782    23    86    63    23   389     1      59  (
 14783    23    86    64    23   389     1      60  )
 14784    23    86    65    23   389     1      66  ,
 14785    23    87    53    23   389     1     111  this.capacity
 14786    23    87    66    23   389     1      59  (
 14787    23    87    67    23   389     1      60  )
 14788    23    87    68    23   389     1      66  ,
 14789    23    88    53    23   389     0     111  offset
 14790    23    88    59    23   389     0      60  )
 14791    23    88    60    23   389     0     102  ;
 14792    23    89     5    23   389     0      64  }
 14793    23    89     5    23   389     0     994  ENDMETHOD
 14794    23    89     5    23   390     0     995  STARTMETHOD
 14795    23    91    12    23   390     0     111  LongBuffer
 14796    23    91    23    23   390     0     111  asReadOnlyBuffer
 14797    23    91    39    23   390     0      59  (
 14798    23    91    40    23   390     0      60  )
 14799    23    91    42    23   390     0      63  {
 14800    23   100     9    23   390     0      19  return
 14801    23   100    16    23   390     0     111  duplicate
 14802    23   100    25    23   390     0      59  (
 14803    23   100    26    23   390     0      60  )
 14804    23   100    27    23   390     0     102  ;
 14805    23   102     5    23   390     0      64  }
 14806    23   102     5    23   390     0     996  ENDMETHOD
 14807    23   102     5    23   391     0     997  STARTMETHOD
 14808    23   120    12    23   391     0     111  LongBuffer
 14809    23   120    23    23   391     0     111  put
 14810    23   120    26    23   391     0      59  (
 14811    23   120    27    23   391     0      53  long
 14812    23   120    32    23   391     0     111  x
 14813    23   120    33    23   391     0      60  )
 14814    23   120    35    23   391     0      63  {
 14815    23   125     9    23   391     0      20  throw
 14816    23   125    19    23   391     0     111  ReadOnlyBufferException
 14817    23   125    42    23   391     0      59  (
 14818    23   125    43    23   391     0      60  )
 14819    23   125    44    23   391     0     102  ;
 14820    23   127     5    23   391     0      64  }
 14821    23   127     5    23   391     0     998  ENDMETHOD
 14822    23   127     5    23   392     0     999  STARTMETHOD
 14823    23   129    12    23   392     0     111  LongBuffer
 14824    23   129    23    23   392     0     111  put
 14825    23   129    26    23   392     0      59  (
 14826    23   129    27    23   392     0      36  int
 14827    23   129    31    23   392     0     111  i
 14828    23   129    32    23   392     0      66  ,
 14829    23   129    34    23   392     0      53  long
 14830    23   129    39    23   392     0     111  x
 14831    23   129    40    23   392     0      60  )
 14832    23   129    42    23   392     0      63  {
 14833    23   134     9    23   392     0      20  throw
 14834    23   134    19    23   392     1     111  ReadOnlyBufferException
 14835    23   134    42    23   392     1      59  (
 14836    23   134    43    23   392     1      60  )
 14837    23   134    44    23   392     1     102  ;
 14838    23   136     5    23   392     1      64  }
 14839    23   136     5    23   392     0    1000  ENDMETHOD
 14840    23   136     5    23   393     0    1001  STARTMETHOD
 14841    23   138    12    23   393     0     111  LongBuffer
 14842    23   138    23    23   393     0     111  compact
 14843    23   138    30    23   393     0      59  (
 14844    23   138    31    23   393     0      60  )
 14845    23   138    33    23   393     0      63  {
 14846    23   155     9    23   393     0      20  throw
 14847    23   155    19    23   393     1     111  ReadOnlyBufferException
 14848    23   155    42    23   393     1      59  (
 14849    23   155    43    23   393     1      60  )
 14850    23   155    44    23   393     1     102  ;
 14851    23   157     5    23   393     1      64  }
 14852    23   157     5    23   393     0    1002  ENDMETHOD
 14853    23   157     5    23   394     0    1003  STARTMETHOD
 14854    23   159    12    23   394     0      39  boolean
 14855    23   159    20    23   394     0     111  isDirect
 14856    23   159    28    23   394     0      59  (
 14857    23   159    29    23   394     0      60  )
 14858    23   159    31    23   394     0      63  {
 14859    23   160     9    23   394     0      19  return
 14860    23   160    16    23   394     1     111  bb.isDirect
 14861    23   160    27    23   394     1      59  (
 14862    23   160    28    23   394     1      60  )
 14863    23   160    29    23   394     1     102  ;
 14864    23   161     5    23   394     1      64  }
 14865    23   161     5    23   394     0    1004  ENDMETHOD
 14866    23   161     5    23   395     0    1005  STARTMETHOD
 14867    23   163    12    23   395     0      39  boolean
 14868    23   163    20    23   395     0     111  isReadOnly
 14869    23   163    30    23   395     0      59  (
 14870    23   163    31    23   395     0      60  )
 14871    23   163    33    23   395     0      63  {
 14872    23   164     9    23   395     0      19  return
 14873    23   164    16    23   395     0      52  true
 14874    23   164    20    23   395     0     102  ;
 14875    23   165     5    23   395     0      64  }
 14876    23   165     5    23   395     0    1006  ENDMETHOD
 14877    23   165     5    23   396     0    1007  STARTMETHOD
 14878    23   207    12    23   396     0     111  ByteOrder
 14879    23   207    22    23   396     0     111  order
 14880    23   207    27    23   396     0      59  (
 14881    23   207    28    23   396     0      60  )
 14882    23   207    30    23   396     0      63  {
 14883    23   209     9    23   396     0      19  return
 14884    23   209    16    23   396     0     111  ByteOrder.BIG_ENDIAN
 14885    23   209    36    23   396     0     102  ;
 14886    23   214     5    23   396     0      64  }
 14887    23   214     5    23   396     0    1008  ENDMETHOD
 14888    23   216     1    23    -1     0      64  }
 14889    23   216     1    23    -1     1    1009  ENDCLASS
 14890    23   216     1    -1    -1     1    1010  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsLongBufferRB.java
 14891    24     1     1    -1    -1     1    1011  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsLongBufferRL.java
 14892    24    28     9    -1    -1     0     111  java.nio
 14893    24    28    17    -1    -1     0     102  ;
 14894    24    31     1    24    -1     0    1012  STARTCLASS
 14895    24    31     1    24    -1     0      24  class
 14896    24    31     7    24    -1     0     111  ByteBufferAsLongBufferRL
 14897    24    32     5    24    -1     0      38  extends
 14898    24    32    13    24    -1     0     111  ByteBufferAsLongBufferL
 14899    24    33     1    24    -1     0      63  {
 14900    24    33     1    24   397     0    1013  STARTMETHOD
 14901    24    42     5    24   397     0     111  ByteBufferAsLongBufferRL
 14902    24    42    29    24   397     0      59  (
 14903    24    42    30    24   397     0     111  ByteBuffer
 14904    24    42    41    24   397     0     111  bb
 14905    24    42    43    24   397     0      60  )
 14906    24    42    45    24   397     0      63  {
 14907    24    55     9    24   397     0      27  super
 14908    24    55    14    24   397     0      59  (
 14909    24    55    15    24   397     0     111  bb
 14910    24    55    17    24   397     0      60  )
 14911    24    55    18    24   397     0     102  ;
 14912    24    57     5    24   397     0      64  }
 14913    24    57     5    24   397     0    1014  ENDMETHOD
 14914    24    57     5    24   398     0    1015  STARTMETHOD
 14915    24    59     5    24   398     0     111  ByteBufferAsLongBufferRL
 14916    24    59    29    24   398     0      59  (
 14917    24    59    30    24   398     0     111  ByteBuffer
 14918    24    59    41    24   398     0     111  bb
 14919    24    59    43    24   398     0      66  ,
 14920    24    60    38    24   398     0      36  int
 14921    24    60    42    24   398     0     111  mark
 14922    24    60    46    24   398     0      66  ,
 14923    24    60    48    24   398     0      36  int
 14924    24    60    52    24   398     0     111  pos
 14925    24    60    55    24   398     0      66  ,
 14926    24    60    57    24   398     0      36  int
 14927    24    60    61    24   398     0     111  lim
 14928    24    60    64    24   398     0      66  ,
 14929    24    60    66    24   398     0      36  int
 14930    24    60    70    24   398     0     111  cap
 14931    24    60    73    24   398     0      66  ,
 14932    24    61    38    24   398     0      36  int
 14933    24    61    42    24   398     0     111  off
 14934    24    61    45    24   398     0      60  )
 14935    24    62     5    24   398     0      63  {
 14936    24    68     9    24   398     0      27  super
 14937    24    68    14    24   398     0      59  (
 14938    24    68    15    24   398     0     111  bb
 14939    24    68    17    24   398     0      66  ,
 14940    24    68    19    24   398     0     111  mark
 14941    24    68    23    24   398     0      66  ,
 14942    24    68    25    24   398     0     111  pos
 14943    24    68    28    24   398     0      66  ,
 14944    24    68    30    24   398     0     111  lim
 14945    24    68    33    24   398     0      66  ,
 14946    24    68    35    24   398     0     111  cap
 14947    24    68    38    24   398     0      66  ,
 14948    24    68    40    24   398     0     111  off
 14949    24    68    43    24   398     0      60  )
 14950    24    68    44    24   398     0     102  ;
 14951    24    70     5    24   398     0      64  }
 14952    24    70     5    24   398     0    1016  ENDMETHOD
 14953    24    70     5    24   399     0    1017  STARTMETHOD
 14954    24    72    12    24   399     0     111  LongBuffer
 14955    24    72    23    24   399     0     111  slice
 14956    24    72    28    24   399     0      59  (
 14957    24    72    29    24   399     0      60  )
 14958    24    72    31    24   399     0      63  {
 14959    24    73     9    24   399     1      36  int
 14960    24    73    13    24   399     1     111  pos
 14961    24    73    17    24   399     1      67  =
 14962    24    73    19    24   399     1     111  this.position
 14963    24    73    32    24   399     1      59  (
 14964    24    73    33    24   399     1      60  )
 14965    24    73    34    24   399     1     102  ;
 14966    24    74     9    24   399     1      36  int
 14967    24    74    13    24   399     1     111  lim
 14968    24    74    17    24   399     1      67  =
 14969    24    74    19    24   399     1     111  this.limit
 14970    24    74    29    24   399     1      59  (
 14971    24    74    30    24   399     1      60  )
 14972    24    74    31    24   399     1     102  ;
 14973    24    75     9    24   399     0     111  assert
 14974    24    75    16    24   399     0      59  (
 14975    24    75    17    24   399     0     111  pos
 14976    24    75    21    24   399     0      92  <=
 14977    24    75    24    24   399     0     111  lim
 14978    24    75    27    24   399     0      60  )
 14979    24    75    28    24   399     0     102  ;
 14980    24    76     9    24   399     0      36  int
 14981    24    76    13    24   399     0     111  rem
 14982    24    76    17    24   399     0      67  =
 14983    24    76    19    24   399     0      59  (
 14984    24    76    20    24   399     0     111  pos
 14985    24    76    24    24   399     0      92  <=
 14986    24    76    27    24   399     0     111  lim
 14987    24    76    31    24   399     0      58  ?
 14988    24    76    33    24   399     0     111  lim
 14989    24    76    37    24   399     0      77  -
 14990    24    76    39    24   399     0     111  pos
 14991    24    76    43    24   399     0      65  :
 14992    24    76    45    24   399     0     112  0
 14993    24    76    46    24   399     0      60  )
 14994    24    76    47    24   399     0     102  ;
 14995    24    77     9    24   399     0      36  int
 14996    24    77    13    24   399     0     111  off
 14997    24    77    17    24   399     0      67  =
 14998    24    77    19    24   399     0      59  (
 14999    24    77    20    24   399     0     111  pos
 15000    24    77    24    24   399     0      90  <<
 15001    24    77    27    24   399     0     112  3
 15002    24    77    28    24   399     0      60  )
 15003    24    77    30    24   399     0      74  +
 15004    24    77    32    24   399     0     111  offset
 15005    24    77    38    24   399     0     102  ;
 15006    24    78     9    24   399     0     111  assert
 15007    24    78    16    24   399     0      59  (
 15008    24    78    17    24   399     0     111  off
 15009    24    78    21    24   399     0      88  >=
 15010    24    78    24    24   399     0     112  0
 15011    24    78    25    24   399     0      60  )
 15012    24    78    26    24   399     0     102  ;
 15013    24    79     9    24   399     0      19  return
 15014    24    79    20    24   399     0     111  ByteBufferAsLongBufferRL
 15015    24    79    44    24   399     0      59  (
 15016    24    79    45    24   399     0     111  bb
 15017    24    79    47    24   399     0      66  ,
 15018    24    79    49    24   399     0      77  -
 15019    24    79    50    24   399     0     112  1
 15020    24    79    51    24   399     0      66  ,
 15021    24    79    53    24   399     0     112  0
 15022    24    79    54    24   399     0      66  ,
 15023    24    79    56    24   399     0     111  rem
 15024    24    79    59    24   399     0      66  ,
 15025    24    79    61    24   399     0     111  rem
 15026    24    79    64    24   399     0      66  ,
 15027    24    79    66    24   399     0     111  off
 15028    24    79    69    24   399     0      60  )
 15029    24    79    70    24   399     0     102  ;
 15030    24    80     5    24   399     0      64  }
 15031    24    80     5    24   399     0    1018  ENDMETHOD
 15032    24    80     5    24   400     0    1019  STARTMETHOD
 15033    24    82    12    24   400     0     111  LongBuffer
 15034    24    82    23    24   400     0     111  duplicate
 15035    24    82    32    24   400     0      59  (
 15036    24    82    33    24   400     0      60  )
 15037    24    82    35    24   400     0      63  {
 15038    24    83     9    24   400     0      19  return
 15039    24    83    20    24   400     0     111  ByteBufferAsLongBufferRL
 15040    24    83    44    24   400     0      59  (
 15041    24    83    45    24   400     0     111  bb
 15042    24    83    47    24   400     0      66  ,
 15043    24    84    53    24   400     1     111  this.markValue
 15044    24    84    67    24   400     1      59  (
 15045    24    84    68    24   400     1      60  )
 15046    24    84    69    24   400     1      66  ,
 15047    24    85    53    24   400     1     111  this.position
 15048    24    85    66    24   400     1      59  (
 15049    24    85    67    24   400     1      60  )
 15050    24    85    68    24   400     1      66  ,
 15051    24    86    53    24   400     1     111  this.limit
 15052    24    86    63    24   400     1      59  (
 15053    24    86    64    24   400     1      60  )
 15054    24    86    65    24   400     1      66  ,
 15055    24    87    53    24   400     1     111  this.capacity
 15056    24    87    66    24   400     1      59  (
 15057    24    87    67    24   400     1      60  )
 15058    24    87    68    24   400     1      66  ,
 15059    24    88    53    24   400     0     111  offset
 15060    24    88    59    24   400     0      60  )
 15061    24    88    60    24   400     0     102  ;
 15062    24    89     5    24   400     0      64  }
 15063    24    89     5    24   400     0    1020  ENDMETHOD
 15064    24    89     5    24   401     0    1021  STARTMETHOD
 15065    24    91    12    24   401     0     111  LongBuffer
 15066    24    91    23    24   401     0     111  asReadOnlyBuffer
 15067    24    91    39    24   401     0      59  (
 15068    24    91    40    24   401     0      60  )
 15069    24    91    42    24   401     0      63  {
 15070    24   100     9    24   401     0      19  return
 15071    24   100    16    24   401     0     111  duplicate
 15072    24   100    25    24   401     0      59  (
 15073    24   100    26    24   401     0      60  )
 15074    24   100    27    24   401     0     102  ;
 15075    24   102     5    24   401     0      64  }
 15076    24   102     5    24   401     0    1022  ENDMETHOD
 15077    24   102     5    24   402     0    1023  STARTMETHOD
 15078    24   120    12    24   402     0     111  LongBuffer
 15079    24   120    23    24   402     0     111  put
 15080    24   120    26    24   402     0      59  (
 15081    24   120    27    24   402     0      53  long
 15082    24   120    32    24   402     0     111  x
 15083    24   120    33    24   402     0      60  )
 15084    24   120    35    24   402     0      63  {
 15085    24   125     9    24   402     0      20  throw
 15086    24   125    19    24   402     0     111  ReadOnlyBufferException
 15087    24   125    42    24   402     0      59  (
 15088    24   125    43    24   402     0      60  )
 15089    24   125    44    24   402     0     102  ;
 15090    24   127     5    24   402     0      64  }
 15091    24   127     5    24   402     0    1024  ENDMETHOD
 15092    24   127     5    24   403     0    1025  STARTMETHOD
 15093    24   129    12    24   403     0     111  LongBuffer
 15094    24   129    23    24   403     0     111  put
 15095    24   129    26    24   403     0      59  (
 15096    24   129    27    24   403     0      36  int
 15097    24   129    31    24   403     0     111  i
 15098    24   129    32    24   403     0      66  ,
 15099    24   129    34    24   403     0      53  long
 15100    24   129    39    24   403     0     111  x
 15101    24   129    40    24   403     0      60  )
 15102    24   129    42    24   403     0      63  {
 15103    24   134     9    24   403     0      20  throw
 15104    24   134    19    24   403     1     111  ReadOnlyBufferException
 15105    24   134    42    24   403     1      59  (
 15106    24   134    43    24   403     1      60  )
 15107    24   134    44    24   403     1     102  ;
 15108    24   136     5    24   403     1      64  }
 15109    24   136     5    24   403     0    1026  ENDMETHOD
 15110    24   136     5    24   404     0    1027  STARTMETHOD
 15111    24   138    12    24   404     0     111  LongBuffer
 15112    24   138    23    24   404     0     111  compact
 15113    24   138    30    24   404     0      59  (
 15114    24   138    31    24   404     0      60  )
 15115    24   138    33    24   404     0      63  {
 15116    24   155     9    24   404     0      20  throw
 15117    24   155    19    24   404     1     111  ReadOnlyBufferException
 15118    24   155    42    24   404     1      59  (
 15119    24   155    43    24   404     1      60  )
 15120    24   155    44    24   404     1     102  ;
 15121    24   157     5    24   404     1      64  }
 15122    24   157     5    24   404     0    1028  ENDMETHOD
 15123    24   157     5    24   405     0    1029  STARTMETHOD
 15124    24   159    12    24   405     0      39  boolean
 15125    24   159    20    24   405     0     111  isDirect
 15126    24   159    28    24   405     0      59  (
 15127    24   159    29    24   405     0      60  )
 15128    24   159    31    24   405     0      63  {
 15129    24   160     9    24   405     0      19  return
 15130    24   160    16    24   405     1     111  bb.isDirect
 15131    24   160    27    24   405     1      59  (
 15132    24   160    28    24   405     1      60  )
 15133    24   160    29    24   405     1     102  ;
 15134    24   161     5    24   405     1      64  }
 15135    24   161     5    24   405     0    1030  ENDMETHOD
 15136    24   161     5    24   406     0    1031  STARTMETHOD
 15137    24   163    12    24   406     0      39  boolean
 15138    24   163    20    24   406     0     111  isReadOnly
 15139    24   163    30    24   406     0      59  (
 15140    24   163    31    24   406     0      60  )
 15141    24   163    33    24   406     0      63  {
 15142    24   164     9    24   406     0      19  return
 15143    24   164    16    24   406     0      52  true
 15144    24   164    20    24   406     0     102  ;
 15145    24   165     5    24   406     0      64  }
 15146    24   165     5    24   406     0    1032  ENDMETHOD
 15147    24   165     5    24   407     0    1033  STARTMETHOD
 15148    24   207    12    24   407     0     111  ByteOrder
 15149    24   207    22    24   407     0     111  order
 15150    24   207    27    24   407     0      59  (
 15151    24   207    28    24   407     0      60  )
 15152    24   207    30    24   407     0      63  {
 15153    24   212     9    24   407     0      19  return
 15154    24   212    16    24   407     0     111  ByteOrder.LITTLE_ENDIAN
 15155    24   212    39    24   407     0     102  ;
 15156    24   214     5    24   407     0      64  }
 15157    24   214     5    24   407     0    1034  ENDMETHOD
 15158    24   216     1    24    -1     0      64  }
 15159    24   216     1    24    -1     1    1035  ENDCLASS
 15160    24   216     1    -1    -1     1    1036  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsLongBufferRL.java
 15161    25     1     1    -1    -1     1    1037  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsShortBufferB.java
 15162    25    28     9    -1    -1     0     111  java.nio
 15163    25    28    17    -1    -1     0     102  ;
 15164    25    31     1    25    -1     0    1038  STARTCLASS
 15165    25    31     1    25    -1     0      24  class
 15166    25    31     7    25    -1     0     111  ByteBufferAsShortBufferB
 15167    25    32     5    25    -1     0      38  extends
 15168    25    32    13    25    -1     0     111  ShortBuffer
 15169    25    33     1    25    -1     0      63  {
 15170    25    37     5    25    -1     0      23  protected
 15171    25    37    21    25    -1     0     111  ByteBuffer
 15172    25    37    32    25    -1     0     111  bb
 15173    25    37    34    25    -1     0     102  ;
 15174    25    38     5    25    -1     0      23  protected
 15175    25    38    21    25    -1     0      36  int
 15176    25    38    25    25    -1     0     111  offset
 15177    25    38    31    25    -1     0     102  ;
 15178    25    38    31    25   408     0    1039  STARTMETHOD
 15179    25    42     5    25   408     0     111  ByteBufferAsShortBufferB
 15180    25    42    29    25   408     0      59  (
 15181    25    42    30    25   408     0     111  ByteBuffer
 15182    25    42    41    25   408     0     111  bb
 15183    25    42    43    25   408     0      60  )
 15184    25    42    45    25   408     0      63  {
 15185    25    44     9    25   408     0      27  super
 15186    25    44    14    25   408     0      59  (
 15187    25    44    15    25   408     0      77  -
 15188    25    44    16    25   408     0     112  1
 15189    25    44    17    25   408     0      66  ,
 15190    25    44    19    25   408     0     112  0
 15191    25    44    20    25   408     0      66  ,
 15192    25    45    15    25   408     0     111  bb.remaining
 15193    25    45    27    25   408     0      59  (
 15194    25    45    28    25   408     0      60  )
 15195    25    45    30    25   408     0      84  >>
 15196    25    45    33    25   408     0     112  1
 15197    25    45    34    25   408     0      66  ,
 15198    25    46    15    25   408     0     111  bb.remaining
 15199    25    46    27    25   408     0      59  (
 15200    25    46    28    25   408     0      60  )
 15201    25    46    30    25   408     0      84  >>
 15202    25    46    33    25   408     0     112  1
 15203    25    46    34    25   408     0      60  )
 15204    25    46    35    25   408     0     102  ;
 15205    25    47     9    25   408     0     111  this.bb
 15206    25    47    17    25   408     0      67  =
 15207    25    47    19    25   408     0     111  bb
 15208    25    47    21    25   408     0     102  ;
 15209    25    49     9    25   408     0      36  int
 15210    25    49    13    25   408     0     111  cap
 15211    25    49    17    25   408     0      67  =
 15212    25    49    19    25   408     0     111  this.capacity
 15213    25    49    32    25   408     0      59  (
 15214    25    49    33    25   408     0      60  )
 15215    25    49    34    25   408     0     102  ;
 15216    25    50     9    25   408     0     111  this.limit
 15217    25    50    19    25   408     0      59  (
 15218    25    50    20    25   408     0     111  cap
 15219    25    50    23    25   408     0      60  )
 15220    25    50    24    25   408     0     102  ;
 15221    25    51     9    25   408     0      36  int
 15222    25    51    13    25   408     0     111  pos
 15223    25    51    17    25   408     0      67  =
 15224    25    51    19    25   408     0     111  this.position
 15225    25    51    32    25   408     0      59  (
 15226    25    51    33    25   408     0      60  )
 15227    25    51    34    25   408     0     102  ;
 15228    25    52     9    25   408     0     111  assert
 15229    25    52    16    25   408     0      59  (
 15230    25    52    17    25   408     0     111  pos
 15231    25    52    21    25   408     0      92  <=
 15232    25    52    24    25   408     0     111  cap
 15233    25    52    27    25   408     0      60  )
 15234    25    52    28    25   408     0     102  ;
 15235    25    53     9    25   408     0     111  offset
 15236    25    53    16    25   408     0      67  =
 15237    25    53    18    25   408     0     111  pos
 15238    25    53    21    25   408     0     102  ;
 15239    25    57     5    25   408     0      64  }
 15240    25    57     5    25   408     0    1040  ENDMETHOD
 15241    25    57     5    25   409     0    1041  STARTMETHOD
 15242    25    59     5    25   409     0     111  ByteBufferAsShortBufferB
 15243    25    59    29    25   409     0      59  (
 15244    25    59    30    25   409     0     111  ByteBuffer
 15245    25    59    41    25   409     0     111  bb
 15246    25    59    43    25   409     0      66  ,
 15247    25    60    38    25   409     0      36  int
 15248    25    60    42    25   409     0     111  mark
 15249    25    60    46    25   409     0      66  ,
 15250    25    60    48    25   409     0      36  int
 15251    25    60    52    25   409     0     111  pos
 15252    25    60    55    25   409     0      66  ,
 15253    25    60    57    25   409     0      36  int
 15254    25    60    61    25   409     0     111  lim
 15255    25    60    64    25   409     0      66  ,
 15256    25    60    66    25   409     0      36  int
 15257    25    60    70    25   409     0     111  cap
 15258    25    60    73    25   409     0      66  ,
 15259    25    61    38    25   409     0      36  int
 15260    25    61    42    25   409     0     111  off
 15261    25    61    45    25   409     0      60  )
 15262    25    62     5    25   409     0      63  {
 15263    25    64     9    25   409     0      27  super
 15264    25    64    14    25   409     0      59  (
 15265    25    64    15    25   409     0     111  mark
 15266    25    64    19    25   409     0      66  ,
 15267    25    64    21    25   409     0     111  pos
 15268    25    64    24    25   409     0      66  ,
 15269    25    64    26    25   409     0     111  lim
 15270    25    64    29    25   409     0      66  ,
 15271    25    64    31    25   409     0     111  cap
 15272    25    64    34    25   409     0      60  )
 15273    25    64    35    25   409     0     102  ;
 15274    25    65     9    25   409     1     111  this.bb
 15275    25    65    17    25   409     1      67  =
 15276    25    65    19    25   409     1     111  bb
 15277    25    65    21    25   409     1     102  ;
 15278    25    66     9    25   409     1     111  offset
 15279    25    66    16    25   409     1      67  =
 15280    25    66    18    25   409     1     111  off
 15281    25    66    21    25   409     1     102  ;
 15282    25    70     5    25   409     0      64  }
 15283    25    70     5    25   409     0    1042  ENDMETHOD
 15284    25    70     5    25   410     0    1043  STARTMETHOD
 15285    25    72    12    25   410     0     111  ShortBuffer
 15286    25    72    24    25   410     0     111  slice
 15287    25    72    29    25   410     0      59  (
 15288    25    72    30    25   410     0      60  )
 15289    25    72    32    25   410     0      63  {
 15290    25    73     9    25   410     1      36  int
 15291    25    73    13    25   410     1     111  pos
 15292    25    73    17    25   410     1      67  =
 15293    25    73    19    25   410     1     111  this.position
 15294    25    73    32    25   410     1      59  (
 15295    25    73    33    25   410     1      60  )
 15296    25    73    34    25   410     1     102  ;
 15297    25    74     9    25   410     1      36  int
 15298    25    74    13    25   410     1     111  lim
 15299    25    74    17    25   410     1      67  =
 15300    25    74    19    25   410     1     111  this.limit
 15301    25    74    29    25   410     1      59  (
 15302    25    74    30    25   410     1      60  )
 15303    25    74    31    25   410     1     102  ;
 15304    25    75     9    25   410     0     111  assert
 15305    25    75    16    25   410     0      59  (
 15306    25    75    17    25   410     0     111  pos
 15307    25    75    21    25   410     0      92  <=
 15308    25    75    24    25   410     0     111  lim
 15309    25    75    27    25   410     0      60  )
 15310    25    75    28    25   410     0     102  ;
 15311    25    76     9    25   410     0      36  int
 15312    25    76    13    25   410     0     111  rem
 15313    25    76    17    25   410     0      67  =
 15314    25    76    19    25   410     0      59  (
 15315    25    76    20    25   410     0     111  pos
 15316    25    76    24    25   410     0      92  <=
 15317    25    76    27    25   410     0     111  lim
 15318    25    76    31    25   410     0      58  ?
 15319    25    76    33    25   410     0     111  lim
 15320    25    76    37    25   410     0      77  -
 15321    25    76    39    25   410     0     111  pos
 15322    25    76    43    25   410     0      65  :
 15323    25    76    45    25   410     0     112  0
 15324    25    76    46    25   410     0      60  )
 15325    25    76    47    25   410     0     102  ;
 15326    25    77     9    25   410     0      36  int
 15327    25    77    13    25   410     0     111  off
 15328    25    77    17    25   410     0      67  =
 15329    25    77    19    25   410     0      59  (
 15330    25    77    20    25   410     0     111  pos
 15331    25    77    24    25   410     0      90  <<
 15332    25    77    27    25   410     0     112  1
 15333    25    77    28    25   410     0      60  )
 15334    25    77    30    25   410     0      74  +
 15335    25    77    32    25   410     0     111  offset
 15336    25    77    38    25   410     0     102  ;
 15337    25    78     9    25   410     0     111  assert
 15338    25    78    16    25   410     0      59  (
 15339    25    78    17    25   410     0     111  off
 15340    25    78    21    25   410     0      88  >=
 15341    25    78    24    25   410     0     112  0
 15342    25    78    25    25   410     0      60  )
 15343    25    78    26    25   410     0     102  ;
 15344    25    79     9    25   410     0      19  return
 15345    25    79    20    25   410     0     111  ByteBufferAsShortBufferB
 15346    25    79    44    25   410     0      59  (
 15347    25    79    45    25   410     0     111  bb
 15348    25    79    47    25   410     0      66  ,
 15349    25    79    49    25   410     0      77  -
 15350    25    79    50    25   410     0     112  1
 15351    25    79    51    25   410     0      66  ,
 15352    25    79    53    25   410     0     112  0
 15353    25    79    54    25   410     0      66  ,
 15354    25    79    56    25   410     0     111  rem
 15355    25    79    59    25   410     0      66  ,
 15356    25    79    61    25   410     0     111  rem
 15357    25    79    64    25   410     0      66  ,
 15358    25    79    66    25   410     0     111  off
 15359    25    79    69    25   410     0      60  )
 15360    25    79    70    25   410     0     102  ;
 15361    25    80     5    25   410     0      64  }
 15362    25    80     5    25   410     0    1044  ENDMETHOD
 15363    25    80     5    25   411     0    1045  STARTMETHOD
 15364    25    82    12    25   411     0     111  ShortBuffer
 15365    25    82    24    25   411     0     111  duplicate
 15366    25    82    33    25   411     0      59  (
 15367    25    82    34    25   411     0      60  )
 15368    25    82    36    25   411     0      63  {
 15369    25    83     9    25   411     0      19  return
 15370    25    83    20    25   411     0     111  ByteBufferAsShortBufferB
 15371    25    83    44    25   411     0      59  (
 15372    25    83    45    25   411     0     111  bb
 15373    25    83    47    25   411     0      66  ,
 15374    25    84    53    25   411     1     111  this.markValue
 15375    25    84    67    25   411     1      59  (
 15376    25    84    68    25   411     1      60  )
 15377    25    84    69    25   411     1      66  ,
 15378    25    85    53    25   411     1     111  this.position
 15379    25    85    66    25   411     1      59  (
 15380    25    85    67    25   411     1      60  )
 15381    25    85    68    25   411     1      66  ,
 15382    25    86    53    25   411     1     111  this.limit
 15383    25    86    63    25   411     1      59  (
 15384    25    86    64    25   411     1      60  )
 15385    25    86    65    25   411     1      66  ,
 15386    25    87    53    25   411     1     111  this.capacity
 15387    25    87    66    25   411     1      59  (
 15388    25    87    67    25   411     1      60  )
 15389    25    87    68    25   411     1      66  ,
 15390    25    88    53    25   411     0     111  offset
 15391    25    88    59    25   411     0      60  )
 15392    25    88    60    25   411     0     102  ;
 15393    25    89     5    25   411     0      64  }
 15394    25    89     5    25   411     0    1046  ENDMETHOD
 15395    25    89     5    25   412     0    1047  STARTMETHOD
 15396    25    91    12    25   412     0     111  ShortBuffer
 15397    25    91    24    25   412     0     111  asReadOnlyBuffer
 15398    25    91    40    25   412     0      59  (
 15399    25    91    41    25   412     0      60  )
 15400    25    91    43    25   412     0      63  {
 15401    25    93     9    25   412     0      19  return
 15402    25    93    20    25   412     0     111  ByteBufferAsShortBufferRB
 15403    25    93    45    25   412     0      59  (
 15404    25    93    46    25   412     0     111  bb
 15405    25    93    48    25   412     0      66  ,
 15406    25    94    50    25   412     1     111  this.markValue
 15407    25    94    64    25   412     1      59  (
 15408    25    94    65    25   412     1      60  )
 15409    25    94    66    25   412     1      66  ,
 15410    25    95    50    25   412     1     111  this.position
 15411    25    95    63    25   412     1      59  (
 15412    25    95    64    25   412     1      60  )
 15413    25    95    65    25   412     1      66  ,
 15414    25    96    50    25   412     1     111  this.limit
 15415    25    96    60    25   412     1      59  (
 15416    25    96    61    25   412     1      60  )
 15417    25    96    62    25   412     1      66  ,
 15418    25    97    50    25   412     1     111  this.capacity
 15419    25    97    63    25   412     1      59  (
 15420    25    97    64    25   412     1      60  )
 15421    25    97    65    25   412     1      66  ,
 15422    25    98    50    25   412     0     111  offset
 15423    25    98    56    25   412     0      60  )
 15424    25    98    57    25   412     1     102  ;
 15425    25   102     5    25   412     1      64  }
 15426    25   102     5    25   412     0    1048  ENDMETHOD
 15427    25   102     5    25   413     0    1049  STARTMETHOD
 15428    25   106     5    25   413     0      23  protected
 15429    25   106    15    25   413     0      36  int
 15430    25   106    19    25   413     0     111  ix
 15431    25   106    21    25   413     0      59  (
 15432    25   106    22    25   413     0      36  int
 15433    25   106    26    25   413     0     111  i
 15434    25   106    27    25   413     0      60  )
 15435    25   106    29    25   413     0      63  {
 15436    25   107     9    25   413     0      19  return
 15437    25   107    16    25   413     0      59  (
 15438    25   107    17    25   413     0     111  i
 15439    25   107    19    25   413     0      90  <<
 15440    25   107    22    25   413     0     112  1
 15441    25   107    23    25   413     0      60  )
 15442    25   107    25    25   413     0      74  +
 15443    25   107    27    25   413     0     111  offset
 15444    25   107    33    25   413     1     102  ;
 15445    25   108     5    25   413     1      64  }
 15446    25   108     5    25   413     0    1050  ENDMETHOD
 15447    25   108     5    25   414     0    1051  STARTMETHOD
 15448    25   110    18    25   414     0     111  get
 15449    25   110    21    25   414     0      59  (
 15450    25   110    22    25   414     0      60  )
 15451    25   110    24    25   414     0      63  {
 15452    25   111     9    25   414     0      19  return
 15453    25   111    16    25   414     0     111  Bits.getShortB
 15454    25   111    30    25   414     0      59  (
 15455    25   111    31    25   414     0     111  bb
 15456    25   111    33    25   414     0      66  ,
 15457    25   111    35    25   414     0     111  ix
 15458    25   111    37    25   414     0      59  (
 15459    25   111    38    25   414     0     111  nextGetIndex
 15460    25   111    50    25   414     0      59  (
 15461    25   111    51    25   414     0      60  )
 15462    25   111    52    25   414     0      60  )
 15463    25   111    53    25   414     0      60  )
 15464    25   111    54    25   414     1     102  ;
 15465    25   112     5    25   414     1      64  }
 15466    25   112     5    25   414     0    1052  ENDMETHOD
 15467    25   112     5    25   415     0    1053  STARTMETHOD
 15468    25   114    18    25   415     0     111  get
 15469    25   114    21    25   415     0      59  (
 15470    25   114    22    25   415     0      36  int
 15471    25   114    26    25   415     0     111  i
 15472    25   114    27    25   415     0      60  )
 15473    25   114    29    25   415     0      63  {
 15474    25   115     9    25   415     0      19  return
 15475    25   115    16    25   415     0     111  Bits.getShortB
 15476    25   115    30    25   415     0      59  (
 15477    25   115    31    25   415     0     111  bb
 15478    25   115    33    25   415     0      66  ,
 15479    25   115    35    25   415     0     111  ix
 15480    25   115    37    25   415     0      59  (
 15481    25   115    38    25   415     0     111  checkIndex
 15482    25   115    48    25   415     0      59  (
 15483    25   115    49    25   415     0     111  i
 15484    25   115    50    25   415     0      60  )
 15485    25   115    51    25   415     0      60  )
 15486    25   115    52    25   415     0      60  )
 15487    25   115    53    25   415     0     102  ;
 15488    25   116     5    25   415     0      64  }
 15489    25   116     5    25   415     0    1054  ENDMETHOD
 15490    25   116     5    25   416     0    1055  STARTMETHOD
 15491    25   120    12    25   416     0     111  ShortBuffer
 15492    25   120    24    25   416     0     111  put
 15493    25   120    27    25   416     0      59  (
 15494    25   120    34    25   416     0     111  x
 15495    25   120    35    25   416     0      60  )
 15496    25   120    37    25   416     0      63  {
 15497    25   122     9    25   416     0     111  Bits.putShortB
 15498    25   122    23    25   416     0      59  (
 15499    25   122    24    25   416     0     111  bb
 15500    25   122    26    25   416     0      66  ,
 15501    25   122    28    25   416     0     111  ix
 15502    25   122    30    25   416     0      59  (
 15503    25   122    31    25   416     0     111  nextPutIndex
 15504    25   122    43    25   416     0      59  (
 15505    25   122    44    25   416     0      60  )
 15506    25   122    45    25   416     0      60  )
 15507    25   122    46    25   416     0      66  ,
 15508    25   122    48    25   416     0     111  x
 15509    25   122    49    25   416     0      60  )
 15510    25   122    50    25   416     0     102  ;
 15511    25   123     9    25   416     0      19  return
 15512    25   123    16    25   416     0      44  this
 15513    25   123    20    25   416     0     102  ;
 15514    25   127     5    25   416     0      64  }
 15515    25   127     5    25   416     0    1056  ENDMETHOD
 15516    25   127     5    25   417     0    1057  STARTMETHOD
 15517    25   129    12    25   417     0     111  ShortBuffer
 15518    25   129    24    25   417     0     111  put
 15519    25   129    27    25   417     0      59  (
 15520    25   129    28    25   417     0      36  int
 15521    25   129    32    25   417     0     111  i
 15522    25   129    33    25   417     0      66  ,
 15523    25   129    41    25   417     0     111  x
 15524    25   129    42    25   417     0      60  )
 15525    25   129    44    25   417     0      63  {
 15526    25   131     9    25   417     0     111  Bits.putShortB
 15527    25   131    23    25   417     0      59  (
 15528    25   131    24    25   417     0     111  bb
 15529    25   131    26    25   417     0      66  ,
 15530    25   131    28    25   417     0     111  ix
 15531    25   131    30    25   417     0      59  (
 15532    25   131    31    25   417     0     111  checkIndex
 15533    25   131    41    25   417     0      59  (
 15534    25   131    42    25   417     0     111  i
 15535    25   131    43    25   417     0      60  )
 15536    25   131    44    25   417     0      60  )
 15537    25   131    45    25   417     0      66  ,
 15538    25   131    47    25   417     0     111  x
 15539    25   131    48    25   417     0      60  )
 15540    25   131    49    25   417     0     102  ;
 15541    25   132     9    25   417     0      19  return
 15542    25   132    16    25   417     0      44  this
 15543    25   132    20    25   417     0     102  ;
 15544    25   136     5    25   417     0      64  }
 15545    25   136     5    25   417     0    1058  ENDMETHOD
 15546    25   136     5    25   418     0    1059  STARTMETHOD
 15547    25   138    12    25   418     0     111  ShortBuffer
 15548    25   138    24    25   418     0     111  compact
 15549    25   138    31    25   418     0      59  (
 15550    25   138    32    25   418     0      60  )
 15551    25   138    34    25   418     0      63  {
 15552    25   140     9    25   418     1      36  int
 15553    25   140    13    25   418     1     111  pos
 15554    25   140    17    25   418     1      67  =
 15555    25   140    19    25   418     1     111  position
 15556    25   140    27    25   418     1      59  (
 15557    25   140    28    25   418     1      60  )
 15558    25   140    29    25   418     1     102  ;
 15559    25   141     9    25   418     1      36  int
 15560    25   141    13    25   418     1     111  lim
 15561    25   141    17    25   418     1      67  =
 15562    25   141    19    25   418     1     111  limit
 15563    25   141    24    25   418     1      59  (
 15564    25   141    25    25   418     1      60  )
 15565    25   141    26    25   418     1     102  ;
 15566    25   142     9    25   418     0     111  assert
 15567    25   142    16    25   418     0      59  (
 15568    25   142    17    25   418     0     111  pos
 15569    25   142    21    25   418     0      92  <=
 15570    25   142    24    25   418     0     111  lim
 15571    25   142    27    25   418     0      60  )
 15572    25   142    28    25   418     0     102  ;
 15573    25   143     9    25   418     0      36  int
 15574    25   143    13    25   418     0     111  rem
 15575    25   143    17    25   418     0      67  =
 15576    25   143    19    25   418     0      59  (
 15577    25   143    20    25   418     0     111  pos
 15578    25   143    24    25   418     0      92  <=
 15579    25   143    27    25   418     0     111  lim
 15580    25   143    31    25   418     0      58  ?
 15581    25   143    33    25   418     0     111  lim
 15582    25   143    37    25   418     0      77  -
 15583    25   143    39    25   418     0     111  pos
 15584    25   143    43    25   418     0      65  :
 15585    25   143    45    25   418     0     112  0
 15586    25   143    46    25   418     0      60  )
 15587    25   143    47    25   418     0     102  ;
 15588    25   145     9    25   418     0     111  ByteBuffer
 15589    25   145    20    25   418     0     111  db
 15590    25   145    23    25   418     0      67  =
 15591    25   145    25    25   418     0     111  bb.duplicate
 15592    25   145    37    25   418     0      59  (
 15593    25   145    38    25   418     0      60  )
 15594    25   145    39    25   418     0     102  ;
 15595    25   146     9    25   418     0     111  db.limit
 15596    25   146    17    25   418     0      59  (
 15597    25   146    18    25   418     0     111  ix
 15598    25   146    20    25   418     0      59  (
 15599    25   146    21    25   418     0     111  lim
 15600    25   146    24    25   418     0      60  )
 15601    25   146    25    25   418     0      60  )
 15602    25   146    26    25   418     0     102  ;
 15603    25   147     9    25   418     0     111  db.position
 15604    25   147    20    25   418     0      59  (
 15605    25   147    21    25   418     0     111  ix
 15606    25   147    23    25   418     0      59  (
 15607    25   147    24    25   418     0     112  0
 15608    25   147    25    25   418     0      60  )
 15609    25   147    26    25   418     0      60  )
 15610    25   147    27    25   418     0     102  ;
 15611    25   148     9    25   418     0     111  ByteBuffer
 15612    25   148    20    25   418     0     111  sb
 15613    25   148    23    25   418     0      67  =
 15614    25   148    25    25   418     0     111  db.slice
 15615    25   148    33    25   418     0      59  (
 15616    25   148    34    25   418     0      60  )
 15617    25   148    35    25   418     0     102  ;
 15618    25   149     9    25   418     0     111  sb.position
 15619    25   149    20    25   418     0      59  (
 15620    25   149    21    25   418     0     111  pos
 15621    25   149    25    25   418     0      90  <<
 15622    25   149    28    25   418     0     112  1
 15623    25   149    29    25   418     0      60  )
 15624    25   149    30    25   418     0     102  ;
 15625    25   150     9    25   418     0     111  sb.compact
 15626    25   150    19    25   418     0      59  (
 15627    25   150    20    25   418     0      60  )
 15628    25   150    21    25   418     0     102  ;
 15629    25   151     9    25   418     0     111  position
 15630    25   151    17    25   418     0      59  (
 15631    25   151    18    25   418     0     111  rem
 15632    25   151    21    25   418     0      60  )
 15633    25   151    22    25   418     0     102  ;
 15634    25   152     9    25   418     0     111  limit
 15635    25   152    14    25   418     0      59  (
 15636    25   152    15    25   418     0     111  capacity
 15637    25   152    23    25   418     0      59  (
 15638    25   152    24    25   418     0      60  )
 15639    25   152    25    25   418     0      60  )
 15640    25   152    26    25   418     0     102  ;
 15641    25   153     9    25   418     0      19  return
 15642    25   153    16    25   418     0      44  this
 15643    25   153    20    25   418     0     102  ;
 15644    25   157     5    25   418     0      64  }
 15645    25   157     5    25   418     0    1060  ENDMETHOD
 15646    25   157     5    25   419     0    1061  STARTMETHOD
 15647    25   159    12    25   419     0      39  boolean
 15648    25   159    20    25   419     0     111  isDirect
 15649    25   159    28    25   419     0      59  (
 15650    25   159    29    25   419     0      60  )
 15651    25   159    31    25   419     0      63  {
 15652    25   160     9    25   419     0      19  return
 15653    25   160    16    25   419     0     111  bb.isDirect
 15654    25   160    27    25   419     0      59  (
 15655    25   160    28    25   419     0      60  )
 15656    25   160    29    25   419     1     102  ;
 15657    25   161     5    25   419     1      64  }
 15658    25   161     5    25   419     0    1062  ENDMETHOD
 15659    25   161     5    25   420     0    1063  STARTMETHOD
 15660    25   163    12    25   420     0      39  boolean
 15661    25   163    20    25   420     0     111  isReadOnly
 15662    25   163    30    25   420     0      59  (
 15663    25   163    31    25   420     0      60  )
 15664    25   163    33    25   420     0      63  {
 15665    25   164     9    25   420     0      19  return
 15666    25   164    16    25   420     0      43  false
 15667    25   164    21    25   420     1     102  ;
 15668    25   165     5    25   420     1      64  }
 15669    25   165     5    25   420     0    1064  ENDMETHOD
 15670    25   165     5    25   421     0    1065  STARTMETHOD
 15671    25   207    12    25   421     0     111  ByteOrder
 15672    25   207    22    25   421     0     111  order
 15673    25   207    27    25   421     0      59  (
 15674    25   207    28    25   421     0      60  )
 15675    25   207    30    25   421     0      63  {
 15676    25   209     9    25   421     0      19  return
 15677    25   209    16    25   421     0     111  ByteOrder.BIG_ENDIAN
 15678    25   209    36    25   421     1     102  ;
 15679    25   214     5    25   421     1      64  }
 15680    25   214     5    25   421     0    1066  ENDMETHOD
 15681    25   216     1    25    -1     0      64  }
 15682    25   216     1    25    -1     1    1067  ENDCLASS
 15683    25   216     1    -1    -1     1    1068  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsShortBufferB.java
 15684    26     1     1    -1    -1     1    1069  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsShortBufferL.java
 15685    26    28     9    -1    -1     0     111  java.nio
 15686    26    28    17    -1    -1     0     102  ;
 15687    26    31     1    26    -1     0    1070  STARTCLASS
 15688    26    31     1    26    -1     0      24  class
 15689    26    31     7    26    -1     0     111  ByteBufferAsShortBufferL
 15690    26    32     5    26    -1     0      38  extends
 15691    26    32    13    26    -1     0     111  ShortBuffer
 15692    26    33     1    26    -1     0      63  {
 15693    26    37     5    26    -1     0      23  protected
 15694    26    37    21    26    -1     0     111  ByteBuffer
 15695    26    37    32    26    -1     0     111  bb
 15696    26    37    34    26    -1     0     102  ;
 15697    26    38     5    26    -1     0      23  protected
 15698    26    38    21    26    -1     0      36  int
 15699    26    38    25    26    -1     0     111  offset
 15700    26    38    31    26    -1     0     102  ;
 15701    26    38    31    26   422     0    1071  STARTMETHOD
 15702    26    42     5    26   422     0     111  ByteBufferAsShortBufferL
 15703    26    42    29    26   422     0      59  (
 15704    26    42    30    26   422     0     111  ByteBuffer
 15705    26    42    41    26   422     0     111  bb
 15706    26    42    43    26   422     0      60  )
 15707    26    42    45    26   422     0      63  {
 15708    26    44     9    26   422     0      27  super
 15709    26    44    14    26   422     0      59  (
 15710    26    44    15    26   422     0      77  -
 15711    26    44    16    26   422     0     112  1
 15712    26    44    17    26   422     0      66  ,
 15713    26    44    19    26   422     0     112  0
 15714    26    44    20    26   422     0      66  ,
 15715    26    45    15    26   422     0     111  bb.remaining
 15716    26    45    27    26   422     0      59  (
 15717    26    45    28    26   422     0      60  )
 15718    26    45    30    26   422     0      84  >>
 15719    26    45    33    26   422     0     112  1
 15720    26    45    34    26   422     0      66  ,
 15721    26    46    15    26   422     0     111  bb.remaining
 15722    26    46    27    26   422     0      59  (
 15723    26    46    28    26   422     0      60  )
 15724    26    46    30    26   422     0      84  >>
 15725    26    46    33    26   422     0     112  1
 15726    26    46    34    26   422     0      60  )
 15727    26    46    35    26   422     0     102  ;
 15728    26    47     9    26   422     0     111  this.bb
 15729    26    47    17    26   422     0      67  =
 15730    26    47    19    26   422     0     111  bb
 15731    26    47    21    26   422     0     102  ;
 15732    26    49     9    26   422     0      36  int
 15733    26    49    13    26   422     0     111  cap
 15734    26    49    17    26   422     0      67  =
 15735    26    49    19    26   422     0     111  this.capacity
 15736    26    49    32    26   422     0      59  (
 15737    26    49    33    26   422     0      60  )
 15738    26    49    34    26   422     0     102  ;
 15739    26    50     9    26   422     0     111  this.limit
 15740    26    50    19    26   422     0      59  (
 15741    26    50    20    26   422     0     111  cap
 15742    26    50    23    26   422     0      60  )
 15743    26    50    24    26   422     0     102  ;
 15744    26    51     9    26   422     0      36  int
 15745    26    51    13    26   422     0     111  pos
 15746    26    51    17    26   422     0      67  =
 15747    26    51    19    26   422     0     111  this.position
 15748    26    51    32    26   422     0      59  (
 15749    26    51    33    26   422     0      60  )
 15750    26    51    34    26   422     0     102  ;
 15751    26    52     9    26   422     0     111  assert
 15752    26    52    16    26   422     0      59  (
 15753    26    52    17    26   422     0     111  pos
 15754    26    52    21    26   422     0      92  <=
 15755    26    52    24    26   422     0     111  cap
 15756    26    52    27    26   422     0      60  )
 15757    26    52    28    26   422     0     102  ;
 15758    26    53     9    26   422     0     111  offset
 15759    26    53    16    26   422     0      67  =
 15760    26    53    18    26   422     0     111  pos
 15761    26    53    21    26   422     0     102  ;
 15762    26    57     5    26   422     0      64  }
 15763    26    57     5    26   422     0    1072  ENDMETHOD
 15764    26    57     5    26   423     0    1073  STARTMETHOD
 15765    26    59     5    26   423     0     111  ByteBufferAsShortBufferL
 15766    26    59    29    26   423     0      59  (
 15767    26    59    30    26   423     0     111  ByteBuffer
 15768    26    59    41    26   423     0     111  bb
 15769    26    59    43    26   423     0      66  ,
 15770    26    60    38    26   423     0      36  int
 15771    26    60    42    26   423     0     111  mark
 15772    26    60    46    26   423     0      66  ,
 15773    26    60    48    26   423     0      36  int
 15774    26    60    52    26   423     0     111  pos
 15775    26    60    55    26   423     0      66  ,
 15776    26    60    57    26   423     0      36  int
 15777    26    60    61    26   423     0     111  lim
 15778    26    60    64    26   423     0      66  ,
 15779    26    60    66    26   423     0      36  int
 15780    26    60    70    26   423     0     111  cap
 15781    26    60    73    26   423     0      66  ,
 15782    26    61    38    26   423     0      36  int
 15783    26    61    42    26   423     0     111  off
 15784    26    61    45    26   423     0      60  )
 15785    26    62     5    26   423     0      63  {
 15786    26    64     9    26   423     0      27  super
 15787    26    64    14    26   423     0      59  (
 15788    26    64    15    26   423     0     111  mark
 15789    26    64    19    26   423     0      66  ,
 15790    26    64    21    26   423     0     111  pos
 15791    26    64    24    26   423     0      66  ,
 15792    26    64    26    26   423     0     111  lim
 15793    26    64    29    26   423     0      66  ,
 15794    26    64    31    26   423     0     111  cap
 15795    26    64    34    26   423     0      60  )
 15796    26    64    35    26   423     0     102  ;
 15797    26    65     9    26   423     1     111  this.bb
 15798    26    65    17    26   423     1      67  =
 15799    26    65    19    26   423     1     111  bb
 15800    26    65    21    26   423     1     102  ;
 15801    26    66     9    26   423     1     111  offset
 15802    26    66    16    26   423     1      67  =
 15803    26    66    18    26   423     1     111  off
 15804    26    66    21    26   423     1     102  ;
 15805    26    70     5    26   423     0      64  }
 15806    26    70     5    26   423     0    1074  ENDMETHOD
 15807    26    70     5    26   424     0    1075  STARTMETHOD
 15808    26    72    12    26   424     0     111  ShortBuffer
 15809    26    72    24    26   424     0     111  slice
 15810    26    72    29    26   424     0      59  (
 15811    26    72    30    26   424     0      60  )
 15812    26    72    32    26   424     0      63  {
 15813    26    73     9    26   424     1      36  int
 15814    26    73    13    26   424     1     111  pos
 15815    26    73    17    26   424     1      67  =
 15816    26    73    19    26   424     1     111  this.position
 15817    26    73    32    26   424     1      59  (
 15818    26    73    33    26   424     1      60  )
 15819    26    73    34    26   424     1     102  ;
 15820    26    74     9    26   424     1      36  int
 15821    26    74    13    26   424     1     111  lim
 15822    26    74    17    26   424     1      67  =
 15823    26    74    19    26   424     1     111  this.limit
 15824    26    74    29    26   424     1      59  (
 15825    26    74    30    26   424     1      60  )
 15826    26    74    31    26   424     1     102  ;
 15827    26    75     9    26   424     0     111  assert
 15828    26    75    16    26   424     0      59  (
 15829    26    75    17    26   424     0     111  pos
 15830    26    75    21    26   424     0      92  <=
 15831    26    75    24    26   424     0     111  lim
 15832    26    75    27    26   424     0      60  )
 15833    26    75    28    26   424     0     102  ;
 15834    26    76     9    26   424     0      36  int
 15835    26    76    13    26   424     0     111  rem
 15836    26    76    17    26   424     0      67  =
 15837    26    76    19    26   424     0      59  (
 15838    26    76    20    26   424     0     111  pos
 15839    26    76    24    26   424     0      92  <=
 15840    26    76    27    26   424     0     111  lim
 15841    26    76    31    26   424     0      58  ?
 15842    26    76    33    26   424     0     111  lim
 15843    26    76    37    26   424     0      77  -
 15844    26    76    39    26   424     0     111  pos
 15845    26    76    43    26   424     0      65  :
 15846    26    76    45    26   424     0     112  0
 15847    26    76    46    26   424     0      60  )
 15848    26    76    47    26   424     0     102  ;
 15849    26    77     9    26   424     0      36  int
 15850    26    77    13    26   424     0     111  off
 15851    26    77    17    26   424     0      67  =
 15852    26    77    19    26   424     0      59  (
 15853    26    77    20    26   424     0     111  pos
 15854    26    77    24    26   424     0      90  <<
 15855    26    77    27    26   424     0     112  1
 15856    26    77    28    26   424     0      60  )
 15857    26    77    30    26   424     0      74  +
 15858    26    77    32    26   424     0     111  offset
 15859    26    77    38    26   424     0     102  ;
 15860    26    78     9    26   424     0     111  assert
 15861    26    78    16    26   424     0      59  (
 15862    26    78    17    26   424     0     111  off
 15863    26    78    21    26   424     0      88  >=
 15864    26    78    24    26   424     0     112  0
 15865    26    78    25    26   424     0      60  )
 15866    26    78    26    26   424     0     102  ;
 15867    26    79     9    26   424     0      19  return
 15868    26    79    20    26   424     0     111  ByteBufferAsShortBufferL
 15869    26    79    44    26   424     0      59  (
 15870    26    79    45    26   424     0     111  bb
 15871    26    79    47    26   424     0      66  ,
 15872    26    79    49    26   424     0      77  -
 15873    26    79    50    26   424     0     112  1
 15874    26    79    51    26   424     0      66  ,
 15875    26    79    53    26   424     0     112  0
 15876    26    79    54    26   424     0      66  ,
 15877    26    79    56    26   424     0     111  rem
 15878    26    79    59    26   424     0      66  ,
 15879    26    79    61    26   424     0     111  rem
 15880    26    79    64    26   424     0      66  ,
 15881    26    79    66    26   424     0     111  off
 15882    26    79    69    26   424     0      60  )
 15883    26    79    70    26   424     0     102  ;
 15884    26    80     5    26   424     0      64  }
 15885    26    80     5    26   424     0    1076  ENDMETHOD
 15886    26    80     5    26   425     0    1077  STARTMETHOD
 15887    26    82    12    26   425     0     111  ShortBuffer
 15888    26    82    24    26   425     0     111  duplicate
 15889    26    82    33    26   425     0      59  (
 15890    26    82    34    26   425     0      60  )
 15891    26    82    36    26   425     0      63  {
 15892    26    83     9    26   425     0      19  return
 15893    26    83    20    26   425     0     111  ByteBufferAsShortBufferL
 15894    26    83    44    26   425     0      59  (
 15895    26    83    45    26   425     0     111  bb
 15896    26    83    47    26   425     0      66  ,
 15897    26    84    53    26   425     1     111  this.markValue
 15898    26    84    67    26   425     1      59  (
 15899    26    84    68    26   425     1      60  )
 15900    26    84    69    26   425     1      66  ,
 15901    26    85    53    26   425     1     111  this.position
 15902    26    85    66    26   425     1      59  (
 15903    26    85    67    26   425     1      60  )
 15904    26    85    68    26   425     1      66  ,
 15905    26    86    53    26   425     1     111  this.limit
 15906    26    86    63    26   425     1      59  (
 15907    26    86    64    26   425     1      60  )
 15908    26    86    65    26   425     1      66  ,
 15909    26    87    53    26   425     1     111  this.capacity
 15910    26    87    66    26   425     1      59  (
 15911    26    87    67    26   425     1      60  )
 15912    26    87    68    26   425     1      66  ,
 15913    26    88    53    26   425     0     111  offset
 15914    26    88    59    26   425     0      60  )
 15915    26    88    60    26   425     0     102  ;
 15916    26    89     5    26   425     0      64  }
 15917    26    89     5    26   425     0    1078  ENDMETHOD
 15918    26    89     5    26   426     0    1079  STARTMETHOD
 15919    26    91    12    26   426     0     111  ShortBuffer
 15920    26    91    24    26   426     0     111  asReadOnlyBuffer
 15921    26    91    40    26   426     0      59  (
 15922    26    91    41    26   426     0      60  )
 15923    26    91    43    26   426     0      63  {
 15924    26    93     9    26   426     0      19  return
 15925    26    93    20    26   426     0     111  ByteBufferAsShortBufferRL
 15926    26    93    45    26   426     0      59  (
 15927    26    93    46    26   426     0     111  bb
 15928    26    93    48    26   426     0      66  ,
 15929    26    94    50    26   426     1     111  this.markValue
 15930    26    94    64    26   426     1      59  (
 15931    26    94    65    26   426     1      60  )
 15932    26    94    66    26   426     1      66  ,
 15933    26    95    50    26   426     1     111  this.position
 15934    26    95    63    26   426     1      59  (
 15935    26    95    64    26   426     1      60  )
 15936    26    95    65    26   426     1      66  ,
 15937    26    96    50    26   426     1     111  this.limit
 15938    26    96    60    26   426     1      59  (
 15939    26    96    61    26   426     1      60  )
 15940    26    96    62    26   426     1      66  ,
 15941    26    97    50    26   426     1     111  this.capacity
 15942    26    97    63    26   426     1      59  (
 15943    26    97    64    26   426     1      60  )
 15944    26    97    65    26   426     1      66  ,
 15945    26    98    50    26   426     0     111  offset
 15946    26    98    56    26   426     0      60  )
 15947    26    98    57    26   426     1     102  ;
 15948    26   102     5    26   426     1      64  }
 15949    26   102     5    26   426     0    1080  ENDMETHOD
 15950    26   102     5    26   427     0    1081  STARTMETHOD
 15951    26   106     5    26   427     0      23  protected
 15952    26   106    15    26   427     0      36  int
 15953    26   106    19    26   427     0     111  ix
 15954    26   106    21    26   427     0      59  (
 15955    26   106    22    26   427     0      36  int
 15956    26   106    26    26   427     0     111  i
 15957    26   106    27    26   427     0      60  )
 15958    26   106    29    26   427     0      63  {
 15959    26   107     9    26   427     0      19  return
 15960    26   107    16    26   427     0      59  (
 15961    26   107    17    26   427     0     111  i
 15962    26   107    19    26   427     0      90  <<
 15963    26   107    22    26   427     0     112  1
 15964    26   107    23    26   427     0      60  )
 15965    26   107    25    26   427     0      74  +
 15966    26   107    27    26   427     0     111  offset
 15967    26   107    33    26   427     1     102  ;
 15968    26   108     5    26   427     1      64  }
 15969    26   108     5    26   427     0    1082  ENDMETHOD
 15970    26   108     5    26   428     0    1083  STARTMETHOD
 15971    26   110    18    26   428     0     111  get
 15972    26   110    21    26   428     0      59  (
 15973    26   110    22    26   428     0      60  )
 15974    26   110    24    26   428     0      63  {
 15975    26   111     9    26   428     0      19  return
 15976    26   111    16    26   428     0     111  Bits.getShortL
 15977    26   111    30    26   428     0      59  (
 15978    26   111    31    26   428     0     111  bb
 15979    26   111    33    26   428     0      66  ,
 15980    26   111    35    26   428     0     111  ix
 15981    26   111    37    26   428     0      59  (
 15982    26   111    38    26   428     0     111  nextGetIndex
 15983    26   111    50    26   428     0      59  (
 15984    26   111    51    26   428     0      60  )
 15985    26   111    52    26   428     0      60  )
 15986    26   111    53    26   428     0      60  )
 15987    26   111    54    26   428     1     102  ;
 15988    26   112     5    26   428     1      64  }
 15989    26   112     5    26   428     0    1084  ENDMETHOD
 15990    26   112     5    26   429     0    1085  STARTMETHOD
 15991    26   114    18    26   429     0     111  get
 15992    26   114    21    26   429     0      59  (
 15993    26   114    22    26   429     0      36  int
 15994    26   114    26    26   429     0     111  i
 15995    26   114    27    26   429     0      60  )
 15996    26   114    29    26   429     0      63  {
 15997    26   115     9    26   429     0      19  return
 15998    26   115    16    26   429     0     111  Bits.getShortL
 15999    26   115    30    26   429     0      59  (
 16000    26   115    31    26   429     0     111  bb
 16001    26   115    33    26   429     0      66  ,
 16002    26   115    35    26   429     0     111  ix
 16003    26   115    37    26   429     0      59  (
 16004    26   115    38    26   429     0     111  checkIndex
 16005    26   115    48    26   429     0      59  (
 16006    26   115    49    26   429     0     111  i
 16007    26   115    50    26   429     0      60  )
 16008    26   115    51    26   429     0      60  )
 16009    26   115    52    26   429     0      60  )
 16010    26   115    53    26   429     0     102  ;
 16011    26   116     5    26   429     0      64  }
 16012    26   116     5    26   429     0    1086  ENDMETHOD
 16013    26   116     5    26   430     0    1087  STARTMETHOD
 16014    26   120    12    26   430     0     111  ShortBuffer
 16015    26   120    24    26   430     0     111  put
 16016    26   120    27    26   430     0      59  (
 16017    26   120    34    26   430     0     111  x
 16018    26   120    35    26   430     0      60  )
 16019    26   120    37    26   430     0      63  {
 16020    26   122     9    26   430     0     111  Bits.putShortL
 16021    26   122    23    26   430     0      59  (
 16022    26   122    24    26   430     0     111  bb
 16023    26   122    26    26   430     0      66  ,
 16024    26   122    28    26   430     0     111  ix
 16025    26   122    30    26   430     0      59  (
 16026    26   122    31    26   430     0     111  nextPutIndex
 16027    26   122    43    26   430     0      59  (
 16028    26   122    44    26   430     0      60  )
 16029    26   122    45    26   430     0      60  )
 16030    26   122    46    26   430     0      66  ,
 16031    26   122    48    26   430     0     111  x
 16032    26   122    49    26   430     0      60  )
 16033    26   122    50    26   430     0     102  ;
 16034    26   123     9    26   430     0      19  return
 16035    26   123    16    26   430     0      44  this
 16036    26   123    20    26   430     0     102  ;
 16037    26   127     5    26   430     0      64  }
 16038    26   127     5    26   430     0    1088  ENDMETHOD
 16039    26   127     5    26   431     0    1089  STARTMETHOD
 16040    26   129    12    26   431     0     111  ShortBuffer
 16041    26   129    24    26   431     0     111  put
 16042    26   129    27    26   431     0      59  (
 16043    26   129    28    26   431     0      36  int
 16044    26   129    32    26   431     0     111  i
 16045    26   129    33    26   431     0      66  ,
 16046    26   129    41    26   431     0     111  x
 16047    26   129    42    26   431     0      60  )
 16048    26   129    44    26   431     0      63  {
 16049    26   131     9    26   431     0     111  Bits.putShortL
 16050    26   131    23    26   431     0      59  (
 16051    26   131    24    26   431     0     111  bb
 16052    26   131    26    26   431     0      66  ,
 16053    26   131    28    26   431     0     111  ix
 16054    26   131    30    26   431     0      59  (
 16055    26   131    31    26   431     0     111  checkIndex
 16056    26   131    41    26   431     0      59  (
 16057    26   131    42    26   431     0     111  i
 16058    26   131    43    26   431     0      60  )
 16059    26   131    44    26   431     0      60  )
 16060    26   131    45    26   431     0      66  ,
 16061    26   131    47    26   431     0     111  x
 16062    26   131    48    26   431     0      60  )
 16063    26   131    49    26   431     0     102  ;
 16064    26   132     9    26   431     0      19  return
 16065    26   132    16    26   431     0      44  this
 16066    26   132    20    26   431     0     102  ;
 16067    26   136     5    26   431     0      64  }
 16068    26   136     5    26   431     0    1090  ENDMETHOD
 16069    26   136     5    26   432     0    1091  STARTMETHOD
 16070    26   138    12    26   432     0     111  ShortBuffer
 16071    26   138    24    26   432     0     111  compact
 16072    26   138    31    26   432     0      59  (
 16073    26   138    32    26   432     0      60  )
 16074    26   138    34    26   432     0      63  {
 16075    26   140     9    26   432     1      36  int
 16076    26   140    13    26   432     1     111  pos
 16077    26   140    17    26   432     1      67  =
 16078    26   140    19    26   432     1     111  position
 16079    26   140    27    26   432     1      59  (
 16080    26   140    28    26   432     1      60  )
 16081    26   140    29    26   432     1     102  ;
 16082    26   141     9    26   432     1      36  int
 16083    26   141    13    26   432     1     111  lim
 16084    26   141    17    26   432     1      67  =
 16085    26   141    19    26   432     1     111  limit
 16086    26   141    24    26   432     1      59  (
 16087    26   141    25    26   432     1      60  )
 16088    26   141    26    26   432     1     102  ;
 16089    26   142     9    26   432     0     111  assert
 16090    26   142    16    26   432     0      59  (
 16091    26   142    17    26   432     0     111  pos
 16092    26   142    21    26   432     0      92  <=
 16093    26   142    24    26   432     0     111  lim
 16094    26   142    27    26   432     0      60  )
 16095    26   142    28    26   432     0     102  ;
 16096    26   143     9    26   432     0      36  int
 16097    26   143    13    26   432     0     111  rem
 16098    26   143    17    26   432     0      67  =
 16099    26   143    19    26   432     0      59  (
 16100    26   143    20    26   432     0     111  pos
 16101    26   143    24    26   432     0      92  <=
 16102    26   143    27    26   432     0     111  lim
 16103    26   143    31    26   432     0      58  ?
 16104    26   143    33    26   432     0     111  lim
 16105    26   143    37    26   432     0      77  -
 16106    26   143    39    26   432     0     111  pos
 16107    26   143    43    26   432     0      65  :
 16108    26   143    45    26   432     0     112  0
 16109    26   143    46    26   432     0      60  )
 16110    26   143    47    26   432     0     102  ;
 16111    26   145     9    26   432     0     111  ByteBuffer
 16112    26   145    20    26   432     0     111  db
 16113    26   145    23    26   432     0      67  =
 16114    26   145    25    26   432     0     111  bb.duplicate
 16115    26   145    37    26   432     0      59  (
 16116    26   145    38    26   432     0      60  )
 16117    26   145    39    26   432     0     102  ;
 16118    26   146     9    26   432     0     111  db.limit
 16119    26   146    17    26   432     0      59  (
 16120    26   146    18    26   432     0     111  ix
 16121    26   146    20    26   432     0      59  (
 16122    26   146    21    26   432     0     111  lim
 16123    26   146    24    26   432     0      60  )
 16124    26   146    25    26   432     0      60  )
 16125    26   146    26    26   432     0     102  ;
 16126    26   147     9    26   432     0     111  db.position
 16127    26   147    20    26   432     0      59  (
 16128    26   147    21    26   432     0     111  ix
 16129    26   147    23    26   432     0      59  (
 16130    26   147    24    26   432     0     112  0
 16131    26   147    25    26   432     0      60  )
 16132    26   147    26    26   432     0      60  )
 16133    26   147    27    26   432     0     102  ;
 16134    26   148     9    26   432     0     111  ByteBuffer
 16135    26   148    20    26   432     0     111  sb
 16136    26   148    23    26   432     0      67  =
 16137    26   148    25    26   432     0     111  db.slice
 16138    26   148    33    26   432     0      59  (
 16139    26   148    34    26   432     0      60  )
 16140    26   148    35    26   432     0     102  ;
 16141    26   149     9    26   432     0     111  sb.position
 16142    26   149    20    26   432     0      59  (
 16143    26   149    21    26   432     0     111  pos
 16144    26   149    25    26   432     0      90  <<
 16145    26   149    28    26   432     0     112  1
 16146    26   149    29    26   432     0      60  )
 16147    26   149    30    26   432     0     102  ;
 16148    26   150     9    26   432     0     111  sb.compact
 16149    26   150    19    26   432     0      59  (
 16150    26   150    20    26   432     0      60  )
 16151    26   150    21    26   432     0     102  ;
 16152    26   151     9    26   432     0     111  position
 16153    26   151    17    26   432     0      59  (
 16154    26   151    18    26   432     0     111  rem
 16155    26   151    21    26   432     0      60  )
 16156    26   151    22    26   432     0     102  ;
 16157    26   152     9    26   432     0     111  limit
 16158    26   152    14    26   432     0      59  (
 16159    26   152    15    26   432     0     111  capacity
 16160    26   152    23    26   432     0      59  (
 16161    26   152    24    26   432     0      60  )
 16162    26   152    25    26   432     0      60  )
 16163    26   152    26    26   432     0     102  ;
 16164    26   153     9    26   432     0      19  return
 16165    26   153    16    26   432     0      44  this
 16166    26   153    20    26   432     0     102  ;
 16167    26   157     5    26   432     0      64  }
 16168    26   157     5    26   432     0    1092  ENDMETHOD
 16169    26   157     5    26   433     0    1093  STARTMETHOD
 16170    26   159    12    26   433     0      39  boolean
 16171    26   159    20    26   433     0     111  isDirect
 16172    26   159    28    26   433     0      59  (
 16173    26   159    29    26   433     0      60  )
 16174    26   159    31    26   433     0      63  {
 16175    26   160     9    26   433     0      19  return
 16176    26   160    16    26   433     0     111  bb.isDirect
 16177    26   160    27    26   433     0      59  (
 16178    26   160    28    26   433     0      60  )
 16179    26   160    29    26   433     1     102  ;
 16180    26   161     5    26   433     1      64  }
 16181    26   161     5    26   433     0    1094  ENDMETHOD
 16182    26   161     5    26   434     0    1095  STARTMETHOD
 16183    26   163    12    26   434     0      39  boolean
 16184    26   163    20    26   434     0     111  isReadOnly
 16185    26   163    30    26   434     0      59  (
 16186    26   163    31    26   434     0      60  )
 16187    26   163    33    26   434     0      63  {
 16188    26   164     9    26   434     0      19  return
 16189    26   164    16    26   434     0      43  false
 16190    26   164    21    26   434     1     102  ;
 16191    26   165     5    26   434     1      64  }
 16192    26   165     5    26   434     0    1096  ENDMETHOD
 16193    26   165     5    26   435     0    1097  STARTMETHOD
 16194    26   207    12    26   435     0     111  ByteOrder
 16195    26   207    22    26   435     0     111  order
 16196    26   207    27    26   435     0      59  (
 16197    26   207    28    26   435     0      60  )
 16198    26   207    30    26   435     0      63  {
 16199    26   212     9    26   435     0      19  return
 16200    26   212    16    26   435     0     111  ByteOrder.LITTLE_ENDIAN
 16201    26   212    39    26   435     1     102  ;
 16202    26   214     5    26   435     1      64  }
 16203    26   214     5    26   435     0    1098  ENDMETHOD
 16204    26   216     1    26    -1     0      64  }
 16205    26   216     1    26    -1     1    1099  ENDCLASS
 16206    26   216     1    -1    -1     1    1100  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsShortBufferL.java
 16207    27     1     1    -1    -1     1    1101  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsShortBufferRB.java
 16208    27    28     9    -1    -1     0     111  java.nio
 16209    27    28    17    -1    -1     0     102  ;
 16210    27    31     1    27    -1     0    1102  STARTCLASS
 16211    27    31     1    27    -1     0      24  class
 16212    27    31     7    27    -1     0     111  ByteBufferAsShortBufferRB
 16213    27    32     5    27    -1     0      38  extends
 16214    27    32    13    27    -1     0     111  ByteBufferAsShortBufferB
 16215    27    33     1    27    -1     0      63  {
 16216    27    33     1    27   436     0    1103  STARTMETHOD
 16217    27    42     5    27   436     0     111  ByteBufferAsShortBufferRB
 16218    27    42    30    27   436     0      59  (
 16219    27    42    31    27   436     0     111  ByteBuffer
 16220    27    42    42    27   436     0     111  bb
 16221    27    42    44    27   436     0      60  )
 16222    27    42    46    27   436     0      63  {
 16223    27    55     9    27   436     0      27  super
 16224    27    55    14    27   436     0      59  (
 16225    27    55    15    27   436     0     111  bb
 16226    27    55    17    27   436     0      60  )
 16227    27    55    18    27   436     0     102  ;
 16228    27    57     5    27   436     0      64  }
 16229    27    57     5    27   436     0    1104  ENDMETHOD
 16230    27    57     5    27   437     0    1105  STARTMETHOD
 16231    27    59     5    27   437     0     111  ByteBufferAsShortBufferRB
 16232    27    59    30    27   437     0      59  (
 16233    27    59    31    27   437     0     111  ByteBuffer
 16234    27    59    42    27   437     0     111  bb
 16235    27    59    44    27   437     0      66  ,
 16236    27    60    38    27   437     0      36  int
 16237    27    60    42    27   437     0     111  mark
 16238    27    60    46    27   437     0      66  ,
 16239    27    60    48    27   437     0      36  int
 16240    27    60    52    27   437     0     111  pos
 16241    27    60    55    27   437     0      66  ,
 16242    27    60    57    27   437     0      36  int
 16243    27    60    61    27   437     0     111  lim
 16244    27    60    64    27   437     0      66  ,
 16245    27    60    66    27   437     0      36  int
 16246    27    60    70    27   437     0     111  cap
 16247    27    60    73    27   437     0      66  ,
 16248    27    61    38    27   437     0      36  int
 16249    27    61    42    27   437     0     111  off
 16250    27    61    45    27   437     0      60  )
 16251    27    62     5    27   437     0      63  {
 16252    27    68     9    27   437     0      27  super
 16253    27    68    14    27   437     0      59  (
 16254    27    68    15    27   437     0     111  bb
 16255    27    68    17    27   437     0      66  ,
 16256    27    68    19    27   437     0     111  mark
 16257    27    68    23    27   437     0      66  ,
 16258    27    68    25    27   437     0     111  pos
 16259    27    68    28    27   437     0      66  ,
 16260    27    68    30    27   437     0     111  lim
 16261    27    68    33    27   437     0      66  ,
 16262    27    68    35    27   437     0     111  cap
 16263    27    68    38    27   437     0      66  ,
 16264    27    68    40    27   437     0     111  off
 16265    27    68    43    27   437     0      60  )
 16266    27    68    44    27   437     0     102  ;
 16267    27    70     5    27   437     0      64  }
 16268    27    70     5    27   437     0    1106  ENDMETHOD
 16269    27    70     5    27   438     0    1107  STARTMETHOD
 16270    27    72    12    27   438     0     111  ShortBuffer
 16271    27    72    24    27   438     0     111  slice
 16272    27    72    29    27   438     0      59  (
 16273    27    72    30    27   438     0      60  )
 16274    27    72    32    27   438     0      63  {
 16275    27    73     9    27   438     1      36  int
 16276    27    73    13    27   438     1     111  pos
 16277    27    73    17    27   438     1      67  =
 16278    27    73    19    27   438     1     111  this.position
 16279    27    73    32    27   438     1      59  (
 16280    27    73    33    27   438     1      60  )
 16281    27    73    34    27   438     1     102  ;
 16282    27    74     9    27   438     1      36  int
 16283    27    74    13    27   438     1     111  lim
 16284    27    74    17    27   438     1      67  =
 16285    27    74    19    27   438     1     111  this.limit
 16286    27    74    29    27   438     1      59  (
 16287    27    74    30    27   438     1      60  )
 16288    27    74    31    27   438     1     102  ;
 16289    27    75     9    27   438     0     111  assert
 16290    27    75    16    27   438     0      59  (
 16291    27    75    17    27   438     0     111  pos
 16292    27    75    21    27   438     0      92  <=
 16293    27    75    24    27   438     0     111  lim
 16294    27    75    27    27   438     0      60  )
 16295    27    75    28    27   438     0     102  ;
 16296    27    76     9    27   438     0      36  int
 16297    27    76    13    27   438     0     111  rem
 16298    27    76    17    27   438     0      67  =
 16299    27    76    19    27   438     0      59  (
 16300    27    76    20    27   438     0     111  pos
 16301    27    76    24    27   438     0      92  <=
 16302    27    76    27    27   438     0     111  lim
 16303    27    76    31    27   438     0      58  ?
 16304    27    76    33    27   438     0     111  lim
 16305    27    76    37    27   438     0      77  -
 16306    27    76    39    27   438     0     111  pos
 16307    27    76    43    27   438     0      65  :
 16308    27    76    45    27   438     0     112  0
 16309    27    76    46    27   438     0      60  )
 16310    27    76    47    27   438     0     102  ;
 16311    27    77     9    27   438     0      36  int
 16312    27    77    13    27   438     0     111  off
 16313    27    77    17    27   438     0      67  =
 16314    27    77    19    27   438     0      59  (
 16315    27    77    20    27   438     0     111  pos
 16316    27    77    24    27   438     0      90  <<
 16317    27    77    27    27   438     0     112  1
 16318    27    77    28    27   438     0      60  )
 16319    27    77    30    27   438     0      74  +
 16320    27    77    32    27   438     0     111  offset
 16321    27    77    38    27   438     0     102  ;
 16322    27    78     9    27   438     0     111  assert
 16323    27    78    16    27   438     0      59  (
 16324    27    78    17    27   438     0     111  off
 16325    27    78    21    27   438     0      88  >=
 16326    27    78    24    27   438     0     112  0
 16327    27    78    25    27   438     0      60  )
 16328    27    78    26    27   438     0     102  ;
 16329    27    79     9    27   438     0      19  return
 16330    27    79    20    27   438     0     111  ByteBufferAsShortBufferRB
 16331    27    79    45    27   438     0      59  (
 16332    27    79    46    27   438     0     111  bb
 16333    27    79    48    27   438     0      66  ,
 16334    27    79    50    27   438     0      77  -
 16335    27    79    51    27   438     0     112  1
 16336    27    79    52    27   438     0      66  ,
 16337    27    79    54    27   438     0     112  0
 16338    27    79    55    27   438     0      66  ,
 16339    27    79    57    27   438     0     111  rem
 16340    27    79    60    27   438     0      66  ,
 16341    27    79    62    27   438     0     111  rem
 16342    27    79    65    27   438     0      66  ,
 16343    27    79    67    27   438     0     111  off
 16344    27    79    70    27   438     0      60  )
 16345    27    79    71    27   438     0     102  ;
 16346    27    80     5    27   438     0      64  }
 16347    27    80     5    27   438     0    1108  ENDMETHOD
 16348    27    80     5    27   439     0    1109  STARTMETHOD
 16349    27    82    12    27   439     0     111  ShortBuffer
 16350    27    82    24    27   439     0     111  duplicate
 16351    27    82    33    27   439     0      59  (
 16352    27    82    34    27   439     0      60  )
 16353    27    82    36    27   439     0      63  {
 16354    27    83     9    27   439     0      19  return
 16355    27    83    20    27   439     0     111  ByteBufferAsShortBufferRB
 16356    27    83    45    27   439     0      59  (
 16357    27    83    46    27   439     0     111  bb
 16358    27    83    48    27   439     0      66  ,
 16359    27    84    53    27   439     1     111  this.markValue
 16360    27    84    67    27   439     1      59  (
 16361    27    84    68    27   439     1      60  )
 16362    27    84    69    27   439     1      66  ,
 16363    27    85    53    27   439     1     111  this.position
 16364    27    85    66    27   439     1      59  (
 16365    27    85    67    27   439     1      60  )
 16366    27    85    68    27   439     1      66  ,
 16367    27    86    53    27   439     1     111  this.limit
 16368    27    86    63    27   439     1      59  (
 16369    27    86    64    27   439     1      60  )
 16370    27    86    65    27   439     1      66  ,
 16371    27    87    53    27   439     1     111  this.capacity
 16372    27    87    66    27   439     1      59  (
 16373    27    87    67    27   439     1      60  )
 16374    27    87    68    27   439     1      66  ,
 16375    27    88    53    27   439     0     111  offset
 16376    27    88    59    27   439     0      60  )
 16377    27    88    60    27   439     0     102  ;
 16378    27    89     5    27   439     0      64  }
 16379    27    89     5    27   439     0    1110  ENDMETHOD
 16380    27    89     5    27   440     0    1111  STARTMETHOD
 16381    27    91    12    27   440     0     111  ShortBuffer
 16382    27    91    24    27   440     0     111  asReadOnlyBuffer
 16383    27    91    40    27   440     0      59  (
 16384    27    91    41    27   440     0      60  )
 16385    27    91    43    27   440     0      63  {
 16386    27   100     9    27   440     0      19  return
 16387    27   100    16    27   440     0     111  duplicate
 16388    27   100    25    27   440     0      59  (
 16389    27   100    26    27   440     0      60  )
 16390    27   100    27    27   440     0     102  ;
 16391    27   102     5    27   440     0      64  }
 16392    27   102     5    27   440     0    1112  ENDMETHOD
 16393    27   102     5    27   441     0    1113  STARTMETHOD
 16394    27   120    12    27   441     0     111  ShortBuffer
 16395    27   120    24    27   441     0     111  put
 16396    27   120    27    27   441     0      59  (
 16397    27   120    34    27   441     0     111  x
 16398    27   120    35    27   441     0      60  )
 16399    27   120    37    27   441     0      63  {
 16400    27   125     9    27   441     0      20  throw
 16401    27   125    19    27   441     0     111  ReadOnlyBufferException
 16402    27   125    42    27   441     0      59  (
 16403    27   125    43    27   441     0      60  )
 16404    27   125    44    27   441     0     102  ;
 16405    27   127     5    27   441     0      64  }
 16406    27   127     5    27   441     0    1114  ENDMETHOD
 16407    27   127     5    27   442     0    1115  STARTMETHOD
 16408    27   129    12    27   442     0     111  ShortBuffer
 16409    27   129    24    27   442     0     111  put
 16410    27   129    27    27   442     0      59  (
 16411    27   129    28    27   442     0      36  int
 16412    27   129    32    27   442     0     111  i
 16413    27   129    33    27   442     0      66  ,
 16414    27   129    41    27   442     0     111  x
 16415    27   129    42    27   442     0      60  )
 16416    27   129    44    27   442     0      63  {
 16417    27   134     9    27   442     0      20  throw
 16418    27   134    19    27   442     1     111  ReadOnlyBufferException
 16419    27   134    42    27   442     1      59  (
 16420    27   134    43    27   442     1      60  )
 16421    27   134    44    27   442     1     102  ;
 16422    27   136     5    27   442     1      64  }
 16423    27   136     5    27   442     0    1116  ENDMETHOD
 16424    27   136     5    27   443     0    1117  STARTMETHOD
 16425    27   138    12    27   443     0     111  ShortBuffer
 16426    27   138    24    27   443     0     111  compact
 16427    27   138    31    27   443     0      59  (
 16428    27   138    32    27   443     0      60  )
 16429    27   138    34    27   443     0      63  {
 16430    27   155     9    27   443     0      20  throw
 16431    27   155    19    27   443     1     111  ReadOnlyBufferException
 16432    27   155    42    27   443     1      59  (
 16433    27   155    43    27   443     1      60  )
 16434    27   155    44    27   443     1     102  ;
 16435    27   157     5    27   443     1      64  }
 16436    27   157     5    27   443     0    1118  ENDMETHOD
 16437    27   157     5    27   444     0    1119  STARTMETHOD
 16438    27   159    12    27   444     0      39  boolean
 16439    27   159    20    27   444     0     111  isDirect
 16440    27   159    28    27   444     0      59  (
 16441    27   159    29    27   444     0      60  )
 16442    27   159    31    27   444     0      63  {
 16443    27   160     9    27   444     0      19  return
 16444    27   160    16    27   444     1     111  bb.isDirect
 16445    27   160    27    27   444     1      59  (
 16446    27   160    28    27   444     1      60  )
 16447    27   160    29    27   444     1     102  ;
 16448    27   161     5    27   444     1      64  }
 16449    27   161     5    27   444     0    1120  ENDMETHOD
 16450    27   161     5    27   445     0    1121  STARTMETHOD
 16451    27   163    12    27   445     0      39  boolean
 16452    27   163    20    27   445     0     111  isReadOnly
 16453    27   163    30    27   445     0      59  (
 16454    27   163    31    27   445     0      60  )
 16455    27   163    33    27   445     0      63  {
 16456    27   164     9    27   445     0      19  return
 16457    27   164    16    27   445     0      52  true
 16458    27   164    20    27   445     0     102  ;
 16459    27   165     5    27   445     0      64  }
 16460    27   165     5    27   445     0    1122  ENDMETHOD
 16461    27   165     5    27   446     0    1123  STARTMETHOD
 16462    27   207    12    27   446     0     111  ByteOrder
 16463    27   207    22    27   446     0     111  order
 16464    27   207    27    27   446     0      59  (
 16465    27   207    28    27   446     0      60  )
 16466    27   207    30    27   446     0      63  {
 16467    27   209     9    27   446     0      19  return
 16468    27   209    16    27   446     0     111  ByteOrder.BIG_ENDIAN
 16469    27   209    36    27   446     0     102  ;
 16470    27   214     5    27   446     0      64  }
 16471    27   214     5    27   446     0    1124  ENDMETHOD
 16472    27   216     1    27    -1     0      64  }
 16473    27   216     1    27    -1     1    1125  ENDCLASS
 16474    27   216     1    -1    -1     1    1126  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsShortBufferRB.java
 16475    28     1     1    -1    -1     1    1127  STARTFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsShortBufferRL.java
 16476    28    28     9    -1    -1     0     111  java.nio
 16477    28    28    17    -1    -1     0     102  ;
 16478    28    31     1    28    -1     0    1128  STARTCLASS
 16479    28    31     1    28    -1     0      24  class
 16480    28    31     7    28    -1     0     111  ByteBufferAsShortBufferRL
 16481    28    32     5    28    -1     0      38  extends
 16482    28    32    13    28    -1     0     111  ByteBufferAsShortBufferL
 16483    28    33     1    28    -1     0      63  {
 16484    28    33     1    28   447     0    1129  STARTMETHOD
 16485    28    42     5    28   447     0     111  ByteBufferAsShortBufferRL
 16486    28    42    30    28   447     0      59  (
 16487    28    42    31    28   447     0     111  ByteBuffer
 16488    28    42    42    28   447     0     111  bb
 16489    28    42    44    28   447     0      60  )
 16490    28    42    46    28   447     0      63  {
 16491    28    55     9    28   447     0      27  super
 16492    28    55    14    28   447     0      59  (
 16493    28    55    15    28   447     0     111  bb
 16494    28    55    17    28   447     0      60  )
 16495    28    55    18    28   447     0     102  ;
 16496    28    57     5    28   447     0      64  }
 16497    28    57     5    28   447     0    1130  ENDMETHOD
 16498    28    57     5    28   448     0    1131  STARTMETHOD
 16499    28    59     5    28   448     0     111  ByteBufferAsShortBufferRL
 16500    28    59    30    28   448     0      59  (
 16501    28    59    31    28   448     0     111  ByteBuffer
 16502    28    59    42    28   448     0     111  bb
 16503    28    59    44    28   448     0      66  ,
 16504    28    60    38    28   448     0      36  int
 16505    28    60    42    28   448     0     111  mark
 16506    28    60    46    28   448     0      66  ,
 16507    28    60    48    28   448     0      36  int
 16508    28    60    52    28   448     0     111  pos
 16509    28    60    55    28   448     0      66  ,
 16510    28    60    57    28   448     0      36  int
 16511    28    60    61    28   448     0     111  lim
 16512    28    60    64    28   448     0      66  ,
 16513    28    60    66    28   448     0      36  int
 16514    28    60    70    28   448     0     111  cap
 16515    28    60    73    28   448     0      66  ,
 16516    28    61    38    28   448     0      36  int
 16517    28    61    42    28   448     0     111  off
 16518    28    61    45    28   448     0      60  )
 16519    28    62     5    28   448     0      63  {
 16520    28    68     9    28   448     0      27  super
 16521    28    68    14    28   448     0      59  (
 16522    28    68    15    28   448     0     111  bb
 16523    28    68    17    28   448     0      66  ,
 16524    28    68    19    28   448     0     111  mark
 16525    28    68    23    28   448     0      66  ,
 16526    28    68    25    28   448     0     111  pos
 16527    28    68    28    28   448     0      66  ,
 16528    28    68    30    28   448     0     111  lim
 16529    28    68    33    28   448     0      66  ,
 16530    28    68    35    28   448     0     111  cap
 16531    28    68    38    28   448     0      66  ,
 16532    28    68    40    28   448     0     111  off
 16533    28    68    43    28   448     0      60  )
 16534    28    68    44    28   448     0     102  ;
 16535    28    70     5    28   448     0      64  }
 16536    28    70     5    28   448     0    1132  ENDMETHOD
 16537    28    70     5    28   449     0    1133  STARTMETHOD
 16538    28    72    12    28   449     0     111  ShortBuffer
 16539    28    72    24    28   449     0     111  slice
 16540    28    72    29    28   449     0      59  (
 16541    28    72    30    28   449     0      60  )
 16542    28    72    32    28   449     0      63  {
 16543    28    73     9    28   449     1      36  int
 16544    28    73    13    28   449     1     111  pos
 16545    28    73    17    28   449     1      67  =
 16546    28    73    19    28   449     1     111  this.position
 16547    28    73    32    28   449     1      59  (
 16548    28    73    33    28   449     1      60  )
 16549    28    73    34    28   449     1     102  ;
 16550    28    74     9    28   449     1      36  int
 16551    28    74    13    28   449     1     111  lim
 16552    28    74    17    28   449     1      67  =
 16553    28    74    19    28   449     1     111  this.limit
 16554    28    74    29    28   449     1      59  (
 16555    28    74    30    28   449     1      60  )
 16556    28    74    31    28   449     1     102  ;
 16557    28    75     9    28   449     0     111  assert
 16558    28    75    16    28   449     0      59  (
 16559    28    75    17    28   449     0     111  pos
 16560    28    75    21    28   449     0      92  <=
 16561    28    75    24    28   449     0     111  lim
 16562    28    75    27    28   449     0      60  )
 16563    28    75    28    28   449     0     102  ;
 16564    28    76     9    28   449     0      36  int
 16565    28    76    13    28   449     0     111  rem
 16566    28    76    17    28   449     0      67  =
 16567    28    76    19    28   449     0      59  (
 16568    28    76    20    28   449     0     111  pos
 16569    28    76    24    28   449     0      92  <=
 16570    28    76    27    28   449     0     111  lim
 16571    28    76    31    28   449     0      58  ?
 16572    28    76    33    28   449     0     111  lim
 16573    28    76    37    28   449     0      77  -
 16574    28    76    39    28   449     0     111  pos
 16575    28    76    43    28   449     0      65  :
 16576    28    76    45    28   449     0     112  0
 16577    28    76    46    28   449     0      60  )
 16578    28    76    47    28   449     0     102  ;
 16579    28    77     9    28   449     0      36  int
 16580    28    77    13    28   449     0     111  off
 16581    28    77    17    28   449     0      67  =
 16582    28    77    19    28   449     0      59  (
 16583    28    77    20    28   449     0     111  pos
 16584    28    77    24    28   449     0      90  <<
 16585    28    77    27    28   449     0     112  1
 16586    28    77    28    28   449     0      60  )
 16587    28    77    30    28   449     0      74  +
 16588    28    77    32    28   449     0     111  offset
 16589    28    77    38    28   449     0     102  ;
 16590    28    78     9    28   449     0     111  assert
 16591    28    78    16    28   449     0      59  (
 16592    28    78    17    28   449     0     111  off
 16593    28    78    21    28   449     0      88  >=
 16594    28    78    24    28   449     0     112  0
 16595    28    78    25    28   449     0      60  )
 16596    28    78    26    28   449     0     102  ;
 16597    28    79     9    28   449     0      19  return
 16598    28    79    20    28   449     0     111  ByteBufferAsShortBufferRL
 16599    28    79    45    28   449     0      59  (
 16600    28    79    46    28   449     0     111  bb
 16601    28    79    48    28   449     0      66  ,
 16602    28    79    50    28   449     0      77  -
 16603    28    79    51    28   449     0     112  1
 16604    28    79    52    28   449     0      66  ,
 16605    28    79    54    28   449     0     112  0
 16606    28    79    55    28   449     0      66  ,
 16607    28    79    57    28   449     0     111  rem
 16608    28    79    60    28   449     0      66  ,
 16609    28    79    62    28   449     0     111  rem
 16610    28    79    65    28   449     0      66  ,
 16611    28    79    67    28   449     0     111  off
 16612    28    79    70    28   449     0      60  )
 16613    28    79    71    28   449     0     102  ;
 16614    28    80     5    28   449     0      64  }
 16615    28    80     5    28   449     0    1134  ENDMETHOD
 16616    28    80     5    28   450     0    1135  STARTMETHOD
 16617    28    82    12    28   450     0     111  ShortBuffer
 16618    28    82    24    28   450     0     111  duplicate
 16619    28    82    33    28   450     0      59  (
 16620    28    82    34    28   450     0      60  )
 16621    28    82    36    28   450     0      63  {
 16622    28    83     9    28   450     0      19  return
 16623    28    83    20    28   450     0     111  ByteBufferAsShortBufferRL
 16624    28    83    45    28   450     0      59  (
 16625    28    83    46    28   450     0     111  bb
 16626    28    83    48    28   450     0      66  ,
 16627    28    84    53    28   450     1     111  this.markValue
 16628    28    84    67    28   450     1      59  (
 16629    28    84    68    28   450     1      60  )
 16630    28    84    69    28   450     1      66  ,
 16631    28    85    53    28   450     1     111  this.position
 16632    28    85    66    28   450     1      59  (
 16633    28    85    67    28   450     1      60  )
 16634    28    85    68    28   450     1      66  ,
 16635    28    86    53    28   450     1     111  this.limit
 16636    28    86    63    28   450     1      59  (
 16637    28    86    64    28   450     1      60  )
 16638    28    86    65    28   450     1      66  ,
 16639    28    87    53    28   450     1     111  this.capacity
 16640    28    87    66    28   450     1      59  (
 16641    28    87    67    28   450     1      60  )
 16642    28    87    68    28   450     1      66  ,
 16643    28    88    53    28   450     0     111  offset
 16644    28    88    59    28   450     0      60  )
 16645    28    88    60    28   450     0     102  ;
 16646    28    89     5    28   450     0      64  }
 16647    28    89     5    28   450     0    1136  ENDMETHOD
 16648    28    89     5    28   451     0    1137  STARTMETHOD
 16649    28    91    12    28   451     0     111  ShortBuffer
 16650    28    91    24    28   451     0     111  asReadOnlyBuffer
 16651    28    91    40    28   451     0      59  (
 16652    28    91    41    28   451     0      60  )
 16653    28    91    43    28   451     0      63  {
 16654    28   100     9    28   451     0      19  return
 16655    28   100    16    28   451     0     111  duplicate
 16656    28   100    25    28   451     0      59  (
 16657    28   100    26    28   451     0      60  )
 16658    28   100    27    28   451     0     102  ;
 16659    28   102     5    28   451     0      64  }
 16660    28   102     5    28   451     0    1138  ENDMETHOD
 16661    28   102     5    28   452     0    1139  STARTMETHOD
 16662    28   120    12    28   452     0     111  ShortBuffer
 16663    28   120    24    28   452     0     111  put
 16664    28   120    27    28   452     0      59  (
 16665    28   120    34    28   452     0     111  x
 16666    28   120    35    28   452     0      60  )
 16667    28   120    37    28   452     0      63  {
 16668    28   125     9    28   452     0      20  throw
 16669    28   125    19    28   452     0     111  ReadOnlyBufferException
 16670    28   125    42    28   452     0      59  (
 16671    28   125    43    28   452     0      60  )
 16672    28   125    44    28   452     0     102  ;
 16673    28   127     5    28   452     0      64  }
 16674    28   127     5    28   452     0    1140  ENDMETHOD
 16675    28   127     5    28   453     0    1141  STARTMETHOD
 16676    28   129    12    28   453     0     111  ShortBuffer
 16677    28   129    24    28   453     0     111  put
 16678    28   129    27    28   453     0      59  (
 16679    28   129    28    28   453     0      36  int
 16680    28   129    32    28   453     0     111  i
 16681    28   129    33    28   453     0      66  ,
 16682    28   129    41    28   453     0     111  x
 16683    28   129    42    28   453     0      60  )
 16684    28   129    44    28   453     0      63  {
 16685    28   134     9    28   453     0      20  throw
 16686    28   134    19    28   453     1     111  ReadOnlyBufferException
 16687    28   134    42    28   453     1      59  (
 16688    28   134    43    28   453     1      60  )
 16689    28   134    44    28   453     1     102  ;
 16690    28   136     5    28   453     1      64  }
 16691    28   136     5    28   453     0    1142  ENDMETHOD
 16692    28   136     5    28   454     0    1143  STARTMETHOD
 16693    28   138    12    28   454     0     111  ShortBuffer
 16694    28   138    24    28   454     0     111  compact
 16695    28   138    31    28   454     0      59  (
 16696    28   138    32    28   454     0      60  )
 16697    28   138    34    28   454     0      63  {
 16698    28   155     9    28   454     0      20  throw
 16699    28   155    19    28   454     1     111  ReadOnlyBufferException
 16700    28   155    42    28   454     1      59  (
 16701    28   155    43    28   454     1      60  )
 16702    28   155    44    28   454     1     102  ;
 16703    28   157     5    28   454     1      64  }
 16704    28   157     5    28   454     0    1144  ENDMETHOD
 16705    28   157     5    28   455     0    1145  STARTMETHOD
 16706    28   159    12    28   455     0      39  boolean
 16707    28   159    20    28   455     0     111  isDirect
 16708    28   159    28    28   455     0      59  (
 16709    28   159    29    28   455     0      60  )
 16710    28   159    31    28   455     0      63  {
 16711    28   160     9    28   455     0      19  return
 16712    28   160    16    28   455     1     111  bb.isDirect
 16713    28   160    27    28   455     1      59  (
 16714    28   160    28    28   455     1      60  )
 16715    28   160    29    28   455     1     102  ;
 16716    28   161     5    28   455     1      64  }
 16717    28   161     5    28   455     0    1146  ENDMETHOD
 16718    28   161     5    28   456     0    1147  STARTMETHOD
 16719    28   163    12    28   456     0      39  boolean
 16720    28   163    20    28   456     0     111  isReadOnly
 16721    28   163    30    28   456     0      59  (
 16722    28   163    31    28   456     0      60  )
 16723    28   163    33    28   456     0      63  {
 16724    28   164     9    28   456     0      19  return
 16725    28   164    16    28   456     0      52  true
 16726    28   164    20    28   456     0     102  ;
 16727    28   165     5    28   456     0      64  }
 16728    28   165     5    28   456     0    1148  ENDMETHOD
 16729    28   165     5    28   457     0    1149  STARTMETHOD
 16730    28   207    12    28   457     0     111  ByteOrder
 16731    28   207    22    28   457     0     111  order
 16732    28   207    27    28   457     0      59  (
 16733    28   207    28    28   457     0      60  )
 16734    28   207    30    28   457     0      63  {
 16735    28   212     9    28   457     0      19  return
 16736    28   212    16    28   457     0     111  ByteOrder.LITTLE_ENDIAN
 16737    28   212    39    28   457     0     102  ;
 16738    28   214     5    28   457     0      64  }
 16739    28   214     5    28   457     0    1150  ENDMETHOD
 16740    28   216     1    28    -1     0      64  }
 16741    28   216     1    28    -1     1    1151  ENDCLASS
 16742    28   216     1    -1    -1     1    1152  ENDFILE C:\Users\RA\javasrc\java\nio\ByteBufferAsShortBufferRL.java
 16743    29     1     1    -1    -1     1    1153  STARTFILE C:\Users\RA\javasrc\java\nio\ByteOrder.java
 16744    29    26     9    -1    -1     0     111  java.nio
 16745    29    26    17    -1    -1     0     102  ;
 16746    29    37    14    29    -1     0    1154  STARTCLASS
 16747    29    37    14    29    -1     0      24  class
 16748    29    37    20    29    -1     0     111  ByteOrder
 16749    29    37    30    29    -1     0      63  {
 16750    29    39     5    29    -1     0      41  private
 16751    29    39    13    29    -1     0     111  String
 16752    29    39    20    29    -1     0     111  name
 16753    29    39    24    29    -1     0     102  ;
 16754    29    39    24    29   458     0    1155  STARTMETHOD
 16755    29    41     5    29   458     0      41  private
 16756    29    41    13    29   458     0     111  ByteOrder
 16757    29    41    22    29   458     0      59  (
 16758    29    41    23    29   458     0     111  String
 16759    29    41    30    29   458     0     111  name
 16760    29    41    34    29   458     0      60  )
 16761    29    41    36    29   458     0      63  {
 16762    29    42     9    29   458     0     111  this.name
 16763    29    42    19    29   458     0      67  =
 16764    29    42    21    29   458     0     111  name
 16765    29    42    25    29   458     0     102  ;
 16766    29    43     5    29   458     0      64  }
 16767    29    43     5    29   458     0    1156  ENDMETHOD
 16768    29    50    12    29    -1     0      45  static
 16769    29    50    25    29    -1     0     111  ByteOrder
 16770    29    50    35    29    -1     0     111  BIG_ENDIAN
 16771    29    51     9    29    -1     0      67  =
 16772    29    51    15    29    -1     0     111  ByteOrder
 16773    29    51    24    29    -1     0      59  (
 16774    29    51    25    29    -1     0     107  "BIG_ENDIAN"
 16775    29    51    37    29    -1     0      60  )
 16776    29    51    38    29    -1     0     102  ;
 16777    29    58    12    29    -1     0      45  static
 16778    29    58    25    29    -1     0     111  ByteOrder
 16779    29    58    35    29    -1     0     111  LITTLE_ENDIAN
 16780    29    59     9    29    -1     0      67  =
 16781    29    59    15    29    -1     0     111  ByteOrder
 16782    29    59    24    29    -1     0      59  (
 16783    29    59    25    29    -1     0     107  "LITTLE_ENDIAN"
 16784    29    59    40    29    -1     0      60  )
 16785    29    59    41    29    -1     0     102  ;
 16786    29    59    41    29   459     0    1157  STARTMETHOD
 16787    29    72    12    29   459     0      45  static
 16788    29    72    19    29   459     0     111  ByteOrder
 16789    29    72    29    29   459     0     111  nativeOrder
 16790    29    72    40    29   459     0      59  (
 16791    29    72    41    29   459     0      60  )
 16792    29    72    43    29   459     0      63  {
 16793    29    73     9    29   459     0      19  return
 16794    29    73    16    29   459     0     111  Bits.byteOrder
 16795    29    73    30    29   459     0      59  (
 16796    29    73    31    29   459     0      60  )
 16797    29    73    32    29   459     0     102  ;
 16798    29    74     5    29   459     0      64  }
 16799    29    74     5    29   459     0    1158  ENDMETHOD
 16800    29    74     5    29   460     0    1159  STARTMETHOD
 16801    29    85    12    29   460     0     111  String
 16802    29    85    19    29   460     0     111  toString
 16803    29    85    27    29   460     0      59  (
 16804    29    85    28    29   460     0      60  )
 16805    29    85    30    29   460     0      63  {
 16806    29    86     9    29   460     0      19  return
 16807    29    86    16    29   460     0     111  name
 16808    29    86    20    29   460     0     102  ;
 16809    29    87     5    29   460     0      64  }
 16810    29    87     5    29   460     0    1160  ENDMETHOD
 16811    29    89     1    29    -1     0      64  }
 16812    29    89     1    29    -1     1    1161  ENDCLASS
 16813    29    89     1    -1    -1     1    1162  ENDFILE C:\Users\RA\javasrc\java\nio\ByteOrder.java
 16814    30     1     1    -1    -1     1    1163  STARTFILE C:\Users\RA\javasrc\java\nio\CharBuffer.java
 16815    30    28     9    -1    -1     0     111  java.nio
 16816    30    28    17    -1    -1     0     102  ;
 16817    30    31     1    -1    -1     0      49  import
 16818    30    31     8    -1    -1     0     111  java.io.IOException
 16819    30    31    27    -1    -1     0     102  ;
 16820    30   257    17    30    -1     0    1164  STARTCLASS
 16821    30   257    17    30    -1     0      24  class
 16822    30   257    23    30    -1     0     111  CharBuffer
 16823    30   258     5    30    -1     0      38  extends
 16824    30   258    13    30    -1     0     111  Buffer
 16825    30   259     5    30    -1     0      17  implements
 16826    30   259    16    30    -1     0     111  Comparable
 16827    30   259    26    30    -1     0      93  <
 16828    30   259    27    30    -1     0     111  CharBuffer
 16829    30   259    37    30    -1     0      89  >
 16830    30   259    38    30    -1     0      66  ,
 16831    30   259    40    30    -1     0     111  Appendable
 16832    30   259    50    30    -1     0      66  ,
 16833    30   259    52    30    -1     0     111  CharSequence
 16834    30   259    64    30    -1     0      66  ,
 16835    30   259    66    30    -1     0     111  Readable
 16836    30   260     1    30    -1     0      63  {
 16837    30   266    11    30    -1     0      40  char
 16838    30   266    15    30    -1     0      61  [
 16839    30   266    16    30    -1     0      62  ]
 16840    30   266    18    30    -1     0     111  hb
 16841    30   266    20    30    -1     0     102  ;
 16842    30   267    11    30    -1     0      36  int
 16843    30   267    15    30    -1     0     111  offset
 16844    30   267    21    30    -1     0     102  ;
 16845    30   268     5    30    -1     0      39  boolean
 16846    30   268    13    30    -1     0     111  isReadOnly
 16847    30   268    23    30    -1     0     102  ;
 16848    30   268    23    30   461     0    1165  STARTMETHOD
 16849    30   273     5    30   461     0     111  CharBuffer
 16850    30   273    15    30   461     0      59  (
 16851    30   273    16    30   461     0      36  int
 16852    30   273    20    30   461     0     111  mark
 16853    30   273    24    30   461     0      66  ,
 16854    30   273    26    30   461     0      36  int
 16855    30   273    30    30   461     0     111  pos
 16856    30   273    33    30   461     0      66  ,
 16857    30   273    35    30   461     0      36  int
 16858    30   273    39    30   461     0     111  lim
 16859    30   273    42    30   461     0      66  ,
 16860    30   273    44    30   461     0      36  int
 16861    30   273    48    30   461     0     111  cap
 16862    30   273    51    30   461     0      66  ,
 16863    30   274    18    30   461     0      40  char
 16864    30   274    22    30   461     0      61  [
 16865    30   274    23    30   461     0      62  ]
 16866    30   274    25    30   461     0     111  hb
 16867    30   274    27    30   461     0      66  ,
 16868    30   274    29    30   461     0      36  int
 16869    30   274    33    30   461     0     111  offset
 16870    30   274    39    30   461     0      60  )
 16871    30   275     5    30   461     0      63  {
 16872    30   276     9    30   461     0      27  super
 16873    30   276    14    30   461     0      59  (
 16874    30   276    15    30   461     0     111  mark
 16875    30   276    19    30   461     0      66  ,
 16876    30   276    21    30   461     0     111  pos
 16877    30   276    24    30   461     0      66  ,
 16878    30   276    26    30   461     0     111  lim
 16879    30   276    29    30   461     0      66  ,
 16880    30   276    31    30   461     0     111  cap
 16881    30   276    34    30   461     0      60  )
 16882    30   276    35    30   461     0     102  ;
 16883    30   277     9    30   461     1     111  this.hb
 16884    30   277    17    30   461     1      67  =
 16885    30   277    19    30   461     1     111  hb
 16886    30   277    21    30   461     1     102  ;
 16887    30   278     9    30   461     1     111  this.offset
 16888    30   278    21    30   461     1      67  =
 16889    30   278    23    30   461     1     111  offset
 16890    30   278    29    30   461     1     102  ;
 16891    30   279     5    30   461     0      64  }
 16892    30   279     5    30   461     0    1166  ENDMETHOD
 16893    30   279     5    30   462     0    1167  STARTMETHOD
 16894    30   283     5    30   462     0     111  CharBuffer
 16895    30   283    15    30   462     0      59  (
 16896    30   283    16    30   462     0      36  int
 16897    30   283    20    30   462     0     111  mark
 16898    30   283    24    30   462     0      66  ,
 16899    30   283    26    30   462     0      36  int
 16900    30   283    30    30   462     0     111  pos
 16901    30   283    33    30   462     0      66  ,
 16902    30   283    35    30   462     0      36  int
 16903    30   283    39    30   462     0     111  lim
 16904    30   283    42    30   462     0      66  ,
 16905    30   283    44    30   462     0      36  int
 16906    30   283    48    30   462     0     111  cap
 16907    30   283    51    30   462     0      60  )
 16908    30   283    53    30   462     0      63  {
 16909    30   284     9    30   462     0      44  this
 16910    30   284    13    30   462     0      59  (
 16911    30   284    14    30   462     0     111  mark
 16912    30   284    18    30   462     0      66  ,
 16913    30   284    20    30   462     0     111  pos
 16914    30   284    23    30   462     0      66  ,
 16915    30   284    25    30   462     0     111  lim
 16916    30   284    28    30   462     0      66  ,
 16917    30   284    30    30   462     0     111  cap
 16918    30   284    33    30   462     0      66  ,
 16919    30   284    35    30   462     0      21  null
 16920    30   284    39    30   462     0      66  ,
 16921    30   284    41    30   462     0     112  0
 16922    30   284    42    30   462     0      60  )
 16923    30   284    43    30   462     0     102  ;
 16924    30   285     5    30   462     0      64  }
 16925    30   285     5    30   462     0    1168  ENDMETHOD
 16926    30   285     5    30   463     0    1169  STARTMETHOD
 16927    30   326    12    30   463     0      45  static
 16928    30   326    19    30   463     0     111  CharBuffer
 16929    30   326    30    30   463     0     111  allocate
 16930    30   326    38    30   463     0      59  (
 16931    30   326    39    30   463     0      36  int
 16932    30   326    43    30   463     0     111  capacity
 16933    30   326    51    30   463     0      60  )
 16934    30   326    53    30   463     0      63  {
 16935    30   327     9    30   463     0      31  if
 16936    30   327    12    30   463     0      59  (
 16937    30   327    13    30   463     0     111  capacity
 16938    30   327    22    30   463     0      93  <
 16939    30   327    24    30   463     0     112  0
 16940    30   327    25    30   463     0      60  )
 16941    30   328    13    30   463     0      20  throw
 16942    30   328    23    30   463     0     111  IllegalArgumentException
 16943    30   328    47    30   463     0      59  (
 16944    30   328    48    30   463     0      60  )
 16945    30   328    49    30   463     0     102  ;
 16946    30   329     9    30   463     0      19  return
 16947    30   329    20    30   463     0     111  HeapCharBuffer
 16948    30   329    34    30   463     0      59  (
 16949    30   329    35    30   463     0     111  capacity
 16950    30   329    43    30   463     0      66  ,
 16951    30   329    45    30   463     0     111  capacity
 16952    30   329    53    30   463     0      60  )
 16953    30   329    54    30   463     0     102  ;
 16954    30   330     5    30   463     0      64  }
 16955    30   330     5    30   463     0    1170  ENDMETHOD
 16956    30   330     5    30   464     0    1171  STARTMETHOD
 16957    30   363    12    30   464     0      45  static
 16958    30   363    19    30   464     0     111  CharBuffer
 16959    30   363    30    30   464     0     111  wrap
 16960    30   363    34    30   464     0      59  (
 16961    30   363    35    30   464     0      40  char
 16962    30   363    39    30   464     0      61  [
 16963    30   363    40    30   464     0      62  ]
 16964    30   363    42    30   464     0     111  array
 16965    30   363    47    30   464     0      66  ,
 16966    30   364    37    30   464     0      36  int
 16967    30   364    41    30   464     0     111  offset
 16968    30   364    47    30   464     0      66  ,
 16969    30   364    49    30   464     0      36  int
 16970    30   364    53    30   464     0     111  length
 16971    30   364    59    30   464     0      60  )
 16972    30   365     5    30   464     0      63  {
 16973    30   366     9    30   464     0      35  try
 16974    30   366    13    30   464     0      63  {
 16975    30   367    13    30   464     0      19  return
 16976    30   367    24    30   464     0     111  HeapCharBuffer
 16977    30   367    38    30   464     0      59  (
 16978    30   367    39    30   464     0     111  array
 16979    30   367    44    30   464     0      66  ,
 16980    30   367    46    30   464     0     111  offset
 16981    30   367    52    30   464     0      66  ,
 16982    30   367    54    30   464     0     111  length
 16983    30   367    60    30   464     0      60  )
 16984    30   367    61    30   464     0     102  ;
 16985    30   368     9    30   464     0      64  }
 16986    30   368    11    30   464     0      34  catch
 16987    30   368    17    30   464     0      59  (
 16988    30   368    18    30   464     0     111  IllegalArgumentException
 16989    30   368    43    30   464     0     111  x
 16990    30   368    44    30   464     0      60  )
 16991    30   368    46    30   464     0      63  {
 16992    30   369    13    30   464     0      20  throw
 16993    30   369    23    30   464     0     111  IndexOutOfBoundsException
 16994    30   369    48    30   464     0      59  (
 16995    30   369    49    30   464     0      60  )
 16996    30   369    50    30   464     0     102  ;
 16997    30   370     9    30   464     0      64  }
 16998    30   371     5    30   464     0      64  }
 16999    30   371     5    30   464     0    1172  ENDMETHOD
 17000    30   371     5    30   465     0    1173  STARTMETHOD
 17001    30   389    12    30   465     0      45  static
 17002    30   389    19    30   465     0     111  CharBuffer
 17003    30   389    30    30   465     0     111  wrap
 17004    30   389    34    30   465     0      59  (
 17005    30   389    35    30   465     0      40  char
 17006    30   389    39    30   465     0      61  [
 17007    30   389    40    30   465     0      62  ]
 17008    30   389    42    30   465     0     111  array
 17009    30   389    47    30   465     0      60  )
 17010    30   389    49    30   465     0      63  {
 17011    30   390     9    30   465     0      19  return
 17012    30   390    16    30   465     0     111  wrap
 17013    30   390    20    30   465     0      59  (
 17014    30   390    21    30   465     0     111  array
 17015    30   390    26    30   465     0      66  ,
 17016    30   390    28    30   465     0     112  0
 17017    30   390    29    30   465     0      66  ,
 17018    30   390    31    30   465     0     111  array.length
 17019    30   390    43    30   465     0      60  )
 17020    30   390    44    30   465     0     102  ;
 17021    30   391     5    30   465     0      64  }
 17022    30   391     5    30   465     0    1174  ENDMETHOD
 17023    30   391     5    30   466     0    1175  STARTMETHOD
 17024    30   409    12    30   466     0      36  int
 17025    30   409    16    30   466     0     111  read
 17026    30   409    20    30   466     0      59  (
 17027    30   409    21    30   466     0     111  CharBuffer
 17028    30   409    32    30   466     0     111  target
 17029    30   409    38    30   466     0      60  )
 17030    30   409    40    30   466     0      25  throws
 17031    30   409    47    30   466     0     111  IOException
 17032    30   409    59    30   466     0      63  {
 17033    30   411     9    30   466     1      36  int
 17034    30   411    13    30   466     1     111  targetRemaining
 17035    30   411    29    30   466     1      67  =
 17036    30   411    31    30   466     1     111  target.remaining
 17037    30   411    47    30   466     1      59  (
 17038    30   411    48    30   466     1      60  )
 17039    30   411    49    30   466     1     102  ;
 17040    30   412     9    30   466     1      36  int
 17041    30   412    13    30   466     1     111  remaining
 17042    30   412    23    30   466     1      67  =
 17043    30   412    25    30   466     1     111  remaining
 17044    30   412    34    30   466     1      59  (
 17045    30   412    35    30   466     1      60  )
 17046    30   412    36    30   466     1     102  ;
 17047    30   413     9    30   466     0      31  if
 17048    30   413    12    30   466     0      59  (
 17049    30   413    13    30   466     0     111  remaining
 17050    30   413    23    30   466     0      68  ==
 17051    30   413    26    30   466     0     112  0
 17052    30   413    27    30   466     0      60  )
 17053    30   414    13    30   466     0      19  return
 17054    30   414    20    30   466     0      77  -
 17055    30   414    21    30   466     0     112  1
 17056    30   414    22    30   466     0     102  ;
 17057    30   415     9    30   466     0      36  int
 17058    30   415    13    30   466     0     111  n
 17059    30   415    15    30   466     0      67  =
 17060    30   415    17    30   466     0     111  Math.min
 17061    30   415    25    30   466     0      59  (
 17062    30   415    26    30   466     0     111  remaining
 17063    30   415    35    30   466     0      66  ,
 17064    30   415    37    30   466     0     111  targetRemaining
 17065    30   415    52    30   466     0      60  )
 17066    30   415    53    30   466     0     102  ;
 17067    30   416     9    30   466     0      36  int
 17068    30   416    13    30   466     0     111  limit
 17069    30   416    19    30   466     0      67  =
 17070    30   416    21    30   466     0     111  limit
 17071    30   416    26    30   466     0      59  (
 17072    30   416    27    30   466     0      60  )
 17073    30   416    28    30   466     0     102  ;
 17074    30   418     9    30   466     0      31  if
 17075    30   418    12    30   466     0      59  (
 17076    30   418    13    30   466     0     111  targetRemaining
 17077    30   418    29    30   466     0      93  <
 17078    30   418    31    30   466     0     111  remaining
 17079    30   418    40    30   466     0      60  )
 17080    30   419    13    30   466     0     111  limit
 17081    30   419    18    30   466     0      59  (
 17082    30   419    19    30   466     0     111  position
 17083    30   419    27    30   466     0      59  (
 17084    30   419    28    30   466     0      60  )
 17085    30   419    30    30   466     0      74  +
 17086    30   419    32    30   466     0     111  n
 17087    30   419    33    30   466     0      60  )
 17088    30   419    34    30   466     0     102  ;
 17089    30   420     9    30   466     0      35  try
 17090    30   420    13    30   466     0      63  {
 17091    30   421    13    30   466     0      31  if
 17092    30   421    16    30   466     0      59  (
 17093    30   421    17    30   466     0     111  n
 17094    30   421    19    30   466     0      89  >
 17095    30   421    21    30   466     0     112  0
 17096    30   421    22    30   466     0      60  )
 17097    30   422    17    30   466     0     111  target.put
 17098    30   422    27    30   466     0      59  (
 17099    30   422    28    30   466     0      44  this
 17100    30   422    32    30   466     0      60  )
 17101    30   422    33    30   466     0     102  ;
 17102    30   423     9    30   466     0      64  }
 17103    30   423    11    30   466     0      47  finally
 17104    30   423    19    30   466     0      63  {
 17105    30   424    13    30   466     0     111  limit
 17106    30   424    18    30   466     0      59  (
 17107    30   424    19    30   466     0     111  limit
 17108    30   424    24    30   466     0      60  )
 17109    30   424    25    30   466     0     102  ;
 17110    30   425     9    30   466     0      64  }
 17111    30   426     9    30   466     0      19  return
 17112    30   426    16    30   466     0     111  n
 17113    30   426    17    30   466     0     102  ;
 17114    30   427     5    30   466     0      64  }
 17115    30   427     5    30   466     0    1176  ENDMETHOD
 17116    30   427     5    30   467     0    1177  STARTMETHOD
 17117    30   458    12    30   467     0      45  static
 17118    30   458    19    30   467     0     111  CharBuffer
 17119    30   458    30    30   467     0     111  wrap
 17120    30   458    34    30   467     0      59  (
 17121    30   458    35    30   467     0     111  CharSequence
 17122    30   458    48    30   467     0     111  csq
 17123    30   458    51    30   467     0      66  ,
 17124    30   458    53    30   467     0      36  int
 17125    30   458    57    30   467     0     111  start
 17126    30   458    62    30   467     0      66  ,
 17127    30   458    64    30   467     0      36  int
 17128    30   458    68    30   467     0     111  end
 17129    30   458    71    30   467     0      60  )
 17130    30   458    73    30   467     0      63  {
 17131    30   459     9    30   467     0      35  try
 17132    30   459    13    30   467     0      63  {
 17133    30   460    13    30   467     0      19  return
 17134    30   460    24    30   467     0     111  StringCharBuffer
 17135    30   460    40    30   467     0      59  (
 17136    30   460    41    30   467     0     111  csq
 17137    30   460    44    30   467     0      66  ,
 17138    30   460    46    30   467     0     111  start
 17139    30   460    51    30   467     0      66  ,
 17140    30   460    53    30   467     0     111  end
 17141    30   460    56    30   467     0      60  )
 17142    30   460    57    30   467     0     102  ;
 17143    30   461     9    30   467     0      64  }
 17144    30   461    11    30   467     0      34  catch
 17145    30   461    17    30   467     0      59  (
 17146    30   461    18    30   467     0     111  IllegalArgumentException
 17147    30   461    43    30   467     0     111  x
 17148    30   461    44    30   467     0      60  )
 17149    30   461    46    30   467     0      63  {
 17150    30   462    13    30   467     0      20  throw
 17151    30   462    23    30   467     0     111  IndexOutOfBoundsException
 17152    30   462    48    30   467     0      59  (
 17153    30   462    49    30   467     0      60  )
 17154    30   462    50    30   467     0     102  ;
 17155    30   463     9    30   467     0      64  }
 17156    30   464     5    30   467     0      64  }
 17157    30   464     5    30   467     0    1178  ENDMETHOD
 17158    30   464     5    30   468     0    1179  STARTMETHOD
 17159    30   480    12    30   468     0      45  static
 17160    30   480    19    30   468     0     111  CharBuffer
 17161    30   480    30    30   468     0     111  wrap
 17162    30   480    34    30   468     0      59  (
 17163    30   480    35    30   468     0     111  CharSequence
 17164    30   480    48    30   468     0     111  csq
 17165    30   480    51    30   468     0      60  )
 17166    30   480    53    30   468     0      63  {
 17167    30   481     9    30   468     0      19  return
 17168    30   481    16    30   468     0     111  wrap
 17169    30   481    20    30   468     0      59  (
 17170    30   481    21    30   468     0     111  csq
 17171    30   481    24    30   468     0      66  ,
 17172    30   481    26    30   468     0     112  0
 17173    30   481    27    30   468     0      66  ,
 17174    30   481    29    30   468     0     111  csq.length
 17175    30   481    39    30   468     0      59  (
 17176    30   481    40    30   468     0      60  )
 17177    30   481    41    30   468     0      60  )
 17178    30   481    42    30   468     0     102  ;
 17179    30   482     5    30   468     0      64  }
 17180    30   482     5    30   468     0    1180  ENDMETHOD
 17181    30   503    21    30    -1     1     111  CharBuffer
 17182    30   503    32    30    -1     1     111  slice
 17183    30   503    37    30    -1     1      59  (
 17184    30   503    38    30    -1     1      60  )
 17185    30   503    39    30    -1     1     102  ;
 17186    30   520    21    30    -1     1     111  CharBuffer
 17187    30   520    32    30    -1     1     111  duplicate
 17188    30   520    41    30    -1     1      59  (
 17189    30   520    42    30    -1     1      60  )
 17190    30   520    43    30    -1     1     102  ;
 17191    30   540    21    30    -1     1     111  CharBuffer
 17192    30   540    32    30    -1     1     111  asReadOnlyBuffer
 17193    30   540    48    30    -1     1      59  (
 17194    30   540    49    30    -1     1      60  )
 17195    30   540    50    30    -1     1     102  ;
 17196    30   554    21    30    -1     0      40  char
 17197    30   554    26    30    -1     0     111  get
 17198    30   554    29    30    -1     0      59  (
 17199    30   554    30    30    -1     0      60  )
 17200    30   554    31    30    -1     0     102  ;
 17201    30   573    21    30    -1     0     111  CharBuffer
 17202    30   573    32    30    -1     0     111  put
 17203    30   573    35    30    -1     0      59  (
 17204    30   573    36    30    -1     0      40  char
 17205    30   573    41    30    -1     0     111  c
 17206    30   573    42    30    -1     0      60  )
 17207    30   573    43    30    -1     0     102  ;
 17208    30   588    21    30    -1     0      40  char
 17209    30   588    26    30    -1     0     111  get
 17210    30   588    29    30    -1     0      59  (
 17211    30   588    30    30    -1     0      36  int
 17212    30   588    34    30    -1     0     111  index
 17213    30   588    39    30    -1     0      60  )
 17214    30   588    40    30    -1     0     102  ;
 17215    30   611    21    30    -1     0     111  CharBuffer
 17216    30   611    32    30    -1     0     111  put
 17217    30   611    35    30    -1     0      59  (
 17218    30   611    36    30    -1     0      36  int
 17219    30   611    40    30    -1     0     111  index
 17220    30   611    45    30    -1     0      66  ,
 17221    30   611    47    30    -1     0      40  char
 17222    30   611    52    30    -1     0     111  c
 17223    30   611    53    30    -1     0      60  )
 17224    30   611    54    30    -1     0     102  ;
 17225    30   611    54    30   469     0    1181  STARTMETHOD
 17226    30   665    12    30   469     0     111  CharBuffer
 17227    30   665    23    30   469     0     111  get
 17228    30   665    26    30   469     0      59  (
 17229    30   665    27    30   469     0      40  char
 17230    30   665    31    30   469     0      61  [
 17231    30   665    32    30   469     0      62  ]
 17232    30   665    34    30   469     0     111  dst
 17233    30   665    37    30   469     0      66  ,
 17234    30   665    39    30   469     0      36  int
 17235    30   665    43    30   469     0     111  offset
 17236    30   665    49    30   469     0      66  ,
 17237    30   665    51    30   469     0      36  int
 17238    30   665    55    30   469     0     111  length
 17239    30   665    61    30   469     0      60  )
 17240    30   665    63    30   469     0      63  {
 17241    30   666     9    30   469     0     111  checkBounds
 17242    30   666    20    30   469     0      59  (
 17243    30   666    21    30   469     0     111  offset
 17244    30   666    27    30   469     0      66  ,
 17245    30   666    29    30   469     0     111  length
 17246    30   666    35    30   469     0      66  ,
 17247    30   666    37    30   469     0     111  dst.length
 17248    30   666    47    30   469     0      60  )
 17249    30   666    48    30   469     0     102  ;
 17250    30   667     9    30   469     0      31  if
 17251    30   667    12    30   469     0      59  (
 17252    30   667    13    30   469     0     111  length
 17253    30   667    20    30   469     0      89  >
 17254    30   667    22    30   469     0     111  remaining
 17255    30   667    31    30   469     0      59  (
 17256    30   667    32    30   469     0      60  )
 17257    30   667    33    30   469     0      60  )
 17258    30   668    13    30   469     0      20  throw
 17259    30   668    23    30   469     0     111  BufferUnderflowException
 17260    30   668    47    30   469     0      59  (
 17261    30   668    48    30   469     0      60  )
 17262    30   668    49    30   469     0     102  ;
 17263    30   669     9    30   469     0      36  int
 17264    30   669    13    30   469     0     111  end
 17265    30   669    17    30   469     0      67  =
 17266    30   669    19    30   469     0     111  offset
 17267    30   669    26    30   469     0      74  +
 17268    30   669    28    30   469     0     111  length
 17269    30   669    34    30   469     0     102  ;
 17270    30   670     9    30   469     0      37  for
 17271    30   670    13    30   469     0      59  (
 17272    30   670    14    30   469     0      36  int
 17273    30   670    18    30   469     0     111  i
 17274    30   670    20    30   469     0      67  =
 17275    30   670    22    30   469     0     111  offset
 17276    30   670    28    30   469     0     102  ;
 17277    30   670    30    30   469     0     111  i
 17278    30   670    32    30   469     0      93  <
 17279    30   670    34    30   469     0     111  end
 17280    30   670    37    30   469     0     102  ;
 17281    30   670    39    30   469     0     111  i
 17282    30   670    40    30   469     0      76  ++
 17283    30   670    42    30   469     0      60  )
 17284    30   671    13    30   469     0     111  dst
 17285    30   671    16    30   469     0      61  [
 17286    30   671    17    30   469     0     111  i
 17287    30   671    18    30   469     0      62  ]
 17288    30   671    20    30   469     0      67  =
 17289    30   671    22    30   469     0     111  get
 17290    30   671    25    30   469     0      59  (
 17291    30   671    26    30   469     0      60  )
 17292    30   671    27    30   469     0     102  ;
 17293    30   672     9    30   469     0      19  return
 17294    30   672    16    30   469     0      44  this
 17295    30   672    20    30   469     0     102  ;
 17296    30   673     5    30   469     0      64  }
 17297    30   673     5    30   469     0    1182  ENDMETHOD
 17298    30   673     5    30   470     0    1183  STARTMETHOD
 17299    30   691    12    30   470     0     111  CharBuffer
 17300    30   691    23    30   470     0     111  get
 17301    30   691    26    30   470     0      59  (
 17302    30   691    27    30   470     0      40  char
 17303    30   691    31    30   470     0      61  [
 17304    30   691    32    30   470     0      62  ]
 17305    30   691    34    30   470     0     111  dst
 17306    30   691    37    30   470     0      60  )
 17307    30   691    39    30   470     0      63  {
 17308    30   692     9    30   470     0      19  return
 17309    30   692    16    30   470     0     111  get
 17310    30   692    19    30   470     0      59  (
 17311    30   692    20    30   470     0     111  dst
 17312    30   692    23    30   470     0      66  ,
 17313    30   692    25    30   470     0     112  0
 17314    30   692    26    30   470     0      66  ,
 17315    30   692    28    30   470     0     111  dst.length
 17316    30   692    38    30   470     0      60  )
 17317    30   692    39    30   470     0     102  ;
 17318    30   693     5    30   470     0      64  }
 17319    30   693     5    30   470     0    1184  ENDMETHOD
 17320    30   693     5    30   471     0    1185  STARTMETHOD
 17321    30   739    12    30   471     0     111  CharBuffer
 17322    30   739    23    30   471     0     111  put
 17323    30   739    26    30   471     0      59  (
 17324    30   739    27    30   471     0     111  CharBuffer
 17325    30   739    38    30   471     0     111  src
 17326    30   739    41    30   471     0      60  )
 17327    30   739    43    30   471     0      63  {
 17328    30   740     9    30   471     0      31  if
 17329    30   740    12    30   471     0      59  (
 17330    30   740    13    30   471     0     111  src
 17331    30   740    17    30   471     0      68  ==
 17332    30   740    20    30   471     0      44  this
 17333    30   740    24    30   471     0      60  )
 17334    30   741    13    30   471     0      20  throw
 17335    30   741    23    30   471     0     111  IllegalArgumentException
 17336    30   741    47    30   471     0      59  (
 17337    30   741    48    30   471     0      60  )
 17338    30   741    49    30   471     0     102  ;
 17339    30   742     9    30   471     0      36  int
 17340    30   742    13    30   471     0     111  n
 17341    30   742    15    30   471     0      67  =
 17342    30   742    17    30   471     0     111  src.remaining
 17343    30   742    30    30   471     0      59  (
 17344    30   742    31    30   471     0      60  )
 17345    30   742    32    30   471     0     102  ;
 17346    30   743     9    30   471     0      31  if
 17347    30   743    12    30   471     0      59  (
 17348    30   743    13    30   471     0     111  n
 17349    30   743    15    30   471     0      89  >
 17350    30   743    17    30   471     0     111  remaining
 17351    30   743    26    30   471     0      59  (
 17352    30   743    27    30   471     0      60  )
 17353    30   743    28    30   471     0      60  )
 17354    30   744    13    30   471     0      20  throw
 17355    30   744    23    30   471     0     111  BufferOverflowException
 17356    30   744    46    30   471     0      59  (
 17357    30   744    47    30   471     0      60  )
 17358    30   744    48    30   471     0     102  ;
 17359    30   745     9    30   471     0      37  for
 17360    30   745    13    30   471     0      59  (
 17361    30   745    14    30   471     0      36  int
 17362    30   745    18    30   471     0     111  i
 17363    30   745    20    30   471     0      67  =
 17364    30   745    22    30   471     0     112  0
 17365    30   745    23    30   471     0     102  ;
 17366    30   745    25    30   471     0     111  i
 17367    30   745    27    30   471     0      93  <
 17368    30   745    29    30   471     0     111  n
 17369    30   745    30    30   471     0     102  ;
 17370    30   745    32    30   471     0     111  i
 17371    30   745    33    30   471     0      76  ++
 17372    30   745    35    30   471     0      60  )
 17373    30   746    13    30   471     0     111  put
 17374    30   746    16    30   471     0      59  (
 17375    30   746    17    30   471     0     111  src.get
 17376    30   746    24    30   471     0      59  (
 17377    30   746    25    30   471     0      60  )
 17378    30   746    26    30   471     0      60  )
 17379    30   746    27    30   471     0     102  ;
 17380    30   747     9    30   471     0      19  return
 17381    30   747    16    30   471     0      44  this
 17382    30   747    20    30   471     0     102  ;
 17383    30   748     5    30   471     0      64  }
 17384    30   748     5    30   471     0    1186  ENDMETHOD
 17385    30   748     5    30   472     0    1187  STARTMETHOD
 17386    30   800    12    30   472     0     111  CharBuffer
 17387    30   800    23    30   472     0     111  put
 17388    30   800    26    30   472     0      59  (
 17389    30   800    27    30   472     0      40  char
 17390    30   800    31    30   472     0      61  [
 17391    30   800    32    30   472     0      62  ]
 17392    30   800    34    30   472     0     111  src
 17393    30   800    37    30   472     0      66  ,
 17394    30   800    39    30   472     0      36  int
 17395    30   800    43    30   472     0     111  offset
 17396    30   800    49    30   472     0      66  ,
 17397    30   800    51    30   472     0      36  int
 17398    30   800    55    30   472     0     111  length
 17399    30   800    61    30   472     0      60  )
 17400    30   800    63    30   472     0      63  {
 17401    30   801     9    30   472     0     111  checkBounds
 17402    30   801    20    30   472     0      59  (
 17403    30   801    21    30   472     0     111  offset
 17404    30   801    27    30   472     0      66  ,
 17405    30   801    29    30   472     0     111  length
 17406    30   801    35    30   472     0      66  ,
 17407    30   801    37    30   472     0     111  src.length
 17408    30   801    47    30   472     0      60  )
 17409    30   801    48    30   472     0     102  ;
 17410    30   802     9    30   472     0      31  if
 17411    30   802    12    30   472     0      59  (
 17412    30   802    13    30   472     0     111  length
 17413    30   802    20    30   472     0      89  >
 17414    30   802    22    30   472     0     111  remaining
 17415    30   802    31    30   472     0      59  (
 17416    30   802    32    30   472     0      60  )
 17417    30   802    33    30   472     0      60  )
 17418    30   803    13    30   472     0      20  throw
 17419    30   803    23    30   472     0     111  BufferOverflowException
 17420    30   803    46    30   472     0      59  (
 17421    30   803    47    30   472     0      60  )
 17422    30   803    48    30   472     0     102  ;
 17423    30   804     9    30   472     0      36  int
 17424    30   804    13    30   472     0     111  end
 17425    30   804    17    30   472     0      67  =
 17426    30   804    19    30   472     0     111  offset
 17427    30   804    26    30   472     0      74  +
 17428    30   804    28    30   472     0     111  length
 17429    30   804    34    30   472     0     102  ;
 17430    30   805     9    30   472     0      37  for
 17431    30   805    13    30   472     0      59  (
 17432    30   805    14    30   472     0      36  int
 17433    30   805    18    30   472     0     111  i
 17434    30   805    20    30   472     0      67  =
 17435    30   805    22    30   472     0     111  offset
 17436    30   805    28    30   472     0     102  ;
 17437    30   805    30    30   472     0     111  i
 17438    30   805    32    30   472     0      93  <
 17439    30   805    34    30   472     0     111  end
 17440    30   805    37    30   472     0     102  ;
 17441    30   805    39    30   472     0     111  i
 17442    30   805    40    30   472     0      76  ++
 17443    30   805    42    30   472     0      60  )
 17444    30   806    13    30   472     0     111  this.put
 17445    30   806    21    30   472     0      59  (
 17446    30   806    22    30   472     0     111  src
 17447    30   806    25    30   472     0      61  [
 17448    30   806    26    30   472     0     111  i
 17449    30   806    27    30   472     0      62  ]
 17450    30   806    28    30   472     0      60  )
 17451    30   806    29    30   472     0     102  ;
 17452    30   807     9    30   472     0      19  return
 17453    30   807    16    30   472     0      44  this
 17454    30   807    20    30   472     0     102  ;
 17455    30   808     5    30   472     0      64  }
 17456    30   808     5    30   472     0    1188  ENDMETHOD
 17457    30   808     5    30   473     0    1189  STARTMETHOD
 17458    30   829    18    30   473     0     111  CharBuffer
 17459    30   829    29    30   473     0     111  put
 17460    30   829    32    30   473     0      59  (
 17461    30   829    33    30   473     0      40  char
 17462    30   829    37    30   473     0      61  [
 17463    30   829    38    30   473     0      62  ]
 17464    30   829    40    30   473     0     111  src
 17465    30   829    43    30   473     0      60  )
 17466    30   829    45    30   473     0      63  {
 17467    30   830     9    30   473     0      19  return
 17468    30   830    16    30   473     0     111  put
 17469    30   830    19    30   473     0      59  (
 17470    30   830    20    30   473     0     111  src
 17471    30   830    23    30   473     0      66  ,
 17472    30   830    25    30   473     0     112  0
 17473    30   830    26    30   473     0      66  ,
 17474    30   830    28    30   473     0     111  src.length
 17475    30   830    38    30   473     0      60  )
 17476    30   830    39    30   473     0     102  ;
 17477    30   831     5    30   473     0      64  }
 17478    30   831     5    30   473     0    1190  ENDMETHOD
 17479    30   831     5    30   474     0    1191  STARTMETHOD
 17480    30   887    12    30   474     0     111  CharBuffer
 17481    30   887    23    30   474     0     111  put
 17482    30   887    26    30   474     0      59  (
 17483    30   887    27    30   474     0     111  String
 17484    30   887    34    30   474     0     111  src
 17485    30   887    37    30   474     0      66  ,
 17486    30   887    39    30   474     0      36  int
 17487    30   887    43    30   474     0     111  start
 17488    30   887    48    30   474     0      66  ,
 17489    30   887    50    30   474     0      36  int
 17490    30   887    54    30   474     0     111  end
 17491    30   887    57    30   474     0      60  )
 17492    30   887    59    30   474     0      63  {
 17493    30   888     9    30   474     0     111  checkBounds
 17494    30   888    20    30   474     0      59  (
 17495    30   888    21    30   474     0     111  start
 17496    30   888    26    30   474     0      66  ,
 17497    30   888    28    30   474     0     111  end
 17498    30   888    32    30   474     0      77  -
 17499    30   888    34    30   474     0     111  start
 17500    30   888    39    30   474     0      66  ,
 17501    30   888    41    30   474     0     111  src.length
 17502    30   888    51    30   474     0      59  (
 17503    30   888    52    30   474     0      60  )
 17504    30   888    53    30   474     0      60  )
 17505    30   888    54    30   474     0     102  ;
 17506    30   889     9    30   474     0      37  for
 17507    30   889    13    30   474     0      59  (
 17508    30   889    14    30   474     0      36  int
 17509    30   889    18    30   474     0     111  i
 17510    30   889    20    30   474     0      67  =
 17511    30   889    22    30   474     0     111  start
 17512    30   889    27    30   474     0     102  ;
 17513    30   889    29    30   474     0     111  i
 17514    30   889    31    30   474     0      93  <
 17515    30   889    33    30   474     0     111  end
 17516    30   889    36    30   474     0     102  ;
 17517    30   889    38    30   474     0     111  i
 17518    30   889    39    30   474     0      76  ++
 17519    30   889    41    30   474     0      60  )
 17520    30   890    13    30   474     0     111  this.put
 17521    30   890    21    30   474     0      59  (
 17522    30   890    22    30   474     0     111  src.charAt
 17523    30   890    32    30   474     0      59  (
 17524    30   890    33    30   474     0     111  i
 17525    30   890    34    30   474     0      60  )
 17526    30   890    35    30   474     0      60  )
 17527    30   890    36    30   474     0     102  ;
 17528    30   891     9    30   474     0      19  return
 17529    30   891    16    30   474     0      44  this
 17530    30   891    20    30   474     0     102  ;
 17531    30   892     5    30   474     0      64  }
 17532    30   892     5    30   474     0    1192  ENDMETHOD
 17533    30   892     5    30   475     0    1193  STARTMETHOD
 17534    30   912    18    30   475     0     111  CharBuffer
 17535    30   912    29    30   475     0     111  put
 17536    30   912    32    30   475     0      59  (
 17537    30   912    33    30   475     0     111  String
 17538    30   912    40    30   475     0     111  src
 17539    30   912    43    30   475     0      60  )
 17540    30   912    45    30   475     0      63  {
 17541    30   913     9    30   475     0      19  return
 17542    30   913    16    30   475     0     111  put
 17543    30   913    19    30   475     0      59  (
 17544    30   913    20    30   475     0     111  src
 17545    30   913    23    30   475     0      66  ,
 17546    30   913    25    30   475     0     112  0
 17547    30   913    26    30   475     0      66  ,
 17548    30   913    28    30   475     0     111  src.length
 17549    30   913    38    30   475     0      59  (
 17550    30   913    39    30   475     0      60  )
 17551    30   913    40    30   475     0      60  )
 17552    30   913    41    30   475     0     102  ;
 17553    30   914     5    30   475     0      64  }
 17554    30   914     5    30   475     0    1194  ENDMETHOD
 17555    30   914     5    30   476     0    1195  STARTMETHOD
 17556    30   932    18    30   476     0      39  boolean
 17557    30   932    26    30   476     0     111  hasArray
 17558    30   932    34    30   476     0      59  (
 17559    30   932    35    30   476     0      60  )
 17560    30   932    37    30   476     0      63  {
 17561    30   933     9    30   476     0      19  return
 17562    30   933    16    30   476     0      59  (
 17563    30   933    17    30   476     0     111  hb
 17564    30   933    20    30   476     0      71  !=
 17565    30   933    23    30   476     0      21  null
 17566    30   933    27    30   476     0      60  )
 17567    30   933    29    30   476     0     101  &&
 17568    30   933    32    30   476     0      69  !
 17569    30   933    33    30   476     0     111  isReadOnly
 17570    30   933    43    30   476     0     102  ;
 17571    30   934     5    30   476     0      64  }
 17572    30   934     5    30   476     0    1196  ENDMETHOD
 17573    30   934     5    30   477     0    1197  STARTMETHOD
 17574    30   955    18    30   477     0      40  char
 17575    30   955    22    30   477     0      61  [
 17576    30   955    23    30   477     0      62  ]
 17577    30   955    25    30   477     0     111  array
 17578    30   955    30    30   477     0      59  (
 17579    30   955    31    30   477     0      60  )
 17580    30   955    33    30   477     0      63  {
 17581    30   956     9    30   477     0      31  if
 17582    30   956    12    30   477     0      59  (
 17583    30   956    13    30   477     0     111  hb
 17584    30   956    16    30   477     0      68  ==
 17585    30   956    19    30   477     0      21  null
 17586    30   956    23    30   477     0      60  )
 17587    30   957    13    30   477     0      20  throw
 17588    30   957    23    30   477     0     111  UnsupportedOperationException
 17589    30   957    52    30   477     0      59  (
 17590    30   957    53    30   477     0      60  )
 17591    30   957    54    30   477     0     102  ;
 17592    30   958     9    30   477     0      31  if
 17593    30   958    12    30   477     0      59  (
 17594    30   958    13    30   477     0     111  isReadOnly
 17595    30   958    23    30   477     0      60  )
 17596    30   959    13    30   477     0      20  throw
 17597    30   959    23    30   477     0     111  ReadOnlyBufferException
 17598    30   959    46    30   477     0      59  (
 17599    30   959    47    30   477     0      60  )
 17600    30   959    48    30   477     0     102  ;
 17601    30   960     9    30   477     0      19  return
 17602    30   960    16    30   477     0     111  hb
 17603    30   960    18    30   477     0     102  ;
 17604    30   961     5    30   477     0      64  }
 17605    30   961     5    30   477     0    1198  ENDMETHOD
 17606    30   961     5    30   478     0    1199  STARTMETHOD
 17607    30   983    18    30   478     0      36  int
 17608    30   983    22    30   478     0     111  arrayOffset
 17609    30   983    33    30   478     0      59  (
 17610    30   983    34    30   478     0      60  )
 17611    30   983    36    30   478     0      63  {
 17612    30   984     9    30   478     0      31  if
 17613    30   984    12    30   478     0      59  (
 17614    30   984    13    30   478     0     111  hb
 17615    30   984    16    30   478     0      68  ==
 17616    30   984    19    30   478     0      21  null
 17617    30   984    23    30   478     0      60  )
 17618    30   985    13    30   478     0      20  throw
 17619    30   985    23    30   478     0     111  UnsupportedOperationException
 17620    30   985    52    30   478     0      59  (
 17621    30   985    53    30   478     0      60  )
 17622    30   985    54    30   478     0     102  ;
 17623    30   986     9    30   478     0      31  if
 17624    30   986    12    30   478     0      59  (
 17625    30   986    13    30   478     0     111  isReadOnly
 17626    30   986    23    30   478     0      60  )
 17627    30   987    13    30   478     0      20  throw
 17628    30   987    23    30   478     0     111  ReadOnlyBufferException
 17629    30   987    46    30   478     0      59  (
 17630    30   987    47    30   478     0      60  )
 17631    30   987    48    30   478     0     102  ;
 17632    30   988     9    30   478     0      19  return
 17633    30   988    16    30   478     0     111  offset
 17634    30   988    22    30   478     0     102  ;
 17635    30   989     5    30   478     0      64  }
 17636    30   989     5    30   478     0    1200  ENDMETHOD
 17637    30  1030    21    30    -1     0     111  CharBuffer
 17638    30  1030    32    30    -1     0     111  compact
 17639    30  1030    39    30    -1     0      59  (
 17640    30  1030    40    30    -1     0      60  )
 17641    30  1030    41    30    -1     0     102  ;
 17642    30  1037    21    30    -1     0      39  boolean
 17643    30  1037    29    30    -1     0     111  isDirect
 17644    30  1037    37    30    -1     0      59  (
 17645    30  1037    38    30    -1     0      60  )
 17646    30  1037    39    30    -1     0     102  ;
 17647    30  1037    39    30   479     0    1201  STARTMETHOD
 17648    30  1077    12    30   479     0      36  int
 17649    30  1077    16    30   479     0     111  hashCode
 17650    30  1077    24    30   479     0      59  (
 17651    30  1077    25    30   479     0      60  )
 17652    30  1077    27    30   479     0      63  {
 17653    30  1078     9    30   479     0      36  int
 17654    30  1078    13    30   479     0     111  h
 17655    30  1078    15    30   479     0      67  =
 17656    30  1078    17    30   479     0     112  1
 17657    30  1078    18    30   479     0     102  ;
 17658    30  1079     9    30   479     0      36  int
 17659    30  1079    13    30   479     0     111  p
 17660    30  1079    15    30   479     0      67  =
 17661    30  1079    17    30   479     0     111  position
 17662    30  1079    25    30   479     0      59  (
 17663    30  1079    26    30   479     0      60  )
 17664    30  1079    27    30   479     0     102  ;
 17665    30  1080     9    30   479     0      37  for
 17666    30  1080    13    30   479     0      59  (
 17667    30  1080    14    30   479     0      36  int
 17668    30  1080    18    30   479     0     111  i
 17669    30  1080    20    30   479     0      67  =
 17670    30  1080    22    30   479     0     111  limit
 17671    30  1080    27    30   479     0      59  (
 17672    30  1080    28    30   479     0      60  )
 17673    30  1080    30    30   479     0      77  -
 17674    30  1080    32    30   479     0     112  1
 17675    30  1080    33    30   479     0     102  ;
 17676    30  1080    35    30   479     0     111  i
 17677    30  1080    37    30   479     0      88  >=
 17678    30  1080    40    30   479     0     111  p
 17679    30  1080    41    30   479     0     102  ;
 17680    30  1080    43    30   479     0     111  i
 17681    30  1080    44    30   479     0      79  --
 17682    30  1080    46    30   479     0      60  )
 17683    30  1081    13    30   479     0     111  h
 17684    30  1081    15    30   479     0      67  =
 17685    30  1081    17    30   479     0     112  31
 17686    30  1081    20    30   479     0      80  *
 17687    30  1081    22    30   479     0     111  h
 17688    30  1081    24    30   479     0      74  +
 17689    30  1081    26    30   479     0      59  (
 17690    30  1081    27    30   479     0      36  int
 17691    30  1081    30    30   479     0      60  )
 17692    30  1081    31    30   479     0     111  get
 17693    30  1081    34    30   479     0      59  (
 17694    30  1081    35    30   479     0     111  i
 17695    30  1081    36    30   479     0      60  )
 17696    30  1081    37    30   479     0     102  ;
 17697    30  1082     9    30   479     0      19  return
 17698    30  1082    16    30   479     0     111  h
 17699    30  1082    17    30   479     0     102  ;
 17700    30  1083     5    30   479     0      64  }
 17701    30  1083     5    30   479     0    1202  ENDMETHOD
 17702    30  1083     5    30   480     0    1203  STARTMETHOD
 17703    30  1110    12    30   480     0      39  boolean
 17704    30  1110    20    30   480     0     111  equals
 17705    30  1110    26    30   480     0      59  (
 17706    30  1110    27    30   480     0     111  Object
 17707    30  1110    34    30   480     0     111  ob
 17708    30  1110    36    30   480     0      60  )
 17709    30  1110    38    30   480     0      63  {
 17710    30  1111     9    30   480     0      31  if
 17711    30  1111    12    30   480     0      59  (
 17712    30  1111    13    30   480     0      44  this
 17713    30  1111    18    30   480     0      68  ==
 17714    30  1111    21    30   480     0     111  ob
 17715    30  1111    23    30   480     0      60  )
 17716    30  1112    13    30   480     0      19  return
 17717    30  1112    20    30   480     0      52  true
 17718    30  1112    24    30   480     0     102  ;
 17719    30  1113     9    30   480     0      31  if
 17720    30  1113    12    30   480     0      59  (
 17721    30  1113    13    30   480     0      69  !
 17722    30  1113    14    30   480     0      59  (
 17723    30  1113    15    30   480     0     111  ob
 17724    30  1113    29    30   480     0     111  CharBuffer
 17725    30  1113    39    30   480     0      60  )
 17726    30  1113    40    30   480     0      60  )
 17727    30  1114    13    30   480     0      19  return
 17728    30  1114    20    30   480     0      43  false
 17729    30  1114    25    30   480     0     102  ;
 17730    30  1115     9    30   480     0     111  CharBuffer
 17731    30  1115    20    30   480     0     111  that
 17732    30  1115    25    30   480     0      67  =
 17733    30  1115    27    30   480     0      59  (
 17734    30  1115    28    30   480     0     111  CharBuffer
 17735    30  1115    38    30   480     0      60  )
 17736    30  1115    39    30   480     0     111  ob
 17737    30  1115    41    30   480     0     102  ;
 17738    30  1116     9    30   480     0      31  if
 17739    30  1116    12    30   480     0      59  (
 17740    30  1116    13    30   480     0     111  this.remaining
 17741    30  1116    27    30   480     0      59  (
 17742    30  1116    28    30   480     0      60  )
 17743    30  1116    30    30   480     0      71  !=
 17744    30  1116    33    30   480     0     111  that.remaining
 17745    30  1116    47    30   480     0      59  (
 17746    30  1116    48    30   480     0      60  )
 17747    30  1116    49    30   480     0      60  )
 17748    30  1117    13    30   480     0      19  return
 17749    30  1117    20    30   480     0      43  false
 17750    30  1117    25    30   480     0     102  ;
 17751    30  1118     9    30   480     0      36  int
 17752    30  1118    13    30   480     0     111  p
 17753    30  1118    15    30   480     0      67  =
 17754    30  1118    17    30   480     0     111  this.position
 17755    30  1118    30    30   480     0      59  (
 17756    30  1118    31    30   480     0      60  )
 17757    30  1118    32    30   480     0     102  ;
 17758    30  1119     9    30   480     0      37  for
 17759    30  1119    13    30   480     0      59  (
 17760    30  1119    14    30   480     0      36  int
 17761    30  1119    18    30   480     0     111  i
 17762    30  1119    20    30   480     0      67  =
 17763    30  1119    22    30   480     0     111  this.limit
 17764    30  1119    32    30   480     0      59  (
 17765    30  1119    33    30   480     0      60  )
 17766    30  1119    35    30   480     0      77  -
 17767    30  1119    37    30   480     0     112  1
 17768    30  1119    38    30   480     0      66  ,
 17769    30  1119    40    30   480     0     111  j
 17770    30  1119    42    30   480     0      67  =
 17771    30  1119    44    30   480     0     111  that.limit
 17772    30  1119    54    30   480     0      59  (
 17773    30  1119    55    30   480     0      60  )
 17774    30  1119    57    30   480     0      77  -
 17775    30  1119    59    30   480     0     112  1
 17776    30  1119    60    30   480     0     102  ;
 17777    30  1119    62    30   480     0     111  i
 17778    30  1119    64    30   480     0      88  >=
 17779    30  1119    67    30   480     0     111  p
 17780    30  1119    68    30   480     0     102  ;
 17781    30  1119    70    30   480     0     111  i
 17782    30  1119    71    30   480     0      79  --
 17783    30  1119    73    30   480     0      66  ,
 17784    30  1119    75    30   480     0     111  j
 17785    30  1119    76    30   480     0      79  --
 17786    30  1119    78    30   480     0      60  )
 17787    30  1119    80    30   480     0      63  {
 17788    30  1120    13    30   480     1      40  char
 17789    30  1120    18    30   480     1     111  v1
 17790    30  1120    21    30   480     1      67  =
 17791    30  1120    23    30   480     1     111  this.get
 17792    30  1120    31    30   480     1      59  (
 17793    30  1120    32    30   480     1     111  i
 17794    30  1120    33    30   480     1      60  )
 17795    30  1120    34    30   480     1     102  ;
 17796    30  1121    13    30   480     1      40  char
 17797    30  1121    18    30   480     1     111  v2
 17798    30  1121    21    30   480     1      67  =
 17799    30  1121    23    30   480     1     111  that.get
 17800    30  1121    31    30   480     1      59  (
 17801    30  1121    32    30   480     1     111  j
 17802    30  1121    33    30   480     1      60  )
 17803    30  1121    34    30   480     1     102  ;
 17804    30  1122    13    30   480     0      31  if
 17805    30  1122    16    30   480     0      59  (
 17806    30  1122    17    30   480     0     111  v1
 17807    30  1122    20    30   480     0      71  !=
 17808    30  1122    23    30   480     0     111  v2
 17809    30  1122    25    30   480     0      60  )
 17810    30  1122    27    30   480     0      63  {
 17811    30  1123    17    30   480     0      31  if
 17812    30  1123    20    30   480     0      59  (
 17813    30  1123    21    30   480     0      59  (
 17814    30  1123    22    30   480     0     111  v1
 17815    30  1123    25    30   480     0      71  !=
 17816    30  1123    28    30   480     0     111  v1
 17817    30  1123    30    30   480     0      60  )
 17818    30  1123    32    30   480     0     101  &&
 17819    30  1123    35    30   480     0      59  (
 17820    30  1123    36    30   480     0     111  v2
 17821    30  1123    39    30   480     0      71  !=
 17822    30  1123    42    30   480     0     111  v2
 17823    30  1123    44    30   480     0      60  )
 17824    30  1123    45    30   480     0      60  )
 17825    30  1124    21    30   480     0      46  continue
 17826    30  1124    29    30   480     0     102  ;
 17827    30  1125    17    30   480     0      19  return
 17828    30  1125    24    30   480     0      43  false
 17829    30  1125    29    30   480     0     102  ;
 17830    30  1126    13    30   480     1      64  }
 17831    30  1127     9    30   480     1      64  }
 17832    30  1128     9    30   480     0      19  return
 17833    30  1128    16    30   480     0      52  true
 17834    30  1128    20    30   480     0     102  ;
 17835    30  1129     5    30   480     0      64  }
 17836    30  1129     5    30   480     0    1204  ENDMETHOD
 17837    30  1129     5    30   481     0    1205  STARTMETHOD
 17838    30  1143    12    30   481     0      36  int
 17839    30  1143    16    30   481     0     111  compareTo
 17840    30  1143    25    30   481     0      59  (
 17841    30  1143    26    30   481     0     111  CharBuffer
 17842    30  1143    37    30   481     0     111  that
 17843    30  1143    41    30   481     0      60  )
 17844    30  1143    43    30   481     0      63  {
 17845    30  1144     9    30   481     0      36  int
 17846    30  1144    13    30   481     0     111  n
 17847    30  1144    15    30   481     0      67  =
 17848    30  1144    17    30   481     0     111  this.position
 17849    30  1144    30    30   481     0      59  (
 17850    30  1144    31    30   481     0      60  )
 17851    30  1144    33    30   481     0      74  +
 17852    30  1144    35    30   481     0     111  Math.min
 17853    30  1144    43    30   481     0      59  (
 17854    30  1144    44    30   481     0     111  this.remaining
 17855    30  1144    58    30   481     0      59  (
 17856    30  1144    59    30   481     0      60  )
 17857    30  1144    60    30   481     0      66  ,
 17858    30  1144    62    30   481     0     111  that.remaining
 17859    30  1144    76    30   481     0      59  (
 17860    30  1144    77    30   481     0      60  )
 17861    30  1144    78    30   481     0      60  )
 17862    30  1144    79    30   481     0     102  ;
 17863    30  1145     9    30   481     0      37  for
 17864    30  1145    13    30   481     0      59  (
 17865    30  1145    14    30   481     0      36  int
 17866    30  1145    18    30   481     0     111  i
 17867    30  1145    20    30   481     0      67  =
 17868    30  1145    22    30   481     0     111  this.position
 17869    30  1145    35    30   481     0      59  (
 17870    30  1145    36    30   481     0      60  )
 17871    30  1145    37    30   481     0      66  ,
 17872    30  1145    39    30   481     0     111  j
 17873    30  1145    41    30   481     0      67  =
 17874    30  1145    43    30   481     0     111  that.position
 17875    30  1145    56    30   481     0      59  (
 17876    30  1145    57    30   481     0      60  )
 17877    30  1145    58    30   481     0     102  ;
 17878    30  1145    60    30   481     0     111  i
 17879    30  1145    62    30   481     0      93  <
 17880    30  1145    64    30   481     0     111  n
 17881    30  1145    65    30   481     0     102  ;
 17882    30  1145    67    30   481     0     111  i
 17883    30  1145    68    30   481     0      76  ++
 17884    30  1145    70    30   481     0      66  ,
 17885    30  1145    72    30   481     0     111  j
 17886    30  1145    73    30   481     0      76  ++
 17887    30  1145    75    30   481     0      60  )
 17888    30  1145    77    30   481     0      63  {
 17889    30  1146    13    30   481     1      40  char
 17890    30  1146    18    30   481     1     111  v1
 17891    30  1146    21    30   481     1      67  =
 17892    30  1146    23    30   481     1     111  this.get
 17893    30  1146    31    30   481     1      59  (
 17894    30  1146    32    30   481     1     111  i
 17895    30  1146    33    30   481     1      60  )
 17896    30  1146    34    30   481     1     102  ;
 17897    30  1147    13    30   481     1      40  char
 17898    30  1147    18    30   481     1     111  v2
 17899    30  1147    21    30   481     1      67  =
 17900    30  1147    23    30   481     1     111  that.get
 17901    30  1147    31    30   481     1      59  (
 17902    30  1147    32    30   481     1     111  j
 17903    30  1147    33    30   481     1      60  )
 17904    30  1147    34    30   481     1     102  ;
 17905    30  1148    13    30   481     0      31  if
 17906    30  1148    16    30   481     0      59  (
 17907    30  1148    17    30   481     0     111  v1
 17908    30  1148    20    30   481     0      68  ==
 17909    30  1148    23    30   481     0     111  v2
 17910    30  1148    25    30   481     0      60  )
 17911    30  1149    17    30   481     0      46  continue
 17912    30  1149    25    30   481     0     102  ;
 17913    30  1150    13    30   481     0      31  if
 17914    30  1150    16    30   481     0      59  (
 17915    30  1150    17    30   481     0      59  (
 17916    30  1150    18    30   481     0     111  v1
 17917    30  1150    21    30   481     0      71  !=
 17918    30  1150    24    30   481     0     111  v1
 17919    30  1150    26    30   481     0      60  )
 17920    30  1150    28    30   481     0     101  &&
 17921    30  1150    31    30   481     0      59  (
 17922    30  1150    32    30   481     0     111  v2
 17923    30  1150    35    30   481     0      71  !=
 17924    30  1150    38    30   481     0     111  v2
 17925    30  1150    40    30   481     0      60  )
 17926    30  1150    41    30   481     0      60  )
 17927    30  1151    17    30   481     0      46  continue
 17928    30  1151    25    30   481     0     102  ;
 17929    30  1152    13    30   481     0      31  if
 17930    30  1152    16    30   481     0      59  (
 17931    30  1152    17    30   481     0     111  v1
 17932    30  1152    20    30   481     0      93  <
 17933    30  1152    22    30   481     0     111  v2
 17934    30  1152    24    30   481     0      60  )
 17935    30  1153    17    30   481     0      19  return
 17936    30  1153    24    30   481     0      77  -
 17937    30  1153    25    30   481     0     112  1
 17938    30  1153    26    30   481     0     102  ;
 17939    30  1154    13    30   481     0      19  return
 17940    30  1154    20    30   481     0      74  +
 17941    30  1154    21    30   481     0     112  1
 17942    30  1154    22    30   481     0     102  ;
 17943    30  1155     9    30   481     0      64  }
 17944    30  1156     9    30   481     0      19  return
 17945    30  1156    16    30   481     0     111  this.remaining
 17946    30  1156    30    30   481     0      59  (
 17947    30  1156    31    30   481     0      60  )
 17948    30  1156    33    30   481     0      77  -
 17949    30  1156    35    30   481     0     111  that.remaining
 17950    30  1156    49    30   481     0      59  (
 17951    30  1156    50    30   481     0      60  )
 17952    30  1156    51    30   481     0     102  ;
 17953    30  1157     5    30   481     0      64  }
 17954    30  1157     5    30   481     0    1206  ENDMETHOD
 17955    30  1157     5    30   482     0    1207  STARTMETHOD
 17956    30  1175    12    30   482     0     111  String
 17957    30  1175    19    30   482     0     111  toString
 17958    30  1175    27    30   482     0      59  (
 17959    30  1175    28    30   482     0      60  )
 17960    30  1175    30    30   482     0      63  {
 17961    30  1176     9    30   482     0      19  return
 17962    30  1176    16    30   482     0     111  toString
 17963    30  1176    24    30   482     0      59  (
 17964    30  1176    25    30   482     0     111  position
 17965    30  1176    33    30   482     0      59  (
 17966    30  1176    34    30   482     0      60  )
 17967    30  1176    35    30   482     0      66  ,
 17968    30  1176    37    30   482     0     111  limit
 17969    30  1176    42    30   482     0      59  (
 17970    30  1176    43    30   482     0      60  )
 17971    30  1176    44    30   482     0      60  )
 17972    30  1176    45    30   482     0     102  ;
 17973    30  1177     5    30   482     0      64  }
 17974    30  1177     5    30   482     0    1208  ENDMETHOD
 17975    30  1179    14    30    -1     0     111  String
 17976    30  1179    21    30    -1     0     111  toString
 17977    30  1179    29    30    -1     0      59  (
 17978    30  1179    30    30    -1     0      36  int
 17979    30  1179    34    30    -1     0     111  start
 17980    30  1179    39    30    -1     0      66  ,
 17981    30  1179    41    30    -1     0      36  int
 17982    30  1179    45    30    -1     0     111  end
 17983    30  1179    48    30    -1     0      60  )
 17984    30  1179    49    30    -1     0     102  ;
 17985    30  1179    49    30   483     0    1209  STARTMETHOD
 17986    30  1194    18    30   483     0      36  int
 17987    30  1194    22    30   483     0     111  length
 17988    30  1194    28    30   483     0      59  (
 17989    30  1194    29    30   483     0      60  )
 17990    30  1194    31    30   483     0      63  {
 17991    30  1195     9    30   483     0      19  return
 17992    30  1195    16    30   483     0     111  remaining
 17993    30  1195    25    30   483     0      59  (
 17994    30  1195    26    30   483     0      60  )
 17995    30  1195    27    30   483     0     102  ;
 17996    30  1196     5    30   483     0      64  }
 17997    30  1196     5    30   483     0    1210  ENDMETHOD
 17998    30  1196     5    30   484     0    1211  STARTMETHOD
 17999    30  1212    18    30   484     0      40  char
 18000    30  1212    23    30   484     0     111  charAt
 18001    30  1212    29    30   484     0      59  (
 18002    30  1212    30    30   484     0      36  int
 18003    30  1212    34    30   484     0     111  index
 18004    30  1212    39    30   484     0      60  )
 18005    30  1212    41    30   484     0      63  {
 18006    30  1213     9    30   484     0      19  return
 18007    30  1213    16    30   484     0     111  get
 18008    30  1213    19    30   484     0      59  (
 18009    30  1213    20    30   484     0     111  position
 18010    30  1213    28    30   484     0      59  (
 18011    30  1213    29    30   484     0      60  )
 18012    30  1213    31    30   484     0      74  +
 18013    30  1213    33    30   484     0     111  checkIndex
 18014    30  1213    43    30   484     0      59  (
 18015    30  1213    44    30   484     0     111  index
 18016    30  1213    49    30   484     0      66  ,
 18017    30  1213    51    30   484     0     112  1
 18018    30  1213    52    30   484     0      60  )
 18019    30  1213    53    30   484     0      60  )
 18020    30  1213    54    30   484     0     102  ;
 18021    30  1214     5    30   484     0      64  }
 18022    30  1214     5    30   484     0    1212  ENDMETHOD
 18023    30  1246    21    30    -1     0     111  CharSequence
 18024    30  1246    34    30    -1     0     111  subSequence
 18025    30  1246    45    30    -1     0      59  (
 18026    30  1246    46    30    -1     0      36  int
 18027    30  1246    50    30    -1     0     111  start
 18028    30  1246    55    30    -1     0      66  ,
 18029    30  1246    57    30    -1     0      36  int
 18030    30  1246    61    30    -1     0     111  end
 18031    30  1246    64    30    -1     0      60  )
 18032    30  1246    65    30    -1     0     102  ;
 18033    30  1246    65    30   485     0    1213  STARTMETHOD
 18034    30  1282    12    30   485     0     111  CharBuffer
 18035    30  1282    23    30   485     0     111  append
 18036    30  1282    29    30   485     0      59  (
 18037    30  1282    30    30   485     0     111  CharSequence
 18038    30  1282    43    30   485     0     111  csq
 18039    30  1282    46    30   485     0      60  )
 18040    30  1282    48    30   485     0      63  {
 18041    30  1283     9    30   485     0      31  if
 18042    30  1283    12    30   485     0      59  (
 18043    30  1283    13    30   485     0     111  csq
 18044    30  1283    17    30   485     0      68  ==
 18045    30  1283    20    30   485     0      21  null
 18046    30  1283    24    30   485     0      60  )
 18047    30  1284    13    30   485     0      19  return
 18048    30  1284    20    30   485     0     111  put
 18049    30  1284    23    30   485     0      59  (
 18050    30  1284    24    30   485     0     107  "null"
 18051    30  1284    30    30   485     0      60  )
 18052    30  1284    31    30   485     0     102  ;
 18053    30  1285     9    30   485     0      48  else
 18054    30  1286    13    30   485     0      19  return
 18055    30  1286    20    30   485     0     111  put
 18056    30  1286    23    30   485     0      59  (
 18057    30  1286    24    30   485     0     111  csq.toString
 18058    30  1286    36    30   485     0      59  (
 18059    30  1286    37    30   485     0      60  )
 18060    30  1286    38    30   485     0      60  )
 18061    30  1286    39    30   485     0     102  ;
 18062    30  1287     5    30   485     0      64  }
 18063    30  1287     5    30   485     0    1214  ENDMETHOD
 18064    30  1287     5    30   486     0    1215  STARTMETHOD
 18065    30  1321    12    30   486     0     111  CharBuffer
 18066    30  1321    23    30   486     0     111  append
 18067    30  1321    29    30   486     0      59  (
 18068    30  1321    30    30   486     0     111  CharSequence
 18069    30  1321    43    30   486     0     111  csq
 18070    30  1321    46    30   486     0      66  ,
 18071    30  1321    48    30   486     0      36  int
 18072    30  1321    52    30   486     0     111  start
 18073    30  1321    57    30   486     0      66  ,
 18074    30  1321    59    30   486     0      36  int
 18075    30  1321    63    30   486     0     111  end
 18076    30  1321    66    30   486     0      60  )
 18077    30  1321    68    30   486     0      63  {
 18078    30  1322     9    30   486     0     111  CharSequence
 18079    30  1322    22    30   486     0     111  cs
 18080    30  1322    25    30   486     0      67  =
 18081    30  1322    27    30   486     0      59  (
 18082    30  1322    28    30   486     0     111  csq
 18083    30  1322    32    30   486     0      68  ==
 18084    30  1322    35    30   486     0      21  null
 18085    30  1322    40    30   486     0      58  ?
 18086    30  1322    42    30   486     0     107  "null"
 18087    30  1322    49    30   486     0      65  :
 18088    30  1322    51    30   486     0     111  csq
 18089    30  1322    54    30   486     0      60  )
 18090    30  1322    55    30   486     0     102  ;
 18091    30  1323     9    30   486     0      19  return
 18092    30  1323    16    30   486     0     111  put
 18093    30  1323    19    30   486     0      59  (
 18094    30  1323    20    30   486     0     111  cs.subSequence
 18095    30  1323    34    30   486     0      59  (
 18096    30  1323    35    30   486     0     111  start
 18097    30  1323    40    30   486     0      66  ,
 18098    30  1323    42    30   486     0     111  end
 18099    30  1323    45    30   486     0      60  )
 18100    30  1323    46    30   486     0      54  .
 18101    30  1323    47    30   486     0     111  toString
 18102    30  1323    55    30   486     0      59  (
 18103    30  1323    56    30   486     0      60  )
 18104    30  1323    57    30   486     0      60  )
 18105    30  1323    58    30   486     0     102  ;
 18106    30  1324     5    30   486     0      64  }
 18107    30  1324     5    30   486     0    1216  ENDMETHOD
 18108    30  1324     5    30   487     0    1217  STARTMETHOD
 18109    30  1349    12    30   487     0     111  CharBuffer
 18110    30  1349    23    30   487     0     111  append
 18111    30  1349    29    30   487     0      59  (
 18112    30  1349    30    30   487     0      40  char
 18113    30  1349    35    30   487     0     111  c
 18114    30  1349    36    30   487     0      60  )
 18115    30  1349    38    30   487     0      63  {
 18116    30  1350     9    30   487     0      19  return
 18117    30  1350    16    30   487     0     111  put
 18118    30  1350    19    30   487     0      59  (
 18119    30  1350    20    30   487     0     111  c
 18120    30  1350    21    30   487     0      60  )
 18121    30  1350    22    30   487     0     102  ;
 18122    30  1351     5    30   487     0      64  }
 18123    30  1351     5    30   487     0    1218  ENDMETHOD
 18124    30  1372    21    30    -1     0     111  ByteOrder
 18125    30  1372    31    30    -1     0     111  order
 18126    30  1372    36    30    -1     0      59  (
 18127    30  1372    37    30    -1     0      60  )
 18128    30  1372    38    30    -1     0     102  ;
 18129    30  1426     1    30    -1     0      64  }
 18130    30  1426     1    30    -1     1    1219  ENDCLASS
 18131    30  1426     1    -1    -1     1    1220  ENDFILE C:\Users\RA\javasrc\java\nio\CharBuffer.java
 18132    31     1     1    -1    -1     1    1221  STARTFILE C:\Users\RA\javasrc\java\nio\DirectByteBuffer.java
 18133    31    28     9    -1    -1     0     111  java.nio
 18134    31    28    17    -1    -1     0     102  ;
 18135    31    30     1    -1    -1     1      49  import
 18136    31    30     8    -1    -1     1     111  sun.misc.Cleaner
 18137    31    30    24    -1    -1     1     102  ;
 18138    31    31     1    -1    -1     1      49  import
 18139    31    31     8    -1    -1     1     111  sun.misc.Unsafe
 18140    31    31    23    -1    -1     1     102  ;
 18141    31    32     1    -1    -1     1      49  import
 18142    31    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 18143    31    32    31    -1    -1     1     102  ;
 18144    31    33     1    -1    -1     1      49  import
 18145    31    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 18146    31    33    34    -1    -1     1     102  ;
 18147    31    36     1    31    -1     0    1222  STARTCLASS
 18148    31    36     1    31    -1     0      24  class
 18149    31    36     7    31    -1     0     111  DirectByteBuffer
 18150    31    38     5    31    -1     0      38  extends
 18151    31    38    13    31    -1     0     111  MappedByteBuffer
 18152    31    42     5    31    -1     0      17  implements
 18153    31    42    16    31    -1     0     111  DirectBuffer
 18154    31    43     1    31    -1     0      63  {
 18155    31    48     5    31    -1     0      23  protected
 18156    31    48    15    31    -1     0      45  static
 18157    31    48    28    31    -1     0     111  Unsafe
 18158    31    48    35    31    -1     0     111  unsafe
 18159    31    48    42    31    -1     0      67  =
 18160    31    48    44    31    -1     0     111  Bits.unsafe
 18161    31    48    55    31    -1     0      59  (
 18162    31    48    56    31    -1     0      60  )
 18163    31    48    57    31    -1     0     102  ;
 18164    31    51     5    31    -1     0      23  protected
 18165    31    51    15    31    -1     0      45  static
 18166    31    51    28    31    -1     0      39  boolean
 18167    31    51    36    31    -1     0     111  unaligned
 18168    31    51    46    31    -1     0      67  =
 18169    31    51    48    31    -1     0     111  Bits.unaligned
 18170    31    51    62    31    -1     0      59  (
 18171    31    51    63    31    -1     0      60  )
 18172    31    51    64    31    -1     0     102  ;
 18173    31    59     5    31    -1     0      23  protected
 18174    31    59    15    31    -1     0     111  Object
 18175    31    59    22    31    -1     0     111  viewedBuffer
 18176    31    59    35    31    -1     0      67  =
 18177    31    59    37    31    -1     0      21  null
 18178    31    59    41    31    -1     0     102  ;
 18179    31    59    41    31   488     0    1223  STARTMETHOD
 18180    31    61    12    31   488     0     111  Object
 18181    31    61    19    31   488     0     111  viewedBuffer
 18182    31    61    31    31   488     0      59  (
 18183    31    61    32    31   488     0      60  )
 18184    31    61    34    31   488     0      63  {
 18185    31    62     9    31   488     0      19  return
 18186    31    62    16    31   488     0     111  viewedBuffer
 18187    31    62    28    31   488     0     102  ;
 18188    31    63     5    31   488     0      64  }
 18189    31    63     5    31   488     0    1224  ENDMETHOD
 18190    31    67     5    31    -1     0      41  private
 18191    31    67    13    31    -1     0      45  static
 18192    31    67    20    31    -1     0      24  class
 18193    31    67    26    31    -1     0     111  Deallocator
 18194    31    68     9    31    -1     0      17  implements
 18195    31    68    20    31    -1     0     111  Runnable
 18196    31    69     5    31    -1     0      63  {
 18197    31    71     9    31    -1     0      41  private
 18198    31    71    17    31    -1     0      45  static
 18199    31    71    24    31    -1     0     111  Unsafe
 18200    31    71    31    31    -1     0     111  unsafe
 18201    31    71    38    31    -1     0      67  =
 18202    31    71    40    31    -1     0     111  Unsafe.getUnsafe
 18203    31    71    56    31    -1     0      59  (
 18204    31    71    57    31    -1     0      60  )
 18205    31    71    58    31    -1     0     102  ;
 18206    31    73     9    31    -1     0      41  private
 18207    31    73    17    31    -1     0      53  long
 18208    31    73    22    31    -1     0     111  address
 18209    31    73    29    31    -1     0     102  ;
 18210    31    74     9    31    -1     0      41  private
 18211    31    74    17    31    -1     0      36  int
 18212    31    74    21    31    -1     0     111  capacity
 18213    31    74    29    31    -1     0     102  ;
 18214    31    74    29    31   489     0    1225  STARTMETHOD
 18215    31    76     9    31   489     0      41  private
 18216    31    76    17    31   489     0     111  Deallocator
 18217    31    76    28    31   489     0      59  (
 18218    31    76    29    31   489     0      53  long
 18219    31    76    34    31   489     0     111  address
 18220    31    76    41    31   489     0      66  ,
 18221    31    76    43    31   489     0      36  int
 18222    31    76    47    31   489     0     111  capacity
 18223    31    76    55    31   489     0      60  )
 18224    31    76    57    31   489     0      63  {
 18225    31    77    13    31   489     0     111  assert
 18226    31    77    20    31   489     0      59  (
 18227    31    77    21    31   489     0     111  address
 18228    31    77    29    31   489     0      71  !=
 18229    31    77    32    31   489     0     112  0
 18230    31    77    33    31   489     0      60  )
 18231    31    77    34    31   489     0     102  ;
 18232    31    78    13    31   489     1     111  this.address
 18233    31    78    26    31   489     1      67  =
 18234    31    78    28    31   489     1     111  address
 18235    31    78    35    31   489     1     102  ;
 18236    31    79    13    31   489     1     111  this.capacity
 18237    31    79    27    31   489     1      67  =
 18238    31    79    29    31   489     1     111  capacity
 18239    31    79    37    31   489     1     102  ;
 18240    31    80     9    31   489     0      64  }
 18241    31    80     9    31   489     0    1226  ENDMETHOD
 18242    31    80     9    31   490     0    1227  STARTMETHOD
 18243    31    82    16    31   490     0      50  void
 18244    31    82    21    31   490     0     111  run
 18245    31    82    24    31   490     0      59  (
 18246    31    82    25    31   490     0      60  )
 18247    31    82    27    31   490     0      63  {
 18248    31    83    13    31   490     0      31  if
 18249    31    83    16    31   490     0      59  (
 18250    31    83    17    31   490     0     111  address
 18251    31    83    25    31   490     0      68  ==
 18252    31    83    28    31   490     0     112  0
 18253    31    83    29    31   490     0      60  )
 18254    31    83    31    31   490     0      63  {
 18255    31    85    17    31   490     0      19  return
 18256    31    85    23    31   490     0     102  ;
 18257    31    86    13    31   490     0      64  }
 18258    31    87    13    31   490     0     111  unsafe.freeMemory
 18259    31    87    30    31   490     0      59  (
 18260    31    87    31    31   490     0     111  address
 18261    31    87    38    31   490     0      60  )
 18262    31    87    39    31   490     0     102  ;
 18263    31    88    13    31   490     0     111  address
 18264    31    88    21    31   490     0      67  =
 18265    31    88    23    31   490     0     112  0
 18266    31    88    24    31   490     0     102  ;
 18267    31    89    13    31   490     0     111  Bits.unreserveMemory
 18268    31    89    33    31   490     0      59  (
 18269    31    89    34    31   490     0     111  capacity
 18270    31    89    42    31   490     0      60  )
 18271    31    89    43    31   490     0     102  ;
 18272    31    90     9    31   490     0      64  }
 18273    31    90     9    31   490     0    1228  ENDMETHOD
 18274    31    92     5    31    -1     0      64  }
 18275    31    94     5    31    -1     0      41  private
 18276    31    94    19    31    -1     0     111  Cleaner
 18277    31    94    27    31    -1     0     111  cleaner
 18278    31    94    34    31    -1     0     102  ;
 18279    31    94    34    31   491     0    1229  STARTMETHOD
 18280    31    96    12    31   491     0     111  Cleaner
 18281    31    96    20    31   491     0     111  cleaner
 18282    31    96    27    31   491     0      59  (
 18283    31    96    28    31   491     0      60  )
 18284    31    96    30    31   491     0      63  {
 18285    31    96    32    31   491     0      19  return
 18286    31    96    39    31   491     0     111  cleaner
 18287    31    96    46    31   491     0     102  ;
 18288    31    96    48    31   491     0      64  }
 18289    31    96    48    31   491     0    1230  ENDMETHOD
 18290    31    96    48    31   492     0    1231  STARTMETHOD
 18291    31   110     5    31   492     0     111  DirectByteBuffer
 18292    31   110    21    31   492     0      59  (
 18293    31   110    22    31   492     0      36  int
 18294    31   110    26    31   492     0     111  cap
 18295    31   110    29    31   492     0      60  )
 18296    31   110    31    31   492     0      63  {
 18297    31   112     9    31   492     0      27  super
 18298    31   112    14    31   492     0      59  (
 18299    31   112    15    31   492     0      77  -
 18300    31   112    16    31   492     0     112  1
 18301    31   112    17    31   492     0      66  ,
 18302    31   112    19    31   492     0     112  0
 18303    31   112    20    31   492     0      66  ,
 18304    31   112    22    31   492     0     111  cap
 18305    31   112    25    31   492     0      66  ,
 18306    31   112    27    31   492     0     111  cap
 18307    31   112    30    31   492     0      66  ,
 18308    31   112    32    31   492     0      43  false
 18309    31   112    37    31   492     0      60  )
 18310    31   112    38    31   492     0     102  ;
 18311    31   113     9    31   492     0     111  Bits.reserveMemory
 18312    31   113    27    31   492     0      59  (
 18313    31   113    28    31   492     0     111  cap
 18314    31   113    31    31   492     0      60  )
 18315    31   113    32    31   492     0     102  ;
 18316    31   114     9    31   492     0      36  int
 18317    31   114    13    31   492     0     111  ps
 18318    31   114    16    31   492     0      67  =
 18319    31   114    18    31   492     0     111  Bits.pageSize
 18320    31   114    31    31   492     0      59  (
 18321    31   114    32    31   492     0      60  )
 18322    31   114    33    31   492     0     102  ;
 18323    31   115     9    31   492     0      53  long
 18324    31   115    14    31   492     0     111  base
 18325    31   115    19    31   492     0      67  =
 18326    31   115    21    31   492     0     112  0
 18327    31   115    22    31   492     0     102  ;
 18328    31   116     9    31   492     0      35  try
 18329    31   116    13    31   492     0      63  {
 18330    31   117    13    31   492     0     111  base
 18331    31   117    18    31   492     0      67  =
 18332    31   117    20    31   492     0     111  unsafe.allocateMemory
 18333    31   117    41    31   492     0      59  (
 18334    31   117    42    31   492     0     111  cap
 18335    31   117    46    31   492     0      74  +
 18336    31   117    48    31   492     0     111  ps
 18337    31   117    50    31   492     0      60  )
 18338    31   117    51    31   492     0     102  ;
 18339    31   118     9    31   492     0      64  }
 18340    31   118    11    31   492     0      34  catch
 18341    31   118    17    31   492     0      59  (
 18342    31   118    18    31   492     0     111  OutOfMemoryError
 18343    31   118    35    31   492     0     111  x
 18344    31   118    36    31   492     0      60  )
 18345    31   118    38    31   492     0      63  {
 18346    31   119    13    31   492     0     111  Bits.unreserveMemory
 18347    31   119    33    31   492     0      59  (
 18348    31   119    34    31   492     0     111  cap
 18349    31   119    37    31   492     0      60  )
 18350    31   119    38    31   492     0     102  ;
 18351    31   120    13    31   492     0      20  throw
 18352    31   120    19    31   492     0     111  x
 18353    31   120    20    31   492     0     102  ;
 18354    31   121     9    31   492     0      64  }
 18355    31   122     9    31   492     0     111  unsafe.setMemory
 18356    31   122    25    31   492     0      59  (
 18357    31   122    26    31   492     0     111  base
 18358    31   122    30    31   492     0      66  ,
 18359    31   122    32    31   492     0     111  cap
 18360    31   122    36    31   492     0      74  +
 18361    31   122    38    31   492     0     111  ps
 18362    31   122    40    31   492     0      66  ,
 18363    31   122    42    31   492     0      59  (
 18364    31   122    47    31   492     0      60  )
 18365    31   122    49    31   492     0     112  0
 18366    31   122    50    31   492     0      60  )
 18367    31   122    51    31   492     0     102  ;
 18368    31   123     9    31   492     0      31  if
 18369    31   123    12    31   492     0      59  (
 18370    31   123    13    31   492     0     111  base
 18371    31   123    18    31   492     0      82  %
 18372    31   123    20    31   492     0     111  ps
 18373    31   123    23    31   492     0      71  !=
 18374    31   123    26    31   492     0     112  0
 18375    31   123    27    31   492     0      60  )
 18376    31   123    29    31   492     0      63  {
 18377    31   125    13    31   492     0     111  address
 18378    31   125    21    31   492     0      67  =
 18379    31   125    23    31   492     0     111  base
 18380    31   125    28    31   492     0      74  +
 18381    31   125    30    31   492     0     111  ps
 18382    31   125    33    31   492     0      77  -
 18383    31   125    35    31   492     0      59  (
 18384    31   125    36    31   492     0     111  base
 18385    31   125    41    31   492     0      99  &
 18386    31   125    43    31   492     0      59  (
 18387    31   125    44    31   492     0     111  ps
 18388    31   125    47    31   492     0      77  -
 18389    31   125    49    31   492     0     112  1
 18390    31   125    50    31   492     0      60  )
 18391    31   125    51    31   492     0      60  )
 18392    31   125    52    31   492     0     102  ;
 18393    31   126     9    31   492     0      64  }
 18394    31   126    11    31   492     0      48  else
 18395    31   126    16    31   492     0      63  {
 18396    31   127    13    31   492     0     111  address
 18397    31   127    21    31   492     0      67  =
 18398    31   127    23    31   492     0     111  base
 18399    31   127    27    31   492     0     102  ;
 18400    31   128     9    31   492     0      64  }
 18401    31   129     9    31   492     0     111  cleaner
 18402    31   129    17    31   492     0      67  =
 18403    31   129    19    31   492     0     111  Cleaner.create
 18404    31   129    33    31   492     0      59  (
 18405    31   129    34    31   492     0      44  this
 18406    31   129    38    31   492     0      66  ,
 18407    31   129    44    31   492     0     111  Deallocator
 18408    31   129    55    31   492     0      59  (
 18409    31   129    56    31   492     0     111  base
 18410    31   129    60    31   492     0      66  ,
 18411    31   129    62    31   492     0     111  cap
 18412    31   129    65    31   492     0      60  )
 18413    31   129    66    31   492     0      60  )
 18414    31   129    67    31   492     0     102  ;
 18415    31   133     5    31   492     0      64  }
 18416    31   133     5    31   492     0    1232  ENDMETHOD
 18417    31   133     5    31   493     0    1233  STARTMETHOD
 18418    31   139     5    31   493     0      41  private
 18419    31   139    13    31   493     0     111  DirectByteBuffer
 18420    31   139    29    31   493     0      59  (
 18421    31   139    30    31   493     0      53  long
 18422    31   139    35    31   493     0     111  addr
 18423    31   139    39    31   493     0      66  ,
 18424    31   139    41    31   493     0      36  int
 18425    31   139    45    31   493     0     111  cap
 18426    31   139    48    31   493     0      60  )
 18427    31   139    50    31   493     0      63  {
 18428    31   140     9    31   493     0      27  super
 18429    31   140    14    31   493     0      59  (
 18430    31   140    15    31   493     0      77  -
 18431    31   140    16    31   493     0     112  1
 18432    31   140    17    31   493     0      66  ,
 18433    31   140    19    31   493     0     112  0
 18434    31   140    20    31   493     0      66  ,
 18435    31   140    22    31   493     0     111  cap
 18436    31   140    25    31   493     0      66  ,
 18437    31   140    27    31   493     0     111  cap
 18438    31   140    30    31   493     0      66  ,
 18439    31   140    32    31   493     0      43  false
 18440    31   140    37    31   493     0      60  )
 18441    31   140    38    31   493     0     102  ;
 18442    31   141     9    31   493     0     111  address
 18443    31   141    17    31   493     0      67  =
 18444    31   141    19    31   493     0     111  addr
 18445    31   141    23    31   493     0     102  ;
 18446    31   142     9    31   493     0     111  cleaner
 18447    31   142    17    31   493     0      67  =
 18448    31   142    19    31   493     0      21  null
 18449    31   142    23    31   493     0     102  ;
 18450    31   143     5    31   493     0      64  }
 18451    31   143     5    31   493     0    1234  ENDMETHOD
 18452    31   143     5    31   494     0    1235  STARTMETHOD
 18453    31   149     5    31   494     0      23  protected
 18454    31   149    15    31   494     0     111  DirectByteBuffer
 18455    31   149    31    31   494     0      59  (
 18456    31   149    32    31   494     0      36  int
 18457    31   149    36    31   494     0     111  cap
 18458    31   149    39    31   494     0      66  ,
 18459    31   149    41    31   494     0      53  long
 18460    31   149    46    31   494     0     111  addr
 18461    31   149    50    31   494     0      66  ,
 18462    31   149    52    31   494     0     111  Runnable
 18463    31   149    61    31   494     0     111  unmapper
 18464    31   149    69    31   494     0      60  )
 18465    31   149    71    31   494     0      63  {
 18466    31   151     9    31   494     0      27  super
 18467    31   151    14    31   494     0      59  (
 18468    31   151    15    31   494     0      77  -
 18469    31   151    16    31   494     0     112  1
 18470    31   151    17    31   494     0      66  ,
 18471    31   151    19    31   494     0     112  0
 18472    31   151    20    31   494     0      66  ,
 18473    31   151    22    31   494     0     111  cap
 18474    31   151    25    31   494     0      66  ,
 18475    31   151    27    31   494     0     111  cap
 18476    31   151    30    31   494     0      66  ,
 18477    31   151    32    31   494     0      52  true
 18478    31   151    36    31   494     0      60  )
 18479    31   151    37    31   494     0     102  ;
 18480    31   152     9    31   494     0     111  address
 18481    31   152    17    31   494     0      67  =
 18482    31   152    19    31   494     0     111  addr
 18483    31   152    23    31   494     0     102  ;
 18484    31   153     9    31   494     0     111  viewedBuffer
 18485    31   153    22    31   494     0      67  =
 18486    31   153    24    31   494     0      21  null
 18487    31   153    28    31   494     0     102  ;
 18488    31   154     9    31   494     0     111  cleaner
 18489    31   154    17    31   494     0      67  =
 18490    31   154    19    31   494     0     111  Cleaner.create
 18491    31   154    33    31   494     0      59  (
 18492    31   154    34    31   494     0      44  this
 18493    31   154    38    31   494     0      66  ,
 18494    31   154    40    31   494     0     111  unmapper
 18495    31   154    48    31   494     0      60  )
 18496    31   154    49    31   494     0     102  ;
 18497    31   158     5    31   494     0      64  }
 18498    31   158     5    31   494     0    1236  ENDMETHOD
 18499    31   158     5    31   495     0    1237  STARTMETHOD
 18500    31   164     5    31   495     0     111  DirectByteBuffer
 18501    31   164    21    31   495     0      59  (
 18502    31   164    22    31   495     0     111  DirectBuffer
 18503    31   164    35    31   495     0     111  db
 18504    31   164    37    31   495     0      66  ,
 18505    31   165    32    31   495     0      36  int
 18506    31   165    36    31   495     0     111  mark
 18507    31   165    40    31   495     0      66  ,
 18508    31   165    42    31   495     0      36  int
 18509    31   165    46    31   495     0     111  pos
 18510    31   165    49    31   495     0      66  ,
 18511    31   165    51    31   495     0      36  int
 18512    31   165    55    31   495     0     111  lim
 18513    31   165    58    31   495     0      66  ,
 18514    31   165    60    31   495     0      36  int
 18515    31   165    64    31   495     0     111  cap
 18516    31   165    67    31   495     0      66  ,
 18517    31   166    32    31   495     0      36  int
 18518    31   166    36    31   495     0     111  off
 18519    31   166    39    31   495     0      60  )
 18520    31   167     5    31   495     0      63  {
 18521    31   169     9    31   495     0      27  super
 18522    31   169    14    31   495     0      59  (
 18523    31   169    15    31   495     0     111  mark
 18524    31   169    19    31   495     0      66  ,
 18525    31   169    21    31   495     0     111  pos
 18526    31   169    24    31   495     0      66  ,
 18527    31   169    26    31   495     0     111  lim
 18528    31   169    29    31   495     0      66  ,
 18529    31   169    31    31   495     0     111  cap
 18530    31   169    34    31   495     0      60  )
 18531    31   169    35    31   495     0     102  ;
 18532    31   170     9    31   495     0     111  address
 18533    31   170    17    31   495     0      67  =
 18534    31   170    19    31   495     0     111  db.address
 18535    31   170    29    31   495     0      59  (
 18536    31   170    30    31   495     0      60  )
 18537    31   170    32    31   495     0      74  +
 18538    31   170    34    31   495     0     111  off
 18539    31   170    37    31   495     0     102  ;
 18540    31   171     9    31   495     0     111  viewedBuffer
 18541    31   171    22    31   495     0      67  =
 18542    31   171    24    31   495     0     111  db
 18543    31   171    26    31   495     0     102  ;
 18544    31   173     9    31   495     0     111  cleaner
 18545    31   173    17    31   495     0      67  =
 18546    31   173    19    31   495     0      21  null
 18547    31   173    23    31   495     0     102  ;
 18548    31   178     5    31   495     0      64  }
 18549    31   178     5    31   495     0    1238  ENDMETHOD
 18550    31   178     5    31   496     0    1239  STARTMETHOD
 18551    31   180    12    31   496     0     111  ByteBuffer
 18552    31   180    23    31   496     0     111  slice
 18553    31   180    28    31   496     0      59  (
 18554    31   180    29    31   496     0      60  )
 18555    31   180    31    31   496     0      63  {
 18556    31   181     9    31   496     1      36  int
 18557    31   181    13    31   496     1     111  pos
 18558    31   181    17    31   496     1      67  =
 18559    31   181    19    31   496     1     111  this.position
 18560    31   181    32    31   496     1      59  (
 18561    31   181    33    31   496     1      60  )
 18562    31   181    34    31   496     1     102  ;
 18563    31   182     9    31   496     1      36  int
 18564    31   182    13    31   496     1     111  lim
 18565    31   182    17    31   496     1      67  =
 18566    31   182    19    31   496     1     111  this.limit
 18567    31   182    29    31   496     1      59  (
 18568    31   182    30    31   496     1      60  )
 18569    31   182    31    31   496     1     102  ;
 18570    31   183     9    31   496     0     111  assert
 18571    31   183    16    31   496     0      59  (
 18572    31   183    17    31   496     0     111  pos
 18573    31   183    21    31   496     0      92  <=
 18574    31   183    24    31   496     0     111  lim
 18575    31   183    27    31   496     0      60  )
 18576    31   183    28    31   496     0     102  ;
 18577    31   184     9    31   496     0      36  int
 18578    31   184    13    31   496     0     111  rem
 18579    31   184    17    31   496     0      67  =
 18580    31   184    19    31   496     0      59  (
 18581    31   184    20    31   496     0     111  pos
 18582    31   184    24    31   496     0      92  <=
 18583    31   184    27    31   496     0     111  lim
 18584    31   184    31    31   496     0      58  ?
 18585    31   184    33    31   496     0     111  lim
 18586    31   184    37    31   496     0      77  -
 18587    31   184    39    31   496     0     111  pos
 18588    31   184    43    31   496     0      65  :
 18589    31   184    45    31   496     0     112  0
 18590    31   184    46    31   496     0      60  )
 18591    31   184    47    31   496     0     102  ;
 18592    31   185     9    31   496     0      36  int
 18593    31   185    13    31   496     0     111  off
 18594    31   185    17    31   496     0      67  =
 18595    31   185    19    31   496     0      59  (
 18596    31   185    20    31   496     0     111  pos
 18597    31   185    24    31   496     0      90  <<
 18598    31   185    27    31   496     0     112  0
 18599    31   185    28    31   496     0      60  )
 18600    31   185    29    31   496     0     102  ;
 18601    31   186     9    31   496     0     111  assert
 18602    31   186    16    31   496     0      59  (
 18603    31   186    17    31   496     0     111  off
 18604    31   186    21    31   496     0      88  >=
 18605    31   186    24    31   496     0     112  0
 18606    31   186    25    31   496     0      60  )
 18607    31   186    26    31   496     0     102  ;
 18608    31   187     9    31   496     0      19  return
 18609    31   187    20    31   496     0     111  DirectByteBuffer
 18610    31   187    36    31   496     0      59  (
 18611    31   187    37    31   496     0      44  this
 18612    31   187    41    31   496     0      66  ,
 18613    31   187    43    31   496     0      77  -
 18614    31   187    44    31   496     0     112  1
 18615    31   187    45    31   496     0      66  ,
 18616    31   187    47    31   496     0     112  0
 18617    31   187    48    31   496     0      66  ,
 18618    31   187    50    31   496     0     111  rem
 18619    31   187    53    31   496     0      66  ,
 18620    31   187    55    31   496     0     111  rem
 18621    31   187    58    31   496     0      66  ,
 18622    31   187    60    31   496     0     111  off
 18623    31   187    63    31   496     0      60  )
 18624    31   187    64    31   496     0     102  ;
 18625    31   188     5    31   496     0      64  }
 18626    31   188     5    31   496     0    1240  ENDMETHOD
 18627    31   188     5    31   497     0    1241  STARTMETHOD
 18628    31   190    12    31   497     0     111  ByteBuffer
 18629    31   190    23    31   497     0     111  duplicate
 18630    31   190    32    31   497     0      59  (
 18631    31   190    33    31   497     0      60  )
 18632    31   190    35    31   497     0      63  {
 18633    31   191     9    31   497     0      19  return
 18634    31   191    20    31   497     0     111  DirectByteBuffer
 18635    31   191    36    31   497     0      59  (
 18636    31   191    37    31   497     0      44  this
 18637    31   191    41    31   497     0      66  ,
 18638    31   192    47    31   497     1     111  this.markValue
 18639    31   192    61    31   497     1      59  (
 18640    31   192    62    31   497     1      60  )
 18641    31   192    63    31   497     1      66  ,
 18642    31   193    47    31   497     1     111  this.position
 18643    31   193    60    31   497     1      59  (
 18644    31   193    61    31   497     1      60  )
 18645    31   193    62    31   497     1      66  ,
 18646    31   194    47    31   497     1     111  this.limit
 18647    31   194    57    31   497     1      59  (
 18648    31   194    58    31   497     1      60  )
 18649    31   194    59    31   497     1      66  ,
 18650    31   195    47    31   497     1     111  this.capacity
 18651    31   195    60    31   497     1      59  (
 18652    31   195    61    31   497     1      60  )
 18653    31   195    62    31   497     1      66  ,
 18654    31   196    47    31   497     0     112  0
 18655    31   196    48    31   497     0      60  )
 18656    31   196    49    31   497     0     102  ;
 18657    31   197     5    31   497     0      64  }
 18658    31   197     5    31   497     0    1242  ENDMETHOD
 18659    31   197     5    31   498     0    1243  STARTMETHOD
 18660    31   199    12    31   498     0     111  ByteBuffer
 18661    31   199    23    31   498     0     111  asReadOnlyBuffer
 18662    31   199    39    31   498     0      59  (
 18663    31   199    40    31   498     0      60  )
 18664    31   199    42    31   498     0      63  {
 18665    31   201     9    31   498     0      19  return
 18666    31   201    20    31   498     0     111  DirectByteBufferR
 18667    31   201    37    31   498     0      59  (
 18668    31   201    38    31   498     0      44  this
 18669    31   201    42    31   498     0      66  ,
 18670    31   202    44    31   498     1     111  this.markValue
 18671    31   202    58    31   498     1      59  (
 18672    31   202    59    31   498     1      60  )
 18673    31   202    60    31   498     1      66  ,
 18674    31   203    44    31   498     1     111  this.position
 18675    31   203    57    31   498     1      59  (
 18676    31   203    58    31   498     1      60  )
 18677    31   203    59    31   498     1      66  ,
 18678    31   204    44    31   498     1     111  this.limit
 18679    31   204    54    31   498     1      59  (
 18680    31   204    55    31   498     1      60  )
 18681    31   204    56    31   498     1      66  ,
 18682    31   205    44    31   498     1     111  this.capacity
 18683    31   205    57    31   498     1      59  (
 18684    31   205    58    31   498     1      60  )
 18685    31   205    59    31   498     1      66  ,
 18686    31   206    44    31   498     0     112  0
 18687    31   206    45    31   498     0      60  )
 18688    31   206    46    31   498     0     102  ;
 18689    31   210     5    31   498     0      64  }
 18690    31   210     5    31   498     0    1244  ENDMETHOD
 18691    31   210     5    31   499     0    1245  STARTMETHOD
 18692    31   214    12    31   499     0      53  long
 18693    31   214    17    31   499     0     111  address
 18694    31   214    24    31   499     0      59  (
 18695    31   214    25    31   499     0      60  )
 18696    31   214    27    31   499     0      63  {
 18697    31   215     9    31   499     0      19  return
 18698    31   215    16    31   499     0     111  address
 18699    31   215    23    31   499     0     102  ;
 18700    31   216     5    31   499     0      64  }
 18701    31   216     5    31   499     0    1246  ENDMETHOD
 18702    31   216     5    31   500     0    1247  STARTMETHOD
 18703    31   218     5    31   500     0      41  private
 18704    31   218    13    31   500     0      53  long
 18705    31   218    18    31   500     0     111  ix
 18706    31   218    20    31   500     0      59  (
 18707    31   218    21    31   500     0      36  int
 18708    31   218    25    31   500     0     111  i
 18709    31   218    26    31   500     0      60  )
 18710    31   218    28    31   500     0      63  {
 18711    31   219     9    31   500     0      19  return
 18712    31   219    16    31   500     0     111  address
 18713    31   219    24    31   500     0      74  +
 18714    31   219    26    31   500     0      59  (
 18715    31   219    27    31   500     0     111  i
 18716    31   219    29    31   500     0      90  <<
 18717    31   219    32    31   500     0     112  0
 18718    31   219    33    31   500     0      60  )
 18719    31   219    34    31   500     0     102  ;
 18720    31   220     5    31   500     0      64  }
 18721    31   220     5    31   500     0    1248  ENDMETHOD
 18722    31   220     5    31   501     0    1249  STARTMETHOD
 18723    31   222    17    31   501     0     111  get
 18724    31   222    20    31   501     0      59  (
 18725    31   222    21    31   501     0      60  )
 18726    31   222    23    31   501     0      63  {
 18727    31   223     9    31   501     0      19  return
 18728    31   223    16    31   501     0      59  (
 18729    31   223    17    31   501     0      59  (
 18730    31   223    18    31   501     0     111  unsafe.getByte
 18731    31   223    32    31   501     0      59  (
 18732    31   223    33    31   501     0     111  ix
 18733    31   223    35    31   501     0      59  (
 18734    31   223    36    31   501     0     111  nextGetIndex
 18735    31   223    48    31   501     0      59  (
 18736    31   223    49    31   501     0      60  )
 18737    31   223    50    31   501     0      60  )
 18738    31   223    51    31   501     0      60  )
 18739    31   223    52    31   501     0      60  )
 18740    31   223    53    31   501     0      60  )
 18741    31   223    54    31   501     0     102  ;
 18742    31   224     5    31   501     0      64  }
 18743    31   224     5    31   501     0    1250  ENDMETHOD
 18744    31   224     5    31   502     0    1251  STARTMETHOD
 18745    31   226    17    31   502     0     111  get
 18746    31   226    20    31   502     0      59  (
 18747    31   226    21    31   502     0      36  int
 18748    31   226    25    31   502     0     111  i
 18749    31   226    26    31   502     0      60  )
 18750    31   226    28    31   502     0      63  {
 18751    31   227     9    31   502     0      19  return
 18752    31   227    16    31   502     0      59  (
 18753    31   227    17    31   502     0      59  (
 18754    31   227    18    31   502     0     111  unsafe.getByte
 18755    31   227    32    31   502     0      59  (
 18756    31   227    33    31   502     0     111  ix
 18757    31   227    35    31   502     0      59  (
 18758    31   227    36    31   502     0     111  checkIndex
 18759    31   227    46    31   502     0      59  (
 18760    31   227    47    31   502     0     111  i
 18761    31   227    48    31   502     0      60  )
 18762    31   227    49    31   502     0      60  )
 18763    31   227    50    31   502     0      60  )
 18764    31   227    51    31   502     0      60  )
 18765    31   227    52    31   502     0      60  )
 18766    31   227    53    31   502     0     102  ;
 18767    31   228     5    31   502     0      64  }
 18768    31   228     5    31   502     0    1252  ENDMETHOD
 18769    31   228     5    31   503     0    1253  STARTMETHOD
 18770    31   230    12    31   503     0     111  ByteBuffer
 18771    31   230    23    31   503     0     111  get
 18772    31   230    26    31   503     0      59  (
 18773    31   230    31    31   503     0      61  [
 18774    31   230    32    31   503     0      62  ]
 18775    31   230    34    31   503     0     111  dst
 18776    31   230    37    31   503     0      66  ,
 18777    31   230    39    31   503     0      36  int
 18778    31   230    43    31   503     0     111  offset
 18779    31   230    49    31   503     0      66  ,
 18780    31   230    51    31   503     0      36  int
 18781    31   230    55    31   503     0     111  length
 18782    31   230    61    31   503     0      60  )
 18783    31   230    63    31   503     0      63  {
 18784    31   232     9    31   503     0      31  if
 18785    31   232    12    31   503     0      59  (
 18786    31   232    13    31   503     0      59  (
 18787    31   232    14    31   503     0     111  length
 18788    31   232    21    31   503     0      90  <<
 18789    31   232    24    31   503     0     112  0
 18790    31   232    25    31   503     0      60  )
 18791    31   232    27    31   503     0      89  >
 18792    31   232    29    31   503     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 18793    31   232    61    31   503     0      60  )
 18794    31   232    63    31   503     0      63  {
 18795    31   233    13    31   503     0     111  checkBounds
 18796    31   233    24    31   503     0      59  (
 18797    31   233    25    31   503     0     111  offset
 18798    31   233    31    31   503     0      66  ,
 18799    31   233    33    31   503     0     111  length
 18800    31   233    39    31   503     0      66  ,
 18801    31   233    41    31   503     0     111  dst.length
 18802    31   233    51    31   503     0      60  )
 18803    31   233    52    31   503     0     102  ;
 18804    31   234    13    31   503     1      36  int
 18805    31   234    17    31   503     1     111  pos
 18806    31   234    21    31   503     1      67  =
 18807    31   234    23    31   503     1     111  position
 18808    31   234    31    31   503     1      59  (
 18809    31   234    32    31   503     1      60  )
 18810    31   234    33    31   503     1     102  ;
 18811    31   235    13    31   503     1      36  int
 18812    31   235    17    31   503     1     111  lim
 18813    31   235    21    31   503     1      67  =
 18814    31   235    23    31   503     1     111  limit
 18815    31   235    28    31   503     1      59  (
 18816    31   235    29    31   503     1      60  )
 18817    31   235    30    31   503     1     102  ;
 18818    31   236    13    31   503     0     111  assert
 18819    31   236    20    31   503     0      59  (
 18820    31   236    21    31   503     0     111  pos
 18821    31   236    25    31   503     0      92  <=
 18822    31   236    28    31   503     0     111  lim
 18823    31   236    31    31   503     0      60  )
 18824    31   236    32    31   503     0     102  ;
 18825    31   237    13    31   503     0      36  int
 18826    31   237    17    31   503     0     111  rem
 18827    31   237    21    31   503     0      67  =
 18828    31   237    23    31   503     0      59  (
 18829    31   237    24    31   503     0     111  pos
 18830    31   237    28    31   503     0      92  <=
 18831    31   237    31    31   503     0     111  lim
 18832    31   237    35    31   503     0      58  ?
 18833    31   237    37    31   503     0     111  lim
 18834    31   237    41    31   503     0      77  -
 18835    31   237    43    31   503     0     111  pos
 18836    31   237    47    31   503     0      65  :
 18837    31   237    49    31   503     0     112  0
 18838    31   237    50    31   503     0      60  )
 18839    31   237    51    31   503     0     102  ;
 18840    31   238    13    31   503     0      31  if
 18841    31   238    16    31   503     0      59  (
 18842    31   238    17    31   503     0     111  length
 18843    31   238    24    31   503     0      89  >
 18844    31   238    26    31   503     0     111  rem
 18845    31   238    29    31   503     0      60  )
 18846    31   239    17    31   503     0      20  throw
 18847    31   239    27    31   503     0     111  BufferUnderflowException
 18848    31   239    51    31   503     0      59  (
 18849    31   239    52    31   503     0      60  )
 18850    31   239    53    31   503     0     102  ;
 18851    31   241    13    31   503     0      31  if
 18852    31   241    16    31   503     0      59  (
 18853    31   241    17    31   503     0     111  order
 18854    31   241    22    31   503     0      59  (
 18855    31   241    23    31   503     0      60  )
 18856    31   241    25    31   503     0      71  !=
 18857    31   241    28    31   503     0     111  ByteOrder.nativeOrder
 18858    31   241    49    31   503     0      59  (
 18859    31   241    50    31   503     0      60  )
 18860    31   241    51    31   503     0      60  )
 18861    31   242    17    31   503     0     111  Bits.copyToByteArray
 18862    31   242    37    31   503     0      59  (
 18863    31   242    38    31   503     0     111  ix
 18864    31   242    40    31   503     0      59  (
 18865    31   242    41    31   503     0     111  pos
 18866    31   242    44    31   503     0      60  )
 18867    31   242    45    31   503     0      66  ,
 18868    31   242    47    31   503     0     111  dst
 18869    31   242    50    31   503     0      66  ,
 18870    31   243    43    31   503     0     111  offset
 18871    31   243    50    31   503     0      90  <<
 18872    31   243    53    31   503     0     112  0
 18873    31   243    54    31   503     0      66  ,
 18874    31   244    43    31   503     0     111  length
 18875    31   244    50    31   503     0      90  <<
 18876    31   244    53    31   503     0     112  0
 18877    31   244    54    31   503     0      60  )
 18878    31   244    55    31   503     0     102  ;
 18879    31   245    13    31   503     0      48  else
 18880    31   246    17    31   503     0     111  Bits.copyToByteArray
 18881    31   246    37    31   503     0      59  (
 18882    31   246    38    31   503     0     111  ix
 18883    31   246    40    31   503     0      59  (
 18884    31   246    41    31   503     0     111  pos
 18885    31   246    44    31   503     0      60  )
 18886    31   246    45    31   503     0      66  ,
 18887    31   246    47    31   503     0     111  dst
 18888    31   246    50    31   503     0      66  ,
 18889    31   247    38    31   503     0     111  offset
 18890    31   247    45    31   503     0      90  <<
 18891    31   247    48    31   503     0     112  0
 18892    31   247    49    31   503     0      66  ,
 18893    31   248    38    31   503     0     111  length
 18894    31   248    45    31   503     0      90  <<
 18895    31   248    48    31   503     0     112  0
 18896    31   248    49    31   503     0      60  )
 18897    31   248    50    31   503     0     102  ;
 18898    31   249    13    31   503     0     111  position
 18899    31   249    21    31   503     0      59  (
 18900    31   249    22    31   503     0     111  pos
 18901    31   249    26    31   503     0      74  +
 18902    31   249    28    31   503     0     111  length
 18903    31   249    34    31   503     0      60  )
 18904    31   249    35    31   503     0     102  ;
 18905    31   250     9    31   503     0      64  }
 18906    31   250    11    31   503     0      48  else
 18907    31   250    16    31   503     0      63  {
 18908    31   251    13    31   503     0     111  super.get
 18909    31   251    22    31   503     0      59  (
 18910    31   251    23    31   503     0     111  dst
 18911    31   251    26    31   503     0      66  ,
 18912    31   251    28    31   503     0     111  offset
 18913    31   251    34    31   503     0      66  ,
 18914    31   251    36    31   503     0     111  length
 18915    31   251    42    31   503     0      60  )
 18916    31   251    43    31   503     0     102  ;
 18917    31   252     9    31   503     0      64  }
 18918    31   253     9    31   503     0      19  return
 18919    31   253    16    31   503     0      44  this
 18920    31   253    20    31   503     0     102  ;
 18921    31   257     5    31   503     0      64  }
 18922    31   257     5    31   503     0    1254  ENDMETHOD
 18923    31   257     5    31   504     0    1255  STARTMETHOD
 18924    31   261    12    31   504     0     111  ByteBuffer
 18925    31   261    23    31   504     0     111  put
 18926    31   261    26    31   504     0      59  (
 18927    31   261    32    31   504     0     111  x
 18928    31   261    33    31   504     0      60  )
 18929    31   261    35    31   504     0      63  {
 18930    31   263     9    31   504     0     111  unsafe.putByte
 18931    31   263    23    31   504     0      59  (
 18932    31   263    24    31   504     0     111  ix
 18933    31   263    26    31   504     0      59  (
 18934    31   263    27    31   504     0     111  nextPutIndex
 18935    31   263    39    31   504     0      59  (
 18936    31   263    40    31   504     0      60  )
 18937    31   263    41    31   504     0      60  )
 18938    31   263    42    31   504     0      66  ,
 18939    31   263    44    31   504     0      59  (
 18940    31   263    45    31   504     0      59  (
 18941    31   263    46    31   504     0     111  x
 18942    31   263    47    31   504     0      60  )
 18943    31   263    48    31   504     0      60  )
 18944    31   263    49    31   504     0      60  )
 18945    31   263    50    31   504     0     102  ;
 18946    31   264     9    31   504     0      19  return
 18947    31   264    16    31   504     0      44  this
 18948    31   264    20    31   504     0     102  ;
 18949    31   268     5    31   504     0      64  }
 18950    31   268     5    31   504     0    1256  ENDMETHOD
 18951    31   268     5    31   505     0    1257  STARTMETHOD
 18952    31   270    12    31   505     0     111  ByteBuffer
 18953    31   270    23    31   505     0     111  put
 18954    31   270    26    31   505     0      59  (
 18955    31   270    27    31   505     0      36  int
 18956    31   270    31    31   505     0     111  i
 18957    31   270    32    31   505     0      66  ,
 18958    31   270    39    31   505     0     111  x
 18959    31   270    40    31   505     0      60  )
 18960    31   270    42    31   505     0      63  {
 18961    31   272     9    31   505     0     111  unsafe.putByte
 18962    31   272    23    31   505     0      59  (
 18963    31   272    24    31   505     0     111  ix
 18964    31   272    26    31   505     0      59  (
 18965    31   272    27    31   505     0     111  checkIndex
 18966    31   272    37    31   505     0      59  (
 18967    31   272    38    31   505     0     111  i
 18968    31   272    39    31   505     0      60  )
 18969    31   272    40    31   505     0      60  )
 18970    31   272    41    31   505     0      66  ,
 18971    31   272    43    31   505     0      59  (
 18972    31   272    44    31   505     0      59  (
 18973    31   272    45    31   505     0     111  x
 18974    31   272    46    31   505     0      60  )
 18975    31   272    47    31   505     0      60  )
 18976    31   272    48    31   505     0      60  )
 18977    31   272    49    31   505     0     102  ;
 18978    31   273     9    31   505     0      19  return
 18979    31   273    16    31   505     0      44  this
 18980    31   273    20    31   505     0     102  ;
 18981    31   277     5    31   505     0      64  }
 18982    31   277     5    31   505     0    1258  ENDMETHOD
 18983    31   277     5    31   506     0    1259  STARTMETHOD
 18984    31   279    12    31   506     0     111  ByteBuffer
 18985    31   279    23    31   506     0     111  put
 18986    31   279    26    31   506     0      59  (
 18987    31   279    27    31   506     0     111  ByteBuffer
 18988    31   279    38    31   506     0     111  src
 18989    31   279    41    31   506     0      60  )
 18990    31   279    43    31   506     0      63  {
 18991    31   281     9    31   506     0      31  if
 18992    31   281    12    31   506     0      59  (
 18993    31   281    13    31   506     0     111  src
 18994    31   281    28    31   506     0     111  DirectByteBuffer
 18995    31   281    44    31   506     0      60  )
 18996    31   281    46    31   506     0      63  {
 18997    31   282    13    31   506     0      31  if
 18998    31   282    16    31   506     0      59  (
 18999    31   282    17    31   506     0     111  src
 19000    31   282    21    31   506     0      68  ==
 19001    31   282    24    31   506     0      44  this
 19002    31   282    28    31   506     0      60  )
 19003    31   283    17    31   506     0      20  throw
 19004    31   283    27    31   506     0     111  IllegalArgumentException
 19005    31   283    51    31   506     0      59  (
 19006    31   283    52    31   506     0      60  )
 19007    31   283    53    31   506     0     102  ;
 19008    31   284    13    31   506     0     111  DirectByteBuffer
 19009    31   284    30    31   506     0     111  sb
 19010    31   284    33    31   506     0      67  =
 19011    31   284    35    31   506     0      59  (
 19012    31   284    36    31   506     0     111  DirectByteBuffer
 19013    31   284    52    31   506     0      60  )
 19014    31   284    53    31   506     0     111  src
 19015    31   284    56    31   506     0     102  ;
 19016    31   286    13    31   506     1      36  int
 19017    31   286    17    31   506     1     111  spos
 19018    31   286    22    31   506     1      67  =
 19019    31   286    24    31   506     1     111  sb.position
 19020    31   286    35    31   506     1      59  (
 19021    31   286    36    31   506     1      60  )
 19022    31   286    37    31   506     1     102  ;
 19023    31   287    13    31   506     1      36  int
 19024    31   287    17    31   506     1     111  slim
 19025    31   287    22    31   506     1      67  =
 19026    31   287    24    31   506     1     111  sb.limit
 19027    31   287    32    31   506     1      59  (
 19028    31   287    33    31   506     1      60  )
 19029    31   287    34    31   506     1     102  ;
 19030    31   288    13    31   506     0     111  assert
 19031    31   288    20    31   506     0      59  (
 19032    31   288    21    31   506     0     111  spos
 19033    31   288    26    31   506     0      92  <=
 19034    31   288    29    31   506     0     111  slim
 19035    31   288    33    31   506     0      60  )
 19036    31   288    34    31   506     0     102  ;
 19037    31   289    13    31   506     0      36  int
 19038    31   289    17    31   506     0     111  srem
 19039    31   289    22    31   506     0      67  =
 19040    31   289    24    31   506     0      59  (
 19041    31   289    25    31   506     0     111  spos
 19042    31   289    30    31   506     0      92  <=
 19043    31   289    33    31   506     0     111  slim
 19044    31   289    38    31   506     0      58  ?
 19045    31   289    40    31   506     0     111  slim
 19046    31   289    45    31   506     0      77  -
 19047    31   289    47    31   506     0     111  spos
 19048    31   289    52    31   506     0      65  :
 19049    31   289    54    31   506     0     112  0
 19050    31   289    55    31   506     0      60  )
 19051    31   289    56    31   506     0     102  ;
 19052    31   291    13    31   506     1      36  int
 19053    31   291    17    31   506     1     111  pos
 19054    31   291    21    31   506     1      67  =
 19055    31   291    23    31   506     1     111  position
 19056    31   291    31    31   506     1      59  (
 19057    31   291    32    31   506     1      60  )
 19058    31   291    33    31   506     1     102  ;
 19059    31   292    13    31   506     1      36  int
 19060    31   292    17    31   506     1     111  lim
 19061    31   292    21    31   506     1      67  =
 19062    31   292    23    31   506     1     111  limit
 19063    31   292    28    31   506     1      59  (
 19064    31   292    29    31   506     1      60  )
 19065    31   292    30    31   506     1     102  ;
 19066    31   293    13    31   506     0     111  assert
 19067    31   293    20    31   506     0      59  (
 19068    31   293    21    31   506     0     111  pos
 19069    31   293    25    31   506     0      92  <=
 19070    31   293    28    31   506     0     111  lim
 19071    31   293    31    31   506     0      60  )
 19072    31   293    32    31   506     0     102  ;
 19073    31   294    13    31   506     0      36  int
 19074    31   294    17    31   506     0     111  rem
 19075    31   294    21    31   506     0      67  =
 19076    31   294    23    31   506     0      59  (
 19077    31   294    24    31   506     0     111  pos
 19078    31   294    28    31   506     0      92  <=
 19079    31   294    31    31   506     0     111  lim
 19080    31   294    35    31   506     0      58  ?
 19081    31   294    37    31   506     0     111  lim
 19082    31   294    41    31   506     0      77  -
 19083    31   294    43    31   506     0     111  pos
 19084    31   294    47    31   506     0      65  :
 19085    31   294    49    31   506     0     112  0
 19086    31   294    50    31   506     0      60  )
 19087    31   294    51    31   506     0     102  ;
 19088    31   296    13    31   506     0      31  if
 19089    31   296    16    31   506     0      59  (
 19090    31   296    17    31   506     0     111  srem
 19091    31   296    22    31   506     0      89  >
 19092    31   296    24    31   506     0     111  rem
 19093    31   296    27    31   506     0      60  )
 19094    31   297    17    31   506     0      20  throw
 19095    31   297    27    31   506     0     111  BufferOverflowException
 19096    31   297    50    31   506     0      59  (
 19097    31   297    51    31   506     0      60  )
 19098    31   297    52    31   506     0     102  ;
 19099    31   298    13    31   506     0     111  unsafe.copyMemory
 19100    31   298    30    31   506     0      59  (
 19101    31   298    31    31   506     0     111  sb.ix
 19102    31   298    36    31   506     0      59  (
 19103    31   298    37    31   506     0     111  spos
 19104    31   298    41    31   506     0      60  )
 19105    31   298    42    31   506     0      66  ,
 19106    31   298    44    31   506     0     111  ix
 19107    31   298    46    31   506     0      59  (
 19108    31   298    47    31   506     0     111  pos
 19109    31   298    50    31   506     0      60  )
 19110    31   298    51    31   506     0      66  ,
 19111    31   298    53    31   506     0     111  srem
 19112    31   298    58    31   506     0      90  <<
 19113    31   298    61    31   506     0     112  0
 19114    31   298    62    31   506     0      60  )
 19115    31   298    63    31   506     0     102  ;
 19116    31   299    13    31   506     1     111  sb.position
 19117    31   299    24    31   506     1      59  (
 19118    31   299    25    31   506     1     111  spos
 19119    31   299    30    31   506     1      74  +
 19120    31   299    32    31   506     1     111  srem
 19121    31   299    36    31   506     1      60  )
 19122    31   299    37    31   506     1     102  ;
 19123    31   300    13    31   506     1     111  position
 19124    31   300    21    31   506     1      59  (
 19125    31   300    22    31   506     1     111  pos
 19126    31   300    26    31   506     1      74  +
 19127    31   300    28    31   506     1     111  srem
 19128    31   300    32    31   506     1      60  )
 19129    31   300    33    31   506     1     102  ;
 19130    31   301     9    31   506     0      64  }
 19131    31   301    11    31   506     0      48  else
 19132    31   301    16    31   506     0      31  if
 19133    31   301    19    31   506     0      59  (
 19134    31   301    20    31   506     0     111  src.hb
 19135    31   301    27    31   506     0      71  !=
 19136    31   301    30    31   506     0      21  null
 19137    31   301    34    31   506     0      60  )
 19138    31   301    36    31   506     0      63  {
 19139    31   303    13    31   506     1      36  int
 19140    31   303    17    31   506     1     111  spos
 19141    31   303    22    31   506     1      67  =
 19142    31   303    24    31   506     1     111  src.position
 19143    31   303    36    31   506     1      59  (
 19144    31   303    37    31   506     1      60  )
 19145    31   303    38    31   506     1     102  ;
 19146    31   304    13    31   506     1      36  int
 19147    31   304    17    31   506     1     111  slim
 19148    31   304    22    31   506     1      67  =
 19149    31   304    24    31   506     1     111  src.limit
 19150    31   304    33    31   506     1      59  (
 19151    31   304    34    31   506     1      60  )
 19152    31   304    35    31   506     1     102  ;
 19153    31   305    13    31   506     0     111  assert
 19154    31   305    20    31   506     0      59  (
 19155    31   305    21    31   506     0     111  spos
 19156    31   305    26    31   506     0      92  <=
 19157    31   305    29    31   506     0     111  slim
 19158    31   305    33    31   506     0      60  )
 19159    31   305    34    31   506     0     102  ;
 19160    31   306    13    31   506     0      36  int
 19161    31   306    17    31   506     0     111  srem
 19162    31   306    22    31   506     0      67  =
 19163    31   306    24    31   506     0      59  (
 19164    31   306    25    31   506     0     111  spos
 19165    31   306    30    31   506     0      92  <=
 19166    31   306    33    31   506     0     111  slim
 19167    31   306    38    31   506     0      58  ?
 19168    31   306    40    31   506     0     111  slim
 19169    31   306    45    31   506     0      77  -
 19170    31   306    47    31   506     0     111  spos
 19171    31   306    52    31   506     0      65  :
 19172    31   306    54    31   506     0     112  0
 19173    31   306    55    31   506     0      60  )
 19174    31   306    56    31   506     0     102  ;
 19175    31   308    13    31   506     0     111  put
 19176    31   308    16    31   506     0      59  (
 19177    31   308    17    31   506     0     111  src.hb
 19178    31   308    23    31   506     0      66  ,
 19179    31   308    25    31   506     0     111  src.offset
 19180    31   308    36    31   506     0      74  +
 19181    31   308    38    31   506     0     111  spos
 19182    31   308    42    31   506     0      66  ,
 19183    31   308    44    31   506     0     111  srem
 19184    31   308    48    31   506     0      60  )
 19185    31   308    49    31   506     0     102  ;
 19186    31   309    13    31   506     0     111  src.position
 19187    31   309    25    31   506     0      59  (
 19188    31   309    26    31   506     0     111  spos
 19189    31   309    31    31   506     0      74  +
 19190    31   309    33    31   506     0     111  srem
 19191    31   309    37    31   506     0      60  )
 19192    31   309    38    31   506     0     102  ;
 19193    31   311     9    31   506     0      64  }
 19194    31   311    11    31   506     0      48  else
 19195    31   311    16    31   506     0      63  {
 19196    31   312    13    31   506     0     111  super.put
 19197    31   312    22    31   506     0      59  (
 19198    31   312    23    31   506     0     111  src
 19199    31   312    26    31   506     0      60  )
 19200    31   312    27    31   506     0     102  ;
 19201    31   313     9    31   506     0      64  }
 19202    31   314     9    31   506     0      19  return
 19203    31   314    16    31   506     0      44  this
 19204    31   314    20    31   506     0     102  ;
 19205    31   318     5    31   506     0      64  }
 19206    31   318     5    31   506     0    1260  ENDMETHOD
 19207    31   318     5    31   507     0    1261  STARTMETHOD
 19208    31   320    12    31   507     0     111  ByteBuffer
 19209    31   320    23    31   507     0     111  put
 19210    31   320    26    31   507     0      59  (
 19211    31   320    31    31   507     0      61  [
 19212    31   320    32    31   507     0      62  ]
 19213    31   320    34    31   507     0     111  src
 19214    31   320    37    31   507     0      66  ,
 19215    31   320    39    31   507     0      36  int
 19216    31   320    43    31   507     0     111  offset
 19217    31   320    49    31   507     0      66  ,
 19218    31   320    51    31   507     0      36  int
 19219    31   320    55    31   507     0     111  length
 19220    31   320    61    31   507     0      60  )
 19221    31   320    63    31   507     0      63  {
 19222    31   322     9    31   507     0      31  if
 19223    31   322    12    31   507     0      59  (
 19224    31   322    13    31   507     0      59  (
 19225    31   322    14    31   507     0     111  length
 19226    31   322    21    31   507     0      90  <<
 19227    31   322    24    31   507     0     112  0
 19228    31   322    25    31   507     0      60  )
 19229    31   322    27    31   507     0      89  >
 19230    31   322    29    31   507     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 19231    31   322    63    31   507     0      60  )
 19232    31   322    65    31   507     0      63  {
 19233    31   323    13    31   507     0     111  checkBounds
 19234    31   323    24    31   507     0      59  (
 19235    31   323    25    31   507     0     111  offset
 19236    31   323    31    31   507     0      66  ,
 19237    31   323    33    31   507     0     111  length
 19238    31   323    39    31   507     0      66  ,
 19239    31   323    41    31   507     0     111  src.length
 19240    31   323    51    31   507     0      60  )
 19241    31   323    52    31   507     0     102  ;
 19242    31   324    13    31   507     1      36  int
 19243    31   324    17    31   507     1     111  pos
 19244    31   324    21    31   507     1      67  =
 19245    31   324    23    31   507     1     111  position
 19246    31   324    31    31   507     1      59  (
 19247    31   324    32    31   507     1      60  )
 19248    31   324    33    31   507     1     102  ;
 19249    31   325    13    31   507     1      36  int
 19250    31   325    17    31   507     1     111  lim
 19251    31   325    21    31   507     1      67  =
 19252    31   325    23    31   507     1     111  limit
 19253    31   325    28    31   507     1      59  (
 19254    31   325    29    31   507     1      60  )
 19255    31   325    30    31   507     1     102  ;
 19256    31   326    13    31   507     0     111  assert
 19257    31   326    20    31   507     0      59  (
 19258    31   326    21    31   507     0     111  pos
 19259    31   326    25    31   507     0      92  <=
 19260    31   326    28    31   507     0     111  lim
 19261    31   326    31    31   507     0      60  )
 19262    31   326    32    31   507     0     102  ;
 19263    31   327    13    31   507     0      36  int
 19264    31   327    17    31   507     0     111  rem
 19265    31   327    21    31   507     0      67  =
 19266    31   327    23    31   507     0      59  (
 19267    31   327    24    31   507     0     111  pos
 19268    31   327    28    31   507     0      92  <=
 19269    31   327    31    31   507     0     111  lim
 19270    31   327    35    31   507     0      58  ?
 19271    31   327    37    31   507     0     111  lim
 19272    31   327    41    31   507     0      77  -
 19273    31   327    43    31   507     0     111  pos
 19274    31   327    47    31   507     0      65  :
 19275    31   327    49    31   507     0     112  0
 19276    31   327    50    31   507     0      60  )
 19277    31   327    51    31   507     0     102  ;
 19278    31   328    13    31   507     0      31  if
 19279    31   328    16    31   507     0      59  (
 19280    31   328    17    31   507     0     111  length
 19281    31   328    24    31   507     0      89  >
 19282    31   328    26    31   507     0     111  rem
 19283    31   328    29    31   507     0      60  )
 19284    31   329    17    31   507     0      20  throw
 19285    31   329    27    31   507     0     111  BufferOverflowException
 19286    31   329    50    31   507     0      59  (
 19287    31   329    51    31   507     0      60  )
 19288    31   329    52    31   507     0     102  ;
 19289    31   331    13    31   507     0      31  if
 19290    31   331    16    31   507     0      59  (
 19291    31   331    17    31   507     0     111  order
 19292    31   331    22    31   507     0      59  (
 19293    31   331    23    31   507     0      60  )
 19294    31   331    25    31   507     0      71  !=
 19295    31   331    28    31   507     0     111  ByteOrder.nativeOrder
 19296    31   331    49    31   507     0      59  (
 19297    31   331    50    31   507     0      60  )
 19298    31   331    51    31   507     0      60  )
 19299    31   332    17    31   507     0     111  Bits.copyFromByteArray
 19300    31   332    39    31   507     0      59  (
 19301    31   332    40    31   507     0     111  src
 19302    31   332    43    31   507     0      66  ,
 19303    31   332    45    31   507     0     111  offset
 19304    31   332    52    31   507     0      90  <<
 19305    31   332    55    31   507     0     112  0
 19306    31   332    56    31   507     0      66  ,
 19307    31   333    45    31   507     0     111  ix
 19308    31   333    47    31   507     0      59  (
 19309    31   333    48    31   507     0     111  pos
 19310    31   333    51    31   507     0      60  )
 19311    31   333    52    31   507     0      66  ,
 19312    31   333    54    31   507     0     111  length
 19313    31   333    61    31   507     0      90  <<
 19314    31   333    64    31   507     0     112  0
 19315    31   333    65    31   507     0      60  )
 19316    31   333    66    31   507     0     102  ;
 19317    31   334    13    31   507     0      48  else
 19318    31   335    17    31   507     0     111  Bits.copyFromByteArray
 19319    31   335    39    31   507     0      59  (
 19320    31   335    40    31   507     0     111  src
 19321    31   335    43    31   507     0      66  ,
 19322    31   335    45    31   507     0     111  offset
 19323    31   335    52    31   507     0      90  <<
 19324    31   335    55    31   507     0     112  0
 19325    31   335    56    31   507     0      66  ,
 19326    31   336    40    31   507     0     111  ix
 19327    31   336    42    31   507     0      59  (
 19328    31   336    43    31   507     0     111  pos
 19329    31   336    46    31   507     0      60  )
 19330    31   336    47    31   507     0      66  ,
 19331    31   336    49    31   507     0     111  length
 19332    31   336    56    31   507     0      90  <<
 19333    31   336    59    31   507     0     112  0
 19334    31   336    60    31   507     0      60  )
 19335    31   336    61    31   507     0     102  ;
 19336    31   337    13    31   507     0     111  position
 19337    31   337    21    31   507     0      59  (
 19338    31   337    22    31   507     0     111  pos
 19339    31   337    26    31   507     0      74  +
 19340    31   337    28    31   507     0     111  length
 19341    31   337    34    31   507     0      60  )
 19342    31   337    35    31   507     0     102  ;
 19343    31   338     9    31   507     0      64  }
 19344    31   338    11    31   507     0      48  else
 19345    31   338    16    31   507     0      63  {
 19346    31   339    13    31   507     0     111  super.put
 19347    31   339    22    31   507     0      59  (
 19348    31   339    23    31   507     0     111  src
 19349    31   339    26    31   507     0      66  ,
 19350    31   339    28    31   507     0     111  offset
 19351    31   339    34    31   507     0      66  ,
 19352    31   339    36    31   507     0     111  length
 19353    31   339    42    31   507     0      60  )
 19354    31   339    43    31   507     0     102  ;
 19355    31   340     9    31   507     0      64  }
 19356    31   341     9    31   507     0      19  return
 19357    31   341    16    31   507     0      44  this
 19358    31   341    20    31   507     0     102  ;
 19359    31   345     5    31   507     0      64  }
 19360    31   345     5    31   507     0    1262  ENDMETHOD
 19361    31   345     5    31   508     0    1263  STARTMETHOD
 19362    31   347    12    31   508     0     111  ByteBuffer
 19363    31   347    23    31   508     0     111  compact
 19364    31   347    30    31   508     0      59  (
 19365    31   347    31    31   508     0      60  )
 19366    31   347    33    31   508     0      63  {
 19367    31   349     9    31   508     1      36  int
 19368    31   349    13    31   508     1     111  pos
 19369    31   349    17    31   508     1      67  =
 19370    31   349    19    31   508     1     111  position
 19371    31   349    27    31   508     1      59  (
 19372    31   349    28    31   508     1      60  )
 19373    31   349    29    31   508     1     102  ;
 19374    31   350     9    31   508     1      36  int
 19375    31   350    13    31   508     1     111  lim
 19376    31   350    17    31   508     1      67  =
 19377    31   350    19    31   508     1     111  limit
 19378    31   350    24    31   508     1      59  (
 19379    31   350    25    31   508     1      60  )
 19380    31   350    26    31   508     1     102  ;
 19381    31   351     9    31   508     0     111  assert
 19382    31   351    16    31   508     0      59  (
 19383    31   351    17    31   508     0     111  pos
 19384    31   351    21    31   508     0      92  <=
 19385    31   351    24    31   508     0     111  lim
 19386    31   351    27    31   508     0      60  )
 19387    31   351    28    31   508     0     102  ;
 19388    31   352     9    31   508     0      36  int
 19389    31   352    13    31   508     0     111  rem
 19390    31   352    17    31   508     0      67  =
 19391    31   352    19    31   508     0      59  (
 19392    31   352    20    31   508     0     111  pos
 19393    31   352    24    31   508     0      92  <=
 19394    31   352    27    31   508     0     111  lim
 19395    31   352    31    31   508     0      58  ?
 19396    31   352    33    31   508     0     111  lim
 19397    31   352    37    31   508     0      77  -
 19398    31   352    39    31   508     0     111  pos
 19399    31   352    43    31   508     0      65  :
 19400    31   352    45    31   508     0     112  0
 19401    31   352    46    31   508     0      60  )
 19402    31   352    47    31   508     0     102  ;
 19403    31   354     9    31   508     0     111  unsafe.copyMemory
 19404    31   354    26    31   508     0      59  (
 19405    31   354    27    31   508     0     111  ix
 19406    31   354    29    31   508     0      59  (
 19407    31   354    30    31   508     0     111  pos
 19408    31   354    33    31   508     0      60  )
 19409    31   354    34    31   508     0      66  ,
 19410    31   354    36    31   508     0     111  ix
 19411    31   354    38    31   508     0      59  (
 19412    31   354    39    31   508     0     112  0
 19413    31   354    40    31   508     0      60  )
 19414    31   354    41    31   508     0      66  ,
 19415    31   354    43    31   508     0     111  rem
 19416    31   354    47    31   508     0      90  <<
 19417    31   354    50    31   508     0     112  0
 19418    31   354    51    31   508     0      60  )
 19419    31   354    52    31   508     0     102  ;
 19420    31   355     9    31   508     0     111  position
 19421    31   355    17    31   508     0      59  (
 19422    31   355    18    31   508     0     111  rem
 19423    31   355    21    31   508     0      60  )
 19424    31   355    22    31   508     0     102  ;
 19425    31   356     9    31   508     0     111  limit
 19426    31   356    14    31   508     0      59  (
 19427    31   356    15    31   508     0     111  capacity
 19428    31   356    23    31   508     0      59  (
 19429    31   356    24    31   508     0      60  )
 19430    31   356    25    31   508     0      60  )
 19431    31   356    26    31   508     0     102  ;
 19432    31   357     9    31   508     0     111  clearMark
 19433    31   357    18    31   508     0      59  (
 19434    31   357    19    31   508     0      60  )
 19435    31   357    20    31   508     0     102  ;
 19436    31   358     9    31   508     0      19  return
 19437    31   358    16    31   508     0      44  this
 19438    31   358    20    31   508     1     102  ;
 19439    31   362     5    31   508     1      64  }
 19440    31   362     5    31   508     0    1264  ENDMETHOD
 19441    31   362     5    31   509     0    1265  STARTMETHOD
 19442    31   364    12    31   509     0      39  boolean
 19443    31   364    20    31   509     0     111  isDirect
 19444    31   364    28    31   509     0      59  (
 19445    31   364    29    31   509     0      60  )
 19446    31   364    31    31   509     0      63  {
 19447    31   365     9    31   509     0      19  return
 19448    31   365    16    31   509     0      52  true
 19449    31   365    20    31   509     1     102  ;
 19450    31   366     5    31   509     1      64  }
 19451    31   366     5    31   509     0    1266  ENDMETHOD
 19452    31   366     5    31   510     0    1267  STARTMETHOD
 19453    31   368    12    31   510     0      39  boolean
 19454    31   368    20    31   510     0     111  isReadOnly
 19455    31   368    30    31   510     0      59  (
 19456    31   368    31    31   510     0      60  )
 19457    31   368    33    31   510     0      63  {
 19458    31   369     9    31   510     0      19  return
 19459    31   369    16    31   510     0      43  false
 19460    31   369    21    31   510     1     102  ;
 19461    31   370     5    31   510     1      64  }
 19462    31   370     5    31   510     0    1268  ENDMETHOD
 19463    31   370     5    31   511     0    1269  STARTMETHOD
 19464    31   433    10    31   511     0     111  _get
 19465    31   433    14    31   511     0      59  (
 19466    31   433    15    31   511     0      36  int
 19467    31   433    19    31   511     0     111  i
 19468    31   433    20    31   511     0      60  )
 19469    31   433    22    31   511     0      63  {
 19470    31   434     9    31   511     0      19  return
 19471    31   434    16    31   511     0     111  unsafe.getByte
 19472    31   434    30    31   511     0      59  (
 19473    31   434    31    31   511     0     111  address
 19474    31   434    39    31   511     0      74  +
 19475    31   434    41    31   511     0     111  i
 19476    31   434    42    31   511     0      60  )
 19477    31   434    43    31   511     0     102  ;
 19478    31   435     5    31   511     0      64  }
 19479    31   435     5    31   511     0    1270  ENDMETHOD
 19480    31   435     5    31   512     0    1271  STARTMETHOD
 19481    31   437     5    31   512     0      50  void
 19482    31   437    10    31   512     0     111  _put
 19483    31   437    14    31   512     0      59  (
 19484    31   437    15    31   512     0      36  int
 19485    31   437    19    31   512     0     111  i
 19486    31   437    20    31   512     0      66  ,
 19487    31   437    27    31   512     0     111  b
 19488    31   437    28    31   512     0      60  )
 19489    31   437    30    31   512     0      63  {
 19490    31   439     9    31   512     0     111  unsafe.putByte
 19491    31   439    23    31   512     0      59  (
 19492    31   439    24    31   512     0     111  address
 19493    31   439    32    31   512     0      74  +
 19494    31   439    34    31   512     0     111  i
 19495    31   439    35    31   512     0      66  ,
 19496    31   439    37    31   512     0     111  b
 19497    31   439    38    31   512     0      60  )
 19498    31   439    39    31   512     0     102  ;
 19499    31   443     5    31   512     0      64  }
 19500    31   443     5    31   512     0    1272  ENDMETHOD
 19501    31   443     5    31   513     0    1273  STARTMETHOD
 19502    31   448     5    31   513     0      41  private
 19503    31   448    13    31   513     0      40  char
 19504    31   448    18    31   513     0     111  getChar
 19505    31   448    25    31   513     0      59  (
 19506    31   448    26    31   513     0      53  long
 19507    31   448    31    31   513     0     111  a
 19508    31   448    32    31   513     0      60  )
 19509    31   448    34    31   513     0      63  {
 19510    31   449     9    31   513     0      31  if
 19511    31   449    12    31   513     0      59  (
 19512    31   449    13    31   513     0     111  unaligned
 19513    31   449    22    31   513     0      60  )
 19514    31   449    24    31   513     0      63  {
 19515    31   450    13    31   513     0      40  char
 19516    31   450    18    31   513     0     111  x
 19517    31   450    20    31   513     0      67  =
 19518    31   450    22    31   513     0     111  unsafe.getChar
 19519    31   450    36    31   513     0      59  (
 19520    31   450    37    31   513     0     111  a
 19521    31   450    38    31   513     0      60  )
 19522    31   450    39    31   513     0     102  ;
 19523    31   451    13    31   513     0      19  return
 19524    31   451    20    31   513     0      59  (
 19525    31   451    21    31   513     0     111  nativeByteOrder
 19526    31   451    37    31   513     0      58  ?
 19527    31   451    39    31   513     0     111  x
 19528    31   451    41    31   513     0      65  :
 19529    31   451    43    31   513     0     111  Bits.swap
 19530    31   451    52    31   513     0      59  (
 19531    31   451    53    31   513     0     111  x
 19532    31   451    54    31   513     0      60  )
 19533    31   451    55    31   513     0      60  )
 19534    31   451    56    31   513     0     102  ;
 19535    31   452     9    31   513     0      64  }
 19536    31   453     9    31   513     0      19  return
 19537    31   453    16    31   513     0     111  Bits.getChar
 19538    31   453    28    31   513     0      59  (
 19539    31   453    29    31   513     0     111  a
 19540    31   453    30    31   513     0      66  ,
 19541    31   453    32    31   513     0     111  bigEndian
 19542    31   453    41    31   513     0      60  )
 19543    31   453    42    31   513     0     102  ;
 19544    31   454     5    31   513     0      64  }
 19545    31   454     5    31   513     0    1274  ENDMETHOD
 19546    31   454     5    31   514     0    1275  STARTMETHOD
 19547    31   456    12    31   514     0      40  char
 19548    31   456    17    31   514     0     111  getChar
 19549    31   456    24    31   514     0      59  (
 19550    31   456    25    31   514     0      60  )
 19551    31   456    27    31   514     0      63  {
 19552    31   457     9    31   514     0      19  return
 19553    31   457    16    31   514     0     111  getChar
 19554    31   457    23    31   514     0      59  (
 19555    31   457    24    31   514     0     111  ix
 19556    31   457    26    31   514     0      59  (
 19557    31   457    27    31   514     0     111  nextGetIndex
 19558    31   457    39    31   514     0      59  (
 19559    31   457    40    31   514     0      59  (
 19560    31   457    41    31   514     0     112  1
 19561    31   457    43    31   514     0      90  <<
 19562    31   457    46    31   514     0     112  1
 19563    31   457    47    31   514     0      60  )
 19564    31   457    48    31   514     0      60  )
 19565    31   457    49    31   514     0      60  )
 19566    31   457    50    31   514     0      60  )
 19567    31   457    51    31   514     0     102  ;
 19568    31   458     5    31   514     0      64  }
 19569    31   458     5    31   514     0    1276  ENDMETHOD
 19570    31   458     5    31   515     0    1277  STARTMETHOD
 19571    31   460    12    31   515     0      40  char
 19572    31   460    17    31   515     0     111  getChar
 19573    31   460    24    31   515     0      59  (
 19574    31   460    25    31   515     0      36  int
 19575    31   460    29    31   515     0     111  i
 19576    31   460    30    31   515     0      60  )
 19577    31   460    32    31   515     0      63  {
 19578    31   461     9    31   515     0      19  return
 19579    31   461    16    31   515     0     111  getChar
 19580    31   461    23    31   515     0      59  (
 19581    31   461    24    31   515     0     111  ix
 19582    31   461    26    31   515     0      59  (
 19583    31   461    27    31   515     0     111  checkIndex
 19584    31   461    37    31   515     0      59  (
 19585    31   461    38    31   515     0     111  i
 19586    31   461    39    31   515     0      66  ,
 19587    31   461    41    31   515     0      59  (
 19588    31   461    42    31   515     0     112  1
 19589    31   461    44    31   515     0      90  <<
 19590    31   461    47    31   515     0     112  1
 19591    31   461    48    31   515     0      60  )
 19592    31   461    49    31   515     0      60  )
 19593    31   461    50    31   515     0      60  )
 19594    31   461    51    31   515     0      60  )
 19595    31   461    52    31   515     0     102  ;
 19596    31   462     5    31   515     0      64  }
 19597    31   462     5    31   515     0    1278  ENDMETHOD
 19598    31   462     5    31   516     0    1279  STARTMETHOD
 19599    31   466     5    31   516     0      41  private
 19600    31   466    13    31   516     0     111  ByteBuffer
 19601    31   466    24    31   516     0     111  putChar
 19602    31   466    31    31   516     0      59  (
 19603    31   466    32    31   516     0      53  long
 19604    31   466    37    31   516     0     111  a
 19605    31   466    38    31   516     0      66  ,
 19606    31   466    40    31   516     0      40  char
 19607    31   466    45    31   516     0     111  x
 19608    31   466    46    31   516     0      60  )
 19609    31   466    48    31   516     0      63  {
 19610    31   468     9    31   516     0      31  if
 19611    31   468    12    31   516     0      59  (
 19612    31   468    13    31   516     0     111  unaligned
 19613    31   468    22    31   516     0      60  )
 19614    31   468    24    31   516     0      63  {
 19615    31   469    13    31   516     0      40  char
 19616    31   469    18    31   516     0     111  y
 19617    31   469    20    31   516     0      67  =
 19618    31   469    22    31   516     0      59  (
 19619    31   469    23    31   516     0     111  x
 19620    31   469    24    31   516     0      60  )
 19621    31   469    25    31   516     0     102  ;
 19622    31   470    13    31   516     0     111  unsafe.putChar
 19623    31   470    27    31   516     0      59  (
 19624    31   470    28    31   516     0     111  a
 19625    31   470    29    31   516     0      66  ,
 19626    31   470    31    31   516     0      59  (
 19627    31   470    32    31   516     0     111  nativeByteOrder
 19628    31   470    48    31   516     0      58  ?
 19629    31   470    50    31   516     0     111  y
 19630    31   470    52    31   516     0      65  :
 19631    31   470    54    31   516     0     111  Bits.swap
 19632    31   470    63    31   516     0      59  (
 19633    31   470    64    31   516     0     111  y
 19634    31   470    65    31   516     0      60  )
 19635    31   470    66    31   516     0      60  )
 19636    31   470    67    31   516     0      60  )
 19637    31   470    68    31   516     0     102  ;
 19638    31   471     9    31   516     0      64  }
 19639    31   471    11    31   516     0      48  else
 19640    31   471    16    31   516     0      63  {
 19641    31   472    13    31   516     0     111  Bits.putChar
 19642    31   472    25    31   516     0      59  (
 19643    31   472    26    31   516     0     111  a
 19644    31   472    27    31   516     0      66  ,
 19645    31   472    29    31   516     0     111  x
 19646    31   472    30    31   516     0      66  ,
 19647    31   472    32    31   516     0     111  bigEndian
 19648    31   472    41    31   516     0      60  )
 19649    31   472    42    31   516     0     102  ;
 19650    31   473     9    31   516     0      64  }
 19651    31   474     9    31   516     0      19  return
 19652    31   474    16    31   516     0      44  this
 19653    31   474    20    31   516     0     102  ;
 19654    31   478     5    31   516     0      64  }
 19655    31   478     5    31   516     0    1280  ENDMETHOD
 19656    31   478     5    31   517     0    1281  STARTMETHOD
 19657    31   480    12    31   517     0     111  ByteBuffer
 19658    31   480    23    31   517     0     111  putChar
 19659    31   480    30    31   517     0      59  (
 19660    31   480    31    31   517     0      40  char
 19661    31   480    36    31   517     0     111  x
 19662    31   480    37    31   517     0      60  )
 19663    31   480    39    31   517     0      63  {
 19664    31   482     9    31   517     0     111  putChar
 19665    31   482    16    31   517     0      59  (
 19666    31   482    17    31   517     0     111  ix
 19667    31   482    19    31   517     0      59  (
 19668    31   482    20    31   517     0     111  nextPutIndex
 19669    31   482    32    31   517     0      59  (
 19670    31   482    33    31   517     0      59  (
 19671    31   482    34    31   517     0     112  1
 19672    31   482    36    31   517     0      90  <<
 19673    31   482    39    31   517     0     112  1
 19674    31   482    40    31   517     0      60  )
 19675    31   482    41    31   517     0      60  )
 19676    31   482    42    31   517     0      60  )
 19677    31   482    43    31   517     0      66  ,
 19678    31   482    45    31   517     0     111  x
 19679    31   482    46    31   517     0      60  )
 19680    31   482    47    31   517     0     102  ;
 19681    31   483     9    31   517     0      19  return
 19682    31   483    16    31   517     0      44  this
 19683    31   483    20    31   517     0     102  ;
 19684    31   487     5    31   517     0      64  }
 19685    31   487     5    31   517     0    1282  ENDMETHOD
 19686    31   487     5    31   518     0    1283  STARTMETHOD
 19687    31   489    12    31   518     0     111  ByteBuffer
 19688    31   489    23    31   518     0     111  putChar
 19689    31   489    30    31   518     0      59  (
 19690    31   489    31    31   518     0      36  int
 19691    31   489    35    31   518     0     111  i
 19692    31   489    36    31   518     0      66  ,
 19693    31   489    38    31   518     0      40  char
 19694    31   489    43    31   518     0     111  x
 19695    31   489    44    31   518     0      60  )
 19696    31   489    46    31   518     0      63  {
 19697    31   491     9    31   518     0     111  putChar
 19698    31   491    16    31   518     0      59  (
 19699    31   491    17    31   518     0     111  ix
 19700    31   491    19    31   518     0      59  (
 19701    31   491    20    31   518     0     111  checkIndex
 19702    31   491    30    31   518     0      59  (
 19703    31   491    31    31   518     0     111  i
 19704    31   491    32    31   518     0      66  ,
 19705    31   491    34    31   518     0      59  (
 19706    31   491    35    31   518     0     112  1
 19707    31   491    37    31   518     0      90  <<
 19708    31   491    40    31   518     0     112  1
 19709    31   491    41    31   518     0      60  )
 19710    31   491    42    31   518     0      60  )
 19711    31   491    43    31   518     0      60  )
 19712    31   491    44    31   518     0      66  ,
 19713    31   491    46    31   518     0     111  x
 19714    31   491    47    31   518     0      60  )
 19715    31   491    48    31   518     0     102  ;
 19716    31   492     9    31   518     0      19  return
 19717    31   492    16    31   518     0      44  this
 19718    31   492    20    31   518     0     102  ;
 19719    31   496     5    31   518     0      64  }
 19720    31   496     5    31   518     0    1284  ENDMETHOD
 19721    31   496     5    31   519     0    1285  STARTMETHOD
 19722    31   498    12    31   519     0     111  CharBuffer
 19723    31   498    23    31   519     0     111  asCharBuffer
 19724    31   498    35    31   519     0      59  (
 19725    31   498    36    31   519     0      60  )
 19726    31   498    38    31   519     0      63  {
 19727    31   499     9    31   519     1      36  int
 19728    31   499    13    31   519     1     111  off
 19729    31   499    17    31   519     1      67  =
 19730    31   499    19    31   519     1     111  this.position
 19731    31   499    32    31   519     1      59  (
 19732    31   499    33    31   519     1      60  )
 19733    31   499    34    31   519     1     102  ;
 19734    31   500     9    31   519     1      36  int
 19735    31   500    13    31   519     1     111  lim
 19736    31   500    17    31   519     1      67  =
 19737    31   500    19    31   519     1     111  this.limit
 19738    31   500    29    31   519     1      59  (
 19739    31   500    30    31   519     1      60  )
 19740    31   500    31    31   519     1     102  ;
 19741    31   501     9    31   519     0     111  assert
 19742    31   501    16    31   519     0      59  (
 19743    31   501    17    31   519     0     111  off
 19744    31   501    21    31   519     0      92  <=
 19745    31   501    24    31   519     0     111  lim
 19746    31   501    27    31   519     0      60  )
 19747    31   501    28    31   519     0     102  ;
 19748    31   502     9    31   519     0      36  int
 19749    31   502    13    31   519     0     111  rem
 19750    31   502    17    31   519     0      67  =
 19751    31   502    19    31   519     0      59  (
 19752    31   502    20    31   519     0     111  off
 19753    31   502    24    31   519     0      92  <=
 19754    31   502    27    31   519     0     111  lim
 19755    31   502    31    31   519     0      58  ?
 19756    31   502    33    31   519     0     111  lim
 19757    31   502    37    31   519     0      77  -
 19758    31   502    39    31   519     0     111  off
 19759    31   502    43    31   519     0      65  :
 19760    31   502    45    31   519     0     112  0
 19761    31   502    46    31   519     0      60  )
 19762    31   502    47    31   519     0     102  ;
 19763    31   504     9    31   519     0      36  int
 19764    31   504    13    31   519     0     111  size
 19765    31   504    18    31   519     0      67  =
 19766    31   504    20    31   519     0     111  rem
 19767    31   504    24    31   519     0      84  >>
 19768    31   504    27    31   519     0     112  1
 19769    31   504    28    31   519     0     102  ;
 19770    31   505     9    31   519     0      31  if
 19771    31   505    12    31   519     0      59  (
 19772    31   505    13    31   519     0      69  !
 19773    31   505    14    31   519     0     111  unaligned
 19774    31   505    24    31   519     0     101  &&
 19775    31   505    27    31   519     0      59  (
 19776    31   505    28    31   519     0      59  (
 19777    31   505    29    31   519     0     111  address
 19778    31   505    37    31   519     0      74  +
 19779    31   505    39    31   519     0     111  off
 19780    31   505    42    31   519     0      60  )
 19781    31   505    44    31   519     0      82  %
 19782    31   505    46    31   519     0      59  (
 19783    31   505    47    31   519     0     112  1
 19784    31   505    49    31   519     0      90  <<
 19785    31   505    52    31   519     0     112  1
 19786    31   505    53    31   519     0      60  )
 19787    31   505    55    31   519     0      71  !=
 19788    31   505    58    31   519     0     112  0
 19789    31   505    59    31   519     0      60  )
 19790    31   505    60    31   519     0      60  )
 19791    31   505    62    31   519     0      63  {
 19792    31   506    13    31   519     0      19  return
 19793    31   506    20    31   519     0      59  (
 19794    31   506    21    31   519     0     111  bigEndian
 19795    31   507    21    31   519     0      58  ?
 19796    31   507    23    31   519     0      59  (
 19797    31   507    24    31   519     0     111  CharBuffer
 19798    31   507    34    31   519     0      60  )
 19799    31   507    35    31   519     0      59  (
 19800    31   507    40    31   519     0     111  ByteBufferAsCharBufferB
 19801    31   507    63    31   519     0      59  (
 19802    31   507    64    31   519     0      44  this
 19803    31   507    68    31   519     0      66  ,
 19804    31   508    72    31   519     0      77  -
 19805    31   508    73    31   519     0     112  1
 19806    31   508    74    31   519     0      66  ,
 19807    31   509    72    31   519     0     112  0
 19808    31   509    73    31   519     0      66  ,
 19809    31   510    72    31   519     1     111  size
 19810    31   510    76    31   519     1      66  ,
 19811    31   511    72    31   519     1     111  size
 19812    31   511    76    31   519     1      66  ,
 19813    31   512    72    31   519     0     111  off
 19814    31   512    75    31   519     0      60  )
 19815    31   512    76    31   519     0      60  )
 19816    31   513    21    31   519     0      65  :
 19817    31   513    23    31   519     0      59  (
 19818    31   513    24    31   519     0     111  CharBuffer
 19819    31   513    34    31   519     0      60  )
 19820    31   513    35    31   519     0      59  (
 19821    31   513    40    31   519     0     111  ByteBufferAsCharBufferL
 19822    31   513    63    31   519     0      59  (
 19823    31   513    64    31   519     0      44  this
 19824    31   513    68    31   519     0      66  ,
 19825    31   514    72    31   519     0      77  -
 19826    31   514    73    31   519     0     112  1
 19827    31   514    74    31   519     0      66  ,
 19828    31   515    72    31   519     0     112  0
 19829    31   515    73    31   519     0      66  ,
 19830    31   516    72    31   519     1     111  size
 19831    31   516    76    31   519     1      66  ,
 19832    31   517    72    31   519     1     111  size
 19833    31   517    76    31   519     1      66  ,
 19834    31   518    72    31   519     0     111  off
 19835    31   518    75    31   519     0      60  )
 19836    31   518    76    31   519     0      60  )
 19837    31   518    77    31   519     0      60  )
 19838    31   518    78    31   519     0     102  ;
 19839    31   519     9    31   519     0      64  }
 19840    31   519    11    31   519     0      48  else
 19841    31   519    16    31   519     0      63  {
 19842    31   520    13    31   519     0      19  return
 19843    31   520    20    31   519     0      59  (
 19844    31   520    21    31   519     0     111  nativeByteOrder
 19845    31   521    21    31   519     0      58  ?
 19846    31   521    23    31   519     0      59  (
 19847    31   521    24    31   519     0     111  CharBuffer
 19848    31   521    34    31   519     0      60  )
 19849    31   521    35    31   519     0      59  (
 19850    31   521    40    31   519     0     111  DirectCharBufferU
 19851    31   521    57    31   519     0      59  (
 19852    31   521    58    31   519     0      44  this
 19853    31   521    62    31   519     0      66  ,
 19854    31   522    66    31   519     0      77  -
 19855    31   522    67    31   519     0     112  1
 19856    31   522    68    31   519     0      66  ,
 19857    31   523    66    31   519     0     112  0
 19858    31   523    67    31   519     0      66  ,
 19859    31   524    66    31   519     1     111  size
 19860    31   524    70    31   519     1      66  ,
 19861    31   525    66    31   519     1     111  size
 19862    31   525    70    31   519     1      66  ,
 19863    31   526    66    31   519     0     111  off
 19864    31   526    69    31   519     0      60  )
 19865    31   526    70    31   519     0      60  )
 19866    31   527    21    31   519     0      65  :
 19867    31   527    23    31   519     0      59  (
 19868    31   527    24    31   519     0     111  CharBuffer
 19869    31   527    34    31   519     0      60  )
 19870    31   527    35    31   519     0      59  (
 19871    31   527    40    31   519     0     111  DirectCharBufferS
 19872    31   527    57    31   519     0      59  (
 19873    31   527    58    31   519     0      44  this
 19874    31   527    62    31   519     0      66  ,
 19875    31   528    66    31   519     0      77  -
 19876    31   528    67    31   519     0     112  1
 19877    31   528    68    31   519     0      66  ,
 19878    31   529    66    31   519     0     112  0
 19879    31   529    67    31   519     0      66  ,
 19880    31   530    66    31   519     1     111  size
 19881    31   530    70    31   519     1      66  ,
 19882    31   531    66    31   519     1     111  size
 19883    31   531    70    31   519     1      66  ,
 19884    31   532    66    31   519     0     111  off
 19885    31   532    69    31   519     0      60  )
 19886    31   532    70    31   519     0      60  )
 19887    31   532    71    31   519     0      60  )
 19888    31   532    72    31   519     0     102  ;
 19889    31   533     9    31   519     0      64  }
 19890    31   534     5    31   519     0      64  }
 19891    31   534     5    31   519     0    1286  ENDMETHOD
 19892    31   534     5    31   520     0    1287  STARTMETHOD
 19893    31   539     5    31   520     0      41  private
 19894    31   539    19    31   520     0     111  getShort
 19895    31   539    27    31   520     0      59  (
 19896    31   539    28    31   520     0      53  long
 19897    31   539    33    31   520     0     111  a
 19898    31   539    34    31   520     0      60  )
 19899    31   539    36    31   520     0      63  {
 19900    31   540     9    31   520     0      31  if
 19901    31   540    12    31   520     0      59  (
 19902    31   540    13    31   520     0     111  unaligned
 19903    31   540    22    31   520     0      60  )
 19904    31   540    24    31   520     0      63  {
 19905    31   541    19    31   520     0     111  x
 19906    31   541    21    31   520     0      67  =
 19907    31   541    23    31   520     0     111  unsafe.getShort
 19908    31   541    38    31   520     0      59  (
 19909    31   541    39    31   520     0     111  a
 19910    31   541    40    31   520     0      60  )
 19911    31   541    41    31   520     0     102  ;
 19912    31   542    13    31   520     0      19  return
 19913    31   542    20    31   520     0      59  (
 19914    31   542    21    31   520     0     111  nativeByteOrder
 19915    31   542    37    31   520     0      58  ?
 19916    31   542    39    31   520     0     111  x
 19917    31   542    41    31   520     0      65  :
 19918    31   542    43    31   520     0     111  Bits.swap
 19919    31   542    52    31   520     0      59  (
 19920    31   542    53    31   520     0     111  x
 19921    31   542    54    31   520     0      60  )
 19922    31   542    55    31   520     0      60  )
 19923    31   542    56    31   520     0     102  ;
 19924    31   543     9    31   520     0      64  }
 19925    31   544     9    31   520     0      19  return
 19926    31   544    16    31   520     0     111  Bits.getShort
 19927    31   544    29    31   520     0      59  (
 19928    31   544    30    31   520     0     111  a
 19929    31   544    31    31   520     0      66  ,
 19930    31   544    33    31   520     0     111  bigEndian
 19931    31   544    42    31   520     0      60  )
 19932    31   544    43    31   520     0     102  ;
 19933    31   545     5    31   520     0      64  }
 19934    31   545     5    31   520     0    1288  ENDMETHOD
 19935    31   545     5    31   521     0    1289  STARTMETHOD
 19936    31   547    18    31   521     0     111  getShort
 19937    31   547    26    31   521     0      59  (
 19938    31   547    27    31   521     0      60  )
 19939    31   547    29    31   521     0      63  {
 19940    31   548     9    31   521     0      19  return
 19941    31   548    16    31   521     0     111  getShort
 19942    31   548    24    31   521     0      59  (
 19943    31   548    25    31   521     0     111  ix
 19944    31   548    27    31   521     0      59  (
 19945    31   548    28    31   521     0     111  nextGetIndex
 19946    31   548    40    31   521     0      59  (
 19947    31   548    41    31   521     0      59  (
 19948    31   548    42    31   521     0     112  1
 19949    31   548    44    31   521     0      90  <<
 19950    31   548    47    31   521     0     112  1
 19951    31   548    48    31   521     0      60  )
 19952    31   548    49    31   521     0      60  )
 19953    31   548    50    31   521     0      60  )
 19954    31   548    51    31   521     0      60  )
 19955    31   548    52    31   521     0     102  ;
 19956    31   549     5    31   521     0      64  }
 19957    31   549     5    31   521     0    1290  ENDMETHOD
 19958    31   549     5    31   522     0    1291  STARTMETHOD
 19959    31   551    18    31   522     0     111  getShort
 19960    31   551    26    31   522     0      59  (
 19961    31   551    27    31   522     0      36  int
 19962    31   551    31    31   522     0     111  i
 19963    31   551    32    31   522     0      60  )
 19964    31   551    34    31   522     0      63  {
 19965    31   552     9    31   522     0      19  return
 19966    31   552    16    31   522     0     111  getShort
 19967    31   552    24    31   522     0      59  (
 19968    31   552    25    31   522     0     111  ix
 19969    31   552    27    31   522     0      59  (
 19970    31   552    28    31   522     0     111  checkIndex
 19971    31   552    38    31   522     0      59  (
 19972    31   552    39    31   522     0     111  i
 19973    31   552    40    31   522     0      66  ,
 19974    31   552    42    31   522     0      59  (
 19975    31   552    43    31   522     0     112  1
 19976    31   552    45    31   522     0      90  <<
 19977    31   552    48    31   522     0     112  1
 19978    31   552    49    31   522     0      60  )
 19979    31   552    50    31   522     0      60  )
 19980    31   552    51    31   522     0      60  )
 19981    31   552    52    31   522     0      60  )
 19982    31   552    53    31   522     0     102  ;
 19983    31   553     5    31   522     0      64  }
 19984    31   553     5    31   522     0    1292  ENDMETHOD
 19985    31   553     5    31   523     0    1293  STARTMETHOD
 19986    31   557     5    31   523     0      41  private
 19987    31   557    13    31   523     0     111  ByteBuffer
 19988    31   557    24    31   523     0     111  putShort
 19989    31   557    32    31   523     0      59  (
 19990    31   557    33    31   523     0      53  long
 19991    31   557    38    31   523     0     111  a
 19992    31   557    39    31   523     0      66  ,
 19993    31   557    47    31   523     0     111  x
 19994    31   557    48    31   523     0      60  )
 19995    31   557    50    31   523     0      63  {
 19996    31   559     9    31   523     0      31  if
 19997    31   559    12    31   523     0      59  (
 19998    31   559    13    31   523     0     111  unaligned
 19999    31   559    22    31   523     0      60  )
 20000    31   559    24    31   523     0      63  {
 20001    31   560    19    31   523     0     111  y
 20002    31   560    21    31   523     0      67  =
 20003    31   560    23    31   523     0      59  (
 20004    31   560    24    31   523     0     111  x
 20005    31   560    25    31   523     0      60  )
 20006    31   560    26    31   523     0     102  ;
 20007    31   561    13    31   523     0     111  unsafe.putShort
 20008    31   561    28    31   523     0      59  (
 20009    31   561    29    31   523     0     111  a
 20010    31   561    30    31   523     0      66  ,
 20011    31   561    32    31   523     0      59  (
 20012    31   561    33    31   523     0     111  nativeByteOrder
 20013    31   561    49    31   523     0      58  ?
 20014    31   561    51    31   523     0     111  y
 20015    31   561    53    31   523     0      65  :
 20016    31   561    55    31   523     0     111  Bits.swap
 20017    31   561    64    31   523     0      59  (
 20018    31   561    65    31   523     0     111  y
 20019    31   561    66    31   523     0      60  )
 20020    31   561    67    31   523     0      60  )
 20021    31   561    68    31   523     0      60  )
 20022    31   561    69    31   523     0     102  ;
 20023    31   562     9    31   523     0      64  }
 20024    31   562    11    31   523     0      48  else
 20025    31   562    16    31   523     0      63  {
 20026    31   563    13    31   523     0     111  Bits.putShort
 20027    31   563    26    31   523     0      59  (
 20028    31   563    27    31   523     0     111  a
 20029    31   563    28    31   523     0      66  ,
 20030    31   563    30    31   523     0     111  x
 20031    31   563    31    31   523     0      66  ,
 20032    31   563    33    31   523     0     111  bigEndian
 20033    31   563    42    31   523     0      60  )
 20034    31   563    43    31   523     0     102  ;
 20035    31   564     9    31   523     0      64  }
 20036    31   565     9    31   523     0      19  return
 20037    31   565    16    31   523     0      44  this
 20038    31   565    20    31   523     0     102  ;
 20039    31   569     5    31   523     0      64  }
 20040    31   569     5    31   523     0    1294  ENDMETHOD
 20041    31   569     5    31   524     0    1295  STARTMETHOD
 20042    31   571    12    31   524     0     111  ByteBuffer
 20043    31   571    23    31   524     0     111  putShort
 20044    31   571    31    31   524     0      59  (
 20045    31   571    38    31   524     0     111  x
 20046    31   571    39    31   524     0      60  )
 20047    31   571    41    31   524     0      63  {
 20048    31   573     9    31   524     0     111  putShort
 20049    31   573    17    31   524     0      59  (
 20050    31   573    18    31   524     0     111  ix
 20051    31   573    20    31   524     0      59  (
 20052    31   573    21    31   524     0     111  nextPutIndex
 20053    31   573    33    31   524     0      59  (
 20054    31   573    34    31   524     0      59  (
 20055    31   573    35    31   524     0     112  1
 20056    31   573    37    31   524     0      90  <<
 20057    31   573    40    31   524     0     112  1
 20058    31   573    41    31   524     0      60  )
 20059    31   573    42    31   524     0      60  )
 20060    31   573    43    31   524     0      60  )
 20061    31   573    44    31   524     0      66  ,
 20062    31   573    46    31   524     0     111  x
 20063    31   573    47    31   524     0      60  )
 20064    31   573    48    31   524     0     102  ;
 20065    31   574     9    31   524     0      19  return
 20066    31   574    16    31   524     0      44  this
 20067    31   574    20    31   524     0     102  ;
 20068    31   578     5    31   524     0      64  }
 20069    31   578     5    31   524     0    1296  ENDMETHOD
 20070    31   578     5    31   525     0    1297  STARTMETHOD
 20071    31   580    12    31   525     0     111  ByteBuffer
 20072    31   580    23    31   525     0     111  putShort
 20073    31   580    31    31   525     0      59  (
 20074    31   580    32    31   525     0      36  int
 20075    31   580    36    31   525     0     111  i
 20076    31   580    37    31   525     0      66  ,
 20077    31   580    45    31   525     0     111  x
 20078    31   580    46    31   525     0      60  )
 20079    31   580    48    31   525     0      63  {
 20080    31   582     9    31   525     0     111  putShort
 20081    31   582    17    31   525     0      59  (
 20082    31   582    18    31   525     0     111  ix
 20083    31   582    20    31   525     0      59  (
 20084    31   582    21    31   525     0     111  checkIndex
 20085    31   582    31    31   525     0      59  (
 20086    31   582    32    31   525     0     111  i
 20087    31   582    33    31   525     0      66  ,
 20088    31   582    35    31   525     0      59  (
 20089    31   582    36    31   525     0     112  1
 20090    31   582    38    31   525     0      90  <<
 20091    31   582    41    31   525     0     112  1
 20092    31   582    42    31   525     0      60  )
 20093    31   582    43    31   525     0      60  )
 20094    31   582    44    31   525     0      60  )
 20095    31   582    45    31   525     0      66  ,
 20096    31   582    47    31   525     0     111  x
 20097    31   582    48    31   525     0      60  )
 20098    31   582    49    31   525     0     102  ;
 20099    31   583     9    31   525     0      19  return
 20100    31   583    16    31   525     0      44  this
 20101    31   583    20    31   525     0     102  ;
 20102    31   587     5    31   525     0      64  }
 20103    31   587     5    31   525     0    1298  ENDMETHOD
 20104    31   587     5    31   526     0    1299  STARTMETHOD
 20105    31   589    12    31   526     0     111  ShortBuffer
 20106    31   589    24    31   526     0     111  asShortBuffer
 20107    31   589    37    31   526     0      59  (
 20108    31   589    38    31   526     0      60  )
 20109    31   589    40    31   526     0      63  {
 20110    31   590     9    31   526     1      36  int
 20111    31   590    13    31   526     1     111  off
 20112    31   590    17    31   526     1      67  =
 20113    31   590    19    31   526     1     111  this.position
 20114    31   590    32    31   526     1      59  (
 20115    31   590    33    31   526     1      60  )
 20116    31   590    34    31   526     1     102  ;
 20117    31   591     9    31   526     1      36  int
 20118    31   591    13    31   526     1     111  lim
 20119    31   591    17    31   526     1      67  =
 20120    31   591    19    31   526     1     111  this.limit
 20121    31   591    29    31   526     1      59  (
 20122    31   591    30    31   526     1      60  )
 20123    31   591    31    31   526     1     102  ;
 20124    31   592     9    31   526     0     111  assert
 20125    31   592    16    31   526     0      59  (
 20126    31   592    17    31   526     0     111  off
 20127    31   592    21    31   526     0      92  <=
 20128    31   592    24    31   526     0     111  lim
 20129    31   592    27    31   526     0      60  )
 20130    31   592    28    31   526     0     102  ;
 20131    31   593     9    31   526     0      36  int
 20132    31   593    13    31   526     0     111  rem
 20133    31   593    17    31   526     0      67  =
 20134    31   593    19    31   526     0      59  (
 20135    31   593    20    31   526     0     111  off
 20136    31   593    24    31   526     0      92  <=
 20137    31   593    27    31   526     0     111  lim
 20138    31   593    31    31   526     0      58  ?
 20139    31   593    33    31   526     0     111  lim
 20140    31   593    37    31   526     0      77  -
 20141    31   593    39    31   526     0     111  off
 20142    31   593    43    31   526     0      65  :
 20143    31   593    45    31   526     0     112  0
 20144    31   593    46    31   526     0      60  )
 20145    31   593    47    31   526     0     102  ;
 20146    31   595     9    31   526     0      36  int
 20147    31   595    13    31   526     0     111  size
 20148    31   595    18    31   526     0      67  =
 20149    31   595    20    31   526     0     111  rem
 20150    31   595    24    31   526     0      84  >>
 20151    31   595    27    31   526     0     112  1
 20152    31   595    28    31   526     0     102  ;
 20153    31   596     9    31   526     0      31  if
 20154    31   596    12    31   526     0      59  (
 20155    31   596    13    31   526     0      69  !
 20156    31   596    14    31   526     0     111  unaligned
 20157    31   596    24    31   526     0     101  &&
 20158    31   596    27    31   526     0      59  (
 20159    31   596    28    31   526     0      59  (
 20160    31   596    29    31   526     0     111  address
 20161    31   596    37    31   526     0      74  +
 20162    31   596    39    31   526     0     111  off
 20163    31   596    42    31   526     0      60  )
 20164    31   596    44    31   526     0      82  %
 20165    31   596    46    31   526     0      59  (
 20166    31   596    47    31   526     0     112  1
 20167    31   596    49    31   526     0      90  <<
 20168    31   596    52    31   526     0     112  1
 20169    31   596    53    31   526     0      60  )
 20170    31   596    55    31   526     0      71  !=
 20171    31   596    58    31   526     0     112  0
 20172    31   596    59    31   526     0      60  )
 20173    31   596    60    31   526     0      60  )
 20174    31   596    62    31   526     0      63  {
 20175    31   597    13    31   526     0      19  return
 20176    31   597    20    31   526     0      59  (
 20177    31   597    21    31   526     0     111  bigEndian
 20178    31   598    21    31   526     0      58  ?
 20179    31   598    23    31   526     0      59  (
 20180    31   598    24    31   526     0     111  ShortBuffer
 20181    31   598    35    31   526     0      60  )
 20182    31   598    36    31   526     0      59  (
 20183    31   598    41    31   526     0     111  ByteBufferAsShortBufferB
 20184    31   598    65    31   526     0      59  (
 20185    31   598    66    31   526     0      44  this
 20186    31   598    70    31   526     0      66  ,
 20187    31   599    72    31   526     0      77  -
 20188    31   599    73    31   526     0     112  1
 20189    31   599    74    31   526     0      66  ,
 20190    31   600    72    31   526     0     112  0
 20191    31   600    73    31   526     0      66  ,
 20192    31   601    72    31   526     1     111  size
 20193    31   601    76    31   526     1      66  ,
 20194    31   602    72    31   526     1     111  size
 20195    31   602    76    31   526     1      66  ,
 20196    31   603    72    31   526     0     111  off
 20197    31   603    75    31   526     0      60  )
 20198    31   603    76    31   526     0      60  )
 20199    31   604    21    31   526     0      65  :
 20200    31   604    23    31   526     0      59  (
 20201    31   604    24    31   526     0     111  ShortBuffer
 20202    31   604    35    31   526     0      60  )
 20203    31   604    36    31   526     0      59  (
 20204    31   604    41    31   526     0     111  ByteBufferAsShortBufferL
 20205    31   604    65    31   526     0      59  (
 20206    31   604    66    31   526     0      44  this
 20207    31   604    70    31   526     0      66  ,
 20208    31   605    72    31   526     0      77  -
 20209    31   605    73    31   526     0     112  1
 20210    31   605    74    31   526     0      66  ,
 20211    31   606    72    31   526     0     112  0
 20212    31   606    73    31   526     0      66  ,
 20213    31   607    72    31   526     1     111  size
 20214    31   607    76    31   526     1      66  ,
 20215    31   608    72    31   526     1     111  size
 20216    31   608    76    31   526     1      66  ,
 20217    31   609    72    31   526     0     111  off
 20218    31   609    75    31   526     0      60  )
 20219    31   609    76    31   526     0      60  )
 20220    31   609    77    31   526     0      60  )
 20221    31   609    78    31   526     0     102  ;
 20222    31   610     9    31   526     0      64  }
 20223    31   610    11    31   526     0      48  else
 20224    31   610    16    31   526     0      63  {
 20225    31   611    13    31   526     0      19  return
 20226    31   611    20    31   526     0      59  (
 20227    31   611    21    31   526     0     111  nativeByteOrder
 20228    31   612    21    31   526     0      58  ?
 20229    31   612    23    31   526     0      59  (
 20230    31   612    24    31   526     0     111  ShortBuffer
 20231    31   612    35    31   526     0      60  )
 20232    31   612    36    31   526     0      59  (
 20233    31   612    41    31   526     0     111  DirectShortBufferU
 20234    31   612    59    31   526     0      59  (
 20235    31   612    60    31   526     0      44  this
 20236    31   612    64    31   526     0      66  ,
 20237    31   613    66    31   526     0      77  -
 20238    31   613    67    31   526     0     112  1
 20239    31   613    68    31   526     0      66  ,
 20240    31   614    66    31   526     0     112  0
 20241    31   614    67    31   526     0      66  ,
 20242    31   615    66    31   526     1     111  size
 20243    31   615    70    31   526     1      66  ,
 20244    31   616    66    31   526     1     111  size
 20245    31   616    70    31   526     1      66  ,
 20246    31   617    66    31   526     0     111  off
 20247    31   617    69    31   526     0      60  )
 20248    31   617    70    31   526     0      60  )
 20249    31   618    21    31   526     0      65  :
 20250    31   618    23    31   526     0      59  (
 20251    31   618    24    31   526     0     111  ShortBuffer
 20252    31   618    35    31   526     0      60  )
 20253    31   618    36    31   526     0      59  (
 20254    31   618    41    31   526     0     111  DirectShortBufferS
 20255    31   618    59    31   526     0      59  (
 20256    31   618    60    31   526     0      44  this
 20257    31   618    64    31   526     0      66  ,
 20258    31   619    66    31   526     0      77  -
 20259    31   619    67    31   526     0     112  1
 20260    31   619    68    31   526     0      66  ,
 20261    31   620    66    31   526     0     112  0
 20262    31   620    67    31   526     0      66  ,
 20263    31   621    66    31   526     1     111  size
 20264    31   621    70    31   526     1      66  ,
 20265    31   622    66    31   526     1     111  size
 20266    31   622    70    31   526     1      66  ,
 20267    31   623    66    31   526     0     111  off
 20268    31   623    69    31   526     0      60  )
 20269    31   623    70    31   526     0      60  )
 20270    31   623    71    31   526     0      60  )
 20271    31   623    72    31   526     0     102  ;
 20272    31   624     9    31   526     0      64  }
 20273    31   625     5    31   526     0      64  }
 20274    31   625     5    31   526     0    1300  ENDMETHOD
 20275    31   625     5    31   527     0    1301  STARTMETHOD
 20276    31   630     5    31   527     0      41  private
 20277    31   630    13    31   527     0      36  int
 20278    31   630    17    31   527     0     111  getInt
 20279    31   630    23    31   527     0      59  (
 20280    31   630    24    31   527     0      53  long
 20281    31   630    29    31   527     0     111  a
 20282    31   630    30    31   527     0      60  )
 20283    31   630    32    31   527     0      63  {
 20284    31   631     9    31   527     0      31  if
 20285    31   631    12    31   527     0      59  (
 20286    31   631    13    31   527     0     111  unaligned
 20287    31   631    22    31   527     0      60  )
 20288    31   631    24    31   527     0      63  {
 20289    31   632    13    31   527     0      36  int
 20290    31   632    17    31   527     0     111  x
 20291    31   632    19    31   527     0      67  =
 20292    31   632    21    31   527     0     111  unsafe.getInt
 20293    31   632    34    31   527     0      59  (
 20294    31   632    35    31   527     0     111  a
 20295    31   632    36    31   527     0      60  )
 20296    31   632    37    31   527     0     102  ;
 20297    31   633    13    31   527     0      19  return
 20298    31   633    20    31   527     0      59  (
 20299    31   633    21    31   527     0     111  nativeByteOrder
 20300    31   633    37    31   527     0      58  ?
 20301    31   633    39    31   527     0     111  x
 20302    31   633    41    31   527     0      65  :
 20303    31   633    43    31   527     0     111  Bits.swap
 20304    31   633    52    31   527     0      59  (
 20305    31   633    53    31   527     0     111  x
 20306    31   633    54    31   527     0      60  )
 20307    31   633    55    31   527     0      60  )
 20308    31   633    56    31   527     0     102  ;
 20309    31   634     9    31   527     0      64  }
 20310    31   635     9    31   527     0      19  return
 20311    31   635    16    31   527     0     111  Bits.getInt
 20312    31   635    27    31   527     0      59  (
 20313    31   635    28    31   527     0     111  a
 20314    31   635    29    31   527     0      66  ,
 20315    31   635    31    31   527     0     111  bigEndian
 20316    31   635    40    31   527     0      60  )
 20317    31   635    41    31   527     0     102  ;
 20318    31   636     5    31   527     0      64  }
 20319    31   636     5    31   527     0    1302  ENDMETHOD
 20320    31   636     5    31   528     0    1303  STARTMETHOD
 20321    31   638    12    31   528     0      36  int
 20322    31   638    16    31   528     0     111  getInt
 20323    31   638    22    31   528     0      59  (
 20324    31   638    23    31   528     0      60  )
 20325    31   638    25    31   528     0      63  {
 20326    31   639     9    31   528     0      19  return
 20327    31   639    16    31   528     0     111  getInt
 20328    31   639    22    31   528     0      59  (
 20329    31   639    23    31   528     0     111  ix
 20330    31   639    25    31   528     0      59  (
 20331    31   639    26    31   528     0     111  nextGetIndex
 20332    31   639    38    31   528     0      59  (
 20333    31   639    39    31   528     0      59  (
 20334    31   639    40    31   528     0     112  1
 20335    31   639    42    31   528     0      90  <<
 20336    31   639    45    31   528     0     112  2
 20337    31   639    46    31   528     0      60  )
 20338    31   639    47    31   528     0      60  )
 20339    31   639    48    31   528     0      60  )
 20340    31   639    49    31   528     0      60  )
 20341    31   639    50    31   528     0     102  ;
 20342    31   640     5    31   528     0      64  }
 20343    31   640     5    31   528     0    1304  ENDMETHOD
 20344    31   640     5    31   529     0    1305  STARTMETHOD
 20345    31   642    12    31   529     0      36  int
 20346    31   642    16    31   529     0     111  getInt
 20347    31   642    22    31   529     0      59  (
 20348    31   642    23    31   529     0      36  int
 20349    31   642    27    31   529     0     111  i
 20350    31   642    28    31   529     0      60  )
 20351    31   642    30    31   529     0      63  {
 20352    31   643     9    31   529     0      19  return
 20353    31   643    16    31   529     0     111  getInt
 20354    31   643    22    31   529     0      59  (
 20355    31   643    23    31   529     0     111  ix
 20356    31   643    25    31   529     0      59  (
 20357    31   643    26    31   529     0     111  checkIndex
 20358    31   643    36    31   529     0      59  (
 20359    31   643    37    31   529     0     111  i
 20360    31   643    38    31   529     0      66  ,
 20361    31   643    40    31   529     0      59  (
 20362    31   643    41    31   529     0     112  1
 20363    31   643    43    31   529     0      90  <<
 20364    31   643    46    31   529     0     112  2
 20365    31   643    47    31   529     0      60  )
 20366    31   643    48    31   529     0      60  )
 20367    31   643    49    31   529     0      60  )
 20368    31   643    50    31   529     0      60  )
 20369    31   643    51    31   529     0     102  ;
 20370    31   644     5    31   529     0      64  }
 20371    31   644     5    31   529     0    1306  ENDMETHOD
 20372    31   644     5    31   530     0    1307  STARTMETHOD
 20373    31   648     5    31   530     0      41  private
 20374    31   648    13    31   530     0     111  ByteBuffer
 20375    31   648    24    31   530     0     111  putInt
 20376    31   648    30    31   530     0      59  (
 20377    31   648    31    31   530     0      53  long
 20378    31   648    36    31   530     0     111  a
 20379    31   648    37    31   530     0      66  ,
 20380    31   648    39    31   530     0      36  int
 20381    31   648    43    31   530     0     111  x
 20382    31   648    44    31   530     0      60  )
 20383    31   648    46    31   530     0      63  {
 20384    31   650     9    31   530     0      31  if
 20385    31   650    12    31   530     0      59  (
 20386    31   650    13    31   530     0     111  unaligned
 20387    31   650    22    31   530     0      60  )
 20388    31   650    24    31   530     0      63  {
 20389    31   651    13    31   530     0      36  int
 20390    31   651    17    31   530     0     111  y
 20391    31   651    19    31   530     0      67  =
 20392    31   651    21    31   530     0      59  (
 20393    31   651    22    31   530     0     111  x
 20394    31   651    23    31   530     0      60  )
 20395    31   651    24    31   530     0     102  ;
 20396    31   652    13    31   530     0     111  unsafe.putInt
 20397    31   652    26    31   530     0      59  (
 20398    31   652    27    31   530     0     111  a
 20399    31   652    28    31   530     0      66  ,
 20400    31   652    30    31   530     0      59  (
 20401    31   652    31    31   530     0     111  nativeByteOrder
 20402    31   652    47    31   530     0      58  ?
 20403    31   652    49    31   530     0     111  y
 20404    31   652    51    31   530     0      65  :
 20405    31   652    53    31   530     0     111  Bits.swap
 20406    31   652    62    31   530     0      59  (
 20407    31   652    63    31   530     0     111  y
 20408    31   652    64    31   530     0      60  )
 20409    31   652    65    31   530     0      60  )
 20410    31   652    66    31   530     0      60  )
 20411    31   652    67    31   530     0     102  ;
 20412    31   653     9    31   530     0      64  }
 20413    31   653    11    31   530     0      48  else
 20414    31   653    16    31   530     0      63  {
 20415    31   654    13    31   530     0     111  Bits.putInt
 20416    31   654    24    31   530     0      59  (
 20417    31   654    25    31   530     0     111  a
 20418    31   654    26    31   530     0      66  ,
 20419    31   654    28    31   530     0     111  x
 20420    31   654    29    31   530     0      66  ,
 20421    31   654    31    31   530     0     111  bigEndian
 20422    31   654    40    31   530     0      60  )
 20423    31   654    41    31   530     0     102  ;
 20424    31   655     9    31   530     0      64  }
 20425    31   656     9    31   530     0      19  return
 20426    31   656    16    31   530     0      44  this
 20427    31   656    20    31   530     0     102  ;
 20428    31   660     5    31   530     0      64  }
 20429    31   660     5    31   530     0    1308  ENDMETHOD
 20430    31   660     5    31   531     0    1309  STARTMETHOD
 20431    31   662    12    31   531     0     111  ByteBuffer
 20432    31   662    23    31   531     0     111  putInt
 20433    31   662    29    31   531     0      59  (
 20434    31   662    30    31   531     0      36  int
 20435    31   662    34    31   531     0     111  x
 20436    31   662    35    31   531     0      60  )
 20437    31   662    37    31   531     0      63  {
 20438    31   664     9    31   531     0     111  putInt
 20439    31   664    15    31   531     0      59  (
 20440    31   664    16    31   531     0     111  ix
 20441    31   664    18    31   531     0      59  (
 20442    31   664    19    31   531     0     111  nextPutIndex
 20443    31   664    31    31   531     0      59  (
 20444    31   664    32    31   531     0      59  (
 20445    31   664    33    31   531     0     112  1
 20446    31   664    35    31   531     0      90  <<
 20447    31   664    38    31   531     0     112  2
 20448    31   664    39    31   531     0      60  )
 20449    31   664    40    31   531     0      60  )
 20450    31   664    41    31   531     0      60  )
 20451    31   664    42    31   531     0      66  ,
 20452    31   664    44    31   531     0     111  x
 20453    31   664    45    31   531     0      60  )
 20454    31   664    46    31   531     0     102  ;
 20455    31   665     9    31   531     0      19  return
 20456    31   665    16    31   531     0      44  this
 20457    31   665    20    31   531     0     102  ;
 20458    31   669     5    31   531     0      64  }
 20459    31   669     5    31   531     0    1310  ENDMETHOD
 20460    31   669     5    31   532     0    1311  STARTMETHOD
 20461    31   671    12    31   532     0     111  ByteBuffer
 20462    31   671    23    31   532     0     111  putInt
 20463    31   671    29    31   532     0      59  (
 20464    31   671    30    31   532     0      36  int
 20465    31   671    34    31   532     0     111  i
 20466    31   671    35    31   532     0      66  ,
 20467    31   671    37    31   532     0      36  int
 20468    31   671    41    31   532     0     111  x
 20469    31   671    42    31   532     0      60  )
 20470    31   671    44    31   532     0      63  {
 20471    31   673     9    31   532     0     111  putInt
 20472    31   673    15    31   532     0      59  (
 20473    31   673    16    31   532     0     111  ix
 20474    31   673    18    31   532     0      59  (
 20475    31   673    19    31   532     0     111  checkIndex
 20476    31   673    29    31   532     0      59  (
 20477    31   673    30    31   532     0     111  i
 20478    31   673    31    31   532     0      66  ,
 20479    31   673    33    31   532     0      59  (
 20480    31   673    34    31   532     0     112  1
 20481    31   673    36    31   532     0      90  <<
 20482    31   673    39    31   532     0     112  2
 20483    31   673    40    31   532     0      60  )
 20484    31   673    41    31   532     0      60  )
 20485    31   673    42    31   532     0      60  )
 20486    31   673    43    31   532     0      66  ,
 20487    31   673    45    31   532     0     111  x
 20488    31   673    46    31   532     0      60  )
 20489    31   673    47    31   532     0     102  ;
 20490    31   674     9    31   532     0      19  return
 20491    31   674    16    31   532     0      44  this
 20492    31   674    20    31   532     0     102  ;
 20493    31   678     5    31   532     0      64  }
 20494    31   678     5    31   532     0    1312  ENDMETHOD
 20495    31   678     5    31   533     0    1313  STARTMETHOD
 20496    31   680    12    31   533     0     111  IntBuffer
 20497    31   680    22    31   533     0     111  asIntBuffer
 20498    31   680    33    31   533     0      59  (
 20499    31   680    34    31   533     0      60  )
 20500    31   680    36    31   533     0      63  {
 20501    31   681     9    31   533     1      36  int
 20502    31   681    13    31   533     1     111  off
 20503    31   681    17    31   533     1      67  =
 20504    31   681    19    31   533     1     111  this.position
 20505    31   681    32    31   533     1      59  (
 20506    31   681    33    31   533     1      60  )
 20507    31   681    34    31   533     1     102  ;
 20508    31   682     9    31   533     1      36  int
 20509    31   682    13    31   533     1     111  lim
 20510    31   682    17    31   533     1      67  =
 20511    31   682    19    31   533     1     111  this.limit
 20512    31   682    29    31   533     1      59  (
 20513    31   682    30    31   533     1      60  )
 20514    31   682    31    31   533     1     102  ;
 20515    31   683     9    31   533     0     111  assert
 20516    31   683    16    31   533     0      59  (
 20517    31   683    17    31   533     0     111  off
 20518    31   683    21    31   533     0      92  <=
 20519    31   683    24    31   533     0     111  lim
 20520    31   683    27    31   533     0      60  )
 20521    31   683    28    31   533     0     102  ;
 20522    31   684     9    31   533     0      36  int
 20523    31   684    13    31   533     0     111  rem
 20524    31   684    17    31   533     0      67  =
 20525    31   684    19    31   533     0      59  (
 20526    31   684    20    31   533     0     111  off
 20527    31   684    24    31   533     0      92  <=
 20528    31   684    27    31   533     0     111  lim
 20529    31   684    31    31   533     0      58  ?
 20530    31   684    33    31   533     0     111  lim
 20531    31   684    37    31   533     0      77  -
 20532    31   684    39    31   533     0     111  off
 20533    31   684    43    31   533     0      65  :
 20534    31   684    45    31   533     0     112  0
 20535    31   684    46    31   533     0      60  )
 20536    31   684    47    31   533     0     102  ;
 20537    31   686     9    31   533     0      36  int
 20538    31   686    13    31   533     0     111  size
 20539    31   686    18    31   533     0      67  =
 20540    31   686    20    31   533     0     111  rem
 20541    31   686    24    31   533     0      84  >>
 20542    31   686    27    31   533     0     112  2
 20543    31   686    28    31   533     0     102  ;
 20544    31   687     9    31   533     0      31  if
 20545    31   687    12    31   533     0      59  (
 20546    31   687    13    31   533     0      69  !
 20547    31   687    14    31   533     0     111  unaligned
 20548    31   687    24    31   533     0     101  &&
 20549    31   687    27    31   533     0      59  (
 20550    31   687    28    31   533     0      59  (
 20551    31   687    29    31   533     0     111  address
 20552    31   687    37    31   533     0      74  +
 20553    31   687    39    31   533     0     111  off
 20554    31   687    42    31   533     0      60  )
 20555    31   687    44    31   533     0      82  %
 20556    31   687    46    31   533     0      59  (
 20557    31   687    47    31   533     0     112  1
 20558    31   687    49    31   533     0      90  <<
 20559    31   687    52    31   533     0     112  2
 20560    31   687    53    31   533     0      60  )
 20561    31   687    55    31   533     0      71  !=
 20562    31   687    58    31   533     0     112  0
 20563    31   687    59    31   533     0      60  )
 20564    31   687    60    31   533     0      60  )
 20565    31   687    62    31   533     0      63  {
 20566    31   688    13    31   533     0      19  return
 20567    31   688    20    31   533     0      59  (
 20568    31   688    21    31   533     0     111  bigEndian
 20569    31   689    21    31   533     0      58  ?
 20570    31   689    23    31   533     0      59  (
 20571    31   689    24    31   533     0     111  IntBuffer
 20572    31   689    33    31   533     0      60  )
 20573    31   689    34    31   533     0      59  (
 20574    31   689    39    31   533     0     111  ByteBufferAsIntBufferB
 20575    31   689    61    31   533     0      59  (
 20576    31   689    62    31   533     0      44  this
 20577    31   689    66    31   533     0      66  ,
 20578    31   690    72    31   533     0      77  -
 20579    31   690    73    31   533     0     112  1
 20580    31   690    74    31   533     0      66  ,
 20581    31   691    72    31   533     0     112  0
 20582    31   691    73    31   533     0      66  ,
 20583    31   692    72    31   533     1     111  size
 20584    31   692    76    31   533     1      66  ,
 20585    31   693    72    31   533     1     111  size
 20586    31   693    76    31   533     1      66  ,
 20587    31   694    72    31   533     0     111  off
 20588    31   694    75    31   533     0      60  )
 20589    31   694    76    31   533     0      60  )
 20590    31   695    21    31   533     0      65  :
 20591    31   695    23    31   533     0      59  (
 20592    31   695    24    31   533     0     111  IntBuffer
 20593    31   695    33    31   533     0      60  )
 20594    31   695    34    31   533     0      59  (
 20595    31   695    39    31   533     0     111  ByteBufferAsIntBufferL
 20596    31   695    61    31   533     0      59  (
 20597    31   695    62    31   533     0      44  this
 20598    31   695    66    31   533     0      66  ,
 20599    31   696    72    31   533     0      77  -
 20600    31   696    73    31   533     0     112  1
 20601    31   696    74    31   533     0      66  ,
 20602    31   697    72    31   533     0     112  0
 20603    31   697    73    31   533     0      66  ,
 20604    31   698    72    31   533     1     111  size
 20605    31   698    76    31   533     1      66  ,
 20606    31   699    72    31   533     1     111  size
 20607    31   699    76    31   533     1      66  ,
 20608    31   700    72    31   533     0     111  off
 20609    31   700    75    31   533     0      60  )
 20610    31   700    76    31   533     0      60  )
 20611    31   700    77    31   533     0      60  )
 20612    31   700    78    31   533     0     102  ;
 20613    31   701     9    31   533     0      64  }
 20614    31   701    11    31   533     0      48  else
 20615    31   701    16    31   533     0      63  {
 20616    31   702    13    31   533     0      19  return
 20617    31   702    20    31   533     0      59  (
 20618    31   702    21    31   533     0     111  nativeByteOrder
 20619    31   703    21    31   533     0      58  ?
 20620    31   703    23    31   533     0      59  (
 20621    31   703    24    31   533     0     111  IntBuffer
 20622    31   703    33    31   533     0      60  )
 20623    31   703    34    31   533     0      59  (
 20624    31   703    39    31   533     0     111  DirectIntBufferU
 20625    31   703    55    31   533     0      59  (
 20626    31   703    56    31   533     0      44  this
 20627    31   703    60    31   533     0      66  ,
 20628    31   704    66    31   533     0      77  -
 20629    31   704    67    31   533     0     112  1
 20630    31   704    68    31   533     0      66  ,
 20631    31   705    66    31   533     0     112  0
 20632    31   705    67    31   533     0      66  ,
 20633    31   706    66    31   533     1     111  size
 20634    31   706    70    31   533     1      66  ,
 20635    31   707    66    31   533     1     111  size
 20636    31   707    70    31   533     1      66  ,
 20637    31   708    66    31   533     0     111  off
 20638    31   708    69    31   533     0      60  )
 20639    31   708    70    31   533     0      60  )
 20640    31   709    21    31   533     0      65  :
 20641    31   709    23    31   533     0      59  (
 20642    31   709    24    31   533     0     111  IntBuffer
 20643    31   709    33    31   533     0      60  )
 20644    31   709    34    31   533     0      59  (
 20645    31   709    39    31   533     0     111  DirectIntBufferS
 20646    31   709    55    31   533     0      59  (
 20647    31   709    56    31   533     0      44  this
 20648    31   709    60    31   533     0      66  ,
 20649    31   710    66    31   533     0      77  -
 20650    31   710    67    31   533     0     112  1
 20651    31   710    68    31   533     0      66  ,
 20652    31   711    66    31   533     0     112  0
 20653    31   711    67    31   533     0      66  ,
 20654    31   712    66    31   533     1     111  size
 20655    31   712    70    31   533     1      66  ,
 20656    31   713    66    31   533     1     111  size
 20657    31   713    70    31   533     1      66  ,
 20658    31   714    66    31   533     0     111  off
 20659    31   714    69    31   533     0      60  )
 20660    31   714    70    31   533     0      60  )
 20661    31   714    71    31   533     0      60  )
 20662    31   714    72    31   533     0     102  ;
 20663    31   715     9    31   533     0      64  }
 20664    31   716     5    31   533     0      64  }
 20665    31   716     5    31   533     0    1314  ENDMETHOD
 20666    31   716     5    31   534     0    1315  STARTMETHOD
 20667    31   721     5    31   534     0      41  private
 20668    31   721    13    31   534     0      53  long
 20669    31   721    18    31   534     0     111  getLong
 20670    31   721    25    31   534     0      59  (
 20671    31   721    26    31   534     0      53  long
 20672    31   721    31    31   534     0     111  a
 20673    31   721    32    31   534     0      60  )
 20674    31   721    34    31   534     0      63  {
 20675    31   722     9    31   534     0      31  if
 20676    31   722    12    31   534     0      59  (
 20677    31   722    13    31   534     0     111  unaligned
 20678    31   722    22    31   534     0      60  )
 20679    31   722    24    31   534     0      63  {
 20680    31   723    13    31   534     0      53  long
 20681    31   723    18    31   534     0     111  x
 20682    31   723    20    31   534     0      67  =
 20683    31   723    22    31   534     0     111  unsafe.getLong
 20684    31   723    36    31   534     0      59  (
 20685    31   723    37    31   534     0     111  a
 20686    31   723    38    31   534     0      60  )
 20687    31   723    39    31   534     0     102  ;
 20688    31   724    13    31   534     0      19  return
 20689    31   724    20    31   534     0      59  (
 20690    31   724    21    31   534     0     111  nativeByteOrder
 20691    31   724    37    31   534     0      58  ?
 20692    31   724    39    31   534     0     111  x
 20693    31   724    41    31   534     0      65  :
 20694    31   724    43    31   534     0     111  Bits.swap
 20695    31   724    52    31   534     0      59  (
 20696    31   724    53    31   534     0     111  x
 20697    31   724    54    31   534     0      60  )
 20698    31   724    55    31   534     0      60  )
 20699    31   724    56    31   534     0     102  ;
 20700    31   725     9    31   534     0      64  }
 20701    31   726     9    31   534     0      19  return
 20702    31   726    16    31   534     0     111  Bits.getLong
 20703    31   726    28    31   534     0      59  (
 20704    31   726    29    31   534     0     111  a
 20705    31   726    30    31   534     0      66  ,
 20706    31   726    32    31   534     0     111  bigEndian
 20707    31   726    41    31   534     0      60  )
 20708    31   726    42    31   534     0     102  ;
 20709    31   727     5    31   534     0      64  }
 20710    31   727     5    31   534     0    1316  ENDMETHOD
 20711    31   727     5    31   535     0    1317  STARTMETHOD
 20712    31   729    12    31   535     0      53  long
 20713    31   729    17    31   535     0     111  getLong
 20714    31   729    24    31   535     0      59  (
 20715    31   729    25    31   535     0      60  )
 20716    31   729    27    31   535     0      63  {
 20717    31   730     9    31   535     0      19  return
 20718    31   730    16    31   535     0     111  getLong
 20719    31   730    23    31   535     0      59  (
 20720    31   730    24    31   535     0     111  ix
 20721    31   730    26    31   535     0      59  (
 20722    31   730    27    31   535     0     111  nextGetIndex
 20723    31   730    39    31   535     0      59  (
 20724    31   730    40    31   535     0      59  (
 20725    31   730    41    31   535     0     112  1
 20726    31   730    43    31   535     0      90  <<
 20727    31   730    46    31   535     0     112  3
 20728    31   730    47    31   535     0      60  )
 20729    31   730    48    31   535     0      60  )
 20730    31   730    49    31   535     0      60  )
 20731    31   730    50    31   535     0      60  )
 20732    31   730    51    31   535     0     102  ;
 20733    31   731     5    31   535     0      64  }
 20734    31   731     5    31   535     0    1318  ENDMETHOD
 20735    31   731     5    31   536     0    1319  STARTMETHOD
 20736    31   733    12    31   536     0      53  long
 20737    31   733    17    31   536     0     111  getLong
 20738    31   733    24    31   536     0      59  (
 20739    31   733    25    31   536     0      36  int
 20740    31   733    29    31   536     0     111  i
 20741    31   733    30    31   536     0      60  )
 20742    31   733    32    31   536     0      63  {
 20743    31   734     9    31   536     0      19  return
 20744    31   734    16    31   536     0     111  getLong
 20745    31   734    23    31   536     0      59  (
 20746    31   734    24    31   536     0     111  ix
 20747    31   734    26    31   536     0      59  (
 20748    31   734    27    31   536     0     111  checkIndex
 20749    31   734    37    31   536     0      59  (
 20750    31   734    38    31   536     0     111  i
 20751    31   734    39    31   536     0      66  ,
 20752    31   734    41    31   536     0      59  (
 20753    31   734    42    31   536     0     112  1
 20754    31   734    44    31   536     0      90  <<
 20755    31   734    47    31   536     0     112  3
 20756    31   734    48    31   536     0      60  )
 20757    31   734    49    31   536     0      60  )
 20758    31   734    50    31   536     0      60  )
 20759    31   734    51    31   536     0      60  )
 20760    31   734    52    31   536     0     102  ;
 20761    31   735     5    31   536     0      64  }
 20762    31   735     5    31   536     0    1320  ENDMETHOD
 20763    31   735     5    31   537     0    1321  STARTMETHOD
 20764    31   739     5    31   537     0      41  private
 20765    31   739    13    31   537     0     111  ByteBuffer
 20766    31   739    24    31   537     0     111  putLong
 20767    31   739    31    31   537     0      59  (
 20768    31   739    32    31   537     0      53  long
 20769    31   739    37    31   537     0     111  a
 20770    31   739    38    31   537     0      66  ,
 20771    31   739    40    31   537     0      53  long
 20772    31   739    45    31   537     0     111  x
 20773    31   739    46    31   537     0      60  )
 20774    31   739    48    31   537     0      63  {
 20775    31   741     9    31   537     0      31  if
 20776    31   741    12    31   537     0      59  (
 20777    31   741    13    31   537     0     111  unaligned
 20778    31   741    22    31   537     0      60  )
 20779    31   741    24    31   537     0      63  {
 20780    31   742    13    31   537     0      53  long
 20781    31   742    18    31   537     0     111  y
 20782    31   742    20    31   537     0      67  =
 20783    31   742    22    31   537     0      59  (
 20784    31   742    23    31   537     0     111  x
 20785    31   742    24    31   537     0      60  )
 20786    31   742    25    31   537     0     102  ;
 20787    31   743    13    31   537     0     111  unsafe.putLong
 20788    31   743    27    31   537     0      59  (
 20789    31   743    28    31   537     0     111  a
 20790    31   743    29    31   537     0      66  ,
 20791    31   743    31    31   537     0      59  (
 20792    31   743    32    31   537     0     111  nativeByteOrder
 20793    31   743    48    31   537     0      58  ?
 20794    31   743    50    31   537     0     111  y
 20795    31   743    52    31   537     0      65  :
 20796    31   743    54    31   537     0     111  Bits.swap
 20797    31   743    63    31   537     0      59  (
 20798    31   743    64    31   537     0     111  y
 20799    31   743    65    31   537     0      60  )
 20800    31   743    66    31   537     0      60  )
 20801    31   743    67    31   537     0      60  )
 20802    31   743    68    31   537     0     102  ;
 20803    31   744     9    31   537     0      64  }
 20804    31   744    11    31   537     0      48  else
 20805    31   744    16    31   537     0      63  {
 20806    31   745    13    31   537     0     111  Bits.putLong
 20807    31   745    25    31   537     0      59  (
 20808    31   745    26    31   537     0     111  a
 20809    31   745    27    31   537     0      66  ,
 20810    31   745    29    31   537     0     111  x
 20811    31   745    30    31   537     0      66  ,
 20812    31   745    32    31   537     0     111  bigEndian
 20813    31   745    41    31   537     0      60  )
 20814    31   745    42    31   537     0     102  ;
 20815    31   746     9    31   537     0      64  }
 20816    31   747     9    31   537     0      19  return
 20817    31   747    16    31   537     0      44  this
 20818    31   747    20    31   537     0     102  ;
 20819    31   751     5    31   537     0      64  }
 20820    31   751     5    31   537     0    1322  ENDMETHOD
 20821    31   751     5    31   538     0    1323  STARTMETHOD
 20822    31   753    12    31   538     0     111  ByteBuffer
 20823    31   753    23    31   538     0     111  putLong
 20824    31   753    30    31   538     0      59  (
 20825    31   753    31    31   538     0      53  long
 20826    31   753    36    31   538     0     111  x
 20827    31   753    37    31   538     0      60  )
 20828    31   753    39    31   538     0      63  {
 20829    31   755     9    31   538     0     111  putLong
 20830    31   755    16    31   538     0      59  (
 20831    31   755    17    31   538     0     111  ix
 20832    31   755    19    31   538     0      59  (
 20833    31   755    20    31   538     0     111  nextPutIndex
 20834    31   755    32    31   538     0      59  (
 20835    31   755    33    31   538     0      59  (
 20836    31   755    34    31   538     0     112  1
 20837    31   755    36    31   538     0      90  <<
 20838    31   755    39    31   538     0     112  3
 20839    31   755    40    31   538     0      60  )
 20840    31   755    41    31   538     0      60  )
 20841    31   755    42    31   538     0      60  )
 20842    31   755    43    31   538     0      66  ,
 20843    31   755    45    31   538     0     111  x
 20844    31   755    46    31   538     0      60  )
 20845    31   755    47    31   538     0     102  ;
 20846    31   756     9    31   538     0      19  return
 20847    31   756    16    31   538     0      44  this
 20848    31   756    20    31   538     0     102  ;
 20849    31   760     5    31   538     0      64  }
 20850    31   760     5    31   538     0    1324  ENDMETHOD
 20851    31   760     5    31   539     0    1325  STARTMETHOD
 20852    31   762    12    31   539     0     111  ByteBuffer
 20853    31   762    23    31   539     0     111  putLong
 20854    31   762    30    31   539     0      59  (
 20855    31   762    31    31   539     0      36  int
 20856    31   762    35    31   539     0     111  i
 20857    31   762    36    31   539     0      66  ,
 20858    31   762    38    31   539     0      53  long
 20859    31   762    43    31   539     0     111  x
 20860    31   762    44    31   539     0      60  )
 20861    31   762    46    31   539     0      63  {
 20862    31   764     9    31   539     0     111  putLong
 20863    31   764    16    31   539     0      59  (
 20864    31   764    17    31   539     0     111  ix
 20865    31   764    19    31   539     0      59  (
 20866    31   764    20    31   539     0     111  checkIndex
 20867    31   764    30    31   539     0      59  (
 20868    31   764    31    31   539     0     111  i
 20869    31   764    32    31   539     0      66  ,
 20870    31   764    34    31   539     0      59  (
 20871    31   764    35    31   539     0     112  1
 20872    31   764    37    31   539     0      90  <<
 20873    31   764    40    31   539     0     112  3
 20874    31   764    41    31   539     0      60  )
 20875    31   764    42    31   539     0      60  )
 20876    31   764    43    31   539     0      60  )
 20877    31   764    44    31   539     0      66  ,
 20878    31   764    46    31   539     0     111  x
 20879    31   764    47    31   539     0      60  )
 20880    31   764    48    31   539     0     102  ;
 20881    31   765     9    31   539     0      19  return
 20882    31   765    16    31   539     0      44  this
 20883    31   765    20    31   539     0     102  ;
 20884    31   769     5    31   539     0      64  }
 20885    31   769     5    31   539     0    1326  ENDMETHOD
 20886    31   769     5    31   540     0    1327  STARTMETHOD
 20887    31   771    12    31   540     0     111  LongBuffer
 20888    31   771    23    31   540     0     111  asLongBuffer
 20889    31   771    35    31   540     0      59  (
 20890    31   771    36    31   540     0      60  )
 20891    31   771    38    31   540     0      63  {
 20892    31   772     9    31   540     1      36  int
 20893    31   772    13    31   540     1     111  off
 20894    31   772    17    31   540     1      67  =
 20895    31   772    19    31   540     1     111  this.position
 20896    31   772    32    31   540     1      59  (
 20897    31   772    33    31   540     1      60  )
 20898    31   772    34    31   540     1     102  ;
 20899    31   773     9    31   540     1      36  int
 20900    31   773    13    31   540     1     111  lim
 20901    31   773    17    31   540     1      67  =
 20902    31   773    19    31   540     1     111  this.limit
 20903    31   773    29    31   540     1      59  (
 20904    31   773    30    31   540     1      60  )
 20905    31   773    31    31   540     1     102  ;
 20906    31   774     9    31   540     0     111  assert
 20907    31   774    16    31   540     0      59  (
 20908    31   774    17    31   540     0     111  off
 20909    31   774    21    31   540     0      92  <=
 20910    31   774    24    31   540     0     111  lim
 20911    31   774    27    31   540     0      60  )
 20912    31   774    28    31   540     0     102  ;
 20913    31   775     9    31   540     0      36  int
 20914    31   775    13    31   540     0     111  rem
 20915    31   775    17    31   540     0      67  =
 20916    31   775    19    31   540     0      59  (
 20917    31   775    20    31   540     0     111  off
 20918    31   775    24    31   540     0      92  <=
 20919    31   775    27    31   540     0     111  lim
 20920    31   775    31    31   540     0      58  ?
 20921    31   775    33    31   540     0     111  lim
 20922    31   775    37    31   540     0      77  -
 20923    31   775    39    31   540     0     111  off
 20924    31   775    43    31   540     0      65  :
 20925    31   775    45    31   540     0     112  0
 20926    31   775    46    31   540     0      60  )
 20927    31   775    47    31   540     0     102  ;
 20928    31   777     9    31   540     0      36  int
 20929    31   777    13    31   540     0     111  size
 20930    31   777    18    31   540     0      67  =
 20931    31   777    20    31   540     0     111  rem
 20932    31   777    24    31   540     0      84  >>
 20933    31   777    27    31   540     0     112  3
 20934    31   777    28    31   540     0     102  ;
 20935    31   778     9    31   540     0      31  if
 20936    31   778    12    31   540     0      59  (
 20937    31   778    13    31   540     0      69  !
 20938    31   778    14    31   540     0     111  unaligned
 20939    31   778    24    31   540     0     101  &&
 20940    31   778    27    31   540     0      59  (
 20941    31   778    28    31   540     0      59  (
 20942    31   778    29    31   540     0     111  address
 20943    31   778    37    31   540     0      74  +
 20944    31   778    39    31   540     0     111  off
 20945    31   778    42    31   540     0      60  )
 20946    31   778    44    31   540     0      82  %
 20947    31   778    46    31   540     0      59  (
 20948    31   778    47    31   540     0     112  1
 20949    31   778    49    31   540     0      90  <<
 20950    31   778    52    31   540     0     112  3
 20951    31   778    53    31   540     0      60  )
 20952    31   778    55    31   540     0      71  !=
 20953    31   778    58    31   540     0     112  0
 20954    31   778    59    31   540     0      60  )
 20955    31   778    60    31   540     0      60  )
 20956    31   778    62    31   540     0      63  {
 20957    31   779    13    31   540     0      19  return
 20958    31   779    20    31   540     0      59  (
 20959    31   779    21    31   540     0     111  bigEndian
 20960    31   780    21    31   540     0      58  ?
 20961    31   780    23    31   540     0      59  (
 20962    31   780    24    31   540     0     111  LongBuffer
 20963    31   780    34    31   540     0      60  )
 20964    31   780    35    31   540     0      59  (
 20965    31   780    40    31   540     0     111  ByteBufferAsLongBufferB
 20966    31   780    63    31   540     0      59  (
 20967    31   780    64    31   540     0      44  this
 20968    31   780    68    31   540     0      66  ,
 20969    31   781    72    31   540     0      77  -
 20970    31   781    73    31   540     0     112  1
 20971    31   781    74    31   540     0      66  ,
 20972    31   782    72    31   540     0     112  0
 20973    31   782    73    31   540     0      66  ,
 20974    31   783    72    31   540     1     111  size
 20975    31   783    76    31   540     1      66  ,
 20976    31   784    72    31   540     1     111  size
 20977    31   784    76    31   540     1      66  ,
 20978    31   785    72    31   540     0     111  off
 20979    31   785    75    31   540     0      60  )
 20980    31   785    76    31   540     0      60  )
 20981    31   786    21    31   540     0      65  :
 20982    31   786    23    31   540     0      59  (
 20983    31   786    24    31   540     0     111  LongBuffer
 20984    31   786    34    31   540     0      60  )
 20985    31   786    35    31   540     0      59  (
 20986    31   786    40    31   540     0     111  ByteBufferAsLongBufferL
 20987    31   786    63    31   540     0      59  (
 20988    31   786    64    31   540     0      44  this
 20989    31   786    68    31   540     0      66  ,
 20990    31   787    72    31   540     0      77  -
 20991    31   787    73    31   540     0     112  1
 20992    31   787    74    31   540     0      66  ,
 20993    31   788    72    31   540     0     112  0
 20994    31   788    73    31   540     0      66  ,
 20995    31   789    72    31   540     1     111  size
 20996    31   789    76    31   540     1      66  ,
 20997    31   790    72    31   540     1     111  size
 20998    31   790    76    31   540     1      66  ,
 20999    31   791    72    31   540     0     111  off
 21000    31   791    75    31   540     0      60  )
 21001    31   791    76    31   540     0      60  )
 21002    31   791    77    31   540     0      60  )
 21003    31   791    78    31   540     0     102  ;
 21004    31   792     9    31   540     0      64  }
 21005    31   792    11    31   540     0      48  else
 21006    31   792    16    31   540     0      63  {
 21007    31   793    13    31   540     0      19  return
 21008    31   793    20    31   540     0      59  (
 21009    31   793    21    31   540     0     111  nativeByteOrder
 21010    31   794    21    31   540     0      58  ?
 21011    31   794    23    31   540     0      59  (
 21012    31   794    24    31   540     0     111  LongBuffer
 21013    31   794    34    31   540     0      60  )
 21014    31   794    35    31   540     0      59  (
 21015    31   794    40    31   540     0     111  DirectLongBufferU
 21016    31   794    57    31   540     0      59  (
 21017    31   794    58    31   540     0      44  this
 21018    31   794    62    31   540     0      66  ,
 21019    31   795    66    31   540     0      77  -
 21020    31   795    67    31   540     0     112  1
 21021    31   795    68    31   540     0      66  ,
 21022    31   796    66    31   540     0     112  0
 21023    31   796    67    31   540     0      66  ,
 21024    31   797    66    31   540     1     111  size
 21025    31   797    70    31   540     1      66  ,
 21026    31   798    66    31   540     1     111  size
 21027    31   798    70    31   540     1      66  ,
 21028    31   799    66    31   540     0     111  off
 21029    31   799    69    31   540     0      60  )
 21030    31   799    70    31   540     0      60  )
 21031    31   800    21    31   540     0      65  :
 21032    31   800    23    31   540     0      59  (
 21033    31   800    24    31   540     0     111  LongBuffer
 21034    31   800    34    31   540     0      60  )
 21035    31   800    35    31   540     0      59  (
 21036    31   800    40    31   540     0     111  DirectLongBufferS
 21037    31   800    57    31   540     0      59  (
 21038    31   800    58    31   540     0      44  this
 21039    31   800    62    31   540     0      66  ,
 21040    31   801    66    31   540     0      77  -
 21041    31   801    67    31   540     0     112  1
 21042    31   801    68    31   540     0      66  ,
 21043    31   802    66    31   540     0     112  0
 21044    31   802    67    31   540     0      66  ,
 21045    31   803    66    31   540     1     111  size
 21046    31   803    70    31   540     1      66  ,
 21047    31   804    66    31   540     1     111  size
 21048    31   804    70    31   540     1      66  ,
 21049    31   805    66    31   540     0     111  off
 21050    31   805    69    31   540     0      60  )
 21051    31   805    70    31   540     0      60  )
 21052    31   805    71    31   540     0      60  )
 21053    31   805    72    31   540     0     102  ;
 21054    31   806     9    31   540     0      64  }
 21055    31   807     5    31   540     0      64  }
 21056    31   807     5    31   540     0    1328  ENDMETHOD
 21057    31   807     5    31   541     0    1329  STARTMETHOD
 21058    31   812     5    31   541     0      41  private
 21059    31   812    19    31   541     0     111  getFloat
 21060    31   812    27    31   541     0      59  (
 21061    31   812    28    31   541     0      53  long
 21062    31   812    33    31   541     0     111  a
 21063    31   812    34    31   541     0      60  )
 21064    31   812    36    31   541     0      63  {
 21065    31   813     9    31   541     0      31  if
 21066    31   813    12    31   541     0      59  (
 21067    31   813    13    31   541     0     111  unaligned
 21068    31   813    22    31   541     0      60  )
 21069    31   813    24    31   541     0      63  {
 21070    31   814    13    31   541     0      36  int
 21071    31   814    17    31   541     0     111  x
 21072    31   814    19    31   541     0      67  =
 21073    31   814    21    31   541     0     111  unsafe.getInt
 21074    31   814    34    31   541     0      59  (
 21075    31   814    35    31   541     0     111  a
 21076    31   814    36    31   541     0      60  )
 21077    31   814    37    31   541     0     102  ;
 21078    31   815    13    31   541     0      19  return
 21079    31   815    20    31   541     0     111  Float.intBitsToFloat
 21080    31   815    40    31   541     0      59  (
 21081    31   815    41    31   541     0     111  nativeByteOrder
 21082    31   815    57    31   541     0      58  ?
 21083    31   815    59    31   541     0     111  x
 21084    31   815    61    31   541     0      65  :
 21085    31   815    63    31   541     0     111  Bits.swap
 21086    31   815    72    31   541     0      59  (
 21087    31   815    73    31   541     0     111  x
 21088    31   815    74    31   541     0      60  )
 21089    31   815    75    31   541     0      60  )
 21090    31   815    76    31   541     0     102  ;
 21091    31   816     9    31   541     0      64  }
 21092    31   817     9    31   541     0      19  return
 21093    31   817    16    31   541     0     111  Bits.getFloat
 21094    31   817    29    31   541     0      59  (
 21095    31   817    30    31   541     0     111  a
 21096    31   817    31    31   541     0      66  ,
 21097    31   817    33    31   541     0     111  bigEndian
 21098    31   817    42    31   541     0      60  )
 21099    31   817    43    31   541     0     102  ;
 21100    31   818     5    31   541     0      64  }
 21101    31   818     5    31   541     0    1330  ENDMETHOD
 21102    31   818     5    31   542     0    1331  STARTMETHOD
 21103    31   820    18    31   542     0     111  getFloat
 21104    31   820    26    31   542     0      59  (
 21105    31   820    27    31   542     0      60  )
 21106    31   820    29    31   542     0      63  {
 21107    31   821     9    31   542     0      19  return
 21108    31   821    16    31   542     0     111  getFloat
 21109    31   821    24    31   542     0      59  (
 21110    31   821    25    31   542     0     111  ix
 21111    31   821    27    31   542     0      59  (
 21112    31   821    28    31   542     0     111  nextGetIndex
 21113    31   821    40    31   542     0      59  (
 21114    31   821    41    31   542     0      59  (
 21115    31   821    42    31   542     0     112  1
 21116    31   821    44    31   542     0      90  <<
 21117    31   821    47    31   542     0     112  2
 21118    31   821    48    31   542     0      60  )
 21119    31   821    49    31   542     0      60  )
 21120    31   821    50    31   542     0      60  )
 21121    31   821    51    31   542     0      60  )
 21122    31   821    52    31   542     0     102  ;
 21123    31   822     5    31   542     0      64  }
 21124    31   822     5    31   542     0    1332  ENDMETHOD
 21125    31   822     5    31   543     0    1333  STARTMETHOD
 21126    31   824    18    31   543     0     111  getFloat
 21127    31   824    26    31   543     0      59  (
 21128    31   824    27    31   543     0      36  int
 21129    31   824    31    31   543     0     111  i
 21130    31   824    32    31   543     0      60  )
 21131    31   824    34    31   543     0      63  {
 21132    31   825     9    31   543     0      19  return
 21133    31   825    16    31   543     0     111  getFloat
 21134    31   825    24    31   543     0      59  (
 21135    31   825    25    31   543     0     111  ix
 21136    31   825    27    31   543     0      59  (
 21137    31   825    28    31   543     0     111  checkIndex
 21138    31   825    38    31   543     0      59  (
 21139    31   825    39    31   543     0     111  i
 21140    31   825    40    31   543     0      66  ,
 21141    31   825    42    31   543     0      59  (
 21142    31   825    43    31   543     0     112  1
 21143    31   825    45    31   543     0      90  <<
 21144    31   825    48    31   543     0     112  2
 21145    31   825    49    31   543     0      60  )
 21146    31   825    50    31   543     0      60  )
 21147    31   825    51    31   543     0      60  )
 21148    31   825    52    31   543     0      60  )
 21149    31   825    53    31   543     0     102  ;
 21150    31   826     5    31   543     0      64  }
 21151    31   826     5    31   543     0    1334  ENDMETHOD
 21152    31   826     5    31   544     0    1335  STARTMETHOD
 21153    31   830     5    31   544     0      41  private
 21154    31   830    13    31   544     0     111  ByteBuffer
 21155    31   830    24    31   544     0     111  putFloat
 21156    31   830    32    31   544     0      59  (
 21157    31   830    33    31   544     0      53  long
 21158    31   830    38    31   544     0     111  a
 21159    31   830    39    31   544     0      66  ,
 21160    31   830    47    31   544     0     111  x
 21161    31   830    48    31   544     0      60  )
 21162    31   830    50    31   544     0      63  {
 21163    31   832     9    31   544     0      31  if
 21164    31   832    12    31   544     0      59  (
 21165    31   832    13    31   544     0     111  unaligned
 21166    31   832    22    31   544     0      60  )
 21167    31   832    24    31   544     0      63  {
 21168    31   833    13    31   544     0      36  int
 21169    31   833    17    31   544     0     111  y
 21170    31   833    19    31   544     0      67  =
 21171    31   833    21    31   544     0     111  Float.floatToRawIntBits
 21172    31   833    44    31   544     0      59  (
 21173    31   833    45    31   544     0     111  x
 21174    31   833    46    31   544     0      60  )
 21175    31   833    47    31   544     0     102  ;
 21176    31   834    13    31   544     0     111  unsafe.putInt
 21177    31   834    26    31   544     0      59  (
 21178    31   834    27    31   544     0     111  a
 21179    31   834    28    31   544     0      66  ,
 21180    31   834    30    31   544     0      59  (
 21181    31   834    31    31   544     0     111  nativeByteOrder
 21182    31   834    47    31   544     0      58  ?
 21183    31   834    49    31   544     0     111  y
 21184    31   834    51    31   544     0      65  :
 21185    31   834    53    31   544     0     111  Bits.swap
 21186    31   834    62    31   544     0      59  (
 21187    31   834    63    31   544     0     111  y
 21188    31   834    64    31   544     0      60  )
 21189    31   834    65    31   544     0      60  )
 21190    31   834    66    31   544     0      60  )
 21191    31   834    67    31   544     0     102  ;
 21192    31   835     9    31   544     0      64  }
 21193    31   835    11    31   544     0      48  else
 21194    31   835    16    31   544     0      63  {
 21195    31   836    13    31   544     0     111  Bits.putFloat
 21196    31   836    26    31   544     0      59  (
 21197    31   836    27    31   544     0     111  a
 21198    31   836    28    31   544     0      66  ,
 21199    31   836    30    31   544     0     111  x
 21200    31   836    31    31   544     0      66  ,
 21201    31   836    33    31   544     0     111  bigEndian
 21202    31   836    42    31   544     0      60  )
 21203    31   836    43    31   544     0     102  ;
 21204    31   837     9    31   544     0      64  }
 21205    31   838     9    31   544     0      19  return
 21206    31   838    16    31   544     0      44  this
 21207    31   838    20    31   544     0     102  ;
 21208    31   842     5    31   544     0      64  }
 21209    31   842     5    31   544     0    1336  ENDMETHOD
 21210    31   842     5    31   545     0    1337  STARTMETHOD
 21211    31   844    12    31   545     0     111  ByteBuffer
 21212    31   844    23    31   545     0     111  putFloat
 21213    31   844    31    31   545     0      59  (
 21214    31   844    38    31   545     0     111  x
 21215    31   844    39    31   545     0      60  )
 21216    31   844    41    31   545     0      63  {
 21217    31   846     9    31   545     0     111  putFloat
 21218    31   846    17    31   545     0      59  (
 21219    31   846    18    31   545     0     111  ix
 21220    31   846    20    31   545     0      59  (
 21221    31   846    21    31   545     0     111  nextPutIndex
 21222    31   846    33    31   545     0      59  (
 21223    31   846    34    31   545     0      59  (
 21224    31   846    35    31   545     0     112  1
 21225    31   846    37    31   545     0      90  <<
 21226    31   846    40    31   545     0     112  2
 21227    31   846    41    31   545     0      60  )
 21228    31   846    42    31   545     0      60  )
 21229    31   846    43    31   545     0      60  )
 21230    31   846    44    31   545     0      66  ,
 21231    31   846    46    31   545     0     111  x
 21232    31   846    47    31   545     0      60  )
 21233    31   846    48    31   545     0     102  ;
 21234    31   847     9    31   545     0      19  return
 21235    31   847    16    31   545     0      44  this
 21236    31   847    20    31   545     0     102  ;
 21237    31   851     5    31   545     0      64  }
 21238    31   851     5    31   545     0    1338  ENDMETHOD
 21239    31   851     5    31   546     0    1339  STARTMETHOD
 21240    31   853    12    31   546     0     111  ByteBuffer
 21241    31   853    23    31   546     0     111  putFloat
 21242    31   853    31    31   546     0      59  (
 21243    31   853    32    31   546     0      36  int
 21244    31   853    36    31   546     0     111  i
 21245    31   853    37    31   546     0      66  ,
 21246    31   853    45    31   546     0     111  x
 21247    31   853    46    31   546     0      60  )
 21248    31   853    48    31   546     0      63  {
 21249    31   855     9    31   546     0     111  putFloat
 21250    31   855    17    31   546     0      59  (
 21251    31   855    18    31   546     0     111  ix
 21252    31   855    20    31   546     0      59  (
 21253    31   855    21    31   546     0     111  checkIndex
 21254    31   855    31    31   546     0      59  (
 21255    31   855    32    31   546     0     111  i
 21256    31   855    33    31   546     0      66  ,
 21257    31   855    35    31   546     0      59  (
 21258    31   855    36    31   546     0     112  1
 21259    31   855    38    31   546     0      90  <<
 21260    31   855    41    31   546     0     112  2
 21261    31   855    42    31   546     0      60  )
 21262    31   855    43    31   546     0      60  )
 21263    31   855    44    31   546     0      60  )
 21264    31   855    45    31   546     0      66  ,
 21265    31   855    47    31   546     0     111  x
 21266    31   855    48    31   546     0      60  )
 21267    31   855    49    31   546     0     102  ;
 21268    31   856     9    31   546     0      19  return
 21269    31   856    16    31   546     0      44  this
 21270    31   856    20    31   546     0     102  ;
 21271    31   860     5    31   546     0      64  }
 21272    31   860     5    31   546     0    1340  ENDMETHOD
 21273    31   860     5    31   547     0    1341  STARTMETHOD
 21274    31   862    12    31   547     0     111  FloatBuffer
 21275    31   862    24    31   547     0     111  asFloatBuffer
 21276    31   862    37    31   547     0      59  (
 21277    31   862    38    31   547     0      60  )
 21278    31   862    40    31   547     0      63  {
 21279    31   863     9    31   547     1      36  int
 21280    31   863    13    31   547     1     111  off
 21281    31   863    17    31   547     1      67  =
 21282    31   863    19    31   547     1     111  this.position
 21283    31   863    32    31   547     1      59  (
 21284    31   863    33    31   547     1      60  )
 21285    31   863    34    31   547     1     102  ;
 21286    31   864     9    31   547     1      36  int
 21287    31   864    13    31   547     1     111  lim
 21288    31   864    17    31   547     1      67  =
 21289    31   864    19    31   547     1     111  this.limit
 21290    31   864    29    31   547     1      59  (
 21291    31   864    30    31   547     1      60  )
 21292    31   864    31    31   547     1     102  ;
 21293    31   865     9    31   547     0     111  assert
 21294    31   865    16    31   547     0      59  (
 21295    31   865    17    31   547     0     111  off
 21296    31   865    21    31   547     0      92  <=
 21297    31   865    24    31   547     0     111  lim
 21298    31   865    27    31   547     0      60  )
 21299    31   865    28    31   547     0     102  ;
 21300    31   866     9    31   547     0      36  int
 21301    31   866    13    31   547     0     111  rem
 21302    31   866    17    31   547     0      67  =
 21303    31   866    19    31   547     0      59  (
 21304    31   866    20    31   547     0     111  off
 21305    31   866    24    31   547     0      92  <=
 21306    31   866    27    31   547     0     111  lim
 21307    31   866    31    31   547     0      58  ?
 21308    31   866    33    31   547     0     111  lim
 21309    31   866    37    31   547     0      77  -
 21310    31   866    39    31   547     0     111  off
 21311    31   866    43    31   547     0      65  :
 21312    31   866    45    31   547     0     112  0
 21313    31   866    46    31   547     0      60  )
 21314    31   866    47    31   547     0     102  ;
 21315    31   868     9    31   547     0      36  int
 21316    31   868    13    31   547     0     111  size
 21317    31   868    18    31   547     0      67  =
 21318    31   868    20    31   547     0     111  rem
 21319    31   868    24    31   547     0      84  >>
 21320    31   868    27    31   547     0     112  2
 21321    31   868    28    31   547     0     102  ;
 21322    31   869     9    31   547     0      31  if
 21323    31   869    12    31   547     0      59  (
 21324    31   869    13    31   547     0      69  !
 21325    31   869    14    31   547     0     111  unaligned
 21326    31   869    24    31   547     0     101  &&
 21327    31   869    27    31   547     0      59  (
 21328    31   869    28    31   547     0      59  (
 21329    31   869    29    31   547     0     111  address
 21330    31   869    37    31   547     0      74  +
 21331    31   869    39    31   547     0     111  off
 21332    31   869    42    31   547     0      60  )
 21333    31   869    44    31   547     0      82  %
 21334    31   869    46    31   547     0      59  (
 21335    31   869    47    31   547     0     112  1
 21336    31   869    49    31   547     0      90  <<
 21337    31   869    52    31   547     0     112  2
 21338    31   869    53    31   547     0      60  )
 21339    31   869    55    31   547     0      71  !=
 21340    31   869    58    31   547     0     112  0
 21341    31   869    59    31   547     0      60  )
 21342    31   869    60    31   547     0      60  )
 21343    31   869    62    31   547     0      63  {
 21344    31   870    13    31   547     0      19  return
 21345    31   870    20    31   547     0      59  (
 21346    31   870    21    31   547     0     111  bigEndian
 21347    31   871    21    31   547     0      58  ?
 21348    31   871    23    31   547     0      59  (
 21349    31   871    24    31   547     0     111  FloatBuffer
 21350    31   871    35    31   547     0      60  )
 21351    31   871    36    31   547     0      59  (
 21352    31   871    41    31   547     0     111  ByteBufferAsFloatBufferB
 21353    31   871    65    31   547     0      59  (
 21354    31   871    66    31   547     0      44  this
 21355    31   871    70    31   547     0      66  ,
 21356    31   872    72    31   547     0      77  -
 21357    31   872    73    31   547     0     112  1
 21358    31   872    74    31   547     0      66  ,
 21359    31   873    72    31   547     0     112  0
 21360    31   873    73    31   547     0      66  ,
 21361    31   874    72    31   547     1     111  size
 21362    31   874    76    31   547     1      66  ,
 21363    31   875    72    31   547     1     111  size
 21364    31   875    76    31   547     1      66  ,
 21365    31   876    72    31   547     0     111  off
 21366    31   876    75    31   547     0      60  )
 21367    31   876    76    31   547     0      60  )
 21368    31   877    21    31   547     0      65  :
 21369    31   877    23    31   547     0      59  (
 21370    31   877    24    31   547     0     111  FloatBuffer
 21371    31   877    35    31   547     0      60  )
 21372    31   877    36    31   547     0      59  (
 21373    31   877    41    31   547     0     111  ByteBufferAsFloatBufferL
 21374    31   877    65    31   547     0      59  (
 21375    31   877    66    31   547     0      44  this
 21376    31   877    70    31   547     0      66  ,
 21377    31   878    72    31   547     0      77  -
 21378    31   878    73    31   547     0     112  1
 21379    31   878    74    31   547     0      66  ,
 21380    31   879    72    31   547     0     112  0
 21381    31   879    73    31   547     0      66  ,
 21382    31   880    72    31   547     1     111  size
 21383    31   880    76    31   547     1      66  ,
 21384    31   881    72    31   547     1     111  size
 21385    31   881    76    31   547     1      66  ,
 21386    31   882    72    31   547     0     111  off
 21387    31   882    75    31   547     0      60  )
 21388    31   882    76    31   547     0      60  )
 21389    31   882    77    31   547     0      60  )
 21390    31   882    78    31   547     0     102  ;
 21391    31   883     9    31   547     0      64  }
 21392    31   883    11    31   547     0      48  else
 21393    31   883    16    31   547     0      63  {
 21394    31   884    13    31   547     0      19  return
 21395    31   884    20    31   547     0      59  (
 21396    31   884    21    31   547     0     111  nativeByteOrder
 21397    31   885    21    31   547     0      58  ?
 21398    31   885    23    31   547     0      59  (
 21399    31   885    24    31   547     0     111  FloatBuffer
 21400    31   885    35    31   547     0      60  )
 21401    31   885    36    31   547     0      59  (
 21402    31   885    41    31   547     0     111  DirectFloatBufferU
 21403    31   885    59    31   547     0      59  (
 21404    31   885    60    31   547     0      44  this
 21405    31   885    64    31   547     0      66  ,
 21406    31   886    66    31   547     0      77  -
 21407    31   886    67    31   547     0     112  1
 21408    31   886    68    31   547     0      66  ,
 21409    31   887    66    31   547     0     112  0
 21410    31   887    67    31   547     0      66  ,
 21411    31   888    66    31   547     1     111  size
 21412    31   888    70    31   547     1      66  ,
 21413    31   889    66    31   547     1     111  size
 21414    31   889    70    31   547     1      66  ,
 21415    31   890    66    31   547     0     111  off
 21416    31   890    69    31   547     0      60  )
 21417    31   890    70    31   547     0      60  )
 21418    31   891    21    31   547     0      65  :
 21419    31   891    23    31   547     0      59  (
 21420    31   891    24    31   547     0     111  FloatBuffer
 21421    31   891    35    31   547     0      60  )
 21422    31   891    36    31   547     0      59  (
 21423    31   891    41    31   547     0     111  DirectFloatBufferS
 21424    31   891    59    31   547     0      59  (
 21425    31   891    60    31   547     0      44  this
 21426    31   891    64    31   547     0      66  ,
 21427    31   892    66    31   547     0      77  -
 21428    31   892    67    31   547     0     112  1
 21429    31   892    68    31   547     0      66  ,
 21430    31   893    66    31   547     0     112  0
 21431    31   893    67    31   547     0      66  ,
 21432    31   894    66    31   547     1     111  size
 21433    31   894    70    31   547     1      66  ,
 21434    31   895    66    31   547     1     111  size
 21435    31   895    70    31   547     1      66  ,
 21436    31   896    66    31   547     0     111  off
 21437    31   896    69    31   547     0      60  )
 21438    31   896    70    31   547     0      60  )
 21439    31   896    71    31   547     0      60  )
 21440    31   896    72    31   547     0     102  ;
 21441    31   897     9    31   547     0      64  }
 21442    31   898     5    31   547     0      64  }
 21443    31   898     5    31   547     0    1342  ENDMETHOD
 21444    31   898     5    31   548     0    1343  STARTMETHOD
 21445    31   903     5    31   548     0      41  private
 21446    31   903    13    31   548     0      32  double
 21447    31   903    20    31   548     0     111  getDouble
 21448    31   903    29    31   548     0      59  (
 21449    31   903    30    31   548     0      53  long
 21450    31   903    35    31   548     0     111  a
 21451    31   903    36    31   548     0      60  )
 21452    31   903    38    31   548     0      63  {
 21453    31   904     9    31   548     0      31  if
 21454    31   904    12    31   548     0      59  (
 21455    31   904    13    31   548     0     111  unaligned
 21456    31   904    22    31   548     0      60  )
 21457    31   904    24    31   548     0      63  {
 21458    31   905    13    31   548     0      53  long
 21459    31   905    18    31   548     0     111  x
 21460    31   905    20    31   548     0      67  =
 21461    31   905    22    31   548     0     111  unsafe.getLong
 21462    31   905    36    31   548     0      59  (
 21463    31   905    37    31   548     0     111  a
 21464    31   905    38    31   548     0      60  )
 21465    31   905    39    31   548     0     102  ;
 21466    31   906    13    31   548     0      19  return
 21467    31   906    20    31   548     0     111  Double.longBitsToDouble
 21468    31   906    43    31   548     0      59  (
 21469    31   906    44    31   548     0     111  nativeByteOrder
 21470    31   906    60    31   548     0      58  ?
 21471    31   906    62    31   548     0     111  x
 21472    31   906    64    31   548     0      65  :
 21473    31   906    66    31   548     0     111  Bits.swap
 21474    31   906    75    31   548     0      59  (
 21475    31   906    76    31   548     0     111  x
 21476    31   906    77    31   548     0      60  )
 21477    31   906    78    31   548     0      60  )
 21478    31   906    79    31   548     0     102  ;
 21479    31   907     9    31   548     0      64  }
 21480    31   908     9    31   548     0      19  return
 21481    31   908    16    31   548     0     111  Bits.getDouble
 21482    31   908    30    31   548     0      59  (
 21483    31   908    31    31   548     0     111  a
 21484    31   908    32    31   548     0      66  ,
 21485    31   908    34    31   548     0     111  bigEndian
 21486    31   908    43    31   548     0      60  )
 21487    31   908    44    31   548     0     102  ;
 21488    31   909     5    31   548     0      64  }
 21489    31   909     5    31   548     0    1344  ENDMETHOD
 21490    31   909     5    31   549     0    1345  STARTMETHOD
 21491    31   911    12    31   549     0      32  double
 21492    31   911    19    31   549     0     111  getDouble
 21493    31   911    28    31   549     0      59  (
 21494    31   911    29    31   549     0      60  )
 21495    31   911    31    31   549     0      63  {
 21496    31   912     9    31   549     0      19  return
 21497    31   912    16    31   549     0     111  getDouble
 21498    31   912    25    31   549     0      59  (
 21499    31   912    26    31   549     0     111  ix
 21500    31   912    28    31   549     0      59  (
 21501    31   912    29    31   549     0     111  nextGetIndex
 21502    31   912    41    31   549     0      59  (
 21503    31   912    42    31   549     0      59  (
 21504    31   912    43    31   549     0     112  1
 21505    31   912    45    31   549     0      90  <<
 21506    31   912    48    31   549     0     112  3
 21507    31   912    49    31   549     0      60  )
 21508    31   912    50    31   549     0      60  )
 21509    31   912    51    31   549     0      60  )
 21510    31   912    52    31   549     0      60  )
 21511    31   912    53    31   549     0     102  ;
 21512    31   913     5    31   549     0      64  }
 21513    31   913     5    31   549     0    1346  ENDMETHOD
 21514    31   913     5    31   550     0    1347  STARTMETHOD
 21515    31   915    12    31   550     0      32  double
 21516    31   915    19    31   550     0     111  getDouble
 21517    31   915    28    31   550     0      59  (
 21518    31   915    29    31   550     0      36  int
 21519    31   915    33    31   550     0     111  i
 21520    31   915    34    31   550     0      60  )
 21521    31   915    36    31   550     0      63  {
 21522    31   916     9    31   550     0      19  return
 21523    31   916    16    31   550     0     111  getDouble
 21524    31   916    25    31   550     0      59  (
 21525    31   916    26    31   550     0     111  ix
 21526    31   916    28    31   550     0      59  (
 21527    31   916    29    31   550     0     111  checkIndex
 21528    31   916    39    31   550     0      59  (
 21529    31   916    40    31   550     0     111  i
 21530    31   916    41    31   550     0      66  ,
 21531    31   916    43    31   550     0      59  (
 21532    31   916    44    31   550     0     112  1
 21533    31   916    46    31   550     0      90  <<
 21534    31   916    49    31   550     0     112  3
 21535    31   916    50    31   550     0      60  )
 21536    31   916    51    31   550     0      60  )
 21537    31   916    52    31   550     0      60  )
 21538    31   916    53    31   550     0      60  )
 21539    31   916    54    31   550     0     102  ;
 21540    31   917     5    31   550     0      64  }
 21541    31   917     5    31   550     0    1348  ENDMETHOD
 21542    31   917     5    31   551     0    1349  STARTMETHOD
 21543    31   921     5    31   551     0      41  private
 21544    31   921    13    31   551     0     111  ByteBuffer
 21545    31   921    24    31   551     0     111  putDouble
 21546    31   921    33    31   551     0      59  (
 21547    31   921    34    31   551     0      53  long
 21548    31   921    39    31   551     0     111  a
 21549    31   921    40    31   551     0      66  ,
 21550    31   921    42    31   551     0      32  double
 21551    31   921    49    31   551     0     111  x
 21552    31   921    50    31   551     0      60  )
 21553    31   921    52    31   551     0      63  {
 21554    31   923     9    31   551     0      31  if
 21555    31   923    12    31   551     0      59  (
 21556    31   923    13    31   551     0     111  unaligned
 21557    31   923    22    31   551     0      60  )
 21558    31   923    24    31   551     0      63  {
 21559    31   924    13    31   551     0      53  long
 21560    31   924    18    31   551     0     111  y
 21561    31   924    20    31   551     0      67  =
 21562    31   924    22    31   551     0     111  Double.doubleToRawLongBits
 21563    31   924    48    31   551     0      59  (
 21564    31   924    49    31   551     0     111  x
 21565    31   924    50    31   551     0      60  )
 21566    31   924    51    31   551     0     102  ;
 21567    31   925    13    31   551     0     111  unsafe.putLong
 21568    31   925    27    31   551     0      59  (
 21569    31   925    28    31   551     0     111  a
 21570    31   925    29    31   551     0      66  ,
 21571    31   925    31    31   551     0      59  (
 21572    31   925    32    31   551     0     111  nativeByteOrder
 21573    31   925    48    31   551     0      58  ?
 21574    31   925    50    31   551     0     111  y
 21575    31   925    52    31   551     0      65  :
 21576    31   925    54    31   551     0     111  Bits.swap
 21577    31   925    63    31   551     0      59  (
 21578    31   925    64    31   551     0     111  y
 21579    31   925    65    31   551     0      60  )
 21580    31   925    66    31   551     0      60  )
 21581    31   925    67    31   551     0      60  )
 21582    31   925    68    31   551     0     102  ;
 21583    31   926     9    31   551     0      64  }
 21584    31   926    11    31   551     0      48  else
 21585    31   926    16    31   551     0      63  {
 21586    31   927    13    31   551     0     111  Bits.putDouble
 21587    31   927    27    31   551     0      59  (
 21588    31   927    28    31   551     0     111  a
 21589    31   927    29    31   551     0      66  ,
 21590    31   927    31    31   551     0     111  x
 21591    31   927    32    31   551     0      66  ,
 21592    31   927    34    31   551     0     111  bigEndian
 21593    31   927    43    31   551     0      60  )
 21594    31   927    44    31   551     0     102  ;
 21595    31   928     9    31   551     0      64  }
 21596    31   929     9    31   551     0      19  return
 21597    31   929    16    31   551     0      44  this
 21598    31   929    20    31   551     0     102  ;
 21599    31   933     5    31   551     0      64  }
 21600    31   933     5    31   551     0    1350  ENDMETHOD
 21601    31   933     5    31   552     0    1351  STARTMETHOD
 21602    31   935    12    31   552     0     111  ByteBuffer
 21603    31   935    23    31   552     0     111  putDouble
 21604    31   935    32    31   552     0      59  (
 21605    31   935    33    31   552     0      32  double
 21606    31   935    40    31   552     0     111  x
 21607    31   935    41    31   552     0      60  )
 21608    31   935    43    31   552     0      63  {
 21609    31   937     9    31   552     0     111  putDouble
 21610    31   937    18    31   552     0      59  (
 21611    31   937    19    31   552     0     111  ix
 21612    31   937    21    31   552     0      59  (
 21613    31   937    22    31   552     0     111  nextPutIndex
 21614    31   937    34    31   552     0      59  (
 21615    31   937    35    31   552     0      59  (
 21616    31   937    36    31   552     0     112  1
 21617    31   937    38    31   552     0      90  <<
 21618    31   937    41    31   552     0     112  3
 21619    31   937    42    31   552     0      60  )
 21620    31   937    43    31   552     0      60  )
 21621    31   937    44    31   552     0      60  )
 21622    31   937    45    31   552     0      66  ,
 21623    31   937    47    31   552     0     111  x
 21624    31   937    48    31   552     0      60  )
 21625    31   937    49    31   552     0     102  ;
 21626    31   938     9    31   552     0      19  return
 21627    31   938    16    31   552     0      44  this
 21628    31   938    20    31   552     0     102  ;
 21629    31   942     5    31   552     0      64  }
 21630    31   942     5    31   552     0    1352  ENDMETHOD
 21631    31   942     5    31   553     0    1353  STARTMETHOD
 21632    31   944    12    31   553     0     111  ByteBuffer
 21633    31   944    23    31   553     0     111  putDouble
 21634    31   944    32    31   553     0      59  (
 21635    31   944    33    31   553     0      36  int
 21636    31   944    37    31   553     0     111  i
 21637    31   944    38    31   553     0      66  ,
 21638    31   944    40    31   553     0      32  double
 21639    31   944    47    31   553     0     111  x
 21640    31   944    48    31   553     0      60  )
 21641    31   944    50    31   553     0      63  {
 21642    31   946     9    31   553     0     111  putDouble
 21643    31   946    18    31   553     0      59  (
 21644    31   946    19    31   553     0     111  ix
 21645    31   946    21    31   553     0      59  (
 21646    31   946    22    31   553     0     111  checkIndex
 21647    31   946    32    31   553     0      59  (
 21648    31   946    33    31   553     0     111  i
 21649    31   946    34    31   553     0      66  ,
 21650    31   946    36    31   553     0      59  (
 21651    31   946    37    31   553     0     112  1
 21652    31   946    39    31   553     0      90  <<
 21653    31   946    42    31   553     0     112  3
 21654    31   946    43    31   553     0      60  )
 21655    31   946    44    31   553     0      60  )
 21656    31   946    45    31   553     0      60  )
 21657    31   946    46    31   553     0      66  ,
 21658    31   946    48    31   553     0     111  x
 21659    31   946    49    31   553     0      60  )
 21660    31   946    50    31   553     0     102  ;
 21661    31   947     9    31   553     0      19  return
 21662    31   947    16    31   553     0      44  this
 21663    31   947    20    31   553     0     102  ;
 21664    31   951     5    31   553     0      64  }
 21665    31   951     5    31   553     0    1354  ENDMETHOD
 21666    31   951     5    31   554     0    1355  STARTMETHOD
 21667    31   953    12    31   554     0     111  DoubleBuffer
 21668    31   953    25    31   554     0     111  asDoubleBuffer
 21669    31   953    39    31   554     0      59  (
 21670    31   953    40    31   554     0      60  )
 21671    31   953    42    31   554     0      63  {
 21672    31   954     9    31   554     1      36  int
 21673    31   954    13    31   554     1     111  off
 21674    31   954    17    31   554     1      67  =
 21675    31   954    19    31   554     1     111  this.position
 21676    31   954    32    31   554     1      59  (
 21677    31   954    33    31   554     1      60  )
 21678    31   954    34    31   554     1     102  ;
 21679    31   955     9    31   554     1      36  int
 21680    31   955    13    31   554     1     111  lim
 21681    31   955    17    31   554     1      67  =
 21682    31   955    19    31   554     1     111  this.limit
 21683    31   955    29    31   554     1      59  (
 21684    31   955    30    31   554     1      60  )
 21685    31   955    31    31   554     1     102  ;
 21686    31   956     9    31   554     0     111  assert
 21687    31   956    16    31   554     0      59  (
 21688    31   956    17    31   554     0     111  off
 21689    31   956    21    31   554     0      92  <=
 21690    31   956    24    31   554     0     111  lim
 21691    31   956    27    31   554     0      60  )
 21692    31   956    28    31   554     0     102  ;
 21693    31   957     9    31   554     0      36  int
 21694    31   957    13    31   554     0     111  rem
 21695    31   957    17    31   554     0      67  =
 21696    31   957    19    31   554     0      59  (
 21697    31   957    20    31   554     0     111  off
 21698    31   957    24    31   554     0      92  <=
 21699    31   957    27    31   554     0     111  lim
 21700    31   957    31    31   554     0      58  ?
 21701    31   957    33    31   554     0     111  lim
 21702    31   957    37    31   554     0      77  -
 21703    31   957    39    31   554     0     111  off
 21704    31   957    43    31   554     0      65  :
 21705    31   957    45    31   554     0     112  0
 21706    31   957    46    31   554     0      60  )
 21707    31   957    47    31   554     0     102  ;
 21708    31   959     9    31   554     0      36  int
 21709    31   959    13    31   554     0     111  size
 21710    31   959    18    31   554     0      67  =
 21711    31   959    20    31   554     0     111  rem
 21712    31   959    24    31   554     0      84  >>
 21713    31   959    27    31   554     0     112  3
 21714    31   959    28    31   554     0     102  ;
 21715    31   960     9    31   554     0      31  if
 21716    31   960    12    31   554     0      59  (
 21717    31   960    13    31   554     0      69  !
 21718    31   960    14    31   554     0     111  unaligned
 21719    31   960    24    31   554     0     101  &&
 21720    31   960    27    31   554     0      59  (
 21721    31   960    28    31   554     0      59  (
 21722    31   960    29    31   554     0     111  address
 21723    31   960    37    31   554     0      74  +
 21724    31   960    39    31   554     0     111  off
 21725    31   960    42    31   554     0      60  )
 21726    31   960    44    31   554     0      82  %
 21727    31   960    46    31   554     0      59  (
 21728    31   960    47    31   554     0     112  1
 21729    31   960    49    31   554     0      90  <<
 21730    31   960    52    31   554     0     112  3
 21731    31   960    53    31   554     0      60  )
 21732    31   960    55    31   554     0      71  !=
 21733    31   960    58    31   554     0     112  0
 21734    31   960    59    31   554     0      60  )
 21735    31   960    60    31   554     0      60  )
 21736    31   960    62    31   554     0      63  {
 21737    31   961    13    31   554     0      19  return
 21738    31   961    20    31   554     0      59  (
 21739    31   961    21    31   554     0     111  bigEndian
 21740    31   962    21    31   554     0      58  ?
 21741    31   962    23    31   554     0      59  (
 21742    31   962    24    31   554     0     111  DoubleBuffer
 21743    31   962    36    31   554     0      60  )
 21744    31   962    37    31   554     0      59  (
 21745    31   962    42    31   554     0     111  ByteBufferAsDoubleBufferB
 21746    31   962    67    31   554     0      59  (
 21747    31   962    68    31   554     0      44  this
 21748    31   962    72    31   554     0      66  ,
 21749    31   963    72    31   554     0      77  -
 21750    31   963    73    31   554     0     112  1
 21751    31   963    74    31   554     0      66  ,
 21752    31   964    72    31   554     0     112  0
 21753    31   964    73    31   554     0      66  ,
 21754    31   965    72    31   554     1     111  size
 21755    31   965    76    31   554     1      66  ,
 21756    31   966    72    31   554     1     111  size
 21757    31   966    76    31   554     1      66  ,
 21758    31   967    72    31   554     0     111  off
 21759    31   967    75    31   554     0      60  )
 21760    31   967    76    31   554     0      60  )
 21761    31   968    21    31   554     0      65  :
 21762    31   968    23    31   554     0      59  (
 21763    31   968    24    31   554     0     111  DoubleBuffer
 21764    31   968    36    31   554     0      60  )
 21765    31   968    37    31   554     0      59  (
 21766    31   968    42    31   554     0     111  ByteBufferAsDoubleBufferL
 21767    31   968    67    31   554     0      59  (
 21768    31   968    68    31   554     0      44  this
 21769    31   968    72    31   554     0      66  ,
 21770    31   969    72    31   554     0      77  -
 21771    31   969    73    31   554     0     112  1
 21772    31   969    74    31   554     0      66  ,
 21773    31   970    72    31   554     0     112  0
 21774    31   970    73    31   554     0      66  ,
 21775    31   971    72    31   554     1     111  size
 21776    31   971    76    31   554     1      66  ,
 21777    31   972    72    31   554     1     111  size
 21778    31   972    76    31   554     1      66  ,
 21779    31   973    72    31   554     0     111  off
 21780    31   973    75    31   554     0      60  )
 21781    31   973    76    31   554     0      60  )
 21782    31   973    77    31   554     0      60  )
 21783    31   973    78    31   554     0     102  ;
 21784    31   974     9    31   554     0      64  }
 21785    31   974    11    31   554     0      48  else
 21786    31   974    16    31   554     0      63  {
 21787    31   975    13    31   554     0      19  return
 21788    31   975    20    31   554     0      59  (
 21789    31   975    21    31   554     0     111  nativeByteOrder
 21790    31   976    21    31   554     0      58  ?
 21791    31   976    23    31   554     0      59  (
 21792    31   976    24    31   554     0     111  DoubleBuffer
 21793    31   976    36    31   554     0      60  )
 21794    31   976    37    31   554     0      59  (
 21795    31   976    42    31   554     0     111  DirectDoubleBufferU
 21796    31   976    61    31   554     0      59  (
 21797    31   976    62    31   554     0      44  this
 21798    31   976    66    31   554     0      66  ,
 21799    31   977    66    31   554     0      77  -
 21800    31   977    67    31   554     0     112  1
 21801    31   977    68    31   554     0      66  ,
 21802    31   978    66    31   554     0     112  0
 21803    31   978    67    31   554     0      66  ,
 21804    31   979    66    31   554     1     111  size
 21805    31   979    70    31   554     1      66  ,
 21806    31   980    66    31   554     1     111  size
 21807    31   980    70    31   554     1      66  ,
 21808    31   981    66    31   554     0     111  off
 21809    31   981    69    31   554     0      60  )
 21810    31   981    70    31   554     0      60  )
 21811    31   982    21    31   554     0      65  :
 21812    31   982    23    31   554     0      59  (
 21813    31   982    24    31   554     0     111  DoubleBuffer
 21814    31   982    36    31   554     0      60  )
 21815    31   982    37    31   554     0      59  (
 21816    31   982    42    31   554     0     111  DirectDoubleBufferS
 21817    31   982    61    31   554     0      59  (
 21818    31   982    62    31   554     0      44  this
 21819    31   982    66    31   554     0      66  ,
 21820    31   983    66    31   554     0      77  -
 21821    31   983    67    31   554     0     112  1
 21822    31   983    68    31   554     0      66  ,
 21823    31   984    66    31   554     0     112  0
 21824    31   984    67    31   554     0      66  ,
 21825    31   985    66    31   554     1     111  size
 21826    31   985    70    31   554     1      66  ,
 21827    31   986    66    31   554     1     111  size
 21828    31   986    70    31   554     1      66  ,
 21829    31   987    66    31   554     0     111  off
 21830    31   987    69    31   554     0      60  )
 21831    31   987    70    31   554     0      60  )
 21832    31   987    71    31   554     0      60  )
 21833    31   987    72    31   554     0     102  ;
 21834    31   988     9    31   554     0      64  }
 21835    31   989     5    31   554     0      64  }
 21836    31   989     5    31   554     0    1356  ENDMETHOD
 21837    31   991     1    31    -1     0      64  }
 21838    31   991     1    31    -1     1    1357  ENDCLASS
 21839    31   991     1    -1    -1     1    1358  ENDFILE C:\Users\RA\javasrc\java\nio\DirectByteBuffer.java
 21840    32     1     1    -1    -1     1    1359  STARTFILE C:\Users\RA\javasrc\java\nio\DirectByteBufferR.java
 21841    32    28     9    -1    -1     0     111  java.nio
 21842    32    28    17    -1    -1     0     102  ;
 21843    32    30     1    -1    -1     1      49  import
 21844    32    30     8    -1    -1     1     111  sun.misc.Cleaner
 21845    32    30    24    -1    -1     1     102  ;
 21846    32    31     1    -1    -1     1      49  import
 21847    32    31     8    -1    -1     1     111  sun.misc.Unsafe
 21848    32    31    23    -1    -1     1     102  ;
 21849    32    32     1    -1    -1     1      49  import
 21850    32    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 21851    32    32    31    -1    -1     1     102  ;
 21852    32    33     1    -1    -1     1      49  import
 21853    32    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 21854    32    33    34    -1    -1     1     102  ;
 21855    32    36     1    32    -1     0    1360  STARTCLASS
 21856    32    36     1    32    -1     0      24  class
 21857    32    36     7    32    -1     0     111  DirectByteBufferR
 21858    32    40     5    32    -1     0      38  extends
 21859    32    40    13    32    -1     0     111  DirectByteBuffer
 21860    32    42     5    32    -1     0      17  implements
 21861    32    42    16    32    -1     0     111  DirectBuffer
 21862    32    43     1    32    -1     0      63  {
 21863    32    43     1    32   555     0    1361  STARTMETHOD
 21864    32   110     5    32   555     0     111  DirectByteBufferR
 21865    32   110    22    32   555     0      59  (
 21866    32   110    23    32   555     0      36  int
 21867    32   110    27    32   555     0     111  cap
 21868    32   110    30    32   555     0      60  )
 21869    32   110    32    32   555     0      63  {
 21870    32   131     9    32   555     0      27  super
 21871    32   131    14    32   555     0      59  (
 21872    32   131    15    32   555     0     111  cap
 21873    32   131    18    32   555     0      60  )
 21874    32   131    19    32   555     0     102  ;
 21875    32   133     5    32   555     0      64  }
 21876    32   133     5    32   555     0    1362  ENDMETHOD
 21877    32   133     5    32   556     0    1363  STARTMETHOD
 21878    32   149     5    32   556     0      23  protected
 21879    32   149    15    32   556     0     111  DirectByteBufferR
 21880    32   149    32    32   556     0      59  (
 21881    32   149    33    32   556     0      36  int
 21882    32   149    37    32   556     0     111  cap
 21883    32   149    40    32   556     0      66  ,
 21884    32   149    42    32   556     0      53  long
 21885    32   149    47    32   556     0     111  addr
 21886    32   149    51    32   556     0      66  ,
 21887    32   149    53    32   556     0     111  Runnable
 21888    32   149    62    32   556     0     111  unmapper
 21889    32   149    70    32   556     0      60  )
 21890    32   149    72    32   556     0      63  {
 21891    32   156     9    32   556     0      27  super
 21892    32   156    14    32   556     0      59  (
 21893    32   156    15    32   556     0     111  cap
 21894    32   156    18    32   556     0      66  ,
 21895    32   156    20    32   556     0     111  addr
 21896    32   156    24    32   556     0      66  ,
 21897    32   156    26    32   556     0     111  unmapper
 21898    32   156    34    32   556     0      60  )
 21899    32   156    35    32   556     0     102  ;
 21900    32   158     5    32   556     0      64  }
 21901    32   158     5    32   556     0    1364  ENDMETHOD
 21902    32   158     5    32   557     0    1365  STARTMETHOD
 21903    32   164     5    32   557     0     111  DirectByteBufferR
 21904    32   164    22    32   557     0      59  (
 21905    32   164    23    32   557     0     111  DirectBuffer
 21906    32   164    36    32   557     0     111  db
 21907    32   164    38    32   557     0      66  ,
 21908    32   165    32    32   557     0      36  int
 21909    32   165    36    32   557     0     111  mark
 21910    32   165    40    32   557     0      66  ,
 21911    32   165    42    32   557     0      36  int
 21912    32   165    46    32   557     0     111  pos
 21913    32   165    49    32   557     0      66  ,
 21914    32   165    51    32   557     0      36  int
 21915    32   165    55    32   557     0     111  lim
 21916    32   165    58    32   557     0      66  ,
 21917    32   165    60    32   557     0      36  int
 21918    32   165    64    32   557     0     111  cap
 21919    32   165    67    32   557     0      66  ,
 21920    32   166    32    32   557     0      36  int
 21921    32   166    36    32   557     0     111  off
 21922    32   166    39    32   557     0      60  )
 21923    32   167     5    32   557     0      63  {
 21924    32   176     9    32   557     0      27  super
 21925    32   176    14    32   557     0      59  (
 21926    32   176    15    32   557     0     111  db
 21927    32   176    17    32   557     0      66  ,
 21928    32   176    19    32   557     0     111  mark
 21929    32   176    23    32   557     0      66  ,
 21930    32   176    25    32   557     0     111  pos
 21931    32   176    28    32   557     0      66  ,
 21932    32   176    30    32   557     0     111  lim
 21933    32   176    33    32   557     0      66  ,
 21934    32   176    35    32   557     0     111  cap
 21935    32   176    38    32   557     0      66  ,
 21936    32   176    40    32   557     0     111  off
 21937    32   176    43    32   557     0      60  )
 21938    32   176    44    32   557     0     102  ;
 21939    32   178     5    32   557     0      64  }
 21940    32   178     5    32   557     0    1366  ENDMETHOD
 21941    32   178     5    32   558     0    1367  STARTMETHOD
 21942    32   180    12    32   558     0     111  ByteBuffer
 21943    32   180    23    32   558     0     111  slice
 21944    32   180    28    32   558     0      59  (
 21945    32   180    29    32   558     0      60  )
 21946    32   180    31    32   558     0      63  {
 21947    32   181     9    32   558     1      36  int
 21948    32   181    13    32   558     1     111  pos
 21949    32   181    17    32   558     1      67  =
 21950    32   181    19    32   558     1     111  this.position
 21951    32   181    32    32   558     1      59  (
 21952    32   181    33    32   558     1      60  )
 21953    32   181    34    32   558     1     102  ;
 21954    32   182     9    32   558     1      36  int
 21955    32   182    13    32   558     1     111  lim
 21956    32   182    17    32   558     1      67  =
 21957    32   182    19    32   558     1     111  this.limit
 21958    32   182    29    32   558     1      59  (
 21959    32   182    30    32   558     1      60  )
 21960    32   182    31    32   558     1     102  ;
 21961    32   183     9    32   558     0     111  assert
 21962    32   183    16    32   558     0      59  (
 21963    32   183    17    32   558     0     111  pos
 21964    32   183    21    32   558     0      92  <=
 21965    32   183    24    32   558     0     111  lim
 21966    32   183    27    32   558     0      60  )
 21967    32   183    28    32   558     0     102  ;
 21968    32   184     9    32   558     0      36  int
 21969    32   184    13    32   558     0     111  rem
 21970    32   184    17    32   558     0      67  =
 21971    32   184    19    32   558     0      59  (
 21972    32   184    20    32   558     0     111  pos
 21973    32   184    24    32   558     0      92  <=
 21974    32   184    27    32   558     0     111  lim
 21975    32   184    31    32   558     0      58  ?
 21976    32   184    33    32   558     0     111  lim
 21977    32   184    37    32   558     0      77  -
 21978    32   184    39    32   558     0     111  pos
 21979    32   184    43    32   558     0      65  :
 21980    32   184    45    32   558     0     112  0
 21981    32   184    46    32   558     0      60  )
 21982    32   184    47    32   558     0     102  ;
 21983    32   185     9    32   558     0      36  int
 21984    32   185    13    32   558     0     111  off
 21985    32   185    17    32   558     0      67  =
 21986    32   185    19    32   558     0      59  (
 21987    32   185    20    32   558     0     111  pos
 21988    32   185    24    32   558     0      90  <<
 21989    32   185    27    32   558     0     112  0
 21990    32   185    28    32   558     0      60  )
 21991    32   185    29    32   558     0     102  ;
 21992    32   186     9    32   558     0     111  assert
 21993    32   186    16    32   558     0      59  (
 21994    32   186    17    32   558     0     111  off
 21995    32   186    21    32   558     0      88  >=
 21996    32   186    24    32   558     0     112  0
 21997    32   186    25    32   558     0      60  )
 21998    32   186    26    32   558     0     102  ;
 21999    32   187     9    32   558     0      19  return
 22000    32   187    20    32   558     0     111  DirectByteBufferR
 22001    32   187    37    32   558     0      59  (
 22002    32   187    38    32   558     0      44  this
 22003    32   187    42    32   558     0      66  ,
 22004    32   187    44    32   558     0      77  -
 22005    32   187    45    32   558     0     112  1
 22006    32   187    46    32   558     0      66  ,
 22007    32   187    48    32   558     0     112  0
 22008    32   187    49    32   558     0      66  ,
 22009    32   187    51    32   558     0     111  rem
 22010    32   187    54    32   558     0      66  ,
 22011    32   187    56    32   558     0     111  rem
 22012    32   187    59    32   558     0      66  ,
 22013    32   187    61    32   558     0     111  off
 22014    32   187    64    32   558     0      60  )
 22015    32   187    65    32   558     0     102  ;
 22016    32   188     5    32   558     0      64  }
 22017    32   188     5    32   558     0    1368  ENDMETHOD
 22018    32   188     5    32   559     0    1369  STARTMETHOD
 22019    32   190    12    32   559     0     111  ByteBuffer
 22020    32   190    23    32   559     0     111  duplicate
 22021    32   190    32    32   559     0      59  (
 22022    32   190    33    32   559     0      60  )
 22023    32   190    35    32   559     0      63  {
 22024    32   191     9    32   559     0      19  return
 22025    32   191    20    32   559     0     111  DirectByteBufferR
 22026    32   191    37    32   559     0      59  (
 22027    32   191    38    32   559     0      44  this
 22028    32   191    42    32   559     0      66  ,
 22029    32   192    47    32   559     1     111  this.markValue
 22030    32   192    61    32   559     1      59  (
 22031    32   192    62    32   559     1      60  )
 22032    32   192    63    32   559     1      66  ,
 22033    32   193    47    32   559     1     111  this.position
 22034    32   193    60    32   559     1      59  (
 22035    32   193    61    32   559     1      60  )
 22036    32   193    62    32   559     1      66  ,
 22037    32   194    47    32   559     1     111  this.limit
 22038    32   194    57    32   559     1      59  (
 22039    32   194    58    32   559     1      60  )
 22040    32   194    59    32   559     1      66  ,
 22041    32   195    47    32   559     1     111  this.capacity
 22042    32   195    60    32   559     1      59  (
 22043    32   195    61    32   559     1      60  )
 22044    32   195    62    32   559     1      66  ,
 22045    32   196    47    32   559     0     112  0
 22046    32   196    48    32   559     0      60  )
 22047    32   196    49    32   559     0     102  ;
 22048    32   197     5    32   559     0      64  }
 22049    32   197     5    32   559     0    1370  ENDMETHOD
 22050    32   197     5    32   560     0    1371  STARTMETHOD
 22051    32   199    12    32   560     0     111  ByteBuffer
 22052    32   199    23    32   560     0     111  asReadOnlyBuffer
 22053    32   199    39    32   560     0      59  (
 22054    32   199    40    32   560     0      60  )
 22055    32   199    42    32   560     0      63  {
 22056    32   208     9    32   560     0      19  return
 22057    32   208    16    32   560     0     111  duplicate
 22058    32   208    25    32   560     0      59  (
 22059    32   208    26    32   560     0      60  )
 22060    32   208    27    32   560     0     102  ;
 22061    32   210     5    32   560     0      64  }
 22062    32   210     5    32   560     0    1372  ENDMETHOD
 22063    32   210     5    32   561     0    1373  STARTMETHOD
 22064    32   261    12    32   561     0     111  ByteBuffer
 22065    32   261    23    32   561     0     111  put
 22066    32   261    26    32   561     0      59  (
 22067    32   261    32    32   561     0     111  x
 22068    32   261    33    32   561     0      60  )
 22069    32   261    35    32   561     0      63  {
 22070    32   266     9    32   561     0      20  throw
 22071    32   266    19    32   561     0     111  ReadOnlyBufferException
 22072    32   266    42    32   561     0      59  (
 22073    32   266    43    32   561     0      60  )
 22074    32   266    44    32   561     0     102  ;
 22075    32   268     5    32   561     0      64  }
 22076    32   268     5    32   561     0    1374  ENDMETHOD
 22077    32   268     5    32   562     0    1375  STARTMETHOD
 22078    32   270    12    32   562     0     111  ByteBuffer
 22079    32   270    23    32   562     0     111  put
 22080    32   270    26    32   562     0      59  (
 22081    32   270    27    32   562     0      36  int
 22082    32   270    31    32   562     0     111  i
 22083    32   270    32    32   562     0      66  ,
 22084    32   270    39    32   562     0     111  x
 22085    32   270    40    32   562     0      60  )
 22086    32   270    42    32   562     0      63  {
 22087    32   275     9    32   562     0      20  throw
 22088    32   275    19    32   562     0     111  ReadOnlyBufferException
 22089    32   275    42    32   562     0      59  (
 22090    32   275    43    32   562     0      60  )
 22091    32   275    44    32   562     0     102  ;
 22092    32   277     5    32   562     0      64  }
 22093    32   277     5    32   562     0    1376  ENDMETHOD
 22094    32   277     5    32   563     0    1377  STARTMETHOD
 22095    32   279    12    32   563     0     111  ByteBuffer
 22096    32   279    23    32   563     0     111  put
 22097    32   279    26    32   563     0      59  (
 22098    32   279    27    32   563     0     111  ByteBuffer
 22099    32   279    38    32   563     0     111  src
 22100    32   279    41    32   563     0      60  )
 22101    32   279    43    32   563     0      63  {
 22102    32   316     9    32   563     0      20  throw
 22103    32   316    19    32   563     0     111  ReadOnlyBufferException
 22104    32   316    42    32   563     0      59  (
 22105    32   316    43    32   563     0      60  )
 22106    32   316    44    32   563     0     102  ;
 22107    32   318     5    32   563     0      64  }
 22108    32   318     5    32   563     0    1378  ENDMETHOD
 22109    32   318     5    32   564     0    1379  STARTMETHOD
 22110    32   320    12    32   564     0     111  ByteBuffer
 22111    32   320    23    32   564     0     111  put
 22112    32   320    26    32   564     0      59  (
 22113    32   320    31    32   564     0      61  [
 22114    32   320    32    32   564     0      62  ]
 22115    32   320    34    32   564     0     111  src
 22116    32   320    37    32   564     0      66  ,
 22117    32   320    39    32   564     0      36  int
 22118    32   320    43    32   564     0     111  offset
 22119    32   320    49    32   564     0      66  ,
 22120    32   320    51    32   564     0      36  int
 22121    32   320    55    32   564     0     111  length
 22122    32   320    61    32   564     0      60  )
 22123    32   320    63    32   564     0      63  {
 22124    32   343     9    32   564     0      20  throw
 22125    32   343    19    32   564     0     111  ReadOnlyBufferException
 22126    32   343    42    32   564     0      59  (
 22127    32   343    43    32   564     0      60  )
 22128    32   343    44    32   564     0     102  ;
 22129    32   345     5    32   564     0      64  }
 22130    32   345     5    32   564     0    1380  ENDMETHOD
 22131    32   345     5    32   565     0    1381  STARTMETHOD
 22132    32   347    12    32   565     0     111  ByteBuffer
 22133    32   347    23    32   565     0     111  compact
 22134    32   347    30    32   565     0      59  (
 22135    32   347    31    32   565     0      60  )
 22136    32   347    33    32   565     0      63  {
 22137    32   360     9    32   565     0      20  throw
 22138    32   360    19    32   565     0     111  ReadOnlyBufferException
 22139    32   360    42    32   565     0      59  (
 22140    32   360    43    32   565     0      60  )
 22141    32   360    44    32   565     1     102  ;
 22142    32   362     5    32   565     1      64  }
 22143    32   362     5    32   565     0    1382  ENDMETHOD
 22144    32   362     5    32   566     0    1383  STARTMETHOD
 22145    32   364    12    32   566     0      39  boolean
 22146    32   364    20    32   566     0     111  isDirect
 22147    32   364    28    32   566     0      59  (
 22148    32   364    29    32   566     0      60  )
 22149    32   364    31    32   566     0      63  {
 22150    32   365     9    32   566     0      19  return
 22151    32   365    16    32   566     0      52  true
 22152    32   365    20    32   566     1     102  ;
 22153    32   366     5    32   566     1      64  }
 22154    32   366     5    32   566     0    1384  ENDMETHOD
 22155    32   366     5    32   567     0    1385  STARTMETHOD
 22156    32   368    12    32   567     0      39  boolean
 22157    32   368    20    32   567     0     111  isReadOnly
 22158    32   368    30    32   567     0      59  (
 22159    32   368    31    32   567     0      60  )
 22160    32   368    33    32   567     0      63  {
 22161    32   369     9    32   567     0      19  return
 22162    32   369    16    32   567     0      52  true
 22163    32   369    20    32   567     1     102  ;
 22164    32   370     5    32   567     1      64  }
 22165    32   370     5    32   567     0    1386  ENDMETHOD
 22166    32   370     5    32   568     0    1387  STARTMETHOD
 22167    32   433    10    32   568     0     111  _get
 22168    32   433    14    32   568     0      59  (
 22169    32   433    15    32   568     0      36  int
 22170    32   433    19    32   568     0     111  i
 22171    32   433    20    32   568     0      60  )
 22172    32   433    22    32   568     0      63  {
 22173    32   434     9    32   568     0      19  return
 22174    32   434    16    32   568     0     111  unsafe.getByte
 22175    32   434    30    32   568     0      59  (
 22176    32   434    31    32   568     0     111  address
 22177    32   434    39    32   568     0      74  +
 22178    32   434    41    32   568     0     111  i
 22179    32   434    42    32   568     0      60  )
 22180    32   434    43    32   568     0     102  ;
 22181    32   435     5    32   568     0      64  }
 22182    32   435     5    32   568     0    1388  ENDMETHOD
 22183    32   435     5    32   569     0    1389  STARTMETHOD
 22184    32   437     5    32   569     0      50  void
 22185    32   437    10    32   569     0     111  _put
 22186    32   437    14    32   569     0      59  (
 22187    32   437    15    32   569     0      36  int
 22188    32   437    19    32   569     0     111  i
 22189    32   437    20    32   569     0      66  ,
 22190    32   437    27    32   569     0     111  b
 22191    32   437    28    32   569     0      60  )
 22192    32   437    30    32   569     0      63  {
 22193    32   441     9    32   569     0      20  throw
 22194    32   441    19    32   569     0     111  ReadOnlyBufferException
 22195    32   441    42    32   569     0      59  (
 22196    32   441    43    32   569     0      60  )
 22197    32   441    44    32   569     0     102  ;
 22198    32   443     5    32   569     0      64  }
 22199    32   443     5    32   569     0    1390  ENDMETHOD
 22200    32   443     5    32   570     0    1391  STARTMETHOD
 22201    32   466     5    32   570     0      41  private
 22202    32   466    13    32   570     0     111  ByteBuffer
 22203    32   466    24    32   570     0     111  putChar
 22204    32   466    31    32   570     0      59  (
 22205    32   466    32    32   570     0      53  long
 22206    32   466    37    32   570     0     111  a
 22207    32   466    38    32   570     0      66  ,
 22208    32   466    40    32   570     0      40  char
 22209    32   466    45    32   570     0     111  x
 22210    32   466    46    32   570     0      60  )
 22211    32   466    48    32   570     0      63  {
 22212    32   476     9    32   570     0      20  throw
 22213    32   476    19    32   570     0     111  ReadOnlyBufferException
 22214    32   476    42    32   570     0      59  (
 22215    32   476    43    32   570     0      60  )
 22216    32   476    44    32   570     0     102  ;
 22217    32   478     5    32   570     0      64  }
 22218    32   478     5    32   570     0    1392  ENDMETHOD
 22219    32   478     5    32   571     0    1393  STARTMETHOD
 22220    32   480    12    32   571     0     111  ByteBuffer
 22221    32   480    23    32   571     0     111  putChar
 22222    32   480    30    32   571     0      59  (
 22223    32   480    31    32   571     0      40  char
 22224    32   480    36    32   571     0     111  x
 22225    32   480    37    32   571     0      60  )
 22226    32   480    39    32   571     0      63  {
 22227    32   485     9    32   571     0      20  throw
 22228    32   485    19    32   571     0     111  ReadOnlyBufferException
 22229    32   485    42    32   571     0      59  (
 22230    32   485    43    32   571     0      60  )
 22231    32   485    44    32   571     0     102  ;
 22232    32   487     5    32   571     0      64  }
 22233    32   487     5    32   571     0    1394  ENDMETHOD
 22234    32   487     5    32   572     0    1395  STARTMETHOD
 22235    32   489    12    32   572     0     111  ByteBuffer
 22236    32   489    23    32   572     0     111  putChar
 22237    32   489    30    32   572     0      59  (
 22238    32   489    31    32   572     0      36  int
 22239    32   489    35    32   572     0     111  i
 22240    32   489    36    32   572     0      66  ,
 22241    32   489    38    32   572     0      40  char
 22242    32   489    43    32   572     0     111  x
 22243    32   489    44    32   572     0      60  )
 22244    32   489    46    32   572     0      63  {
 22245    32   494     9    32   572     0      20  throw
 22246    32   494    19    32   572     0     111  ReadOnlyBufferException
 22247    32   494    42    32   572     0      59  (
 22248    32   494    43    32   572     0      60  )
 22249    32   494    44    32   572     0     102  ;
 22250    32   496     5    32   572     0      64  }
 22251    32   496     5    32   572     0    1396  ENDMETHOD
 22252    32   496     5    32   573     0    1397  STARTMETHOD
 22253    32   498    12    32   573     0     111  CharBuffer
 22254    32   498    23    32   573     0     111  asCharBuffer
 22255    32   498    35    32   573     0      59  (
 22256    32   498    36    32   573     0      60  )
 22257    32   498    38    32   573     0      63  {
 22258    32   499     9    32   573     1      36  int
 22259    32   499    13    32   573     1     111  off
 22260    32   499    17    32   573     1      67  =
 22261    32   499    19    32   573     1     111  this.position
 22262    32   499    32    32   573     1      59  (
 22263    32   499    33    32   573     1      60  )
 22264    32   499    34    32   573     1     102  ;
 22265    32   500     9    32   573     1      36  int
 22266    32   500    13    32   573     1     111  lim
 22267    32   500    17    32   573     1      67  =
 22268    32   500    19    32   573     1     111  this.limit
 22269    32   500    29    32   573     1      59  (
 22270    32   500    30    32   573     1      60  )
 22271    32   500    31    32   573     1     102  ;
 22272    32   501     9    32   573     0     111  assert
 22273    32   501    16    32   573     0      59  (
 22274    32   501    17    32   573     0     111  off
 22275    32   501    21    32   573     0      92  <=
 22276    32   501    24    32   573     0     111  lim
 22277    32   501    27    32   573     0      60  )
 22278    32   501    28    32   573     0     102  ;
 22279    32   502     9    32   573     0      36  int
 22280    32   502    13    32   573     0     111  rem
 22281    32   502    17    32   573     0      67  =
 22282    32   502    19    32   573     0      59  (
 22283    32   502    20    32   573     0     111  off
 22284    32   502    24    32   573     0      92  <=
 22285    32   502    27    32   573     0     111  lim
 22286    32   502    31    32   573     0      58  ?
 22287    32   502    33    32   573     0     111  lim
 22288    32   502    37    32   573     0      77  -
 22289    32   502    39    32   573     0     111  off
 22290    32   502    43    32   573     0      65  :
 22291    32   502    45    32   573     0     112  0
 22292    32   502    46    32   573     0      60  )
 22293    32   502    47    32   573     0     102  ;
 22294    32   504     9    32   573     0      36  int
 22295    32   504    13    32   573     0     111  size
 22296    32   504    18    32   573     0      67  =
 22297    32   504    20    32   573     0     111  rem
 22298    32   504    24    32   573     0      84  >>
 22299    32   504    27    32   573     0     112  1
 22300    32   504    28    32   573     0     102  ;
 22301    32   505     9    32   573     0      31  if
 22302    32   505    12    32   573     0      59  (
 22303    32   505    13    32   573     0      69  !
 22304    32   505    14    32   573     0     111  unaligned
 22305    32   505    24    32   573     0     101  &&
 22306    32   505    27    32   573     0      59  (
 22307    32   505    28    32   573     0      59  (
 22308    32   505    29    32   573     0     111  address
 22309    32   505    37    32   573     0      74  +
 22310    32   505    39    32   573     0     111  off
 22311    32   505    42    32   573     0      60  )
 22312    32   505    44    32   573     0      82  %
 22313    32   505    46    32   573     0      59  (
 22314    32   505    47    32   573     0     112  1
 22315    32   505    49    32   573     0      90  <<
 22316    32   505    52    32   573     0     112  1
 22317    32   505    53    32   573     0      60  )
 22318    32   505    55    32   573     0      71  !=
 22319    32   505    58    32   573     0     112  0
 22320    32   505    59    32   573     0      60  )
 22321    32   505    60    32   573     0      60  )
 22322    32   505    62    32   573     0      63  {
 22323    32   506    13    32   573     0      19  return
 22324    32   506    20    32   573     0      59  (
 22325    32   506    21    32   573     0     111  bigEndian
 22326    32   507    21    32   573     0      58  ?
 22327    32   507    23    32   573     0      59  (
 22328    32   507    24    32   573     0     111  CharBuffer
 22329    32   507    34    32   573     0      60  )
 22330    32   507    35    32   573     0      59  (
 22331    32   507    40    32   573     0     111  ByteBufferAsCharBufferRB
 22332    32   507    64    32   573     0      59  (
 22333    32   507    65    32   573     0      44  this
 22334    32   507    69    32   573     0      66  ,
 22335    32   508    72    32   573     0      77  -
 22336    32   508    73    32   573     0     112  1
 22337    32   508    74    32   573     0      66  ,
 22338    32   509    72    32   573     0     112  0
 22339    32   509    73    32   573     0      66  ,
 22340    32   510    72    32   573     1     111  size
 22341    32   510    76    32   573     1      66  ,
 22342    32   511    72    32   573     1     111  size
 22343    32   511    76    32   573     1      66  ,
 22344    32   512    72    32   573     0     111  off
 22345    32   512    75    32   573     0      60  )
 22346    32   512    76    32   573     0      60  )
 22347    32   513    21    32   573     0      65  :
 22348    32   513    23    32   573     0      59  (
 22349    32   513    24    32   573     0     111  CharBuffer
 22350    32   513    34    32   573     0      60  )
 22351    32   513    35    32   573     0      59  (
 22352    32   513    40    32   573     0     111  ByteBufferAsCharBufferRL
 22353    32   513    64    32   573     0      59  (
 22354    32   513    65    32   573     0      44  this
 22355    32   513    69    32   573     0      66  ,
 22356    32   514    72    32   573     0      77  -
 22357    32   514    73    32   573     0     112  1
 22358    32   514    74    32   573     0      66  ,
 22359    32   515    72    32   573     0     112  0
 22360    32   515    73    32   573     0      66  ,
 22361    32   516    72    32   573     1     111  size
 22362    32   516    76    32   573     1      66  ,
 22363    32   517    72    32   573     1     111  size
 22364    32   517    76    32   573     1      66  ,
 22365    32   518    72    32   573     0     111  off
 22366    32   518    75    32   573     0      60  )
 22367    32   518    76    32   573     0      60  )
 22368    32   518    77    32   573     0      60  )
 22369    32   518    78    32   573     0     102  ;
 22370    32   519     9    32   573     0      64  }
 22371    32   519    11    32   573     0      48  else
 22372    32   519    16    32   573     0      63  {
 22373    32   520    13    32   573     0      19  return
 22374    32   520    20    32   573     0      59  (
 22375    32   520    21    32   573     0     111  nativeByteOrder
 22376    32   521    21    32   573     0      58  ?
 22377    32   521    23    32   573     0      59  (
 22378    32   521    24    32   573     0     111  CharBuffer
 22379    32   521    34    32   573     0      60  )
 22380    32   521    35    32   573     0      59  (
 22381    32   521    40    32   573     0     111  DirectCharBufferRU
 22382    32   521    58    32   573     0      59  (
 22383    32   521    59    32   573     0      44  this
 22384    32   521    63    32   573     0      66  ,
 22385    32   522    66    32   573     0      77  -
 22386    32   522    67    32   573     0     112  1
 22387    32   522    68    32   573     0      66  ,
 22388    32   523    66    32   573     0     112  0
 22389    32   523    67    32   573     0      66  ,
 22390    32   524    66    32   573     1     111  size
 22391    32   524    70    32   573     1      66  ,
 22392    32   525    66    32   573     1     111  size
 22393    32   525    70    32   573     1      66  ,
 22394    32   526    66    32   573     0     111  off
 22395    32   526    69    32   573     0      60  )
 22396    32   526    70    32   573     0      60  )
 22397    32   527    21    32   573     0      65  :
 22398    32   527    23    32   573     0      59  (
 22399    32   527    24    32   573     0     111  CharBuffer
 22400    32   527    34    32   573     0      60  )
 22401    32   527    35    32   573     0      59  (
 22402    32   527    40    32   573     0     111  DirectCharBufferRS
 22403    32   527    58    32   573     0      59  (
 22404    32   527    59    32   573     0      44  this
 22405    32   527    63    32   573     0      66  ,
 22406    32   528    66    32   573     0      77  -
 22407    32   528    67    32   573     0     112  1
 22408    32   528    68    32   573     0      66  ,
 22409    32   529    66    32   573     0     112  0
 22410    32   529    67    32   573     0      66  ,
 22411    32   530    66    32   573     1     111  size
 22412    32   530    70    32   573     1      66  ,
 22413    32   531    66    32   573     1     111  size
 22414    32   531    70    32   573     1      66  ,
 22415    32   532    66    32   573     0     111  off
 22416    32   532    69    32   573     0      60  )
 22417    32   532    70    32   573     0      60  )
 22418    32   532    71    32   573     0      60  )
 22419    32   532    72    32   573     0     102  ;
 22420    32   533     9    32   573     0      64  }
 22421    32   534     5    32   573     0      64  }
 22422    32   534     5    32   573     0    1398  ENDMETHOD
 22423    32   534     5    32   574     0    1399  STARTMETHOD
 22424    32   557     5    32   574     0      41  private
 22425    32   557    13    32   574     0     111  ByteBuffer
 22426    32   557    24    32   574     0     111  putShort
 22427    32   557    32    32   574     0      59  (
 22428    32   557    33    32   574     0      53  long
 22429    32   557    38    32   574     0     111  a
 22430    32   557    39    32   574     0      66  ,
 22431    32   557    47    32   574     0     111  x
 22432    32   557    48    32   574     0      60  )
 22433    32   557    50    32   574     0      63  {
 22434    32   567     9    32   574     0      20  throw
 22435    32   567    19    32   574     0     111  ReadOnlyBufferException
 22436    32   567    42    32   574     0      59  (
 22437    32   567    43    32   574     0      60  )
 22438    32   567    44    32   574     0     102  ;
 22439    32   569     5    32   574     0      64  }
 22440    32   569     5    32   574     0    1400  ENDMETHOD
 22441    32   569     5    32   575     0    1401  STARTMETHOD
 22442    32   571    12    32   575     0     111  ByteBuffer
 22443    32   571    23    32   575     0     111  putShort
 22444    32   571    31    32   575     0      59  (
 22445    32   571    38    32   575     0     111  x
 22446    32   571    39    32   575     0      60  )
 22447    32   571    41    32   575     0      63  {
 22448    32   576     9    32   575     0      20  throw
 22449    32   576    19    32   575     0     111  ReadOnlyBufferException
 22450    32   576    42    32   575     0      59  (
 22451    32   576    43    32   575     0      60  )
 22452    32   576    44    32   575     0     102  ;
 22453    32   578     5    32   575     0      64  }
 22454    32   578     5    32   575     0    1402  ENDMETHOD
 22455    32   578     5    32   576     0    1403  STARTMETHOD
 22456    32   580    12    32   576     0     111  ByteBuffer
 22457    32   580    23    32   576     0     111  putShort
 22458    32   580    31    32   576     0      59  (
 22459    32   580    32    32   576     0      36  int
 22460    32   580    36    32   576     0     111  i
 22461    32   580    37    32   576     0      66  ,
 22462    32   580    45    32   576     0     111  x
 22463    32   580    46    32   576     0      60  )
 22464    32   580    48    32   576     0      63  {
 22465    32   585     9    32   576     0      20  throw
 22466    32   585    19    32   576     0     111  ReadOnlyBufferException
 22467    32   585    42    32   576     0      59  (
 22468    32   585    43    32   576     0      60  )
 22469    32   585    44    32   576     0     102  ;
 22470    32   587     5    32   576     0      64  }
 22471    32   587     5    32   576     0    1404  ENDMETHOD
 22472    32   587     5    32   577     0    1405  STARTMETHOD
 22473    32   589    12    32   577     0     111  ShortBuffer
 22474    32   589    24    32   577     0     111  asShortBuffer
 22475    32   589    37    32   577     0      59  (
 22476    32   589    38    32   577     0      60  )
 22477    32   589    40    32   577     0      63  {
 22478    32   590     9    32   577     1      36  int
 22479    32   590    13    32   577     1     111  off
 22480    32   590    17    32   577     1      67  =
 22481    32   590    19    32   577     1     111  this.position
 22482    32   590    32    32   577     1      59  (
 22483    32   590    33    32   577     1      60  )
 22484    32   590    34    32   577     1     102  ;
 22485    32   591     9    32   577     1      36  int
 22486    32   591    13    32   577     1     111  lim
 22487    32   591    17    32   577     1      67  =
 22488    32   591    19    32   577     1     111  this.limit
 22489    32   591    29    32   577     1      59  (
 22490    32   591    30    32   577     1      60  )
 22491    32   591    31    32   577     1     102  ;
 22492    32   592     9    32   577     0     111  assert
 22493    32   592    16    32   577     0      59  (
 22494    32   592    17    32   577     0     111  off
 22495    32   592    21    32   577     0      92  <=
 22496    32   592    24    32   577     0     111  lim
 22497    32   592    27    32   577     0      60  )
 22498    32   592    28    32   577     0     102  ;
 22499    32   593     9    32   577     0      36  int
 22500    32   593    13    32   577     0     111  rem
 22501    32   593    17    32   577     0      67  =
 22502    32   593    19    32   577     0      59  (
 22503    32   593    20    32   577     0     111  off
 22504    32   593    24    32   577     0      92  <=
 22505    32   593    27    32   577     0     111  lim
 22506    32   593    31    32   577     0      58  ?
 22507    32   593    33    32   577     0     111  lim
 22508    32   593    37    32   577     0      77  -
 22509    32   593    39    32   577     0     111  off
 22510    32   593    43    32   577     0      65  :
 22511    32   593    45    32   577     0     112  0
 22512    32   593    46    32   577     0      60  )
 22513    32   593    47    32   577     0     102  ;
 22514    32   595     9    32   577     0      36  int
 22515    32   595    13    32   577     0     111  size
 22516    32   595    18    32   577     0      67  =
 22517    32   595    20    32   577     0     111  rem
 22518    32   595    24    32   577     0      84  >>
 22519    32   595    27    32   577     0     112  1
 22520    32   595    28    32   577     0     102  ;
 22521    32   596     9    32   577     0      31  if
 22522    32   596    12    32   577     0      59  (
 22523    32   596    13    32   577     0      69  !
 22524    32   596    14    32   577     0     111  unaligned
 22525    32   596    24    32   577     0     101  &&
 22526    32   596    27    32   577     0      59  (
 22527    32   596    28    32   577     0      59  (
 22528    32   596    29    32   577     0     111  address
 22529    32   596    37    32   577     0      74  +
 22530    32   596    39    32   577     0     111  off
 22531    32   596    42    32   577     0      60  )
 22532    32   596    44    32   577     0      82  %
 22533    32   596    46    32   577     0      59  (
 22534    32   596    47    32   577     0     112  1
 22535    32   596    49    32   577     0      90  <<
 22536    32   596    52    32   577     0     112  1
 22537    32   596    53    32   577     0      60  )
 22538    32   596    55    32   577     0      71  !=
 22539    32   596    58    32   577     0     112  0
 22540    32   596    59    32   577     0      60  )
 22541    32   596    60    32   577     0      60  )
 22542    32   596    62    32   577     0      63  {
 22543    32   597    13    32   577     0      19  return
 22544    32   597    20    32   577     0      59  (
 22545    32   597    21    32   577     0     111  bigEndian
 22546    32   598    21    32   577     0      58  ?
 22547    32   598    23    32   577     0      59  (
 22548    32   598    24    32   577     0     111  ShortBuffer
 22549    32   598    35    32   577     0      60  )
 22550    32   598    36    32   577     0      59  (
 22551    32   598    41    32   577     0     111  ByteBufferAsShortBufferRB
 22552    32   598    66    32   577     0      59  (
 22553    32   598    67    32   577     0      44  this
 22554    32   598    71    32   577     0      66  ,
 22555    32   599    72    32   577     0      77  -
 22556    32   599    73    32   577     0     112  1
 22557    32   599    74    32   577     0      66  ,
 22558    32   600    72    32   577     0     112  0
 22559    32   600    73    32   577     0      66  ,
 22560    32   601    72    32   577     1     111  size
 22561    32   601    76    32   577     1      66  ,
 22562    32   602    72    32   577     1     111  size
 22563    32   602    76    32   577     1      66  ,
 22564    32   603    72    32   577     0     111  off
 22565    32   603    75    32   577     0      60  )
 22566    32   603    76    32   577     0      60  )
 22567    32   604    21    32   577     0      65  :
 22568    32   604    23    32   577     0      59  (
 22569    32   604    24    32   577     0     111  ShortBuffer
 22570    32   604    35    32   577     0      60  )
 22571    32   604    36    32   577     0      59  (
 22572    32   604    41    32   577     0     111  ByteBufferAsShortBufferRL
 22573    32   604    66    32   577     0      59  (
 22574    32   604    67    32   577     0      44  this
 22575    32   604    71    32   577     0      66  ,
 22576    32   605    72    32   577     0      77  -
 22577    32   605    73    32   577     0     112  1
 22578    32   605    74    32   577     0      66  ,
 22579    32   606    72    32   577     0     112  0
 22580    32   606    73    32   577     0      66  ,
 22581    32   607    72    32   577     1     111  size
 22582    32   607    76    32   577     1      66  ,
 22583    32   608    72    32   577     1     111  size
 22584    32   608    76    32   577     1      66  ,
 22585    32   609    72    32   577     0     111  off
 22586    32   609    75    32   577     0      60  )
 22587    32   609    76    32   577     0      60  )
 22588    32   609    77    32   577     0      60  )
 22589    32   609    78    32   577     0     102  ;
 22590    32   610     9    32   577     0      64  }
 22591    32   610    11    32   577     0      48  else
 22592    32   610    16    32   577     0      63  {
 22593    32   611    13    32   577     0      19  return
 22594    32   611    20    32   577     0      59  (
 22595    32   611    21    32   577     0     111  nativeByteOrder
 22596    32   612    21    32   577     0      58  ?
 22597    32   612    23    32   577     0      59  (
 22598    32   612    24    32   577     0     111  ShortBuffer
 22599    32   612    35    32   577     0      60  )
 22600    32   612    36    32   577     0      59  (
 22601    32   612    41    32   577     0     111  DirectShortBufferRU
 22602    32   612    60    32   577     0      59  (
 22603    32   612    61    32   577     0      44  this
 22604    32   612    65    32   577     0      66  ,
 22605    32   613    66    32   577     0      77  -
 22606    32   613    67    32   577     0     112  1
 22607    32   613    68    32   577     0      66  ,
 22608    32   614    66    32   577     0     112  0
 22609    32   614    67    32   577     0      66  ,
 22610    32   615    66    32   577     1     111  size
 22611    32   615    70    32   577     1      66  ,
 22612    32   616    66    32   577     1     111  size
 22613    32   616    70    32   577     1      66  ,
 22614    32   617    66    32   577     0     111  off
 22615    32   617    69    32   577     0      60  )
 22616    32   617    70    32   577     0      60  )
 22617    32   618    21    32   577     0      65  :
 22618    32   618    23    32   577     0      59  (
 22619    32   618    24    32   577     0     111  ShortBuffer
 22620    32   618    35    32   577     0      60  )
 22621    32   618    36    32   577     0      59  (
 22622    32   618    41    32   577     0     111  DirectShortBufferRS
 22623    32   618    60    32   577     0      59  (
 22624    32   618    61    32   577     0      44  this
 22625    32   618    65    32   577     0      66  ,
 22626    32   619    66    32   577     0      77  -
 22627    32   619    67    32   577     0     112  1
 22628    32   619    68    32   577     0      66  ,
 22629    32   620    66    32   577     0     112  0
 22630    32   620    67    32   577     0      66  ,
 22631    32   621    66    32   577     1     111  size
 22632    32   621    70    32   577     1      66  ,
 22633    32   622    66    32   577     1     111  size
 22634    32   622    70    32   577     1      66  ,
 22635    32   623    66    32   577     0     111  off
 22636    32   623    69    32   577     0      60  )
 22637    32   623    70    32   577     0      60  )
 22638    32   623    71    32   577     0      60  )
 22639    32   623    72    32   577     0     102  ;
 22640    32   624     9    32   577     0      64  }
 22641    32   625     5    32   577     0      64  }
 22642    32   625     5    32   577     0    1406  ENDMETHOD
 22643    32   625     5    32   578     0    1407  STARTMETHOD
 22644    32   648     5    32   578     0      41  private
 22645    32   648    13    32   578     0     111  ByteBuffer
 22646    32   648    24    32   578     0     111  putInt
 22647    32   648    30    32   578     0      59  (
 22648    32   648    31    32   578     0      53  long
 22649    32   648    36    32   578     0     111  a
 22650    32   648    37    32   578     0      66  ,
 22651    32   648    39    32   578     0      36  int
 22652    32   648    43    32   578     0     111  x
 22653    32   648    44    32   578     0      60  )
 22654    32   648    46    32   578     0      63  {
 22655    32   658     9    32   578     0      20  throw
 22656    32   658    19    32   578     0     111  ReadOnlyBufferException
 22657    32   658    42    32   578     0      59  (
 22658    32   658    43    32   578     0      60  )
 22659    32   658    44    32   578     0     102  ;
 22660    32   660     5    32   578     0      64  }
 22661    32   660     5    32   578     0    1408  ENDMETHOD
 22662    32   660     5    32   579     0    1409  STARTMETHOD
 22663    32   662    12    32   579     0     111  ByteBuffer
 22664    32   662    23    32   579     0     111  putInt
 22665    32   662    29    32   579     0      59  (
 22666    32   662    30    32   579     0      36  int
 22667    32   662    34    32   579     0     111  x
 22668    32   662    35    32   579     0      60  )
 22669    32   662    37    32   579     0      63  {
 22670    32   667     9    32   579     0      20  throw
 22671    32   667    19    32   579     0     111  ReadOnlyBufferException
 22672    32   667    42    32   579     0      59  (
 22673    32   667    43    32   579     0      60  )
 22674    32   667    44    32   579     0     102  ;
 22675    32   669     5    32   579     0      64  }
 22676    32   669     5    32   579     0    1410  ENDMETHOD
 22677    32   669     5    32   580     0    1411  STARTMETHOD
 22678    32   671    12    32   580     0     111  ByteBuffer
 22679    32   671    23    32   580     0     111  putInt
 22680    32   671    29    32   580     0      59  (
 22681    32   671    30    32   580     0      36  int
 22682    32   671    34    32   580     0     111  i
 22683    32   671    35    32   580     0      66  ,
 22684    32   671    37    32   580     0      36  int
 22685    32   671    41    32   580     0     111  x
 22686    32   671    42    32   580     0      60  )
 22687    32   671    44    32   580     0      63  {
 22688    32   676     9    32   580     0      20  throw
 22689    32   676    19    32   580     0     111  ReadOnlyBufferException
 22690    32   676    42    32   580     0      59  (
 22691    32   676    43    32   580     0      60  )
 22692    32   676    44    32   580     0     102  ;
 22693    32   678     5    32   580     0      64  }
 22694    32   678     5    32   580     0    1412  ENDMETHOD
 22695    32   678     5    32   581     0    1413  STARTMETHOD
 22696    32   680    12    32   581     0     111  IntBuffer
 22697    32   680    22    32   581     0     111  asIntBuffer
 22698    32   680    33    32   581     0      59  (
 22699    32   680    34    32   581     0      60  )
 22700    32   680    36    32   581     0      63  {
 22701    32   681     9    32   581     1      36  int
 22702    32   681    13    32   581     1     111  off
 22703    32   681    17    32   581     1      67  =
 22704    32   681    19    32   581     1     111  this.position
 22705    32   681    32    32   581     1      59  (
 22706    32   681    33    32   581     1      60  )
 22707    32   681    34    32   581     1     102  ;
 22708    32   682     9    32   581     1      36  int
 22709    32   682    13    32   581     1     111  lim
 22710    32   682    17    32   581     1      67  =
 22711    32   682    19    32   581     1     111  this.limit
 22712    32   682    29    32   581     1      59  (
 22713    32   682    30    32   581     1      60  )
 22714    32   682    31    32   581     1     102  ;
 22715    32   683     9    32   581     0     111  assert
 22716    32   683    16    32   581     0      59  (
 22717    32   683    17    32   581     0     111  off
 22718    32   683    21    32   581     0      92  <=
 22719    32   683    24    32   581     0     111  lim
 22720    32   683    27    32   581     0      60  )
 22721    32   683    28    32   581     0     102  ;
 22722    32   684     9    32   581     0      36  int
 22723    32   684    13    32   581     0     111  rem
 22724    32   684    17    32   581     0      67  =
 22725    32   684    19    32   581     0      59  (
 22726    32   684    20    32   581     0     111  off
 22727    32   684    24    32   581     0      92  <=
 22728    32   684    27    32   581     0     111  lim
 22729    32   684    31    32   581     0      58  ?
 22730    32   684    33    32   581     0     111  lim
 22731    32   684    37    32   581     0      77  -
 22732    32   684    39    32   581     0     111  off
 22733    32   684    43    32   581     0      65  :
 22734    32   684    45    32   581     0     112  0
 22735    32   684    46    32   581     0      60  )
 22736    32   684    47    32   581     0     102  ;
 22737    32   686     9    32   581     0      36  int
 22738    32   686    13    32   581     0     111  size
 22739    32   686    18    32   581     0      67  =
 22740    32   686    20    32   581     0     111  rem
 22741    32   686    24    32   581     0      84  >>
 22742    32   686    27    32   581     0     112  2
 22743    32   686    28    32   581     0     102  ;
 22744    32   687     9    32   581     0      31  if
 22745    32   687    12    32   581     0      59  (
 22746    32   687    13    32   581     0      69  !
 22747    32   687    14    32   581     0     111  unaligned
 22748    32   687    24    32   581     0     101  &&
 22749    32   687    27    32   581     0      59  (
 22750    32   687    28    32   581     0      59  (
 22751    32   687    29    32   581     0     111  address
 22752    32   687    37    32   581     0      74  +
 22753    32   687    39    32   581     0     111  off
 22754    32   687    42    32   581     0      60  )
 22755    32   687    44    32   581     0      82  %
 22756    32   687    46    32   581     0      59  (
 22757    32   687    47    32   581     0     112  1
 22758    32   687    49    32   581     0      90  <<
 22759    32   687    52    32   581     0     112  2
 22760    32   687    53    32   581     0      60  )
 22761    32   687    55    32   581     0      71  !=
 22762    32   687    58    32   581     0     112  0
 22763    32   687    59    32   581     0      60  )
 22764    32   687    60    32   581     0      60  )
 22765    32   687    62    32   581     0      63  {
 22766    32   688    13    32   581     0      19  return
 22767    32   688    20    32   581     0      59  (
 22768    32   688    21    32   581     0     111  bigEndian
 22769    32   689    21    32   581     0      58  ?
 22770    32   689    23    32   581     0      59  (
 22771    32   689    24    32   581     0     111  IntBuffer
 22772    32   689    33    32   581     0      60  )
 22773    32   689    34    32   581     0      59  (
 22774    32   689    39    32   581     0     111  ByteBufferAsIntBufferRB
 22775    32   689    62    32   581     0      59  (
 22776    32   689    63    32   581     0      44  this
 22777    32   689    67    32   581     0      66  ,
 22778    32   690    72    32   581     0      77  -
 22779    32   690    73    32   581     0     112  1
 22780    32   690    74    32   581     0      66  ,
 22781    32   691    72    32   581     0     112  0
 22782    32   691    73    32   581     0      66  ,
 22783    32   692    72    32   581     1     111  size
 22784    32   692    76    32   581     1      66  ,
 22785    32   693    72    32   581     1     111  size
 22786    32   693    76    32   581     1      66  ,
 22787    32   694    72    32   581     0     111  off
 22788    32   694    75    32   581     0      60  )
 22789    32   694    76    32   581     0      60  )
 22790    32   695    21    32   581     0      65  :
 22791    32   695    23    32   581     0      59  (
 22792    32   695    24    32   581     0     111  IntBuffer
 22793    32   695    33    32   581     0      60  )
 22794    32   695    34    32   581     0      59  (
 22795    32   695    39    32   581     0     111  ByteBufferAsIntBufferRL
 22796    32   695    62    32   581     0      59  (
 22797    32   695    63    32   581     0      44  this
 22798    32   695    67    32   581     0      66  ,
 22799    32   696    72    32   581     0      77  -
 22800    32   696    73    32   581     0     112  1
 22801    32   696    74    32   581     0      66  ,
 22802    32   697    72    32   581     0     112  0
 22803    32   697    73    32   581     0      66  ,
 22804    32   698    72    32   581     1     111  size
 22805    32   698    76    32   581     1      66  ,
 22806    32   699    72    32   581     1     111  size
 22807    32   699    76    32   581     1      66  ,
 22808    32   700    72    32   581     0     111  off
 22809    32   700    75    32   581     0      60  )
 22810    32   700    76    32   581     0      60  )
 22811    32   700    77    32   581     0      60  )
 22812    32   700    78    32   581     0     102  ;
 22813    32   701     9    32   581     0      64  }
 22814    32   701    11    32   581     0      48  else
 22815    32   701    16    32   581     0      63  {
 22816    32   702    13    32   581     0      19  return
 22817    32   702    20    32   581     0      59  (
 22818    32   702    21    32   581     0     111  nativeByteOrder
 22819    32   703    21    32   581     0      58  ?
 22820    32   703    23    32   581     0      59  (
 22821    32   703    24    32   581     0     111  IntBuffer
 22822    32   703    33    32   581     0      60  )
 22823    32   703    34    32   581     0      59  (
 22824    32   703    39    32   581     0     111  DirectIntBufferRU
 22825    32   703    56    32   581     0      59  (
 22826    32   703    57    32   581     0      44  this
 22827    32   703    61    32   581     0      66  ,
 22828    32   704    66    32   581     0      77  -
 22829    32   704    67    32   581     0     112  1
 22830    32   704    68    32   581     0      66  ,
 22831    32   705    66    32   581     0     112  0
 22832    32   705    67    32   581     0      66  ,
 22833    32   706    66    32   581     1     111  size
 22834    32   706    70    32   581     1      66  ,
 22835    32   707    66    32   581     1     111  size
 22836    32   707    70    32   581     1      66  ,
 22837    32   708    66    32   581     0     111  off
 22838    32   708    69    32   581     0      60  )
 22839    32   708    70    32   581     0      60  )
 22840    32   709    21    32   581     0      65  :
 22841    32   709    23    32   581     0      59  (
 22842    32   709    24    32   581     0     111  IntBuffer
 22843    32   709    33    32   581     0      60  )
 22844    32   709    34    32   581     0      59  (
 22845    32   709    39    32   581     0     111  DirectIntBufferRS
 22846    32   709    56    32   581     0      59  (
 22847    32   709    57    32   581     0      44  this
 22848    32   709    61    32   581     0      66  ,
 22849    32   710    66    32   581     0      77  -
 22850    32   710    67    32   581     0     112  1
 22851    32   710    68    32   581     0      66  ,
 22852    32   711    66    32   581     0     112  0
 22853    32   711    67    32   581     0      66  ,
 22854    32   712    66    32   581     1     111  size
 22855    32   712    70    32   581     1      66  ,
 22856    32   713    66    32   581     1     111  size
 22857    32   713    70    32   581     1      66  ,
 22858    32   714    66    32   581     0     111  off
 22859    32   714    69    32   581     0      60  )
 22860    32   714    70    32   581     0      60  )
 22861    32   714    71    32   581     0      60  )
 22862    32   714    72    32   581     0     102  ;
 22863    32   715     9    32   581     0      64  }
 22864    32   716     5    32   581     0      64  }
 22865    32   716     5    32   581     0    1414  ENDMETHOD
 22866    32   716     5    32   582     0    1415  STARTMETHOD
 22867    32   739     5    32   582     0      41  private
 22868    32   739    13    32   582     0     111  ByteBuffer
 22869    32   739    24    32   582     0     111  putLong
 22870    32   739    31    32   582     0      59  (
 22871    32   739    32    32   582     0      53  long
 22872    32   739    37    32   582     0     111  a
 22873    32   739    38    32   582     0      66  ,
 22874    32   739    40    32   582     0      53  long
 22875    32   739    45    32   582     0     111  x
 22876    32   739    46    32   582     0      60  )
 22877    32   739    48    32   582     0      63  {
 22878    32   749     9    32   582     0      20  throw
 22879    32   749    19    32   582     0     111  ReadOnlyBufferException
 22880    32   749    42    32   582     0      59  (
 22881    32   749    43    32   582     0      60  )
 22882    32   749    44    32   582     0     102  ;
 22883    32   751     5    32   582     0      64  }
 22884    32   751     5    32   582     0    1416  ENDMETHOD
 22885    32   751     5    32   583     0    1417  STARTMETHOD
 22886    32   753    12    32   583     0     111  ByteBuffer
 22887    32   753    23    32   583     0     111  putLong
 22888    32   753    30    32   583     0      59  (
 22889    32   753    31    32   583     0      53  long
 22890    32   753    36    32   583     0     111  x
 22891    32   753    37    32   583     0      60  )
 22892    32   753    39    32   583     0      63  {
 22893    32   758     9    32   583     0      20  throw
 22894    32   758    19    32   583     0     111  ReadOnlyBufferException
 22895    32   758    42    32   583     0      59  (
 22896    32   758    43    32   583     0      60  )
 22897    32   758    44    32   583     0     102  ;
 22898    32   760     5    32   583     0      64  }
 22899    32   760     5    32   583     0    1418  ENDMETHOD
 22900    32   760     5    32   584     0    1419  STARTMETHOD
 22901    32   762    12    32   584     0     111  ByteBuffer
 22902    32   762    23    32   584     0     111  putLong
 22903    32   762    30    32   584     0      59  (
 22904    32   762    31    32   584     0      36  int
 22905    32   762    35    32   584     0     111  i
 22906    32   762    36    32   584     0      66  ,
 22907    32   762    38    32   584     0      53  long
 22908    32   762    43    32   584     0     111  x
 22909    32   762    44    32   584     0      60  )
 22910    32   762    46    32   584     0      63  {
 22911    32   767     9    32   584     0      20  throw
 22912    32   767    19    32   584     0     111  ReadOnlyBufferException
 22913    32   767    42    32   584     0      59  (
 22914    32   767    43    32   584     0      60  )
 22915    32   767    44    32   584     0     102  ;
 22916    32   769     5    32   584     0      64  }
 22917    32   769     5    32   584     0    1420  ENDMETHOD
 22918    32   769     5    32   585     0    1421  STARTMETHOD
 22919    32   771    12    32   585     0     111  LongBuffer
 22920    32   771    23    32   585     0     111  asLongBuffer
 22921    32   771    35    32   585     0      59  (
 22922    32   771    36    32   585     0      60  )
 22923    32   771    38    32   585     0      63  {
 22924    32   772     9    32   585     1      36  int
 22925    32   772    13    32   585     1     111  off
 22926    32   772    17    32   585     1      67  =
 22927    32   772    19    32   585     1     111  this.position
 22928    32   772    32    32   585     1      59  (
 22929    32   772    33    32   585     1      60  )
 22930    32   772    34    32   585     1     102  ;
 22931    32   773     9    32   585     1      36  int
 22932    32   773    13    32   585     1     111  lim
 22933    32   773    17    32   585     1      67  =
 22934    32   773    19    32   585     1     111  this.limit
 22935    32   773    29    32   585     1      59  (
 22936    32   773    30    32   585     1      60  )
 22937    32   773    31    32   585     1     102  ;
 22938    32   774     9    32   585     0     111  assert
 22939    32   774    16    32   585     0      59  (
 22940    32   774    17    32   585     0     111  off
 22941    32   774    21    32   585     0      92  <=
 22942    32   774    24    32   585     0     111  lim
 22943    32   774    27    32   585     0      60  )
 22944    32   774    28    32   585     0     102  ;
 22945    32   775     9    32   585     0      36  int
 22946    32   775    13    32   585     0     111  rem
 22947    32   775    17    32   585     0      67  =
 22948    32   775    19    32   585     0      59  (
 22949    32   775    20    32   585     0     111  off
 22950    32   775    24    32   585     0      92  <=
 22951    32   775    27    32   585     0     111  lim
 22952    32   775    31    32   585     0      58  ?
 22953    32   775    33    32   585     0     111  lim
 22954    32   775    37    32   585     0      77  -
 22955    32   775    39    32   585     0     111  off
 22956    32   775    43    32   585     0      65  :
 22957    32   775    45    32   585     0     112  0
 22958    32   775    46    32   585     0      60  )
 22959    32   775    47    32   585     0     102  ;
 22960    32   777     9    32   585     0      36  int
 22961    32   777    13    32   585     0     111  size
 22962    32   777    18    32   585     0      67  =
 22963    32   777    20    32   585     0     111  rem
 22964    32   777    24    32   585     0      84  >>
 22965    32   777    27    32   585     0     112  3
 22966    32   777    28    32   585     0     102  ;
 22967    32   778     9    32   585     0      31  if
 22968    32   778    12    32   585     0      59  (
 22969    32   778    13    32   585     0      69  !
 22970    32   778    14    32   585     0     111  unaligned
 22971    32   778    24    32   585     0     101  &&
 22972    32   778    27    32   585     0      59  (
 22973    32   778    28    32   585     0      59  (
 22974    32   778    29    32   585     0     111  address
 22975    32   778    37    32   585     0      74  +
 22976    32   778    39    32   585     0     111  off
 22977    32   778    42    32   585     0      60  )
 22978    32   778    44    32   585     0      82  %
 22979    32   778    46    32   585     0      59  (
 22980    32   778    47    32   585     0     112  1
 22981    32   778    49    32   585     0      90  <<
 22982    32   778    52    32   585     0     112  3
 22983    32   778    53    32   585     0      60  )
 22984    32   778    55    32   585     0      71  !=
 22985    32   778    58    32   585     0     112  0
 22986    32   778    59    32   585     0      60  )
 22987    32   778    60    32   585     0      60  )
 22988    32   778    62    32   585     0      63  {
 22989    32   779    13    32   585     0      19  return
 22990    32   779    20    32   585     0      59  (
 22991    32   779    21    32   585     0     111  bigEndian
 22992    32   780    21    32   585     0      58  ?
 22993    32   780    23    32   585     0      59  (
 22994    32   780    24    32   585     0     111  LongBuffer
 22995    32   780    34    32   585     0      60  )
 22996    32   780    35    32   585     0      59  (
 22997    32   780    40    32   585     0     111  ByteBufferAsLongBufferRB
 22998    32   780    64    32   585     0      59  (
 22999    32   780    65    32   585     0      44  this
 23000    32   780    69    32   585     0      66  ,
 23001    32   781    72    32   585     0      77  -
 23002    32   781    73    32   585     0     112  1
 23003    32   781    74    32   585     0      66  ,
 23004    32   782    72    32   585     0     112  0
 23005    32   782    73    32   585     0      66  ,
 23006    32   783    72    32   585     1     111  size
 23007    32   783    76    32   585     1      66  ,
 23008    32   784    72    32   585     1     111  size
 23009    32   784    76    32   585     1      66  ,
 23010    32   785    72    32   585     0     111  off
 23011    32   785    75    32   585     0      60  )
 23012    32   785    76    32   585     0      60  )
 23013    32   786    21    32   585     0      65  :
 23014    32   786    23    32   585     0      59  (
 23015    32   786    24    32   585     0     111  LongBuffer
 23016    32   786    34    32   585     0      60  )
 23017    32   786    35    32   585     0      59  (
 23018    32   786    40    32   585     0     111  ByteBufferAsLongBufferRL
 23019    32   786    64    32   585     0      59  (
 23020    32   786    65    32   585     0      44  this
 23021    32   786    69    32   585     0      66  ,
 23022    32   787    72    32   585     0      77  -
 23023    32   787    73    32   585     0     112  1
 23024    32   787    74    32   585     0      66  ,
 23025    32   788    72    32   585     0     112  0
 23026    32   788    73    32   585     0      66  ,
 23027    32   789    72    32   585     1     111  size
 23028    32   789    76    32   585     1      66  ,
 23029    32   790    72    32   585     1     111  size
 23030    32   790    76    32   585     1      66  ,
 23031    32   791    72    32   585     0     111  off
 23032    32   791    75    32   585     0      60  )
 23033    32   791    76    32   585     0      60  )
 23034    32   791    77    32   585     0      60  )
 23035    32   791    78    32   585     0     102  ;
 23036    32   792     9    32   585     0      64  }
 23037    32   792    11    32   585     0      48  else
 23038    32   792    16    32   585     0      63  {
 23039    32   793    13    32   585     0      19  return
 23040    32   793    20    32   585     0      59  (
 23041    32   793    21    32   585     0     111  nativeByteOrder
 23042    32   794    21    32   585     0      58  ?
 23043    32   794    23    32   585     0      59  (
 23044    32   794    24    32   585     0     111  LongBuffer
 23045    32   794    34    32   585     0      60  )
 23046    32   794    35    32   585     0      59  (
 23047    32   794    40    32   585     0     111  DirectLongBufferRU
 23048    32   794    58    32   585     0      59  (
 23049    32   794    59    32   585     0      44  this
 23050    32   794    63    32   585     0      66  ,
 23051    32   795    66    32   585     0      77  -
 23052    32   795    67    32   585     0     112  1
 23053    32   795    68    32   585     0      66  ,
 23054    32   796    66    32   585     0     112  0
 23055    32   796    67    32   585     0      66  ,
 23056    32   797    66    32   585     1     111  size
 23057    32   797    70    32   585     1      66  ,
 23058    32   798    66    32   585     1     111  size
 23059    32   798    70    32   585     1      66  ,
 23060    32   799    66    32   585     0     111  off
 23061    32   799    69    32   585     0      60  )
 23062    32   799    70    32   585     0      60  )
 23063    32   800    21    32   585     0      65  :
 23064    32   800    23    32   585     0      59  (
 23065    32   800    24    32   585     0     111  LongBuffer
 23066    32   800    34    32   585     0      60  )
 23067    32   800    35    32   585     0      59  (
 23068    32   800    40    32   585     0     111  DirectLongBufferRS
 23069    32   800    58    32   585     0      59  (
 23070    32   800    59    32   585     0      44  this
 23071    32   800    63    32   585     0      66  ,
 23072    32   801    66    32   585     0      77  -
 23073    32   801    67    32   585     0     112  1
 23074    32   801    68    32   585     0      66  ,
 23075    32   802    66    32   585     0     112  0
 23076    32   802    67    32   585     0      66  ,
 23077    32   803    66    32   585     1     111  size
 23078    32   803    70    32   585     1      66  ,
 23079    32   804    66    32   585     1     111  size
 23080    32   804    70    32   585     1      66  ,
 23081    32   805    66    32   585     0     111  off
 23082    32   805    69    32   585     0      60  )
 23083    32   805    70    32   585     0      60  )
 23084    32   805    71    32   585     0      60  )
 23085    32   805    72    32   585     0     102  ;
 23086    32   806     9    32   585     0      64  }
 23087    32   807     5    32   585     0      64  }
 23088    32   807     5    32   585     0    1422  ENDMETHOD
 23089    32   807     5    32   586     0    1423  STARTMETHOD
 23090    32   830     5    32   586     0      41  private
 23091    32   830    13    32   586     0     111  ByteBuffer
 23092    32   830    24    32   586     0     111  putFloat
 23093    32   830    32    32   586     0      59  (
 23094    32   830    33    32   586     0      53  long
 23095    32   830    38    32   586     0     111  a
 23096    32   830    39    32   586     0      66  ,
 23097    32   830    47    32   586     0     111  x
 23098    32   830    48    32   586     0      60  )
 23099    32   830    50    32   586     0      63  {
 23100    32   840     9    32   586     0      20  throw
 23101    32   840    19    32   586     0     111  ReadOnlyBufferException
 23102    32   840    42    32   586     0      59  (
 23103    32   840    43    32   586     0      60  )
 23104    32   840    44    32   586     0     102  ;
 23105    32   842     5    32   586     0      64  }
 23106    32   842     5    32   586     0    1424  ENDMETHOD
 23107    32   842     5    32   587     0    1425  STARTMETHOD
 23108    32   844    12    32   587     0     111  ByteBuffer
 23109    32   844    23    32   587     0     111  putFloat
 23110    32   844    31    32   587     0      59  (
 23111    32   844    38    32   587     0     111  x
 23112    32   844    39    32   587     0      60  )
 23113    32   844    41    32   587     0      63  {
 23114    32   849     9    32   587     0      20  throw
 23115    32   849    19    32   587     0     111  ReadOnlyBufferException
 23116    32   849    42    32   587     0      59  (
 23117    32   849    43    32   587     0      60  )
 23118    32   849    44    32   587     0     102  ;
 23119    32   851     5    32   587     0      64  }
 23120    32   851     5    32   587     0    1426  ENDMETHOD
 23121    32   851     5    32   588     0    1427  STARTMETHOD
 23122    32   853    12    32   588     0     111  ByteBuffer
 23123    32   853    23    32   588     0     111  putFloat
 23124    32   853    31    32   588     0      59  (
 23125    32   853    32    32   588     0      36  int
 23126    32   853    36    32   588     0     111  i
 23127    32   853    37    32   588     0      66  ,
 23128    32   853    45    32   588     0     111  x
 23129    32   853    46    32   588     0      60  )
 23130    32   853    48    32   588     0      63  {
 23131    32   858     9    32   588     0      20  throw
 23132    32   858    19    32   588     0     111  ReadOnlyBufferException
 23133    32   858    42    32   588     0      59  (
 23134    32   858    43    32   588     0      60  )
 23135    32   858    44    32   588     0     102  ;
 23136    32   860     5    32   588     0      64  }
 23137    32   860     5    32   588     0    1428  ENDMETHOD
 23138    32   860     5    32   589     0    1429  STARTMETHOD
 23139    32   862    12    32   589     0     111  FloatBuffer
 23140    32   862    24    32   589     0     111  asFloatBuffer
 23141    32   862    37    32   589     0      59  (
 23142    32   862    38    32   589     0      60  )
 23143    32   862    40    32   589     0      63  {
 23144    32   863     9    32   589     1      36  int
 23145    32   863    13    32   589     1     111  off
 23146    32   863    17    32   589     1      67  =
 23147    32   863    19    32   589     1     111  this.position
 23148    32   863    32    32   589     1      59  (
 23149    32   863    33    32   589     1      60  )
 23150    32   863    34    32   589     1     102  ;
 23151    32   864     9    32   589     1      36  int
 23152    32   864    13    32   589     1     111  lim
 23153    32   864    17    32   589     1      67  =
 23154    32   864    19    32   589     1     111  this.limit
 23155    32   864    29    32   589     1      59  (
 23156    32   864    30    32   589     1      60  )
 23157    32   864    31    32   589     1     102  ;
 23158    32   865     9    32   589     0     111  assert
 23159    32   865    16    32   589     0      59  (
 23160    32   865    17    32   589     0     111  off
 23161    32   865    21    32   589     0      92  <=
 23162    32   865    24    32   589     0     111  lim
 23163    32   865    27    32   589     0      60  )
 23164    32   865    28    32   589     0     102  ;
 23165    32   866     9    32   589     0      36  int
 23166    32   866    13    32   589     0     111  rem
 23167    32   866    17    32   589     0      67  =
 23168    32   866    19    32   589     0      59  (
 23169    32   866    20    32   589     0     111  off
 23170    32   866    24    32   589     0      92  <=
 23171    32   866    27    32   589     0     111  lim
 23172    32   866    31    32   589     0      58  ?
 23173    32   866    33    32   589     0     111  lim
 23174    32   866    37    32   589     0      77  -
 23175    32   866    39    32   589     0     111  off
 23176    32   866    43    32   589     0      65  :
 23177    32   866    45    32   589     0     112  0
 23178    32   866    46    32   589     0      60  )
 23179    32   866    47    32   589     0     102  ;
 23180    32   868     9    32   589     0      36  int
 23181    32   868    13    32   589     0     111  size
 23182    32   868    18    32   589     0      67  =
 23183    32   868    20    32   589     0     111  rem
 23184    32   868    24    32   589     0      84  >>
 23185    32   868    27    32   589     0     112  2
 23186    32   868    28    32   589     0     102  ;
 23187    32   869     9    32   589     0      31  if
 23188    32   869    12    32   589     0      59  (
 23189    32   869    13    32   589     0      69  !
 23190    32   869    14    32   589     0     111  unaligned
 23191    32   869    24    32   589     0     101  &&
 23192    32   869    27    32   589     0      59  (
 23193    32   869    28    32   589     0      59  (
 23194    32   869    29    32   589     0     111  address
 23195    32   869    37    32   589     0      74  +
 23196    32   869    39    32   589     0     111  off
 23197    32   869    42    32   589     0      60  )
 23198    32   869    44    32   589     0      82  %
 23199    32   869    46    32   589     0      59  (
 23200    32   869    47    32   589     0     112  1
 23201    32   869    49    32   589     0      90  <<
 23202    32   869    52    32   589     0     112  2
 23203    32   869    53    32   589     0      60  )
 23204    32   869    55    32   589     0      71  !=
 23205    32   869    58    32   589     0     112  0
 23206    32   869    59    32   589     0      60  )
 23207    32   869    60    32   589     0      60  )
 23208    32   869    62    32   589     0      63  {
 23209    32   870    13    32   589     0      19  return
 23210    32   870    20    32   589     0      59  (
 23211    32   870    21    32   589     0     111  bigEndian
 23212    32   871    21    32   589     0      58  ?
 23213    32   871    23    32   589     0      59  (
 23214    32   871    24    32   589     0     111  FloatBuffer
 23215    32   871    35    32   589     0      60  )
 23216    32   871    36    32   589     0      59  (
 23217    32   871    41    32   589     0     111  ByteBufferAsFloatBufferRB
 23218    32   871    66    32   589     0      59  (
 23219    32   871    67    32   589     0      44  this
 23220    32   871    71    32   589     0      66  ,
 23221    32   872    72    32   589     0      77  -
 23222    32   872    73    32   589     0     112  1
 23223    32   872    74    32   589     0      66  ,
 23224    32   873    72    32   589     0     112  0
 23225    32   873    73    32   589     0      66  ,
 23226    32   874    72    32   589     1     111  size
 23227    32   874    76    32   589     1      66  ,
 23228    32   875    72    32   589     1     111  size
 23229    32   875    76    32   589     1      66  ,
 23230    32   876    72    32   589     0     111  off
 23231    32   876    75    32   589     0      60  )
 23232    32   876    76    32   589     0      60  )
 23233    32   877    21    32   589     0      65  :
 23234    32   877    23    32   589     0      59  (
 23235    32   877    24    32   589     0     111  FloatBuffer
 23236    32   877    35    32   589     0      60  )
 23237    32   877    36    32   589     0      59  (
 23238    32   877    41    32   589     0     111  ByteBufferAsFloatBufferRL
 23239    32   877    66    32   589     0      59  (
 23240    32   877    67    32   589     0      44  this
 23241    32   877    71    32   589     0      66  ,
 23242    32   878    72    32   589     0      77  -
 23243    32   878    73    32   589     0     112  1
 23244    32   878    74    32   589     0      66  ,
 23245    32   879    72    32   589     0     112  0
 23246    32   879    73    32   589     0      66  ,
 23247    32   880    72    32   589     1     111  size
 23248    32   880    76    32   589     1      66  ,
 23249    32   881    72    32   589     1     111  size
 23250    32   881    76    32   589     1      66  ,
 23251    32   882    72    32   589     0     111  off
 23252    32   882    75    32   589     0      60  )
 23253    32   882    76    32   589     0      60  )
 23254    32   882    77    32   589     0      60  )
 23255    32   882    78    32   589     0     102  ;
 23256    32   883     9    32   589     0      64  }
 23257    32   883    11    32   589     0      48  else
 23258    32   883    16    32   589     0      63  {
 23259    32   884    13    32   589     0      19  return
 23260    32   884    20    32   589     0      59  (
 23261    32   884    21    32   589     0     111  nativeByteOrder
 23262    32   885    21    32   589     0      58  ?
 23263    32   885    23    32   589     0      59  (
 23264    32   885    24    32   589     0     111  FloatBuffer
 23265    32   885    35    32   589     0      60  )
 23266    32   885    36    32   589     0      59  (
 23267    32   885    41    32   589     0     111  DirectFloatBufferRU
 23268    32   885    60    32   589     0      59  (
 23269    32   885    61    32   589     0      44  this
 23270    32   885    65    32   589     0      66  ,
 23271    32   886    66    32   589     0      77  -
 23272    32   886    67    32   589     0     112  1
 23273    32   886    68    32   589     0      66  ,
 23274    32   887    66    32   589     0     112  0
 23275    32   887    67    32   589     0      66  ,
 23276    32   888    66    32   589     1     111  size
 23277    32   888    70    32   589     1      66  ,
 23278    32   889    66    32   589     1     111  size
 23279    32   889    70    32   589     1      66  ,
 23280    32   890    66    32   589     0     111  off
 23281    32   890    69    32   589     0      60  )
 23282    32   890    70    32   589     0      60  )
 23283    32   891    21    32   589     0      65  :
 23284    32   891    23    32   589     0      59  (
 23285    32   891    24    32   589     0     111  FloatBuffer
 23286    32   891    35    32   589     0      60  )
 23287    32   891    36    32   589     0      59  (
 23288    32   891    41    32   589     0     111  DirectFloatBufferRS
 23289    32   891    60    32   589     0      59  (
 23290    32   891    61    32   589     0      44  this
 23291    32   891    65    32   589     0      66  ,
 23292    32   892    66    32   589     0      77  -
 23293    32   892    67    32   589     0     112  1
 23294    32   892    68    32   589     0      66  ,
 23295    32   893    66    32   589     0     112  0
 23296    32   893    67    32   589     0      66  ,
 23297    32   894    66    32   589     1     111  size
 23298    32   894    70    32   589     1      66  ,
 23299    32   895    66    32   589     1     111  size
 23300    32   895    70    32   589     1      66  ,
 23301    32   896    66    32   589     0     111  off
 23302    32   896    69    32   589     0      60  )
 23303    32   896    70    32   589     0      60  )
 23304    32   896    71    32   589     0      60  )
 23305    32   896    72    32   589     0     102  ;
 23306    32   897     9    32   589     0      64  }
 23307    32   898     5    32   589     0      64  }
 23308    32   898     5    32   589     0    1430  ENDMETHOD
 23309    32   898     5    32   590     0    1431  STARTMETHOD
 23310    32   921     5    32   590     0      41  private
 23311    32   921    13    32   590     0     111  ByteBuffer
 23312    32   921    24    32   590     0     111  putDouble
 23313    32   921    33    32   590     0      59  (
 23314    32   921    34    32   590     0      53  long
 23315    32   921    39    32   590     0     111  a
 23316    32   921    40    32   590     0      66  ,
 23317    32   921    42    32   590     0      32  double
 23318    32   921    49    32   590     0     111  x
 23319    32   921    50    32   590     0      60  )
 23320    32   921    52    32   590     0      63  {
 23321    32   931     9    32   590     0      20  throw
 23322    32   931    19    32   590     0     111  ReadOnlyBufferException
 23323    32   931    42    32   590     0      59  (
 23324    32   931    43    32   590     0      60  )
 23325    32   931    44    32   590     0     102  ;
 23326    32   933     5    32   590     0      64  }
 23327    32   933     5    32   590     0    1432  ENDMETHOD
 23328    32   933     5    32   591     0    1433  STARTMETHOD
 23329    32   935    12    32   591     0     111  ByteBuffer
 23330    32   935    23    32   591     0     111  putDouble
 23331    32   935    32    32   591     0      59  (
 23332    32   935    33    32   591     0      32  double
 23333    32   935    40    32   591     0     111  x
 23334    32   935    41    32   591     0      60  )
 23335    32   935    43    32   591     0      63  {
 23336    32   940     9    32   591     0      20  throw
 23337    32   940    19    32   591     0     111  ReadOnlyBufferException
 23338    32   940    42    32   591     0      59  (
 23339    32   940    43    32   591     0      60  )
 23340    32   940    44    32   591     0     102  ;
 23341    32   942     5    32   591     0      64  }
 23342    32   942     5    32   591     0    1434  ENDMETHOD
 23343    32   942     5    32   592     0    1435  STARTMETHOD
 23344    32   944    12    32   592     0     111  ByteBuffer
 23345    32   944    23    32   592     0     111  putDouble
 23346    32   944    32    32   592     0      59  (
 23347    32   944    33    32   592     0      36  int
 23348    32   944    37    32   592     0     111  i
 23349    32   944    38    32   592     0      66  ,
 23350    32   944    40    32   592     0      32  double
 23351    32   944    47    32   592     0     111  x
 23352    32   944    48    32   592     0      60  )
 23353    32   944    50    32   592     0      63  {
 23354    32   949     9    32   592     0      20  throw
 23355    32   949    19    32   592     0     111  ReadOnlyBufferException
 23356    32   949    42    32   592     0      59  (
 23357    32   949    43    32   592     0      60  )
 23358    32   949    44    32   592     0     102  ;
 23359    32   951     5    32   592     0      64  }
 23360    32   951     5    32   592     0    1436  ENDMETHOD
 23361    32   951     5    32   593     0    1437  STARTMETHOD
 23362    32   953    12    32   593     0     111  DoubleBuffer
 23363    32   953    25    32   593     0     111  asDoubleBuffer
 23364    32   953    39    32   593     0      59  (
 23365    32   953    40    32   593     0      60  )
 23366    32   953    42    32   593     0      63  {
 23367    32   954     9    32   593     1      36  int
 23368    32   954    13    32   593     1     111  off
 23369    32   954    17    32   593     1      67  =
 23370    32   954    19    32   593     1     111  this.position
 23371    32   954    32    32   593     1      59  (
 23372    32   954    33    32   593     1      60  )
 23373    32   954    34    32   593     1     102  ;
 23374    32   955     9    32   593     1      36  int
 23375    32   955    13    32   593     1     111  lim
 23376    32   955    17    32   593     1      67  =
 23377    32   955    19    32   593     1     111  this.limit
 23378    32   955    29    32   593     1      59  (
 23379    32   955    30    32   593     1      60  )
 23380    32   955    31    32   593     1     102  ;
 23381    32   956     9    32   593     0     111  assert
 23382    32   956    16    32   593     0      59  (
 23383    32   956    17    32   593     0     111  off
 23384    32   956    21    32   593     0      92  <=
 23385    32   956    24    32   593     0     111  lim
 23386    32   956    27    32   593     0      60  )
 23387    32   956    28    32   593     0     102  ;
 23388    32   957     9    32   593     0      36  int
 23389    32   957    13    32   593     0     111  rem
 23390    32   957    17    32   593     0      67  =
 23391    32   957    19    32   593     0      59  (
 23392    32   957    20    32   593     0     111  off
 23393    32   957    24    32   593     0      92  <=
 23394    32   957    27    32   593     0     111  lim
 23395    32   957    31    32   593     0      58  ?
 23396    32   957    33    32   593     0     111  lim
 23397    32   957    37    32   593     0      77  -
 23398    32   957    39    32   593     0     111  off
 23399    32   957    43    32   593     0      65  :
 23400    32   957    45    32   593     0     112  0
 23401    32   957    46    32   593     0      60  )
 23402    32   957    47    32   593     0     102  ;
 23403    32   959     9    32   593     0      36  int
 23404    32   959    13    32   593     0     111  size
 23405    32   959    18    32   593     0      67  =
 23406    32   959    20    32   593     0     111  rem
 23407    32   959    24    32   593     0      84  >>
 23408    32   959    27    32   593     0     112  3
 23409    32   959    28    32   593     0     102  ;
 23410    32   960     9    32   593     0      31  if
 23411    32   960    12    32   593     0      59  (
 23412    32   960    13    32   593     0      69  !
 23413    32   960    14    32   593     0     111  unaligned
 23414    32   960    24    32   593     0     101  &&
 23415    32   960    27    32   593     0      59  (
 23416    32   960    28    32   593     0      59  (
 23417    32   960    29    32   593     0     111  address
 23418    32   960    37    32   593     0      74  +
 23419    32   960    39    32   593     0     111  off
 23420    32   960    42    32   593     0      60  )
 23421    32   960    44    32   593     0      82  %
 23422    32   960    46    32   593     0      59  (
 23423    32   960    47    32   593     0     112  1
 23424    32   960    49    32   593     0      90  <<
 23425    32   960    52    32   593     0     112  3
 23426    32   960    53    32   593     0      60  )
 23427    32   960    55    32   593     0      71  !=
 23428    32   960    58    32   593     0     112  0
 23429    32   960    59    32   593     0      60  )
 23430    32   960    60    32   593     0      60  )
 23431    32   960    62    32   593     0      63  {
 23432    32   961    13    32   593     0      19  return
 23433    32   961    20    32   593     0      59  (
 23434    32   961    21    32   593     0     111  bigEndian
 23435    32   962    21    32   593     0      58  ?
 23436    32   962    23    32   593     0      59  (
 23437    32   962    24    32   593     0     111  DoubleBuffer
 23438    32   962    36    32   593     0      60  )
 23439    32   962    37    32   593     0      59  (
 23440    32   962    42    32   593     0     111  ByteBufferAsDoubleBufferRB
 23441    32   962    68    32   593     0      59  (
 23442    32   962    69    32   593     0      44  this
 23443    32   962    73    32   593     0      66  ,
 23444    32   963    72    32   593     0      77  -
 23445    32   963    73    32   593     0     112  1
 23446    32   963    74    32   593     0      66  ,
 23447    32   964    72    32   593     0     112  0
 23448    32   964    73    32   593     0      66  ,
 23449    32   965    72    32   593     1     111  size
 23450    32   965    76    32   593     1      66  ,
 23451    32   966    72    32   593     1     111  size
 23452    32   966    76    32   593     1      66  ,
 23453    32   967    72    32   593     0     111  off
 23454    32   967    75    32   593     0      60  )
 23455    32   967    76    32   593     0      60  )
 23456    32   968    21    32   593     0      65  :
 23457    32   968    23    32   593     0      59  (
 23458    32   968    24    32   593     0     111  DoubleBuffer
 23459    32   968    36    32   593     0      60  )
 23460    32   968    37    32   593     0      59  (
 23461    32   968    42    32   593     0     111  ByteBufferAsDoubleBufferRL
 23462    32   968    68    32   593     0      59  (
 23463    32   968    69    32   593     0      44  this
 23464    32   968    73    32   593     0      66  ,
 23465    32   969    72    32   593     0      77  -
 23466    32   969    73    32   593     0     112  1
 23467    32   969    74    32   593     0      66  ,
 23468    32   970    72    32   593     0     112  0
 23469    32   970    73    32   593     0      66  ,
 23470    32   971    72    32   593     1     111  size
 23471    32   971    76    32   593     1      66  ,
 23472    32   972    72    32   593     1     111  size
 23473    32   972    76    32   593     1      66  ,
 23474    32   973    72    32   593     0     111  off
 23475    32   973    75    32   593     0      60  )
 23476    32   973    76    32   593     0      60  )
 23477    32   973    77    32   593     0      60  )
 23478    32   973    78    32   593     0     102  ;
 23479    32   974     9    32   593     0      64  }
 23480    32   974    11    32   593     0      48  else
 23481    32   974    16    32   593     0      63  {
 23482    32   975    13    32   593     0      19  return
 23483    32   975    20    32   593     0      59  (
 23484    32   975    21    32   593     0     111  nativeByteOrder
 23485    32   976    21    32   593     0      58  ?
 23486    32   976    23    32   593     0      59  (
 23487    32   976    24    32   593     0     111  DoubleBuffer
 23488    32   976    36    32   593     0      60  )
 23489    32   976    37    32   593     0      59  (
 23490    32   976    42    32   593     0     111  DirectDoubleBufferRU
 23491    32   976    62    32   593     0      59  (
 23492    32   976    63    32   593     0      44  this
 23493    32   976    67    32   593     0      66  ,
 23494    32   977    66    32   593     0      77  -
 23495    32   977    67    32   593     0     112  1
 23496    32   977    68    32   593     0      66  ,
 23497    32   978    66    32   593     0     112  0
 23498    32   978    67    32   593     0      66  ,
 23499    32   979    66    32   593     1     111  size
 23500    32   979    70    32   593     1      66  ,
 23501    32   980    66    32   593     1     111  size
 23502    32   980    70    32   593     1      66  ,
 23503    32   981    66    32   593     0     111  off
 23504    32   981    69    32   593     0      60  )
 23505    32   981    70    32   593     0      60  )
 23506    32   982    21    32   593     0      65  :
 23507    32   982    23    32   593     0      59  (
 23508    32   982    24    32   593     0     111  DoubleBuffer
 23509    32   982    36    32   593     0      60  )
 23510    32   982    37    32   593     0      59  (
 23511    32   982    42    32   593     0     111  DirectDoubleBufferRS
 23512    32   982    62    32   593     0      59  (
 23513    32   982    63    32   593     0      44  this
 23514    32   982    67    32   593     0      66  ,
 23515    32   983    66    32   593     0      77  -
 23516    32   983    67    32   593     0     112  1
 23517    32   983    68    32   593     0      66  ,
 23518    32   984    66    32   593     0     112  0
 23519    32   984    67    32   593     0      66  ,
 23520    32   985    66    32   593     1     111  size
 23521    32   985    70    32   593     1      66  ,
 23522    32   986    66    32   593     1     111  size
 23523    32   986    70    32   593     1      66  ,
 23524    32   987    66    32   593     0     111  off
 23525    32   987    69    32   593     0      60  )
 23526    32   987    70    32   593     0      60  )
 23527    32   987    71    32   593     0      60  )
 23528    32   987    72    32   593     0     102  ;
 23529    32   988     9    32   593     0      64  }
 23530    32   989     5    32   593     0      64  }
 23531    32   989     5    32   593     0    1438  ENDMETHOD
 23532    32   991     1    32    -1     0      64  }
 23533    32   991     1    32    -1     1    1439  ENDCLASS
 23534    32   991     1    -1    -1     1    1440  ENDFILE C:\Users\RA\javasrc\java\nio\DirectByteBufferR.java
 23535    33     1     1    -1    -1     1    1441  STARTFILE C:\Users\RA\javasrc\java\nio\DirectCharBufferRS.java
 23536    33    28     9    -1    -1     0     111  java.nio
 23537    33    28    17    -1    -1     0     102  ;
 23538    33    30     1    -1    -1     1      49  import
 23539    33    30     8    -1    -1     1     111  sun.misc.Cleaner
 23540    33    30    24    -1    -1     1     102  ;
 23541    33    31     1    -1    -1     1      49  import
 23542    33    31     8    -1    -1     1     111  sun.misc.Unsafe
 23543    33    31    23    -1    -1     1     102  ;
 23544    33    32     1    -1    -1     1      49  import
 23545    33    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 23546    33    32    31    -1    -1     1     102  ;
 23547    33    33     1    -1    -1     1      49  import
 23548    33    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 23549    33    33    34    -1    -1     1     102  ;
 23550    33    36     1    33    -1     0    1442  STARTCLASS
 23551    33    36     1    33    -1     0      24  class
 23552    33    36     7    33    -1     0     111  DirectCharBufferRS
 23553    33    40     5    33    -1     0      38  extends
 23554    33    40    13    33    -1     0     111  DirectCharBufferS
 23555    33    42     5    33    -1     0      17  implements
 23556    33    42    16    33    -1     0     111  DirectBuffer
 23557    33    43     1    33    -1     0      63  {
 23558    33    43     1    33   594     0    1443  STARTMETHOD
 23559    33   164     5    33   594     0     111  DirectCharBufferRS
 23560    33   164    23    33   594     0      59  (
 23561    33   164    24    33   594     0     111  DirectBuffer
 23562    33   164    37    33   594     0     111  db
 23563    33   164    39    33   594     0      66  ,
 23564    33   165    32    33   594     0      36  int
 23565    33   165    36    33   594     0     111  mark
 23566    33   165    40    33   594     0      66  ,
 23567    33   165    42    33   594     0      36  int
 23568    33   165    46    33   594     0     111  pos
 23569    33   165    49    33   594     0      66  ,
 23570    33   165    51    33   594     0      36  int
 23571    33   165    55    33   594     0     111  lim
 23572    33   165    58    33   594     0      66  ,
 23573    33   165    60    33   594     0      36  int
 23574    33   165    64    33   594     0     111  cap
 23575    33   165    67    33   594     0      66  ,
 23576    33   166    32    33   594     0      36  int
 23577    33   166    36    33   594     0     111  off
 23578    33   166    39    33   594     0      60  )
 23579    33   167     5    33   594     0      63  {
 23580    33   176     9    33   594     0      27  super
 23581    33   176    14    33   594     0      59  (
 23582    33   176    15    33   594     0     111  db
 23583    33   176    17    33   594     0      66  ,
 23584    33   176    19    33   594     0     111  mark
 23585    33   176    23    33   594     0      66  ,
 23586    33   176    25    33   594     0     111  pos
 23587    33   176    28    33   594     0      66  ,
 23588    33   176    30    33   594     0     111  lim
 23589    33   176    33    33   594     0      66  ,
 23590    33   176    35    33   594     0     111  cap
 23591    33   176    38    33   594     0      66  ,
 23592    33   176    40    33   594     0     111  off
 23593    33   176    43    33   594     0      60  )
 23594    33   176    44    33   594     0     102  ;
 23595    33   178     5    33   594     0      64  }
 23596    33   178     5    33   594     0    1444  ENDMETHOD
 23597    33   178     5    33   595     0    1445  STARTMETHOD
 23598    33   180    12    33   595     0     111  CharBuffer
 23599    33   180    23    33   595     0     111  slice
 23600    33   180    28    33   595     0      59  (
 23601    33   180    29    33   595     0      60  )
 23602    33   180    31    33   595     0      63  {
 23603    33   181     9    33   595     1      36  int
 23604    33   181    13    33   595     1     111  pos
 23605    33   181    17    33   595     1      67  =
 23606    33   181    19    33   595     1     111  this.position
 23607    33   181    32    33   595     1      59  (
 23608    33   181    33    33   595     1      60  )
 23609    33   181    34    33   595     1     102  ;
 23610    33   182     9    33   595     1      36  int
 23611    33   182    13    33   595     1     111  lim
 23612    33   182    17    33   595     1      67  =
 23613    33   182    19    33   595     1     111  this.limit
 23614    33   182    29    33   595     1      59  (
 23615    33   182    30    33   595     1      60  )
 23616    33   182    31    33   595     1     102  ;
 23617    33   183     9    33   595     0     111  assert
 23618    33   183    16    33   595     0      59  (
 23619    33   183    17    33   595     0     111  pos
 23620    33   183    21    33   595     0      92  <=
 23621    33   183    24    33   595     0     111  lim
 23622    33   183    27    33   595     0      60  )
 23623    33   183    28    33   595     0     102  ;
 23624    33   184     9    33   595     0      36  int
 23625    33   184    13    33   595     0     111  rem
 23626    33   184    17    33   595     0      67  =
 23627    33   184    19    33   595     0      59  (
 23628    33   184    20    33   595     0     111  pos
 23629    33   184    24    33   595     0      92  <=
 23630    33   184    27    33   595     0     111  lim
 23631    33   184    31    33   595     0      58  ?
 23632    33   184    33    33   595     0     111  lim
 23633    33   184    37    33   595     0      77  -
 23634    33   184    39    33   595     0     111  pos
 23635    33   184    43    33   595     0      65  :
 23636    33   184    45    33   595     0     112  0
 23637    33   184    46    33   595     0      60  )
 23638    33   184    47    33   595     0     102  ;
 23639    33   185     9    33   595     0      36  int
 23640    33   185    13    33   595     0     111  off
 23641    33   185    17    33   595     0      67  =
 23642    33   185    19    33   595     0      59  (
 23643    33   185    20    33   595     0     111  pos
 23644    33   185    24    33   595     0      90  <<
 23645    33   185    27    33   595     0     112  1
 23646    33   185    28    33   595     0      60  )
 23647    33   185    29    33   595     0     102  ;
 23648    33   186     9    33   595     0     111  assert
 23649    33   186    16    33   595     0      59  (
 23650    33   186    17    33   595     0     111  off
 23651    33   186    21    33   595     0      88  >=
 23652    33   186    24    33   595     0     112  0
 23653    33   186    25    33   595     0      60  )
 23654    33   186    26    33   595     0     102  ;
 23655    33   187     9    33   595     0      19  return
 23656    33   187    20    33   595     0     111  DirectCharBufferRS
 23657    33   187    38    33   595     0      59  (
 23658    33   187    39    33   595     0      44  this
 23659    33   187    43    33   595     0      66  ,
 23660    33   187    45    33   595     0      77  -
 23661    33   187    46    33   595     0     112  1
 23662    33   187    47    33   595     0      66  ,
 23663    33   187    49    33   595     0     112  0
 23664    33   187    50    33   595     0      66  ,
 23665    33   187    52    33   595     0     111  rem
 23666    33   187    55    33   595     0      66  ,
 23667    33   187    57    33   595     0     111  rem
 23668    33   187    60    33   595     0      66  ,
 23669    33   187    62    33   595     0     111  off
 23670    33   187    65    33   595     0      60  )
 23671    33   187    66    33   595     0     102  ;
 23672    33   188     5    33   595     0      64  }
 23673    33   188     5    33   595     0    1446  ENDMETHOD
 23674    33   188     5    33   596     0    1447  STARTMETHOD
 23675    33   190    12    33   596     0     111  CharBuffer
 23676    33   190    23    33   596     0     111  duplicate
 23677    33   190    32    33   596     0      59  (
 23678    33   190    33    33   596     0      60  )
 23679    33   190    35    33   596     0      63  {
 23680    33   191     9    33   596     0      19  return
 23681    33   191    20    33   596     0     111  DirectCharBufferRS
 23682    33   191    38    33   596     0      59  (
 23683    33   191    39    33   596     0      44  this
 23684    33   191    43    33   596     0      66  ,
 23685    33   192    47    33   596     1     111  this.markValue
 23686    33   192    61    33   596     1      59  (
 23687    33   192    62    33   596     1      60  )
 23688    33   192    63    33   596     1      66  ,
 23689    33   193    47    33   596     1     111  this.position
 23690    33   193    60    33   596     1      59  (
 23691    33   193    61    33   596     1      60  )
 23692    33   193    62    33   596     1      66  ,
 23693    33   194    47    33   596     1     111  this.limit
 23694    33   194    57    33   596     1      59  (
 23695    33   194    58    33   596     1      60  )
 23696    33   194    59    33   596     1      66  ,
 23697    33   195    47    33   596     1     111  this.capacity
 23698    33   195    60    33   596     1      59  (
 23699    33   195    61    33   596     1      60  )
 23700    33   195    62    33   596     1      66  ,
 23701    33   196    47    33   596     0     112  0
 23702    33   196    48    33   596     0      60  )
 23703    33   196    49    33   596     0     102  ;
 23704    33   197     5    33   596     0      64  }
 23705    33   197     5    33   596     0    1448  ENDMETHOD
 23706    33   197     5    33   597     0    1449  STARTMETHOD
 23707    33   199    12    33   597     0     111  CharBuffer
 23708    33   199    23    33   597     0     111  asReadOnlyBuffer
 23709    33   199    39    33   597     0      59  (
 23710    33   199    40    33   597     0      60  )
 23711    33   199    42    33   597     0      63  {
 23712    33   208     9    33   597     0      19  return
 23713    33   208    16    33   597     0     111  duplicate
 23714    33   208    25    33   597     0      59  (
 23715    33   208    26    33   597     0      60  )
 23716    33   208    27    33   597     0     102  ;
 23717    33   210     5    33   597     0      64  }
 23718    33   210     5    33   597     0    1450  ENDMETHOD
 23719    33   210     5    33   598     0    1451  STARTMETHOD
 23720    33   261    12    33   598     0     111  CharBuffer
 23721    33   261    23    33   598     0     111  put
 23722    33   261    26    33   598     0      59  (
 23723    33   261    27    33   598     0      40  char
 23724    33   261    32    33   598     0     111  x
 23725    33   261    33    33   598     0      60  )
 23726    33   261    35    33   598     0      63  {
 23727    33   266     9    33   598     0      20  throw
 23728    33   266    19    33   598     0     111  ReadOnlyBufferException
 23729    33   266    42    33   598     0      59  (
 23730    33   266    43    33   598     0      60  )
 23731    33   266    44    33   598     0     102  ;
 23732    33   268     5    33   598     0      64  }
 23733    33   268     5    33   598     0    1452  ENDMETHOD
 23734    33   268     5    33   599     0    1453  STARTMETHOD
 23735    33   270    12    33   599     0     111  CharBuffer
 23736    33   270    23    33   599     0     111  put
 23737    33   270    26    33   599     0      59  (
 23738    33   270    27    33   599     0      36  int
 23739    33   270    31    33   599     0     111  i
 23740    33   270    32    33   599     0      66  ,
 23741    33   270    34    33   599     0      40  char
 23742    33   270    39    33   599     0     111  x
 23743    33   270    40    33   599     0      60  )
 23744    33   270    42    33   599     0      63  {
 23745    33   275     9    33   599     0      20  throw
 23746    33   275    19    33   599     0     111  ReadOnlyBufferException
 23747    33   275    42    33   599     0      59  (
 23748    33   275    43    33   599     0      60  )
 23749    33   275    44    33   599     0     102  ;
 23750    33   277     5    33   599     0      64  }
 23751    33   277     5    33   599     0    1454  ENDMETHOD
 23752    33   277     5    33   600     0    1455  STARTMETHOD
 23753    33   279    12    33   600     0     111  CharBuffer
 23754    33   279    23    33   600     0     111  put
 23755    33   279    26    33   600     0      59  (
 23756    33   279    27    33   600     0     111  CharBuffer
 23757    33   279    38    33   600     0     111  src
 23758    33   279    41    33   600     0      60  )
 23759    33   279    43    33   600     0      63  {
 23760    33   316     9    33   600     0      20  throw
 23761    33   316    19    33   600     0     111  ReadOnlyBufferException
 23762    33   316    42    33   600     0      59  (
 23763    33   316    43    33   600     0      60  )
 23764    33   316    44    33   600     0     102  ;
 23765    33   318     5    33   600     0      64  }
 23766    33   318     5    33   600     0    1456  ENDMETHOD
 23767    33   318     5    33   601     0    1457  STARTMETHOD
 23768    33   320    12    33   601     0     111  CharBuffer
 23769    33   320    23    33   601     0     111  put
 23770    33   320    26    33   601     0      59  (
 23771    33   320    27    33   601     0      40  char
 23772    33   320    31    33   601     0      61  [
 23773    33   320    32    33   601     0      62  ]
 23774    33   320    34    33   601     0     111  src
 23775    33   320    37    33   601     0      66  ,
 23776    33   320    39    33   601     0      36  int
 23777    33   320    43    33   601     0     111  offset
 23778    33   320    49    33   601     0      66  ,
 23779    33   320    51    33   601     0      36  int
 23780    33   320    55    33   601     0     111  length
 23781    33   320    61    33   601     0      60  )
 23782    33   320    63    33   601     0      63  {
 23783    33   343     9    33   601     0      20  throw
 23784    33   343    19    33   601     0     111  ReadOnlyBufferException
 23785    33   343    42    33   601     0      59  (
 23786    33   343    43    33   601     0      60  )
 23787    33   343    44    33   601     0     102  ;
 23788    33   345     5    33   601     0      64  }
 23789    33   345     5    33   601     0    1458  ENDMETHOD
 23790    33   345     5    33   602     0    1459  STARTMETHOD
 23791    33   347    12    33   602     0     111  CharBuffer
 23792    33   347    23    33   602     0     111  compact
 23793    33   347    30    33   602     0      59  (
 23794    33   347    31    33   602     0      60  )
 23795    33   347    33    33   602     0      63  {
 23796    33   360     9    33   602     0      20  throw
 23797    33   360    19    33   602     0     111  ReadOnlyBufferException
 23798    33   360    42    33   602     0      59  (
 23799    33   360    43    33   602     0      60  )
 23800    33   360    44    33   602     1     102  ;
 23801    33   362     5    33   602     1      64  }
 23802    33   362     5    33   602     0    1460  ENDMETHOD
 23803    33   362     5    33   603     0    1461  STARTMETHOD
 23804    33   364    12    33   603     0      39  boolean
 23805    33   364    20    33   603     0     111  isDirect
 23806    33   364    28    33   603     0      59  (
 23807    33   364    29    33   603     0      60  )
 23808    33   364    31    33   603     0      63  {
 23809    33   365     9    33   603     0      19  return
 23810    33   365    16    33   603     0      52  true
 23811    33   365    20    33   603     1     102  ;
 23812    33   366     5    33   603     1      64  }
 23813    33   366     5    33   603     0    1462  ENDMETHOD
 23814    33   366     5    33   604     0    1463  STARTMETHOD
 23815    33   368    12    33   604     0      39  boolean
 23816    33   368    20    33   604     0     111  isReadOnly
 23817    33   368    30    33   604     0      59  (
 23818    33   368    31    33   604     0      60  )
 23819    33   368    33    33   604     0      63  {
 23820    33   369     9    33   604     0      19  return
 23821    33   369    16    33   604     0      52  true
 23822    33   369    20    33   604     1     102  ;
 23823    33   370     5    33   604     1      64  }
 23824    33   370     5    33   604     0    1464  ENDMETHOD
 23825    33   370     5    33   605     0    1465  STARTMETHOD
 23826    33   375    12    33   605     0     111  String
 23827    33   375    19    33   605     0     111  toString
 23828    33   375    27    33   605     0      59  (
 23829    33   375    28    33   605     0      36  int
 23830    33   375    32    33   605     0     111  start
 23831    33   375    37    33   605     0      66  ,
 23832    33   375    39    33   605     0      36  int
 23833    33   375    43    33   605     0     111  end
 23834    33   375    46    33   605     0      60  )
 23835    33   375    48    33   605     0      63  {
 23836    33   376     9    33   605     0      31  if
 23837    33   376    12    33   605     0      59  (
 23838    33   376    13    33   605     0      59  (
 23839    33   376    14    33   605     0     111  end
 23840    33   376    18    33   605     0      89  >
 23841    33   376    20    33   605     0     111  limit
 23842    33   376    25    33   605     0      59  (
 23843    33   376    26    33   605     0      60  )
 23844    33   376    27    33   605     0      60  )
 23845    33   376    29    33   605     0      98  ||
 23846    33   376    32    33   605     0      59  (
 23847    33   376    33    33   605     0     111  start
 23848    33   376    39    33   605     0      89  >
 23849    33   376    41    33   605     0     111  end
 23850    33   376    44    33   605     0      60  )
 23851    33   376    45    33   605     0      60  )
 23852    33   377    13    33   605     0      20  throw
 23853    33   377    23    33   605     0     111  IndexOutOfBoundsException
 23854    33   377    48    33   605     0      59  (
 23855    33   377    49    33   605     0      60  )
 23856    33   377    50    33   605     0     102  ;
 23857    33   378     9    33   605     0      35  try
 23858    33   378    13    33   605     0      63  {
 23859    33   379    13    33   605     0      36  int
 23860    33   379    17    33   605     0     111  len
 23861    33   379    21    33   605     0      67  =
 23862    33   379    23    33   605     0     111  end
 23863    33   379    27    33   605     0      77  -
 23864    33   379    29    33   605     0     111  start
 23865    33   379    34    33   605     0     102  ;
 23866    33   380    13    33   605     0      40  char
 23867    33   380    17    33   605     0      61  [
 23868    33   380    18    33   605     0      62  ]
 23869    33   380    20    33   605     0     111  ca
 23870    33   380    23    33   605     0      67  =
 23871    33   380    29    33   605     0      40  char
 23872    33   380    33    33   605     0      61  [
 23873    33   380    34    33   605     0     111  len
 23874    33   380    37    33   605     0      62  ]
 23875    33   380    38    33   605     0     102  ;
 23876    33   381    13    33   605     0     111  CharBuffer
 23877    33   381    24    33   605     0     111  cb
 23878    33   381    27    33   605     0      67  =
 23879    33   381    29    33   605     0     111  CharBuffer.wrap
 23880    33   381    44    33   605     0      59  (
 23881    33   381    45    33   605     0     111  ca
 23882    33   381    47    33   605     0      60  )
 23883    33   381    48    33   605     0     102  ;
 23884    33   382    13    33   605     0     111  CharBuffer
 23885    33   382    24    33   605     0     111  db
 23886    33   382    27    33   605     0      67  =
 23887    33   382    29    33   605     0     111  this.duplicate
 23888    33   382    43    33   605     0      59  (
 23889    33   382    44    33   605     0      60  )
 23890    33   382    45    33   605     0     102  ;
 23891    33   383    13    33   605     1     111  db.position
 23892    33   383    24    33   605     1      59  (
 23893    33   383    25    33   605     1     111  start
 23894    33   383    30    33   605     1      60  )
 23895    33   383    31    33   605     1     102  ;
 23896    33   384    13    33   605     1     111  db.limit
 23897    33   384    21    33   605     1      59  (
 23898    33   384    22    33   605     1     111  end
 23899    33   384    25    33   605     1      60  )
 23900    33   384    26    33   605     1     102  ;
 23901    33   385    13    33   605     1     111  cb.put
 23902    33   385    19    33   605     1      59  (
 23903    33   385    20    33   605     1     111  db
 23904    33   385    22    33   605     1      60  )
 23905    33   385    23    33   605     1     102  ;
 23906    33   386    13    33   605     0      19  return
 23907    33   386    24    33   605     0     111  String
 23908    33   386    30    33   605     0      59  (
 23909    33   386    31    33   605     0     111  ca
 23910    33   386    33    33   605     0      60  )
 23911    33   386    34    33   605     0     102  ;
 23912    33   387     9    33   605     0      64  }
 23913    33   387    11    33   605     0      34  catch
 23914    33   387    17    33   605     0      59  (
 23915    33   387    18    33   605     0     111  StringIndexOutOfBoundsException
 23916    33   387    50    33   605     0     111  x
 23917    33   387    51    33   605     0      60  )
 23918    33   387    53    33   605     0      63  {
 23919    33   388    13    33   605     0      20  throw
 23920    33   388    23    33   605     0     111  IndexOutOfBoundsException
 23921    33   388    48    33   605     0      59  (
 23922    33   388    49    33   605     0      60  )
 23923    33   388    50    33   605     0     102  ;
 23924    33   389     9    33   605     0      64  }
 23925    33   390     5    33   605     0      64  }
 23926    33   390     5    33   605     0    1466  ENDMETHOD
 23927    33   390     5    33   606     0    1467  STARTMETHOD
 23928    33   395    12    33   606     0     111  CharSequence
 23929    33   395    25    33   606     0     111  subSequence
 23930    33   395    36    33   606     0      59  (
 23931    33   395    37    33   606     0      36  int
 23932    33   395    41    33   606     0     111  start
 23933    33   395    46    33   606     0      66  ,
 23934    33   395    48    33   606     0      36  int
 23935    33   395    52    33   606     0     111  end
 23936    33   395    55    33   606     0      60  )
 23937    33   395    57    33   606     0      63  {
 23938    33   396     9    33   606     1      36  int
 23939    33   396    13    33   606     1     111  pos
 23940    33   396    17    33   606     1      67  =
 23941    33   396    19    33   606     1     111  position
 23942    33   396    27    33   606     1      59  (
 23943    33   396    28    33   606     1      60  )
 23944    33   396    29    33   606     1     102  ;
 23945    33   397     9    33   606     1      36  int
 23946    33   397    13    33   606     1     111  lim
 23947    33   397    17    33   606     1      67  =
 23948    33   397    19    33   606     1     111  limit
 23949    33   397    24    33   606     1      59  (
 23950    33   397    25    33   606     1      60  )
 23951    33   397    26    33   606     1     102  ;
 23952    33   398     9    33   606     0     111  assert
 23953    33   398    16    33   606     0      59  (
 23954    33   398    17    33   606     0     111  pos
 23955    33   398    21    33   606     0      92  <=
 23956    33   398    24    33   606     0     111  lim
 23957    33   398    27    33   606     0      60  )
 23958    33   398    28    33   606     0     102  ;
 23959    33   399     9    33   606     0     111  pos
 23960    33   399    13    33   606     0      67  =
 23961    33   399    15    33   606     0      59  (
 23962    33   399    16    33   606     0     111  pos
 23963    33   399    20    33   606     0      92  <=
 23964    33   399    23    33   606     0     111  lim
 23965    33   399    27    33   606     0      58  ?
 23966    33   399    29    33   606     0     111  pos
 23967    33   399    33    33   606     0      65  :
 23968    33   399    35    33   606     0     111  lim
 23969    33   399    38    33   606     0      60  )
 23970    33   399    39    33   606     0     102  ;
 23971    33   400     9    33   606     0      36  int
 23972    33   400    13    33   606     0     111  len
 23973    33   400    17    33   606     0      67  =
 23974    33   400    19    33   606     0     111  lim
 23975    33   400    23    33   606     0      77  -
 23976    33   400    25    33   606     0     111  pos
 23977    33   400    28    33   606     0     102  ;
 23978    33   402     9    33   606     0      31  if
 23979    33   402    12    33   606     0      59  (
 23980    33   402    13    33   606     0      59  (
 23981    33   402    14    33   606     0     111  start
 23982    33   402    20    33   606     0      93  <
 23983    33   402    22    33   606     0     112  0
 23984    33   402    23    33   606     0      60  )
 23985    33   402    25    33   606     0      98  ||
 23986    33   402    28    33   606     0      59  (
 23987    33   402    29    33   606     0     111  end
 23988    33   402    33    33   606     0      89  >
 23989    33   402    35    33   606     0     111  len
 23990    33   402    38    33   606     0      60  )
 23991    33   402    40    33   606     0      98  ||
 23992    33   402    43    33   606     0      59  (
 23993    33   402    44    33   606     0     111  start
 23994    33   402    50    33   606     0      89  >
 23995    33   402    52    33   606     0     111  end
 23996    33   402    55    33   606     0      60  )
 23997    33   402    56    33   606     0      60  )
 23998    33   403    13    33   606     0      20  throw
 23999    33   403    23    33   606     0     111  IndexOutOfBoundsException
 24000    33   403    48    33   606     0      59  (
 24001    33   403    49    33   606     0      60  )
 24002    33   403    50    33   606     0     102  ;
 24003    33   404     9    33   606     0      36  int
 24004    33   404    13    33   606     0     111  sublen
 24005    33   404    20    33   606     0      67  =
 24006    33   404    22    33   606     0     111  end
 24007    33   404    26    33   606     0      77  -
 24008    33   404    28    33   606     0     111  start
 24009    33   404    33    33   606     0     102  ;
 24010    33   405     9    33   606     0      36  int
 24011    33   405    13    33   606     0     111  off
 24012    33   405    17    33   606     0      67  =
 24013    33   405    19    33   606     0      59  (
 24014    33   405    20    33   606     0     111  pos
 24015    33   405    24    33   606     0      74  +
 24016    33   405    26    33   606     0     111  start
 24017    33   405    31    33   606     0      60  )
 24018    33   405    33    33   606     0      90  <<
 24019    33   405    36    33   606     0     112  1
 24020    33   405    37    33   606     0     102  ;
 24021    33   406     9    33   606     0     111  assert
 24022    33   406    16    33   606     0      59  (
 24023    33   406    17    33   606     0     111  off
 24024    33   406    21    33   606     0      88  >=
 24025    33   406    24    33   606     0     112  0
 24026    33   406    25    33   606     0      60  )
 24027    33   406    26    33   606     0     102  ;
 24028    33   407     9    33   606     0      19  return
 24029    33   407    20    33   606     0     111  DirectCharBufferRS
 24030    33   407    38    33   606     0      59  (
 24031    33   407    39    33   606     0      44  this
 24032    33   407    43    33   606     0      66  ,
 24033    33   407    45    33   606     0      77  -
 24034    33   407    46    33   606     0     112  1
 24035    33   407    47    33   606     0      66  ,
 24036    33   407    49    33   606     0     112  0
 24037    33   407    50    33   606     0      66  ,
 24038    33   407    52    33   606     0     111  sublen
 24039    33   407    58    33   606     0      66  ,
 24040    33   407    60    33   606     0     111  sublen
 24041    33   407    66    33   606     0      66  ,
 24042    33   407    68    33   606     0     111  off
 24043    33   407    71    33   606     0      60  )
 24044    33   407    72    33   606     0     102  ;
 24045    33   408     5    33   606     0      64  }
 24046    33   408     5    33   606     0    1468  ENDMETHOD
 24047    33   408     5    33   607     0    1469  STARTMETHOD
 24048    33   416    12    33   607     0     111  ByteOrder
 24049    33   416    22    33   607     0     111  order
 24050    33   416    27    33   607     0      59  (
 24051    33   416    28    33   607     0      60  )
 24052    33   416    30    33   607     0      63  {
 24053    33   418     9    33   607     0      19  return
 24054    33   418    16    33   607     0      59  (
 24055    33   418    17    33   607     0      59  (
 24056    33   418    18    33   607     0     111  ByteOrder.nativeOrder
 24057    33   418    39    33   607     0      59  (
 24058    33   418    40    33   607     0      60  )
 24059    33   418    42    33   607     0      68  ==
 24060    33   418    45    33   607     0     111  ByteOrder.BIG_ENDIAN
 24061    33   418    65    33   607     0      60  )
 24062    33   419    17    33   607     0      58  ?
 24063    33   419    19    33   607     0     111  ByteOrder.LITTLE_ENDIAN
 24064    33   419    43    33   607     0      65  :
 24065    33   419    45    33   607     0     111  ByteOrder.BIG_ENDIAN
 24066    33   419    65    33   607     0      60  )
 24067    33   419    66    33   607     0     102  ;
 24068    33   425     5    33   607     0      64  }
 24069    33   425     5    33   607     0    1470  ENDMETHOD
 24070    33   452     1    33    -1     0      64  }
 24071    33   452     1    33    -1     1    1471  ENDCLASS
 24072    33   452     1    -1    -1     1    1472  ENDFILE C:\Users\RA\javasrc\java\nio\DirectCharBufferRS.java
 24073    34     1     1    -1    -1     1    1473  STARTFILE C:\Users\RA\javasrc\java\nio\DirectCharBufferRU.java
 24074    34    28     9    -1    -1     0     111  java.nio
 24075    34    28    17    -1    -1     0     102  ;
 24076    34    30     1    -1    -1     1      49  import
 24077    34    30     8    -1    -1     1     111  sun.misc.Cleaner
 24078    34    30    24    -1    -1     1     102  ;
 24079    34    31     1    -1    -1     1      49  import
 24080    34    31     8    -1    -1     1     111  sun.misc.Unsafe
 24081    34    31    23    -1    -1     1     102  ;
 24082    34    32     1    -1    -1     1      49  import
 24083    34    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 24084    34    32    31    -1    -1     1     102  ;
 24085    34    33     1    -1    -1     1      49  import
 24086    34    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 24087    34    33    34    -1    -1     1     102  ;
 24088    34    36     1    34    -1     0    1474  STARTCLASS
 24089    34    36     1    34    -1     0      24  class
 24090    34    36     7    34    -1     0     111  DirectCharBufferRU
 24091    34    40     5    34    -1     0      38  extends
 24092    34    40    13    34    -1     0     111  DirectCharBufferU
 24093    34    42     5    34    -1     0      17  implements
 24094    34    42    16    34    -1     0     111  DirectBuffer
 24095    34    43     1    34    -1     0      63  {
 24096    34    43     1    34   608     0    1475  STARTMETHOD
 24097    34   164     5    34   608     0     111  DirectCharBufferRU
 24098    34   164    23    34   608     0      59  (
 24099    34   164    24    34   608     0     111  DirectBuffer
 24100    34   164    37    34   608     0     111  db
 24101    34   164    39    34   608     0      66  ,
 24102    34   165    32    34   608     0      36  int
 24103    34   165    36    34   608     0     111  mark
 24104    34   165    40    34   608     0      66  ,
 24105    34   165    42    34   608     0      36  int
 24106    34   165    46    34   608     0     111  pos
 24107    34   165    49    34   608     0      66  ,
 24108    34   165    51    34   608     0      36  int
 24109    34   165    55    34   608     0     111  lim
 24110    34   165    58    34   608     0      66  ,
 24111    34   165    60    34   608     0      36  int
 24112    34   165    64    34   608     0     111  cap
 24113    34   165    67    34   608     0      66  ,
 24114    34   166    32    34   608     0      36  int
 24115    34   166    36    34   608     0     111  off
 24116    34   166    39    34   608     0      60  )
 24117    34   167     5    34   608     0      63  {
 24118    34   176     9    34   608     0      27  super
 24119    34   176    14    34   608     0      59  (
 24120    34   176    15    34   608     0     111  db
 24121    34   176    17    34   608     0      66  ,
 24122    34   176    19    34   608     0     111  mark
 24123    34   176    23    34   608     0      66  ,
 24124    34   176    25    34   608     0     111  pos
 24125    34   176    28    34   608     0      66  ,
 24126    34   176    30    34   608     0     111  lim
 24127    34   176    33    34   608     0      66  ,
 24128    34   176    35    34   608     0     111  cap
 24129    34   176    38    34   608     0      66  ,
 24130    34   176    40    34   608     0     111  off
 24131    34   176    43    34   608     0      60  )
 24132    34   176    44    34   608     0     102  ;
 24133    34   178     5    34   608     0      64  }
 24134    34   178     5    34   608     0    1476  ENDMETHOD
 24135    34   178     5    34   609     0    1477  STARTMETHOD
 24136    34   180    12    34   609     0     111  CharBuffer
 24137    34   180    23    34   609     0     111  slice
 24138    34   180    28    34   609     0      59  (
 24139    34   180    29    34   609     0      60  )
 24140    34   180    31    34   609     0      63  {
 24141    34   181     9    34   609     1      36  int
 24142    34   181    13    34   609     1     111  pos
 24143    34   181    17    34   609     1      67  =
 24144    34   181    19    34   609     1     111  this.position
 24145    34   181    32    34   609     1      59  (
 24146    34   181    33    34   609     1      60  )
 24147    34   181    34    34   609     1     102  ;
 24148    34   182     9    34   609     1      36  int
 24149    34   182    13    34   609     1     111  lim
 24150    34   182    17    34   609     1      67  =
 24151    34   182    19    34   609     1     111  this.limit
 24152    34   182    29    34   609     1      59  (
 24153    34   182    30    34   609     1      60  )
 24154    34   182    31    34   609     1     102  ;
 24155    34   183     9    34   609     0     111  assert
 24156    34   183    16    34   609     0      59  (
 24157    34   183    17    34   609     0     111  pos
 24158    34   183    21    34   609     0      92  <=
 24159    34   183    24    34   609     0     111  lim
 24160    34   183    27    34   609     0      60  )
 24161    34   183    28    34   609     0     102  ;
 24162    34   184     9    34   609     0      36  int
 24163    34   184    13    34   609     0     111  rem
 24164    34   184    17    34   609     0      67  =
 24165    34   184    19    34   609     0      59  (
 24166    34   184    20    34   609     0     111  pos
 24167    34   184    24    34   609     0      92  <=
 24168    34   184    27    34   609     0     111  lim
 24169    34   184    31    34   609     0      58  ?
 24170    34   184    33    34   609     0     111  lim
 24171    34   184    37    34   609     0      77  -
 24172    34   184    39    34   609     0     111  pos
 24173    34   184    43    34   609     0      65  :
 24174    34   184    45    34   609     0     112  0
 24175    34   184    46    34   609     0      60  )
 24176    34   184    47    34   609     0     102  ;
 24177    34   185     9    34   609     0      36  int
 24178    34   185    13    34   609     0     111  off
 24179    34   185    17    34   609     0      67  =
 24180    34   185    19    34   609     0      59  (
 24181    34   185    20    34   609     0     111  pos
 24182    34   185    24    34   609     0      90  <<
 24183    34   185    27    34   609     0     112  1
 24184    34   185    28    34   609     0      60  )
 24185    34   185    29    34   609     0     102  ;
 24186    34   186     9    34   609     0     111  assert
 24187    34   186    16    34   609     0      59  (
 24188    34   186    17    34   609     0     111  off
 24189    34   186    21    34   609     0      88  >=
 24190    34   186    24    34   609     0     112  0
 24191    34   186    25    34   609     0      60  )
 24192    34   186    26    34   609     0     102  ;
 24193    34   187     9    34   609     0      19  return
 24194    34   187    20    34   609     0     111  DirectCharBufferRU
 24195    34   187    38    34   609     0      59  (
 24196    34   187    39    34   609     0      44  this
 24197    34   187    43    34   609     0      66  ,
 24198    34   187    45    34   609     0      77  -
 24199    34   187    46    34   609     0     112  1
 24200    34   187    47    34   609     0      66  ,
 24201    34   187    49    34   609     0     112  0
 24202    34   187    50    34   609     0      66  ,
 24203    34   187    52    34   609     0     111  rem
 24204    34   187    55    34   609     0      66  ,
 24205    34   187    57    34   609     0     111  rem
 24206    34   187    60    34   609     0      66  ,
 24207    34   187    62    34   609     0     111  off
 24208    34   187    65    34   609     0      60  )
 24209    34   187    66    34   609     0     102  ;
 24210    34   188     5    34   609     0      64  }
 24211    34   188     5    34   609     0    1478  ENDMETHOD
 24212    34   188     5    34   610     0    1479  STARTMETHOD
 24213    34   190    12    34   610     0     111  CharBuffer
 24214    34   190    23    34   610     0     111  duplicate
 24215    34   190    32    34   610     0      59  (
 24216    34   190    33    34   610     0      60  )
 24217    34   190    35    34   610     0      63  {
 24218    34   191     9    34   610     0      19  return
 24219    34   191    20    34   610     0     111  DirectCharBufferRU
 24220    34   191    38    34   610     0      59  (
 24221    34   191    39    34   610     0      44  this
 24222    34   191    43    34   610     0      66  ,
 24223    34   192    47    34   610     1     111  this.markValue
 24224    34   192    61    34   610     1      59  (
 24225    34   192    62    34   610     1      60  )
 24226    34   192    63    34   610     1      66  ,
 24227    34   193    47    34   610     1     111  this.position
 24228    34   193    60    34   610     1      59  (
 24229    34   193    61    34   610     1      60  )
 24230    34   193    62    34   610     1      66  ,
 24231    34   194    47    34   610     1     111  this.limit
 24232    34   194    57    34   610     1      59  (
 24233    34   194    58    34   610     1      60  )
 24234    34   194    59    34   610     1      66  ,
 24235    34   195    47    34   610     1     111  this.capacity
 24236    34   195    60    34   610     1      59  (
 24237    34   195    61    34   610     1      60  )
 24238    34   195    62    34   610     1      66  ,
 24239    34   196    47    34   610     0     112  0
 24240    34   196    48    34   610     0      60  )
 24241    34   196    49    34   610     0     102  ;
 24242    34   197     5    34   610     0      64  }
 24243    34   197     5    34   610     0    1480  ENDMETHOD
 24244    34   197     5    34   611     0    1481  STARTMETHOD
 24245    34   199    12    34   611     0     111  CharBuffer
 24246    34   199    23    34   611     0     111  asReadOnlyBuffer
 24247    34   199    39    34   611     0      59  (
 24248    34   199    40    34   611     0      60  )
 24249    34   199    42    34   611     0      63  {
 24250    34   208     9    34   611     0      19  return
 24251    34   208    16    34   611     0     111  duplicate
 24252    34   208    25    34   611     0      59  (
 24253    34   208    26    34   611     0      60  )
 24254    34   208    27    34   611     0     102  ;
 24255    34   210     5    34   611     0      64  }
 24256    34   210     5    34   611     0    1482  ENDMETHOD
 24257    34   210     5    34   612     0    1483  STARTMETHOD
 24258    34   261    12    34   612     0     111  CharBuffer
 24259    34   261    23    34   612     0     111  put
 24260    34   261    26    34   612     0      59  (
 24261    34   261    27    34   612     0      40  char
 24262    34   261    32    34   612     0     111  x
 24263    34   261    33    34   612     0      60  )
 24264    34   261    35    34   612     0      63  {
 24265    34   266     9    34   612     0      20  throw
 24266    34   266    19    34   612     0     111  ReadOnlyBufferException
 24267    34   266    42    34   612     0      59  (
 24268    34   266    43    34   612     0      60  )
 24269    34   266    44    34   612     0     102  ;
 24270    34   268     5    34   612     0      64  }
 24271    34   268     5    34   612     0    1484  ENDMETHOD
 24272    34   268     5    34   613     0    1485  STARTMETHOD
 24273    34   270    12    34   613     0     111  CharBuffer
 24274    34   270    23    34   613     0     111  put
 24275    34   270    26    34   613     0      59  (
 24276    34   270    27    34   613     0      36  int
 24277    34   270    31    34   613     0     111  i
 24278    34   270    32    34   613     0      66  ,
 24279    34   270    34    34   613     0      40  char
 24280    34   270    39    34   613     0     111  x
 24281    34   270    40    34   613     0      60  )
 24282    34   270    42    34   613     0      63  {
 24283    34   275     9    34   613     0      20  throw
 24284    34   275    19    34   613     0     111  ReadOnlyBufferException
 24285    34   275    42    34   613     0      59  (
 24286    34   275    43    34   613     0      60  )
 24287    34   275    44    34   613     0     102  ;
 24288    34   277     5    34   613     0      64  }
 24289    34   277     5    34   613     0    1486  ENDMETHOD
 24290    34   277     5    34   614     0    1487  STARTMETHOD
 24291    34   279    12    34   614     0     111  CharBuffer
 24292    34   279    23    34   614     0     111  put
 24293    34   279    26    34   614     0      59  (
 24294    34   279    27    34   614     0     111  CharBuffer
 24295    34   279    38    34   614     0     111  src
 24296    34   279    41    34   614     0      60  )
 24297    34   279    43    34   614     0      63  {
 24298    34   316     9    34   614     0      20  throw
 24299    34   316    19    34   614     0     111  ReadOnlyBufferException
 24300    34   316    42    34   614     0      59  (
 24301    34   316    43    34   614     0      60  )
 24302    34   316    44    34   614     0     102  ;
 24303    34   318     5    34   614     0      64  }
 24304    34   318     5    34   614     0    1488  ENDMETHOD
 24305    34   318     5    34   615     0    1489  STARTMETHOD
 24306    34   320    12    34   615     0     111  CharBuffer
 24307    34   320    23    34   615     0     111  put
 24308    34   320    26    34   615     0      59  (
 24309    34   320    27    34   615     0      40  char
 24310    34   320    31    34   615     0      61  [
 24311    34   320    32    34   615     0      62  ]
 24312    34   320    34    34   615     0     111  src
 24313    34   320    37    34   615     0      66  ,
 24314    34   320    39    34   615     0      36  int
 24315    34   320    43    34   615     0     111  offset
 24316    34   320    49    34   615     0      66  ,
 24317    34   320    51    34   615     0      36  int
 24318    34   320    55    34   615     0     111  length
 24319    34   320    61    34   615     0      60  )
 24320    34   320    63    34   615     0      63  {
 24321    34   343     9    34   615     0      20  throw
 24322    34   343    19    34   615     0     111  ReadOnlyBufferException
 24323    34   343    42    34   615     0      59  (
 24324    34   343    43    34   615     0      60  )
 24325    34   343    44    34   615     0     102  ;
 24326    34   345     5    34   615     0      64  }
 24327    34   345     5    34   615     0    1490  ENDMETHOD
 24328    34   345     5    34   616     0    1491  STARTMETHOD
 24329    34   347    12    34   616     0     111  CharBuffer
 24330    34   347    23    34   616     0     111  compact
 24331    34   347    30    34   616     0      59  (
 24332    34   347    31    34   616     0      60  )
 24333    34   347    33    34   616     0      63  {
 24334    34   360     9    34   616     0      20  throw
 24335    34   360    19    34   616     0     111  ReadOnlyBufferException
 24336    34   360    42    34   616     0      59  (
 24337    34   360    43    34   616     0      60  )
 24338    34   360    44    34   616     1     102  ;
 24339    34   362     5    34   616     1      64  }
 24340    34   362     5    34   616     0    1492  ENDMETHOD
 24341    34   362     5    34   617     0    1493  STARTMETHOD
 24342    34   364    12    34   617     0      39  boolean
 24343    34   364    20    34   617     0     111  isDirect
 24344    34   364    28    34   617     0      59  (
 24345    34   364    29    34   617     0      60  )
 24346    34   364    31    34   617     0      63  {
 24347    34   365     9    34   617     0      19  return
 24348    34   365    16    34   617     0      52  true
 24349    34   365    20    34   617     1     102  ;
 24350    34   366     5    34   617     1      64  }
 24351    34   366     5    34   617     0    1494  ENDMETHOD
 24352    34   366     5    34   618     0    1495  STARTMETHOD
 24353    34   368    12    34   618     0      39  boolean
 24354    34   368    20    34   618     0     111  isReadOnly
 24355    34   368    30    34   618     0      59  (
 24356    34   368    31    34   618     0      60  )
 24357    34   368    33    34   618     0      63  {
 24358    34   369     9    34   618     0      19  return
 24359    34   369    16    34   618     0      52  true
 24360    34   369    20    34   618     1     102  ;
 24361    34   370     5    34   618     1      64  }
 24362    34   370     5    34   618     0    1496  ENDMETHOD
 24363    34   370     5    34   619     0    1497  STARTMETHOD
 24364    34   375    12    34   619     0     111  String
 24365    34   375    19    34   619     0     111  toString
 24366    34   375    27    34   619     0      59  (
 24367    34   375    28    34   619     0      36  int
 24368    34   375    32    34   619     0     111  start
 24369    34   375    37    34   619     0      66  ,
 24370    34   375    39    34   619     0      36  int
 24371    34   375    43    34   619     0     111  end
 24372    34   375    46    34   619     0      60  )
 24373    34   375    48    34   619     0      63  {
 24374    34   376     9    34   619     0      31  if
 24375    34   376    12    34   619     0      59  (
 24376    34   376    13    34   619     0      59  (
 24377    34   376    14    34   619     0     111  end
 24378    34   376    18    34   619     0      89  >
 24379    34   376    20    34   619     0     111  limit
 24380    34   376    25    34   619     0      59  (
 24381    34   376    26    34   619     0      60  )
 24382    34   376    27    34   619     0      60  )
 24383    34   376    29    34   619     0      98  ||
 24384    34   376    32    34   619     0      59  (
 24385    34   376    33    34   619     0     111  start
 24386    34   376    39    34   619     0      89  >
 24387    34   376    41    34   619     0     111  end
 24388    34   376    44    34   619     0      60  )
 24389    34   376    45    34   619     0      60  )
 24390    34   377    13    34   619     0      20  throw
 24391    34   377    23    34   619     0     111  IndexOutOfBoundsException
 24392    34   377    48    34   619     0      59  (
 24393    34   377    49    34   619     0      60  )
 24394    34   377    50    34   619     0     102  ;
 24395    34   378     9    34   619     0      35  try
 24396    34   378    13    34   619     0      63  {
 24397    34   379    13    34   619     0      36  int
 24398    34   379    17    34   619     0     111  len
 24399    34   379    21    34   619     0      67  =
 24400    34   379    23    34   619     0     111  end
 24401    34   379    27    34   619     0      77  -
 24402    34   379    29    34   619     0     111  start
 24403    34   379    34    34   619     0     102  ;
 24404    34   380    13    34   619     0      40  char
 24405    34   380    17    34   619     0      61  [
 24406    34   380    18    34   619     0      62  ]
 24407    34   380    20    34   619     0     111  ca
 24408    34   380    23    34   619     0      67  =
 24409    34   380    29    34   619     0      40  char
 24410    34   380    33    34   619     0      61  [
 24411    34   380    34    34   619     0     111  len
 24412    34   380    37    34   619     0      62  ]
 24413    34   380    38    34   619     0     102  ;
 24414    34   381    13    34   619     0     111  CharBuffer
 24415    34   381    24    34   619     0     111  cb
 24416    34   381    27    34   619     0      67  =
 24417    34   381    29    34   619     0     111  CharBuffer.wrap
 24418    34   381    44    34   619     0      59  (
 24419    34   381    45    34   619     0     111  ca
 24420    34   381    47    34   619     0      60  )
 24421    34   381    48    34   619     0     102  ;
 24422    34   382    13    34   619     0     111  CharBuffer
 24423    34   382    24    34   619     0     111  db
 24424    34   382    27    34   619     0      67  =
 24425    34   382    29    34   619     0     111  this.duplicate
 24426    34   382    43    34   619     0      59  (
 24427    34   382    44    34   619     0      60  )
 24428    34   382    45    34   619     0     102  ;
 24429    34   383    13    34   619     1     111  db.position
 24430    34   383    24    34   619     1      59  (
 24431    34   383    25    34   619     1     111  start
 24432    34   383    30    34   619     1      60  )
 24433    34   383    31    34   619     1     102  ;
 24434    34   384    13    34   619     1     111  db.limit
 24435    34   384    21    34   619     1      59  (
 24436    34   384    22    34   619     1     111  end
 24437    34   384    25    34   619     1      60  )
 24438    34   384    26    34   619     1     102  ;
 24439    34   385    13    34   619     1     111  cb.put
 24440    34   385    19    34   619     1      59  (
 24441    34   385    20    34   619     1     111  db
 24442    34   385    22    34   619     1      60  )
 24443    34   385    23    34   619     1     102  ;
 24444    34   386    13    34   619     0      19  return
 24445    34   386    24    34   619     0     111  String
 24446    34   386    30    34   619     0      59  (
 24447    34   386    31    34   619     0     111  ca
 24448    34   386    33    34   619     0      60  )
 24449    34   386    34    34   619     0     102  ;
 24450    34   387     9    34   619     0      64  }
 24451    34   387    11    34   619     0      34  catch
 24452    34   387    17    34   619     0      59  (
 24453    34   387    18    34   619     0     111  StringIndexOutOfBoundsException
 24454    34   387    50    34   619     0     111  x
 24455    34   387    51    34   619     0      60  )
 24456    34   387    53    34   619     0      63  {
 24457    34   388    13    34   619     0      20  throw
 24458    34   388    23    34   619     0     111  IndexOutOfBoundsException
 24459    34   388    48    34   619     0      59  (
 24460    34   388    49    34   619     0      60  )
 24461    34   388    50    34   619     0     102  ;
 24462    34   389     9    34   619     0      64  }
 24463    34   390     5    34   619     0      64  }
 24464    34   390     5    34   619     0    1498  ENDMETHOD
 24465    34   390     5    34   620     0    1499  STARTMETHOD
 24466    34   395    12    34   620     0     111  CharSequence
 24467    34   395    25    34   620     0     111  subSequence
 24468    34   395    36    34   620     0      59  (
 24469    34   395    37    34   620     0      36  int
 24470    34   395    41    34   620     0     111  start
 24471    34   395    46    34   620     0      66  ,
 24472    34   395    48    34   620     0      36  int
 24473    34   395    52    34   620     0     111  end
 24474    34   395    55    34   620     0      60  )
 24475    34   395    57    34   620     0      63  {
 24476    34   396     9    34   620     1      36  int
 24477    34   396    13    34   620     1     111  pos
 24478    34   396    17    34   620     1      67  =
 24479    34   396    19    34   620     1     111  position
 24480    34   396    27    34   620     1      59  (
 24481    34   396    28    34   620     1      60  )
 24482    34   396    29    34   620     1     102  ;
 24483    34   397     9    34   620     1      36  int
 24484    34   397    13    34   620     1     111  lim
 24485    34   397    17    34   620     1      67  =
 24486    34   397    19    34   620     1     111  limit
 24487    34   397    24    34   620     1      59  (
 24488    34   397    25    34   620     1      60  )
 24489    34   397    26    34   620     1     102  ;
 24490    34   398     9    34   620     0     111  assert
 24491    34   398    16    34   620     0      59  (
 24492    34   398    17    34   620     0     111  pos
 24493    34   398    21    34   620     0      92  <=
 24494    34   398    24    34   620     0     111  lim
 24495    34   398    27    34   620     0      60  )
 24496    34   398    28    34   620     0     102  ;
 24497    34   399     9    34   620     0     111  pos
 24498    34   399    13    34   620     0      67  =
 24499    34   399    15    34   620     0      59  (
 24500    34   399    16    34   620     0     111  pos
 24501    34   399    20    34   620     0      92  <=
 24502    34   399    23    34   620     0     111  lim
 24503    34   399    27    34   620     0      58  ?
 24504    34   399    29    34   620     0     111  pos
 24505    34   399    33    34   620     0      65  :
 24506    34   399    35    34   620     0     111  lim
 24507    34   399    38    34   620     0      60  )
 24508    34   399    39    34   620     0     102  ;
 24509    34   400     9    34   620     0      36  int
 24510    34   400    13    34   620     0     111  len
 24511    34   400    17    34   620     0      67  =
 24512    34   400    19    34   620     0     111  lim
 24513    34   400    23    34   620     0      77  -
 24514    34   400    25    34   620     0     111  pos
 24515    34   400    28    34   620     0     102  ;
 24516    34   402     9    34   620     0      31  if
 24517    34   402    12    34   620     0      59  (
 24518    34   402    13    34   620     0      59  (
 24519    34   402    14    34   620     0     111  start
 24520    34   402    20    34   620     0      93  <
 24521    34   402    22    34   620     0     112  0
 24522    34   402    23    34   620     0      60  )
 24523    34   402    25    34   620     0      98  ||
 24524    34   402    28    34   620     0      59  (
 24525    34   402    29    34   620     0     111  end
 24526    34   402    33    34   620     0      89  >
 24527    34   402    35    34   620     0     111  len
 24528    34   402    38    34   620     0      60  )
 24529    34   402    40    34   620     0      98  ||
 24530    34   402    43    34   620     0      59  (
 24531    34   402    44    34   620     0     111  start
 24532    34   402    50    34   620     0      89  >
 24533    34   402    52    34   620     0     111  end
 24534    34   402    55    34   620     0      60  )
 24535    34   402    56    34   620     0      60  )
 24536    34   403    13    34   620     0      20  throw
 24537    34   403    23    34   620     0     111  IndexOutOfBoundsException
 24538    34   403    48    34   620     0      59  (
 24539    34   403    49    34   620     0      60  )
 24540    34   403    50    34   620     0     102  ;
 24541    34   404     9    34   620     0      36  int
 24542    34   404    13    34   620     0     111  sublen
 24543    34   404    20    34   620     0      67  =
 24544    34   404    22    34   620     0     111  end
 24545    34   404    26    34   620     0      77  -
 24546    34   404    28    34   620     0     111  start
 24547    34   404    33    34   620     0     102  ;
 24548    34   405     9    34   620     0      36  int
 24549    34   405    13    34   620     0     111  off
 24550    34   405    17    34   620     0      67  =
 24551    34   405    19    34   620     0      59  (
 24552    34   405    20    34   620     0     111  pos
 24553    34   405    24    34   620     0      74  +
 24554    34   405    26    34   620     0     111  start
 24555    34   405    31    34   620     0      60  )
 24556    34   405    33    34   620     0      90  <<
 24557    34   405    36    34   620     0     112  1
 24558    34   405    37    34   620     0     102  ;
 24559    34   406     9    34   620     0     111  assert
 24560    34   406    16    34   620     0      59  (
 24561    34   406    17    34   620     0     111  off
 24562    34   406    21    34   620     0      88  >=
 24563    34   406    24    34   620     0     112  0
 24564    34   406    25    34   620     0      60  )
 24565    34   406    26    34   620     0     102  ;
 24566    34   407     9    34   620     0      19  return
 24567    34   407    20    34   620     0     111  DirectCharBufferRU
 24568    34   407    38    34   620     0      59  (
 24569    34   407    39    34   620     0      44  this
 24570    34   407    43    34   620     0      66  ,
 24571    34   407    45    34   620     0      77  -
 24572    34   407    46    34   620     0     112  1
 24573    34   407    47    34   620     0      66  ,
 24574    34   407    49    34   620     0     112  0
 24575    34   407    50    34   620     0      66  ,
 24576    34   407    52    34   620     0     111  sublen
 24577    34   407    58    34   620     0      66  ,
 24578    34   407    60    34   620     0     111  sublen
 24579    34   407    66    34   620     0      66  ,
 24580    34   407    68    34   620     0     111  off
 24581    34   407    71    34   620     0      60  )
 24582    34   407    72    34   620     0     102  ;
 24583    34   408     5    34   620     0      64  }
 24584    34   408     5    34   620     0    1500  ENDMETHOD
 24585    34   408     5    34   621     0    1501  STARTMETHOD
 24586    34   416    12    34   621     0     111  ByteOrder
 24587    34   416    22    34   621     0     111  order
 24588    34   416    27    34   621     0      59  (
 24589    34   416    28    34   621     0      60  )
 24590    34   416    30    34   621     0      63  {
 24591    34   422     9    34   621     0      19  return
 24592    34   422    16    34   621     0      59  (
 24593    34   422    17    34   621     0      59  (
 24594    34   422    18    34   621     0     111  ByteOrder.nativeOrder
 24595    34   422    39    34   621     0      59  (
 24596    34   422    40    34   621     0      60  )
 24597    34   422    42    34   621     0      71  !=
 24598    34   422    45    34   621     0     111  ByteOrder.BIG_ENDIAN
 24599    34   422    65    34   621     0      60  )
 24600    34   423    17    34   621     0      58  ?
 24601    34   423    19    34   621     0     111  ByteOrder.LITTLE_ENDIAN
 24602    34   423    43    34   621     0      65  :
 24603    34   423    45    34   621     0     111  ByteOrder.BIG_ENDIAN
 24604    34   423    65    34   621     0      60  )
 24605    34   423    66    34   621     0     102  ;
 24606    34   425     5    34   621     0      64  }
 24607    34   425     5    34   621     0    1502  ENDMETHOD
 24608    34   452     1    34    -1     0      64  }
 24609    34   452     1    34    -1     1    1503  ENDCLASS
 24610    34   452     1    -1    -1     1    1504  ENDFILE C:\Users\RA\javasrc\java\nio\DirectCharBufferRU.java
 24611    35     1     1    -1    -1     1    1505  STARTFILE C:\Users\RA\javasrc\java\nio\DirectCharBufferS.java
 24612    35    28     9    -1    -1     0     111  java.nio
 24613    35    28    17    -1    -1     0     102  ;
 24614    35    30     1    -1    -1     1      49  import
 24615    35    30     8    -1    -1     1     111  sun.misc.Cleaner
 24616    35    30    24    -1    -1     1     102  ;
 24617    35    31     1    -1    -1     1      49  import
 24618    35    31     8    -1    -1     1     111  sun.misc.Unsafe
 24619    35    31    23    -1    -1     1     102  ;
 24620    35    32     1    -1    -1     1      49  import
 24621    35    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 24622    35    32    31    -1    -1     1     102  ;
 24623    35    33     1    -1    -1     1      49  import
 24624    35    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 24625    35    33    34    -1    -1     1     102  ;
 24626    35    36     1    35    -1     0    1506  STARTCLASS
 24627    35    36     1    35    -1     0      24  class
 24628    35    36     7    35    -1     0     111  DirectCharBufferS
 24629    35    38     5    35    -1     0      38  extends
 24630    35    38    13    35    -1     0     111  CharBuffer
 24631    35    42     5    35    -1     0      17  implements
 24632    35    42    16    35    -1     0     111  DirectBuffer
 24633    35    43     1    35    -1     0      63  {
 24634    35    48     5    35    -1     0      23  protected
 24635    35    48    15    35    -1     0      45  static
 24636    35    48    28    35    -1     0     111  Unsafe
 24637    35    48    35    35    -1     0     111  unsafe
 24638    35    48    42    35    -1     0      67  =
 24639    35    48    44    35    -1     0     111  Bits.unsafe
 24640    35    48    55    35    -1     0      59  (
 24641    35    48    56    35    -1     0      60  )
 24642    35    48    57    35    -1     0     102  ;
 24643    35    51     5    35    -1     0      23  protected
 24644    35    51    15    35    -1     0      45  static
 24645    35    51    28    35    -1     0      39  boolean
 24646    35    51    36    35    -1     0     111  unaligned
 24647    35    51    46    35    -1     0      67  =
 24648    35    51    48    35    -1     0     111  Bits.unaligned
 24649    35    51    62    35    -1     0      59  (
 24650    35    51    63    35    -1     0      60  )
 24651    35    51    64    35    -1     0     102  ;
 24652    35    59     5    35    -1     0      23  protected
 24653    35    59    15    35    -1     0     111  Object
 24654    35    59    22    35    -1     0     111  viewedBuffer
 24655    35    59    35    35    -1     0      67  =
 24656    35    59    37    35    -1     0      21  null
 24657    35    59    41    35    -1     0     102  ;
 24658    35    59    41    35   622     0    1507  STARTMETHOD
 24659    35    61    12    35   622     0     111  Object
 24660    35    61    19    35   622     0     111  viewedBuffer
 24661    35    61    31    35   622     0      59  (
 24662    35    61    32    35   622     0      60  )
 24663    35    61    34    35   622     0      63  {
 24664    35    62     9    35   622     0      19  return
 24665    35    62    16    35   622     0     111  viewedBuffer
 24666    35    62    28    35   622     0     102  ;
 24667    35    63     5    35   622     0      64  }
 24668    35    63     5    35   622     0    1508  ENDMETHOD
 24669    35    63     5    35   623     0    1509  STARTMETHOD
 24670    35   100    12    35   623     0     111  Cleaner
 24671    35   100    20    35   623     0     111  cleaner
 24672    35   100    27    35   623     0      59  (
 24673    35   100    28    35   623     0      60  )
 24674    35   100    30    35   623     0      63  {
 24675    35   100    32    35   623     0      19  return
 24676    35   100    39    35   623     0      21  null
 24677    35   100    43    35   623     0     102  ;
 24678    35   100    45    35   623     0      64  }
 24679    35   100    45    35   623     0    1510  ENDMETHOD
 24680    35   100    45    35   624     0    1511  STARTMETHOD
 24681    35   164     5    35   624     0     111  DirectCharBufferS
 24682    35   164    22    35   624     0      59  (
 24683    35   164    23    35   624     0     111  DirectBuffer
 24684    35   164    36    35   624     0     111  db
 24685    35   164    38    35   624     0      66  ,
 24686    35   165    32    35   624     0      36  int
 24687    35   165    36    35   624     0     111  mark
 24688    35   165    40    35   624     0      66  ,
 24689    35   165    42    35   624     0      36  int
 24690    35   165    46    35   624     0     111  pos
 24691    35   165    49    35   624     0      66  ,
 24692    35   165    51    35   624     0      36  int
 24693    35   165    55    35   624     0     111  lim
 24694    35   165    58    35   624     0      66  ,
 24695    35   165    60    35   624     0      36  int
 24696    35   165    64    35   624     0     111  cap
 24697    35   165    67    35   624     0      66  ,
 24698    35   166    32    35   624     0      36  int
 24699    35   166    36    35   624     0     111  off
 24700    35   166    39    35   624     0      60  )
 24701    35   167     5    35   624     0      63  {
 24702    35   169     9    35   624     0      27  super
 24703    35   169    14    35   624     0      59  (
 24704    35   169    15    35   624     0     111  mark
 24705    35   169    19    35   624     0      66  ,
 24706    35   169    21    35   624     0     111  pos
 24707    35   169    24    35   624     0      66  ,
 24708    35   169    26    35   624     0     111  lim
 24709    35   169    29    35   624     0      66  ,
 24710    35   169    31    35   624     0     111  cap
 24711    35   169    34    35   624     0      60  )
 24712    35   169    35    35   624     0     102  ;
 24713    35   170     9    35   624     0     111  address
 24714    35   170    17    35   624     0      67  =
 24715    35   170    19    35   624     0     111  db.address
 24716    35   170    29    35   624     0      59  (
 24717    35   170    30    35   624     0      60  )
 24718    35   170    32    35   624     0      74  +
 24719    35   170    34    35   624     0     111  off
 24720    35   170    37    35   624     0     102  ;
 24721    35   171     9    35   624     0     111  viewedBuffer
 24722    35   171    22    35   624     0      67  =
 24723    35   171    24    35   624     0     111  db
 24724    35   171    26    35   624     0     102  ;
 24725    35   178     5    35   624     0      64  }
 24726    35   178     5    35   624     0    1512  ENDMETHOD
 24727    35   178     5    35   625     0    1513  STARTMETHOD
 24728    35   180    12    35   625     0     111  CharBuffer
 24729    35   180    23    35   625     0     111  slice
 24730    35   180    28    35   625     0      59  (
 24731    35   180    29    35   625     0      60  )
 24732    35   180    31    35   625     0      63  {
 24733    35   181     9    35   625     1      36  int
 24734    35   181    13    35   625     1     111  pos
 24735    35   181    17    35   625     1      67  =
 24736    35   181    19    35   625     1     111  this.position
 24737    35   181    32    35   625     1      59  (
 24738    35   181    33    35   625     1      60  )
 24739    35   181    34    35   625     1     102  ;
 24740    35   182     9    35   625     1      36  int
 24741    35   182    13    35   625     1     111  lim
 24742    35   182    17    35   625     1      67  =
 24743    35   182    19    35   625     1     111  this.limit
 24744    35   182    29    35   625     1      59  (
 24745    35   182    30    35   625     1      60  )
 24746    35   182    31    35   625     1     102  ;
 24747    35   183     9    35   625     0     111  assert
 24748    35   183    16    35   625     0      59  (
 24749    35   183    17    35   625     0     111  pos
 24750    35   183    21    35   625     0      92  <=
 24751    35   183    24    35   625     0     111  lim
 24752    35   183    27    35   625     0      60  )
 24753    35   183    28    35   625     0     102  ;
 24754    35   184     9    35   625     0      36  int
 24755    35   184    13    35   625     0     111  rem
 24756    35   184    17    35   625     0      67  =
 24757    35   184    19    35   625     0      59  (
 24758    35   184    20    35   625     0     111  pos
 24759    35   184    24    35   625     0      92  <=
 24760    35   184    27    35   625     0     111  lim
 24761    35   184    31    35   625     0      58  ?
 24762    35   184    33    35   625     0     111  lim
 24763    35   184    37    35   625     0      77  -
 24764    35   184    39    35   625     0     111  pos
 24765    35   184    43    35   625     0      65  :
 24766    35   184    45    35   625     0     112  0
 24767    35   184    46    35   625     0      60  )
 24768    35   184    47    35   625     0     102  ;
 24769    35   185     9    35   625     0      36  int
 24770    35   185    13    35   625     0     111  off
 24771    35   185    17    35   625     0      67  =
 24772    35   185    19    35   625     0      59  (
 24773    35   185    20    35   625     0     111  pos
 24774    35   185    24    35   625     0      90  <<
 24775    35   185    27    35   625     0     112  1
 24776    35   185    28    35   625     0      60  )
 24777    35   185    29    35   625     0     102  ;
 24778    35   186     9    35   625     0     111  assert
 24779    35   186    16    35   625     0      59  (
 24780    35   186    17    35   625     0     111  off
 24781    35   186    21    35   625     0      88  >=
 24782    35   186    24    35   625     0     112  0
 24783    35   186    25    35   625     0      60  )
 24784    35   186    26    35   625     0     102  ;
 24785    35   187     9    35   625     0      19  return
 24786    35   187    20    35   625     0     111  DirectCharBufferS
 24787    35   187    37    35   625     0      59  (
 24788    35   187    38    35   625     0      44  this
 24789    35   187    42    35   625     0      66  ,
 24790    35   187    44    35   625     0      77  -
 24791    35   187    45    35   625     0     112  1
 24792    35   187    46    35   625     0      66  ,
 24793    35   187    48    35   625     0     112  0
 24794    35   187    49    35   625     0      66  ,
 24795    35   187    51    35   625     0     111  rem
 24796    35   187    54    35   625     0      66  ,
 24797    35   187    56    35   625     0     111  rem
 24798    35   187    59    35   625     0      66  ,
 24799    35   187    61    35   625     0     111  off
 24800    35   187    64    35   625     0      60  )
 24801    35   187    65    35   625     0     102  ;
 24802    35   188     5    35   625     0      64  }
 24803    35   188     5    35   625     0    1514  ENDMETHOD
 24804    35   188     5    35   626     0    1515  STARTMETHOD
 24805    35   190    12    35   626     0     111  CharBuffer
 24806    35   190    23    35   626     0     111  duplicate
 24807    35   190    32    35   626     0      59  (
 24808    35   190    33    35   626     0      60  )
 24809    35   190    35    35   626     0      63  {
 24810    35   191     9    35   626     0      19  return
 24811    35   191    20    35   626     0     111  DirectCharBufferS
 24812    35   191    37    35   626     0      59  (
 24813    35   191    38    35   626     0      44  this
 24814    35   191    42    35   626     0      66  ,
 24815    35   192    47    35   626     1     111  this.markValue
 24816    35   192    61    35   626     1      59  (
 24817    35   192    62    35   626     1      60  )
 24818    35   192    63    35   626     1      66  ,
 24819    35   193    47    35   626     1     111  this.position
 24820    35   193    60    35   626     1      59  (
 24821    35   193    61    35   626     1      60  )
 24822    35   193    62    35   626     1      66  ,
 24823    35   194    47    35   626     1     111  this.limit
 24824    35   194    57    35   626     1      59  (
 24825    35   194    58    35   626     1      60  )
 24826    35   194    59    35   626     1      66  ,
 24827    35   195    47    35   626     1     111  this.capacity
 24828    35   195    60    35   626     1      59  (
 24829    35   195    61    35   626     1      60  )
 24830    35   195    62    35   626     1      66  ,
 24831    35   196    47    35   626     0     112  0
 24832    35   196    48    35   626     0      60  )
 24833    35   196    49    35   626     0     102  ;
 24834    35   197     5    35   626     0      64  }
 24835    35   197     5    35   626     0    1516  ENDMETHOD
 24836    35   197     5    35   627     0    1517  STARTMETHOD
 24837    35   199    12    35   627     0     111  CharBuffer
 24838    35   199    23    35   627     0     111  asReadOnlyBuffer
 24839    35   199    39    35   627     0      59  (
 24840    35   199    40    35   627     0      60  )
 24841    35   199    42    35   627     0      63  {
 24842    35   201     9    35   627     0      19  return
 24843    35   201    20    35   627     0     111  DirectCharBufferRS
 24844    35   201    38    35   627     0      59  (
 24845    35   201    39    35   627     0      44  this
 24846    35   201    43    35   627     0      66  ,
 24847    35   202    44    35   627     1     111  this.markValue
 24848    35   202    58    35   627     1      59  (
 24849    35   202    59    35   627     1      60  )
 24850    35   202    60    35   627     1      66  ,
 24851    35   203    44    35   627     1     111  this.position
 24852    35   203    57    35   627     1      59  (
 24853    35   203    58    35   627     1      60  )
 24854    35   203    59    35   627     1      66  ,
 24855    35   204    44    35   627     1     111  this.limit
 24856    35   204    54    35   627     1      59  (
 24857    35   204    55    35   627     1      60  )
 24858    35   204    56    35   627     1      66  ,
 24859    35   205    44    35   627     1     111  this.capacity
 24860    35   205    57    35   627     1      59  (
 24861    35   205    58    35   627     1      60  )
 24862    35   205    59    35   627     1      66  ,
 24863    35   206    44    35   627     0     112  0
 24864    35   206    45    35   627     0      60  )
 24865    35   206    46    35   627     0     102  ;
 24866    35   210     5    35   627     0      64  }
 24867    35   210     5    35   627     0    1518  ENDMETHOD
 24868    35   210     5    35   628     0    1519  STARTMETHOD
 24869    35   214    12    35   628     0      53  long
 24870    35   214    17    35   628     0     111  address
 24871    35   214    24    35   628     0      59  (
 24872    35   214    25    35   628     0      60  )
 24873    35   214    27    35   628     0      63  {
 24874    35   215     9    35   628     0      19  return
 24875    35   215    16    35   628     0     111  address
 24876    35   215    23    35   628     0     102  ;
 24877    35   216     5    35   628     0      64  }
 24878    35   216     5    35   628     0    1520  ENDMETHOD
 24879    35   216     5    35   629     0    1521  STARTMETHOD
 24880    35   218     5    35   629     0      41  private
 24881    35   218    13    35   629     0      53  long
 24882    35   218    18    35   629     0     111  ix
 24883    35   218    20    35   629     0      59  (
 24884    35   218    21    35   629     0      36  int
 24885    35   218    25    35   629     0     111  i
 24886    35   218    26    35   629     0      60  )
 24887    35   218    28    35   629     0      63  {
 24888    35   219     9    35   629     0      19  return
 24889    35   219    16    35   629     0     111  address
 24890    35   219    24    35   629     0      74  +
 24891    35   219    26    35   629     0      59  (
 24892    35   219    27    35   629     0     111  i
 24893    35   219    29    35   629     0      90  <<
 24894    35   219    32    35   629     0     112  1
 24895    35   219    33    35   629     0      60  )
 24896    35   219    34    35   629     0     102  ;
 24897    35   220     5    35   629     0      64  }
 24898    35   220     5    35   629     0    1522  ENDMETHOD
 24899    35   220     5    35   630     0    1523  STARTMETHOD
 24900    35   222    12    35   630     0      40  char
 24901    35   222    17    35   630     0     111  get
 24902    35   222    20    35   630     0      59  (
 24903    35   222    21    35   630     0      60  )
 24904    35   222    23    35   630     0      63  {
 24905    35   223     9    35   630     0      19  return
 24906    35   223    16    35   630     0      59  (
 24907    35   223    17    35   630     0     111  Bits.swap
 24908    35   223    26    35   630     0      59  (
 24909    35   223    27    35   630     0     111  unsafe.getChar
 24910    35   223    41    35   630     0      59  (
 24911    35   223    42    35   630     0     111  ix
 24912    35   223    44    35   630     0      59  (
 24913    35   223    45    35   630     0     111  nextGetIndex
 24914    35   223    57    35   630     0      59  (
 24915    35   223    58    35   630     0      60  )
 24916    35   223    59    35   630     0      60  )
 24917    35   223    60    35   630     0      60  )
 24918    35   223    61    35   630     0      60  )
 24919    35   223    62    35   630     0      60  )
 24920    35   223    63    35   630     0     102  ;
 24921    35   224     5    35   630     0      64  }
 24922    35   224     5    35   630     0    1524  ENDMETHOD
 24923    35   224     5    35   631     0    1525  STARTMETHOD
 24924    35   226    12    35   631     0      40  char
 24925    35   226    17    35   631     0     111  get
 24926    35   226    20    35   631     0      59  (
 24927    35   226    21    35   631     0      36  int
 24928    35   226    25    35   631     0     111  i
 24929    35   226    26    35   631     0      60  )
 24930    35   226    28    35   631     0      63  {
 24931    35   227     9    35   631     0      19  return
 24932    35   227    16    35   631     0      59  (
 24933    35   227    17    35   631     0     111  Bits.swap
 24934    35   227    26    35   631     0      59  (
 24935    35   227    27    35   631     0     111  unsafe.getChar
 24936    35   227    41    35   631     0      59  (
 24937    35   227    42    35   631     0     111  ix
 24938    35   227    44    35   631     0      59  (
 24939    35   227    45    35   631     0     111  checkIndex
 24940    35   227    55    35   631     0      59  (
 24941    35   227    56    35   631     0     111  i
 24942    35   227    57    35   631     0      60  )
 24943    35   227    58    35   631     0      60  )
 24944    35   227    59    35   631     0      60  )
 24945    35   227    60    35   631     0      60  )
 24946    35   227    61    35   631     0      60  )
 24947    35   227    62    35   631     0     102  ;
 24948    35   228     5    35   631     0      64  }
 24949    35   228     5    35   631     0    1526  ENDMETHOD
 24950    35   228     5    35   632     0    1527  STARTMETHOD
 24951    35   230    12    35   632     0     111  CharBuffer
 24952    35   230    23    35   632     0     111  get
 24953    35   230    26    35   632     0      59  (
 24954    35   230    27    35   632     0      40  char
 24955    35   230    31    35   632     0      61  [
 24956    35   230    32    35   632     0      62  ]
 24957    35   230    34    35   632     0     111  dst
 24958    35   230    37    35   632     0      66  ,
 24959    35   230    39    35   632     0      36  int
 24960    35   230    43    35   632     0     111  offset
 24961    35   230    49    35   632     0      66  ,
 24962    35   230    51    35   632     0      36  int
 24963    35   230    55    35   632     0     111  length
 24964    35   230    61    35   632     0      60  )
 24965    35   230    63    35   632     0      63  {
 24966    35   232     9    35   632     0      31  if
 24967    35   232    12    35   632     0      59  (
 24968    35   232    13    35   632     0      59  (
 24969    35   232    14    35   632     0     111  length
 24970    35   232    21    35   632     0      90  <<
 24971    35   232    24    35   632     0     112  1
 24972    35   232    25    35   632     0      60  )
 24973    35   232    27    35   632     0      89  >
 24974    35   232    29    35   632     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 24975    35   232    61    35   632     0      60  )
 24976    35   232    63    35   632     0      63  {
 24977    35   233    13    35   632     0     111  checkBounds
 24978    35   233    24    35   632     0      59  (
 24979    35   233    25    35   632     0     111  offset
 24980    35   233    31    35   632     0      66  ,
 24981    35   233    33    35   632     0     111  length
 24982    35   233    39    35   632     0      66  ,
 24983    35   233    41    35   632     0     111  dst.length
 24984    35   233    51    35   632     0      60  )
 24985    35   233    52    35   632     0     102  ;
 24986    35   234    13    35   632     1      36  int
 24987    35   234    17    35   632     1     111  pos
 24988    35   234    21    35   632     1      67  =
 24989    35   234    23    35   632     1     111  position
 24990    35   234    31    35   632     1      59  (
 24991    35   234    32    35   632     1      60  )
 24992    35   234    33    35   632     1     102  ;
 24993    35   235    13    35   632     1      36  int
 24994    35   235    17    35   632     1     111  lim
 24995    35   235    21    35   632     1      67  =
 24996    35   235    23    35   632     1     111  limit
 24997    35   235    28    35   632     1      59  (
 24998    35   235    29    35   632     1      60  )
 24999    35   235    30    35   632     1     102  ;
 25000    35   236    13    35   632     0     111  assert
 25001    35   236    20    35   632     0      59  (
 25002    35   236    21    35   632     0     111  pos
 25003    35   236    25    35   632     0      92  <=
 25004    35   236    28    35   632     0     111  lim
 25005    35   236    31    35   632     0      60  )
 25006    35   236    32    35   632     0     102  ;
 25007    35   237    13    35   632     0      36  int
 25008    35   237    17    35   632     0     111  rem
 25009    35   237    21    35   632     0      67  =
 25010    35   237    23    35   632     0      59  (
 25011    35   237    24    35   632     0     111  pos
 25012    35   237    28    35   632     0      92  <=
 25013    35   237    31    35   632     0     111  lim
 25014    35   237    35    35   632     0      58  ?
 25015    35   237    37    35   632     0     111  lim
 25016    35   237    41    35   632     0      77  -
 25017    35   237    43    35   632     0     111  pos
 25018    35   237    47    35   632     0      65  :
 25019    35   237    49    35   632     0     112  0
 25020    35   237    50    35   632     0      60  )
 25021    35   237    51    35   632     0     102  ;
 25022    35   238    13    35   632     0      31  if
 25023    35   238    16    35   632     0      59  (
 25024    35   238    17    35   632     0     111  length
 25025    35   238    24    35   632     0      89  >
 25026    35   238    26    35   632     0     111  rem
 25027    35   238    29    35   632     0      60  )
 25028    35   239    17    35   632     0      20  throw
 25029    35   239    27    35   632     0     111  BufferUnderflowException
 25030    35   239    51    35   632     0      59  (
 25031    35   239    52    35   632     0      60  )
 25032    35   239    53    35   632     0     102  ;
 25033    35   241    13    35   632     0      31  if
 25034    35   241    16    35   632     0      59  (
 25035    35   241    17    35   632     0     111  order
 25036    35   241    22    35   632     0      59  (
 25037    35   241    23    35   632     0      60  )
 25038    35   241    25    35   632     0      71  !=
 25039    35   241    28    35   632     0     111  ByteOrder.nativeOrder
 25040    35   241    49    35   632     0      59  (
 25041    35   241    50    35   632     0      60  )
 25042    35   241    51    35   632     0      60  )
 25043    35   242    17    35   632     0     111  Bits.copyToCharArray
 25044    35   242    37    35   632     0      59  (
 25045    35   242    38    35   632     0     111  ix
 25046    35   242    40    35   632     0      59  (
 25047    35   242    41    35   632     0     111  pos
 25048    35   242    44    35   632     0      60  )
 25049    35   242    45    35   632     0      66  ,
 25050    35   242    47    35   632     0     111  dst
 25051    35   242    50    35   632     0      66  ,
 25052    35   243    43    35   632     0     111  offset
 25053    35   243    50    35   632     0      90  <<
 25054    35   243    53    35   632     0     112  1
 25055    35   243    54    35   632     0      66  ,
 25056    35   244    43    35   632     0     111  length
 25057    35   244    50    35   632     0      90  <<
 25058    35   244    53    35   632     0     112  1
 25059    35   244    54    35   632     0      60  )
 25060    35   244    55    35   632     0     102  ;
 25061    35   245    13    35   632     0      48  else
 25062    35   246    17    35   632     0     111  Bits.copyToByteArray
 25063    35   246    37    35   632     0      59  (
 25064    35   246    38    35   632     0     111  ix
 25065    35   246    40    35   632     0      59  (
 25066    35   246    41    35   632     0     111  pos
 25067    35   246    44    35   632     0      60  )
 25068    35   246    45    35   632     0      66  ,
 25069    35   246    47    35   632     0     111  dst
 25070    35   246    50    35   632     0      66  ,
 25071    35   247    38    35   632     0     111  offset
 25072    35   247    45    35   632     0      90  <<
 25073    35   247    48    35   632     0     112  1
 25074    35   247    49    35   632     0      66  ,
 25075    35   248    38    35   632     0     111  length
 25076    35   248    45    35   632     0      90  <<
 25077    35   248    48    35   632     0     112  1
 25078    35   248    49    35   632     0      60  )
 25079    35   248    50    35   632     0     102  ;
 25080    35   249    13    35   632     0     111  position
 25081    35   249    21    35   632     0      59  (
 25082    35   249    22    35   632     0     111  pos
 25083    35   249    26    35   632     0      74  +
 25084    35   249    28    35   632     0     111  length
 25085    35   249    34    35   632     0      60  )
 25086    35   249    35    35   632     0     102  ;
 25087    35   250     9    35   632     0      64  }
 25088    35   250    11    35   632     0      48  else
 25089    35   250    16    35   632     0      63  {
 25090    35   251    13    35   632     0     111  super.get
 25091    35   251    22    35   632     0      59  (
 25092    35   251    23    35   632     0     111  dst
 25093    35   251    26    35   632     0      66  ,
 25094    35   251    28    35   632     0     111  offset
 25095    35   251    34    35   632     0      66  ,
 25096    35   251    36    35   632     0     111  length
 25097    35   251    42    35   632     0      60  )
 25098    35   251    43    35   632     0     102  ;
 25099    35   252     9    35   632     0      64  }
 25100    35   253     9    35   632     0      19  return
 25101    35   253    16    35   632     0      44  this
 25102    35   253    20    35   632     0     102  ;
 25103    35   257     5    35   632     0      64  }
 25104    35   257     5    35   632     0    1528  ENDMETHOD
 25105    35   257     5    35   633     0    1529  STARTMETHOD
 25106    35   261    12    35   633     0     111  CharBuffer
 25107    35   261    23    35   633     0     111  put
 25108    35   261    26    35   633     0      59  (
 25109    35   261    27    35   633     0      40  char
 25110    35   261    32    35   633     0     111  x
 25111    35   261    33    35   633     0      60  )
 25112    35   261    35    35   633     0      63  {
 25113    35   263     9    35   633     0     111  unsafe.putChar
 25114    35   263    23    35   633     0      59  (
 25115    35   263    24    35   633     0     111  ix
 25116    35   263    26    35   633     0      59  (
 25117    35   263    27    35   633     0     111  nextPutIndex
 25118    35   263    39    35   633     0      59  (
 25119    35   263    40    35   633     0      60  )
 25120    35   263    41    35   633     0      60  )
 25121    35   263    42    35   633     0      66  ,
 25122    35   263    44    35   633     0     111  Bits.swap
 25123    35   263    53    35   633     0      59  (
 25124    35   263    54    35   633     0      59  (
 25125    35   263    55    35   633     0     111  x
 25126    35   263    56    35   633     0      60  )
 25127    35   263    57    35   633     0      60  )
 25128    35   263    58    35   633     0      60  )
 25129    35   263    59    35   633     0     102  ;
 25130    35   264     9    35   633     0      19  return
 25131    35   264    16    35   633     0      44  this
 25132    35   264    20    35   633     0     102  ;
 25133    35   268     5    35   633     0      64  }
 25134    35   268     5    35   633     0    1530  ENDMETHOD
 25135    35   268     5    35   634     0    1531  STARTMETHOD
 25136    35   270    12    35   634     0     111  CharBuffer
 25137    35   270    23    35   634     0     111  put
 25138    35   270    26    35   634     0      59  (
 25139    35   270    27    35   634     0      36  int
 25140    35   270    31    35   634     0     111  i
 25141    35   270    32    35   634     0      66  ,
 25142    35   270    34    35   634     0      40  char
 25143    35   270    39    35   634     0     111  x
 25144    35   270    40    35   634     0      60  )
 25145    35   270    42    35   634     0      63  {
 25146    35   272     9    35   634     0     111  unsafe.putChar
 25147    35   272    23    35   634     0      59  (
 25148    35   272    24    35   634     0     111  ix
 25149    35   272    26    35   634     0      59  (
 25150    35   272    27    35   634     0     111  checkIndex
 25151    35   272    37    35   634     0      59  (
 25152    35   272    38    35   634     0     111  i
 25153    35   272    39    35   634     0      60  )
 25154    35   272    40    35   634     0      60  )
 25155    35   272    41    35   634     0      66  ,
 25156    35   272    43    35   634     0     111  Bits.swap
 25157    35   272    52    35   634     0      59  (
 25158    35   272    53    35   634     0      59  (
 25159    35   272    54    35   634     0     111  x
 25160    35   272    55    35   634     0      60  )
 25161    35   272    56    35   634     0      60  )
 25162    35   272    57    35   634     0      60  )
 25163    35   272    58    35   634     0     102  ;
 25164    35   273     9    35   634     0      19  return
 25165    35   273    16    35   634     0      44  this
 25166    35   273    20    35   634     0     102  ;
 25167    35   277     5    35   634     0      64  }
 25168    35   277     5    35   634     0    1532  ENDMETHOD
 25169    35   277     5    35   635     0    1533  STARTMETHOD
 25170    35   279    12    35   635     0     111  CharBuffer
 25171    35   279    23    35   635     0     111  put
 25172    35   279    26    35   635     0      59  (
 25173    35   279    27    35   635     0     111  CharBuffer
 25174    35   279    38    35   635     0     111  src
 25175    35   279    41    35   635     0      60  )
 25176    35   279    43    35   635     0      63  {
 25177    35   281     9    35   635     0      31  if
 25178    35   281    12    35   635     0      59  (
 25179    35   281    13    35   635     0     111  src
 25180    35   281    28    35   635     0     111  DirectCharBufferS
 25181    35   281    45    35   635     0      60  )
 25182    35   281    47    35   635     0      63  {
 25183    35   282    13    35   635     0      31  if
 25184    35   282    16    35   635     0      59  (
 25185    35   282    17    35   635     0     111  src
 25186    35   282    21    35   635     0      68  ==
 25187    35   282    24    35   635     0      44  this
 25188    35   282    28    35   635     0      60  )
 25189    35   283    17    35   635     0      20  throw
 25190    35   283    27    35   635     0     111  IllegalArgumentException
 25191    35   283    51    35   635     0      59  (
 25192    35   283    52    35   635     0      60  )
 25193    35   283    53    35   635     0     102  ;
 25194    35   284    13    35   635     0     111  DirectCharBufferS
 25195    35   284    31    35   635     0     111  sb
 25196    35   284    34    35   635     0      67  =
 25197    35   284    36    35   635     0      59  (
 25198    35   284    37    35   635     0     111  DirectCharBufferS
 25199    35   284    54    35   635     0      60  )
 25200    35   284    55    35   635     0     111  src
 25201    35   284    58    35   635     0     102  ;
 25202    35   286    13    35   635     1      36  int
 25203    35   286    17    35   635     1     111  spos
 25204    35   286    22    35   635     1      67  =
 25205    35   286    24    35   635     1     111  sb.position
 25206    35   286    35    35   635     1      59  (
 25207    35   286    36    35   635     1      60  )
 25208    35   286    37    35   635     1     102  ;
 25209    35   287    13    35   635     1      36  int
 25210    35   287    17    35   635     1     111  slim
 25211    35   287    22    35   635     1      67  =
 25212    35   287    24    35   635     1     111  sb.limit
 25213    35   287    32    35   635     1      59  (
 25214    35   287    33    35   635     1      60  )
 25215    35   287    34    35   635     1     102  ;
 25216    35   288    13    35   635     0     111  assert
 25217    35   288    20    35   635     0      59  (
 25218    35   288    21    35   635     0     111  spos
 25219    35   288    26    35   635     0      92  <=
 25220    35   288    29    35   635     0     111  slim
 25221    35   288    33    35   635     0      60  )
 25222    35   288    34    35   635     0     102  ;
 25223    35   289    13    35   635     0      36  int
 25224    35   289    17    35   635     0     111  srem
 25225    35   289    22    35   635     0      67  =
 25226    35   289    24    35   635     0      59  (
 25227    35   289    25    35   635     0     111  spos
 25228    35   289    30    35   635     0      92  <=
 25229    35   289    33    35   635     0     111  slim
 25230    35   289    38    35   635     0      58  ?
 25231    35   289    40    35   635     0     111  slim
 25232    35   289    45    35   635     0      77  -
 25233    35   289    47    35   635     0     111  spos
 25234    35   289    52    35   635     0      65  :
 25235    35   289    54    35   635     0     112  0
 25236    35   289    55    35   635     0      60  )
 25237    35   289    56    35   635     0     102  ;
 25238    35   291    13    35   635     1      36  int
 25239    35   291    17    35   635     1     111  pos
 25240    35   291    21    35   635     1      67  =
 25241    35   291    23    35   635     1     111  position
 25242    35   291    31    35   635     1      59  (
 25243    35   291    32    35   635     1      60  )
 25244    35   291    33    35   635     1     102  ;
 25245    35   292    13    35   635     1      36  int
 25246    35   292    17    35   635     1     111  lim
 25247    35   292    21    35   635     1      67  =
 25248    35   292    23    35   635     1     111  limit
 25249    35   292    28    35   635     1      59  (
 25250    35   292    29    35   635     1      60  )
 25251    35   292    30    35   635     1     102  ;
 25252    35   293    13    35   635     0     111  assert
 25253    35   293    20    35   635     0      59  (
 25254    35   293    21    35   635     0     111  pos
 25255    35   293    25    35   635     0      92  <=
 25256    35   293    28    35   635     0     111  lim
 25257    35   293    31    35   635     0      60  )
 25258    35   293    32    35   635     0     102  ;
 25259    35   294    13    35   635     0      36  int
 25260    35   294    17    35   635     0     111  rem
 25261    35   294    21    35   635     0      67  =
 25262    35   294    23    35   635     0      59  (
 25263    35   294    24    35   635     0     111  pos
 25264    35   294    28    35   635     0      92  <=
 25265    35   294    31    35   635     0     111  lim
 25266    35   294    35    35   635     0      58  ?
 25267    35   294    37    35   635     0     111  lim
 25268    35   294    41    35   635     0      77  -
 25269    35   294    43    35   635     0     111  pos
 25270    35   294    47    35   635     0      65  :
 25271    35   294    49    35   635     0     112  0
 25272    35   294    50    35   635     0      60  )
 25273    35   294    51    35   635     0     102  ;
 25274    35   296    13    35   635     0      31  if
 25275    35   296    16    35   635     0      59  (
 25276    35   296    17    35   635     0     111  srem
 25277    35   296    22    35   635     0      89  >
 25278    35   296    24    35   635     0     111  rem
 25279    35   296    27    35   635     0      60  )
 25280    35   297    17    35   635     0      20  throw
 25281    35   297    27    35   635     0     111  BufferOverflowException
 25282    35   297    50    35   635     0      59  (
 25283    35   297    51    35   635     0      60  )
 25284    35   297    52    35   635     0     102  ;
 25285    35   298    13    35   635     0     111  unsafe.copyMemory
 25286    35   298    30    35   635     0      59  (
 25287    35   298    31    35   635     0     111  sb.ix
 25288    35   298    36    35   635     0      59  (
 25289    35   298    37    35   635     0     111  spos
 25290    35   298    41    35   635     0      60  )
 25291    35   298    42    35   635     0      66  ,
 25292    35   298    44    35   635     0     111  ix
 25293    35   298    46    35   635     0      59  (
 25294    35   298    47    35   635     0     111  pos
 25295    35   298    50    35   635     0      60  )
 25296    35   298    51    35   635     0      66  ,
 25297    35   298    53    35   635     0     111  srem
 25298    35   298    58    35   635     0      90  <<
 25299    35   298    61    35   635     0     112  1
 25300    35   298    62    35   635     0      60  )
 25301    35   298    63    35   635     0     102  ;
 25302    35   299    13    35   635     1     111  sb.position
 25303    35   299    24    35   635     1      59  (
 25304    35   299    25    35   635     1     111  spos
 25305    35   299    30    35   635     1      74  +
 25306    35   299    32    35   635     1     111  srem
 25307    35   299    36    35   635     1      60  )
 25308    35   299    37    35   635     1     102  ;
 25309    35   300    13    35   635     1     111  position
 25310    35   300    21    35   635     1      59  (
 25311    35   300    22    35   635     1     111  pos
 25312    35   300    26    35   635     1      74  +
 25313    35   300    28    35   635     1     111  srem
 25314    35   300    32    35   635     1      60  )
 25315    35   300    33    35   635     1     102  ;
 25316    35   301     9    35   635     0      64  }
 25317    35   301    11    35   635     0      48  else
 25318    35   301    16    35   635     0      31  if
 25319    35   301    19    35   635     0      59  (
 25320    35   301    20    35   635     0     111  src.hb
 25321    35   301    27    35   635     0      71  !=
 25322    35   301    30    35   635     0      21  null
 25323    35   301    34    35   635     0      60  )
 25324    35   301    36    35   635     0      63  {
 25325    35   303    13    35   635     1      36  int
 25326    35   303    17    35   635     1     111  spos
 25327    35   303    22    35   635     1      67  =
 25328    35   303    24    35   635     1     111  src.position
 25329    35   303    36    35   635     1      59  (
 25330    35   303    37    35   635     1      60  )
 25331    35   303    38    35   635     1     102  ;
 25332    35   304    13    35   635     1      36  int
 25333    35   304    17    35   635     1     111  slim
 25334    35   304    22    35   635     1      67  =
 25335    35   304    24    35   635     1     111  src.limit
 25336    35   304    33    35   635     1      59  (
 25337    35   304    34    35   635     1      60  )
 25338    35   304    35    35   635     1     102  ;
 25339    35   305    13    35   635     0     111  assert
 25340    35   305    20    35   635     0      59  (
 25341    35   305    21    35   635     0     111  spos
 25342    35   305    26    35   635     0      92  <=
 25343    35   305    29    35   635     0     111  slim
 25344    35   305    33    35   635     0      60  )
 25345    35   305    34    35   635     0     102  ;
 25346    35   306    13    35   635     0      36  int
 25347    35   306    17    35   635     0     111  srem
 25348    35   306    22    35   635     0      67  =
 25349    35   306    24    35   635     0      59  (
 25350    35   306    25    35   635     0     111  spos
 25351    35   306    30    35   635     0      92  <=
 25352    35   306    33    35   635     0     111  slim
 25353    35   306    38    35   635     0      58  ?
 25354    35   306    40    35   635     0     111  slim
 25355    35   306    45    35   635     0      77  -
 25356    35   306    47    35   635     0     111  spos
 25357    35   306    52    35   635     0      65  :
 25358    35   306    54    35   635     0     112  0
 25359    35   306    55    35   635     0      60  )
 25360    35   306    56    35   635     0     102  ;
 25361    35   308    13    35   635     0     111  put
 25362    35   308    16    35   635     0      59  (
 25363    35   308    17    35   635     0     111  src.hb
 25364    35   308    23    35   635     0      66  ,
 25365    35   308    25    35   635     0     111  src.offset
 25366    35   308    36    35   635     0      74  +
 25367    35   308    38    35   635     0     111  spos
 25368    35   308    42    35   635     0      66  ,
 25369    35   308    44    35   635     0     111  srem
 25370    35   308    48    35   635     0      60  )
 25371    35   308    49    35   635     0     102  ;
 25372    35   309    13    35   635     0     111  src.position
 25373    35   309    25    35   635     0      59  (
 25374    35   309    26    35   635     0     111  spos
 25375    35   309    31    35   635     0      74  +
 25376    35   309    33    35   635     0     111  srem
 25377    35   309    37    35   635     0      60  )
 25378    35   309    38    35   635     0     102  ;
 25379    35   311     9    35   635     0      64  }
 25380    35   311    11    35   635     0      48  else
 25381    35   311    16    35   635     0      63  {
 25382    35   312    13    35   635     0     111  super.put
 25383    35   312    22    35   635     0      59  (
 25384    35   312    23    35   635     0     111  src
 25385    35   312    26    35   635     0      60  )
 25386    35   312    27    35   635     0     102  ;
 25387    35   313     9    35   635     0      64  }
 25388    35   314     9    35   635     0      19  return
 25389    35   314    16    35   635     0      44  this
 25390    35   314    20    35   635     0     102  ;
 25391    35   318     5    35   635     0      64  }
 25392    35   318     5    35   635     0    1534  ENDMETHOD
 25393    35   318     5    35   636     0    1535  STARTMETHOD
 25394    35   320    12    35   636     0     111  CharBuffer
 25395    35   320    23    35   636     0     111  put
 25396    35   320    26    35   636     0      59  (
 25397    35   320    27    35   636     0      40  char
 25398    35   320    31    35   636     0      61  [
 25399    35   320    32    35   636     0      62  ]
 25400    35   320    34    35   636     0     111  src
 25401    35   320    37    35   636     0      66  ,
 25402    35   320    39    35   636     0      36  int
 25403    35   320    43    35   636     0     111  offset
 25404    35   320    49    35   636     0      66  ,
 25405    35   320    51    35   636     0      36  int
 25406    35   320    55    35   636     0     111  length
 25407    35   320    61    35   636     0      60  )
 25408    35   320    63    35   636     0      63  {
 25409    35   322     9    35   636     0      31  if
 25410    35   322    12    35   636     0      59  (
 25411    35   322    13    35   636     0      59  (
 25412    35   322    14    35   636     0     111  length
 25413    35   322    21    35   636     0      90  <<
 25414    35   322    24    35   636     0     112  1
 25415    35   322    25    35   636     0      60  )
 25416    35   322    27    35   636     0      89  >
 25417    35   322    29    35   636     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 25418    35   322    63    35   636     0      60  )
 25419    35   322    65    35   636     0      63  {
 25420    35   323    13    35   636     0     111  checkBounds
 25421    35   323    24    35   636     0      59  (
 25422    35   323    25    35   636     0     111  offset
 25423    35   323    31    35   636     0      66  ,
 25424    35   323    33    35   636     0     111  length
 25425    35   323    39    35   636     0      66  ,
 25426    35   323    41    35   636     0     111  src.length
 25427    35   323    51    35   636     0      60  )
 25428    35   323    52    35   636     0     102  ;
 25429    35   324    13    35   636     1      36  int
 25430    35   324    17    35   636     1     111  pos
 25431    35   324    21    35   636     1      67  =
 25432    35   324    23    35   636     1     111  position
 25433    35   324    31    35   636     1      59  (
 25434    35   324    32    35   636     1      60  )
 25435    35   324    33    35   636     1     102  ;
 25436    35   325    13    35   636     1      36  int
 25437    35   325    17    35   636     1     111  lim
 25438    35   325    21    35   636     1      67  =
 25439    35   325    23    35   636     1     111  limit
 25440    35   325    28    35   636     1      59  (
 25441    35   325    29    35   636     1      60  )
 25442    35   325    30    35   636     1     102  ;
 25443    35   326    13    35   636     0     111  assert
 25444    35   326    20    35   636     0      59  (
 25445    35   326    21    35   636     0     111  pos
 25446    35   326    25    35   636     0      92  <=
 25447    35   326    28    35   636     0     111  lim
 25448    35   326    31    35   636     0      60  )
 25449    35   326    32    35   636     0     102  ;
 25450    35   327    13    35   636     0      36  int
 25451    35   327    17    35   636     0     111  rem
 25452    35   327    21    35   636     0      67  =
 25453    35   327    23    35   636     0      59  (
 25454    35   327    24    35   636     0     111  pos
 25455    35   327    28    35   636     0      92  <=
 25456    35   327    31    35   636     0     111  lim
 25457    35   327    35    35   636     0      58  ?
 25458    35   327    37    35   636     0     111  lim
 25459    35   327    41    35   636     0      77  -
 25460    35   327    43    35   636     0     111  pos
 25461    35   327    47    35   636     0      65  :
 25462    35   327    49    35   636     0     112  0
 25463    35   327    50    35   636     0      60  )
 25464    35   327    51    35   636     0     102  ;
 25465    35   328    13    35   636     0      31  if
 25466    35   328    16    35   636     0      59  (
 25467    35   328    17    35   636     0     111  length
 25468    35   328    24    35   636     0      89  >
 25469    35   328    26    35   636     0     111  rem
 25470    35   328    29    35   636     0      60  )
 25471    35   329    17    35   636     0      20  throw
 25472    35   329    27    35   636     0     111  BufferOverflowException
 25473    35   329    50    35   636     0      59  (
 25474    35   329    51    35   636     0      60  )
 25475    35   329    52    35   636     0     102  ;
 25476    35   331    13    35   636     0      31  if
 25477    35   331    16    35   636     0      59  (
 25478    35   331    17    35   636     0     111  order
 25479    35   331    22    35   636     0      59  (
 25480    35   331    23    35   636     0      60  )
 25481    35   331    25    35   636     0      71  !=
 25482    35   331    28    35   636     0     111  ByteOrder.nativeOrder
 25483    35   331    49    35   636     0      59  (
 25484    35   331    50    35   636     0      60  )
 25485    35   331    51    35   636     0      60  )
 25486    35   332    17    35   636     0     111  Bits.copyFromCharArray
 25487    35   332    39    35   636     0      59  (
 25488    35   332    40    35   636     0     111  src
 25489    35   332    43    35   636     0      66  ,
 25490    35   332    45    35   636     0     111  offset
 25491    35   332    52    35   636     0      90  <<
 25492    35   332    55    35   636     0     112  1
 25493    35   332    56    35   636     0      66  ,
 25494    35   333    45    35   636     0     111  ix
 25495    35   333    47    35   636     0      59  (
 25496    35   333    48    35   636     0     111  pos
 25497    35   333    51    35   636     0      60  )
 25498    35   333    52    35   636     0      66  ,
 25499    35   333    54    35   636     0     111  length
 25500    35   333    61    35   636     0      90  <<
 25501    35   333    64    35   636     0     112  1
 25502    35   333    65    35   636     0      60  )
 25503    35   333    66    35   636     0     102  ;
 25504    35   334    13    35   636     0      48  else
 25505    35   335    17    35   636     0     111  Bits.copyFromByteArray
 25506    35   335    39    35   636     0      59  (
 25507    35   335    40    35   636     0     111  src
 25508    35   335    43    35   636     0      66  ,
 25509    35   335    45    35   636     0     111  offset
 25510    35   335    52    35   636     0      90  <<
 25511    35   335    55    35   636     0     112  1
 25512    35   335    56    35   636     0      66  ,
 25513    35   336    40    35   636     0     111  ix
 25514    35   336    42    35   636     0      59  (
 25515    35   336    43    35   636     0     111  pos
 25516    35   336    46    35   636     0      60  )
 25517    35   336    47    35   636     0      66  ,
 25518    35   336    49    35   636     0     111  length
 25519    35   336    56    35   636     0      90  <<
 25520    35   336    59    35   636     0     112  1
 25521    35   336    60    35   636     0      60  )
 25522    35   336    61    35   636     0     102  ;
 25523    35   337    13    35   636     0     111  position
 25524    35   337    21    35   636     0      59  (
 25525    35   337    22    35   636     0     111  pos
 25526    35   337    26    35   636     0      74  +
 25527    35   337    28    35   636     0     111  length
 25528    35   337    34    35   636     0      60  )
 25529    35   337    35    35   636     0     102  ;
 25530    35   338     9    35   636     0      64  }
 25531    35   338    11    35   636     0      48  else
 25532    35   338    16    35   636     0      63  {
 25533    35   339    13    35   636     0     111  super.put
 25534    35   339    22    35   636     0      59  (
 25535    35   339    23    35   636     0     111  src
 25536    35   339    26    35   636     0      66  ,
 25537    35   339    28    35   636     0     111  offset
 25538    35   339    34    35   636     0      66  ,
 25539    35   339    36    35   636     0     111  length
 25540    35   339    42    35   636     0      60  )
 25541    35   339    43    35   636     0     102  ;
 25542    35   340     9    35   636     0      64  }
 25543    35   341     9    35   636     0      19  return
 25544    35   341    16    35   636     0      44  this
 25545    35   341    20    35   636     0     102  ;
 25546    35   345     5    35   636     0      64  }
 25547    35   345     5    35   636     0    1536  ENDMETHOD
 25548    35   345     5    35   637     0    1537  STARTMETHOD
 25549    35   347    12    35   637     0     111  CharBuffer
 25550    35   347    23    35   637     0     111  compact
 25551    35   347    30    35   637     0      59  (
 25552    35   347    31    35   637     0      60  )
 25553    35   347    33    35   637     0      63  {
 25554    35   349     9    35   637     1      36  int
 25555    35   349    13    35   637     1     111  pos
 25556    35   349    17    35   637     1      67  =
 25557    35   349    19    35   637     1     111  position
 25558    35   349    27    35   637     1      59  (
 25559    35   349    28    35   637     1      60  )
 25560    35   349    29    35   637     1     102  ;
 25561    35   350     9    35   637     1      36  int
 25562    35   350    13    35   637     1     111  lim
 25563    35   350    17    35   637     1      67  =
 25564    35   350    19    35   637     1     111  limit
 25565    35   350    24    35   637     1      59  (
 25566    35   350    25    35   637     1      60  )
 25567    35   350    26    35   637     1     102  ;
 25568    35   351     9    35   637     0     111  assert
 25569    35   351    16    35   637     0      59  (
 25570    35   351    17    35   637     0     111  pos
 25571    35   351    21    35   637     0      92  <=
 25572    35   351    24    35   637     0     111  lim
 25573    35   351    27    35   637     0      60  )
 25574    35   351    28    35   637     0     102  ;
 25575    35   352     9    35   637     0      36  int
 25576    35   352    13    35   637     0     111  rem
 25577    35   352    17    35   637     0      67  =
 25578    35   352    19    35   637     0      59  (
 25579    35   352    20    35   637     0     111  pos
 25580    35   352    24    35   637     0      92  <=
 25581    35   352    27    35   637     0     111  lim
 25582    35   352    31    35   637     0      58  ?
 25583    35   352    33    35   637     0     111  lim
 25584    35   352    37    35   637     0      77  -
 25585    35   352    39    35   637     0     111  pos
 25586    35   352    43    35   637     0      65  :
 25587    35   352    45    35   637     0     112  0
 25588    35   352    46    35   637     0      60  )
 25589    35   352    47    35   637     0     102  ;
 25590    35   354     9    35   637     0     111  unsafe.copyMemory
 25591    35   354    26    35   637     0      59  (
 25592    35   354    27    35   637     0     111  ix
 25593    35   354    29    35   637     0      59  (
 25594    35   354    30    35   637     0     111  pos
 25595    35   354    33    35   637     0      60  )
 25596    35   354    34    35   637     0      66  ,
 25597    35   354    36    35   637     0     111  ix
 25598    35   354    38    35   637     0      59  (
 25599    35   354    39    35   637     0     112  0
 25600    35   354    40    35   637     0      60  )
 25601    35   354    41    35   637     0      66  ,
 25602    35   354    43    35   637     0     111  rem
 25603    35   354    47    35   637     0      90  <<
 25604    35   354    50    35   637     0     112  1
 25605    35   354    51    35   637     0      60  )
 25606    35   354    52    35   637     0     102  ;
 25607    35   355     9    35   637     0     111  position
 25608    35   355    17    35   637     0      59  (
 25609    35   355    18    35   637     0     111  rem
 25610    35   355    21    35   637     0      60  )
 25611    35   355    22    35   637     0     102  ;
 25612    35   356     9    35   637     0     111  limit
 25613    35   356    14    35   637     0      59  (
 25614    35   356    15    35   637     0     111  capacity
 25615    35   356    23    35   637     0      59  (
 25616    35   356    24    35   637     0      60  )
 25617    35   356    25    35   637     0      60  )
 25618    35   356    26    35   637     0     102  ;
 25619    35   357     9    35   637     0     111  clearMark
 25620    35   357    18    35   637     0      59  (
 25621    35   357    19    35   637     0      60  )
 25622    35   357    20    35   637     0     102  ;
 25623    35   358     9    35   637     0      19  return
 25624    35   358    16    35   637     0      44  this
 25625    35   358    20    35   637     1     102  ;
 25626    35   362     5    35   637     1      64  }
 25627    35   362     5    35   637     0    1538  ENDMETHOD
 25628    35   362     5    35   638     0    1539  STARTMETHOD
 25629    35   364    12    35   638     0      39  boolean
 25630    35   364    20    35   638     0     111  isDirect
 25631    35   364    28    35   638     0      59  (
 25632    35   364    29    35   638     0      60  )
 25633    35   364    31    35   638     0      63  {
 25634    35   365     9    35   638     0      19  return
 25635    35   365    16    35   638     0      52  true
 25636    35   365    20    35   638     1     102  ;
 25637    35   366     5    35   638     1      64  }
 25638    35   366     5    35   638     0    1540  ENDMETHOD
 25639    35   366     5    35   639     0    1541  STARTMETHOD
 25640    35   368    12    35   639     0      39  boolean
 25641    35   368    20    35   639     0     111  isReadOnly
 25642    35   368    30    35   639     0      59  (
 25643    35   368    31    35   639     0      60  )
 25644    35   368    33    35   639     0      63  {
 25645    35   369     9    35   639     0      19  return
 25646    35   369    16    35   639     0      43  false
 25647    35   369    21    35   639     1     102  ;
 25648    35   370     5    35   639     1      64  }
 25649    35   370     5    35   639     0    1542  ENDMETHOD
 25650    35   370     5    35   640     0    1543  STARTMETHOD
 25651    35   375    12    35   640     0     111  String
 25652    35   375    19    35   640     0     111  toString
 25653    35   375    27    35   640     0      59  (
 25654    35   375    28    35   640     0      36  int
 25655    35   375    32    35   640     0     111  start
 25656    35   375    37    35   640     0      66  ,
 25657    35   375    39    35   640     0      36  int
 25658    35   375    43    35   640     0     111  end
 25659    35   375    46    35   640     0      60  )
 25660    35   375    48    35   640     0      63  {
 25661    35   376     9    35   640     0      31  if
 25662    35   376    12    35   640     0      59  (
 25663    35   376    13    35   640     0      59  (
 25664    35   376    14    35   640     0     111  end
 25665    35   376    18    35   640     0      89  >
 25666    35   376    20    35   640     0     111  limit
 25667    35   376    25    35   640     0      59  (
 25668    35   376    26    35   640     0      60  )
 25669    35   376    27    35   640     0      60  )
 25670    35   376    29    35   640     0      98  ||
 25671    35   376    32    35   640     0      59  (
 25672    35   376    33    35   640     0     111  start
 25673    35   376    39    35   640     0      89  >
 25674    35   376    41    35   640     0     111  end
 25675    35   376    44    35   640     0      60  )
 25676    35   376    45    35   640     0      60  )
 25677    35   377    13    35   640     0      20  throw
 25678    35   377    23    35   640     0     111  IndexOutOfBoundsException
 25679    35   377    48    35   640     0      59  (
 25680    35   377    49    35   640     0      60  )
 25681    35   377    50    35   640     0     102  ;
 25682    35   378     9    35   640     0      35  try
 25683    35   378    13    35   640     0      63  {
 25684    35   379    13    35   640     0      36  int
 25685    35   379    17    35   640     0     111  len
 25686    35   379    21    35   640     0      67  =
 25687    35   379    23    35   640     0     111  end
 25688    35   379    27    35   640     0      77  -
 25689    35   379    29    35   640     0     111  start
 25690    35   379    34    35   640     0     102  ;
 25691    35   380    13    35   640     0      40  char
 25692    35   380    17    35   640     0      61  [
 25693    35   380    18    35   640     0      62  ]
 25694    35   380    20    35   640     0     111  ca
 25695    35   380    23    35   640     0      67  =
 25696    35   380    29    35   640     0      40  char
 25697    35   380    33    35   640     0      61  [
 25698    35   380    34    35   640     0     111  len
 25699    35   380    37    35   640     0      62  ]
 25700    35   380    38    35   640     0     102  ;
 25701    35   381    13    35   640     0     111  CharBuffer
 25702    35   381    24    35   640     0     111  cb
 25703    35   381    27    35   640     0      67  =
 25704    35   381    29    35   640     0     111  CharBuffer.wrap
 25705    35   381    44    35   640     0      59  (
 25706    35   381    45    35   640     0     111  ca
 25707    35   381    47    35   640     0      60  )
 25708    35   381    48    35   640     0     102  ;
 25709    35   382    13    35   640     0     111  CharBuffer
 25710    35   382    24    35   640     0     111  db
 25711    35   382    27    35   640     0      67  =
 25712    35   382    29    35   640     0     111  this.duplicate
 25713    35   382    43    35   640     0      59  (
 25714    35   382    44    35   640     0      60  )
 25715    35   382    45    35   640     0     102  ;
 25716    35   383    13    35   640     1     111  db.position
 25717    35   383    24    35   640     1      59  (
 25718    35   383    25    35   640     1     111  start
 25719    35   383    30    35   640     1      60  )
 25720    35   383    31    35   640     1     102  ;
 25721    35   384    13    35   640     1     111  db.limit
 25722    35   384    21    35   640     1      59  (
 25723    35   384    22    35   640     1     111  end
 25724    35   384    25    35   640     1      60  )
 25725    35   384    26    35   640     1     102  ;
 25726    35   385    13    35   640     1     111  cb.put
 25727    35   385    19    35   640     1      59  (
 25728    35   385    20    35   640     1     111  db
 25729    35   385    22    35   640     1      60  )
 25730    35   385    23    35   640     1     102  ;
 25731    35   386    13    35   640     0      19  return
 25732    35   386    24    35   640     0     111  String
 25733    35   386    30    35   640     0      59  (
 25734    35   386    31    35   640     0     111  ca
 25735    35   386    33    35   640     0      60  )
 25736    35   386    34    35   640     0     102  ;
 25737    35   387     9    35   640     0      64  }
 25738    35   387    11    35   640     0      34  catch
 25739    35   387    17    35   640     0      59  (
 25740    35   387    18    35   640     0     111  StringIndexOutOfBoundsException
 25741    35   387    50    35   640     0     111  x
 25742    35   387    51    35   640     0      60  )
 25743    35   387    53    35   640     0      63  {
 25744    35   388    13    35   640     0      20  throw
 25745    35   388    23    35   640     0     111  IndexOutOfBoundsException
 25746    35   388    48    35   640     0      59  (
 25747    35   388    49    35   640     0      60  )
 25748    35   388    50    35   640     0     102  ;
 25749    35   389     9    35   640     0      64  }
 25750    35   390     5    35   640     0      64  }
 25751    35   390     5    35   640     0    1544  ENDMETHOD
 25752    35   390     5    35   641     0    1545  STARTMETHOD
 25753    35   395    12    35   641     0     111  CharSequence
 25754    35   395    25    35   641     0     111  subSequence
 25755    35   395    36    35   641     0      59  (
 25756    35   395    37    35   641     0      36  int
 25757    35   395    41    35   641     0     111  start
 25758    35   395    46    35   641     0      66  ,
 25759    35   395    48    35   641     0      36  int
 25760    35   395    52    35   641     0     111  end
 25761    35   395    55    35   641     0      60  )
 25762    35   395    57    35   641     0      63  {
 25763    35   396     9    35   641     1      36  int
 25764    35   396    13    35   641     1     111  pos
 25765    35   396    17    35   641     1      67  =
 25766    35   396    19    35   641     1     111  position
 25767    35   396    27    35   641     1      59  (
 25768    35   396    28    35   641     1      60  )
 25769    35   396    29    35   641     1     102  ;
 25770    35   397     9    35   641     1      36  int
 25771    35   397    13    35   641     1     111  lim
 25772    35   397    17    35   641     1      67  =
 25773    35   397    19    35   641     1     111  limit
 25774    35   397    24    35   641     1      59  (
 25775    35   397    25    35   641     1      60  )
 25776    35   397    26    35   641     1     102  ;
 25777    35   398     9    35   641     0     111  assert
 25778    35   398    16    35   641     0      59  (
 25779    35   398    17    35   641     0     111  pos
 25780    35   398    21    35   641     0      92  <=
 25781    35   398    24    35   641     0     111  lim
 25782    35   398    27    35   641     0      60  )
 25783    35   398    28    35   641     0     102  ;
 25784    35   399     9    35   641     0     111  pos
 25785    35   399    13    35   641     0      67  =
 25786    35   399    15    35   641     0      59  (
 25787    35   399    16    35   641     0     111  pos
 25788    35   399    20    35   641     0      92  <=
 25789    35   399    23    35   641     0     111  lim
 25790    35   399    27    35   641     0      58  ?
 25791    35   399    29    35   641     0     111  pos
 25792    35   399    33    35   641     0      65  :
 25793    35   399    35    35   641     0     111  lim
 25794    35   399    38    35   641     0      60  )
 25795    35   399    39    35   641     0     102  ;
 25796    35   400     9    35   641     0      36  int
 25797    35   400    13    35   641     0     111  len
 25798    35   400    17    35   641     0      67  =
 25799    35   400    19    35   641     0     111  lim
 25800    35   400    23    35   641     0      77  -
 25801    35   400    25    35   641     0     111  pos
 25802    35   400    28    35   641     0     102  ;
 25803    35   402     9    35   641     0      31  if
 25804    35   402    12    35   641     0      59  (
 25805    35   402    13    35   641     0      59  (
 25806    35   402    14    35   641     0     111  start
 25807    35   402    20    35   641     0      93  <
 25808    35   402    22    35   641     0     112  0
 25809    35   402    23    35   641     0      60  )
 25810    35   402    25    35   641     0      98  ||
 25811    35   402    28    35   641     0      59  (
 25812    35   402    29    35   641     0     111  end
 25813    35   402    33    35   641     0      89  >
 25814    35   402    35    35   641     0     111  len
 25815    35   402    38    35   641     0      60  )
 25816    35   402    40    35   641     0      98  ||
 25817    35   402    43    35   641     0      59  (
 25818    35   402    44    35   641     0     111  start
 25819    35   402    50    35   641     0      89  >
 25820    35   402    52    35   641     0     111  end
 25821    35   402    55    35   641     0      60  )
 25822    35   402    56    35   641     0      60  )
 25823    35   403    13    35   641     0      20  throw
 25824    35   403    23    35   641     0     111  IndexOutOfBoundsException
 25825    35   403    48    35   641     0      59  (
 25826    35   403    49    35   641     0      60  )
 25827    35   403    50    35   641     0     102  ;
 25828    35   404     9    35   641     0      36  int
 25829    35   404    13    35   641     0     111  sublen
 25830    35   404    20    35   641     0      67  =
 25831    35   404    22    35   641     0     111  end
 25832    35   404    26    35   641     0      77  -
 25833    35   404    28    35   641     0     111  start
 25834    35   404    33    35   641     0     102  ;
 25835    35   405     9    35   641     0      36  int
 25836    35   405    13    35   641     0     111  off
 25837    35   405    17    35   641     0      67  =
 25838    35   405    19    35   641     0      59  (
 25839    35   405    20    35   641     0     111  pos
 25840    35   405    24    35   641     0      74  +
 25841    35   405    26    35   641     0     111  start
 25842    35   405    31    35   641     0      60  )
 25843    35   405    33    35   641     0      90  <<
 25844    35   405    36    35   641     0     112  1
 25845    35   405    37    35   641     0     102  ;
 25846    35   406     9    35   641     0     111  assert
 25847    35   406    16    35   641     0      59  (
 25848    35   406    17    35   641     0     111  off
 25849    35   406    21    35   641     0      88  >=
 25850    35   406    24    35   641     0     112  0
 25851    35   406    25    35   641     0      60  )
 25852    35   406    26    35   641     0     102  ;
 25853    35   407     9    35   641     0      19  return
 25854    35   407    20    35   641     0     111  DirectCharBufferS
 25855    35   407    37    35   641     0      59  (
 25856    35   407    38    35   641     0      44  this
 25857    35   407    42    35   641     0      66  ,
 25858    35   407    44    35   641     0      77  -
 25859    35   407    45    35   641     0     112  1
 25860    35   407    46    35   641     0      66  ,
 25861    35   407    48    35   641     0     112  0
 25862    35   407    49    35   641     0      66  ,
 25863    35   407    51    35   641     0     111  sublen
 25864    35   407    57    35   641     0      66  ,
 25865    35   407    59    35   641     0     111  sublen
 25866    35   407    65    35   641     0      66  ,
 25867    35   407    67    35   641     0     111  off
 25868    35   407    70    35   641     0      60  )
 25869    35   407    71    35   641     0     102  ;
 25870    35   408     5    35   641     0      64  }
 25871    35   408     5    35   641     0    1546  ENDMETHOD
 25872    35   408     5    35   642     0    1547  STARTMETHOD
 25873    35   416    12    35   642     0     111  ByteOrder
 25874    35   416    22    35   642     0     111  order
 25875    35   416    27    35   642     0      59  (
 25876    35   416    28    35   642     0      60  )
 25877    35   416    30    35   642     0      63  {
 25878    35   418     9    35   642     0      19  return
 25879    35   418    16    35   642     0      59  (
 25880    35   418    17    35   642     0      59  (
 25881    35   418    18    35   642     0     111  ByteOrder.nativeOrder
 25882    35   418    39    35   642     0      59  (
 25883    35   418    40    35   642     0      60  )
 25884    35   418    42    35   642     0      68  ==
 25885    35   418    45    35   642     0     111  ByteOrder.BIG_ENDIAN
 25886    35   418    65    35   642     0      60  )
 25887    35   419    17    35   642     0      58  ?
 25888    35   419    19    35   642     0     111  ByteOrder.LITTLE_ENDIAN
 25889    35   419    43    35   642     0      65  :
 25890    35   419    45    35   642     0     111  ByteOrder.BIG_ENDIAN
 25891    35   419    65    35   642     0      60  )
 25892    35   419    66    35   642     0     102  ;
 25893    35   425     5    35   642     0      64  }
 25894    35   425     5    35   642     0    1548  ENDMETHOD
 25895    35   452     1    35    -1     0      64  }
 25896    35   452     1    35    -1     1    1549  ENDCLASS
 25897    35   452     1    -1    -1     1    1550  ENDFILE C:\Users\RA\javasrc\java\nio\DirectCharBufferS.java
 25898    36     1     1    -1    -1     1    1551  STARTFILE C:\Users\RA\javasrc\java\nio\DirectCharBufferU.java
 25899    36    28     9    -1    -1     0     111  java.nio
 25900    36    28    17    -1    -1     0     102  ;
 25901    36    30     1    -1    -1     1      49  import
 25902    36    30     8    -1    -1     1     111  sun.misc.Cleaner
 25903    36    30    24    -1    -1     1     102  ;
 25904    36    31     1    -1    -1     1      49  import
 25905    36    31     8    -1    -1     1     111  sun.misc.Unsafe
 25906    36    31    23    -1    -1     1     102  ;
 25907    36    32     1    -1    -1     1      49  import
 25908    36    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 25909    36    32    31    -1    -1     1     102  ;
 25910    36    33     1    -1    -1     1      49  import
 25911    36    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 25912    36    33    34    -1    -1     1     102  ;
 25913    36    36     1    36    -1     0    1552  STARTCLASS
 25914    36    36     1    36    -1     0      24  class
 25915    36    36     7    36    -1     0     111  DirectCharBufferU
 25916    36    38     5    36    -1     0      38  extends
 25917    36    38    13    36    -1     0     111  CharBuffer
 25918    36    42     5    36    -1     0      17  implements
 25919    36    42    16    36    -1     0     111  DirectBuffer
 25920    36    43     1    36    -1     0      63  {
 25921    36    48     5    36    -1     0      23  protected
 25922    36    48    15    36    -1     0      45  static
 25923    36    48    28    36    -1     0     111  Unsafe
 25924    36    48    35    36    -1     0     111  unsafe
 25925    36    48    42    36    -1     0      67  =
 25926    36    48    44    36    -1     0     111  Bits.unsafe
 25927    36    48    55    36    -1     0      59  (
 25928    36    48    56    36    -1     0      60  )
 25929    36    48    57    36    -1     0     102  ;
 25930    36    51     5    36    -1     0      23  protected
 25931    36    51    15    36    -1     0      45  static
 25932    36    51    28    36    -1     0      39  boolean
 25933    36    51    36    36    -1     0     111  unaligned
 25934    36    51    46    36    -1     0      67  =
 25935    36    51    48    36    -1     0     111  Bits.unaligned
 25936    36    51    62    36    -1     0      59  (
 25937    36    51    63    36    -1     0      60  )
 25938    36    51    64    36    -1     0     102  ;
 25939    36    59     5    36    -1     0      23  protected
 25940    36    59    15    36    -1     0     111  Object
 25941    36    59    22    36    -1     0     111  viewedBuffer
 25942    36    59    35    36    -1     0      67  =
 25943    36    59    37    36    -1     0      21  null
 25944    36    59    41    36    -1     0     102  ;
 25945    36    59    41    36   643     0    1553  STARTMETHOD
 25946    36    61    12    36   643     0     111  Object
 25947    36    61    19    36   643     0     111  viewedBuffer
 25948    36    61    31    36   643     0      59  (
 25949    36    61    32    36   643     0      60  )
 25950    36    61    34    36   643     0      63  {
 25951    36    62     9    36   643     0      19  return
 25952    36    62    16    36   643     0     111  viewedBuffer
 25953    36    62    28    36   643     0     102  ;
 25954    36    63     5    36   643     0      64  }
 25955    36    63     5    36   643     0    1554  ENDMETHOD
 25956    36    63     5    36   644     0    1555  STARTMETHOD
 25957    36   100    12    36   644     0     111  Cleaner
 25958    36   100    20    36   644     0     111  cleaner
 25959    36   100    27    36   644     0      59  (
 25960    36   100    28    36   644     0      60  )
 25961    36   100    30    36   644     0      63  {
 25962    36   100    32    36   644     0      19  return
 25963    36   100    39    36   644     0      21  null
 25964    36   100    43    36   644     0     102  ;
 25965    36   100    45    36   644     0      64  }
 25966    36   100    45    36   644     0    1556  ENDMETHOD
 25967    36   100    45    36   645     0    1557  STARTMETHOD
 25968    36   164     5    36   645     0     111  DirectCharBufferU
 25969    36   164    22    36   645     0      59  (
 25970    36   164    23    36   645     0     111  DirectBuffer
 25971    36   164    36    36   645     0     111  db
 25972    36   164    38    36   645     0      66  ,
 25973    36   165    32    36   645     0      36  int
 25974    36   165    36    36   645     0     111  mark
 25975    36   165    40    36   645     0      66  ,
 25976    36   165    42    36   645     0      36  int
 25977    36   165    46    36   645     0     111  pos
 25978    36   165    49    36   645     0      66  ,
 25979    36   165    51    36   645     0      36  int
 25980    36   165    55    36   645     0     111  lim
 25981    36   165    58    36   645     0      66  ,
 25982    36   165    60    36   645     0      36  int
 25983    36   165    64    36   645     0     111  cap
 25984    36   165    67    36   645     0      66  ,
 25985    36   166    32    36   645     0      36  int
 25986    36   166    36    36   645     0     111  off
 25987    36   166    39    36   645     0      60  )
 25988    36   167     5    36   645     0      63  {
 25989    36   169     9    36   645     0      27  super
 25990    36   169    14    36   645     0      59  (
 25991    36   169    15    36   645     0     111  mark
 25992    36   169    19    36   645     0      66  ,
 25993    36   169    21    36   645     0     111  pos
 25994    36   169    24    36   645     0      66  ,
 25995    36   169    26    36   645     0     111  lim
 25996    36   169    29    36   645     0      66  ,
 25997    36   169    31    36   645     0     111  cap
 25998    36   169    34    36   645     0      60  )
 25999    36   169    35    36   645     0     102  ;
 26000    36   170     9    36   645     0     111  address
 26001    36   170    17    36   645     0      67  =
 26002    36   170    19    36   645     0     111  db.address
 26003    36   170    29    36   645     0      59  (
 26004    36   170    30    36   645     0      60  )
 26005    36   170    32    36   645     0      74  +
 26006    36   170    34    36   645     0     111  off
 26007    36   170    37    36   645     0     102  ;
 26008    36   171     9    36   645     0     111  viewedBuffer
 26009    36   171    22    36   645     0      67  =
 26010    36   171    24    36   645     0     111  db
 26011    36   171    26    36   645     0     102  ;
 26012    36   178     5    36   645     0      64  }
 26013    36   178     5    36   645     0    1558  ENDMETHOD
 26014    36   178     5    36   646     0    1559  STARTMETHOD
 26015    36   180    12    36   646     0     111  CharBuffer
 26016    36   180    23    36   646     0     111  slice
 26017    36   180    28    36   646     0      59  (
 26018    36   180    29    36   646     0      60  )
 26019    36   180    31    36   646     0      63  {
 26020    36   181     9    36   646     1      36  int
 26021    36   181    13    36   646     1     111  pos
 26022    36   181    17    36   646     1      67  =
 26023    36   181    19    36   646     1     111  this.position
 26024    36   181    32    36   646     1      59  (
 26025    36   181    33    36   646     1      60  )
 26026    36   181    34    36   646     1     102  ;
 26027    36   182     9    36   646     1      36  int
 26028    36   182    13    36   646     1     111  lim
 26029    36   182    17    36   646     1      67  =
 26030    36   182    19    36   646     1     111  this.limit
 26031    36   182    29    36   646     1      59  (
 26032    36   182    30    36   646     1      60  )
 26033    36   182    31    36   646     1     102  ;
 26034    36   183     9    36   646     0     111  assert
 26035    36   183    16    36   646     0      59  (
 26036    36   183    17    36   646     0     111  pos
 26037    36   183    21    36   646     0      92  <=
 26038    36   183    24    36   646     0     111  lim
 26039    36   183    27    36   646     0      60  )
 26040    36   183    28    36   646     0     102  ;
 26041    36   184     9    36   646     0      36  int
 26042    36   184    13    36   646     0     111  rem
 26043    36   184    17    36   646     0      67  =
 26044    36   184    19    36   646     0      59  (
 26045    36   184    20    36   646     0     111  pos
 26046    36   184    24    36   646     0      92  <=
 26047    36   184    27    36   646     0     111  lim
 26048    36   184    31    36   646     0      58  ?
 26049    36   184    33    36   646     0     111  lim
 26050    36   184    37    36   646     0      77  -
 26051    36   184    39    36   646     0     111  pos
 26052    36   184    43    36   646     0      65  :
 26053    36   184    45    36   646     0     112  0
 26054    36   184    46    36   646     0      60  )
 26055    36   184    47    36   646     0     102  ;
 26056    36   185     9    36   646     0      36  int
 26057    36   185    13    36   646     0     111  off
 26058    36   185    17    36   646     0      67  =
 26059    36   185    19    36   646     0      59  (
 26060    36   185    20    36   646     0     111  pos
 26061    36   185    24    36   646     0      90  <<
 26062    36   185    27    36   646     0     112  1
 26063    36   185    28    36   646     0      60  )
 26064    36   185    29    36   646     0     102  ;
 26065    36   186     9    36   646     0     111  assert
 26066    36   186    16    36   646     0      59  (
 26067    36   186    17    36   646     0     111  off
 26068    36   186    21    36   646     0      88  >=
 26069    36   186    24    36   646     0     112  0
 26070    36   186    25    36   646     0      60  )
 26071    36   186    26    36   646     0     102  ;
 26072    36   187     9    36   646     0      19  return
 26073    36   187    20    36   646     0     111  DirectCharBufferU
 26074    36   187    37    36   646     0      59  (
 26075    36   187    38    36   646     0      44  this
 26076    36   187    42    36   646     0      66  ,
 26077    36   187    44    36   646     0      77  -
 26078    36   187    45    36   646     0     112  1
 26079    36   187    46    36   646     0      66  ,
 26080    36   187    48    36   646     0     112  0
 26081    36   187    49    36   646     0      66  ,
 26082    36   187    51    36   646     0     111  rem
 26083    36   187    54    36   646     0      66  ,
 26084    36   187    56    36   646     0     111  rem
 26085    36   187    59    36   646     0      66  ,
 26086    36   187    61    36   646     0     111  off
 26087    36   187    64    36   646     0      60  )
 26088    36   187    65    36   646     0     102  ;
 26089    36   188     5    36   646     0      64  }
 26090    36   188     5    36   646     0    1560  ENDMETHOD
 26091    36   188     5    36   647     0    1561  STARTMETHOD
 26092    36   190    12    36   647     0     111  CharBuffer
 26093    36   190    23    36   647     0     111  duplicate
 26094    36   190    32    36   647     0      59  (
 26095    36   190    33    36   647     0      60  )
 26096    36   190    35    36   647     0      63  {
 26097    36   191     9    36   647     0      19  return
 26098    36   191    20    36   647     0     111  DirectCharBufferU
 26099    36   191    37    36   647     0      59  (
 26100    36   191    38    36   647     0      44  this
 26101    36   191    42    36   647     0      66  ,
 26102    36   192    47    36   647     1     111  this.markValue
 26103    36   192    61    36   647     1      59  (
 26104    36   192    62    36   647     1      60  )
 26105    36   192    63    36   647     1      66  ,
 26106    36   193    47    36   647     1     111  this.position
 26107    36   193    60    36   647     1      59  (
 26108    36   193    61    36   647     1      60  )
 26109    36   193    62    36   647     1      66  ,
 26110    36   194    47    36   647     1     111  this.limit
 26111    36   194    57    36   647     1      59  (
 26112    36   194    58    36   647     1      60  )
 26113    36   194    59    36   647     1      66  ,
 26114    36   195    47    36   647     1     111  this.capacity
 26115    36   195    60    36   647     1      59  (
 26116    36   195    61    36   647     1      60  )
 26117    36   195    62    36   647     1      66  ,
 26118    36   196    47    36   647     0     112  0
 26119    36   196    48    36   647     0      60  )
 26120    36   196    49    36   647     0     102  ;
 26121    36   197     5    36   647     0      64  }
 26122    36   197     5    36   647     0    1562  ENDMETHOD
 26123    36   197     5    36   648     0    1563  STARTMETHOD
 26124    36   199    12    36   648     0     111  CharBuffer
 26125    36   199    23    36   648     0     111  asReadOnlyBuffer
 26126    36   199    39    36   648     0      59  (
 26127    36   199    40    36   648     0      60  )
 26128    36   199    42    36   648     0      63  {
 26129    36   201     9    36   648     0      19  return
 26130    36   201    20    36   648     0     111  DirectCharBufferRU
 26131    36   201    38    36   648     0      59  (
 26132    36   201    39    36   648     0      44  this
 26133    36   201    43    36   648     0      66  ,
 26134    36   202    44    36   648     1     111  this.markValue
 26135    36   202    58    36   648     1      59  (
 26136    36   202    59    36   648     1      60  )
 26137    36   202    60    36   648     1      66  ,
 26138    36   203    44    36   648     1     111  this.position
 26139    36   203    57    36   648     1      59  (
 26140    36   203    58    36   648     1      60  )
 26141    36   203    59    36   648     1      66  ,
 26142    36   204    44    36   648     1     111  this.limit
 26143    36   204    54    36   648     1      59  (
 26144    36   204    55    36   648     1      60  )
 26145    36   204    56    36   648     1      66  ,
 26146    36   205    44    36   648     1     111  this.capacity
 26147    36   205    57    36   648     1      59  (
 26148    36   205    58    36   648     1      60  )
 26149    36   205    59    36   648     1      66  ,
 26150    36   206    44    36   648     0     112  0
 26151    36   206    45    36   648     0      60  )
 26152    36   206    46    36   648     0     102  ;
 26153    36   210     5    36   648     0      64  }
 26154    36   210     5    36   648     0    1564  ENDMETHOD
 26155    36   210     5    36   649     0    1565  STARTMETHOD
 26156    36   214    12    36   649     0      53  long
 26157    36   214    17    36   649     0     111  address
 26158    36   214    24    36   649     0      59  (
 26159    36   214    25    36   649     0      60  )
 26160    36   214    27    36   649     0      63  {
 26161    36   215     9    36   649     0      19  return
 26162    36   215    16    36   649     0     111  address
 26163    36   215    23    36   649     0     102  ;
 26164    36   216     5    36   649     0      64  }
 26165    36   216     5    36   649     0    1566  ENDMETHOD
 26166    36   216     5    36   650     0    1567  STARTMETHOD
 26167    36   218     5    36   650     0      41  private
 26168    36   218    13    36   650     0      53  long
 26169    36   218    18    36   650     0     111  ix
 26170    36   218    20    36   650     0      59  (
 26171    36   218    21    36   650     0      36  int
 26172    36   218    25    36   650     0     111  i
 26173    36   218    26    36   650     0      60  )
 26174    36   218    28    36   650     0      63  {
 26175    36   219     9    36   650     0      19  return
 26176    36   219    16    36   650     0     111  address
 26177    36   219    24    36   650     0      74  +
 26178    36   219    26    36   650     0      59  (
 26179    36   219    27    36   650     0     111  i
 26180    36   219    29    36   650     0      90  <<
 26181    36   219    32    36   650     0     112  1
 26182    36   219    33    36   650     0      60  )
 26183    36   219    34    36   650     0     102  ;
 26184    36   220     5    36   650     0      64  }
 26185    36   220     5    36   650     0    1568  ENDMETHOD
 26186    36   220     5    36   651     0    1569  STARTMETHOD
 26187    36   222    12    36   651     0      40  char
 26188    36   222    17    36   651     0     111  get
 26189    36   222    20    36   651     0      59  (
 26190    36   222    21    36   651     0      60  )
 26191    36   222    23    36   651     0      63  {
 26192    36   223     9    36   651     0      19  return
 26193    36   223    16    36   651     0      59  (
 26194    36   223    17    36   651     0      59  (
 26195    36   223    18    36   651     0     111  unsafe.getChar
 26196    36   223    32    36   651     0      59  (
 26197    36   223    33    36   651     0     111  ix
 26198    36   223    35    36   651     0      59  (
 26199    36   223    36    36   651     0     111  nextGetIndex
 26200    36   223    48    36   651     0      59  (
 26201    36   223    49    36   651     0      60  )
 26202    36   223    50    36   651     0      60  )
 26203    36   223    51    36   651     0      60  )
 26204    36   223    52    36   651     0      60  )
 26205    36   223    53    36   651     0      60  )
 26206    36   223    54    36   651     0     102  ;
 26207    36   224     5    36   651     0      64  }
 26208    36   224     5    36   651     0    1570  ENDMETHOD
 26209    36   224     5    36   652     0    1571  STARTMETHOD
 26210    36   226    12    36   652     0      40  char
 26211    36   226    17    36   652     0     111  get
 26212    36   226    20    36   652     0      59  (
 26213    36   226    21    36   652     0      36  int
 26214    36   226    25    36   652     0     111  i
 26215    36   226    26    36   652     0      60  )
 26216    36   226    28    36   652     0      63  {
 26217    36   227     9    36   652     0      19  return
 26218    36   227    16    36   652     0      59  (
 26219    36   227    17    36   652     0      59  (
 26220    36   227    18    36   652     0     111  unsafe.getChar
 26221    36   227    32    36   652     0      59  (
 26222    36   227    33    36   652     0     111  ix
 26223    36   227    35    36   652     0      59  (
 26224    36   227    36    36   652     0     111  checkIndex
 26225    36   227    46    36   652     0      59  (
 26226    36   227    47    36   652     0     111  i
 26227    36   227    48    36   652     0      60  )
 26228    36   227    49    36   652     0      60  )
 26229    36   227    50    36   652     0      60  )
 26230    36   227    51    36   652     0      60  )
 26231    36   227    52    36   652     0      60  )
 26232    36   227    53    36   652     0     102  ;
 26233    36   228     5    36   652     0      64  }
 26234    36   228     5    36   652     0    1572  ENDMETHOD
 26235    36   228     5    36   653     0    1573  STARTMETHOD
 26236    36   230    12    36   653     0     111  CharBuffer
 26237    36   230    23    36   653     0     111  get
 26238    36   230    26    36   653     0      59  (
 26239    36   230    27    36   653     0      40  char
 26240    36   230    31    36   653     0      61  [
 26241    36   230    32    36   653     0      62  ]
 26242    36   230    34    36   653     0     111  dst
 26243    36   230    37    36   653     0      66  ,
 26244    36   230    39    36   653     0      36  int
 26245    36   230    43    36   653     0     111  offset
 26246    36   230    49    36   653     0      66  ,
 26247    36   230    51    36   653     0      36  int
 26248    36   230    55    36   653     0     111  length
 26249    36   230    61    36   653     0      60  )
 26250    36   230    63    36   653     0      63  {
 26251    36   232     9    36   653     0      31  if
 26252    36   232    12    36   653     0      59  (
 26253    36   232    13    36   653     0      59  (
 26254    36   232    14    36   653     0     111  length
 26255    36   232    21    36   653     0      90  <<
 26256    36   232    24    36   653     0     112  1
 26257    36   232    25    36   653     0      60  )
 26258    36   232    27    36   653     0      89  >
 26259    36   232    29    36   653     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 26260    36   232    61    36   653     0      60  )
 26261    36   232    63    36   653     0      63  {
 26262    36   233    13    36   653     0     111  checkBounds
 26263    36   233    24    36   653     0      59  (
 26264    36   233    25    36   653     0     111  offset
 26265    36   233    31    36   653     0      66  ,
 26266    36   233    33    36   653     0     111  length
 26267    36   233    39    36   653     0      66  ,
 26268    36   233    41    36   653     0     111  dst.length
 26269    36   233    51    36   653     0      60  )
 26270    36   233    52    36   653     0     102  ;
 26271    36   234    13    36   653     1      36  int
 26272    36   234    17    36   653     1     111  pos
 26273    36   234    21    36   653     1      67  =
 26274    36   234    23    36   653     1     111  position
 26275    36   234    31    36   653     1      59  (
 26276    36   234    32    36   653     1      60  )
 26277    36   234    33    36   653     1     102  ;
 26278    36   235    13    36   653     1      36  int
 26279    36   235    17    36   653     1     111  lim
 26280    36   235    21    36   653     1      67  =
 26281    36   235    23    36   653     1     111  limit
 26282    36   235    28    36   653     1      59  (
 26283    36   235    29    36   653     1      60  )
 26284    36   235    30    36   653     1     102  ;
 26285    36   236    13    36   653     0     111  assert
 26286    36   236    20    36   653     0      59  (
 26287    36   236    21    36   653     0     111  pos
 26288    36   236    25    36   653     0      92  <=
 26289    36   236    28    36   653     0     111  lim
 26290    36   236    31    36   653     0      60  )
 26291    36   236    32    36   653     0     102  ;
 26292    36   237    13    36   653     0      36  int
 26293    36   237    17    36   653     0     111  rem
 26294    36   237    21    36   653     0      67  =
 26295    36   237    23    36   653     0      59  (
 26296    36   237    24    36   653     0     111  pos
 26297    36   237    28    36   653     0      92  <=
 26298    36   237    31    36   653     0     111  lim
 26299    36   237    35    36   653     0      58  ?
 26300    36   237    37    36   653     0     111  lim
 26301    36   237    41    36   653     0      77  -
 26302    36   237    43    36   653     0     111  pos
 26303    36   237    47    36   653     0      65  :
 26304    36   237    49    36   653     0     112  0
 26305    36   237    50    36   653     0      60  )
 26306    36   237    51    36   653     0     102  ;
 26307    36   238    13    36   653     0      31  if
 26308    36   238    16    36   653     0      59  (
 26309    36   238    17    36   653     0     111  length
 26310    36   238    24    36   653     0      89  >
 26311    36   238    26    36   653     0     111  rem
 26312    36   238    29    36   653     0      60  )
 26313    36   239    17    36   653     0      20  throw
 26314    36   239    27    36   653     0     111  BufferUnderflowException
 26315    36   239    51    36   653     0      59  (
 26316    36   239    52    36   653     0      60  )
 26317    36   239    53    36   653     0     102  ;
 26318    36   241    13    36   653     0      31  if
 26319    36   241    16    36   653     0      59  (
 26320    36   241    17    36   653     0     111  order
 26321    36   241    22    36   653     0      59  (
 26322    36   241    23    36   653     0      60  )
 26323    36   241    25    36   653     0      71  !=
 26324    36   241    28    36   653     0     111  ByteOrder.nativeOrder
 26325    36   241    49    36   653     0      59  (
 26326    36   241    50    36   653     0      60  )
 26327    36   241    51    36   653     0      60  )
 26328    36   242    17    36   653     0     111  Bits.copyToCharArray
 26329    36   242    37    36   653     0      59  (
 26330    36   242    38    36   653     0     111  ix
 26331    36   242    40    36   653     0      59  (
 26332    36   242    41    36   653     0     111  pos
 26333    36   242    44    36   653     0      60  )
 26334    36   242    45    36   653     0      66  ,
 26335    36   242    47    36   653     0     111  dst
 26336    36   242    50    36   653     0      66  ,
 26337    36   243    43    36   653     0     111  offset
 26338    36   243    50    36   653     0      90  <<
 26339    36   243    53    36   653     0     112  1
 26340    36   243    54    36   653     0      66  ,
 26341    36   244    43    36   653     0     111  length
 26342    36   244    50    36   653     0      90  <<
 26343    36   244    53    36   653     0     112  1
 26344    36   244    54    36   653     0      60  )
 26345    36   244    55    36   653     0     102  ;
 26346    36   245    13    36   653     0      48  else
 26347    36   246    17    36   653     0     111  Bits.copyToByteArray
 26348    36   246    37    36   653     0      59  (
 26349    36   246    38    36   653     0     111  ix
 26350    36   246    40    36   653     0      59  (
 26351    36   246    41    36   653     0     111  pos
 26352    36   246    44    36   653     0      60  )
 26353    36   246    45    36   653     0      66  ,
 26354    36   246    47    36   653     0     111  dst
 26355    36   246    50    36   653     0      66  ,
 26356    36   247    38    36   653     0     111  offset
 26357    36   247    45    36   653     0      90  <<
 26358    36   247    48    36   653     0     112  1
 26359    36   247    49    36   653     0      66  ,
 26360    36   248    38    36   653     0     111  length
 26361    36   248    45    36   653     0      90  <<
 26362    36   248    48    36   653     0     112  1
 26363    36   248    49    36   653     0      60  )
 26364    36   248    50    36   653     0     102  ;
 26365    36   249    13    36   653     0     111  position
 26366    36   249    21    36   653     0      59  (
 26367    36   249    22    36   653     0     111  pos
 26368    36   249    26    36   653     0      74  +
 26369    36   249    28    36   653     0     111  length
 26370    36   249    34    36   653     0      60  )
 26371    36   249    35    36   653     0     102  ;
 26372    36   250     9    36   653     0      64  }
 26373    36   250    11    36   653     0      48  else
 26374    36   250    16    36   653     0      63  {
 26375    36   251    13    36   653     0     111  super.get
 26376    36   251    22    36   653     0      59  (
 26377    36   251    23    36   653     0     111  dst
 26378    36   251    26    36   653     0      66  ,
 26379    36   251    28    36   653     0     111  offset
 26380    36   251    34    36   653     0      66  ,
 26381    36   251    36    36   653     0     111  length
 26382    36   251    42    36   653     0      60  )
 26383    36   251    43    36   653     0     102  ;
 26384    36   252     9    36   653     0      64  }
 26385    36   253     9    36   653     0      19  return
 26386    36   253    16    36   653     0      44  this
 26387    36   253    20    36   653     0     102  ;
 26388    36   257     5    36   653     0      64  }
 26389    36   257     5    36   653     0    1574  ENDMETHOD
 26390    36   257     5    36   654     0    1575  STARTMETHOD
 26391    36   261    12    36   654     0     111  CharBuffer
 26392    36   261    23    36   654     0     111  put
 26393    36   261    26    36   654     0      59  (
 26394    36   261    27    36   654     0      40  char
 26395    36   261    32    36   654     0     111  x
 26396    36   261    33    36   654     0      60  )
 26397    36   261    35    36   654     0      63  {
 26398    36   263     9    36   654     0     111  unsafe.putChar
 26399    36   263    23    36   654     0      59  (
 26400    36   263    24    36   654     0     111  ix
 26401    36   263    26    36   654     0      59  (
 26402    36   263    27    36   654     0     111  nextPutIndex
 26403    36   263    39    36   654     0      59  (
 26404    36   263    40    36   654     0      60  )
 26405    36   263    41    36   654     0      60  )
 26406    36   263    42    36   654     0      66  ,
 26407    36   263    44    36   654     0      59  (
 26408    36   263    45    36   654     0      59  (
 26409    36   263    46    36   654     0     111  x
 26410    36   263    47    36   654     0      60  )
 26411    36   263    48    36   654     0      60  )
 26412    36   263    49    36   654     0      60  )
 26413    36   263    50    36   654     0     102  ;
 26414    36   264     9    36   654     0      19  return
 26415    36   264    16    36   654     0      44  this
 26416    36   264    20    36   654     0     102  ;
 26417    36   268     5    36   654     0      64  }
 26418    36   268     5    36   654     0    1576  ENDMETHOD
 26419    36   268     5    36   655     0    1577  STARTMETHOD
 26420    36   270    12    36   655     0     111  CharBuffer
 26421    36   270    23    36   655     0     111  put
 26422    36   270    26    36   655     0      59  (
 26423    36   270    27    36   655     0      36  int
 26424    36   270    31    36   655     0     111  i
 26425    36   270    32    36   655     0      66  ,
 26426    36   270    34    36   655     0      40  char
 26427    36   270    39    36   655     0     111  x
 26428    36   270    40    36   655     0      60  )
 26429    36   270    42    36   655     0      63  {
 26430    36   272     9    36   655     0     111  unsafe.putChar
 26431    36   272    23    36   655     0      59  (
 26432    36   272    24    36   655     0     111  ix
 26433    36   272    26    36   655     0      59  (
 26434    36   272    27    36   655     0     111  checkIndex
 26435    36   272    37    36   655     0      59  (
 26436    36   272    38    36   655     0     111  i
 26437    36   272    39    36   655     0      60  )
 26438    36   272    40    36   655     0      60  )
 26439    36   272    41    36   655     0      66  ,
 26440    36   272    43    36   655     0      59  (
 26441    36   272    44    36   655     0      59  (
 26442    36   272    45    36   655     0     111  x
 26443    36   272    46    36   655     0      60  )
 26444    36   272    47    36   655     0      60  )
 26445    36   272    48    36   655     0      60  )
 26446    36   272    49    36   655     0     102  ;
 26447    36   273     9    36   655     0      19  return
 26448    36   273    16    36   655     0      44  this
 26449    36   273    20    36   655     0     102  ;
 26450    36   277     5    36   655     0      64  }
 26451    36   277     5    36   655     0    1578  ENDMETHOD
 26452    36   277     5    36   656     0    1579  STARTMETHOD
 26453    36   279    12    36   656     0     111  CharBuffer
 26454    36   279    23    36   656     0     111  put
 26455    36   279    26    36   656     0      59  (
 26456    36   279    27    36   656     0     111  CharBuffer
 26457    36   279    38    36   656     0     111  src
 26458    36   279    41    36   656     0      60  )
 26459    36   279    43    36   656     0      63  {
 26460    36   281     9    36   656     0      31  if
 26461    36   281    12    36   656     0      59  (
 26462    36   281    13    36   656     0     111  src
 26463    36   281    28    36   656     0     111  DirectCharBufferU
 26464    36   281    45    36   656     0      60  )
 26465    36   281    47    36   656     0      63  {
 26466    36   282    13    36   656     0      31  if
 26467    36   282    16    36   656     0      59  (
 26468    36   282    17    36   656     0     111  src
 26469    36   282    21    36   656     0      68  ==
 26470    36   282    24    36   656     0      44  this
 26471    36   282    28    36   656     0      60  )
 26472    36   283    17    36   656     0      20  throw
 26473    36   283    27    36   656     0     111  IllegalArgumentException
 26474    36   283    51    36   656     0      59  (
 26475    36   283    52    36   656     0      60  )
 26476    36   283    53    36   656     0     102  ;
 26477    36   284    13    36   656     0     111  DirectCharBufferU
 26478    36   284    31    36   656     0     111  sb
 26479    36   284    34    36   656     0      67  =
 26480    36   284    36    36   656     0      59  (
 26481    36   284    37    36   656     0     111  DirectCharBufferU
 26482    36   284    54    36   656     0      60  )
 26483    36   284    55    36   656     0     111  src
 26484    36   284    58    36   656     0     102  ;
 26485    36   286    13    36   656     1      36  int
 26486    36   286    17    36   656     1     111  spos
 26487    36   286    22    36   656     1      67  =
 26488    36   286    24    36   656     1     111  sb.position
 26489    36   286    35    36   656     1      59  (
 26490    36   286    36    36   656     1      60  )
 26491    36   286    37    36   656     1     102  ;
 26492    36   287    13    36   656     1      36  int
 26493    36   287    17    36   656     1     111  slim
 26494    36   287    22    36   656     1      67  =
 26495    36   287    24    36   656     1     111  sb.limit
 26496    36   287    32    36   656     1      59  (
 26497    36   287    33    36   656     1      60  )
 26498    36   287    34    36   656     1     102  ;
 26499    36   288    13    36   656     0     111  assert
 26500    36   288    20    36   656     0      59  (
 26501    36   288    21    36   656     0     111  spos
 26502    36   288    26    36   656     0      92  <=
 26503    36   288    29    36   656     0     111  slim
 26504    36   288    33    36   656     0      60  )
 26505    36   288    34    36   656     0     102  ;
 26506    36   289    13    36   656     0      36  int
 26507    36   289    17    36   656     0     111  srem
 26508    36   289    22    36   656     0      67  =
 26509    36   289    24    36   656     0      59  (
 26510    36   289    25    36   656     0     111  spos
 26511    36   289    30    36   656     0      92  <=
 26512    36   289    33    36   656     0     111  slim
 26513    36   289    38    36   656     0      58  ?
 26514    36   289    40    36   656     0     111  slim
 26515    36   289    45    36   656     0      77  -
 26516    36   289    47    36   656     0     111  spos
 26517    36   289    52    36   656     0      65  :
 26518    36   289    54    36   656     0     112  0
 26519    36   289    55    36   656     0      60  )
 26520    36   289    56    36   656     0     102  ;
 26521    36   291    13    36   656     1      36  int
 26522    36   291    17    36   656     1     111  pos
 26523    36   291    21    36   656     1      67  =
 26524    36   291    23    36   656     1     111  position
 26525    36   291    31    36   656     1      59  (
 26526    36   291    32    36   656     1      60  )
 26527    36   291    33    36   656     1     102  ;
 26528    36   292    13    36   656     1      36  int
 26529    36   292    17    36   656     1     111  lim
 26530    36   292    21    36   656     1      67  =
 26531    36   292    23    36   656     1     111  limit
 26532    36   292    28    36   656     1      59  (
 26533    36   292    29    36   656     1      60  )
 26534    36   292    30    36   656     1     102  ;
 26535    36   293    13    36   656     0     111  assert
 26536    36   293    20    36   656     0      59  (
 26537    36   293    21    36   656     0     111  pos
 26538    36   293    25    36   656     0      92  <=
 26539    36   293    28    36   656     0     111  lim
 26540    36   293    31    36   656     0      60  )
 26541    36   293    32    36   656     0     102  ;
 26542    36   294    13    36   656     0      36  int
 26543    36   294    17    36   656     0     111  rem
 26544    36   294    21    36   656     0      67  =
 26545    36   294    23    36   656     0      59  (
 26546    36   294    24    36   656     0     111  pos
 26547    36   294    28    36   656     0      92  <=
 26548    36   294    31    36   656     0     111  lim
 26549    36   294    35    36   656     0      58  ?
 26550    36   294    37    36   656     0     111  lim
 26551    36   294    41    36   656     0      77  -
 26552    36   294    43    36   656     0     111  pos
 26553    36   294    47    36   656     0      65  :
 26554    36   294    49    36   656     0     112  0
 26555    36   294    50    36   656     0      60  )
 26556    36   294    51    36   656     0     102  ;
 26557    36   296    13    36   656     0      31  if
 26558    36   296    16    36   656     0      59  (
 26559    36   296    17    36   656     0     111  srem
 26560    36   296    22    36   656     0      89  >
 26561    36   296    24    36   656     0     111  rem
 26562    36   296    27    36   656     0      60  )
 26563    36   297    17    36   656     0      20  throw
 26564    36   297    27    36   656     0     111  BufferOverflowException
 26565    36   297    50    36   656     0      59  (
 26566    36   297    51    36   656     0      60  )
 26567    36   297    52    36   656     0     102  ;
 26568    36   298    13    36   656     0     111  unsafe.copyMemory
 26569    36   298    30    36   656     0      59  (
 26570    36   298    31    36   656     0     111  sb.ix
 26571    36   298    36    36   656     0      59  (
 26572    36   298    37    36   656     0     111  spos
 26573    36   298    41    36   656     0      60  )
 26574    36   298    42    36   656     0      66  ,
 26575    36   298    44    36   656     0     111  ix
 26576    36   298    46    36   656     0      59  (
 26577    36   298    47    36   656     0     111  pos
 26578    36   298    50    36   656     0      60  )
 26579    36   298    51    36   656     0      66  ,
 26580    36   298    53    36   656     0     111  srem
 26581    36   298    58    36   656     0      90  <<
 26582    36   298    61    36   656     0     112  1
 26583    36   298    62    36   656     0      60  )
 26584    36   298    63    36   656     0     102  ;
 26585    36   299    13    36   656     1     111  sb.position
 26586    36   299    24    36   656     1      59  (
 26587    36   299    25    36   656     1     111  spos
 26588    36   299    30    36   656     1      74  +
 26589    36   299    32    36   656     1     111  srem
 26590    36   299    36    36   656     1      60  )
 26591    36   299    37    36   656     1     102  ;
 26592    36   300    13    36   656     1     111  position
 26593    36   300    21    36   656     1      59  (
 26594    36   300    22    36   656     1     111  pos
 26595    36   300    26    36   656     1      74  +
 26596    36   300    28    36   656     1     111  srem
 26597    36   300    32    36   656     1      60  )
 26598    36   300    33    36   656     1     102  ;
 26599    36   301     9    36   656     0      64  }
 26600    36   301    11    36   656     0      48  else
 26601    36   301    16    36   656     0      31  if
 26602    36   301    19    36   656     0      59  (
 26603    36   301    20    36   656     0     111  src.hb
 26604    36   301    27    36   656     0      71  !=
 26605    36   301    30    36   656     0      21  null
 26606    36   301    34    36   656     0      60  )
 26607    36   301    36    36   656     0      63  {
 26608    36   303    13    36   656     1      36  int
 26609    36   303    17    36   656     1     111  spos
 26610    36   303    22    36   656     1      67  =
 26611    36   303    24    36   656     1     111  src.position
 26612    36   303    36    36   656     1      59  (
 26613    36   303    37    36   656     1      60  )
 26614    36   303    38    36   656     1     102  ;
 26615    36   304    13    36   656     1      36  int
 26616    36   304    17    36   656     1     111  slim
 26617    36   304    22    36   656     1      67  =
 26618    36   304    24    36   656     1     111  src.limit
 26619    36   304    33    36   656     1      59  (
 26620    36   304    34    36   656     1      60  )
 26621    36   304    35    36   656     1     102  ;
 26622    36   305    13    36   656     0     111  assert
 26623    36   305    20    36   656     0      59  (
 26624    36   305    21    36   656     0     111  spos
 26625    36   305    26    36   656     0      92  <=
 26626    36   305    29    36   656     0     111  slim
 26627    36   305    33    36   656     0      60  )
 26628    36   305    34    36   656     0     102  ;
 26629    36   306    13    36   656     0      36  int
 26630    36   306    17    36   656     0     111  srem
 26631    36   306    22    36   656     0      67  =
 26632    36   306    24    36   656     0      59  (
 26633    36   306    25    36   656     0     111  spos
 26634    36   306    30    36   656     0      92  <=
 26635    36   306    33    36   656     0     111  slim
 26636    36   306    38    36   656     0      58  ?
 26637    36   306    40    36   656     0     111  slim
 26638    36   306    45    36   656     0      77  -
 26639    36   306    47    36   656     0     111  spos
 26640    36   306    52    36   656     0      65  :
 26641    36   306    54    36   656     0     112  0
 26642    36   306    55    36   656     0      60  )
 26643    36   306    56    36   656     0     102  ;
 26644    36   308    13    36   656     0     111  put
 26645    36   308    16    36   656     0      59  (
 26646    36   308    17    36   656     0     111  src.hb
 26647    36   308    23    36   656     0      66  ,
 26648    36   308    25    36   656     0     111  src.offset
 26649    36   308    36    36   656     0      74  +
 26650    36   308    38    36   656     0     111  spos
 26651    36   308    42    36   656     0      66  ,
 26652    36   308    44    36   656     0     111  srem
 26653    36   308    48    36   656     0      60  )
 26654    36   308    49    36   656     0     102  ;
 26655    36   309    13    36   656     0     111  src.position
 26656    36   309    25    36   656     0      59  (
 26657    36   309    26    36   656     0     111  spos
 26658    36   309    31    36   656     0      74  +
 26659    36   309    33    36   656     0     111  srem
 26660    36   309    37    36   656     0      60  )
 26661    36   309    38    36   656     0     102  ;
 26662    36   311     9    36   656     0      64  }
 26663    36   311    11    36   656     0      48  else
 26664    36   311    16    36   656     0      63  {
 26665    36   312    13    36   656     0     111  super.put
 26666    36   312    22    36   656     0      59  (
 26667    36   312    23    36   656     0     111  src
 26668    36   312    26    36   656     0      60  )
 26669    36   312    27    36   656     0     102  ;
 26670    36   313     9    36   656     0      64  }
 26671    36   314     9    36   656     0      19  return
 26672    36   314    16    36   656     0      44  this
 26673    36   314    20    36   656     0     102  ;
 26674    36   318     5    36   656     0      64  }
 26675    36   318     5    36   656     0    1580  ENDMETHOD
 26676    36   318     5    36   657     0    1581  STARTMETHOD
 26677    36   320    12    36   657     0     111  CharBuffer
 26678    36   320    23    36   657     0     111  put
 26679    36   320    26    36   657     0      59  (
 26680    36   320    27    36   657     0      40  char
 26681    36   320    31    36   657     0      61  [
 26682    36   320    32    36   657     0      62  ]
 26683    36   320    34    36   657     0     111  src
 26684    36   320    37    36   657     0      66  ,
 26685    36   320    39    36   657     0      36  int
 26686    36   320    43    36   657     0     111  offset
 26687    36   320    49    36   657     0      66  ,
 26688    36   320    51    36   657     0      36  int
 26689    36   320    55    36   657     0     111  length
 26690    36   320    61    36   657     0      60  )
 26691    36   320    63    36   657     0      63  {
 26692    36   322     9    36   657     0      31  if
 26693    36   322    12    36   657     0      59  (
 26694    36   322    13    36   657     0      59  (
 26695    36   322    14    36   657     0     111  length
 26696    36   322    21    36   657     0      90  <<
 26697    36   322    24    36   657     0     112  1
 26698    36   322    25    36   657     0      60  )
 26699    36   322    27    36   657     0      89  >
 26700    36   322    29    36   657     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 26701    36   322    63    36   657     0      60  )
 26702    36   322    65    36   657     0      63  {
 26703    36   323    13    36   657     0     111  checkBounds
 26704    36   323    24    36   657     0      59  (
 26705    36   323    25    36   657     0     111  offset
 26706    36   323    31    36   657     0      66  ,
 26707    36   323    33    36   657     0     111  length
 26708    36   323    39    36   657     0      66  ,
 26709    36   323    41    36   657     0     111  src.length
 26710    36   323    51    36   657     0      60  )
 26711    36   323    52    36   657     0     102  ;
 26712    36   324    13    36   657     1      36  int
 26713    36   324    17    36   657     1     111  pos
 26714    36   324    21    36   657     1      67  =
 26715    36   324    23    36   657     1     111  position
 26716    36   324    31    36   657     1      59  (
 26717    36   324    32    36   657     1      60  )
 26718    36   324    33    36   657     1     102  ;
 26719    36   325    13    36   657     1      36  int
 26720    36   325    17    36   657     1     111  lim
 26721    36   325    21    36   657     1      67  =
 26722    36   325    23    36   657     1     111  limit
 26723    36   325    28    36   657     1      59  (
 26724    36   325    29    36   657     1      60  )
 26725    36   325    30    36   657     1     102  ;
 26726    36   326    13    36   657     0     111  assert
 26727    36   326    20    36   657     0      59  (
 26728    36   326    21    36   657     0     111  pos
 26729    36   326    25    36   657     0      92  <=
 26730    36   326    28    36   657     0     111  lim
 26731    36   326    31    36   657     0      60  )
 26732    36   326    32    36   657     0     102  ;
 26733    36   327    13    36   657     0      36  int
 26734    36   327    17    36   657     0     111  rem
 26735    36   327    21    36   657     0      67  =
 26736    36   327    23    36   657     0      59  (
 26737    36   327    24    36   657     0     111  pos
 26738    36   327    28    36   657     0      92  <=
 26739    36   327    31    36   657     0     111  lim
 26740    36   327    35    36   657     0      58  ?
 26741    36   327    37    36   657     0     111  lim
 26742    36   327    41    36   657     0      77  -
 26743    36   327    43    36   657     0     111  pos
 26744    36   327    47    36   657     0      65  :
 26745    36   327    49    36   657     0     112  0
 26746    36   327    50    36   657     0      60  )
 26747    36   327    51    36   657     0     102  ;
 26748    36   328    13    36   657     0      31  if
 26749    36   328    16    36   657     0      59  (
 26750    36   328    17    36   657     0     111  length
 26751    36   328    24    36   657     0      89  >
 26752    36   328    26    36   657     0     111  rem
 26753    36   328    29    36   657     0      60  )
 26754    36   329    17    36   657     0      20  throw
 26755    36   329    27    36   657     0     111  BufferOverflowException
 26756    36   329    50    36   657     0      59  (
 26757    36   329    51    36   657     0      60  )
 26758    36   329    52    36   657     0     102  ;
 26759    36   331    13    36   657     0      31  if
 26760    36   331    16    36   657     0      59  (
 26761    36   331    17    36   657     0     111  order
 26762    36   331    22    36   657     0      59  (
 26763    36   331    23    36   657     0      60  )
 26764    36   331    25    36   657     0      71  !=
 26765    36   331    28    36   657     0     111  ByteOrder.nativeOrder
 26766    36   331    49    36   657     0      59  (
 26767    36   331    50    36   657     0      60  )
 26768    36   331    51    36   657     0      60  )
 26769    36   332    17    36   657     0     111  Bits.copyFromCharArray
 26770    36   332    39    36   657     0      59  (
 26771    36   332    40    36   657     0     111  src
 26772    36   332    43    36   657     0      66  ,
 26773    36   332    45    36   657     0     111  offset
 26774    36   332    52    36   657     0      90  <<
 26775    36   332    55    36   657     0     112  1
 26776    36   332    56    36   657     0      66  ,
 26777    36   333    45    36   657     0     111  ix
 26778    36   333    47    36   657     0      59  (
 26779    36   333    48    36   657     0     111  pos
 26780    36   333    51    36   657     0      60  )
 26781    36   333    52    36   657     0      66  ,
 26782    36   333    54    36   657     0     111  length
 26783    36   333    61    36   657     0      90  <<
 26784    36   333    64    36   657     0     112  1
 26785    36   333    65    36   657     0      60  )
 26786    36   333    66    36   657     0     102  ;
 26787    36   334    13    36   657     0      48  else
 26788    36   335    17    36   657     0     111  Bits.copyFromByteArray
 26789    36   335    39    36   657     0      59  (
 26790    36   335    40    36   657     0     111  src
 26791    36   335    43    36   657     0      66  ,
 26792    36   335    45    36   657     0     111  offset
 26793    36   335    52    36   657     0      90  <<
 26794    36   335    55    36   657     0     112  1
 26795    36   335    56    36   657     0      66  ,
 26796    36   336    40    36   657     0     111  ix
 26797    36   336    42    36   657     0      59  (
 26798    36   336    43    36   657     0     111  pos
 26799    36   336    46    36   657     0      60  )
 26800    36   336    47    36   657     0      66  ,
 26801    36   336    49    36   657     0     111  length
 26802    36   336    56    36   657     0      90  <<
 26803    36   336    59    36   657     0     112  1
 26804    36   336    60    36   657     0      60  )
 26805    36   336    61    36   657     0     102  ;
 26806    36   337    13    36   657     0     111  position
 26807    36   337    21    36   657     0      59  (
 26808    36   337    22    36   657     0     111  pos
 26809    36   337    26    36   657     0      74  +
 26810    36   337    28    36   657     0     111  length
 26811    36   337    34    36   657     0      60  )
 26812    36   337    35    36   657     0     102  ;
 26813    36   338     9    36   657     0      64  }
 26814    36   338    11    36   657     0      48  else
 26815    36   338    16    36   657     0      63  {
 26816    36   339    13    36   657     0     111  super.put
 26817    36   339    22    36   657     0      59  (
 26818    36   339    23    36   657     0     111  src
 26819    36   339    26    36   657     0      66  ,
 26820    36   339    28    36   657     0     111  offset
 26821    36   339    34    36   657     0      66  ,
 26822    36   339    36    36   657     0     111  length
 26823    36   339    42    36   657     0      60  )
 26824    36   339    43    36   657     0     102  ;
 26825    36   340     9    36   657     0      64  }
 26826    36   341     9    36   657     0      19  return
 26827    36   341    16    36   657     0      44  this
 26828    36   341    20    36   657     0     102  ;
 26829    36   345     5    36   657     0      64  }
 26830    36   345     5    36   657     0    1582  ENDMETHOD
 26831    36   345     5    36   658     0    1583  STARTMETHOD
 26832    36   347    12    36   658     0     111  CharBuffer
 26833    36   347    23    36   658     0     111  compact
 26834    36   347    30    36   658     0      59  (
 26835    36   347    31    36   658     0      60  )
 26836    36   347    33    36   658     0      63  {
 26837    36   349     9    36   658     1      36  int
 26838    36   349    13    36   658     1     111  pos
 26839    36   349    17    36   658     1      67  =
 26840    36   349    19    36   658     1     111  position
 26841    36   349    27    36   658     1      59  (
 26842    36   349    28    36   658     1      60  )
 26843    36   349    29    36   658     1     102  ;
 26844    36   350     9    36   658     1      36  int
 26845    36   350    13    36   658     1     111  lim
 26846    36   350    17    36   658     1      67  =
 26847    36   350    19    36   658     1     111  limit
 26848    36   350    24    36   658     1      59  (
 26849    36   350    25    36   658     1      60  )
 26850    36   350    26    36   658     1     102  ;
 26851    36   351     9    36   658     0     111  assert
 26852    36   351    16    36   658     0      59  (
 26853    36   351    17    36   658     0     111  pos
 26854    36   351    21    36   658     0      92  <=
 26855    36   351    24    36   658     0     111  lim
 26856    36   351    27    36   658     0      60  )
 26857    36   351    28    36   658     0     102  ;
 26858    36   352     9    36   658     0      36  int
 26859    36   352    13    36   658     0     111  rem
 26860    36   352    17    36   658     0      67  =
 26861    36   352    19    36   658     0      59  (
 26862    36   352    20    36   658     0     111  pos
 26863    36   352    24    36   658     0      92  <=
 26864    36   352    27    36   658     0     111  lim
 26865    36   352    31    36   658     0      58  ?
 26866    36   352    33    36   658     0     111  lim
 26867    36   352    37    36   658     0      77  -
 26868    36   352    39    36   658     0     111  pos
 26869    36   352    43    36   658     0      65  :
 26870    36   352    45    36   658     0     112  0
 26871    36   352    46    36   658     0      60  )
 26872    36   352    47    36   658     0     102  ;
 26873    36   354     9    36   658     0     111  unsafe.copyMemory
 26874    36   354    26    36   658     0      59  (
 26875    36   354    27    36   658     0     111  ix
 26876    36   354    29    36   658     0      59  (
 26877    36   354    30    36   658     0     111  pos
 26878    36   354    33    36   658     0      60  )
 26879    36   354    34    36   658     0      66  ,
 26880    36   354    36    36   658     0     111  ix
 26881    36   354    38    36   658     0      59  (
 26882    36   354    39    36   658     0     112  0
 26883    36   354    40    36   658     0      60  )
 26884    36   354    41    36   658     0      66  ,
 26885    36   354    43    36   658     0     111  rem
 26886    36   354    47    36   658     0      90  <<
 26887    36   354    50    36   658     0     112  1
 26888    36   354    51    36   658     0      60  )
 26889    36   354    52    36   658     0     102  ;
 26890    36   355     9    36   658     0     111  position
 26891    36   355    17    36   658     0      59  (
 26892    36   355    18    36   658     0     111  rem
 26893    36   355    21    36   658     0      60  )
 26894    36   355    22    36   658     0     102  ;
 26895    36   356     9    36   658     0     111  limit
 26896    36   356    14    36   658     0      59  (
 26897    36   356    15    36   658     0     111  capacity
 26898    36   356    23    36   658     0      59  (
 26899    36   356    24    36   658     0      60  )
 26900    36   356    25    36   658     0      60  )
 26901    36   356    26    36   658     0     102  ;
 26902    36   357     9    36   658     0     111  clearMark
 26903    36   357    18    36   658     0      59  (
 26904    36   357    19    36   658     0      60  )
 26905    36   357    20    36   658     0     102  ;
 26906    36   358     9    36   658     0      19  return
 26907    36   358    16    36   658     0      44  this
 26908    36   358    20    36   658     1     102  ;
 26909    36   362     5    36   658     1      64  }
 26910    36   362     5    36   658     0    1584  ENDMETHOD
 26911    36   362     5    36   659     0    1585  STARTMETHOD
 26912    36   364    12    36   659     0      39  boolean
 26913    36   364    20    36   659     0     111  isDirect
 26914    36   364    28    36   659     0      59  (
 26915    36   364    29    36   659     0      60  )
 26916    36   364    31    36   659     0      63  {
 26917    36   365     9    36   659     0      19  return
 26918    36   365    16    36   659     0      52  true
 26919    36   365    20    36   659     1     102  ;
 26920    36   366     5    36   659     1      64  }
 26921    36   366     5    36   659     0    1586  ENDMETHOD
 26922    36   366     5    36   660     0    1587  STARTMETHOD
 26923    36   368    12    36   660     0      39  boolean
 26924    36   368    20    36   660     0     111  isReadOnly
 26925    36   368    30    36   660     0      59  (
 26926    36   368    31    36   660     0      60  )
 26927    36   368    33    36   660     0      63  {
 26928    36   369     9    36   660     0      19  return
 26929    36   369    16    36   660     0      43  false
 26930    36   369    21    36   660     1     102  ;
 26931    36   370     5    36   660     1      64  }
 26932    36   370     5    36   660     0    1588  ENDMETHOD
 26933    36   370     5    36   661     0    1589  STARTMETHOD
 26934    36   375    12    36   661     0     111  String
 26935    36   375    19    36   661     0     111  toString
 26936    36   375    27    36   661     0      59  (
 26937    36   375    28    36   661     0      36  int
 26938    36   375    32    36   661     0     111  start
 26939    36   375    37    36   661     0      66  ,
 26940    36   375    39    36   661     0      36  int
 26941    36   375    43    36   661     0     111  end
 26942    36   375    46    36   661     0      60  )
 26943    36   375    48    36   661     0      63  {
 26944    36   376     9    36   661     0      31  if
 26945    36   376    12    36   661     0      59  (
 26946    36   376    13    36   661     0      59  (
 26947    36   376    14    36   661     0     111  end
 26948    36   376    18    36   661     0      89  >
 26949    36   376    20    36   661     0     111  limit
 26950    36   376    25    36   661     0      59  (
 26951    36   376    26    36   661     0      60  )
 26952    36   376    27    36   661     0      60  )
 26953    36   376    29    36   661     0      98  ||
 26954    36   376    32    36   661     0      59  (
 26955    36   376    33    36   661     0     111  start
 26956    36   376    39    36   661     0      89  >
 26957    36   376    41    36   661     0     111  end
 26958    36   376    44    36   661     0      60  )
 26959    36   376    45    36   661     0      60  )
 26960    36   377    13    36   661     0      20  throw
 26961    36   377    23    36   661     0     111  IndexOutOfBoundsException
 26962    36   377    48    36   661     0      59  (
 26963    36   377    49    36   661     0      60  )
 26964    36   377    50    36   661     0     102  ;
 26965    36   378     9    36   661     0      35  try
 26966    36   378    13    36   661     0      63  {
 26967    36   379    13    36   661     0      36  int
 26968    36   379    17    36   661     0     111  len
 26969    36   379    21    36   661     0      67  =
 26970    36   379    23    36   661     0     111  end
 26971    36   379    27    36   661     0      77  -
 26972    36   379    29    36   661     0     111  start
 26973    36   379    34    36   661     0     102  ;
 26974    36   380    13    36   661     0      40  char
 26975    36   380    17    36   661     0      61  [
 26976    36   380    18    36   661     0      62  ]
 26977    36   380    20    36   661     0     111  ca
 26978    36   380    23    36   661     0      67  =
 26979    36   380    29    36   661     0      40  char
 26980    36   380    33    36   661     0      61  [
 26981    36   380    34    36   661     0     111  len
 26982    36   380    37    36   661     0      62  ]
 26983    36   380    38    36   661     0     102  ;
 26984    36   381    13    36   661     0     111  CharBuffer
 26985    36   381    24    36   661     0     111  cb
 26986    36   381    27    36   661     0      67  =
 26987    36   381    29    36   661     0     111  CharBuffer.wrap
 26988    36   381    44    36   661     0      59  (
 26989    36   381    45    36   661     0     111  ca
 26990    36   381    47    36   661     0      60  )
 26991    36   381    48    36   661     0     102  ;
 26992    36   382    13    36   661     0     111  CharBuffer
 26993    36   382    24    36   661     0     111  db
 26994    36   382    27    36   661     0      67  =
 26995    36   382    29    36   661     0     111  this.duplicate
 26996    36   382    43    36   661     0      59  (
 26997    36   382    44    36   661     0      60  )
 26998    36   382    45    36   661     0     102  ;
 26999    36   383    13    36   661     1     111  db.position
 27000    36   383    24    36   661     1      59  (
 27001    36   383    25    36   661     1     111  start
 27002    36   383    30    36   661     1      60  )
 27003    36   383    31    36   661     1     102  ;
 27004    36   384    13    36   661     1     111  db.limit
 27005    36   384    21    36   661     1      59  (
 27006    36   384    22    36   661     1     111  end
 27007    36   384    25    36   661     1      60  )
 27008    36   384    26    36   661     1     102  ;
 27009    36   385    13    36   661     1     111  cb.put
 27010    36   385    19    36   661     1      59  (
 27011    36   385    20    36   661     1     111  db
 27012    36   385    22    36   661     1      60  )
 27013    36   385    23    36   661     1     102  ;
 27014    36   386    13    36   661     0      19  return
 27015    36   386    24    36   661     0     111  String
 27016    36   386    30    36   661     0      59  (
 27017    36   386    31    36   661     0     111  ca
 27018    36   386    33    36   661     0      60  )
 27019    36   386    34    36   661     0     102  ;
 27020    36   387     9    36   661     0      64  }
 27021    36   387    11    36   661     0      34  catch
 27022    36   387    17    36   661     0      59  (
 27023    36   387    18    36   661     0     111  StringIndexOutOfBoundsException
 27024    36   387    50    36   661     0     111  x
 27025    36   387    51    36   661     0      60  )
 27026    36   387    53    36   661     0      63  {
 27027    36   388    13    36   661     0      20  throw
 27028    36   388    23    36   661     0     111  IndexOutOfBoundsException
 27029    36   388    48    36   661     0      59  (
 27030    36   388    49    36   661     0      60  )
 27031    36   388    50    36   661     0     102  ;
 27032    36   389     9    36   661     0      64  }
 27033    36   390     5    36   661     0      64  }
 27034    36   390     5    36   661     0    1590  ENDMETHOD
 27035    36   390     5    36   662     0    1591  STARTMETHOD
 27036    36   395    12    36   662     0     111  CharSequence
 27037    36   395    25    36   662     0     111  subSequence
 27038    36   395    36    36   662     0      59  (
 27039    36   395    37    36   662     0      36  int
 27040    36   395    41    36   662     0     111  start
 27041    36   395    46    36   662     0      66  ,
 27042    36   395    48    36   662     0      36  int
 27043    36   395    52    36   662     0     111  end
 27044    36   395    55    36   662     0      60  )
 27045    36   395    57    36   662     0      63  {
 27046    36   396     9    36   662     1      36  int
 27047    36   396    13    36   662     1     111  pos
 27048    36   396    17    36   662     1      67  =
 27049    36   396    19    36   662     1     111  position
 27050    36   396    27    36   662     1      59  (
 27051    36   396    28    36   662     1      60  )
 27052    36   396    29    36   662     1     102  ;
 27053    36   397     9    36   662     1      36  int
 27054    36   397    13    36   662     1     111  lim
 27055    36   397    17    36   662     1      67  =
 27056    36   397    19    36   662     1     111  limit
 27057    36   397    24    36   662     1      59  (
 27058    36   397    25    36   662     1      60  )
 27059    36   397    26    36   662     1     102  ;
 27060    36   398     9    36   662     0     111  assert
 27061    36   398    16    36   662     0      59  (
 27062    36   398    17    36   662     0     111  pos
 27063    36   398    21    36   662     0      92  <=
 27064    36   398    24    36   662     0     111  lim
 27065    36   398    27    36   662     0      60  )
 27066    36   398    28    36   662     0     102  ;
 27067    36   399     9    36   662     0     111  pos
 27068    36   399    13    36   662     0      67  =
 27069    36   399    15    36   662     0      59  (
 27070    36   399    16    36   662     0     111  pos
 27071    36   399    20    36   662     0      92  <=
 27072    36   399    23    36   662     0     111  lim
 27073    36   399    27    36   662     0      58  ?
 27074    36   399    29    36   662     0     111  pos
 27075    36   399    33    36   662     0      65  :
 27076    36   399    35    36   662     0     111  lim
 27077    36   399    38    36   662     0      60  )
 27078    36   399    39    36   662     0     102  ;
 27079    36   400     9    36   662     0      36  int
 27080    36   400    13    36   662     0     111  len
 27081    36   400    17    36   662     0      67  =
 27082    36   400    19    36   662     0     111  lim
 27083    36   400    23    36   662     0      77  -
 27084    36   400    25    36   662     0     111  pos
 27085    36   400    28    36   662     0     102  ;
 27086    36   402     9    36   662     0      31  if
 27087    36   402    12    36   662     0      59  (
 27088    36   402    13    36   662     0      59  (
 27089    36   402    14    36   662     0     111  start
 27090    36   402    20    36   662     0      93  <
 27091    36   402    22    36   662     0     112  0
 27092    36   402    23    36   662     0      60  )
 27093    36   402    25    36   662     0      98  ||
 27094    36   402    28    36   662     0      59  (
 27095    36   402    29    36   662     0     111  end
 27096    36   402    33    36   662     0      89  >
 27097    36   402    35    36   662     0     111  len
 27098    36   402    38    36   662     0      60  )
 27099    36   402    40    36   662     0      98  ||
 27100    36   402    43    36   662     0      59  (
 27101    36   402    44    36   662     0     111  start
 27102    36   402    50    36   662     0      89  >
 27103    36   402    52    36   662     0     111  end
 27104    36   402    55    36   662     0      60  )
 27105    36   402    56    36   662     0      60  )
 27106    36   403    13    36   662     0      20  throw
 27107    36   403    23    36   662     0     111  IndexOutOfBoundsException
 27108    36   403    48    36   662     0      59  (
 27109    36   403    49    36   662     0      60  )
 27110    36   403    50    36   662     0     102  ;
 27111    36   404     9    36   662     0      36  int
 27112    36   404    13    36   662     0     111  sublen
 27113    36   404    20    36   662     0      67  =
 27114    36   404    22    36   662     0     111  end
 27115    36   404    26    36   662     0      77  -
 27116    36   404    28    36   662     0     111  start
 27117    36   404    33    36   662     0     102  ;
 27118    36   405     9    36   662     0      36  int
 27119    36   405    13    36   662     0     111  off
 27120    36   405    17    36   662     0      67  =
 27121    36   405    19    36   662     0      59  (
 27122    36   405    20    36   662     0     111  pos
 27123    36   405    24    36   662     0      74  +
 27124    36   405    26    36   662     0     111  start
 27125    36   405    31    36   662     0      60  )
 27126    36   405    33    36   662     0      90  <<
 27127    36   405    36    36   662     0     112  1
 27128    36   405    37    36   662     0     102  ;
 27129    36   406     9    36   662     0     111  assert
 27130    36   406    16    36   662     0      59  (
 27131    36   406    17    36   662     0     111  off
 27132    36   406    21    36   662     0      88  >=
 27133    36   406    24    36   662     0     112  0
 27134    36   406    25    36   662     0      60  )
 27135    36   406    26    36   662     0     102  ;
 27136    36   407     9    36   662     0      19  return
 27137    36   407    20    36   662     0     111  DirectCharBufferU
 27138    36   407    37    36   662     0      59  (
 27139    36   407    38    36   662     0      44  this
 27140    36   407    42    36   662     0      66  ,
 27141    36   407    44    36   662     0      77  -
 27142    36   407    45    36   662     0     112  1
 27143    36   407    46    36   662     0      66  ,
 27144    36   407    48    36   662     0     112  0
 27145    36   407    49    36   662     0      66  ,
 27146    36   407    51    36   662     0     111  sublen
 27147    36   407    57    36   662     0      66  ,
 27148    36   407    59    36   662     0     111  sublen
 27149    36   407    65    36   662     0      66  ,
 27150    36   407    67    36   662     0     111  off
 27151    36   407    70    36   662     0      60  )
 27152    36   407    71    36   662     0     102  ;
 27153    36   408     5    36   662     0      64  }
 27154    36   408     5    36   662     0    1592  ENDMETHOD
 27155    36   408     5    36   663     0    1593  STARTMETHOD
 27156    36   416    12    36   663     0     111  ByteOrder
 27157    36   416    22    36   663     0     111  order
 27158    36   416    27    36   663     0      59  (
 27159    36   416    28    36   663     0      60  )
 27160    36   416    30    36   663     0      63  {
 27161    36   422     9    36   663     0      19  return
 27162    36   422    16    36   663     0      59  (
 27163    36   422    17    36   663     0      59  (
 27164    36   422    18    36   663     0     111  ByteOrder.nativeOrder
 27165    36   422    39    36   663     0      59  (
 27166    36   422    40    36   663     0      60  )
 27167    36   422    42    36   663     0      71  !=
 27168    36   422    45    36   663     0     111  ByteOrder.BIG_ENDIAN
 27169    36   422    65    36   663     0      60  )
 27170    36   423    17    36   663     0      58  ?
 27171    36   423    19    36   663     0     111  ByteOrder.LITTLE_ENDIAN
 27172    36   423    43    36   663     0      65  :
 27173    36   423    45    36   663     0     111  ByteOrder.BIG_ENDIAN
 27174    36   423    65    36   663     0      60  )
 27175    36   423    66    36   663     0     102  ;
 27176    36   425     5    36   663     0      64  }
 27177    36   425     5    36   663     0    1594  ENDMETHOD
 27178    36   452     1    36    -1     0      64  }
 27179    36   452     1    36    -1     1    1595  ENDCLASS
 27180    36   452     1    -1    -1     1    1596  ENDFILE C:\Users\RA\javasrc\java\nio\DirectCharBufferU.java
 27181    37     1     1    -1    -1     1    1597  STARTFILE C:\Users\RA\javasrc\java\nio\DirectDoubleBufferRS.java
 27182    37    28     9    -1    -1     0     111  java.nio
 27183    37    28    17    -1    -1     0     102  ;
 27184    37    30     1    -1    -1     1      49  import
 27185    37    30     8    -1    -1     1     111  sun.misc.Cleaner
 27186    37    30    24    -1    -1     1     102  ;
 27187    37    31     1    -1    -1     1      49  import
 27188    37    31     8    -1    -1     1     111  sun.misc.Unsafe
 27189    37    31    23    -1    -1     1     102  ;
 27190    37    32     1    -1    -1     1      49  import
 27191    37    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 27192    37    32    31    -1    -1     1     102  ;
 27193    37    33     1    -1    -1     1      49  import
 27194    37    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 27195    37    33    34    -1    -1     1     102  ;
 27196    37    36     1    37    -1     0    1598  STARTCLASS
 27197    37    36     1    37    -1     0      24  class
 27198    37    36     7    37    -1     0     111  DirectDoubleBufferRS
 27199    37    40     5    37    -1     0      38  extends
 27200    37    40    13    37    -1     0     111  DirectDoubleBufferS
 27201    37    42     5    37    -1     0      17  implements
 27202    37    42    16    37    -1     0     111  DirectBuffer
 27203    37    43     1    37    -1     0      63  {
 27204    37    43     1    37   664     0    1599  STARTMETHOD
 27205    37   164     5    37   664     0     111  DirectDoubleBufferRS
 27206    37   164    25    37   664     0      59  (
 27207    37   164    26    37   664     0     111  DirectBuffer
 27208    37   164    39    37   664     0     111  db
 27209    37   164    41    37   664     0      66  ,
 27210    37   165    32    37   664     0      36  int
 27211    37   165    36    37   664     0     111  mark
 27212    37   165    40    37   664     0      66  ,
 27213    37   165    42    37   664     0      36  int
 27214    37   165    46    37   664     0     111  pos
 27215    37   165    49    37   664     0      66  ,
 27216    37   165    51    37   664     0      36  int
 27217    37   165    55    37   664     0     111  lim
 27218    37   165    58    37   664     0      66  ,
 27219    37   165    60    37   664     0      36  int
 27220    37   165    64    37   664     0     111  cap
 27221    37   165    67    37   664     0      66  ,
 27222    37   166    32    37   664     0      36  int
 27223    37   166    36    37   664     0     111  off
 27224    37   166    39    37   664     0      60  )
 27225    37   167     5    37   664     0      63  {
 27226    37   176     9    37   664     0      27  super
 27227    37   176    14    37   664     0      59  (
 27228    37   176    15    37   664     0     111  db
 27229    37   176    17    37   664     0      66  ,
 27230    37   176    19    37   664     0     111  mark
 27231    37   176    23    37   664     0      66  ,
 27232    37   176    25    37   664     0     111  pos
 27233    37   176    28    37   664     0      66  ,
 27234    37   176    30    37   664     0     111  lim
 27235    37   176    33    37   664     0      66  ,
 27236    37   176    35    37   664     0     111  cap
 27237    37   176    38    37   664     0      66  ,
 27238    37   176    40    37   664     0     111  off
 27239    37   176    43    37   664     0      60  )
 27240    37   176    44    37   664     0     102  ;
 27241    37   178     5    37   664     0      64  }
 27242    37   178     5    37   664     0    1600  ENDMETHOD
 27243    37   178     5    37   665     0    1601  STARTMETHOD
 27244    37   180    12    37   665     0     111  DoubleBuffer
 27245    37   180    25    37   665     0     111  slice
 27246    37   180    30    37   665     0      59  (
 27247    37   180    31    37   665     0      60  )
 27248    37   180    33    37   665     0      63  {
 27249    37   181     9    37   665     1      36  int
 27250    37   181    13    37   665     1     111  pos
 27251    37   181    17    37   665     1      67  =
 27252    37   181    19    37   665     1     111  this.position
 27253    37   181    32    37   665     1      59  (
 27254    37   181    33    37   665     1      60  )
 27255    37   181    34    37   665     1     102  ;
 27256    37   182     9    37   665     1      36  int
 27257    37   182    13    37   665     1     111  lim
 27258    37   182    17    37   665     1      67  =
 27259    37   182    19    37   665     1     111  this.limit
 27260    37   182    29    37   665     1      59  (
 27261    37   182    30    37   665     1      60  )
 27262    37   182    31    37   665     1     102  ;
 27263    37   183     9    37   665     0     111  assert
 27264    37   183    16    37   665     0      59  (
 27265    37   183    17    37   665     0     111  pos
 27266    37   183    21    37   665     0      92  <=
 27267    37   183    24    37   665     0     111  lim
 27268    37   183    27    37   665     0      60  )
 27269    37   183    28    37   665     0     102  ;
 27270    37   184     9    37   665     0      36  int
 27271    37   184    13    37   665     0     111  rem
 27272    37   184    17    37   665     0      67  =
 27273    37   184    19    37   665     0      59  (
 27274    37   184    20    37   665     0     111  pos
 27275    37   184    24    37   665     0      92  <=
 27276    37   184    27    37   665     0     111  lim
 27277    37   184    31    37   665     0      58  ?
 27278    37   184    33    37   665     0     111  lim
 27279    37   184    37    37   665     0      77  -
 27280    37   184    39    37   665     0     111  pos
 27281    37   184    43    37   665     0      65  :
 27282    37   184    45    37   665     0     112  0
 27283    37   184    46    37   665     0      60  )
 27284    37   184    47    37   665     0     102  ;
 27285    37   185     9    37   665     0      36  int
 27286    37   185    13    37   665     0     111  off
 27287    37   185    17    37   665     0      67  =
 27288    37   185    19    37   665     0      59  (
 27289    37   185    20    37   665     0     111  pos
 27290    37   185    24    37   665     0      90  <<
 27291    37   185    27    37   665     0     112  3
 27292    37   185    28    37   665     0      60  )
 27293    37   185    29    37   665     0     102  ;
 27294    37   186     9    37   665     0     111  assert
 27295    37   186    16    37   665     0      59  (
 27296    37   186    17    37   665     0     111  off
 27297    37   186    21    37   665     0      88  >=
 27298    37   186    24    37   665     0     112  0
 27299    37   186    25    37   665     0      60  )
 27300    37   186    26    37   665     0     102  ;
 27301    37   187     9    37   665     0      19  return
 27302    37   187    20    37   665     0     111  DirectDoubleBufferRS
 27303    37   187    40    37   665     0      59  (
 27304    37   187    41    37   665     0      44  this
 27305    37   187    45    37   665     0      66  ,
 27306    37   187    47    37   665     0      77  -
 27307    37   187    48    37   665     0     112  1
 27308    37   187    49    37   665     0      66  ,
 27309    37   187    51    37   665     0     112  0
 27310    37   187    52    37   665     0      66  ,
 27311    37   187    54    37   665     0     111  rem
 27312    37   187    57    37   665     0      66  ,
 27313    37   187    59    37   665     0     111  rem
 27314    37   187    62    37   665     0      66  ,
 27315    37   187    64    37   665     0     111  off
 27316    37   187    67    37   665     0      60  )
 27317    37   187    68    37   665     0     102  ;
 27318    37   188     5    37   665     0      64  }
 27319    37   188     5    37   665     0    1602  ENDMETHOD
 27320    37   188     5    37   666     0    1603  STARTMETHOD
 27321    37   190    12    37   666     0     111  DoubleBuffer
 27322    37   190    25    37   666     0     111  duplicate
 27323    37   190    34    37   666     0      59  (
 27324    37   190    35    37   666     0      60  )
 27325    37   190    37    37   666     0      63  {
 27326    37   191     9    37   666     0      19  return
 27327    37   191    20    37   666     0     111  DirectDoubleBufferRS
 27328    37   191    40    37   666     0      59  (
 27329    37   191    41    37   666     0      44  this
 27330    37   191    45    37   666     0      66  ,
 27331    37   192    47    37   666     1     111  this.markValue
 27332    37   192    61    37   666     1      59  (
 27333    37   192    62    37   666     1      60  )
 27334    37   192    63    37   666     1      66  ,
 27335    37   193    47    37   666     1     111  this.position
 27336    37   193    60    37   666     1      59  (
 27337    37   193    61    37   666     1      60  )
 27338    37   193    62    37   666     1      66  ,
 27339    37   194    47    37   666     1     111  this.limit
 27340    37   194    57    37   666     1      59  (
 27341    37   194    58    37   666     1      60  )
 27342    37   194    59    37   666     1      66  ,
 27343    37   195    47    37   666     1     111  this.capacity
 27344    37   195    60    37   666     1      59  (
 27345    37   195    61    37   666     1      60  )
 27346    37   195    62    37   666     1      66  ,
 27347    37   196    47    37   666     0     112  0
 27348    37   196    48    37   666     0      60  )
 27349    37   196    49    37   666     0     102  ;
 27350    37   197     5    37   666     0      64  }
 27351    37   197     5    37   666     0    1604  ENDMETHOD
 27352    37   197     5    37   667     0    1605  STARTMETHOD
 27353    37   199    12    37   667     0     111  DoubleBuffer
 27354    37   199    25    37   667     0     111  asReadOnlyBuffer
 27355    37   199    41    37   667     0      59  (
 27356    37   199    42    37   667     0      60  )
 27357    37   199    44    37   667     0      63  {
 27358    37   208     9    37   667     0      19  return
 27359    37   208    16    37   667     0     111  duplicate
 27360    37   208    25    37   667     0      59  (
 27361    37   208    26    37   667     0      60  )
 27362    37   208    27    37   667     0     102  ;
 27363    37   210     5    37   667     0      64  }
 27364    37   210     5    37   667     0    1606  ENDMETHOD
 27365    37   210     5    37   668     0    1607  STARTMETHOD
 27366    37   261    12    37   668     0     111  DoubleBuffer
 27367    37   261    25    37   668     0     111  put
 27368    37   261    28    37   668     0      59  (
 27369    37   261    29    37   668     0      32  double
 27370    37   261    36    37   668     0     111  x
 27371    37   261    37    37   668     0      60  )
 27372    37   261    39    37   668     0      63  {
 27373    37   266     9    37   668     0      20  throw
 27374    37   266    19    37   668     0     111  ReadOnlyBufferException
 27375    37   266    42    37   668     0      59  (
 27376    37   266    43    37   668     0      60  )
 27377    37   266    44    37   668     0     102  ;
 27378    37   268     5    37   668     0      64  }
 27379    37   268     5    37   668     0    1608  ENDMETHOD
 27380    37   268     5    37   669     0    1609  STARTMETHOD
 27381    37   270    12    37   669     0     111  DoubleBuffer
 27382    37   270    25    37   669     0     111  put
 27383    37   270    28    37   669     0      59  (
 27384    37   270    29    37   669     0      36  int
 27385    37   270    33    37   669     0     111  i
 27386    37   270    34    37   669     0      66  ,
 27387    37   270    36    37   669     0      32  double
 27388    37   270    43    37   669     0     111  x
 27389    37   270    44    37   669     0      60  )
 27390    37   270    46    37   669     0      63  {
 27391    37   275     9    37   669     0      20  throw
 27392    37   275    19    37   669     0     111  ReadOnlyBufferException
 27393    37   275    42    37   669     0      59  (
 27394    37   275    43    37   669     0      60  )
 27395    37   275    44    37   669     0     102  ;
 27396    37   277     5    37   669     0      64  }
 27397    37   277     5    37   669     0    1610  ENDMETHOD
 27398    37   277     5    37   670     0    1611  STARTMETHOD
 27399    37   279    12    37   670     0     111  DoubleBuffer
 27400    37   279    25    37   670     0     111  put
 27401    37   279    28    37   670     0      59  (
 27402    37   279    29    37   670     0     111  DoubleBuffer
 27403    37   279    42    37   670     0     111  src
 27404    37   279    45    37   670     0      60  )
 27405    37   279    47    37   670     0      63  {
 27406    37   316     9    37   670     0      20  throw
 27407    37   316    19    37   670     0     111  ReadOnlyBufferException
 27408    37   316    42    37   670     0      59  (
 27409    37   316    43    37   670     0      60  )
 27410    37   316    44    37   670     0     102  ;
 27411    37   318     5    37   670     0      64  }
 27412    37   318     5    37   670     0    1612  ENDMETHOD
 27413    37   318     5    37   671     0    1613  STARTMETHOD
 27414    37   320    12    37   671     0     111  DoubleBuffer
 27415    37   320    25    37   671     0     111  put
 27416    37   320    28    37   671     0      59  (
 27417    37   320    29    37   671     0      32  double
 27418    37   320    35    37   671     0      61  [
 27419    37   320    36    37   671     0      62  ]
 27420    37   320    38    37   671     0     111  src
 27421    37   320    41    37   671     0      66  ,
 27422    37   320    43    37   671     0      36  int
 27423    37   320    47    37   671     0     111  offset
 27424    37   320    53    37   671     0      66  ,
 27425    37   320    55    37   671     0      36  int
 27426    37   320    59    37   671     0     111  length
 27427    37   320    65    37   671     0      60  )
 27428    37   320    67    37   671     0      63  {
 27429    37   343     9    37   671     0      20  throw
 27430    37   343    19    37   671     0     111  ReadOnlyBufferException
 27431    37   343    42    37   671     0      59  (
 27432    37   343    43    37   671     0      60  )
 27433    37   343    44    37   671     0     102  ;
 27434    37   345     5    37   671     0      64  }
 27435    37   345     5    37   671     0    1614  ENDMETHOD
 27436    37   345     5    37   672     0    1615  STARTMETHOD
 27437    37   347    12    37   672     0     111  DoubleBuffer
 27438    37   347    25    37   672     0     111  compact
 27439    37   347    32    37   672     0      59  (
 27440    37   347    33    37   672     0      60  )
 27441    37   347    35    37   672     0      63  {
 27442    37   360     9    37   672     0      20  throw
 27443    37   360    19    37   672     0     111  ReadOnlyBufferException
 27444    37   360    42    37   672     0      59  (
 27445    37   360    43    37   672     0      60  )
 27446    37   360    44    37   672     1     102  ;
 27447    37   362     5    37   672     1      64  }
 27448    37   362     5    37   672     0    1616  ENDMETHOD
 27449    37   362     5    37   673     0    1617  STARTMETHOD
 27450    37   364    12    37   673     0      39  boolean
 27451    37   364    20    37   673     0     111  isDirect
 27452    37   364    28    37   673     0      59  (
 27453    37   364    29    37   673     0      60  )
 27454    37   364    31    37   673     0      63  {
 27455    37   365     9    37   673     0      19  return
 27456    37   365    16    37   673     0      52  true
 27457    37   365    20    37   673     1     102  ;
 27458    37   366     5    37   673     1      64  }
 27459    37   366     5    37   673     0    1618  ENDMETHOD
 27460    37   366     5    37   674     0    1619  STARTMETHOD
 27461    37   368    12    37   674     0      39  boolean
 27462    37   368    20    37   674     0     111  isReadOnly
 27463    37   368    30    37   674     0      59  (
 27464    37   368    31    37   674     0      60  )
 27465    37   368    33    37   674     0      63  {
 27466    37   369     9    37   674     0      19  return
 27467    37   369    16    37   674     0      52  true
 27468    37   369    20    37   674     1     102  ;
 27469    37   370     5    37   674     1      64  }
 27470    37   370     5    37   674     0    1620  ENDMETHOD
 27471    37   370     5    37   675     0    1621  STARTMETHOD
 27472    37   416    12    37   675     0     111  ByteOrder
 27473    37   416    22    37   675     0     111  order
 27474    37   416    27    37   675     0      59  (
 27475    37   416    28    37   675     0      60  )
 27476    37   416    30    37   675     0      63  {
 27477    37   418     9    37   675     0      19  return
 27478    37   418    16    37   675     0      59  (
 27479    37   418    17    37   675     0      59  (
 27480    37   418    18    37   675     0     111  ByteOrder.nativeOrder
 27481    37   418    39    37   675     0      59  (
 27482    37   418    40    37   675     0      60  )
 27483    37   418    42    37   675     0      68  ==
 27484    37   418    45    37   675     0     111  ByteOrder.BIG_ENDIAN
 27485    37   418    65    37   675     0      60  )
 27486    37   419    17    37   675     0      58  ?
 27487    37   419    19    37   675     0     111  ByteOrder.LITTLE_ENDIAN
 27488    37   419    43    37   675     0      65  :
 27489    37   419    45    37   675     0     111  ByteOrder.BIG_ENDIAN
 27490    37   419    65    37   675     0      60  )
 27491    37   419    66    37   675     0     102  ;
 27492    37   425     5    37   675     0      64  }
 27493    37   425     5    37   675     0    1622  ENDMETHOD
 27494    37   452     1    37    -1     0      64  }
 27495    37   452     1    37    -1     1    1623  ENDCLASS
 27496    37   452     1    -1    -1     1    1624  ENDFILE C:\Users\RA\javasrc\java\nio\DirectDoubleBufferRS.java
 27497    38     1     1    -1    -1     1    1625  STARTFILE C:\Users\RA\javasrc\java\nio\DirectDoubleBufferRU.java
 27498    38    28     9    -1    -1     0     111  java.nio
 27499    38    28    17    -1    -1     0     102  ;
 27500    38    30     1    -1    -1     1      49  import
 27501    38    30     8    -1    -1     1     111  sun.misc.Cleaner
 27502    38    30    24    -1    -1     1     102  ;
 27503    38    31     1    -1    -1     1      49  import
 27504    38    31     8    -1    -1     1     111  sun.misc.Unsafe
 27505    38    31    23    -1    -1     1     102  ;
 27506    38    32     1    -1    -1     1      49  import
 27507    38    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 27508    38    32    31    -1    -1     1     102  ;
 27509    38    33     1    -1    -1     1      49  import
 27510    38    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 27511    38    33    34    -1    -1     1     102  ;
 27512    38    36     1    38    -1     0    1626  STARTCLASS
 27513    38    36     1    38    -1     0      24  class
 27514    38    36     7    38    -1     0     111  DirectDoubleBufferRU
 27515    38    40     5    38    -1     0      38  extends
 27516    38    40    13    38    -1     0     111  DirectDoubleBufferU
 27517    38    42     5    38    -1     0      17  implements
 27518    38    42    16    38    -1     0     111  DirectBuffer
 27519    38    43     1    38    -1     0      63  {
 27520    38    43     1    38   676     0    1627  STARTMETHOD
 27521    38   164     5    38   676     0     111  DirectDoubleBufferRU
 27522    38   164    25    38   676     0      59  (
 27523    38   164    26    38   676     0     111  DirectBuffer
 27524    38   164    39    38   676     0     111  db
 27525    38   164    41    38   676     0      66  ,
 27526    38   165    32    38   676     0      36  int
 27527    38   165    36    38   676     0     111  mark
 27528    38   165    40    38   676     0      66  ,
 27529    38   165    42    38   676     0      36  int
 27530    38   165    46    38   676     0     111  pos
 27531    38   165    49    38   676     0      66  ,
 27532    38   165    51    38   676     0      36  int
 27533    38   165    55    38   676     0     111  lim
 27534    38   165    58    38   676     0      66  ,
 27535    38   165    60    38   676     0      36  int
 27536    38   165    64    38   676     0     111  cap
 27537    38   165    67    38   676     0      66  ,
 27538    38   166    32    38   676     0      36  int
 27539    38   166    36    38   676     0     111  off
 27540    38   166    39    38   676     0      60  )
 27541    38   167     5    38   676     0      63  {
 27542    38   176     9    38   676     0      27  super
 27543    38   176    14    38   676     0      59  (
 27544    38   176    15    38   676     0     111  db
 27545    38   176    17    38   676     0      66  ,
 27546    38   176    19    38   676     0     111  mark
 27547    38   176    23    38   676     0      66  ,
 27548    38   176    25    38   676     0     111  pos
 27549    38   176    28    38   676     0      66  ,
 27550    38   176    30    38   676     0     111  lim
 27551    38   176    33    38   676     0      66  ,
 27552    38   176    35    38   676     0     111  cap
 27553    38   176    38    38   676     0      66  ,
 27554    38   176    40    38   676     0     111  off
 27555    38   176    43    38   676     0      60  )
 27556    38   176    44    38   676     0     102  ;
 27557    38   178     5    38   676     0      64  }
 27558    38   178     5    38   676     0    1628  ENDMETHOD
 27559    38   178     5    38   677     0    1629  STARTMETHOD
 27560    38   180    12    38   677     0     111  DoubleBuffer
 27561    38   180    25    38   677     0     111  slice
 27562    38   180    30    38   677     0      59  (
 27563    38   180    31    38   677     0      60  )
 27564    38   180    33    38   677     0      63  {
 27565    38   181     9    38   677     1      36  int
 27566    38   181    13    38   677     1     111  pos
 27567    38   181    17    38   677     1      67  =
 27568    38   181    19    38   677     1     111  this.position
 27569    38   181    32    38   677     1      59  (
 27570    38   181    33    38   677     1      60  )
 27571    38   181    34    38   677     1     102  ;
 27572    38   182     9    38   677     1      36  int
 27573    38   182    13    38   677     1     111  lim
 27574    38   182    17    38   677     1      67  =
 27575    38   182    19    38   677     1     111  this.limit
 27576    38   182    29    38   677     1      59  (
 27577    38   182    30    38   677     1      60  )
 27578    38   182    31    38   677     1     102  ;
 27579    38   183     9    38   677     0     111  assert
 27580    38   183    16    38   677     0      59  (
 27581    38   183    17    38   677     0     111  pos
 27582    38   183    21    38   677     0      92  <=
 27583    38   183    24    38   677     0     111  lim
 27584    38   183    27    38   677     0      60  )
 27585    38   183    28    38   677     0     102  ;
 27586    38   184     9    38   677     0      36  int
 27587    38   184    13    38   677     0     111  rem
 27588    38   184    17    38   677     0      67  =
 27589    38   184    19    38   677     0      59  (
 27590    38   184    20    38   677     0     111  pos
 27591    38   184    24    38   677     0      92  <=
 27592    38   184    27    38   677     0     111  lim
 27593    38   184    31    38   677     0      58  ?
 27594    38   184    33    38   677     0     111  lim
 27595    38   184    37    38   677     0      77  -
 27596    38   184    39    38   677     0     111  pos
 27597    38   184    43    38   677     0      65  :
 27598    38   184    45    38   677     0     112  0
 27599    38   184    46    38   677     0      60  )
 27600    38   184    47    38   677     0     102  ;
 27601    38   185     9    38   677     0      36  int
 27602    38   185    13    38   677     0     111  off
 27603    38   185    17    38   677     0      67  =
 27604    38   185    19    38   677     0      59  (
 27605    38   185    20    38   677     0     111  pos
 27606    38   185    24    38   677     0      90  <<
 27607    38   185    27    38   677     0     112  3
 27608    38   185    28    38   677     0      60  )
 27609    38   185    29    38   677     0     102  ;
 27610    38   186     9    38   677     0     111  assert
 27611    38   186    16    38   677     0      59  (
 27612    38   186    17    38   677     0     111  off
 27613    38   186    21    38   677     0      88  >=
 27614    38   186    24    38   677     0     112  0
 27615    38   186    25    38   677     0      60  )
 27616    38   186    26    38   677     0     102  ;
 27617    38   187     9    38   677     0      19  return
 27618    38   187    20    38   677     0     111  DirectDoubleBufferRU
 27619    38   187    40    38   677     0      59  (
 27620    38   187    41    38   677     0      44  this
 27621    38   187    45    38   677     0      66  ,
 27622    38   187    47    38   677     0      77  -
 27623    38   187    48    38   677     0     112  1
 27624    38   187    49    38   677     0      66  ,
 27625    38   187    51    38   677     0     112  0
 27626    38   187    52    38   677     0      66  ,
 27627    38   187    54    38   677     0     111  rem
 27628    38   187    57    38   677     0      66  ,
 27629    38   187    59    38   677     0     111  rem
 27630    38   187    62    38   677     0      66  ,
 27631    38   187    64    38   677     0     111  off
 27632    38   187    67    38   677     0      60  )
 27633    38   187    68    38   677     0     102  ;
 27634    38   188     5    38   677     0      64  }
 27635    38   188     5    38   677     0    1630  ENDMETHOD
 27636    38   188     5    38   678     0    1631  STARTMETHOD
 27637    38   190    12    38   678     0     111  DoubleBuffer
 27638    38   190    25    38   678     0     111  duplicate
 27639    38   190    34    38   678     0      59  (
 27640    38   190    35    38   678     0      60  )
 27641    38   190    37    38   678     0      63  {
 27642    38   191     9    38   678     0      19  return
 27643    38   191    20    38   678     0     111  DirectDoubleBufferRU
 27644    38   191    40    38   678     0      59  (
 27645    38   191    41    38   678     0      44  this
 27646    38   191    45    38   678     0      66  ,
 27647    38   192    47    38   678     1     111  this.markValue
 27648    38   192    61    38   678     1      59  (
 27649    38   192    62    38   678     1      60  )
 27650    38   192    63    38   678     1      66  ,
 27651    38   193    47    38   678     1     111  this.position
 27652    38   193    60    38   678     1      59  (
 27653    38   193    61    38   678     1      60  )
 27654    38   193    62    38   678     1      66  ,
 27655    38   194    47    38   678     1     111  this.limit
 27656    38   194    57    38   678     1      59  (
 27657    38   194    58    38   678     1      60  )
 27658    38   194    59    38   678     1      66  ,
 27659    38   195    47    38   678     1     111  this.capacity
 27660    38   195    60    38   678     1      59  (
 27661    38   195    61    38   678     1      60  )
 27662    38   195    62    38   678     1      66  ,
 27663    38   196    47    38   678     0     112  0
 27664    38   196    48    38   678     0      60  )
 27665    38   196    49    38   678     0     102  ;
 27666    38   197     5    38   678     0      64  }
 27667    38   197     5    38   678     0    1632  ENDMETHOD
 27668    38   197     5    38   679     0    1633  STARTMETHOD
 27669    38   199    12    38   679     0     111  DoubleBuffer
 27670    38   199    25    38   679     0     111  asReadOnlyBuffer
 27671    38   199    41    38   679     0      59  (
 27672    38   199    42    38   679     0      60  )
 27673    38   199    44    38   679     0      63  {
 27674    38   208     9    38   679     0      19  return
 27675    38   208    16    38   679     0     111  duplicate
 27676    38   208    25    38   679     0      59  (
 27677    38   208    26    38   679     0      60  )
 27678    38   208    27    38   679     0     102  ;
 27679    38   210     5    38   679     0      64  }
 27680    38   210     5    38   679     0    1634  ENDMETHOD
 27681    38   210     5    38   680     0    1635  STARTMETHOD
 27682    38   261    12    38   680     0     111  DoubleBuffer
 27683    38   261    25    38   680     0     111  put
 27684    38   261    28    38   680     0      59  (
 27685    38   261    29    38   680     0      32  double
 27686    38   261    36    38   680     0     111  x
 27687    38   261    37    38   680     0      60  )
 27688    38   261    39    38   680     0      63  {
 27689    38   266     9    38   680     0      20  throw
 27690    38   266    19    38   680     0     111  ReadOnlyBufferException
 27691    38   266    42    38   680     0      59  (
 27692    38   266    43    38   680     0      60  )
 27693    38   266    44    38   680     0     102  ;
 27694    38   268     5    38   680     0      64  }
 27695    38   268     5    38   680     0    1636  ENDMETHOD
 27696    38   268     5    38   681     0    1637  STARTMETHOD
 27697    38   270    12    38   681     0     111  DoubleBuffer
 27698    38   270    25    38   681     0     111  put
 27699    38   270    28    38   681     0      59  (
 27700    38   270    29    38   681     0      36  int
 27701    38   270    33    38   681     0     111  i
 27702    38   270    34    38   681     0      66  ,
 27703    38   270    36    38   681     0      32  double
 27704    38   270    43    38   681     0     111  x
 27705    38   270    44    38   681     0      60  )
 27706    38   270    46    38   681     0      63  {
 27707    38   275     9    38   681     0      20  throw
 27708    38   275    19    38   681     0     111  ReadOnlyBufferException
 27709    38   275    42    38   681     0      59  (
 27710    38   275    43    38   681     0      60  )
 27711    38   275    44    38   681     0     102  ;
 27712    38   277     5    38   681     0      64  }
 27713    38   277     5    38   681     0    1638  ENDMETHOD
 27714    38   277     5    38   682     0    1639  STARTMETHOD
 27715    38   279    12    38   682     0     111  DoubleBuffer
 27716    38   279    25    38   682     0     111  put
 27717    38   279    28    38   682     0      59  (
 27718    38   279    29    38   682     0     111  DoubleBuffer
 27719    38   279    42    38   682     0     111  src
 27720    38   279    45    38   682     0      60  )
 27721    38   279    47    38   682     0      63  {
 27722    38   316     9    38   682     0      20  throw
 27723    38   316    19    38   682     0     111  ReadOnlyBufferException
 27724    38   316    42    38   682     0      59  (
 27725    38   316    43    38   682     0      60  )
 27726    38   316    44    38   682     0     102  ;
 27727    38   318     5    38   682     0      64  }
 27728    38   318     5    38   682     0    1640  ENDMETHOD
 27729    38   318     5    38   683     0    1641  STARTMETHOD
 27730    38   320    12    38   683     0     111  DoubleBuffer
 27731    38   320    25    38   683     0     111  put
 27732    38   320    28    38   683     0      59  (
 27733    38   320    29    38   683     0      32  double
 27734    38   320    35    38   683     0      61  [
 27735    38   320    36    38   683     0      62  ]
 27736    38   320    38    38   683     0     111  src
 27737    38   320    41    38   683     0      66  ,
 27738    38   320    43    38   683     0      36  int
 27739    38   320    47    38   683     0     111  offset
 27740    38   320    53    38   683     0      66  ,
 27741    38   320    55    38   683     0      36  int
 27742    38   320    59    38   683     0     111  length
 27743    38   320    65    38   683     0      60  )
 27744    38   320    67    38   683     0      63  {
 27745    38   343     9    38   683     0      20  throw
 27746    38   343    19    38   683     0     111  ReadOnlyBufferException
 27747    38   343    42    38   683     0      59  (
 27748    38   343    43    38   683     0      60  )
 27749    38   343    44    38   683     0     102  ;
 27750    38   345     5    38   683     0      64  }
 27751    38   345     5    38   683     0    1642  ENDMETHOD
 27752    38   345     5    38   684     0    1643  STARTMETHOD
 27753    38   347    12    38   684     0     111  DoubleBuffer
 27754    38   347    25    38   684     0     111  compact
 27755    38   347    32    38   684     0      59  (
 27756    38   347    33    38   684     0      60  )
 27757    38   347    35    38   684     0      63  {
 27758    38   360     9    38   684     0      20  throw
 27759    38   360    19    38   684     0     111  ReadOnlyBufferException
 27760    38   360    42    38   684     0      59  (
 27761    38   360    43    38   684     0      60  )
 27762    38   360    44    38   684     1     102  ;
 27763    38   362     5    38   684     1      64  }
 27764    38   362     5    38   684     0    1644  ENDMETHOD
 27765    38   362     5    38   685     0    1645  STARTMETHOD
 27766    38   364    12    38   685     0      39  boolean
 27767    38   364    20    38   685     0     111  isDirect
 27768    38   364    28    38   685     0      59  (
 27769    38   364    29    38   685     0      60  )
 27770    38   364    31    38   685     0      63  {
 27771    38   365     9    38   685     0      19  return
 27772    38   365    16    38   685     0      52  true
 27773    38   365    20    38   685     1     102  ;
 27774    38   366     5    38   685     1      64  }
 27775    38   366     5    38   685     0    1646  ENDMETHOD
 27776    38   366     5    38   686     0    1647  STARTMETHOD
 27777    38   368    12    38   686     0      39  boolean
 27778    38   368    20    38   686     0     111  isReadOnly
 27779    38   368    30    38   686     0      59  (
 27780    38   368    31    38   686     0      60  )
 27781    38   368    33    38   686     0      63  {
 27782    38   369     9    38   686     0      19  return
 27783    38   369    16    38   686     0      52  true
 27784    38   369    20    38   686     1     102  ;
 27785    38   370     5    38   686     1      64  }
 27786    38   370     5    38   686     0    1648  ENDMETHOD
 27787    38   370     5    38   687     0    1649  STARTMETHOD
 27788    38   416    12    38   687     0     111  ByteOrder
 27789    38   416    22    38   687     0     111  order
 27790    38   416    27    38   687     0      59  (
 27791    38   416    28    38   687     0      60  )
 27792    38   416    30    38   687     0      63  {
 27793    38   422     9    38   687     0      19  return
 27794    38   422    16    38   687     0      59  (
 27795    38   422    17    38   687     0      59  (
 27796    38   422    18    38   687     0     111  ByteOrder.nativeOrder
 27797    38   422    39    38   687     0      59  (
 27798    38   422    40    38   687     0      60  )
 27799    38   422    42    38   687     0      71  !=
 27800    38   422    45    38   687     0     111  ByteOrder.BIG_ENDIAN
 27801    38   422    65    38   687     0      60  )
 27802    38   423    17    38   687     0      58  ?
 27803    38   423    19    38   687     0     111  ByteOrder.LITTLE_ENDIAN
 27804    38   423    43    38   687     0      65  :
 27805    38   423    45    38   687     0     111  ByteOrder.BIG_ENDIAN
 27806    38   423    65    38   687     0      60  )
 27807    38   423    66    38   687     0     102  ;
 27808    38   425     5    38   687     0      64  }
 27809    38   425     5    38   687     0    1650  ENDMETHOD
 27810    38   452     1    38    -1     0      64  }
 27811    38   452     1    38    -1     1    1651  ENDCLASS
 27812    38   452     1    -1    -1     1    1652  ENDFILE C:\Users\RA\javasrc\java\nio\DirectDoubleBufferRU.java
 27813    39     1     1    -1    -1     1    1653  STARTFILE C:\Users\RA\javasrc\java\nio\DirectDoubleBufferS.java
 27814    39    28     9    -1    -1     0     111  java.nio
 27815    39    28    17    -1    -1     0     102  ;
 27816    39    30     1    -1    -1     1      49  import
 27817    39    30     8    -1    -1     1     111  sun.misc.Cleaner
 27818    39    30    24    -1    -1     1     102  ;
 27819    39    31     1    -1    -1     1      49  import
 27820    39    31     8    -1    -1     1     111  sun.misc.Unsafe
 27821    39    31    23    -1    -1     1     102  ;
 27822    39    32     1    -1    -1     1      49  import
 27823    39    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 27824    39    32    31    -1    -1     1     102  ;
 27825    39    33     1    -1    -1     1      49  import
 27826    39    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 27827    39    33    34    -1    -1     1     102  ;
 27828    39    36     1    39    -1     0    1654  STARTCLASS
 27829    39    36     1    39    -1     0      24  class
 27830    39    36     7    39    -1     0     111  DirectDoubleBufferS
 27831    39    38     5    39    -1     0      38  extends
 27832    39    38    13    39    -1     0     111  DoubleBuffer
 27833    39    42     5    39    -1     0      17  implements
 27834    39    42    16    39    -1     0     111  DirectBuffer
 27835    39    43     1    39    -1     0      63  {
 27836    39    48     5    39    -1     0      23  protected
 27837    39    48    15    39    -1     0      45  static
 27838    39    48    28    39    -1     0     111  Unsafe
 27839    39    48    35    39    -1     0     111  unsafe
 27840    39    48    42    39    -1     0      67  =
 27841    39    48    44    39    -1     0     111  Bits.unsafe
 27842    39    48    55    39    -1     0      59  (
 27843    39    48    56    39    -1     0      60  )
 27844    39    48    57    39    -1     0     102  ;
 27845    39    51     5    39    -1     0      23  protected
 27846    39    51    15    39    -1     0      45  static
 27847    39    51    28    39    -1     0      39  boolean
 27848    39    51    36    39    -1     0     111  unaligned
 27849    39    51    46    39    -1     0      67  =
 27850    39    51    48    39    -1     0     111  Bits.unaligned
 27851    39    51    62    39    -1     0      59  (
 27852    39    51    63    39    -1     0      60  )
 27853    39    51    64    39    -1     0     102  ;
 27854    39    59     5    39    -1     0      23  protected
 27855    39    59    15    39    -1     0     111  Object
 27856    39    59    22    39    -1     0     111  viewedBuffer
 27857    39    59    35    39    -1     0      67  =
 27858    39    59    37    39    -1     0      21  null
 27859    39    59    41    39    -1     0     102  ;
 27860    39    59    41    39   688     0    1655  STARTMETHOD
 27861    39    61    12    39   688     0     111  Object
 27862    39    61    19    39   688     0     111  viewedBuffer
 27863    39    61    31    39   688     0      59  (
 27864    39    61    32    39   688     0      60  )
 27865    39    61    34    39   688     0      63  {
 27866    39    62     9    39   688     0      19  return
 27867    39    62    16    39   688     0     111  viewedBuffer
 27868    39    62    28    39   688     0     102  ;
 27869    39    63     5    39   688     0      64  }
 27870    39    63     5    39   688     0    1656  ENDMETHOD
 27871    39    63     5    39   689     0    1657  STARTMETHOD
 27872    39   100    12    39   689     0     111  Cleaner
 27873    39   100    20    39   689     0     111  cleaner
 27874    39   100    27    39   689     0      59  (
 27875    39   100    28    39   689     0      60  )
 27876    39   100    30    39   689     0      63  {
 27877    39   100    32    39   689     0      19  return
 27878    39   100    39    39   689     0      21  null
 27879    39   100    43    39   689     0     102  ;
 27880    39   100    45    39   689     0      64  }
 27881    39   100    45    39   689     0    1658  ENDMETHOD
 27882    39   100    45    39   690     0    1659  STARTMETHOD
 27883    39   164     5    39   690     0     111  DirectDoubleBufferS
 27884    39   164    24    39   690     0      59  (
 27885    39   164    25    39   690     0     111  DirectBuffer
 27886    39   164    38    39   690     0     111  db
 27887    39   164    40    39   690     0      66  ,
 27888    39   165    32    39   690     0      36  int
 27889    39   165    36    39   690     0     111  mark
 27890    39   165    40    39   690     0      66  ,
 27891    39   165    42    39   690     0      36  int
 27892    39   165    46    39   690     0     111  pos
 27893    39   165    49    39   690     0      66  ,
 27894    39   165    51    39   690     0      36  int
 27895    39   165    55    39   690     0     111  lim
 27896    39   165    58    39   690     0      66  ,
 27897    39   165    60    39   690     0      36  int
 27898    39   165    64    39   690     0     111  cap
 27899    39   165    67    39   690     0      66  ,
 27900    39   166    32    39   690     0      36  int
 27901    39   166    36    39   690     0     111  off
 27902    39   166    39    39   690     0      60  )
 27903    39   167     5    39   690     0      63  {
 27904    39   169     9    39   690     0      27  super
 27905    39   169    14    39   690     0      59  (
 27906    39   169    15    39   690     0     111  mark
 27907    39   169    19    39   690     0      66  ,
 27908    39   169    21    39   690     0     111  pos
 27909    39   169    24    39   690     0      66  ,
 27910    39   169    26    39   690     0     111  lim
 27911    39   169    29    39   690     0      66  ,
 27912    39   169    31    39   690     0     111  cap
 27913    39   169    34    39   690     0      60  )
 27914    39   169    35    39   690     0     102  ;
 27915    39   170     9    39   690     0     111  address
 27916    39   170    17    39   690     0      67  =
 27917    39   170    19    39   690     0     111  db.address
 27918    39   170    29    39   690     0      59  (
 27919    39   170    30    39   690     0      60  )
 27920    39   170    32    39   690     0      74  +
 27921    39   170    34    39   690     0     111  off
 27922    39   170    37    39   690     0     102  ;
 27923    39   171     9    39   690     0     111  viewedBuffer
 27924    39   171    22    39   690     0      67  =
 27925    39   171    24    39   690     0     111  db
 27926    39   171    26    39   690     0     102  ;
 27927    39   178     5    39   690     0      64  }
 27928    39   178     5    39   690     0    1660  ENDMETHOD
 27929    39   178     5    39   691     0    1661  STARTMETHOD
 27930    39   180    12    39   691     0     111  DoubleBuffer
 27931    39   180    25    39   691     0     111  slice
 27932    39   180    30    39   691     0      59  (
 27933    39   180    31    39   691     0      60  )
 27934    39   180    33    39   691     0      63  {
 27935    39   181     9    39   691     1      36  int
 27936    39   181    13    39   691     1     111  pos
 27937    39   181    17    39   691     1      67  =
 27938    39   181    19    39   691     1     111  this.position
 27939    39   181    32    39   691     1      59  (
 27940    39   181    33    39   691     1      60  )
 27941    39   181    34    39   691     1     102  ;
 27942    39   182     9    39   691     1      36  int
 27943    39   182    13    39   691     1     111  lim
 27944    39   182    17    39   691     1      67  =
 27945    39   182    19    39   691     1     111  this.limit
 27946    39   182    29    39   691     1      59  (
 27947    39   182    30    39   691     1      60  )
 27948    39   182    31    39   691     1     102  ;
 27949    39   183     9    39   691     0     111  assert
 27950    39   183    16    39   691     0      59  (
 27951    39   183    17    39   691     0     111  pos
 27952    39   183    21    39   691     0      92  <=
 27953    39   183    24    39   691     0     111  lim
 27954    39   183    27    39   691     0      60  )
 27955    39   183    28    39   691     0     102  ;
 27956    39   184     9    39   691     0      36  int
 27957    39   184    13    39   691     0     111  rem
 27958    39   184    17    39   691     0      67  =
 27959    39   184    19    39   691     0      59  (
 27960    39   184    20    39   691     0     111  pos
 27961    39   184    24    39   691     0      92  <=
 27962    39   184    27    39   691     0     111  lim
 27963    39   184    31    39   691     0      58  ?
 27964    39   184    33    39   691     0     111  lim
 27965    39   184    37    39   691     0      77  -
 27966    39   184    39    39   691     0     111  pos
 27967    39   184    43    39   691     0      65  :
 27968    39   184    45    39   691     0     112  0
 27969    39   184    46    39   691     0      60  )
 27970    39   184    47    39   691     0     102  ;
 27971    39   185     9    39   691     0      36  int
 27972    39   185    13    39   691     0     111  off
 27973    39   185    17    39   691     0      67  =
 27974    39   185    19    39   691     0      59  (
 27975    39   185    20    39   691     0     111  pos
 27976    39   185    24    39   691     0      90  <<
 27977    39   185    27    39   691     0     112  3
 27978    39   185    28    39   691     0      60  )
 27979    39   185    29    39   691     0     102  ;
 27980    39   186     9    39   691     0     111  assert
 27981    39   186    16    39   691     0      59  (
 27982    39   186    17    39   691     0     111  off
 27983    39   186    21    39   691     0      88  >=
 27984    39   186    24    39   691     0     112  0
 27985    39   186    25    39   691     0      60  )
 27986    39   186    26    39   691     0     102  ;
 27987    39   187     9    39   691     0      19  return
 27988    39   187    20    39   691     0     111  DirectDoubleBufferS
 27989    39   187    39    39   691     0      59  (
 27990    39   187    40    39   691     0      44  this
 27991    39   187    44    39   691     0      66  ,
 27992    39   187    46    39   691     0      77  -
 27993    39   187    47    39   691     0     112  1
 27994    39   187    48    39   691     0      66  ,
 27995    39   187    50    39   691     0     112  0
 27996    39   187    51    39   691     0      66  ,
 27997    39   187    53    39   691     0     111  rem
 27998    39   187    56    39   691     0      66  ,
 27999    39   187    58    39   691     0     111  rem
 28000    39   187    61    39   691     0      66  ,
 28001    39   187    63    39   691     0     111  off
 28002    39   187    66    39   691     0      60  )
 28003    39   187    67    39   691     0     102  ;
 28004    39   188     5    39   691     0      64  }
 28005    39   188     5    39   691     0    1662  ENDMETHOD
 28006    39   188     5    39   692     0    1663  STARTMETHOD
 28007    39   190    12    39   692     0     111  DoubleBuffer
 28008    39   190    25    39   692     0     111  duplicate
 28009    39   190    34    39   692     0      59  (
 28010    39   190    35    39   692     0      60  )
 28011    39   190    37    39   692     0      63  {
 28012    39   191     9    39   692     0      19  return
 28013    39   191    20    39   692     0     111  DirectDoubleBufferS
 28014    39   191    39    39   692     0      59  (
 28015    39   191    40    39   692     0      44  this
 28016    39   191    44    39   692     0      66  ,
 28017    39   192    47    39   692     1     111  this.markValue
 28018    39   192    61    39   692     1      59  (
 28019    39   192    62    39   692     1      60  )
 28020    39   192    63    39   692     1      66  ,
 28021    39   193    47    39   692     1     111  this.position
 28022    39   193    60    39   692     1      59  (
 28023    39   193    61    39   692     1      60  )
 28024    39   193    62    39   692     1      66  ,
 28025    39   194    47    39   692     1     111  this.limit
 28026    39   194    57    39   692     1      59  (
 28027    39   194    58    39   692     1      60  )
 28028    39   194    59    39   692     1      66  ,
 28029    39   195    47    39   692     1     111  this.capacity
 28030    39   195    60    39   692     1      59  (
 28031    39   195    61    39   692     1      60  )
 28032    39   195    62    39   692     1      66  ,
 28033    39   196    47    39   692     0     112  0
 28034    39   196    48    39   692     0      60  )
 28035    39   196    49    39   692     0     102  ;
 28036    39   197     5    39   692     0      64  }
 28037    39   197     5    39   692     0    1664  ENDMETHOD
 28038    39   197     5    39   693     0    1665  STARTMETHOD
 28039    39   199    12    39   693     0     111  DoubleBuffer
 28040    39   199    25    39   693     0     111  asReadOnlyBuffer
 28041    39   199    41    39   693     0      59  (
 28042    39   199    42    39   693     0      60  )
 28043    39   199    44    39   693     0      63  {
 28044    39   201     9    39   693     0      19  return
 28045    39   201    20    39   693     0     111  DirectDoubleBufferRS
 28046    39   201    40    39   693     0      59  (
 28047    39   201    41    39   693     0      44  this
 28048    39   201    45    39   693     0      66  ,
 28049    39   202    44    39   693     1     111  this.markValue
 28050    39   202    58    39   693     1      59  (
 28051    39   202    59    39   693     1      60  )
 28052    39   202    60    39   693     1      66  ,
 28053    39   203    44    39   693     1     111  this.position
 28054    39   203    57    39   693     1      59  (
 28055    39   203    58    39   693     1      60  )
 28056    39   203    59    39   693     1      66  ,
 28057    39   204    44    39   693     1     111  this.limit
 28058    39   204    54    39   693     1      59  (
 28059    39   204    55    39   693     1      60  )
 28060    39   204    56    39   693     1      66  ,
 28061    39   205    44    39   693     1     111  this.capacity
 28062    39   205    57    39   693     1      59  (
 28063    39   205    58    39   693     1      60  )
 28064    39   205    59    39   693     1      66  ,
 28065    39   206    44    39   693     0     112  0
 28066    39   206    45    39   693     0      60  )
 28067    39   206    46    39   693     0     102  ;
 28068    39   210     5    39   693     0      64  }
 28069    39   210     5    39   693     0    1666  ENDMETHOD
 28070    39   210     5    39   694     0    1667  STARTMETHOD
 28071    39   214    12    39   694     0      53  long
 28072    39   214    17    39   694     0     111  address
 28073    39   214    24    39   694     0      59  (
 28074    39   214    25    39   694     0      60  )
 28075    39   214    27    39   694     0      63  {
 28076    39   215     9    39   694     0      19  return
 28077    39   215    16    39   694     0     111  address
 28078    39   215    23    39   694     0     102  ;
 28079    39   216     5    39   694     0      64  }
 28080    39   216     5    39   694     0    1668  ENDMETHOD
 28081    39   216     5    39   695     0    1669  STARTMETHOD
 28082    39   218     5    39   695     0      41  private
 28083    39   218    13    39   695     0      53  long
 28084    39   218    18    39   695     0     111  ix
 28085    39   218    20    39   695     0      59  (
 28086    39   218    21    39   695     0      36  int
 28087    39   218    25    39   695     0     111  i
 28088    39   218    26    39   695     0      60  )
 28089    39   218    28    39   695     0      63  {
 28090    39   219     9    39   695     0      19  return
 28091    39   219    16    39   695     0     111  address
 28092    39   219    24    39   695     0      74  +
 28093    39   219    26    39   695     0      59  (
 28094    39   219    27    39   695     0     111  i
 28095    39   219    29    39   695     0      90  <<
 28096    39   219    32    39   695     0     112  3
 28097    39   219    33    39   695     0      60  )
 28098    39   219    34    39   695     0     102  ;
 28099    39   220     5    39   695     0      64  }
 28100    39   220     5    39   695     0    1670  ENDMETHOD
 28101    39   220     5    39   696     0    1671  STARTMETHOD
 28102    39   222    12    39   696     0      32  double
 28103    39   222    19    39   696     0     111  get
 28104    39   222    22    39   696     0      59  (
 28105    39   222    23    39   696     0      60  )
 28106    39   222    25    39   696     0      63  {
 28107    39   223     9    39   696     0      19  return
 28108    39   223    16    39   696     0     111  Double.longBitsToDouble
 28109    39   223    39    39   696     0      59  (
 28110    39   223    40    39   696     0     111  Bits.swap
 28111    39   223    49    39   696     0      59  (
 28112    39   223    50    39   696     0     111  unsafe.getLong
 28113    39   223    64    39   696     0      59  (
 28114    39   223    65    39   696     0     111  ix
 28115    39   223    67    39   696     0      59  (
 28116    39   223    68    39   696     0     111  nextGetIndex
 28117    39   223    80    39   696     0      59  (
 28118    39   223    81    39   696     0      60  )
 28119    39   223    82    39   696     0      60  )
 28120    39   223    83    39   696     0      60  )
 28121    39   223    84    39   696     0      60  )
 28122    39   223    85    39   696     0      60  )
 28123    39   223    86    39   696     0     102  ;
 28124    39   224     5    39   696     0      64  }
 28125    39   224     5    39   696     0    1672  ENDMETHOD
 28126    39   224     5    39   697     0    1673  STARTMETHOD
 28127    39   226    12    39   697     0      32  double
 28128    39   226    19    39   697     0     111  get
 28129    39   226    22    39   697     0      59  (
 28130    39   226    23    39   697     0      36  int
 28131    39   226    27    39   697     0     111  i
 28132    39   226    28    39   697     0      60  )
 28133    39   226    30    39   697     0      63  {
 28134    39   227     9    39   697     0      19  return
 28135    39   227    16    39   697     0     111  Double.longBitsToDouble
 28136    39   227    39    39   697     0      59  (
 28137    39   227    40    39   697     0     111  Bits.swap
 28138    39   227    49    39   697     0      59  (
 28139    39   227    50    39   697     0     111  unsafe.getLong
 28140    39   227    64    39   697     0      59  (
 28141    39   227    65    39   697     0     111  ix
 28142    39   227    67    39   697     0      59  (
 28143    39   227    68    39   697     0     111  checkIndex
 28144    39   227    78    39   697     0      59  (
 28145    39   227    79    39   697     0     111  i
 28146    39   227    80    39   697     0      60  )
 28147    39   227    81    39   697     0      60  )
 28148    39   227    82    39   697     0      60  )
 28149    39   227    83    39   697     0      60  )
 28150    39   227    84    39   697     0      60  )
 28151    39   227    85    39   697     0     102  ;
 28152    39   228     5    39   697     0      64  }
 28153    39   228     5    39   697     0    1674  ENDMETHOD
 28154    39   228     5    39   698     0    1675  STARTMETHOD
 28155    39   230    12    39   698     0     111  DoubleBuffer
 28156    39   230    25    39   698     0     111  get
 28157    39   230    28    39   698     0      59  (
 28158    39   230    29    39   698     0      32  double
 28159    39   230    35    39   698     0      61  [
 28160    39   230    36    39   698     0      62  ]
 28161    39   230    38    39   698     0     111  dst
 28162    39   230    41    39   698     0      66  ,
 28163    39   230    43    39   698     0      36  int
 28164    39   230    47    39   698     0     111  offset
 28165    39   230    53    39   698     0      66  ,
 28166    39   230    55    39   698     0      36  int
 28167    39   230    59    39   698     0     111  length
 28168    39   230    65    39   698     0      60  )
 28169    39   230    67    39   698     0      63  {
 28170    39   232     9    39   698     0      31  if
 28171    39   232    12    39   698     0      59  (
 28172    39   232    13    39   698     0      59  (
 28173    39   232    14    39   698     0     111  length
 28174    39   232    21    39   698     0      90  <<
 28175    39   232    24    39   698     0     112  3
 28176    39   232    25    39   698     0      60  )
 28177    39   232    27    39   698     0      89  >
 28178    39   232    29    39   698     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 28179    39   232    61    39   698     0      60  )
 28180    39   232    63    39   698     0      63  {
 28181    39   233    13    39   698     0     111  checkBounds
 28182    39   233    24    39   698     0      59  (
 28183    39   233    25    39   698     0     111  offset
 28184    39   233    31    39   698     0      66  ,
 28185    39   233    33    39   698     0     111  length
 28186    39   233    39    39   698     0      66  ,
 28187    39   233    41    39   698     0     111  dst.length
 28188    39   233    51    39   698     0      60  )
 28189    39   233    52    39   698     0     102  ;
 28190    39   234    13    39   698     1      36  int
 28191    39   234    17    39   698     1     111  pos
 28192    39   234    21    39   698     1      67  =
 28193    39   234    23    39   698     1     111  position
 28194    39   234    31    39   698     1      59  (
 28195    39   234    32    39   698     1      60  )
 28196    39   234    33    39   698     1     102  ;
 28197    39   235    13    39   698     1      36  int
 28198    39   235    17    39   698     1     111  lim
 28199    39   235    21    39   698     1      67  =
 28200    39   235    23    39   698     1     111  limit
 28201    39   235    28    39   698     1      59  (
 28202    39   235    29    39   698     1      60  )
 28203    39   235    30    39   698     1     102  ;
 28204    39   236    13    39   698     0     111  assert
 28205    39   236    20    39   698     0      59  (
 28206    39   236    21    39   698     0     111  pos
 28207    39   236    25    39   698     0      92  <=
 28208    39   236    28    39   698     0     111  lim
 28209    39   236    31    39   698     0      60  )
 28210    39   236    32    39   698     0     102  ;
 28211    39   237    13    39   698     0      36  int
 28212    39   237    17    39   698     0     111  rem
 28213    39   237    21    39   698     0      67  =
 28214    39   237    23    39   698     0      59  (
 28215    39   237    24    39   698     0     111  pos
 28216    39   237    28    39   698     0      92  <=
 28217    39   237    31    39   698     0     111  lim
 28218    39   237    35    39   698     0      58  ?
 28219    39   237    37    39   698     0     111  lim
 28220    39   237    41    39   698     0      77  -
 28221    39   237    43    39   698     0     111  pos
 28222    39   237    47    39   698     0      65  :
 28223    39   237    49    39   698     0     112  0
 28224    39   237    50    39   698     0      60  )
 28225    39   237    51    39   698     0     102  ;
 28226    39   238    13    39   698     0      31  if
 28227    39   238    16    39   698     0      59  (
 28228    39   238    17    39   698     0     111  length
 28229    39   238    24    39   698     0      89  >
 28230    39   238    26    39   698     0     111  rem
 28231    39   238    29    39   698     0      60  )
 28232    39   239    17    39   698     0      20  throw
 28233    39   239    27    39   698     0     111  BufferUnderflowException
 28234    39   239    51    39   698     0      59  (
 28235    39   239    52    39   698     0      60  )
 28236    39   239    53    39   698     0     102  ;
 28237    39   241    13    39   698     0      31  if
 28238    39   241    16    39   698     0      59  (
 28239    39   241    17    39   698     0     111  order
 28240    39   241    22    39   698     0      59  (
 28241    39   241    23    39   698     0      60  )
 28242    39   241    25    39   698     0      71  !=
 28243    39   241    28    39   698     0     111  ByteOrder.nativeOrder
 28244    39   241    49    39   698     0      59  (
 28245    39   241    50    39   698     0      60  )
 28246    39   241    51    39   698     0      60  )
 28247    39   242    17    39   698     0     111  Bits.copyToLongArray
 28248    39   242    37    39   698     0      59  (
 28249    39   242    38    39   698     0     111  ix
 28250    39   242    40    39   698     0      59  (
 28251    39   242    41    39   698     0     111  pos
 28252    39   242    44    39   698     0      60  )
 28253    39   242    45    39   698     0      66  ,
 28254    39   242    47    39   698     0     111  dst
 28255    39   242    50    39   698     0      66  ,
 28256    39   243    43    39   698     0     111  offset
 28257    39   243    50    39   698     0      90  <<
 28258    39   243    53    39   698     0     112  3
 28259    39   243    54    39   698     0      66  ,
 28260    39   244    43    39   698     0     111  length
 28261    39   244    50    39   698     0      90  <<
 28262    39   244    53    39   698     0     112  3
 28263    39   244    54    39   698     0      60  )
 28264    39   244    55    39   698     0     102  ;
 28265    39   245    13    39   698     0      48  else
 28266    39   246    17    39   698     0     111  Bits.copyToByteArray
 28267    39   246    37    39   698     0      59  (
 28268    39   246    38    39   698     0     111  ix
 28269    39   246    40    39   698     0      59  (
 28270    39   246    41    39   698     0     111  pos
 28271    39   246    44    39   698     0      60  )
 28272    39   246    45    39   698     0      66  ,
 28273    39   246    47    39   698     0     111  dst
 28274    39   246    50    39   698     0      66  ,
 28275    39   247    38    39   698     0     111  offset
 28276    39   247    45    39   698     0      90  <<
 28277    39   247    48    39   698     0     112  3
 28278    39   247    49    39   698     0      66  ,
 28279    39   248    38    39   698     0     111  length
 28280    39   248    45    39   698     0      90  <<
 28281    39   248    48    39   698     0     112  3
 28282    39   248    49    39   698     0      60  )
 28283    39   248    50    39   698     0     102  ;
 28284    39   249    13    39   698     0     111  position
 28285    39   249    21    39   698     0      59  (
 28286    39   249    22    39   698     0     111  pos
 28287    39   249    26    39   698     0      74  +
 28288    39   249    28    39   698     0     111  length
 28289    39   249    34    39   698     0      60  )
 28290    39   249    35    39   698     0     102  ;
 28291    39   250     9    39   698     0      64  }
 28292    39   250    11    39   698     0      48  else
 28293    39   250    16    39   698     0      63  {
 28294    39   251    13    39   698     0     111  super.get
 28295    39   251    22    39   698     0      59  (
 28296    39   251    23    39   698     0     111  dst
 28297    39   251    26    39   698     0      66  ,
 28298    39   251    28    39   698     0     111  offset
 28299    39   251    34    39   698     0      66  ,
 28300    39   251    36    39   698     0     111  length
 28301    39   251    42    39   698     0      60  )
 28302    39   251    43    39   698     0     102  ;
 28303    39   252     9    39   698     0      64  }
 28304    39   253     9    39   698     0      19  return
 28305    39   253    16    39   698     0      44  this
 28306    39   253    20    39   698     0     102  ;
 28307    39   257     5    39   698     0      64  }
 28308    39   257     5    39   698     0    1676  ENDMETHOD
 28309    39   257     5    39   699     0    1677  STARTMETHOD
 28310    39   261    12    39   699     0     111  DoubleBuffer
 28311    39   261    25    39   699     0     111  put
 28312    39   261    28    39   699     0      59  (
 28313    39   261    29    39   699     0      32  double
 28314    39   261    36    39   699     0     111  x
 28315    39   261    37    39   699     0      60  )
 28316    39   261    39    39   699     0      63  {
 28317    39   263     9    39   699     0     111  unsafe.putLong
 28318    39   263    23    39   699     0      59  (
 28319    39   263    24    39   699     0     111  ix
 28320    39   263    26    39   699     0      59  (
 28321    39   263    27    39   699     0     111  nextPutIndex
 28322    39   263    39    39   699     0      59  (
 28323    39   263    40    39   699     0      60  )
 28324    39   263    41    39   699     0      60  )
 28325    39   263    42    39   699     0      66  ,
 28326    39   263    44    39   699     0     111  Bits.swap
 28327    39   263    53    39   699     0      59  (
 28328    39   263    54    39   699     0     111  Double.doubleToRawLongBits
 28329    39   263    80    39   699     0      59  (
 28330    39   263    81    39   699     0     111  x
 28331    39   263    82    39   699     0      60  )
 28332    39   263    83    39   699     0      60  )
 28333    39   263    84    39   699     0      60  )
 28334    39   263    85    39   699     0     102  ;
 28335    39   264     9    39   699     0      19  return
 28336    39   264    16    39   699     0      44  this
 28337    39   264    20    39   699     0     102  ;
 28338    39   268     5    39   699     0      64  }
 28339    39   268     5    39   699     0    1678  ENDMETHOD
 28340    39   268     5    39   700     0    1679  STARTMETHOD
 28341    39   270    12    39   700     0     111  DoubleBuffer
 28342    39   270    25    39   700     0     111  put
 28343    39   270    28    39   700     0      59  (
 28344    39   270    29    39   700     0      36  int
 28345    39   270    33    39   700     0     111  i
 28346    39   270    34    39   700     0      66  ,
 28347    39   270    36    39   700     0      32  double
 28348    39   270    43    39   700     0     111  x
 28349    39   270    44    39   700     0      60  )
 28350    39   270    46    39   700     0      63  {
 28351    39   272     9    39   700     0     111  unsafe.putLong
 28352    39   272    23    39   700     0      59  (
 28353    39   272    24    39   700     0     111  ix
 28354    39   272    26    39   700     0      59  (
 28355    39   272    27    39   700     0     111  checkIndex
 28356    39   272    37    39   700     0      59  (
 28357    39   272    38    39   700     0     111  i
 28358    39   272    39    39   700     0      60  )
 28359    39   272    40    39   700     0      60  )
 28360    39   272    41    39   700     0      66  ,
 28361    39   272    43    39   700     0     111  Bits.swap
 28362    39   272    52    39   700     0      59  (
 28363    39   272    53    39   700     0     111  Double.doubleToRawLongBits
 28364    39   272    79    39   700     0      59  (
 28365    39   272    80    39   700     0     111  x
 28366    39   272    81    39   700     0      60  )
 28367    39   272    82    39   700     0      60  )
 28368    39   272    83    39   700     0      60  )
 28369    39   272    84    39   700     0     102  ;
 28370    39   273     9    39   700     0      19  return
 28371    39   273    16    39   700     0      44  this
 28372    39   273    20    39   700     0     102  ;
 28373    39   277     5    39   700     0      64  }
 28374    39   277     5    39   700     0    1680  ENDMETHOD
 28375    39   277     5    39   701     0    1681  STARTMETHOD
 28376    39   279    12    39   701     0     111  DoubleBuffer
 28377    39   279    25    39   701     0     111  put
 28378    39   279    28    39   701     0      59  (
 28379    39   279    29    39   701     0     111  DoubleBuffer
 28380    39   279    42    39   701     0     111  src
 28381    39   279    45    39   701     0      60  )
 28382    39   279    47    39   701     0      63  {
 28383    39   281     9    39   701     0      31  if
 28384    39   281    12    39   701     0      59  (
 28385    39   281    13    39   701     0     111  src
 28386    39   281    28    39   701     0     111  DirectDoubleBufferS
 28387    39   281    47    39   701     0      60  )
 28388    39   281    49    39   701     0      63  {
 28389    39   282    13    39   701     0      31  if
 28390    39   282    16    39   701     0      59  (
 28391    39   282    17    39   701     0     111  src
 28392    39   282    21    39   701     0      68  ==
 28393    39   282    24    39   701     0      44  this
 28394    39   282    28    39   701     0      60  )
 28395    39   283    17    39   701     0      20  throw
 28396    39   283    27    39   701     0     111  IllegalArgumentException
 28397    39   283    51    39   701     0      59  (
 28398    39   283    52    39   701     0      60  )
 28399    39   283    53    39   701     0     102  ;
 28400    39   284    13    39   701     0     111  DirectDoubleBufferS
 28401    39   284    33    39   701     0     111  sb
 28402    39   284    36    39   701     0      67  =
 28403    39   284    38    39   701     0      59  (
 28404    39   284    39    39   701     0     111  DirectDoubleBufferS
 28405    39   284    58    39   701     0      60  )
 28406    39   284    59    39   701     0     111  src
 28407    39   284    62    39   701     0     102  ;
 28408    39   286    13    39   701     1      36  int
 28409    39   286    17    39   701     1     111  spos
 28410    39   286    22    39   701     1      67  =
 28411    39   286    24    39   701     1     111  sb.position
 28412    39   286    35    39   701     1      59  (
 28413    39   286    36    39   701     1      60  )
 28414    39   286    37    39   701     1     102  ;
 28415    39   287    13    39   701     1      36  int
 28416    39   287    17    39   701     1     111  slim
 28417    39   287    22    39   701     1      67  =
 28418    39   287    24    39   701     1     111  sb.limit
 28419    39   287    32    39   701     1      59  (
 28420    39   287    33    39   701     1      60  )
 28421    39   287    34    39   701     1     102  ;
 28422    39   288    13    39   701     0     111  assert
 28423    39   288    20    39   701     0      59  (
 28424    39   288    21    39   701     0     111  spos
 28425    39   288    26    39   701     0      92  <=
 28426    39   288    29    39   701     0     111  slim
 28427    39   288    33    39   701     0      60  )
 28428    39   288    34    39   701     0     102  ;
 28429    39   289    13    39   701     0      36  int
 28430    39   289    17    39   701     0     111  srem
 28431    39   289    22    39   701     0      67  =
 28432    39   289    24    39   701     0      59  (
 28433    39   289    25    39   701     0     111  spos
 28434    39   289    30    39   701     0      92  <=
 28435    39   289    33    39   701     0     111  slim
 28436    39   289    38    39   701     0      58  ?
 28437    39   289    40    39   701     0     111  slim
 28438    39   289    45    39   701     0      77  -
 28439    39   289    47    39   701     0     111  spos
 28440    39   289    52    39   701     0      65  :
 28441    39   289    54    39   701     0     112  0
 28442    39   289    55    39   701     0      60  )
 28443    39   289    56    39   701     0     102  ;
 28444    39   291    13    39   701     1      36  int
 28445    39   291    17    39   701     1     111  pos
 28446    39   291    21    39   701     1      67  =
 28447    39   291    23    39   701     1     111  position
 28448    39   291    31    39   701     1      59  (
 28449    39   291    32    39   701     1      60  )
 28450    39   291    33    39   701     1     102  ;
 28451    39   292    13    39   701     1      36  int
 28452    39   292    17    39   701     1     111  lim
 28453    39   292    21    39   701     1      67  =
 28454    39   292    23    39   701     1     111  limit
 28455    39   292    28    39   701     1      59  (
 28456    39   292    29    39   701     1      60  )
 28457    39   292    30    39   701     1     102  ;
 28458    39   293    13    39   701     0     111  assert
 28459    39   293    20    39   701     0      59  (
 28460    39   293    21    39   701     0     111  pos
 28461    39   293    25    39   701     0      92  <=
 28462    39   293    28    39   701     0     111  lim
 28463    39   293    31    39   701     0      60  )
 28464    39   293    32    39   701     0     102  ;
 28465    39   294    13    39   701     0      36  int
 28466    39   294    17    39   701     0     111  rem
 28467    39   294    21    39   701     0      67  =
 28468    39   294    23    39   701     0      59  (
 28469    39   294    24    39   701     0     111  pos
 28470    39   294    28    39   701     0      92  <=
 28471    39   294    31    39   701     0     111  lim
 28472    39   294    35    39   701     0      58  ?
 28473    39   294    37    39   701     0     111  lim
 28474    39   294    41    39   701     0      77  -
 28475    39   294    43    39   701     0     111  pos
 28476    39   294    47    39   701     0      65  :
 28477    39   294    49    39   701     0     112  0
 28478    39   294    50    39   701     0      60  )
 28479    39   294    51    39   701     0     102  ;
 28480    39   296    13    39   701     0      31  if
 28481    39   296    16    39   701     0      59  (
 28482    39   296    17    39   701     0     111  srem
 28483    39   296    22    39   701     0      89  >
 28484    39   296    24    39   701     0     111  rem
 28485    39   296    27    39   701     0      60  )
 28486    39   297    17    39   701     0      20  throw
 28487    39   297    27    39   701     0     111  BufferOverflowException
 28488    39   297    50    39   701     0      59  (
 28489    39   297    51    39   701     0      60  )
 28490    39   297    52    39   701     0     102  ;
 28491    39   298    13    39   701     0     111  unsafe.copyMemory
 28492    39   298    30    39   701     0      59  (
 28493    39   298    31    39   701     0     111  sb.ix
 28494    39   298    36    39   701     0      59  (
 28495    39   298    37    39   701     0     111  spos
 28496    39   298    41    39   701     0      60  )
 28497    39   298    42    39   701     0      66  ,
 28498    39   298    44    39   701     0     111  ix
 28499    39   298    46    39   701     0      59  (
 28500    39   298    47    39   701     0     111  pos
 28501    39   298    50    39   701     0      60  )
 28502    39   298    51    39   701     0      66  ,
 28503    39   298    53    39   701     0     111  srem
 28504    39   298    58    39   701     0      90  <<
 28505    39   298    61    39   701     0     112  3
 28506    39   298    62    39   701     0      60  )
 28507    39   298    63    39   701     0     102  ;
 28508    39   299    13    39   701     1     111  sb.position
 28509    39   299    24    39   701     1      59  (
 28510    39   299    25    39   701     1     111  spos
 28511    39   299    30    39   701     1      74  +
 28512    39   299    32    39   701     1     111  srem
 28513    39   299    36    39   701     1      60  )
 28514    39   299    37    39   701     1     102  ;
 28515    39   300    13    39   701     1     111  position
 28516    39   300    21    39   701     1      59  (
 28517    39   300    22    39   701     1     111  pos
 28518    39   300    26    39   701     1      74  +
 28519    39   300    28    39   701     1     111  srem
 28520    39   300    32    39   701     1      60  )
 28521    39   300    33    39   701     1     102  ;
 28522    39   301     9    39   701     0      64  }
 28523    39   301    11    39   701     0      48  else
 28524    39   301    16    39   701     0      31  if
 28525    39   301    19    39   701     0      59  (
 28526    39   301    20    39   701     0     111  src.hb
 28527    39   301    27    39   701     0      71  !=
 28528    39   301    30    39   701     0      21  null
 28529    39   301    34    39   701     0      60  )
 28530    39   301    36    39   701     0      63  {
 28531    39   303    13    39   701     1      36  int
 28532    39   303    17    39   701     1     111  spos
 28533    39   303    22    39   701     1      67  =
 28534    39   303    24    39   701     1     111  src.position
 28535    39   303    36    39   701     1      59  (
 28536    39   303    37    39   701     1      60  )
 28537    39   303    38    39   701     1     102  ;
 28538    39   304    13    39   701     1      36  int
 28539    39   304    17    39   701     1     111  slim
 28540    39   304    22    39   701     1      67  =
 28541    39   304    24    39   701     1     111  src.limit
 28542    39   304    33    39   701     1      59  (
 28543    39   304    34    39   701     1      60  )
 28544    39   304    35    39   701     1     102  ;
 28545    39   305    13    39   701     0     111  assert
 28546    39   305    20    39   701     0      59  (
 28547    39   305    21    39   701     0     111  spos
 28548    39   305    26    39   701     0      92  <=
 28549    39   305    29    39   701     0     111  slim
 28550    39   305    33    39   701     0      60  )
 28551    39   305    34    39   701     0     102  ;
 28552    39   306    13    39   701     0      36  int
 28553    39   306    17    39   701     0     111  srem
 28554    39   306    22    39   701     0      67  =
 28555    39   306    24    39   701     0      59  (
 28556    39   306    25    39   701     0     111  spos
 28557    39   306    30    39   701     0      92  <=
 28558    39   306    33    39   701     0     111  slim
 28559    39   306    38    39   701     0      58  ?
 28560    39   306    40    39   701     0     111  slim
 28561    39   306    45    39   701     0      77  -
 28562    39   306    47    39   701     0     111  spos
 28563    39   306    52    39   701     0      65  :
 28564    39   306    54    39   701     0     112  0
 28565    39   306    55    39   701     0      60  )
 28566    39   306    56    39   701     0     102  ;
 28567    39   308    13    39   701     0     111  put
 28568    39   308    16    39   701     0      59  (
 28569    39   308    17    39   701     0     111  src.hb
 28570    39   308    23    39   701     0      66  ,
 28571    39   308    25    39   701     0     111  src.offset
 28572    39   308    36    39   701     0      74  +
 28573    39   308    38    39   701     0     111  spos
 28574    39   308    42    39   701     0      66  ,
 28575    39   308    44    39   701     0     111  srem
 28576    39   308    48    39   701     0      60  )
 28577    39   308    49    39   701     0     102  ;
 28578    39   309    13    39   701     0     111  src.position
 28579    39   309    25    39   701     0      59  (
 28580    39   309    26    39   701     0     111  spos
 28581    39   309    31    39   701     0      74  +
 28582    39   309    33    39   701     0     111  srem
 28583    39   309    37    39   701     0      60  )
 28584    39   309    38    39   701     0     102  ;
 28585    39   311     9    39   701     0      64  }
 28586    39   311    11    39   701     0      48  else
 28587    39   311    16    39   701     0      63  {
 28588    39   312    13    39   701     0     111  super.put
 28589    39   312    22    39   701     0      59  (
 28590    39   312    23    39   701     0     111  src
 28591    39   312    26    39   701     0      60  )
 28592    39   312    27    39   701     0     102  ;
 28593    39   313     9    39   701     0      64  }
 28594    39   314     9    39   701     0      19  return
 28595    39   314    16    39   701     0      44  this
 28596    39   314    20    39   701     0     102  ;
 28597    39   318     5    39   701     0      64  }
 28598    39   318     5    39   701     0    1682  ENDMETHOD
 28599    39   318     5    39   702     0    1683  STARTMETHOD
 28600    39   320    12    39   702     0     111  DoubleBuffer
 28601    39   320    25    39   702     0     111  put
 28602    39   320    28    39   702     0      59  (
 28603    39   320    29    39   702     0      32  double
 28604    39   320    35    39   702     0      61  [
 28605    39   320    36    39   702     0      62  ]
 28606    39   320    38    39   702     0     111  src
 28607    39   320    41    39   702     0      66  ,
 28608    39   320    43    39   702     0      36  int
 28609    39   320    47    39   702     0     111  offset
 28610    39   320    53    39   702     0      66  ,
 28611    39   320    55    39   702     0      36  int
 28612    39   320    59    39   702     0     111  length
 28613    39   320    65    39   702     0      60  )
 28614    39   320    67    39   702     0      63  {
 28615    39   322     9    39   702     0      31  if
 28616    39   322    12    39   702     0      59  (
 28617    39   322    13    39   702     0      59  (
 28618    39   322    14    39   702     0     111  length
 28619    39   322    21    39   702     0      90  <<
 28620    39   322    24    39   702     0     112  3
 28621    39   322    25    39   702     0      60  )
 28622    39   322    27    39   702     0      89  >
 28623    39   322    29    39   702     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 28624    39   322    63    39   702     0      60  )
 28625    39   322    65    39   702     0      63  {
 28626    39   323    13    39   702     0     111  checkBounds
 28627    39   323    24    39   702     0      59  (
 28628    39   323    25    39   702     0     111  offset
 28629    39   323    31    39   702     0      66  ,
 28630    39   323    33    39   702     0     111  length
 28631    39   323    39    39   702     0      66  ,
 28632    39   323    41    39   702     0     111  src.length
 28633    39   323    51    39   702     0      60  )
 28634    39   323    52    39   702     0     102  ;
 28635    39   324    13    39   702     1      36  int
 28636    39   324    17    39   702     1     111  pos
 28637    39   324    21    39   702     1      67  =
 28638    39   324    23    39   702     1     111  position
 28639    39   324    31    39   702     1      59  (
 28640    39   324    32    39   702     1      60  )
 28641    39   324    33    39   702     1     102  ;
 28642    39   325    13    39   702     1      36  int
 28643    39   325    17    39   702     1     111  lim
 28644    39   325    21    39   702     1      67  =
 28645    39   325    23    39   702     1     111  limit
 28646    39   325    28    39   702     1      59  (
 28647    39   325    29    39   702     1      60  )
 28648    39   325    30    39   702     1     102  ;
 28649    39   326    13    39   702     0     111  assert
 28650    39   326    20    39   702     0      59  (
 28651    39   326    21    39   702     0     111  pos
 28652    39   326    25    39   702     0      92  <=
 28653    39   326    28    39   702     0     111  lim
 28654    39   326    31    39   702     0      60  )
 28655    39   326    32    39   702     0     102  ;
 28656    39   327    13    39   702     0      36  int
 28657    39   327    17    39   702     0     111  rem
 28658    39   327    21    39   702     0      67  =
 28659    39   327    23    39   702     0      59  (
 28660    39   327    24    39   702     0     111  pos
 28661    39   327    28    39   702     0      92  <=
 28662    39   327    31    39   702     0     111  lim
 28663    39   327    35    39   702     0      58  ?
 28664    39   327    37    39   702     0     111  lim
 28665    39   327    41    39   702     0      77  -
 28666    39   327    43    39   702     0     111  pos
 28667    39   327    47    39   702     0      65  :
 28668    39   327    49    39   702     0     112  0
 28669    39   327    50    39   702     0      60  )
 28670    39   327    51    39   702     0     102  ;
 28671    39   328    13    39   702     0      31  if
 28672    39   328    16    39   702     0      59  (
 28673    39   328    17    39   702     0     111  length
 28674    39   328    24    39   702     0      89  >
 28675    39   328    26    39   702     0     111  rem
 28676    39   328    29    39   702     0      60  )
 28677    39   329    17    39   702     0      20  throw
 28678    39   329    27    39   702     0     111  BufferOverflowException
 28679    39   329    50    39   702     0      59  (
 28680    39   329    51    39   702     0      60  )
 28681    39   329    52    39   702     0     102  ;
 28682    39   331    13    39   702     0      31  if
 28683    39   331    16    39   702     0      59  (
 28684    39   331    17    39   702     0     111  order
 28685    39   331    22    39   702     0      59  (
 28686    39   331    23    39   702     0      60  )
 28687    39   331    25    39   702     0      71  !=
 28688    39   331    28    39   702     0     111  ByteOrder.nativeOrder
 28689    39   331    49    39   702     0      59  (
 28690    39   331    50    39   702     0      60  )
 28691    39   331    51    39   702     0      60  )
 28692    39   332    17    39   702     0     111  Bits.copyFromLongArray
 28693    39   332    39    39   702     0      59  (
 28694    39   332    40    39   702     0     111  src
 28695    39   332    43    39   702     0      66  ,
 28696    39   332    45    39   702     0     111  offset
 28697    39   332    52    39   702     0      90  <<
 28698    39   332    55    39   702     0     112  3
 28699    39   332    56    39   702     0      66  ,
 28700    39   333    45    39   702     0     111  ix
 28701    39   333    47    39   702     0      59  (
 28702    39   333    48    39   702     0     111  pos
 28703    39   333    51    39   702     0      60  )
 28704    39   333    52    39   702     0      66  ,
 28705    39   333    54    39   702     0     111  length
 28706    39   333    61    39   702     0      90  <<
 28707    39   333    64    39   702     0     112  3
 28708    39   333    65    39   702     0      60  )
 28709    39   333    66    39   702     0     102  ;
 28710    39   334    13    39   702     0      48  else
 28711    39   335    17    39   702     0     111  Bits.copyFromByteArray
 28712    39   335    39    39   702     0      59  (
 28713    39   335    40    39   702     0     111  src
 28714    39   335    43    39   702     0      66  ,
 28715    39   335    45    39   702     0     111  offset
 28716    39   335    52    39   702     0      90  <<
 28717    39   335    55    39   702     0     112  3
 28718    39   335    56    39   702     0      66  ,
 28719    39   336    40    39   702     0     111  ix
 28720    39   336    42    39   702     0      59  (
 28721    39   336    43    39   702     0     111  pos
 28722    39   336    46    39   702     0      60  )
 28723    39   336    47    39   702     0      66  ,
 28724    39   336    49    39   702     0     111  length
 28725    39   336    56    39   702     0      90  <<
 28726    39   336    59    39   702     0     112  3
 28727    39   336    60    39   702     0      60  )
 28728    39   336    61    39   702     0     102  ;
 28729    39   337    13    39   702     0     111  position
 28730    39   337    21    39   702     0      59  (
 28731    39   337    22    39   702     0     111  pos
 28732    39   337    26    39   702     0      74  +
 28733    39   337    28    39   702     0     111  length
 28734    39   337    34    39   702     0      60  )
 28735    39   337    35    39   702     0     102  ;
 28736    39   338     9    39   702     0      64  }
 28737    39   338    11    39   702     0      48  else
 28738    39   338    16    39   702     0      63  {
 28739    39   339    13    39   702     0     111  super.put
 28740    39   339    22    39   702     0      59  (
 28741    39   339    23    39   702     0     111  src
 28742    39   339    26    39   702     0      66  ,
 28743    39   339    28    39   702     0     111  offset
 28744    39   339    34    39   702     0      66  ,
 28745    39   339    36    39   702     0     111  length
 28746    39   339    42    39   702     0      60  )
 28747    39   339    43    39   702     0     102  ;
 28748    39   340     9    39   702     0      64  }
 28749    39   341     9    39   702     0      19  return
 28750    39   341    16    39   702     0      44  this
 28751    39   341    20    39   702     0     102  ;
 28752    39   345     5    39   702     0      64  }
 28753    39   345     5    39   702     0    1684  ENDMETHOD
 28754    39   345     5    39   703     0    1685  STARTMETHOD
 28755    39   347    12    39   703     0     111  DoubleBuffer
 28756    39   347    25    39   703     0     111  compact
 28757    39   347    32    39   703     0      59  (
 28758    39   347    33    39   703     0      60  )
 28759    39   347    35    39   703     0      63  {
 28760    39   349     9    39   703     1      36  int
 28761    39   349    13    39   703     1     111  pos
 28762    39   349    17    39   703     1      67  =
 28763    39   349    19    39   703     1     111  position
 28764    39   349    27    39   703     1      59  (
 28765    39   349    28    39   703     1      60  )
 28766    39   349    29    39   703     1     102  ;
 28767    39   350     9    39   703     1      36  int
 28768    39   350    13    39   703     1     111  lim
 28769    39   350    17    39   703     1      67  =
 28770    39   350    19    39   703     1     111  limit
 28771    39   350    24    39   703     1      59  (
 28772    39   350    25    39   703     1      60  )
 28773    39   350    26    39   703     1     102  ;
 28774    39   351     9    39   703     0     111  assert
 28775    39   351    16    39   703     0      59  (
 28776    39   351    17    39   703     0     111  pos
 28777    39   351    21    39   703     0      92  <=
 28778    39   351    24    39   703     0     111  lim
 28779    39   351    27    39   703     0      60  )
 28780    39   351    28    39   703     0     102  ;
 28781    39   352     9    39   703     0      36  int
 28782    39   352    13    39   703     0     111  rem
 28783    39   352    17    39   703     0      67  =
 28784    39   352    19    39   703     0      59  (
 28785    39   352    20    39   703     0     111  pos
 28786    39   352    24    39   703     0      92  <=
 28787    39   352    27    39   703     0     111  lim
 28788    39   352    31    39   703     0      58  ?
 28789    39   352    33    39   703     0     111  lim
 28790    39   352    37    39   703     0      77  -
 28791    39   352    39    39   703     0     111  pos
 28792    39   352    43    39   703     0      65  :
 28793    39   352    45    39   703     0     112  0
 28794    39   352    46    39   703     0      60  )
 28795    39   352    47    39   703     0     102  ;
 28796    39   354     9    39   703     0     111  unsafe.copyMemory
 28797    39   354    26    39   703     0      59  (
 28798    39   354    27    39   703     0     111  ix
 28799    39   354    29    39   703     0      59  (
 28800    39   354    30    39   703     0     111  pos
 28801    39   354    33    39   703     0      60  )
 28802    39   354    34    39   703     0      66  ,
 28803    39   354    36    39   703     0     111  ix
 28804    39   354    38    39   703     0      59  (
 28805    39   354    39    39   703     0     112  0
 28806    39   354    40    39   703     0      60  )
 28807    39   354    41    39   703     0      66  ,
 28808    39   354    43    39   703     0     111  rem
 28809    39   354    47    39   703     0      90  <<
 28810    39   354    50    39   703     0     112  3
 28811    39   354    51    39   703     0      60  )
 28812    39   354    52    39   703     0     102  ;
 28813    39   355     9    39   703     0     111  position
 28814    39   355    17    39   703     0      59  (
 28815    39   355    18    39   703     0     111  rem
 28816    39   355    21    39   703     0      60  )
 28817    39   355    22    39   703     0     102  ;
 28818    39   356     9    39   703     0     111  limit
 28819    39   356    14    39   703     0      59  (
 28820    39   356    15    39   703     0     111  capacity
 28821    39   356    23    39   703     0      59  (
 28822    39   356    24    39   703     0      60  )
 28823    39   356    25    39   703     0      60  )
 28824    39   356    26    39   703     0     102  ;
 28825    39   357     9    39   703     0     111  clearMark
 28826    39   357    18    39   703     0      59  (
 28827    39   357    19    39   703     0      60  )
 28828    39   357    20    39   703     0     102  ;
 28829    39   358     9    39   703     0      19  return
 28830    39   358    16    39   703     0      44  this
 28831    39   358    20    39   703     1     102  ;
 28832    39   362     5    39   703     1      64  }
 28833    39   362     5    39   703     0    1686  ENDMETHOD
 28834    39   362     5    39   704     0    1687  STARTMETHOD
 28835    39   364    12    39   704     0      39  boolean
 28836    39   364    20    39   704     0     111  isDirect
 28837    39   364    28    39   704     0      59  (
 28838    39   364    29    39   704     0      60  )
 28839    39   364    31    39   704     0      63  {
 28840    39   365     9    39   704     0      19  return
 28841    39   365    16    39   704     0      52  true
 28842    39   365    20    39   704     1     102  ;
 28843    39   366     5    39   704     1      64  }
 28844    39   366     5    39   704     0    1688  ENDMETHOD
 28845    39   366     5    39   705     0    1689  STARTMETHOD
 28846    39   368    12    39   705     0      39  boolean
 28847    39   368    20    39   705     0     111  isReadOnly
 28848    39   368    30    39   705     0      59  (
 28849    39   368    31    39   705     0      60  )
 28850    39   368    33    39   705     0      63  {
 28851    39   369     9    39   705     0      19  return
 28852    39   369    16    39   705     0      43  false
 28853    39   369    21    39   705     1     102  ;
 28854    39   370     5    39   705     1      64  }
 28855    39   370     5    39   705     0    1690  ENDMETHOD
 28856    39   370     5    39   706     0    1691  STARTMETHOD
 28857    39   416    12    39   706     0     111  ByteOrder
 28858    39   416    22    39   706     0     111  order
 28859    39   416    27    39   706     0      59  (
 28860    39   416    28    39   706     0      60  )
 28861    39   416    30    39   706     0      63  {
 28862    39   418     9    39   706     0      19  return
 28863    39   418    16    39   706     0      59  (
 28864    39   418    17    39   706     0      59  (
 28865    39   418    18    39   706     0     111  ByteOrder.nativeOrder
 28866    39   418    39    39   706     0      59  (
 28867    39   418    40    39   706     0      60  )
 28868    39   418    42    39   706     0      68  ==
 28869    39   418    45    39   706     0     111  ByteOrder.BIG_ENDIAN
 28870    39   418    65    39   706     0      60  )
 28871    39   419    17    39   706     0      58  ?
 28872    39   419    19    39   706     0     111  ByteOrder.LITTLE_ENDIAN
 28873    39   419    43    39   706     0      65  :
 28874    39   419    45    39   706     0     111  ByteOrder.BIG_ENDIAN
 28875    39   419    65    39   706     0      60  )
 28876    39   419    66    39   706     0     102  ;
 28877    39   425     5    39   706     0      64  }
 28878    39   425     5    39   706     0    1692  ENDMETHOD
 28879    39   452     1    39    -1     0      64  }
 28880    39   452     1    39    -1     1    1693  ENDCLASS
 28881    39   452     1    -1    -1     1    1694  ENDFILE C:\Users\RA\javasrc\java\nio\DirectDoubleBufferS.java
 28882    40     1     1    -1    -1     1    1695  STARTFILE C:\Users\RA\javasrc\java\nio\DirectDoubleBufferU.java
 28883    40    28     9    -1    -1     0     111  java.nio
 28884    40    28    17    -1    -1     0     102  ;
 28885    40    30     1    -1    -1     1      49  import
 28886    40    30     8    -1    -1     1     111  sun.misc.Cleaner
 28887    40    30    24    -1    -1     1     102  ;
 28888    40    31     1    -1    -1     1      49  import
 28889    40    31     8    -1    -1     1     111  sun.misc.Unsafe
 28890    40    31    23    -1    -1     1     102  ;
 28891    40    32     1    -1    -1     1      49  import
 28892    40    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 28893    40    32    31    -1    -1     1     102  ;
 28894    40    33     1    -1    -1     1      49  import
 28895    40    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 28896    40    33    34    -1    -1     1     102  ;
 28897    40    36     1    40    -1     0    1696  STARTCLASS
 28898    40    36     1    40    -1     0      24  class
 28899    40    36     7    40    -1     0     111  DirectDoubleBufferU
 28900    40    38     5    40    -1     0      38  extends
 28901    40    38    13    40    -1     0     111  DoubleBuffer
 28902    40    42     5    40    -1     0      17  implements
 28903    40    42    16    40    -1     0     111  DirectBuffer
 28904    40    43     1    40    -1     0      63  {
 28905    40    48     5    40    -1     0      23  protected
 28906    40    48    15    40    -1     0      45  static
 28907    40    48    28    40    -1     0     111  Unsafe
 28908    40    48    35    40    -1     0     111  unsafe
 28909    40    48    42    40    -1     0      67  =
 28910    40    48    44    40    -1     0     111  Bits.unsafe
 28911    40    48    55    40    -1     0      59  (
 28912    40    48    56    40    -1     0      60  )
 28913    40    48    57    40    -1     0     102  ;
 28914    40    51     5    40    -1     0      23  protected
 28915    40    51    15    40    -1     0      45  static
 28916    40    51    28    40    -1     0      39  boolean
 28917    40    51    36    40    -1     0     111  unaligned
 28918    40    51    46    40    -1     0      67  =
 28919    40    51    48    40    -1     0     111  Bits.unaligned
 28920    40    51    62    40    -1     0      59  (
 28921    40    51    63    40    -1     0      60  )
 28922    40    51    64    40    -1     0     102  ;
 28923    40    59     5    40    -1     0      23  protected
 28924    40    59    15    40    -1     0     111  Object
 28925    40    59    22    40    -1     0     111  viewedBuffer
 28926    40    59    35    40    -1     0      67  =
 28927    40    59    37    40    -1     0      21  null
 28928    40    59    41    40    -1     0     102  ;
 28929    40    59    41    40   707     0    1697  STARTMETHOD
 28930    40    61    12    40   707     0     111  Object
 28931    40    61    19    40   707     0     111  viewedBuffer
 28932    40    61    31    40   707     0      59  (
 28933    40    61    32    40   707     0      60  )
 28934    40    61    34    40   707     0      63  {
 28935    40    62     9    40   707     0      19  return
 28936    40    62    16    40   707     0     111  viewedBuffer
 28937    40    62    28    40   707     0     102  ;
 28938    40    63     5    40   707     0      64  }
 28939    40    63     5    40   707     0    1698  ENDMETHOD
 28940    40    63     5    40   708     0    1699  STARTMETHOD
 28941    40   100    12    40   708     0     111  Cleaner
 28942    40   100    20    40   708     0     111  cleaner
 28943    40   100    27    40   708     0      59  (
 28944    40   100    28    40   708     0      60  )
 28945    40   100    30    40   708     0      63  {
 28946    40   100    32    40   708     0      19  return
 28947    40   100    39    40   708     0      21  null
 28948    40   100    43    40   708     0     102  ;
 28949    40   100    45    40   708     0      64  }
 28950    40   100    45    40   708     0    1700  ENDMETHOD
 28951    40   100    45    40   709     0    1701  STARTMETHOD
 28952    40   164     5    40   709     0     111  DirectDoubleBufferU
 28953    40   164    24    40   709     0      59  (
 28954    40   164    25    40   709     0     111  DirectBuffer
 28955    40   164    38    40   709     0     111  db
 28956    40   164    40    40   709     0      66  ,
 28957    40   165    32    40   709     0      36  int
 28958    40   165    36    40   709     0     111  mark
 28959    40   165    40    40   709     0      66  ,
 28960    40   165    42    40   709     0      36  int
 28961    40   165    46    40   709     0     111  pos
 28962    40   165    49    40   709     0      66  ,
 28963    40   165    51    40   709     0      36  int
 28964    40   165    55    40   709     0     111  lim
 28965    40   165    58    40   709     0      66  ,
 28966    40   165    60    40   709     0      36  int
 28967    40   165    64    40   709     0     111  cap
 28968    40   165    67    40   709     0      66  ,
 28969    40   166    32    40   709     0      36  int
 28970    40   166    36    40   709     0     111  off
 28971    40   166    39    40   709     0      60  )
 28972    40   167     5    40   709     0      63  {
 28973    40   169     9    40   709     0      27  super
 28974    40   169    14    40   709     0      59  (
 28975    40   169    15    40   709     0     111  mark
 28976    40   169    19    40   709     0      66  ,
 28977    40   169    21    40   709     0     111  pos
 28978    40   169    24    40   709     0      66  ,
 28979    40   169    26    40   709     0     111  lim
 28980    40   169    29    40   709     0      66  ,
 28981    40   169    31    40   709     0     111  cap
 28982    40   169    34    40   709     0      60  )
 28983    40   169    35    40   709     0     102  ;
 28984    40   170     9    40   709     0     111  address
 28985    40   170    17    40   709     0      67  =
 28986    40   170    19    40   709     0     111  db.address
 28987    40   170    29    40   709     0      59  (
 28988    40   170    30    40   709     0      60  )
 28989    40   170    32    40   709     0      74  +
 28990    40   170    34    40   709     0     111  off
 28991    40   170    37    40   709     0     102  ;
 28992    40   171     9    40   709     0     111  viewedBuffer
 28993    40   171    22    40   709     0      67  =
 28994    40   171    24    40   709     0     111  db
 28995    40   171    26    40   709     0     102  ;
 28996    40   178     5    40   709     0      64  }
 28997    40   178     5    40   709     0    1702  ENDMETHOD
 28998    40   178     5    40   710     0    1703  STARTMETHOD
 28999    40   180    12    40   710     0     111  DoubleBuffer
 29000    40   180    25    40   710     0     111  slice
 29001    40   180    30    40   710     0      59  (
 29002    40   180    31    40   710     0      60  )
 29003    40   180    33    40   710     0      63  {
 29004    40   181     9    40   710     1      36  int
 29005    40   181    13    40   710     1     111  pos
 29006    40   181    17    40   710     1      67  =
 29007    40   181    19    40   710     1     111  this.position
 29008    40   181    32    40   710     1      59  (
 29009    40   181    33    40   710     1      60  )
 29010    40   181    34    40   710     1     102  ;
 29011    40   182     9    40   710     1      36  int
 29012    40   182    13    40   710     1     111  lim
 29013    40   182    17    40   710     1      67  =
 29014    40   182    19    40   710     1     111  this.limit
 29015    40   182    29    40   710     1      59  (
 29016    40   182    30    40   710     1      60  )
 29017    40   182    31    40   710     1     102  ;
 29018    40   183     9    40   710     0     111  assert
 29019    40   183    16    40   710     0      59  (
 29020    40   183    17    40   710     0     111  pos
 29021    40   183    21    40   710     0      92  <=
 29022    40   183    24    40   710     0     111  lim
 29023    40   183    27    40   710     0      60  )
 29024    40   183    28    40   710     0     102  ;
 29025    40   184     9    40   710     0      36  int
 29026    40   184    13    40   710     0     111  rem
 29027    40   184    17    40   710     0      67  =
 29028    40   184    19    40   710     0      59  (
 29029    40   184    20    40   710     0     111  pos
 29030    40   184    24    40   710     0      92  <=
 29031    40   184    27    40   710     0     111  lim
 29032    40   184    31    40   710     0      58  ?
 29033    40   184    33    40   710     0     111  lim
 29034    40   184    37    40   710     0      77  -
 29035    40   184    39    40   710     0     111  pos
 29036    40   184    43    40   710     0      65  :
 29037    40   184    45    40   710     0     112  0
 29038    40   184    46    40   710     0      60  )
 29039    40   184    47    40   710     0     102  ;
 29040    40   185     9    40   710     0      36  int
 29041    40   185    13    40   710     0     111  off
 29042    40   185    17    40   710     0      67  =
 29043    40   185    19    40   710     0      59  (
 29044    40   185    20    40   710     0     111  pos
 29045    40   185    24    40   710     0      90  <<
 29046    40   185    27    40   710     0     112  3
 29047    40   185    28    40   710     0      60  )
 29048    40   185    29    40   710     0     102  ;
 29049    40   186     9    40   710     0     111  assert
 29050    40   186    16    40   710     0      59  (
 29051    40   186    17    40   710     0     111  off
 29052    40   186    21    40   710     0      88  >=
 29053    40   186    24    40   710     0     112  0
 29054    40   186    25    40   710     0      60  )
 29055    40   186    26    40   710     0     102  ;
 29056    40   187     9    40   710     0      19  return
 29057    40   187    20    40   710     0     111  DirectDoubleBufferU
 29058    40   187    39    40   710     0      59  (
 29059    40   187    40    40   710     0      44  this
 29060    40   187    44    40   710     0      66  ,
 29061    40   187    46    40   710     0      77  -
 29062    40   187    47    40   710     0     112  1
 29063    40   187    48    40   710     0      66  ,
 29064    40   187    50    40   710     0     112  0
 29065    40   187    51    40   710     0      66  ,
 29066    40   187    53    40   710     0     111  rem
 29067    40   187    56    40   710     0      66  ,
 29068    40   187    58    40   710     0     111  rem
 29069    40   187    61    40   710     0      66  ,
 29070    40   187    63    40   710     0     111  off
 29071    40   187    66    40   710     0      60  )
 29072    40   187    67    40   710     0     102  ;
 29073    40   188     5    40   710     0      64  }
 29074    40   188     5    40   710     0    1704  ENDMETHOD
 29075    40   188     5    40   711     0    1705  STARTMETHOD
 29076    40   190    12    40   711     0     111  DoubleBuffer
 29077    40   190    25    40   711     0     111  duplicate
 29078    40   190    34    40   711     0      59  (
 29079    40   190    35    40   711     0      60  )
 29080    40   190    37    40   711     0      63  {
 29081    40   191     9    40   711     0      19  return
 29082    40   191    20    40   711     0     111  DirectDoubleBufferU
 29083    40   191    39    40   711     0      59  (
 29084    40   191    40    40   711     0      44  this
 29085    40   191    44    40   711     0      66  ,
 29086    40   192    47    40   711     1     111  this.markValue
 29087    40   192    61    40   711     1      59  (
 29088    40   192    62    40   711     1      60  )
 29089    40   192    63    40   711     1      66  ,
 29090    40   193    47    40   711     1     111  this.position
 29091    40   193    60    40   711     1      59  (
 29092    40   193    61    40   711     1      60  )
 29093    40   193    62    40   711     1      66  ,
 29094    40   194    47    40   711     1     111  this.limit
 29095    40   194    57    40   711     1      59  (
 29096    40   194    58    40   711     1      60  )
 29097    40   194    59    40   711     1      66  ,
 29098    40   195    47    40   711     1     111  this.capacity
 29099    40   195    60    40   711     1      59  (
 29100    40   195    61    40   711     1      60  )
 29101    40   195    62    40   711     1      66  ,
 29102    40   196    47    40   711     0     112  0
 29103    40   196    48    40   711     0      60  )
 29104    40   196    49    40   711     0     102  ;
 29105    40   197     5    40   711     0      64  }
 29106    40   197     5    40   711     0    1706  ENDMETHOD
 29107    40   197     5    40   712     0    1707  STARTMETHOD
 29108    40   199    12    40   712     0     111  DoubleBuffer
 29109    40   199    25    40   712     0     111  asReadOnlyBuffer
 29110    40   199    41    40   712     0      59  (
 29111    40   199    42    40   712     0      60  )
 29112    40   199    44    40   712     0      63  {
 29113    40   201     9    40   712     0      19  return
 29114    40   201    20    40   712     0     111  DirectDoubleBufferRU
 29115    40   201    40    40   712     0      59  (
 29116    40   201    41    40   712     0      44  this
 29117    40   201    45    40   712     0      66  ,
 29118    40   202    44    40   712     1     111  this.markValue
 29119    40   202    58    40   712     1      59  (
 29120    40   202    59    40   712     1      60  )
 29121    40   202    60    40   712     1      66  ,
 29122    40   203    44    40   712     1     111  this.position
 29123    40   203    57    40   712     1      59  (
 29124    40   203    58    40   712     1      60  )
 29125    40   203    59    40   712     1      66  ,
 29126    40   204    44    40   712     1     111  this.limit
 29127    40   204    54    40   712     1      59  (
 29128    40   204    55    40   712     1      60  )
 29129    40   204    56    40   712     1      66  ,
 29130    40   205    44    40   712     1     111  this.capacity
 29131    40   205    57    40   712     1      59  (
 29132    40   205    58    40   712     1      60  )
 29133    40   205    59    40   712     1      66  ,
 29134    40   206    44    40   712     0     112  0
 29135    40   206    45    40   712     0      60  )
 29136    40   206    46    40   712     0     102  ;
 29137    40   210     5    40   712     0      64  }
 29138    40   210     5    40   712     0    1708  ENDMETHOD
 29139    40   210     5    40   713     0    1709  STARTMETHOD
 29140    40   214    12    40   713     0      53  long
 29141    40   214    17    40   713     0     111  address
 29142    40   214    24    40   713     0      59  (
 29143    40   214    25    40   713     0      60  )
 29144    40   214    27    40   713     0      63  {
 29145    40   215     9    40   713     0      19  return
 29146    40   215    16    40   713     0     111  address
 29147    40   215    23    40   713     0     102  ;
 29148    40   216     5    40   713     0      64  }
 29149    40   216     5    40   713     0    1710  ENDMETHOD
 29150    40   216     5    40   714     0    1711  STARTMETHOD
 29151    40   218     5    40   714     0      41  private
 29152    40   218    13    40   714     0      53  long
 29153    40   218    18    40   714     0     111  ix
 29154    40   218    20    40   714     0      59  (
 29155    40   218    21    40   714     0      36  int
 29156    40   218    25    40   714     0     111  i
 29157    40   218    26    40   714     0      60  )
 29158    40   218    28    40   714     0      63  {
 29159    40   219     9    40   714     0      19  return
 29160    40   219    16    40   714     0     111  address
 29161    40   219    24    40   714     0      74  +
 29162    40   219    26    40   714     0      59  (
 29163    40   219    27    40   714     0     111  i
 29164    40   219    29    40   714     0      90  <<
 29165    40   219    32    40   714     0     112  3
 29166    40   219    33    40   714     0      60  )
 29167    40   219    34    40   714     0     102  ;
 29168    40   220     5    40   714     0      64  }
 29169    40   220     5    40   714     0    1712  ENDMETHOD
 29170    40   220     5    40   715     0    1713  STARTMETHOD
 29171    40   222    12    40   715     0      32  double
 29172    40   222    19    40   715     0     111  get
 29173    40   222    22    40   715     0      59  (
 29174    40   222    23    40   715     0      60  )
 29175    40   222    25    40   715     0      63  {
 29176    40   223     9    40   715     0      19  return
 29177    40   223    16    40   715     0      59  (
 29178    40   223    17    40   715     0      59  (
 29179    40   223    18    40   715     0     111  unsafe.getDouble
 29180    40   223    34    40   715     0      59  (
 29181    40   223    35    40   715     0     111  ix
 29182    40   223    37    40   715     0      59  (
 29183    40   223    38    40   715     0     111  nextGetIndex
 29184    40   223    50    40   715     0      59  (
 29185    40   223    51    40   715     0      60  )
 29186    40   223    52    40   715     0      60  )
 29187    40   223    53    40   715     0      60  )
 29188    40   223    54    40   715     0      60  )
 29189    40   223    55    40   715     0      60  )
 29190    40   223    56    40   715     0     102  ;
 29191    40   224     5    40   715     0      64  }
 29192    40   224     5    40   715     0    1714  ENDMETHOD
 29193    40   224     5    40   716     0    1715  STARTMETHOD
 29194    40   226    12    40   716     0      32  double
 29195    40   226    19    40   716     0     111  get
 29196    40   226    22    40   716     0      59  (
 29197    40   226    23    40   716     0      36  int
 29198    40   226    27    40   716     0     111  i
 29199    40   226    28    40   716     0      60  )
 29200    40   226    30    40   716     0      63  {
 29201    40   227     9    40   716     0      19  return
 29202    40   227    16    40   716     0      59  (
 29203    40   227    17    40   716     0      59  (
 29204    40   227    18    40   716     0     111  unsafe.getDouble
 29205    40   227    34    40   716     0      59  (
 29206    40   227    35    40   716     0     111  ix
 29207    40   227    37    40   716     0      59  (
 29208    40   227    38    40   716     0     111  checkIndex
 29209    40   227    48    40   716     0      59  (
 29210    40   227    49    40   716     0     111  i
 29211    40   227    50    40   716     0      60  )
 29212    40   227    51    40   716     0      60  )
 29213    40   227    52    40   716     0      60  )
 29214    40   227    53    40   716     0      60  )
 29215    40   227    54    40   716     0      60  )
 29216    40   227    55    40   716     0     102  ;
 29217    40   228     5    40   716     0      64  }
 29218    40   228     5    40   716     0    1716  ENDMETHOD
 29219    40   228     5    40   717     0    1717  STARTMETHOD
 29220    40   230    12    40   717     0     111  DoubleBuffer
 29221    40   230    25    40   717     0     111  get
 29222    40   230    28    40   717     0      59  (
 29223    40   230    29    40   717     0      32  double
 29224    40   230    35    40   717     0      61  [
 29225    40   230    36    40   717     0      62  ]
 29226    40   230    38    40   717     0     111  dst
 29227    40   230    41    40   717     0      66  ,
 29228    40   230    43    40   717     0      36  int
 29229    40   230    47    40   717     0     111  offset
 29230    40   230    53    40   717     0      66  ,
 29231    40   230    55    40   717     0      36  int
 29232    40   230    59    40   717     0     111  length
 29233    40   230    65    40   717     0      60  )
 29234    40   230    67    40   717     0      63  {
 29235    40   232     9    40   717     0      31  if
 29236    40   232    12    40   717     0      59  (
 29237    40   232    13    40   717     0      59  (
 29238    40   232    14    40   717     0     111  length
 29239    40   232    21    40   717     0      90  <<
 29240    40   232    24    40   717     0     112  3
 29241    40   232    25    40   717     0      60  )
 29242    40   232    27    40   717     0      89  >
 29243    40   232    29    40   717     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 29244    40   232    61    40   717     0      60  )
 29245    40   232    63    40   717     0      63  {
 29246    40   233    13    40   717     0     111  checkBounds
 29247    40   233    24    40   717     0      59  (
 29248    40   233    25    40   717     0     111  offset
 29249    40   233    31    40   717     0      66  ,
 29250    40   233    33    40   717     0     111  length
 29251    40   233    39    40   717     0      66  ,
 29252    40   233    41    40   717     0     111  dst.length
 29253    40   233    51    40   717     0      60  )
 29254    40   233    52    40   717     0     102  ;
 29255    40   234    13    40   717     1      36  int
 29256    40   234    17    40   717     1     111  pos
 29257    40   234    21    40   717     1      67  =
 29258    40   234    23    40   717     1     111  position
 29259    40   234    31    40   717     1      59  (
 29260    40   234    32    40   717     1      60  )
 29261    40   234    33    40   717     1     102  ;
 29262    40   235    13    40   717     1      36  int
 29263    40   235    17    40   717     1     111  lim
 29264    40   235    21    40   717     1      67  =
 29265    40   235    23    40   717     1     111  limit
 29266    40   235    28    40   717     1      59  (
 29267    40   235    29    40   717     1      60  )
 29268    40   235    30    40   717     1     102  ;
 29269    40   236    13    40   717     0     111  assert
 29270    40   236    20    40   717     0      59  (
 29271    40   236    21    40   717     0     111  pos
 29272    40   236    25    40   717     0      92  <=
 29273    40   236    28    40   717     0     111  lim
 29274    40   236    31    40   717     0      60  )
 29275    40   236    32    40   717     0     102  ;
 29276    40   237    13    40   717     0      36  int
 29277    40   237    17    40   717     0     111  rem
 29278    40   237    21    40   717     0      67  =
 29279    40   237    23    40   717     0      59  (
 29280    40   237    24    40   717     0     111  pos
 29281    40   237    28    40   717     0      92  <=
 29282    40   237    31    40   717     0     111  lim
 29283    40   237    35    40   717     0      58  ?
 29284    40   237    37    40   717     0     111  lim
 29285    40   237    41    40   717     0      77  -
 29286    40   237    43    40   717     0     111  pos
 29287    40   237    47    40   717     0      65  :
 29288    40   237    49    40   717     0     112  0
 29289    40   237    50    40   717     0      60  )
 29290    40   237    51    40   717     0     102  ;
 29291    40   238    13    40   717     0      31  if
 29292    40   238    16    40   717     0      59  (
 29293    40   238    17    40   717     0     111  length
 29294    40   238    24    40   717     0      89  >
 29295    40   238    26    40   717     0     111  rem
 29296    40   238    29    40   717     0      60  )
 29297    40   239    17    40   717     0      20  throw
 29298    40   239    27    40   717     0     111  BufferUnderflowException
 29299    40   239    51    40   717     0      59  (
 29300    40   239    52    40   717     0      60  )
 29301    40   239    53    40   717     0     102  ;
 29302    40   241    13    40   717     0      31  if
 29303    40   241    16    40   717     0      59  (
 29304    40   241    17    40   717     0     111  order
 29305    40   241    22    40   717     0      59  (
 29306    40   241    23    40   717     0      60  )
 29307    40   241    25    40   717     0      71  !=
 29308    40   241    28    40   717     0     111  ByteOrder.nativeOrder
 29309    40   241    49    40   717     0      59  (
 29310    40   241    50    40   717     0      60  )
 29311    40   241    51    40   717     0      60  )
 29312    40   242    17    40   717     0     111  Bits.copyToLongArray
 29313    40   242    37    40   717     0      59  (
 29314    40   242    38    40   717     0     111  ix
 29315    40   242    40    40   717     0      59  (
 29316    40   242    41    40   717     0     111  pos
 29317    40   242    44    40   717     0      60  )
 29318    40   242    45    40   717     0      66  ,
 29319    40   242    47    40   717     0     111  dst
 29320    40   242    50    40   717     0      66  ,
 29321    40   243    43    40   717     0     111  offset
 29322    40   243    50    40   717     0      90  <<
 29323    40   243    53    40   717     0     112  3
 29324    40   243    54    40   717     0      66  ,
 29325    40   244    43    40   717     0     111  length
 29326    40   244    50    40   717     0      90  <<
 29327    40   244    53    40   717     0     112  3
 29328    40   244    54    40   717     0      60  )
 29329    40   244    55    40   717     0     102  ;
 29330    40   245    13    40   717     0      48  else
 29331    40   246    17    40   717     0     111  Bits.copyToByteArray
 29332    40   246    37    40   717     0      59  (
 29333    40   246    38    40   717     0     111  ix
 29334    40   246    40    40   717     0      59  (
 29335    40   246    41    40   717     0     111  pos
 29336    40   246    44    40   717     0      60  )
 29337    40   246    45    40   717     0      66  ,
 29338    40   246    47    40   717     0     111  dst
 29339    40   246    50    40   717     0      66  ,
 29340    40   247    38    40   717     0     111  offset
 29341    40   247    45    40   717     0      90  <<
 29342    40   247    48    40   717     0     112  3
 29343    40   247    49    40   717     0      66  ,
 29344    40   248    38    40   717     0     111  length
 29345    40   248    45    40   717     0      90  <<
 29346    40   248    48    40   717     0     112  3
 29347    40   248    49    40   717     0      60  )
 29348    40   248    50    40   717     0     102  ;
 29349    40   249    13    40   717     0     111  position
 29350    40   249    21    40   717     0      59  (
 29351    40   249    22    40   717     0     111  pos
 29352    40   249    26    40   717     0      74  +
 29353    40   249    28    40   717     0     111  length
 29354    40   249    34    40   717     0      60  )
 29355    40   249    35    40   717     0     102  ;
 29356    40   250     9    40   717     0      64  }
 29357    40   250    11    40   717     0      48  else
 29358    40   250    16    40   717     0      63  {
 29359    40   251    13    40   717     0     111  super.get
 29360    40   251    22    40   717     0      59  (
 29361    40   251    23    40   717     0     111  dst
 29362    40   251    26    40   717     0      66  ,
 29363    40   251    28    40   717     0     111  offset
 29364    40   251    34    40   717     0      66  ,
 29365    40   251    36    40   717     0     111  length
 29366    40   251    42    40   717     0      60  )
 29367    40   251    43    40   717     0     102  ;
 29368    40   252     9    40   717     0      64  }
 29369    40   253     9    40   717     0      19  return
 29370    40   253    16    40   717     0      44  this
 29371    40   253    20    40   717     0     102  ;
 29372    40   257     5    40   717     0      64  }
 29373    40   257     5    40   717     0    1718  ENDMETHOD
 29374    40   257     5    40   718     0    1719  STARTMETHOD
 29375    40   261    12    40   718     0     111  DoubleBuffer
 29376    40   261    25    40   718     0     111  put
 29377    40   261    28    40   718     0      59  (
 29378    40   261    29    40   718     0      32  double
 29379    40   261    36    40   718     0     111  x
 29380    40   261    37    40   718     0      60  )
 29381    40   261    39    40   718     0      63  {
 29382    40   263     9    40   718     0     111  unsafe.putDouble
 29383    40   263    25    40   718     0      59  (
 29384    40   263    26    40   718     0     111  ix
 29385    40   263    28    40   718     0      59  (
 29386    40   263    29    40   718     0     111  nextPutIndex
 29387    40   263    41    40   718     0      59  (
 29388    40   263    42    40   718     0      60  )
 29389    40   263    43    40   718     0      60  )
 29390    40   263    44    40   718     0      66  ,
 29391    40   263    46    40   718     0      59  (
 29392    40   263    47    40   718     0      59  (
 29393    40   263    48    40   718     0     111  x
 29394    40   263    49    40   718     0      60  )
 29395    40   263    50    40   718     0      60  )
 29396    40   263    51    40   718     0      60  )
 29397    40   263    52    40   718     0     102  ;
 29398    40   264     9    40   718     0      19  return
 29399    40   264    16    40   718     0      44  this
 29400    40   264    20    40   718     0     102  ;
 29401    40   268     5    40   718     0      64  }
 29402    40   268     5    40   718     0    1720  ENDMETHOD
 29403    40   268     5    40   719     0    1721  STARTMETHOD
 29404    40   270    12    40   719     0     111  DoubleBuffer
 29405    40   270    25    40   719     0     111  put
 29406    40   270    28    40   719     0      59  (
 29407    40   270    29    40   719     0      36  int
 29408    40   270    33    40   719     0     111  i
 29409    40   270    34    40   719     0      66  ,
 29410    40   270    36    40   719     0      32  double
 29411    40   270    43    40   719     0     111  x
 29412    40   270    44    40   719     0      60  )
 29413    40   270    46    40   719     0      63  {
 29414    40   272     9    40   719     0     111  unsafe.putDouble
 29415    40   272    25    40   719     0      59  (
 29416    40   272    26    40   719     0     111  ix
 29417    40   272    28    40   719     0      59  (
 29418    40   272    29    40   719     0     111  checkIndex
 29419    40   272    39    40   719     0      59  (
 29420    40   272    40    40   719     0     111  i
 29421    40   272    41    40   719     0      60  )
 29422    40   272    42    40   719     0      60  )
 29423    40   272    43    40   719     0      66  ,
 29424    40   272    45    40   719     0      59  (
 29425    40   272    46    40   719     0      59  (
 29426    40   272    47    40   719     0     111  x
 29427    40   272    48    40   719     0      60  )
 29428    40   272    49    40   719     0      60  )
 29429    40   272    50    40   719     0      60  )
 29430    40   272    51    40   719     0     102  ;
 29431    40   273     9    40   719     0      19  return
 29432    40   273    16    40   719     0      44  this
 29433    40   273    20    40   719     0     102  ;
 29434    40   277     5    40   719     0      64  }
 29435    40   277     5    40   719     0    1722  ENDMETHOD
 29436    40   277     5    40   720     0    1723  STARTMETHOD
 29437    40   279    12    40   720     0     111  DoubleBuffer
 29438    40   279    25    40   720     0     111  put
 29439    40   279    28    40   720     0      59  (
 29440    40   279    29    40   720     0     111  DoubleBuffer
 29441    40   279    42    40   720     0     111  src
 29442    40   279    45    40   720     0      60  )
 29443    40   279    47    40   720     0      63  {
 29444    40   281     9    40   720     0      31  if
 29445    40   281    12    40   720     0      59  (
 29446    40   281    13    40   720     0     111  src
 29447    40   281    28    40   720     0     111  DirectDoubleBufferU
 29448    40   281    47    40   720     0      60  )
 29449    40   281    49    40   720     0      63  {
 29450    40   282    13    40   720     0      31  if
 29451    40   282    16    40   720     0      59  (
 29452    40   282    17    40   720     0     111  src
 29453    40   282    21    40   720     0      68  ==
 29454    40   282    24    40   720     0      44  this
 29455    40   282    28    40   720     0      60  )
 29456    40   283    17    40   720     0      20  throw
 29457    40   283    27    40   720     0     111  IllegalArgumentException
 29458    40   283    51    40   720     0      59  (
 29459    40   283    52    40   720     0      60  )
 29460    40   283    53    40   720     0     102  ;
 29461    40   284    13    40   720     0     111  DirectDoubleBufferU
 29462    40   284    33    40   720     0     111  sb
 29463    40   284    36    40   720     0      67  =
 29464    40   284    38    40   720     0      59  (
 29465    40   284    39    40   720     0     111  DirectDoubleBufferU
 29466    40   284    58    40   720     0      60  )
 29467    40   284    59    40   720     0     111  src
 29468    40   284    62    40   720     0     102  ;
 29469    40   286    13    40   720     1      36  int
 29470    40   286    17    40   720     1     111  spos
 29471    40   286    22    40   720     1      67  =
 29472    40   286    24    40   720     1     111  sb.position
 29473    40   286    35    40   720     1      59  (
 29474    40   286    36    40   720     1      60  )
 29475    40   286    37    40   720     1     102  ;
 29476    40   287    13    40   720     1      36  int
 29477    40   287    17    40   720     1     111  slim
 29478    40   287    22    40   720     1      67  =
 29479    40   287    24    40   720     1     111  sb.limit
 29480    40   287    32    40   720     1      59  (
 29481    40   287    33    40   720     1      60  )
 29482    40   287    34    40   720     1     102  ;
 29483    40   288    13    40   720     0     111  assert
 29484    40   288    20    40   720     0      59  (
 29485    40   288    21    40   720     0     111  spos
 29486    40   288    26    40   720     0      92  <=
 29487    40   288    29    40   720     0     111  slim
 29488    40   288    33    40   720     0      60  )
 29489    40   288    34    40   720     0     102  ;
 29490    40   289    13    40   720     0      36  int
 29491    40   289    17    40   720     0     111  srem
 29492    40   289    22    40   720     0      67  =
 29493    40   289    24    40   720     0      59  (
 29494    40   289    25    40   720     0     111  spos
 29495    40   289    30    40   720     0      92  <=
 29496    40   289    33    40   720     0     111  slim
 29497    40   289    38    40   720     0      58  ?
 29498    40   289    40    40   720     0     111  slim
 29499    40   289    45    40   720     0      77  -
 29500    40   289    47    40   720     0     111  spos
 29501    40   289    52    40   720     0      65  :
 29502    40   289    54    40   720     0     112  0
 29503    40   289    55    40   720     0      60  )
 29504    40   289    56    40   720     0     102  ;
 29505    40   291    13    40   720     1      36  int
 29506    40   291    17    40   720     1     111  pos
 29507    40   291    21    40   720     1      67  =
 29508    40   291    23    40   720     1     111  position
 29509    40   291    31    40   720     1      59  (
 29510    40   291    32    40   720     1      60  )
 29511    40   291    33    40   720     1     102  ;
 29512    40   292    13    40   720     1      36  int
 29513    40   292    17    40   720     1     111  lim
 29514    40   292    21    40   720     1      67  =
 29515    40   292    23    40   720     1     111  limit
 29516    40   292    28    40   720     1      59  (
 29517    40   292    29    40   720     1      60  )
 29518    40   292    30    40   720     1     102  ;
 29519    40   293    13    40   720     0     111  assert
 29520    40   293    20    40   720     0      59  (
 29521    40   293    21    40   720     0     111  pos
 29522    40   293    25    40   720     0      92  <=
 29523    40   293    28    40   720     0     111  lim
 29524    40   293    31    40   720     0      60  )
 29525    40   293    32    40   720     0     102  ;
 29526    40   294    13    40   720     0      36  int
 29527    40   294    17    40   720     0     111  rem
 29528    40   294    21    40   720     0      67  =
 29529    40   294    23    40   720     0      59  (
 29530    40   294    24    40   720     0     111  pos
 29531    40   294    28    40   720     0      92  <=
 29532    40   294    31    40   720     0     111  lim
 29533    40   294    35    40   720     0      58  ?
 29534    40   294    37    40   720     0     111  lim
 29535    40   294    41    40   720     0      77  -
 29536    40   294    43    40   720     0     111  pos
 29537    40   294    47    40   720     0      65  :
 29538    40   294    49    40   720     0     112  0
 29539    40   294    50    40   720     0      60  )
 29540    40   294    51    40   720     0     102  ;
 29541    40   296    13    40   720     0      31  if
 29542    40   296    16    40   720     0      59  (
 29543    40   296    17    40   720     0     111  srem
 29544    40   296    22    40   720     0      89  >
 29545    40   296    24    40   720     0     111  rem
 29546    40   296    27    40   720     0      60  )
 29547    40   297    17    40   720     0      20  throw
 29548    40   297    27    40   720     0     111  BufferOverflowException
 29549    40   297    50    40   720     0      59  (
 29550    40   297    51    40   720     0      60  )
 29551    40   297    52    40   720     0     102  ;
 29552    40   298    13    40   720     0     111  unsafe.copyMemory
 29553    40   298    30    40   720     0      59  (
 29554    40   298    31    40   720     0     111  sb.ix
 29555    40   298    36    40   720     0      59  (
 29556    40   298    37    40   720     0     111  spos
 29557    40   298    41    40   720     0      60  )
 29558    40   298    42    40   720     0      66  ,
 29559    40   298    44    40   720     0     111  ix
 29560    40   298    46    40   720     0      59  (
 29561    40   298    47    40   720     0     111  pos
 29562    40   298    50    40   720     0      60  )
 29563    40   298    51    40   720     0      66  ,
 29564    40   298    53    40   720     0     111  srem
 29565    40   298    58    40   720     0      90  <<
 29566    40   298    61    40   720     0     112  3
 29567    40   298    62    40   720     0      60  )
 29568    40   298    63    40   720     0     102  ;
 29569    40   299    13    40   720     1     111  sb.position
 29570    40   299    24    40   720     1      59  (
 29571    40   299    25    40   720     1     111  spos
 29572    40   299    30    40   720     1      74  +
 29573    40   299    32    40   720     1     111  srem
 29574    40   299    36    40   720     1      60  )
 29575    40   299    37    40   720     1     102  ;
 29576    40   300    13    40   720     1     111  position
 29577    40   300    21    40   720     1      59  (
 29578    40   300    22    40   720     1     111  pos
 29579    40   300    26    40   720     1      74  +
 29580    40   300    28    40   720     1     111  srem
 29581    40   300    32    40   720     1      60  )
 29582    40   300    33    40   720     1     102  ;
 29583    40   301     9    40   720     0      64  }
 29584    40   301    11    40   720     0      48  else
 29585    40   301    16    40   720     0      31  if
 29586    40   301    19    40   720     0      59  (
 29587    40   301    20    40   720     0     111  src.hb
 29588    40   301    27    40   720     0      71  !=
 29589    40   301    30    40   720     0      21  null
 29590    40   301    34    40   720     0      60  )
 29591    40   301    36    40   720     0      63  {
 29592    40   303    13    40   720     1      36  int
 29593    40   303    17    40   720     1     111  spos
 29594    40   303    22    40   720     1      67  =
 29595    40   303    24    40   720     1     111  src.position
 29596    40   303    36    40   720     1      59  (
 29597    40   303    37    40   720     1      60  )
 29598    40   303    38    40   720     1     102  ;
 29599    40   304    13    40   720     1      36  int
 29600    40   304    17    40   720     1     111  slim
 29601    40   304    22    40   720     1      67  =
 29602    40   304    24    40   720     1     111  src.limit
 29603    40   304    33    40   720     1      59  (
 29604    40   304    34    40   720     1      60  )
 29605    40   304    35    40   720     1     102  ;
 29606    40   305    13    40   720     0     111  assert
 29607    40   305    20    40   720     0      59  (
 29608    40   305    21    40   720     0     111  spos
 29609    40   305    26    40   720     0      92  <=
 29610    40   305    29    40   720     0     111  slim
 29611    40   305    33    40   720     0      60  )
 29612    40   305    34    40   720     0     102  ;
 29613    40   306    13    40   720     0      36  int
 29614    40   306    17    40   720     0     111  srem
 29615    40   306    22    40   720     0      67  =
 29616    40   306    24    40   720     0      59  (
 29617    40   306    25    40   720     0     111  spos
 29618    40   306    30    40   720     0      92  <=
 29619    40   306    33    40   720     0     111  slim
 29620    40   306    38    40   720     0      58  ?
 29621    40   306    40    40   720     0     111  slim
 29622    40   306    45    40   720     0      77  -
 29623    40   306    47    40   720     0     111  spos
 29624    40   306    52    40   720     0      65  :
 29625    40   306    54    40   720     0     112  0
 29626    40   306    55    40   720     0      60  )
 29627    40   306    56    40   720     0     102  ;
 29628    40   308    13    40   720     0     111  put
 29629    40   308    16    40   720     0      59  (
 29630    40   308    17    40   720     0     111  src.hb
 29631    40   308    23    40   720     0      66  ,
 29632    40   308    25    40   720     0     111  src.offset
 29633    40   308    36    40   720     0      74  +
 29634    40   308    38    40   720     0     111  spos
 29635    40   308    42    40   720     0      66  ,
 29636    40   308    44    40   720     0     111  srem
 29637    40   308    48    40   720     0      60  )
 29638    40   308    49    40   720     0     102  ;
 29639    40   309    13    40   720     0     111  src.position
 29640    40   309    25    40   720     0      59  (
 29641    40   309    26    40   720     0     111  spos
 29642    40   309    31    40   720     0      74  +
 29643    40   309    33    40   720     0     111  srem
 29644    40   309    37    40   720     0      60  )
 29645    40   309    38    40   720     0     102  ;
 29646    40   311     9    40   720     0      64  }
 29647    40   311    11    40   720     0      48  else
 29648    40   311    16    40   720     0      63  {
 29649    40   312    13    40   720     0     111  super.put
 29650    40   312    22    40   720     0      59  (
 29651    40   312    23    40   720     0     111  src
 29652    40   312    26    40   720     0      60  )
 29653    40   312    27    40   720     0     102  ;
 29654    40   313     9    40   720     0      64  }
 29655    40   314     9    40   720     0      19  return
 29656    40   314    16    40   720     0      44  this
 29657    40   314    20    40   720     0     102  ;
 29658    40   318     5    40   720     0      64  }
 29659    40   318     5    40   720     0    1724  ENDMETHOD
 29660    40   318     5    40   721     0    1725  STARTMETHOD
 29661    40   320    12    40   721     0     111  DoubleBuffer
 29662    40   320    25    40   721     0     111  put
 29663    40   320    28    40   721     0      59  (
 29664    40   320    29    40   721     0      32  double
 29665    40   320    35    40   721     0      61  [
 29666    40   320    36    40   721     0      62  ]
 29667    40   320    38    40   721     0     111  src
 29668    40   320    41    40   721     0      66  ,
 29669    40   320    43    40   721     0      36  int
 29670    40   320    47    40   721     0     111  offset
 29671    40   320    53    40   721     0      66  ,
 29672    40   320    55    40   721     0      36  int
 29673    40   320    59    40   721     0     111  length
 29674    40   320    65    40   721     0      60  )
 29675    40   320    67    40   721     0      63  {
 29676    40   322     9    40   721     0      31  if
 29677    40   322    12    40   721     0      59  (
 29678    40   322    13    40   721     0      59  (
 29679    40   322    14    40   721     0     111  length
 29680    40   322    21    40   721     0      90  <<
 29681    40   322    24    40   721     0     112  3
 29682    40   322    25    40   721     0      60  )
 29683    40   322    27    40   721     0      89  >
 29684    40   322    29    40   721     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 29685    40   322    63    40   721     0      60  )
 29686    40   322    65    40   721     0      63  {
 29687    40   323    13    40   721     0     111  checkBounds
 29688    40   323    24    40   721     0      59  (
 29689    40   323    25    40   721     0     111  offset
 29690    40   323    31    40   721     0      66  ,
 29691    40   323    33    40   721     0     111  length
 29692    40   323    39    40   721     0      66  ,
 29693    40   323    41    40   721     0     111  src.length
 29694    40   323    51    40   721     0      60  )
 29695    40   323    52    40   721     0     102  ;
 29696    40   324    13    40   721     1      36  int
 29697    40   324    17    40   721     1     111  pos
 29698    40   324    21    40   721     1      67  =
 29699    40   324    23    40   721     1     111  position
 29700    40   324    31    40   721     1      59  (
 29701    40   324    32    40   721     1      60  )
 29702    40   324    33    40   721     1     102  ;
 29703    40   325    13    40   721     1      36  int
 29704    40   325    17    40   721     1     111  lim
 29705    40   325    21    40   721     1      67  =
 29706    40   325    23    40   721     1     111  limit
 29707    40   325    28    40   721     1      59  (
 29708    40   325    29    40   721     1      60  )
 29709    40   325    30    40   721     1     102  ;
 29710    40   326    13    40   721     0     111  assert
 29711    40   326    20    40   721     0      59  (
 29712    40   326    21    40   721     0     111  pos
 29713    40   326    25    40   721     0      92  <=
 29714    40   326    28    40   721     0     111  lim
 29715    40   326    31    40   721     0      60  )
 29716    40   326    32    40   721     0     102  ;
 29717    40   327    13    40   721     0      36  int
 29718    40   327    17    40   721     0     111  rem
 29719    40   327    21    40   721     0      67  =
 29720    40   327    23    40   721     0      59  (
 29721    40   327    24    40   721     0     111  pos
 29722    40   327    28    40   721     0      92  <=
 29723    40   327    31    40   721     0     111  lim
 29724    40   327    35    40   721     0      58  ?
 29725    40   327    37    40   721     0     111  lim
 29726    40   327    41    40   721     0      77  -
 29727    40   327    43    40   721     0     111  pos
 29728    40   327    47    40   721     0      65  :
 29729    40   327    49    40   721     0     112  0
 29730    40   327    50    40   721     0      60  )
 29731    40   327    51    40   721     0     102  ;
 29732    40   328    13    40   721     0      31  if
 29733    40   328    16    40   721     0      59  (
 29734    40   328    17    40   721     0     111  length
 29735    40   328    24    40   721     0      89  >
 29736    40   328    26    40   721     0     111  rem
 29737    40   328    29    40   721     0      60  )
 29738    40   329    17    40   721     0      20  throw
 29739    40   329    27    40   721     0     111  BufferOverflowException
 29740    40   329    50    40   721     0      59  (
 29741    40   329    51    40   721     0      60  )
 29742    40   329    52    40   721     0     102  ;
 29743    40   331    13    40   721     0      31  if
 29744    40   331    16    40   721     0      59  (
 29745    40   331    17    40   721     0     111  order
 29746    40   331    22    40   721     0      59  (
 29747    40   331    23    40   721     0      60  )
 29748    40   331    25    40   721     0      71  !=
 29749    40   331    28    40   721     0     111  ByteOrder.nativeOrder
 29750    40   331    49    40   721     0      59  (
 29751    40   331    50    40   721     0      60  )
 29752    40   331    51    40   721     0      60  )
 29753    40   332    17    40   721     0     111  Bits.copyFromLongArray
 29754    40   332    39    40   721     0      59  (
 29755    40   332    40    40   721     0     111  src
 29756    40   332    43    40   721     0      66  ,
 29757    40   332    45    40   721     0     111  offset
 29758    40   332    52    40   721     0      90  <<
 29759    40   332    55    40   721     0     112  3
 29760    40   332    56    40   721     0      66  ,
 29761    40   333    45    40   721     0     111  ix
 29762    40   333    47    40   721     0      59  (
 29763    40   333    48    40   721     0     111  pos
 29764    40   333    51    40   721     0      60  )
 29765    40   333    52    40   721     0      66  ,
 29766    40   333    54    40   721     0     111  length
 29767    40   333    61    40   721     0      90  <<
 29768    40   333    64    40   721     0     112  3
 29769    40   333    65    40   721     0      60  )
 29770    40   333    66    40   721     0     102  ;
 29771    40   334    13    40   721     0      48  else
 29772    40   335    17    40   721     0     111  Bits.copyFromByteArray
 29773    40   335    39    40   721     0      59  (
 29774    40   335    40    40   721     0     111  src
 29775    40   335    43    40   721     0      66  ,
 29776    40   335    45    40   721     0     111  offset
 29777    40   335    52    40   721     0      90  <<
 29778    40   335    55    40   721     0     112  3
 29779    40   335    56    40   721     0      66  ,
 29780    40   336    40    40   721     0     111  ix
 29781    40   336    42    40   721     0      59  (
 29782    40   336    43    40   721     0     111  pos
 29783    40   336    46    40   721     0      60  )
 29784    40   336    47    40   721     0      66  ,
 29785    40   336    49    40   721     0     111  length
 29786    40   336    56    40   721     0      90  <<
 29787    40   336    59    40   721     0     112  3
 29788    40   336    60    40   721     0      60  )
 29789    40   336    61    40   721     0     102  ;
 29790    40   337    13    40   721     0     111  position
 29791    40   337    21    40   721     0      59  (
 29792    40   337    22    40   721     0     111  pos
 29793    40   337    26    40   721     0      74  +
 29794    40   337    28    40   721     0     111  length
 29795    40   337    34    40   721     0      60  )
 29796    40   337    35    40   721     0     102  ;
 29797    40   338     9    40   721     0      64  }
 29798    40   338    11    40   721     0      48  else
 29799    40   338    16    40   721     0      63  {
 29800    40   339    13    40   721     0     111  super.put
 29801    40   339    22    40   721     0      59  (
 29802    40   339    23    40   721     0     111  src
 29803    40   339    26    40   721     0      66  ,
 29804    40   339    28    40   721     0     111  offset
 29805    40   339    34    40   721     0      66  ,
 29806    40   339    36    40   721     0     111  length
 29807    40   339    42    40   721     0      60  )
 29808    40   339    43    40   721     0     102  ;
 29809    40   340     9    40   721     0      64  }
 29810    40   341     9    40   721     0      19  return
 29811    40   341    16    40   721     0      44  this
 29812    40   341    20    40   721     0     102  ;
 29813    40   345     5    40   721     0      64  }
 29814    40   345     5    40   721     0    1726  ENDMETHOD
 29815    40   345     5    40   722     0    1727  STARTMETHOD
 29816    40   347    12    40   722     0     111  DoubleBuffer
 29817    40   347    25    40   722     0     111  compact
 29818    40   347    32    40   722     0      59  (
 29819    40   347    33    40   722     0      60  )
 29820    40   347    35    40   722     0      63  {
 29821    40   349     9    40   722     1      36  int
 29822    40   349    13    40   722     1     111  pos
 29823    40   349    17    40   722     1      67  =
 29824    40   349    19    40   722     1     111  position
 29825    40   349    27    40   722     1      59  (
 29826    40   349    28    40   722     1      60  )
 29827    40   349    29    40   722     1     102  ;
 29828    40   350     9    40   722     1      36  int
 29829    40   350    13    40   722     1     111  lim
 29830    40   350    17    40   722     1      67  =
 29831    40   350    19    40   722     1     111  limit
 29832    40   350    24    40   722     1      59  (
 29833    40   350    25    40   722     1      60  )
 29834    40   350    26    40   722     1     102  ;
 29835    40   351     9    40   722     0     111  assert
 29836    40   351    16    40   722     0      59  (
 29837    40   351    17    40   722     0     111  pos
 29838    40   351    21    40   722     0      92  <=
 29839    40   351    24    40   722     0     111  lim
 29840    40   351    27    40   722     0      60  )
 29841    40   351    28    40   722     0     102  ;
 29842    40   352     9    40   722     0      36  int
 29843    40   352    13    40   722     0     111  rem
 29844    40   352    17    40   722     0      67  =
 29845    40   352    19    40   722     0      59  (
 29846    40   352    20    40   722     0     111  pos
 29847    40   352    24    40   722     0      92  <=
 29848    40   352    27    40   722     0     111  lim
 29849    40   352    31    40   722     0      58  ?
 29850    40   352    33    40   722     0     111  lim
 29851    40   352    37    40   722     0      77  -
 29852    40   352    39    40   722     0     111  pos
 29853    40   352    43    40   722     0      65  :
 29854    40   352    45    40   722     0     112  0
 29855    40   352    46    40   722     0      60  )
 29856    40   352    47    40   722     0     102  ;
 29857    40   354     9    40   722     0     111  unsafe.copyMemory
 29858    40   354    26    40   722     0      59  (
 29859    40   354    27    40   722     0     111  ix
 29860    40   354    29    40   722     0      59  (
 29861    40   354    30    40   722     0     111  pos
 29862    40   354    33    40   722     0      60  )
 29863    40   354    34    40   722     0      66  ,
 29864    40   354    36    40   722     0     111  ix
 29865    40   354    38    40   722     0      59  (
 29866    40   354    39    40   722     0     112  0
 29867    40   354    40    40   722     0      60  )
 29868    40   354    41    40   722     0      66  ,
 29869    40   354    43    40   722     0     111  rem
 29870    40   354    47    40   722     0      90  <<
 29871    40   354    50    40   722     0     112  3
 29872    40   354    51    40   722     0      60  )
 29873    40   354    52    40   722     0     102  ;
 29874    40   355     9    40   722     0     111  position
 29875    40   355    17    40   722     0      59  (
 29876    40   355    18    40   722     0     111  rem
 29877    40   355    21    40   722     0      60  )
 29878    40   355    22    40   722     0     102  ;
 29879    40   356     9    40   722     0     111  limit
 29880    40   356    14    40   722     0      59  (
 29881    40   356    15    40   722     0     111  capacity
 29882    40   356    23    40   722     0      59  (
 29883    40   356    24    40   722     0      60  )
 29884    40   356    25    40   722     0      60  )
 29885    40   356    26    40   722     0     102  ;
 29886    40   357     9    40   722     0     111  clearMark
 29887    40   357    18    40   722     0      59  (
 29888    40   357    19    40   722     0      60  )
 29889    40   357    20    40   722     0     102  ;
 29890    40   358     9    40   722     0      19  return
 29891    40   358    16    40   722     0      44  this
 29892    40   358    20    40   722     1     102  ;
 29893    40   362     5    40   722     1      64  }
 29894    40   362     5    40   722     0    1728  ENDMETHOD
 29895    40   362     5    40   723     0    1729  STARTMETHOD
 29896    40   364    12    40   723     0      39  boolean
 29897    40   364    20    40   723     0     111  isDirect
 29898    40   364    28    40   723     0      59  (
 29899    40   364    29    40   723     0      60  )
 29900    40   364    31    40   723     0      63  {
 29901    40   365     9    40   723     0      19  return
 29902    40   365    16    40   723     0      52  true
 29903    40   365    20    40   723     1     102  ;
 29904    40   366     5    40   723     1      64  }
 29905    40   366     5    40   723     0    1730  ENDMETHOD
 29906    40   366     5    40   724     0    1731  STARTMETHOD
 29907    40   368    12    40   724     0      39  boolean
 29908    40   368    20    40   724     0     111  isReadOnly
 29909    40   368    30    40   724     0      59  (
 29910    40   368    31    40   724     0      60  )
 29911    40   368    33    40   724     0      63  {
 29912    40   369     9    40   724     0      19  return
 29913    40   369    16    40   724     0      43  false
 29914    40   369    21    40   724     1     102  ;
 29915    40   370     5    40   724     1      64  }
 29916    40   370     5    40   724     0    1732  ENDMETHOD
 29917    40   370     5    40   725     0    1733  STARTMETHOD
 29918    40   416    12    40   725     0     111  ByteOrder
 29919    40   416    22    40   725     0     111  order
 29920    40   416    27    40   725     0      59  (
 29921    40   416    28    40   725     0      60  )
 29922    40   416    30    40   725     0      63  {
 29923    40   422     9    40   725     0      19  return
 29924    40   422    16    40   725     0      59  (
 29925    40   422    17    40   725     0      59  (
 29926    40   422    18    40   725     0     111  ByteOrder.nativeOrder
 29927    40   422    39    40   725     0      59  (
 29928    40   422    40    40   725     0      60  )
 29929    40   422    42    40   725     0      71  !=
 29930    40   422    45    40   725     0     111  ByteOrder.BIG_ENDIAN
 29931    40   422    65    40   725     0      60  )
 29932    40   423    17    40   725     0      58  ?
 29933    40   423    19    40   725     0     111  ByteOrder.LITTLE_ENDIAN
 29934    40   423    43    40   725     0      65  :
 29935    40   423    45    40   725     0     111  ByteOrder.BIG_ENDIAN
 29936    40   423    65    40   725     0      60  )
 29937    40   423    66    40   725     0     102  ;
 29938    40   425     5    40   725     0      64  }
 29939    40   425     5    40   725     0    1734  ENDMETHOD
 29940    40   452     1    40    -1     0      64  }
 29941    40   452     1    40    -1     1    1735  ENDCLASS
 29942    40   452     1    -1    -1     1    1736  ENDFILE C:\Users\RA\javasrc\java\nio\DirectDoubleBufferU.java
 29943    41     1     1    -1    -1     1    1737  STARTFILE C:\Users\RA\javasrc\java\nio\DirectFloatBufferRS.java
 29944    41    28     9    -1    -1     0     111  java.nio
 29945    41    28    17    -1    -1     0     102  ;
 29946    41    30     1    -1    -1     1      49  import
 29947    41    30     8    -1    -1     1     111  sun.misc.Cleaner
 29948    41    30    24    -1    -1     1     102  ;
 29949    41    31     1    -1    -1     1      49  import
 29950    41    31     8    -1    -1     1     111  sun.misc.Unsafe
 29951    41    31    23    -1    -1     1     102  ;
 29952    41    32     1    -1    -1     1      49  import
 29953    41    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 29954    41    32    31    -1    -1     1     102  ;
 29955    41    33     1    -1    -1     1      49  import
 29956    41    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 29957    41    33    34    -1    -1     1     102  ;
 29958    41    36     1    41    -1     0    1738  STARTCLASS
 29959    41    36     1    41    -1     0      24  class
 29960    41    36     7    41    -1     0     111  DirectFloatBufferRS
 29961    41    40     5    41    -1     0      38  extends
 29962    41    40    13    41    -1     0     111  DirectFloatBufferS
 29963    41    42     5    41    -1     0      17  implements
 29964    41    42    16    41    -1     0     111  DirectBuffer
 29965    41    43     1    41    -1     0      63  {
 29966    41    43     1    41   726     0    1739  STARTMETHOD
 29967    41   164     5    41   726     0     111  DirectFloatBufferRS
 29968    41   164    24    41   726     0      59  (
 29969    41   164    25    41   726     0     111  DirectBuffer
 29970    41   164    38    41   726     0     111  db
 29971    41   164    40    41   726     0      66  ,
 29972    41   165    32    41   726     0      36  int
 29973    41   165    36    41   726     0     111  mark
 29974    41   165    40    41   726     0      66  ,
 29975    41   165    42    41   726     0      36  int
 29976    41   165    46    41   726     0     111  pos
 29977    41   165    49    41   726     0      66  ,
 29978    41   165    51    41   726     0      36  int
 29979    41   165    55    41   726     0     111  lim
 29980    41   165    58    41   726     0      66  ,
 29981    41   165    60    41   726     0      36  int
 29982    41   165    64    41   726     0     111  cap
 29983    41   165    67    41   726     0      66  ,
 29984    41   166    32    41   726     0      36  int
 29985    41   166    36    41   726     0     111  off
 29986    41   166    39    41   726     0      60  )
 29987    41   167     5    41   726     0      63  {
 29988    41   176     9    41   726     0      27  super
 29989    41   176    14    41   726     0      59  (
 29990    41   176    15    41   726     0     111  db
 29991    41   176    17    41   726     0      66  ,
 29992    41   176    19    41   726     0     111  mark
 29993    41   176    23    41   726     0      66  ,
 29994    41   176    25    41   726     0     111  pos
 29995    41   176    28    41   726     0      66  ,
 29996    41   176    30    41   726     0     111  lim
 29997    41   176    33    41   726     0      66  ,
 29998    41   176    35    41   726     0     111  cap
 29999    41   176    38    41   726     0      66  ,
 30000    41   176    40    41   726     0     111  off
 30001    41   176    43    41   726     0      60  )
 30002    41   176    44    41   726     0     102  ;
 30003    41   178     5    41   726     0      64  }
 30004    41   178     5    41   726     0    1740  ENDMETHOD
 30005    41   178     5    41   727     0    1741  STARTMETHOD
 30006    41   180    12    41   727     0     111  FloatBuffer
 30007    41   180    24    41   727     0     111  slice
 30008    41   180    29    41   727     0      59  (
 30009    41   180    30    41   727     0      60  )
 30010    41   180    32    41   727     0      63  {
 30011    41   181     9    41   727     1      36  int
 30012    41   181    13    41   727     1     111  pos
 30013    41   181    17    41   727     1      67  =
 30014    41   181    19    41   727     1     111  this.position
 30015    41   181    32    41   727     1      59  (
 30016    41   181    33    41   727     1      60  )
 30017    41   181    34    41   727     1     102  ;
 30018    41   182     9    41   727     1      36  int
 30019    41   182    13    41   727     1     111  lim
 30020    41   182    17    41   727     1      67  =
 30021    41   182    19    41   727     1     111  this.limit
 30022    41   182    29    41   727     1      59  (
 30023    41   182    30    41   727     1      60  )
 30024    41   182    31    41   727     1     102  ;
 30025    41   183     9    41   727     0     111  assert
 30026    41   183    16    41   727     0      59  (
 30027    41   183    17    41   727     0     111  pos
 30028    41   183    21    41   727     0      92  <=
 30029    41   183    24    41   727     0     111  lim
 30030    41   183    27    41   727     0      60  )
 30031    41   183    28    41   727     0     102  ;
 30032    41   184     9    41   727     0      36  int
 30033    41   184    13    41   727     0     111  rem
 30034    41   184    17    41   727     0      67  =
 30035    41   184    19    41   727     0      59  (
 30036    41   184    20    41   727     0     111  pos
 30037    41   184    24    41   727     0      92  <=
 30038    41   184    27    41   727     0     111  lim
 30039    41   184    31    41   727     0      58  ?
 30040    41   184    33    41   727     0     111  lim
 30041    41   184    37    41   727     0      77  -
 30042    41   184    39    41   727     0     111  pos
 30043    41   184    43    41   727     0      65  :
 30044    41   184    45    41   727     0     112  0
 30045    41   184    46    41   727     0      60  )
 30046    41   184    47    41   727     0     102  ;
 30047    41   185     9    41   727     0      36  int
 30048    41   185    13    41   727     0     111  off
 30049    41   185    17    41   727     0      67  =
 30050    41   185    19    41   727     0      59  (
 30051    41   185    20    41   727     0     111  pos
 30052    41   185    24    41   727     0      90  <<
 30053    41   185    27    41   727     0     112  2
 30054    41   185    28    41   727     0      60  )
 30055    41   185    29    41   727     0     102  ;
 30056    41   186     9    41   727     0     111  assert
 30057    41   186    16    41   727     0      59  (
 30058    41   186    17    41   727     0     111  off
 30059    41   186    21    41   727     0      88  >=
 30060    41   186    24    41   727     0     112  0
 30061    41   186    25    41   727     0      60  )
 30062    41   186    26    41   727     0     102  ;
 30063    41   187     9    41   727     0      19  return
 30064    41   187    20    41   727     0     111  DirectFloatBufferRS
 30065    41   187    39    41   727     0      59  (
 30066    41   187    40    41   727     0      44  this
 30067    41   187    44    41   727     0      66  ,
 30068    41   187    46    41   727     0      77  -
 30069    41   187    47    41   727     0     112  1
 30070    41   187    48    41   727     0      66  ,
 30071    41   187    50    41   727     0     112  0
 30072    41   187    51    41   727     0      66  ,
 30073    41   187    53    41   727     0     111  rem
 30074    41   187    56    41   727     0      66  ,
 30075    41   187    58    41   727     0     111  rem
 30076    41   187    61    41   727     0      66  ,
 30077    41   187    63    41   727     0     111  off
 30078    41   187    66    41   727     0      60  )
 30079    41   187    67    41   727     0     102  ;
 30080    41   188     5    41   727     0      64  }
 30081    41   188     5    41   727     0    1742  ENDMETHOD
 30082    41   188     5    41   728     0    1743  STARTMETHOD
 30083    41   190    12    41   728     0     111  FloatBuffer
 30084    41   190    24    41   728     0     111  duplicate
 30085    41   190    33    41   728     0      59  (
 30086    41   190    34    41   728     0      60  )
 30087    41   190    36    41   728     0      63  {
 30088    41   191     9    41   728     0      19  return
 30089    41   191    20    41   728     0     111  DirectFloatBufferRS
 30090    41   191    39    41   728     0      59  (
 30091    41   191    40    41   728     0      44  this
 30092    41   191    44    41   728     0      66  ,
 30093    41   192    47    41   728     1     111  this.markValue
 30094    41   192    61    41   728     1      59  (
 30095    41   192    62    41   728     1      60  )
 30096    41   192    63    41   728     1      66  ,
 30097    41   193    47    41   728     1     111  this.position
 30098    41   193    60    41   728     1      59  (
 30099    41   193    61    41   728     1      60  )
 30100    41   193    62    41   728     1      66  ,
 30101    41   194    47    41   728     1     111  this.limit
 30102    41   194    57    41   728     1      59  (
 30103    41   194    58    41   728     1      60  )
 30104    41   194    59    41   728     1      66  ,
 30105    41   195    47    41   728     1     111  this.capacity
 30106    41   195    60    41   728     1      59  (
 30107    41   195    61    41   728     1      60  )
 30108    41   195    62    41   728     1      66  ,
 30109    41   196    47    41   728     0     112  0
 30110    41   196    48    41   728     0      60  )
 30111    41   196    49    41   728     0     102  ;
 30112    41   197     5    41   728     0      64  }
 30113    41   197     5    41   728     0    1744  ENDMETHOD
 30114    41   197     5    41   729     0    1745  STARTMETHOD
 30115    41   199    12    41   729     0     111  FloatBuffer
 30116    41   199    24    41   729     0     111  asReadOnlyBuffer
 30117    41   199    40    41   729     0      59  (
 30118    41   199    41    41   729     0      60  )
 30119    41   199    43    41   729     0      63  {
 30120    41   208     9    41   729     0      19  return
 30121    41   208    16    41   729     0     111  duplicate
 30122    41   208    25    41   729     0      59  (
 30123    41   208    26    41   729     0      60  )
 30124    41   208    27    41   729     0     102  ;
 30125    41   210     5    41   729     0      64  }
 30126    41   210     5    41   729     0    1746  ENDMETHOD
 30127    41   210     5    41   730     0    1747  STARTMETHOD
 30128    41   261    12    41   730     0     111  FloatBuffer
 30129    41   261    24    41   730     0     111  put
 30130    41   261    27    41   730     0      59  (
 30131    41   261    34    41   730     0     111  x
 30132    41   261    35    41   730     0      60  )
 30133    41   261    37    41   730     0      63  {
 30134    41   266     9    41   730     0      20  throw
 30135    41   266    19    41   730     0     111  ReadOnlyBufferException
 30136    41   266    42    41   730     0      59  (
 30137    41   266    43    41   730     0      60  )
 30138    41   266    44    41   730     0     102  ;
 30139    41   268     5    41   730     0      64  }
 30140    41   268     5    41   730     0    1748  ENDMETHOD
 30141    41   268     5    41   731     0    1749  STARTMETHOD
 30142    41   270    12    41   731     0     111  FloatBuffer
 30143    41   270    24    41   731     0     111  put
 30144    41   270    27    41   731     0      59  (
 30145    41   270    28    41   731     0      36  int
 30146    41   270    32    41   731     0     111  i
 30147    41   270    33    41   731     0      66  ,
 30148    41   270    41    41   731     0     111  x
 30149    41   270    42    41   731     0      60  )
 30150    41   270    44    41   731     0      63  {
 30151    41   275     9    41   731     0      20  throw
 30152    41   275    19    41   731     0     111  ReadOnlyBufferException
 30153    41   275    42    41   731     0      59  (
 30154    41   275    43    41   731     0      60  )
 30155    41   275    44    41   731     0     102  ;
 30156    41   277     5    41   731     0      64  }
 30157    41   277     5    41   731     0    1750  ENDMETHOD
 30158    41   277     5    41   732     0    1751  STARTMETHOD
 30159    41   279    12    41   732     0     111  FloatBuffer
 30160    41   279    24    41   732     0     111  put
 30161    41   279    27    41   732     0      59  (
 30162    41   279    28    41   732     0     111  FloatBuffer
 30163    41   279    40    41   732     0     111  src
 30164    41   279    43    41   732     0      60  )
 30165    41   279    45    41   732     0      63  {
 30166    41   316     9    41   732     0      20  throw
 30167    41   316    19    41   732     0     111  ReadOnlyBufferException
 30168    41   316    42    41   732     0      59  (
 30169    41   316    43    41   732     0      60  )
 30170    41   316    44    41   732     0     102  ;
 30171    41   318     5    41   732     0      64  }
 30172    41   318     5    41   732     0    1752  ENDMETHOD
 30173    41   318     5    41   733     0    1753  STARTMETHOD
 30174    41   320    12    41   733     0     111  FloatBuffer
 30175    41   320    24    41   733     0     111  put
 30176    41   320    27    41   733     0      59  (
 30177    41   320    33    41   733     0      61  [
 30178    41   320    34    41   733     0      62  ]
 30179    41   320    36    41   733     0     111  src
 30180    41   320    39    41   733     0      66  ,
 30181    41   320    41    41   733     0      36  int
 30182    41   320    45    41   733     0     111  offset
 30183    41   320    51    41   733     0      66  ,
 30184    41   320    53    41   733     0      36  int
 30185    41   320    57    41   733     0     111  length
 30186    41   320    63    41   733     0      60  )
 30187    41   320    65    41   733     0      63  {
 30188    41   343     9    41   733     0      20  throw
 30189    41   343    19    41   733     0     111  ReadOnlyBufferException
 30190    41   343    42    41   733     0      59  (
 30191    41   343    43    41   733     0      60  )
 30192    41   343    44    41   733     0     102  ;
 30193    41   345     5    41   733     0      64  }
 30194    41   345     5    41   733     0    1754  ENDMETHOD
 30195    41   345     5    41   734     0    1755  STARTMETHOD
 30196    41   347    12    41   734     0     111  FloatBuffer
 30197    41   347    24    41   734     0     111  compact
 30198    41   347    31    41   734     0      59  (
 30199    41   347    32    41   734     0      60  )
 30200    41   347    34    41   734     0      63  {
 30201    41   360     9    41   734     0      20  throw
 30202    41   360    19    41   734     0     111  ReadOnlyBufferException
 30203    41   360    42    41   734     0      59  (
 30204    41   360    43    41   734     0      60  )
 30205    41   360    44    41   734     1     102  ;
 30206    41   362     5    41   734     1      64  }
 30207    41   362     5    41   734     0    1756  ENDMETHOD
 30208    41   362     5    41   735     0    1757  STARTMETHOD
 30209    41   364    12    41   735     0      39  boolean
 30210    41   364    20    41   735     0     111  isDirect
 30211    41   364    28    41   735     0      59  (
 30212    41   364    29    41   735     0      60  )
 30213    41   364    31    41   735     0      63  {
 30214    41   365     9    41   735     0      19  return
 30215    41   365    16    41   735     0      52  true
 30216    41   365    20    41   735     1     102  ;
 30217    41   366     5    41   735     1      64  }
 30218    41   366     5    41   735     0    1758  ENDMETHOD
 30219    41   366     5    41   736     0    1759  STARTMETHOD
 30220    41   368    12    41   736     0      39  boolean
 30221    41   368    20    41   736     0     111  isReadOnly
 30222    41   368    30    41   736     0      59  (
 30223    41   368    31    41   736     0      60  )
 30224    41   368    33    41   736     0      63  {
 30225    41   369     9    41   736     0      19  return
 30226    41   369    16    41   736     0      52  true
 30227    41   369    20    41   736     1     102  ;
 30228    41   370     5    41   736     1      64  }
 30229    41   370     5    41   736     0    1760  ENDMETHOD
 30230    41   370     5    41   737     0    1761  STARTMETHOD
 30231    41   416    12    41   737     0     111  ByteOrder
 30232    41   416    22    41   737     0     111  order
 30233    41   416    27    41   737     0      59  (
 30234    41   416    28    41   737     0      60  )
 30235    41   416    30    41   737     0      63  {
 30236    41   418     9    41   737     0      19  return
 30237    41   418    16    41   737     0      59  (
 30238    41   418    17    41   737     0      59  (
 30239    41   418    18    41   737     0     111  ByteOrder.nativeOrder
 30240    41   418    39    41   737     0      59  (
 30241    41   418    40    41   737     0      60  )
 30242    41   418    42    41   737     0      68  ==
 30243    41   418    45    41   737     0     111  ByteOrder.BIG_ENDIAN
 30244    41   418    65    41   737     0      60  )
 30245    41   419    17    41   737     0      58  ?
 30246    41   419    19    41   737     0     111  ByteOrder.LITTLE_ENDIAN
 30247    41   419    43    41   737     0      65  :
 30248    41   419    45    41   737     0     111  ByteOrder.BIG_ENDIAN
 30249    41   419    65    41   737     0      60  )
 30250    41   419    66    41   737     0     102  ;
 30251    41   425     5    41   737     0      64  }
 30252    41   425     5    41   737     0    1762  ENDMETHOD
 30253    41   452     1    41    -1     0      64  }
 30254    41   452     1    41    -1     1    1763  ENDCLASS
 30255    41   452     1    -1    -1     1    1764  ENDFILE C:\Users\RA\javasrc\java\nio\DirectFloatBufferRS.java
 30256    42     1     1    -1    -1     1    1765  STARTFILE C:\Users\RA\javasrc\java\nio\DirectFloatBufferRU.java
 30257    42    28     9    -1    -1     0     111  java.nio
 30258    42    28    17    -1    -1     0     102  ;
 30259    42    30     1    -1    -1     1      49  import
 30260    42    30     8    -1    -1     1     111  sun.misc.Cleaner
 30261    42    30    24    -1    -1     1     102  ;
 30262    42    31     1    -1    -1     1      49  import
 30263    42    31     8    -1    -1     1     111  sun.misc.Unsafe
 30264    42    31    23    -1    -1     1     102  ;
 30265    42    32     1    -1    -1     1      49  import
 30266    42    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 30267    42    32    31    -1    -1     1     102  ;
 30268    42    33     1    -1    -1     1      49  import
 30269    42    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 30270    42    33    34    -1    -1     1     102  ;
 30271    42    36     1    42    -1     0    1766  STARTCLASS
 30272    42    36     1    42    -1     0      24  class
 30273    42    36     7    42    -1     0     111  DirectFloatBufferRU
 30274    42    40     5    42    -1     0      38  extends
 30275    42    40    13    42    -1     0     111  DirectFloatBufferU
 30276    42    42     5    42    -1     0      17  implements
 30277    42    42    16    42    -1     0     111  DirectBuffer
 30278    42    43     1    42    -1     0      63  {
 30279    42    43     1    42   738     0    1767  STARTMETHOD
 30280    42   164     5    42   738     0     111  DirectFloatBufferRU
 30281    42   164    24    42   738     0      59  (
 30282    42   164    25    42   738     0     111  DirectBuffer
 30283    42   164    38    42   738     0     111  db
 30284    42   164    40    42   738     0      66  ,
 30285    42   165    32    42   738     0      36  int
 30286    42   165    36    42   738     0     111  mark
 30287    42   165    40    42   738     0      66  ,
 30288    42   165    42    42   738     0      36  int
 30289    42   165    46    42   738     0     111  pos
 30290    42   165    49    42   738     0      66  ,
 30291    42   165    51    42   738     0      36  int
 30292    42   165    55    42   738     0     111  lim
 30293    42   165    58    42   738     0      66  ,
 30294    42   165    60    42   738     0      36  int
 30295    42   165    64    42   738     0     111  cap
 30296    42   165    67    42   738     0      66  ,
 30297    42   166    32    42   738     0      36  int
 30298    42   166    36    42   738     0     111  off
 30299    42   166    39    42   738     0      60  )
 30300    42   167     5    42   738     0      63  {
 30301    42   176     9    42   738     0      27  super
 30302    42   176    14    42   738     0      59  (
 30303    42   176    15    42   738     0     111  db
 30304    42   176    17    42   738     0      66  ,
 30305    42   176    19    42   738     0     111  mark
 30306    42   176    23    42   738     0      66  ,
 30307    42   176    25    42   738     0     111  pos
 30308    42   176    28    42   738     0      66  ,
 30309    42   176    30    42   738     0     111  lim
 30310    42   176    33    42   738     0      66  ,
 30311    42   176    35    42   738     0     111  cap
 30312    42   176    38    42   738     0      66  ,
 30313    42   176    40    42   738     0     111  off
 30314    42   176    43    42   738     0      60  )
 30315    42   176    44    42   738     0     102  ;
 30316    42   178     5    42   738     0      64  }
 30317    42   178     5    42   738     0    1768  ENDMETHOD
 30318    42   178     5    42   739     0    1769  STARTMETHOD
 30319    42   180    12    42   739     0     111  FloatBuffer
 30320    42   180    24    42   739     0     111  slice
 30321    42   180    29    42   739     0      59  (
 30322    42   180    30    42   739     0      60  )
 30323    42   180    32    42   739     0      63  {
 30324    42   181     9    42   739     1      36  int
 30325    42   181    13    42   739     1     111  pos
 30326    42   181    17    42   739     1      67  =
 30327    42   181    19    42   739     1     111  this.position
 30328    42   181    32    42   739     1      59  (
 30329    42   181    33    42   739     1      60  )
 30330    42   181    34    42   739     1     102  ;
 30331    42   182     9    42   739     1      36  int
 30332    42   182    13    42   739     1     111  lim
 30333    42   182    17    42   739     1      67  =
 30334    42   182    19    42   739     1     111  this.limit
 30335    42   182    29    42   739     1      59  (
 30336    42   182    30    42   739     1      60  )
 30337    42   182    31    42   739     1     102  ;
 30338    42   183     9    42   739     0     111  assert
 30339    42   183    16    42   739     0      59  (
 30340    42   183    17    42   739     0     111  pos
 30341    42   183    21    42   739     0      92  <=
 30342    42   183    24    42   739     0     111  lim
 30343    42   183    27    42   739     0      60  )
 30344    42   183    28    42   739     0     102  ;
 30345    42   184     9    42   739     0      36  int
 30346    42   184    13    42   739     0     111  rem
 30347    42   184    17    42   739     0      67  =
 30348    42   184    19    42   739     0      59  (
 30349    42   184    20    42   739     0     111  pos
 30350    42   184    24    42   739     0      92  <=
 30351    42   184    27    42   739     0     111  lim
 30352    42   184    31    42   739     0      58  ?
 30353    42   184    33    42   739     0     111  lim
 30354    42   184    37    42   739     0      77  -
 30355    42   184    39    42   739     0     111  pos
 30356    42   184    43    42   739     0      65  :
 30357    42   184    45    42   739     0     112  0
 30358    42   184    46    42   739     0      60  )
 30359    42   184    47    42   739     0     102  ;
 30360    42   185     9    42   739     0      36  int
 30361    42   185    13    42   739     0     111  off
 30362    42   185    17    42   739     0      67  =
 30363    42   185    19    42   739     0      59  (
 30364    42   185    20    42   739     0     111  pos
 30365    42   185    24    42   739     0      90  <<
 30366    42   185    27    42   739     0     112  2
 30367    42   185    28    42   739     0      60  )
 30368    42   185    29    42   739     0     102  ;
 30369    42   186     9    42   739     0     111  assert
 30370    42   186    16    42   739     0      59  (
 30371    42   186    17    42   739     0     111  off
 30372    42   186    21    42   739     0      88  >=
 30373    42   186    24    42   739     0     112  0
 30374    42   186    25    42   739     0      60  )
 30375    42   186    26    42   739     0     102  ;
 30376    42   187     9    42   739     0      19  return
 30377    42   187    20    42   739     0     111  DirectFloatBufferRU
 30378    42   187    39    42   739     0      59  (
 30379    42   187    40    42   739     0      44  this
 30380    42   187    44    42   739     0      66  ,
 30381    42   187    46    42   739     0      77  -
 30382    42   187    47    42   739     0     112  1
 30383    42   187    48    42   739     0      66  ,
 30384    42   187    50    42   739     0     112  0
 30385    42   187    51    42   739     0      66  ,
 30386    42   187    53    42   739     0     111  rem
 30387    42   187    56    42   739     0      66  ,
 30388    42   187    58    42   739     0     111  rem
 30389    42   187    61    42   739     0      66  ,
 30390    42   187    63    42   739     0     111  off
 30391    42   187    66    42   739     0      60  )
 30392    42   187    67    42   739     0     102  ;
 30393    42   188     5    42   739     0      64  }
 30394    42   188     5    42   739     0    1770  ENDMETHOD
 30395    42   188     5    42   740     0    1771  STARTMETHOD
 30396    42   190    12    42   740     0     111  FloatBuffer
 30397    42   190    24    42   740     0     111  duplicate
 30398    42   190    33    42   740     0      59  (
 30399    42   190    34    42   740     0      60  )
 30400    42   190    36    42   740     0      63  {
 30401    42   191     9    42   740     0      19  return
 30402    42   191    20    42   740     0     111  DirectFloatBufferRU
 30403    42   191    39    42   740     0      59  (
 30404    42   191    40    42   740     0      44  this
 30405    42   191    44    42   740     0      66  ,
 30406    42   192    47    42   740     1     111  this.markValue
 30407    42   192    61    42   740     1      59  (
 30408    42   192    62    42   740     1      60  )
 30409    42   192    63    42   740     1      66  ,
 30410    42   193    47    42   740     1     111  this.position
 30411    42   193    60    42   740     1      59  (
 30412    42   193    61    42   740     1      60  )
 30413    42   193    62    42   740     1      66  ,
 30414    42   194    47    42   740     1     111  this.limit
 30415    42   194    57    42   740     1      59  (
 30416    42   194    58    42   740     1      60  )
 30417    42   194    59    42   740     1      66  ,
 30418    42   195    47    42   740     1     111  this.capacity
 30419    42   195    60    42   740     1      59  (
 30420    42   195    61    42   740     1      60  )
 30421    42   195    62    42   740     1      66  ,
 30422    42   196    47    42   740     0     112  0
 30423    42   196    48    42   740     0      60  )
 30424    42   196    49    42   740     0     102  ;
 30425    42   197     5    42   740     0      64  }
 30426    42   197     5    42   740     0    1772  ENDMETHOD
 30427    42   197     5    42   741     0    1773  STARTMETHOD
 30428    42   199    12    42   741     0     111  FloatBuffer
 30429    42   199    24    42   741     0     111  asReadOnlyBuffer
 30430    42   199    40    42   741     0      59  (
 30431    42   199    41    42   741     0      60  )
 30432    42   199    43    42   741     0      63  {
 30433    42   208     9    42   741     0      19  return
 30434    42   208    16    42   741     0     111  duplicate
 30435    42   208    25    42   741     0      59  (
 30436    42   208    26    42   741     0      60  )
 30437    42   208    27    42   741     0     102  ;
 30438    42   210     5    42   741     0      64  }
 30439    42   210     5    42   741     0    1774  ENDMETHOD
 30440    42   210     5    42   742     0    1775  STARTMETHOD
 30441    42   261    12    42   742     0     111  FloatBuffer
 30442    42   261    24    42   742     0     111  put
 30443    42   261    27    42   742     0      59  (
 30444    42   261    34    42   742     0     111  x
 30445    42   261    35    42   742     0      60  )
 30446    42   261    37    42   742     0      63  {
 30447    42   266     9    42   742     0      20  throw
 30448    42   266    19    42   742     0     111  ReadOnlyBufferException
 30449    42   266    42    42   742     0      59  (
 30450    42   266    43    42   742     0      60  )
 30451    42   266    44    42   742     0     102  ;
 30452    42   268     5    42   742     0      64  }
 30453    42   268     5    42   742     0    1776  ENDMETHOD
 30454    42   268     5    42   743     0    1777  STARTMETHOD
 30455    42   270    12    42   743     0     111  FloatBuffer
 30456    42   270    24    42   743     0     111  put
 30457    42   270    27    42   743     0      59  (
 30458    42   270    28    42   743     0      36  int
 30459    42   270    32    42   743     0     111  i
 30460    42   270    33    42   743     0      66  ,
 30461    42   270    41    42   743     0     111  x
 30462    42   270    42    42   743     0      60  )
 30463    42   270    44    42   743     0      63  {
 30464    42   275     9    42   743     0      20  throw
 30465    42   275    19    42   743     0     111  ReadOnlyBufferException
 30466    42   275    42    42   743     0      59  (
 30467    42   275    43    42   743     0      60  )
 30468    42   275    44    42   743     0     102  ;
 30469    42   277     5    42   743     0      64  }
 30470    42   277     5    42   743     0    1778  ENDMETHOD
 30471    42   277     5    42   744     0    1779  STARTMETHOD
 30472    42   279    12    42   744     0     111  FloatBuffer
 30473    42   279    24    42   744     0     111  put
 30474    42   279    27    42   744     0      59  (
 30475    42   279    28    42   744     0     111  FloatBuffer
 30476    42   279    40    42   744     0     111  src
 30477    42   279    43    42   744     0      60  )
 30478    42   279    45    42   744     0      63  {
 30479    42   316     9    42   744     0      20  throw
 30480    42   316    19    42   744     0     111  ReadOnlyBufferException
 30481    42   316    42    42   744     0      59  (
 30482    42   316    43    42   744     0      60  )
 30483    42   316    44    42   744     0     102  ;
 30484    42   318     5    42   744     0      64  }
 30485    42   318     5    42   744     0    1780  ENDMETHOD
 30486    42   318     5    42   745     0    1781  STARTMETHOD
 30487    42   320    12    42   745     0     111  FloatBuffer
 30488    42   320    24    42   745     0     111  put
 30489    42   320    27    42   745     0      59  (
 30490    42   320    33    42   745     0      61  [
 30491    42   320    34    42   745     0      62  ]
 30492    42   320    36    42   745     0     111  src
 30493    42   320    39    42   745     0      66  ,
 30494    42   320    41    42   745     0      36  int
 30495    42   320    45    42   745     0     111  offset
 30496    42   320    51    42   745     0      66  ,
 30497    42   320    53    42   745     0      36  int
 30498    42   320    57    42   745     0     111  length
 30499    42   320    63    42   745     0      60  )
 30500    42   320    65    42   745     0      63  {
 30501    42   343     9    42   745     0      20  throw
 30502    42   343    19    42   745     0     111  ReadOnlyBufferException
 30503    42   343    42    42   745     0      59  (
 30504    42   343    43    42   745     0      60  )
 30505    42   343    44    42   745     0     102  ;
 30506    42   345     5    42   745     0      64  }
 30507    42   345     5    42   745     0    1782  ENDMETHOD
 30508    42   345     5    42   746     0    1783  STARTMETHOD
 30509    42   347    12    42   746     0     111  FloatBuffer
 30510    42   347    24    42   746     0     111  compact
 30511    42   347    31    42   746     0      59  (
 30512    42   347    32    42   746     0      60  )
 30513    42   347    34    42   746     0      63  {
 30514    42   360     9    42   746     0      20  throw
 30515    42   360    19    42   746     0     111  ReadOnlyBufferException
 30516    42   360    42    42   746     0      59  (
 30517    42   360    43    42   746     0      60  )
 30518    42   360    44    42   746     1     102  ;
 30519    42   362     5    42   746     1      64  }
 30520    42   362     5    42   746     0    1784  ENDMETHOD
 30521    42   362     5    42   747     0    1785  STARTMETHOD
 30522    42   364    12    42   747     0      39  boolean
 30523    42   364    20    42   747     0     111  isDirect
 30524    42   364    28    42   747     0      59  (
 30525    42   364    29    42   747     0      60  )
 30526    42   364    31    42   747     0      63  {
 30527    42   365     9    42   747     0      19  return
 30528    42   365    16    42   747     0      52  true
 30529    42   365    20    42   747     1     102  ;
 30530    42   366     5    42   747     1      64  }
 30531    42   366     5    42   747     0    1786  ENDMETHOD
 30532    42   366     5    42   748     0    1787  STARTMETHOD
 30533    42   368    12    42   748     0      39  boolean
 30534    42   368    20    42   748     0     111  isReadOnly
 30535    42   368    30    42   748     0      59  (
 30536    42   368    31    42   748     0      60  )
 30537    42   368    33    42   748     0      63  {
 30538    42   369     9    42   748     0      19  return
 30539    42   369    16    42   748     0      52  true
 30540    42   369    20    42   748     1     102  ;
 30541    42   370     5    42   748     1      64  }
 30542    42   370     5    42   748     0    1788  ENDMETHOD
 30543    42   370     5    42   749     0    1789  STARTMETHOD
 30544    42   416    12    42   749     0     111  ByteOrder
 30545    42   416    22    42   749     0     111  order
 30546    42   416    27    42   749     0      59  (
 30547    42   416    28    42   749     0      60  )
 30548    42   416    30    42   749     0      63  {
 30549    42   422     9    42   749     0      19  return
 30550    42   422    16    42   749     0      59  (
 30551    42   422    17    42   749     0      59  (
 30552    42   422    18    42   749     0     111  ByteOrder.nativeOrder
 30553    42   422    39    42   749     0      59  (
 30554    42   422    40    42   749     0      60  )
 30555    42   422    42    42   749     0      71  !=
 30556    42   422    45    42   749     0     111  ByteOrder.BIG_ENDIAN
 30557    42   422    65    42   749     0      60  )
 30558    42   423    17    42   749     0      58  ?
 30559    42   423    19    42   749     0     111  ByteOrder.LITTLE_ENDIAN
 30560    42   423    43    42   749     0      65  :
 30561    42   423    45    42   749     0     111  ByteOrder.BIG_ENDIAN
 30562    42   423    65    42   749     0      60  )
 30563    42   423    66    42   749     0     102  ;
 30564    42   425     5    42   749     0      64  }
 30565    42   425     5    42   749     0    1790  ENDMETHOD
 30566    42   452     1    42    -1     0      64  }
 30567    42   452     1    42    -1     1    1791  ENDCLASS
 30568    42   452     1    -1    -1     1    1792  ENDFILE C:\Users\RA\javasrc\java\nio\DirectFloatBufferRU.java
 30569    43     1     1    -1    -1     1    1793  STARTFILE C:\Users\RA\javasrc\java\nio\DirectFloatBufferS.java
 30570    43    28     9    -1    -1     0     111  java.nio
 30571    43    28    17    -1    -1     0     102  ;
 30572    43    30     1    -1    -1     1      49  import
 30573    43    30     8    -1    -1     1     111  sun.misc.Cleaner
 30574    43    30    24    -1    -1     1     102  ;
 30575    43    31     1    -1    -1     1      49  import
 30576    43    31     8    -1    -1     1     111  sun.misc.Unsafe
 30577    43    31    23    -1    -1     1     102  ;
 30578    43    32     1    -1    -1     1      49  import
 30579    43    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 30580    43    32    31    -1    -1     1     102  ;
 30581    43    33     1    -1    -1     1      49  import
 30582    43    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 30583    43    33    34    -1    -1     1     102  ;
 30584    43    36     1    43    -1     0    1794  STARTCLASS
 30585    43    36     1    43    -1     0      24  class
 30586    43    36     7    43    -1     0     111  DirectFloatBufferS
 30587    43    38     5    43    -1     0      38  extends
 30588    43    38    13    43    -1     0     111  FloatBuffer
 30589    43    42     5    43    -1     0      17  implements
 30590    43    42    16    43    -1     0     111  DirectBuffer
 30591    43    43     1    43    -1     0      63  {
 30592    43    48     5    43    -1     0      23  protected
 30593    43    48    15    43    -1     0      45  static
 30594    43    48    28    43    -1     0     111  Unsafe
 30595    43    48    35    43    -1     0     111  unsafe
 30596    43    48    42    43    -1     0      67  =
 30597    43    48    44    43    -1     0     111  Bits.unsafe
 30598    43    48    55    43    -1     0      59  (
 30599    43    48    56    43    -1     0      60  )
 30600    43    48    57    43    -1     0     102  ;
 30601    43    51     5    43    -1     0      23  protected
 30602    43    51    15    43    -1     0      45  static
 30603    43    51    28    43    -1     0      39  boolean
 30604    43    51    36    43    -1     0     111  unaligned
 30605    43    51    46    43    -1     0      67  =
 30606    43    51    48    43    -1     0     111  Bits.unaligned
 30607    43    51    62    43    -1     0      59  (
 30608    43    51    63    43    -1     0      60  )
 30609    43    51    64    43    -1     0     102  ;
 30610    43    59     5    43    -1     0      23  protected
 30611    43    59    15    43    -1     0     111  Object
 30612    43    59    22    43    -1     0     111  viewedBuffer
 30613    43    59    35    43    -1     0      67  =
 30614    43    59    37    43    -1     0      21  null
 30615    43    59    41    43    -1     0     102  ;
 30616    43    59    41    43   750     0    1795  STARTMETHOD
 30617    43    61    12    43   750     0     111  Object
 30618    43    61    19    43   750     0     111  viewedBuffer
 30619    43    61    31    43   750     0      59  (
 30620    43    61    32    43   750     0      60  )
 30621    43    61    34    43   750     0      63  {
 30622    43    62     9    43   750     0      19  return
 30623    43    62    16    43   750     0     111  viewedBuffer
 30624    43    62    28    43   750     0     102  ;
 30625    43    63     5    43   750     0      64  }
 30626    43    63     5    43   750     0    1796  ENDMETHOD
 30627    43    63     5    43   751     0    1797  STARTMETHOD
 30628    43   100    12    43   751     0     111  Cleaner
 30629    43   100    20    43   751     0     111  cleaner
 30630    43   100    27    43   751     0      59  (
 30631    43   100    28    43   751     0      60  )
 30632    43   100    30    43   751     0      63  {
 30633    43   100    32    43   751     0      19  return
 30634    43   100    39    43   751     0      21  null
 30635    43   100    43    43   751     0     102  ;
 30636    43   100    45    43   751     0      64  }
 30637    43   100    45    43   751     0    1798  ENDMETHOD
 30638    43   100    45    43   752     0    1799  STARTMETHOD
 30639    43   164     5    43   752     0     111  DirectFloatBufferS
 30640    43   164    23    43   752     0      59  (
 30641    43   164    24    43   752     0     111  DirectBuffer
 30642    43   164    37    43   752     0     111  db
 30643    43   164    39    43   752     0      66  ,
 30644    43   165    32    43   752     0      36  int
 30645    43   165    36    43   752     0     111  mark
 30646    43   165    40    43   752     0      66  ,
 30647    43   165    42    43   752     0      36  int
 30648    43   165    46    43   752     0     111  pos
 30649    43   165    49    43   752     0      66  ,
 30650    43   165    51    43   752     0      36  int
 30651    43   165    55    43   752     0     111  lim
 30652    43   165    58    43   752     0      66  ,
 30653    43   165    60    43   752     0      36  int
 30654    43   165    64    43   752     0     111  cap
 30655    43   165    67    43   752     0      66  ,
 30656    43   166    32    43   752     0      36  int
 30657    43   166    36    43   752     0     111  off
 30658    43   166    39    43   752     0      60  )
 30659    43   167     5    43   752     0      63  {
 30660    43   169     9    43   752     0      27  super
 30661    43   169    14    43   752     0      59  (
 30662    43   169    15    43   752     0     111  mark
 30663    43   169    19    43   752     0      66  ,
 30664    43   169    21    43   752     0     111  pos
 30665    43   169    24    43   752     0      66  ,
 30666    43   169    26    43   752     0     111  lim
 30667    43   169    29    43   752     0      66  ,
 30668    43   169    31    43   752     0     111  cap
 30669    43   169    34    43   752     0      60  )
 30670    43   169    35    43   752     0     102  ;
 30671    43   170     9    43   752     0     111  address
 30672    43   170    17    43   752     0      67  =
 30673    43   170    19    43   752     0     111  db.address
 30674    43   170    29    43   752     0      59  (
 30675    43   170    30    43   752     0      60  )
 30676    43   170    32    43   752     0      74  +
 30677    43   170    34    43   752     0     111  off
 30678    43   170    37    43   752     0     102  ;
 30679    43   171     9    43   752     0     111  viewedBuffer
 30680    43   171    22    43   752     0      67  =
 30681    43   171    24    43   752     0     111  db
 30682    43   171    26    43   752     0     102  ;
 30683    43   178     5    43   752     0      64  }
 30684    43   178     5    43   752     0    1800  ENDMETHOD
 30685    43   178     5    43   753     0    1801  STARTMETHOD
 30686    43   180    12    43   753     0     111  FloatBuffer
 30687    43   180    24    43   753     0     111  slice
 30688    43   180    29    43   753     0      59  (
 30689    43   180    30    43   753     0      60  )
 30690    43   180    32    43   753     0      63  {
 30691    43   181     9    43   753     1      36  int
 30692    43   181    13    43   753     1     111  pos
 30693    43   181    17    43   753     1      67  =
 30694    43   181    19    43   753     1     111  this.position
 30695    43   181    32    43   753     1      59  (
 30696    43   181    33    43   753     1      60  )
 30697    43   181    34    43   753     1     102  ;
 30698    43   182     9    43   753     1      36  int
 30699    43   182    13    43   753     1     111  lim
 30700    43   182    17    43   753     1      67  =
 30701    43   182    19    43   753     1     111  this.limit
 30702    43   182    29    43   753     1      59  (
 30703    43   182    30    43   753     1      60  )
 30704    43   182    31    43   753     1     102  ;
 30705    43   183     9    43   753     0     111  assert
 30706    43   183    16    43   753     0      59  (
 30707    43   183    17    43   753     0     111  pos
 30708    43   183    21    43   753     0      92  <=
 30709    43   183    24    43   753     0     111  lim
 30710    43   183    27    43   753     0      60  )
 30711    43   183    28    43   753     0     102  ;
 30712    43   184     9    43   753     0      36  int
 30713    43   184    13    43   753     0     111  rem
 30714    43   184    17    43   753     0      67  =
 30715    43   184    19    43   753     0      59  (
 30716    43   184    20    43   753     0     111  pos
 30717    43   184    24    43   753     0      92  <=
 30718    43   184    27    43   753     0     111  lim
 30719    43   184    31    43   753     0      58  ?
 30720    43   184    33    43   753     0     111  lim
 30721    43   184    37    43   753     0      77  -
 30722    43   184    39    43   753     0     111  pos
 30723    43   184    43    43   753     0      65  :
 30724    43   184    45    43   753     0     112  0
 30725    43   184    46    43   753     0      60  )
 30726    43   184    47    43   753     0     102  ;
 30727    43   185     9    43   753     0      36  int
 30728    43   185    13    43   753     0     111  off
 30729    43   185    17    43   753     0      67  =
 30730    43   185    19    43   753     0      59  (
 30731    43   185    20    43   753     0     111  pos
 30732    43   185    24    43   753     0      90  <<
 30733    43   185    27    43   753     0     112  2
 30734    43   185    28    43   753     0      60  )
 30735    43   185    29    43   753     0     102  ;
 30736    43   186     9    43   753     0     111  assert
 30737    43   186    16    43   753     0      59  (
 30738    43   186    17    43   753     0     111  off
 30739    43   186    21    43   753     0      88  >=
 30740    43   186    24    43   753     0     112  0
 30741    43   186    25    43   753     0      60  )
 30742    43   186    26    43   753     0     102  ;
 30743    43   187     9    43   753     0      19  return
 30744    43   187    20    43   753     0     111  DirectFloatBufferS
 30745    43   187    38    43   753     0      59  (
 30746    43   187    39    43   753     0      44  this
 30747    43   187    43    43   753     0      66  ,
 30748    43   187    45    43   753     0      77  -
 30749    43   187    46    43   753     0     112  1
 30750    43   187    47    43   753     0      66  ,
 30751    43   187    49    43   753     0     112  0
 30752    43   187    50    43   753     0      66  ,
 30753    43   187    52    43   753     0     111  rem
 30754    43   187    55    43   753     0      66  ,
 30755    43   187    57    43   753     0     111  rem
 30756    43   187    60    43   753     0      66  ,
 30757    43   187    62    43   753     0     111  off
 30758    43   187    65    43   753     0      60  )
 30759    43   187    66    43   753     0     102  ;
 30760    43   188     5    43   753     0      64  }
 30761    43   188     5    43   753     0    1802  ENDMETHOD
 30762    43   188     5    43   754     0    1803  STARTMETHOD
 30763    43   190    12    43   754     0     111  FloatBuffer
 30764    43   190    24    43   754     0     111  duplicate
 30765    43   190    33    43   754     0      59  (
 30766    43   190    34    43   754     0      60  )
 30767    43   190    36    43   754     0      63  {
 30768    43   191     9    43   754     0      19  return
 30769    43   191    20    43   754     0     111  DirectFloatBufferS
 30770    43   191    38    43   754     0      59  (
 30771    43   191    39    43   754     0      44  this
 30772    43   191    43    43   754     0      66  ,
 30773    43   192    47    43   754     1     111  this.markValue
 30774    43   192    61    43   754     1      59  (
 30775    43   192    62    43   754     1      60  )
 30776    43   192    63    43   754     1      66  ,
 30777    43   193    47    43   754     1     111  this.position
 30778    43   193    60    43   754     1      59  (
 30779    43   193    61    43   754     1      60  )
 30780    43   193    62    43   754     1      66  ,
 30781    43   194    47    43   754     1     111  this.limit
 30782    43   194    57    43   754     1      59  (
 30783    43   194    58    43   754     1      60  )
 30784    43   194    59    43   754     1      66  ,
 30785    43   195    47    43   754     1     111  this.capacity
 30786    43   195    60    43   754     1      59  (
 30787    43   195    61    43   754     1      60  )
 30788    43   195    62    43   754     1      66  ,
 30789    43   196    47    43   754     0     112  0
 30790    43   196    48    43   754     0      60  )
 30791    43   196    49    43   754     0     102  ;
 30792    43   197     5    43   754     0      64  }
 30793    43   197     5    43   754     0    1804  ENDMETHOD
 30794    43   197     5    43   755     0    1805  STARTMETHOD
 30795    43   199    12    43   755     0     111  FloatBuffer
 30796    43   199    24    43   755     0     111  asReadOnlyBuffer
 30797    43   199    40    43   755     0      59  (
 30798    43   199    41    43   755     0      60  )
 30799    43   199    43    43   755     0      63  {
 30800    43   201     9    43   755     0      19  return
 30801    43   201    20    43   755     0     111  DirectFloatBufferRS
 30802    43   201    39    43   755     0      59  (
 30803    43   201    40    43   755     0      44  this
 30804    43   201    44    43   755     0      66  ,
 30805    43   202    44    43   755     1     111  this.markValue
 30806    43   202    58    43   755     1      59  (
 30807    43   202    59    43   755     1      60  )
 30808    43   202    60    43   755     1      66  ,
 30809    43   203    44    43   755     1     111  this.position
 30810    43   203    57    43   755     1      59  (
 30811    43   203    58    43   755     1      60  )
 30812    43   203    59    43   755     1      66  ,
 30813    43   204    44    43   755     1     111  this.limit
 30814    43   204    54    43   755     1      59  (
 30815    43   204    55    43   755     1      60  )
 30816    43   204    56    43   755     1      66  ,
 30817    43   205    44    43   755     1     111  this.capacity
 30818    43   205    57    43   755     1      59  (
 30819    43   205    58    43   755     1      60  )
 30820    43   205    59    43   755     1      66  ,
 30821    43   206    44    43   755     0     112  0
 30822    43   206    45    43   755     0      60  )
 30823    43   206    46    43   755     0     102  ;
 30824    43   210     5    43   755     0      64  }
 30825    43   210     5    43   755     0    1806  ENDMETHOD
 30826    43   210     5    43   756     0    1807  STARTMETHOD
 30827    43   214    12    43   756     0      53  long
 30828    43   214    17    43   756     0     111  address
 30829    43   214    24    43   756     0      59  (
 30830    43   214    25    43   756     0      60  )
 30831    43   214    27    43   756     0      63  {
 30832    43   215     9    43   756     0      19  return
 30833    43   215    16    43   756     0     111  address
 30834    43   215    23    43   756     0     102  ;
 30835    43   216     5    43   756     0      64  }
 30836    43   216     5    43   756     0    1808  ENDMETHOD
 30837    43   216     5    43   757     0    1809  STARTMETHOD
 30838    43   218     5    43   757     0      41  private
 30839    43   218    13    43   757     0      53  long
 30840    43   218    18    43   757     0     111  ix
 30841    43   218    20    43   757     0      59  (
 30842    43   218    21    43   757     0      36  int
 30843    43   218    25    43   757     0     111  i
 30844    43   218    26    43   757     0      60  )
 30845    43   218    28    43   757     0      63  {
 30846    43   219     9    43   757     0      19  return
 30847    43   219    16    43   757     0     111  address
 30848    43   219    24    43   757     0      74  +
 30849    43   219    26    43   757     0      59  (
 30850    43   219    27    43   757     0     111  i
 30851    43   219    29    43   757     0      90  <<
 30852    43   219    32    43   757     0     112  2
 30853    43   219    33    43   757     0      60  )
 30854    43   219    34    43   757     0     102  ;
 30855    43   220     5    43   757     0      64  }
 30856    43   220     5    43   757     0    1810  ENDMETHOD
 30857    43   220     5    43   758     0    1811  STARTMETHOD
 30858    43   222    18    43   758     0     111  get
 30859    43   222    21    43   758     0      59  (
 30860    43   222    22    43   758     0      60  )
 30861    43   222    24    43   758     0      63  {
 30862    43   223     9    43   758     0      19  return
 30863    43   223    16    43   758     0     111  Float.intBitsToFloat
 30864    43   223    36    43   758     0      59  (
 30865    43   223    37    43   758     0     111  Bits.swap
 30866    43   223    46    43   758     0      59  (
 30867    43   223    47    43   758     0     111  unsafe.getInt
 30868    43   223    60    43   758     0      59  (
 30869    43   223    61    43   758     0     111  ix
 30870    43   223    63    43   758     0      59  (
 30871    43   223    64    43   758     0     111  nextGetIndex
 30872    43   223    76    43   758     0      59  (
 30873    43   223    77    43   758     0      60  )
 30874    43   223    78    43   758     0      60  )
 30875    43   223    79    43   758     0      60  )
 30876    43   223    80    43   758     0      60  )
 30877    43   223    81    43   758     0      60  )
 30878    43   223    82    43   758     0     102  ;
 30879    43   224     5    43   758     0      64  }
 30880    43   224     5    43   758     0    1812  ENDMETHOD
 30881    43   224     5    43   759     0    1813  STARTMETHOD
 30882    43   226    18    43   759     0     111  get
 30883    43   226    21    43   759     0      59  (
 30884    43   226    22    43   759     0      36  int
 30885    43   226    26    43   759     0     111  i
 30886    43   226    27    43   759     0      60  )
 30887    43   226    29    43   759     0      63  {
 30888    43   227     9    43   759     0      19  return
 30889    43   227    16    43   759     0     111  Float.intBitsToFloat
 30890    43   227    36    43   759     0      59  (
 30891    43   227    37    43   759     0     111  Bits.swap
 30892    43   227    46    43   759     0      59  (
 30893    43   227    47    43   759     0     111  unsafe.getInt
 30894    43   227    60    43   759     0      59  (
 30895    43   227    61    43   759     0     111  ix
 30896    43   227    63    43   759     0      59  (
 30897    43   227    64    43   759     0     111  checkIndex
 30898    43   227    74    43   759     0      59  (
 30899    43   227    75    43   759     0     111  i
 30900    43   227    76    43   759     0      60  )
 30901    43   227    77    43   759     0      60  )
 30902    43   227    78    43   759     0      60  )
 30903    43   227    79    43   759     0      60  )
 30904    43   227    80    43   759     0      60  )
 30905    43   227    81    43   759     0     102  ;
 30906    43   228     5    43   759     0      64  }
 30907    43   228     5    43   759     0    1814  ENDMETHOD
 30908    43   228     5    43   760     0    1815  STARTMETHOD
 30909    43   230    12    43   760     0     111  FloatBuffer
 30910    43   230    24    43   760     0     111  get
 30911    43   230    27    43   760     0      59  (
 30912    43   230    33    43   760     0      61  [
 30913    43   230    34    43   760     0      62  ]
 30914    43   230    36    43   760     0     111  dst
 30915    43   230    39    43   760     0      66  ,
 30916    43   230    41    43   760     0      36  int
 30917    43   230    45    43   760     0     111  offset
 30918    43   230    51    43   760     0      66  ,
 30919    43   230    53    43   760     0      36  int
 30920    43   230    57    43   760     0     111  length
 30921    43   230    63    43   760     0      60  )
 30922    43   230    65    43   760     0      63  {
 30923    43   232     9    43   760     0      31  if
 30924    43   232    12    43   760     0      59  (
 30925    43   232    13    43   760     0      59  (
 30926    43   232    14    43   760     0     111  length
 30927    43   232    21    43   760     0      90  <<
 30928    43   232    24    43   760     0     112  2
 30929    43   232    25    43   760     0      60  )
 30930    43   232    27    43   760     0      89  >
 30931    43   232    29    43   760     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 30932    43   232    61    43   760     0      60  )
 30933    43   232    63    43   760     0      63  {
 30934    43   233    13    43   760     0     111  checkBounds
 30935    43   233    24    43   760     0      59  (
 30936    43   233    25    43   760     0     111  offset
 30937    43   233    31    43   760     0      66  ,
 30938    43   233    33    43   760     0     111  length
 30939    43   233    39    43   760     0      66  ,
 30940    43   233    41    43   760     0     111  dst.length
 30941    43   233    51    43   760     0      60  )
 30942    43   233    52    43   760     0     102  ;
 30943    43   234    13    43   760     1      36  int
 30944    43   234    17    43   760     1     111  pos
 30945    43   234    21    43   760     1      67  =
 30946    43   234    23    43   760     1     111  position
 30947    43   234    31    43   760     1      59  (
 30948    43   234    32    43   760     1      60  )
 30949    43   234    33    43   760     1     102  ;
 30950    43   235    13    43   760     1      36  int
 30951    43   235    17    43   760     1     111  lim
 30952    43   235    21    43   760     1      67  =
 30953    43   235    23    43   760     1     111  limit
 30954    43   235    28    43   760     1      59  (
 30955    43   235    29    43   760     1      60  )
 30956    43   235    30    43   760     1     102  ;
 30957    43   236    13    43   760     0     111  assert
 30958    43   236    20    43   760     0      59  (
 30959    43   236    21    43   760     0     111  pos
 30960    43   236    25    43   760     0      92  <=
 30961    43   236    28    43   760     0     111  lim
 30962    43   236    31    43   760     0      60  )
 30963    43   236    32    43   760     0     102  ;
 30964    43   237    13    43   760     0      36  int
 30965    43   237    17    43   760     0     111  rem
 30966    43   237    21    43   760     0      67  =
 30967    43   237    23    43   760     0      59  (
 30968    43   237    24    43   760     0     111  pos
 30969    43   237    28    43   760     0      92  <=
 30970    43   237    31    43   760     0     111  lim
 30971    43   237    35    43   760     0      58  ?
 30972    43   237    37    43   760     0     111  lim
 30973    43   237    41    43   760     0      77  -
 30974    43   237    43    43   760     0     111  pos
 30975    43   237    47    43   760     0      65  :
 30976    43   237    49    43   760     0     112  0
 30977    43   237    50    43   760     0      60  )
 30978    43   237    51    43   760     0     102  ;
 30979    43   238    13    43   760     0      31  if
 30980    43   238    16    43   760     0      59  (
 30981    43   238    17    43   760     0     111  length
 30982    43   238    24    43   760     0      89  >
 30983    43   238    26    43   760     0     111  rem
 30984    43   238    29    43   760     0      60  )
 30985    43   239    17    43   760     0      20  throw
 30986    43   239    27    43   760     0     111  BufferUnderflowException
 30987    43   239    51    43   760     0      59  (
 30988    43   239    52    43   760     0      60  )
 30989    43   239    53    43   760     0     102  ;
 30990    43   241    13    43   760     0      31  if
 30991    43   241    16    43   760     0      59  (
 30992    43   241    17    43   760     0     111  order
 30993    43   241    22    43   760     0      59  (
 30994    43   241    23    43   760     0      60  )
 30995    43   241    25    43   760     0      71  !=
 30996    43   241    28    43   760     0     111  ByteOrder.nativeOrder
 30997    43   241    49    43   760     0      59  (
 30998    43   241    50    43   760     0      60  )
 30999    43   241    51    43   760     0      60  )
 31000    43   242    17    43   760     0     111  Bits.copyToIntArray
 31001    43   242    36    43   760     0      59  (
 31002    43   242    37    43   760     0     111  ix
 31003    43   242    39    43   760     0      59  (
 31004    43   242    40    43   760     0     111  pos
 31005    43   242    43    43   760     0      60  )
 31006    43   242    44    43   760     0      66  ,
 31007    43   242    46    43   760     0     111  dst
 31008    43   242    49    43   760     0      66  ,
 31009    43   243    43    43   760     0     111  offset
 31010    43   243    50    43   760     0      90  <<
 31011    43   243    53    43   760     0     112  2
 31012    43   243    54    43   760     0      66  ,
 31013    43   244    43    43   760     0     111  length
 31014    43   244    50    43   760     0      90  <<
 31015    43   244    53    43   760     0     112  2
 31016    43   244    54    43   760     0      60  )
 31017    43   244    55    43   760     0     102  ;
 31018    43   245    13    43   760     0      48  else
 31019    43   246    17    43   760     0     111  Bits.copyToByteArray
 31020    43   246    37    43   760     0      59  (
 31021    43   246    38    43   760     0     111  ix
 31022    43   246    40    43   760     0      59  (
 31023    43   246    41    43   760     0     111  pos
 31024    43   246    44    43   760     0      60  )
 31025    43   246    45    43   760     0      66  ,
 31026    43   246    47    43   760     0     111  dst
 31027    43   246    50    43   760     0      66  ,
 31028    43   247    38    43   760     0     111  offset
 31029    43   247    45    43   760     0      90  <<
 31030    43   247    48    43   760     0     112  2
 31031    43   247    49    43   760     0      66  ,
 31032    43   248    38    43   760     0     111  length
 31033    43   248    45    43   760     0      90  <<
 31034    43   248    48    43   760     0     112  2
 31035    43   248    49    43   760     0      60  )
 31036    43   248    50    43   760     0     102  ;
 31037    43   249    13    43   760     0     111  position
 31038    43   249    21    43   760     0      59  (
 31039    43   249    22    43   760     0     111  pos
 31040    43   249    26    43   760     0      74  +
 31041    43   249    28    43   760     0     111  length
 31042    43   249    34    43   760     0      60  )
 31043    43   249    35    43   760     0     102  ;
 31044    43   250     9    43   760     0      64  }
 31045    43   250    11    43   760     0      48  else
 31046    43   250    16    43   760     0      63  {
 31047    43   251    13    43   760     0     111  super.get
 31048    43   251    22    43   760     0      59  (
 31049    43   251    23    43   760     0     111  dst
 31050    43   251    26    43   760     0      66  ,
 31051    43   251    28    43   760     0     111  offset
 31052    43   251    34    43   760     0      66  ,
 31053    43   251    36    43   760     0     111  length
 31054    43   251    42    43   760     0      60  )
 31055    43   251    43    43   760     0     102  ;
 31056    43   252     9    43   760     0      64  }
 31057    43   253     9    43   760     0      19  return
 31058    43   253    16    43   760     0      44  this
 31059    43   253    20    43   760     0     102  ;
 31060    43   257     5    43   760     0      64  }
 31061    43   257     5    43   760     0    1816  ENDMETHOD
 31062    43   257     5    43   761     0    1817  STARTMETHOD
 31063    43   261    12    43   761     0     111  FloatBuffer
 31064    43   261    24    43   761     0     111  put
 31065    43   261    27    43   761     0      59  (
 31066    43   261    34    43   761     0     111  x
 31067    43   261    35    43   761     0      60  )
 31068    43   261    37    43   761     0      63  {
 31069    43   263     9    43   761     0     111  unsafe.putInt
 31070    43   263    22    43   761     0      59  (
 31071    43   263    23    43   761     0     111  ix
 31072    43   263    25    43   761     0      59  (
 31073    43   263    26    43   761     0     111  nextPutIndex
 31074    43   263    38    43   761     0      59  (
 31075    43   263    39    43   761     0      60  )
 31076    43   263    40    43   761     0      60  )
 31077    43   263    41    43   761     0      66  ,
 31078    43   263    43    43   761     0     111  Bits.swap
 31079    43   263    52    43   761     0      59  (
 31080    43   263    53    43   761     0     111  Float.floatToRawIntBits
 31081    43   263    76    43   761     0      59  (
 31082    43   263    77    43   761     0     111  x
 31083    43   263    78    43   761     0      60  )
 31084    43   263    79    43   761     0      60  )
 31085    43   263    80    43   761     0      60  )
 31086    43   263    81    43   761     0     102  ;
 31087    43   264     9    43   761     0      19  return
 31088    43   264    16    43   761     0      44  this
 31089    43   264    20    43   761     0     102  ;
 31090    43   268     5    43   761     0      64  }
 31091    43   268     5    43   761     0    1818  ENDMETHOD
 31092    43   268     5    43   762     0    1819  STARTMETHOD
 31093    43   270    12    43   762     0     111  FloatBuffer
 31094    43   270    24    43   762     0     111  put
 31095    43   270    27    43   762     0      59  (
 31096    43   270    28    43   762     0      36  int
 31097    43   270    32    43   762     0     111  i
 31098    43   270    33    43   762     0      66  ,
 31099    43   270    41    43   762     0     111  x
 31100    43   270    42    43   762     0      60  )
 31101    43   270    44    43   762     0      63  {
 31102    43   272     9    43   762     0     111  unsafe.putInt
 31103    43   272    22    43   762     0      59  (
 31104    43   272    23    43   762     0     111  ix
 31105    43   272    25    43   762     0      59  (
 31106    43   272    26    43   762     0     111  checkIndex
 31107    43   272    36    43   762     0      59  (
 31108    43   272    37    43   762     0     111  i
 31109    43   272    38    43   762     0      60  )
 31110    43   272    39    43   762     0      60  )
 31111    43   272    40    43   762     0      66  ,
 31112    43   272    42    43   762     0     111  Bits.swap
 31113    43   272    51    43   762     0      59  (
 31114    43   272    52    43   762     0     111  Float.floatToRawIntBits
 31115    43   272    75    43   762     0      59  (
 31116    43   272    76    43   762     0     111  x
 31117    43   272    77    43   762     0      60  )
 31118    43   272    78    43   762     0      60  )
 31119    43   272    79    43   762     0      60  )
 31120    43   272    80    43   762     0     102  ;
 31121    43   273     9    43   762     0      19  return
 31122    43   273    16    43   762     0      44  this
 31123    43   273    20    43   762     0     102  ;
 31124    43   277     5    43   762     0      64  }
 31125    43   277     5    43   762     0    1820  ENDMETHOD
 31126    43   277     5    43   763     0    1821  STARTMETHOD
 31127    43   279    12    43   763     0     111  FloatBuffer
 31128    43   279    24    43   763     0     111  put
 31129    43   279    27    43   763     0      59  (
 31130    43   279    28    43   763     0     111  FloatBuffer
 31131    43   279    40    43   763     0     111  src
 31132    43   279    43    43   763     0      60  )
 31133    43   279    45    43   763     0      63  {
 31134    43   281     9    43   763     0      31  if
 31135    43   281    12    43   763     0      59  (
 31136    43   281    13    43   763     0     111  src
 31137    43   281    28    43   763     0     111  DirectFloatBufferS
 31138    43   281    46    43   763     0      60  )
 31139    43   281    48    43   763     0      63  {
 31140    43   282    13    43   763     0      31  if
 31141    43   282    16    43   763     0      59  (
 31142    43   282    17    43   763     0     111  src
 31143    43   282    21    43   763     0      68  ==
 31144    43   282    24    43   763     0      44  this
 31145    43   282    28    43   763     0      60  )
 31146    43   283    17    43   763     0      20  throw
 31147    43   283    27    43   763     0     111  IllegalArgumentException
 31148    43   283    51    43   763     0      59  (
 31149    43   283    52    43   763     0      60  )
 31150    43   283    53    43   763     0     102  ;
 31151    43   284    13    43   763     0     111  DirectFloatBufferS
 31152    43   284    32    43   763     0     111  sb
 31153    43   284    35    43   763     0      67  =
 31154    43   284    37    43   763     0      59  (
 31155    43   284    38    43   763     0     111  DirectFloatBufferS
 31156    43   284    56    43   763     0      60  )
 31157    43   284    57    43   763     0     111  src
 31158    43   284    60    43   763     0     102  ;
 31159    43   286    13    43   763     1      36  int
 31160    43   286    17    43   763     1     111  spos
 31161    43   286    22    43   763     1      67  =
 31162    43   286    24    43   763     1     111  sb.position
 31163    43   286    35    43   763     1      59  (
 31164    43   286    36    43   763     1      60  )
 31165    43   286    37    43   763     1     102  ;
 31166    43   287    13    43   763     1      36  int
 31167    43   287    17    43   763     1     111  slim
 31168    43   287    22    43   763     1      67  =
 31169    43   287    24    43   763     1     111  sb.limit
 31170    43   287    32    43   763     1      59  (
 31171    43   287    33    43   763     1      60  )
 31172    43   287    34    43   763     1     102  ;
 31173    43   288    13    43   763     0     111  assert
 31174    43   288    20    43   763     0      59  (
 31175    43   288    21    43   763     0     111  spos
 31176    43   288    26    43   763     0      92  <=
 31177    43   288    29    43   763     0     111  slim
 31178    43   288    33    43   763     0      60  )
 31179    43   288    34    43   763     0     102  ;
 31180    43   289    13    43   763     0      36  int
 31181    43   289    17    43   763     0     111  srem
 31182    43   289    22    43   763     0      67  =
 31183    43   289    24    43   763     0      59  (
 31184    43   289    25    43   763     0     111  spos
 31185    43   289    30    43   763     0      92  <=
 31186    43   289    33    43   763     0     111  slim
 31187    43   289    38    43   763     0      58  ?
 31188    43   289    40    43   763     0     111  slim
 31189    43   289    45    43   763     0      77  -
 31190    43   289    47    43   763     0     111  spos
 31191    43   289    52    43   763     0      65  :
 31192    43   289    54    43   763     0     112  0
 31193    43   289    55    43   763     0      60  )
 31194    43   289    56    43   763     0     102  ;
 31195    43   291    13    43   763     1      36  int
 31196    43   291    17    43   763     1     111  pos
 31197    43   291    21    43   763     1      67  =
 31198    43   291    23    43   763     1     111  position
 31199    43   291    31    43   763     1      59  (
 31200    43   291    32    43   763     1      60  )
 31201    43   291    33    43   763     1     102  ;
 31202    43   292    13    43   763     1      36  int
 31203    43   292    17    43   763     1     111  lim
 31204    43   292    21    43   763     1      67  =
 31205    43   292    23    43   763     1     111  limit
 31206    43   292    28    43   763     1      59  (
 31207    43   292    29    43   763     1      60  )
 31208    43   292    30    43   763     1     102  ;
 31209    43   293    13    43   763     0     111  assert
 31210    43   293    20    43   763     0      59  (
 31211    43   293    21    43   763     0     111  pos
 31212    43   293    25    43   763     0      92  <=
 31213    43   293    28    43   763     0     111  lim
 31214    43   293    31    43   763     0      60  )
 31215    43   293    32    43   763     0     102  ;
 31216    43   294    13    43   763     0      36  int
 31217    43   294    17    43   763     0     111  rem
 31218    43   294    21    43   763     0      67  =
 31219    43   294    23    43   763     0      59  (
 31220    43   294    24    43   763     0     111  pos
 31221    43   294    28    43   763     0      92  <=
 31222    43   294    31    43   763     0     111  lim
 31223    43   294    35    43   763     0      58  ?
 31224    43   294    37    43   763     0     111  lim
 31225    43   294    41    43   763     0      77  -
 31226    43   294    43    43   763     0     111  pos
 31227    43   294    47    43   763     0      65  :
 31228    43   294    49    43   763     0     112  0
 31229    43   294    50    43   763     0      60  )
 31230    43   294    51    43   763     0     102  ;
 31231    43   296    13    43   763     0      31  if
 31232    43   296    16    43   763     0      59  (
 31233    43   296    17    43   763     0     111  srem
 31234    43   296    22    43   763     0      89  >
 31235    43   296    24    43   763     0     111  rem
 31236    43   296    27    43   763     0      60  )
 31237    43   297    17    43   763     0      20  throw
 31238    43   297    27    43   763     0     111  BufferOverflowException
 31239    43   297    50    43   763     0      59  (
 31240    43   297    51    43   763     0      60  )
 31241    43   297    52    43   763     0     102  ;
 31242    43   298    13    43   763     0     111  unsafe.copyMemory
 31243    43   298    30    43   763     0      59  (
 31244    43   298    31    43   763     0     111  sb.ix
 31245    43   298    36    43   763     0      59  (
 31246    43   298    37    43   763     0     111  spos
 31247    43   298    41    43   763     0      60  )
 31248    43   298    42    43   763     0      66  ,
 31249    43   298    44    43   763     0     111  ix
 31250    43   298    46    43   763     0      59  (
 31251    43   298    47    43   763     0     111  pos
 31252    43   298    50    43   763     0      60  )
 31253    43   298    51    43   763     0      66  ,
 31254    43   298    53    43   763     0     111  srem
 31255    43   298    58    43   763     0      90  <<
 31256    43   298    61    43   763     0     112  2
 31257    43   298    62    43   763     0      60  )
 31258    43   298    63    43   763     0     102  ;
 31259    43   299    13    43   763     1     111  sb.position
 31260    43   299    24    43   763     1      59  (
 31261    43   299    25    43   763     1     111  spos
 31262    43   299    30    43   763     1      74  +
 31263    43   299    32    43   763     1     111  srem
 31264    43   299    36    43   763     1      60  )
 31265    43   299    37    43   763     1     102  ;
 31266    43   300    13    43   763     1     111  position
 31267    43   300    21    43   763     1      59  (
 31268    43   300    22    43   763     1     111  pos
 31269    43   300    26    43   763     1      74  +
 31270    43   300    28    43   763     1     111  srem
 31271    43   300    32    43   763     1      60  )
 31272    43   300    33    43   763     1     102  ;
 31273    43   301     9    43   763     0      64  }
 31274    43   301    11    43   763     0      48  else
 31275    43   301    16    43   763     0      31  if
 31276    43   301    19    43   763     0      59  (
 31277    43   301    20    43   763     0     111  src.hb
 31278    43   301    27    43   763     0      71  !=
 31279    43   301    30    43   763     0      21  null
 31280    43   301    34    43   763     0      60  )
 31281    43   301    36    43   763     0      63  {
 31282    43   303    13    43   763     1      36  int
 31283    43   303    17    43   763     1     111  spos
 31284    43   303    22    43   763     1      67  =
 31285    43   303    24    43   763     1     111  src.position
 31286    43   303    36    43   763     1      59  (
 31287    43   303    37    43   763     1      60  )
 31288    43   303    38    43   763     1     102  ;
 31289    43   304    13    43   763     1      36  int
 31290    43   304    17    43   763     1     111  slim
 31291    43   304    22    43   763     1      67  =
 31292    43   304    24    43   763     1     111  src.limit
 31293    43   304    33    43   763     1      59  (
 31294    43   304    34    43   763     1      60  )
 31295    43   304    35    43   763     1     102  ;
 31296    43   305    13    43   763     0     111  assert
 31297    43   305    20    43   763     0      59  (
 31298    43   305    21    43   763     0     111  spos
 31299    43   305    26    43   763     0      92  <=
 31300    43   305    29    43   763     0     111  slim
 31301    43   305    33    43   763     0      60  )
 31302    43   305    34    43   763     0     102  ;
 31303    43   306    13    43   763     0      36  int
 31304    43   306    17    43   763     0     111  srem
 31305    43   306    22    43   763     0      67  =
 31306    43   306    24    43   763     0      59  (
 31307    43   306    25    43   763     0     111  spos
 31308    43   306    30    43   763     0      92  <=
 31309    43   306    33    43   763     0     111  slim
 31310    43   306    38    43   763     0      58  ?
 31311    43   306    40    43   763     0     111  slim
 31312    43   306    45    43   763     0      77  -
 31313    43   306    47    43   763     0     111  spos
 31314    43   306    52    43   763     0      65  :
 31315    43   306    54    43   763     0     112  0
 31316    43   306    55    43   763     0      60  )
 31317    43   306    56    43   763     0     102  ;
 31318    43   308    13    43   763     0     111  put
 31319    43   308    16    43   763     0      59  (
 31320    43   308    17    43   763     0     111  src.hb
 31321    43   308    23    43   763     0      66  ,
 31322    43   308    25    43   763     0     111  src.offset
 31323    43   308    36    43   763     0      74  +
 31324    43   308    38    43   763     0     111  spos
 31325    43   308    42    43   763     0      66  ,
 31326    43   308    44    43   763     0     111  srem
 31327    43   308    48    43   763     0      60  )
 31328    43   308    49    43   763     0     102  ;
 31329    43   309    13    43   763     0     111  src.position
 31330    43   309    25    43   763     0      59  (
 31331    43   309    26    43   763     0     111  spos
 31332    43   309    31    43   763     0      74  +
 31333    43   309    33    43   763     0     111  srem
 31334    43   309    37    43   763     0      60  )
 31335    43   309    38    43   763     0     102  ;
 31336    43   311     9    43   763     0      64  }
 31337    43   311    11    43   763     0      48  else
 31338    43   311    16    43   763     0      63  {
 31339    43   312    13    43   763     0     111  super.put
 31340    43   312    22    43   763     0      59  (
 31341    43   312    23    43   763     0     111  src
 31342    43   312    26    43   763     0      60  )
 31343    43   312    27    43   763     0     102  ;
 31344    43   313     9    43   763     0      64  }
 31345    43   314     9    43   763     0      19  return
 31346    43   314    16    43   763     0      44  this
 31347    43   314    20    43   763     0     102  ;
 31348    43   318     5    43   763     0      64  }
 31349    43   318     5    43   763     0    1822  ENDMETHOD
 31350    43   318     5    43   764     0    1823  STARTMETHOD
 31351    43   320    12    43   764     0     111  FloatBuffer
 31352    43   320    24    43   764     0     111  put
 31353    43   320    27    43   764     0      59  (
 31354    43   320    33    43   764     0      61  [
 31355    43   320    34    43   764     0      62  ]
 31356    43   320    36    43   764     0     111  src
 31357    43   320    39    43   764     0      66  ,
 31358    43   320    41    43   764     0      36  int
 31359    43   320    45    43   764     0     111  offset
 31360    43   320    51    43   764     0      66  ,
 31361    43   320    53    43   764     0      36  int
 31362    43   320    57    43   764     0     111  length
 31363    43   320    63    43   764     0      60  )
 31364    43   320    65    43   764     0      63  {
 31365    43   322     9    43   764     0      31  if
 31366    43   322    12    43   764     0      59  (
 31367    43   322    13    43   764     0      59  (
 31368    43   322    14    43   764     0     111  length
 31369    43   322    21    43   764     0      90  <<
 31370    43   322    24    43   764     0     112  2
 31371    43   322    25    43   764     0      60  )
 31372    43   322    27    43   764     0      89  >
 31373    43   322    29    43   764     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 31374    43   322    63    43   764     0      60  )
 31375    43   322    65    43   764     0      63  {
 31376    43   323    13    43   764     0     111  checkBounds
 31377    43   323    24    43   764     0      59  (
 31378    43   323    25    43   764     0     111  offset
 31379    43   323    31    43   764     0      66  ,
 31380    43   323    33    43   764     0     111  length
 31381    43   323    39    43   764     0      66  ,
 31382    43   323    41    43   764     0     111  src.length
 31383    43   323    51    43   764     0      60  )
 31384    43   323    52    43   764     0     102  ;
 31385    43   324    13    43   764     1      36  int
 31386    43   324    17    43   764     1     111  pos
 31387    43   324    21    43   764     1      67  =
 31388    43   324    23    43   764     1     111  position
 31389    43   324    31    43   764     1      59  (
 31390    43   324    32    43   764     1      60  )
 31391    43   324    33    43   764     1     102  ;
 31392    43   325    13    43   764     1      36  int
 31393    43   325    17    43   764     1     111  lim
 31394    43   325    21    43   764     1      67  =
 31395    43   325    23    43   764     1     111  limit
 31396    43   325    28    43   764     1      59  (
 31397    43   325    29    43   764     1      60  )
 31398    43   325    30    43   764     1     102  ;
 31399    43   326    13    43   764     0     111  assert
 31400    43   326    20    43   764     0      59  (
 31401    43   326    21    43   764     0     111  pos
 31402    43   326    25    43   764     0      92  <=
 31403    43   326    28    43   764     0     111  lim
 31404    43   326    31    43   764     0      60  )
 31405    43   326    32    43   764     0     102  ;
 31406    43   327    13    43   764     0      36  int
 31407    43   327    17    43   764     0     111  rem
 31408    43   327    21    43   764     0      67  =
 31409    43   327    23    43   764     0      59  (
 31410    43   327    24    43   764     0     111  pos
 31411    43   327    28    43   764     0      92  <=
 31412    43   327    31    43   764     0     111  lim
 31413    43   327    35    43   764     0      58  ?
 31414    43   327    37    43   764     0     111  lim
 31415    43   327    41    43   764     0      77  -
 31416    43   327    43    43   764     0     111  pos
 31417    43   327    47    43   764     0      65  :
 31418    43   327    49    43   764     0     112  0
 31419    43   327    50    43   764     0      60  )
 31420    43   327    51    43   764     0     102  ;
 31421    43   328    13    43   764     0      31  if
 31422    43   328    16    43   764     0      59  (
 31423    43   328    17    43   764     0     111  length
 31424    43   328    24    43   764     0      89  >
 31425    43   328    26    43   764     0     111  rem
 31426    43   328    29    43   764     0      60  )
 31427    43   329    17    43   764     0      20  throw
 31428    43   329    27    43   764     0     111  BufferOverflowException
 31429    43   329    50    43   764     0      59  (
 31430    43   329    51    43   764     0      60  )
 31431    43   329    52    43   764     0     102  ;
 31432    43   331    13    43   764     0      31  if
 31433    43   331    16    43   764     0      59  (
 31434    43   331    17    43   764     0     111  order
 31435    43   331    22    43   764     0      59  (
 31436    43   331    23    43   764     0      60  )
 31437    43   331    25    43   764     0      71  !=
 31438    43   331    28    43   764     0     111  ByteOrder.nativeOrder
 31439    43   331    49    43   764     0      59  (
 31440    43   331    50    43   764     0      60  )
 31441    43   331    51    43   764     0      60  )
 31442    43   332    17    43   764     0     111  Bits.copyFromIntArray
 31443    43   332    38    43   764     0      59  (
 31444    43   332    39    43   764     0     111  src
 31445    43   332    42    43   764     0      66  ,
 31446    43   332    44    43   764     0     111  offset
 31447    43   332    51    43   764     0      90  <<
 31448    43   332    54    43   764     0     112  2
 31449    43   332    55    43   764     0      66  ,
 31450    43   333    45    43   764     0     111  ix
 31451    43   333    47    43   764     0      59  (
 31452    43   333    48    43   764     0     111  pos
 31453    43   333    51    43   764     0      60  )
 31454    43   333    52    43   764     0      66  ,
 31455    43   333    54    43   764     0     111  length
 31456    43   333    61    43   764     0      90  <<
 31457    43   333    64    43   764     0     112  2
 31458    43   333    65    43   764     0      60  )
 31459    43   333    66    43   764     0     102  ;
 31460    43   334    13    43   764     0      48  else
 31461    43   335    17    43   764     0     111  Bits.copyFromByteArray
 31462    43   335    39    43   764     0      59  (
 31463    43   335    40    43   764     0     111  src
 31464    43   335    43    43   764     0      66  ,
 31465    43   335    45    43   764     0     111  offset
 31466    43   335    52    43   764     0      90  <<
 31467    43   335    55    43   764     0     112  2
 31468    43   335    56    43   764     0      66  ,
 31469    43   336    40    43   764     0     111  ix
 31470    43   336    42    43   764     0      59  (
 31471    43   336    43    43   764     0     111  pos
 31472    43   336    46    43   764     0      60  )
 31473    43   336    47    43   764     0      66  ,
 31474    43   336    49    43   764     0     111  length
 31475    43   336    56    43   764     0      90  <<
 31476    43   336    59    43   764     0     112  2
 31477    43   336    60    43   764     0      60  )
 31478    43   336    61    43   764     0     102  ;
 31479    43   337    13    43   764     0     111  position
 31480    43   337    21    43   764     0      59  (
 31481    43   337    22    43   764     0     111  pos
 31482    43   337    26    43   764     0      74  +
 31483    43   337    28    43   764     0     111  length
 31484    43   337    34    43   764     0      60  )
 31485    43   337    35    43   764     0     102  ;
 31486    43   338     9    43   764     0      64  }
 31487    43   338    11    43   764     0      48  else
 31488    43   338    16    43   764     0      63  {
 31489    43   339    13    43   764     0     111  super.put
 31490    43   339    22    43   764     0      59  (
 31491    43   339    23    43   764     0     111  src
 31492    43   339    26    43   764     0      66  ,
 31493    43   339    28    43   764     0     111  offset
 31494    43   339    34    43   764     0      66  ,
 31495    43   339    36    43   764     0     111  length
 31496    43   339    42    43   764     0      60  )
 31497    43   339    43    43   764     0     102  ;
 31498    43   340     9    43   764     0      64  }
 31499    43   341     9    43   764     0      19  return
 31500    43   341    16    43   764     0      44  this
 31501    43   341    20    43   764     0     102  ;
 31502    43   345     5    43   764     0      64  }
 31503    43   345     5    43   764     0    1824  ENDMETHOD
 31504    43   345     5    43   765     0    1825  STARTMETHOD
 31505    43   347    12    43   765     0     111  FloatBuffer
 31506    43   347    24    43   765     0     111  compact
 31507    43   347    31    43   765     0      59  (
 31508    43   347    32    43   765     0      60  )
 31509    43   347    34    43   765     0      63  {
 31510    43   349     9    43   765     1      36  int
 31511    43   349    13    43   765     1     111  pos
 31512    43   349    17    43   765     1      67  =
 31513    43   349    19    43   765     1     111  position
 31514    43   349    27    43   765     1      59  (
 31515    43   349    28    43   765     1      60  )
 31516    43   349    29    43   765     1     102  ;
 31517    43   350     9    43   765     1      36  int
 31518    43   350    13    43   765     1     111  lim
 31519    43   350    17    43   765     1      67  =
 31520    43   350    19    43   765     1     111  limit
 31521    43   350    24    43   765     1      59  (
 31522    43   350    25    43   765     1      60  )
 31523    43   350    26    43   765     1     102  ;
 31524    43   351     9    43   765     0     111  assert
 31525    43   351    16    43   765     0      59  (
 31526    43   351    17    43   765     0     111  pos
 31527    43   351    21    43   765     0      92  <=
 31528    43   351    24    43   765     0     111  lim
 31529    43   351    27    43   765     0      60  )
 31530    43   351    28    43   765     0     102  ;
 31531    43   352     9    43   765     0      36  int
 31532    43   352    13    43   765     0     111  rem
 31533    43   352    17    43   765     0      67  =
 31534    43   352    19    43   765     0      59  (
 31535    43   352    20    43   765     0     111  pos
 31536    43   352    24    43   765     0      92  <=
 31537    43   352    27    43   765     0     111  lim
 31538    43   352    31    43   765     0      58  ?
 31539    43   352    33    43   765     0     111  lim
 31540    43   352    37    43   765     0      77  -
 31541    43   352    39    43   765     0     111  pos
 31542    43   352    43    43   765     0      65  :
 31543    43   352    45    43   765     0     112  0
 31544    43   352    46    43   765     0      60  )
 31545    43   352    47    43   765     0     102  ;
 31546    43   354     9    43   765     0     111  unsafe.copyMemory
 31547    43   354    26    43   765     0      59  (
 31548    43   354    27    43   765     0     111  ix
 31549    43   354    29    43   765     0      59  (
 31550    43   354    30    43   765     0     111  pos
 31551    43   354    33    43   765     0      60  )
 31552    43   354    34    43   765     0      66  ,
 31553    43   354    36    43   765     0     111  ix
 31554    43   354    38    43   765     0      59  (
 31555    43   354    39    43   765     0     112  0
 31556    43   354    40    43   765     0      60  )
 31557    43   354    41    43   765     0      66  ,
 31558    43   354    43    43   765     0     111  rem
 31559    43   354    47    43   765     0      90  <<
 31560    43   354    50    43   765     0     112  2
 31561    43   354    51    43   765     0      60  )
 31562    43   354    52    43   765     0     102  ;
 31563    43   355     9    43   765     0     111  position
 31564    43   355    17    43   765     0      59  (
 31565    43   355    18    43   765     0     111  rem
 31566    43   355    21    43   765     0      60  )
 31567    43   355    22    43   765     0     102  ;
 31568    43   356     9    43   765     0     111  limit
 31569    43   356    14    43   765     0      59  (
 31570    43   356    15    43   765     0     111  capacity
 31571    43   356    23    43   765     0      59  (
 31572    43   356    24    43   765     0      60  )
 31573    43   356    25    43   765     0      60  )
 31574    43   356    26    43   765     0     102  ;
 31575    43   357     9    43   765     0     111  clearMark
 31576    43   357    18    43   765     0      59  (
 31577    43   357    19    43   765     0      60  )
 31578    43   357    20    43   765     0     102  ;
 31579    43   358     9    43   765     0      19  return
 31580    43   358    16    43   765     0      44  this
 31581    43   358    20    43   765     1     102  ;
 31582    43   362     5    43   765     1      64  }
 31583    43   362     5    43   765     0    1826  ENDMETHOD
 31584    43   362     5    43   766     0    1827  STARTMETHOD
 31585    43   364    12    43   766     0      39  boolean
 31586    43   364    20    43   766     0     111  isDirect
 31587    43   364    28    43   766     0      59  (
 31588    43   364    29    43   766     0      60  )
 31589    43   364    31    43   766     0      63  {
 31590    43   365     9    43   766     0      19  return
 31591    43   365    16    43   766     0      52  true
 31592    43   365    20    43   766     1     102  ;
 31593    43   366     5    43   766     1      64  }
 31594    43   366     5    43   766     0    1828  ENDMETHOD
 31595    43   366     5    43   767     0    1829  STARTMETHOD
 31596    43   368    12    43   767     0      39  boolean
 31597    43   368    20    43   767     0     111  isReadOnly
 31598    43   368    30    43   767     0      59  (
 31599    43   368    31    43   767     0      60  )
 31600    43   368    33    43   767     0      63  {
 31601    43   369     9    43   767     0      19  return
 31602    43   369    16    43   767     0      43  false
 31603    43   369    21    43   767     1     102  ;
 31604    43   370     5    43   767     1      64  }
 31605    43   370     5    43   767     0    1830  ENDMETHOD
 31606    43   370     5    43   768     0    1831  STARTMETHOD
 31607    43   416    12    43   768     0     111  ByteOrder
 31608    43   416    22    43   768     0     111  order
 31609    43   416    27    43   768     0      59  (
 31610    43   416    28    43   768     0      60  )
 31611    43   416    30    43   768     0      63  {
 31612    43   418     9    43   768     0      19  return
 31613    43   418    16    43   768     0      59  (
 31614    43   418    17    43   768     0      59  (
 31615    43   418    18    43   768     0     111  ByteOrder.nativeOrder
 31616    43   418    39    43   768     0      59  (
 31617    43   418    40    43   768     0      60  )
 31618    43   418    42    43   768     0      68  ==
 31619    43   418    45    43   768     0     111  ByteOrder.BIG_ENDIAN
 31620    43   418    65    43   768     0      60  )
 31621    43   419    17    43   768     0      58  ?
 31622    43   419    19    43   768     0     111  ByteOrder.LITTLE_ENDIAN
 31623    43   419    43    43   768     0      65  :
 31624    43   419    45    43   768     0     111  ByteOrder.BIG_ENDIAN
 31625    43   419    65    43   768     0      60  )
 31626    43   419    66    43   768     0     102  ;
 31627    43   425     5    43   768     0      64  }
 31628    43   425     5    43   768     0    1832  ENDMETHOD
 31629    43   452     1    43    -1     0      64  }
 31630    43   452     1    43    -1     1    1833  ENDCLASS
 31631    43   452     1    -1    -1     1    1834  ENDFILE C:\Users\RA\javasrc\java\nio\DirectFloatBufferS.java
 31632    44     1     1    -1    -1     1    1835  STARTFILE C:\Users\RA\javasrc\java\nio\DirectFloatBufferU.java
 31633    44    28     9    -1    -1     0     111  java.nio
 31634    44    28    17    -1    -1     0     102  ;
 31635    44    30     1    -1    -1     1      49  import
 31636    44    30     8    -1    -1     1     111  sun.misc.Cleaner
 31637    44    30    24    -1    -1     1     102  ;
 31638    44    31     1    -1    -1     1      49  import
 31639    44    31     8    -1    -1     1     111  sun.misc.Unsafe
 31640    44    31    23    -1    -1     1     102  ;
 31641    44    32     1    -1    -1     1      49  import
 31642    44    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 31643    44    32    31    -1    -1     1     102  ;
 31644    44    33     1    -1    -1     1      49  import
 31645    44    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 31646    44    33    34    -1    -1     1     102  ;
 31647    44    36     1    44    -1     0    1836  STARTCLASS
 31648    44    36     1    44    -1     0      24  class
 31649    44    36     7    44    -1     0     111  DirectFloatBufferU
 31650    44    38     5    44    -1     0      38  extends
 31651    44    38    13    44    -1     0     111  FloatBuffer
 31652    44    42     5    44    -1     0      17  implements
 31653    44    42    16    44    -1     0     111  DirectBuffer
 31654    44    43     1    44    -1     0      63  {
 31655    44    48     5    44    -1     0      23  protected
 31656    44    48    15    44    -1     0      45  static
 31657    44    48    28    44    -1     0     111  Unsafe
 31658    44    48    35    44    -1     0     111  unsafe
 31659    44    48    42    44    -1     0      67  =
 31660    44    48    44    44    -1     0     111  Bits.unsafe
 31661    44    48    55    44    -1     0      59  (
 31662    44    48    56    44    -1     0      60  )
 31663    44    48    57    44    -1     0     102  ;
 31664    44    51     5    44    -1     0      23  protected
 31665    44    51    15    44    -1     0      45  static
 31666    44    51    28    44    -1     0      39  boolean
 31667    44    51    36    44    -1     0     111  unaligned
 31668    44    51    46    44    -1     0      67  =
 31669    44    51    48    44    -1     0     111  Bits.unaligned
 31670    44    51    62    44    -1     0      59  (
 31671    44    51    63    44    -1     0      60  )
 31672    44    51    64    44    -1     0     102  ;
 31673    44    59     5    44    -1     0      23  protected
 31674    44    59    15    44    -1     0     111  Object
 31675    44    59    22    44    -1     0     111  viewedBuffer
 31676    44    59    35    44    -1     0      67  =
 31677    44    59    37    44    -1     0      21  null
 31678    44    59    41    44    -1     0     102  ;
 31679    44    59    41    44   769     0    1837  STARTMETHOD
 31680    44    61    12    44   769     0     111  Object
 31681    44    61    19    44   769     0     111  viewedBuffer
 31682    44    61    31    44   769     0      59  (
 31683    44    61    32    44   769     0      60  )
 31684    44    61    34    44   769     0      63  {
 31685    44    62     9    44   769     0      19  return
 31686    44    62    16    44   769     0     111  viewedBuffer
 31687    44    62    28    44   769     0     102  ;
 31688    44    63     5    44   769     0      64  }
 31689    44    63     5    44   769     0    1838  ENDMETHOD
 31690    44    63     5    44   770     0    1839  STARTMETHOD
 31691    44   100    12    44   770     0     111  Cleaner
 31692    44   100    20    44   770     0     111  cleaner
 31693    44   100    27    44   770     0      59  (
 31694    44   100    28    44   770     0      60  )
 31695    44   100    30    44   770     0      63  {
 31696    44   100    32    44   770     0      19  return
 31697    44   100    39    44   770     0      21  null
 31698    44   100    43    44   770     0     102  ;
 31699    44   100    45    44   770     0      64  }
 31700    44   100    45    44   770     0    1840  ENDMETHOD
 31701    44   100    45    44   771     0    1841  STARTMETHOD
 31702    44   164     5    44   771     0     111  DirectFloatBufferU
 31703    44   164    23    44   771     0      59  (
 31704    44   164    24    44   771     0     111  DirectBuffer
 31705    44   164    37    44   771     0     111  db
 31706    44   164    39    44   771     0      66  ,
 31707    44   165    32    44   771     0      36  int
 31708    44   165    36    44   771     0     111  mark
 31709    44   165    40    44   771     0      66  ,
 31710    44   165    42    44   771     0      36  int
 31711    44   165    46    44   771     0     111  pos
 31712    44   165    49    44   771     0      66  ,
 31713    44   165    51    44   771     0      36  int
 31714    44   165    55    44   771     0     111  lim
 31715    44   165    58    44   771     0      66  ,
 31716    44   165    60    44   771     0      36  int
 31717    44   165    64    44   771     0     111  cap
 31718    44   165    67    44   771     0      66  ,
 31719    44   166    32    44   771     0      36  int
 31720    44   166    36    44   771     0     111  off
 31721    44   166    39    44   771     0      60  )
 31722    44   167     5    44   771     0      63  {
 31723    44   169     9    44   771     0      27  super
 31724    44   169    14    44   771     0      59  (
 31725    44   169    15    44   771     0     111  mark
 31726    44   169    19    44   771     0      66  ,
 31727    44   169    21    44   771     0     111  pos
 31728    44   169    24    44   771     0      66  ,
 31729    44   169    26    44   771     0     111  lim
 31730    44   169    29    44   771     0      66  ,
 31731    44   169    31    44   771     0     111  cap
 31732    44   169    34    44   771     0      60  )
 31733    44   169    35    44   771     0     102  ;
 31734    44   170     9    44   771     0     111  address
 31735    44   170    17    44   771     0      67  =
 31736    44   170    19    44   771     0     111  db.address
 31737    44   170    29    44   771     0      59  (
 31738    44   170    30    44   771     0      60  )
 31739    44   170    32    44   771     0      74  +
 31740    44   170    34    44   771     0     111  off
 31741    44   170    37    44   771     0     102  ;
 31742    44   171     9    44   771     0     111  viewedBuffer
 31743    44   171    22    44   771     0      67  =
 31744    44   171    24    44   771     0     111  db
 31745    44   171    26    44   771     0     102  ;
 31746    44   178     5    44   771     0      64  }
 31747    44   178     5    44   771     0    1842  ENDMETHOD
 31748    44   178     5    44   772     0    1843  STARTMETHOD
 31749    44   180    12    44   772     0     111  FloatBuffer
 31750    44   180    24    44   772     0     111  slice
 31751    44   180    29    44   772     0      59  (
 31752    44   180    30    44   772     0      60  )
 31753    44   180    32    44   772     0      63  {
 31754    44   181     9    44   772     1      36  int
 31755    44   181    13    44   772     1     111  pos
 31756    44   181    17    44   772     1      67  =
 31757    44   181    19    44   772     1     111  this.position
 31758    44   181    32    44   772     1      59  (
 31759    44   181    33    44   772     1      60  )
 31760    44   181    34    44   772     1     102  ;
 31761    44   182     9    44   772     1      36  int
 31762    44   182    13    44   772     1     111  lim
 31763    44   182    17    44   772     1      67  =
 31764    44   182    19    44   772     1     111  this.limit
 31765    44   182    29    44   772     1      59  (
 31766    44   182    30    44   772     1      60  )
 31767    44   182    31    44   772     1     102  ;
 31768    44   183     9    44   772     0     111  assert
 31769    44   183    16    44   772     0      59  (
 31770    44   183    17    44   772     0     111  pos
 31771    44   183    21    44   772     0      92  <=
 31772    44   183    24    44   772     0     111  lim
 31773    44   183    27    44   772     0      60  )
 31774    44   183    28    44   772     0     102  ;
 31775    44   184     9    44   772     0      36  int
 31776    44   184    13    44   772     0     111  rem
 31777    44   184    17    44   772     0      67  =
 31778    44   184    19    44   772     0      59  (
 31779    44   184    20    44   772     0     111  pos
 31780    44   184    24    44   772     0      92  <=
 31781    44   184    27    44   772     0     111  lim
 31782    44   184    31    44   772     0      58  ?
 31783    44   184    33    44   772     0     111  lim
 31784    44   184    37    44   772     0      77  -
 31785    44   184    39    44   772     0     111  pos
 31786    44   184    43    44   772     0      65  :
 31787    44   184    45    44   772     0     112  0
 31788    44   184    46    44   772     0      60  )
 31789    44   184    47    44   772     0     102  ;
 31790    44   185     9    44   772     0      36  int
 31791    44   185    13    44   772     0     111  off
 31792    44   185    17    44   772     0      67  =
 31793    44   185    19    44   772     0      59  (
 31794    44   185    20    44   772     0     111  pos
 31795    44   185    24    44   772     0      90  <<
 31796    44   185    27    44   772     0     112  2
 31797    44   185    28    44   772     0      60  )
 31798    44   185    29    44   772     0     102  ;
 31799    44   186     9    44   772     0     111  assert
 31800    44   186    16    44   772     0      59  (
 31801    44   186    17    44   772     0     111  off
 31802    44   186    21    44   772     0      88  >=
 31803    44   186    24    44   772     0     112  0
 31804    44   186    25    44   772     0      60  )
 31805    44   186    26    44   772     0     102  ;
 31806    44   187     9    44   772     0      19  return
 31807    44   187    20    44   772     0     111  DirectFloatBufferU
 31808    44   187    38    44   772     0      59  (
 31809    44   187    39    44   772     0      44  this
 31810    44   187    43    44   772     0      66  ,
 31811    44   187    45    44   772     0      77  -
 31812    44   187    46    44   772     0     112  1
 31813    44   187    47    44   772     0      66  ,
 31814    44   187    49    44   772     0     112  0
 31815    44   187    50    44   772     0      66  ,
 31816    44   187    52    44   772     0     111  rem
 31817    44   187    55    44   772     0      66  ,
 31818    44   187    57    44   772     0     111  rem
 31819    44   187    60    44   772     0      66  ,
 31820    44   187    62    44   772     0     111  off
 31821    44   187    65    44   772     0      60  )
 31822    44   187    66    44   772     0     102  ;
 31823    44   188     5    44   772     0      64  }
 31824    44   188     5    44   772     0    1844  ENDMETHOD
 31825    44   188     5    44   773     0    1845  STARTMETHOD
 31826    44   190    12    44   773     0     111  FloatBuffer
 31827    44   190    24    44   773     0     111  duplicate
 31828    44   190    33    44   773     0      59  (
 31829    44   190    34    44   773     0      60  )
 31830    44   190    36    44   773     0      63  {
 31831    44   191     9    44   773     0      19  return
 31832    44   191    20    44   773     0     111  DirectFloatBufferU
 31833    44   191    38    44   773     0      59  (
 31834    44   191    39    44   773     0      44  this
 31835    44   191    43    44   773     0      66  ,
 31836    44   192    47    44   773     1     111  this.markValue
 31837    44   192    61    44   773     1      59  (
 31838    44   192    62    44   773     1      60  )
 31839    44   192    63    44   773     1      66  ,
 31840    44   193    47    44   773     1     111  this.position
 31841    44   193    60    44   773     1      59  (
 31842    44   193    61    44   773     1      60  )
 31843    44   193    62    44   773     1      66  ,
 31844    44   194    47    44   773     1     111  this.limit
 31845    44   194    57    44   773     1      59  (
 31846    44   194    58    44   773     1      60  )
 31847    44   194    59    44   773     1      66  ,
 31848    44   195    47    44   773     1     111  this.capacity
 31849    44   195    60    44   773     1      59  (
 31850    44   195    61    44   773     1      60  )
 31851    44   195    62    44   773     1      66  ,
 31852    44   196    47    44   773     0     112  0
 31853    44   196    48    44   773     0      60  )
 31854    44   196    49    44   773     0     102  ;
 31855    44   197     5    44   773     0      64  }
 31856    44   197     5    44   773     0    1846  ENDMETHOD
 31857    44   197     5    44   774     0    1847  STARTMETHOD
 31858    44   199    12    44   774     0     111  FloatBuffer
 31859    44   199    24    44   774     0     111  asReadOnlyBuffer
 31860    44   199    40    44   774     0      59  (
 31861    44   199    41    44   774     0      60  )
 31862    44   199    43    44   774     0      63  {
 31863    44   201     9    44   774     0      19  return
 31864    44   201    20    44   774     0     111  DirectFloatBufferRU
 31865    44   201    39    44   774     0      59  (
 31866    44   201    40    44   774     0      44  this
 31867    44   201    44    44   774     0      66  ,
 31868    44   202    44    44   774     1     111  this.markValue
 31869    44   202    58    44   774     1      59  (
 31870    44   202    59    44   774     1      60  )
 31871    44   202    60    44   774     1      66  ,
 31872    44   203    44    44   774     1     111  this.position
 31873    44   203    57    44   774     1      59  (
 31874    44   203    58    44   774     1      60  )
 31875    44   203    59    44   774     1      66  ,
 31876    44   204    44    44   774     1     111  this.limit
 31877    44   204    54    44   774     1      59  (
 31878    44   204    55    44   774     1      60  )
 31879    44   204    56    44   774     1      66  ,
 31880    44   205    44    44   774     1     111  this.capacity
 31881    44   205    57    44   774     1      59  (
 31882    44   205    58    44   774     1      60  )
 31883    44   205    59    44   774     1      66  ,
 31884    44   206    44    44   774     0     112  0
 31885    44   206    45    44   774     0      60  )
 31886    44   206    46    44   774     0     102  ;
 31887    44   210     5    44   774     0      64  }
 31888    44   210     5    44   774     0    1848  ENDMETHOD
 31889    44   210     5    44   775     0    1849  STARTMETHOD
 31890    44   214    12    44   775     0      53  long
 31891    44   214    17    44   775     0     111  address
 31892    44   214    24    44   775     0      59  (
 31893    44   214    25    44   775     0      60  )
 31894    44   214    27    44   775     0      63  {
 31895    44   215     9    44   775     0      19  return
 31896    44   215    16    44   775     0     111  address
 31897    44   215    23    44   775     0     102  ;
 31898    44   216     5    44   775     0      64  }
 31899    44   216     5    44   775     0    1850  ENDMETHOD
 31900    44   216     5    44   776     0    1851  STARTMETHOD
 31901    44   218     5    44   776     0      41  private
 31902    44   218    13    44   776     0      53  long
 31903    44   218    18    44   776     0     111  ix
 31904    44   218    20    44   776     0      59  (
 31905    44   218    21    44   776     0      36  int
 31906    44   218    25    44   776     0     111  i
 31907    44   218    26    44   776     0      60  )
 31908    44   218    28    44   776     0      63  {
 31909    44   219     9    44   776     0      19  return
 31910    44   219    16    44   776     0     111  address
 31911    44   219    24    44   776     0      74  +
 31912    44   219    26    44   776     0      59  (
 31913    44   219    27    44   776     0     111  i
 31914    44   219    29    44   776     0      90  <<
 31915    44   219    32    44   776     0     112  2
 31916    44   219    33    44   776     0      60  )
 31917    44   219    34    44   776     0     102  ;
 31918    44   220     5    44   776     0      64  }
 31919    44   220     5    44   776     0    1852  ENDMETHOD
 31920    44   220     5    44   777     0    1853  STARTMETHOD
 31921    44   222    18    44   777     0     111  get
 31922    44   222    21    44   777     0      59  (
 31923    44   222    22    44   777     0      60  )
 31924    44   222    24    44   777     0      63  {
 31925    44   223     9    44   777     0      19  return
 31926    44   223    16    44   777     0      59  (
 31927    44   223    17    44   777     0      59  (
 31928    44   223    18    44   777     0     111  unsafe.getFloat
 31929    44   223    33    44   777     0      59  (
 31930    44   223    34    44   777     0     111  ix
 31931    44   223    36    44   777     0      59  (
 31932    44   223    37    44   777     0     111  nextGetIndex
 31933    44   223    49    44   777     0      59  (
 31934    44   223    50    44   777     0      60  )
 31935    44   223    51    44   777     0      60  )
 31936    44   223    52    44   777     0      60  )
 31937    44   223    53    44   777     0      60  )
 31938    44   223    54    44   777     0      60  )
 31939    44   223    55    44   777     0     102  ;
 31940    44   224     5    44   777     0      64  }
 31941    44   224     5    44   777     0    1854  ENDMETHOD
 31942    44   224     5    44   778     0    1855  STARTMETHOD
 31943    44   226    18    44   778     0     111  get
 31944    44   226    21    44   778     0      59  (
 31945    44   226    22    44   778     0      36  int
 31946    44   226    26    44   778     0     111  i
 31947    44   226    27    44   778     0      60  )
 31948    44   226    29    44   778     0      63  {
 31949    44   227     9    44   778     0      19  return
 31950    44   227    16    44   778     0      59  (
 31951    44   227    17    44   778     0      59  (
 31952    44   227    18    44   778     0     111  unsafe.getFloat
 31953    44   227    33    44   778     0      59  (
 31954    44   227    34    44   778     0     111  ix
 31955    44   227    36    44   778     0      59  (
 31956    44   227    37    44   778     0     111  checkIndex
 31957    44   227    47    44   778     0      59  (
 31958    44   227    48    44   778     0     111  i
 31959    44   227    49    44   778     0      60  )
 31960    44   227    50    44   778     0      60  )
 31961    44   227    51    44   778     0      60  )
 31962    44   227    52    44   778     0      60  )
 31963    44   227    53    44   778     0      60  )
 31964    44   227    54    44   778     0     102  ;
 31965    44   228     5    44   778     0      64  }
 31966    44   228     5    44   778     0    1856  ENDMETHOD
 31967    44   228     5    44   779     0    1857  STARTMETHOD
 31968    44   230    12    44   779     0     111  FloatBuffer
 31969    44   230    24    44   779     0     111  get
 31970    44   230    27    44   779     0      59  (
 31971    44   230    33    44   779     0      61  [
 31972    44   230    34    44   779     0      62  ]
 31973    44   230    36    44   779     0     111  dst
 31974    44   230    39    44   779     0      66  ,
 31975    44   230    41    44   779     0      36  int
 31976    44   230    45    44   779     0     111  offset
 31977    44   230    51    44   779     0      66  ,
 31978    44   230    53    44   779     0      36  int
 31979    44   230    57    44   779     0     111  length
 31980    44   230    63    44   779     0      60  )
 31981    44   230    65    44   779     0      63  {
 31982    44   232     9    44   779     0      31  if
 31983    44   232    12    44   779     0      59  (
 31984    44   232    13    44   779     0      59  (
 31985    44   232    14    44   779     0     111  length
 31986    44   232    21    44   779     0      90  <<
 31987    44   232    24    44   779     0     112  2
 31988    44   232    25    44   779     0      60  )
 31989    44   232    27    44   779     0      89  >
 31990    44   232    29    44   779     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 31991    44   232    61    44   779     0      60  )
 31992    44   232    63    44   779     0      63  {
 31993    44   233    13    44   779     0     111  checkBounds
 31994    44   233    24    44   779     0      59  (
 31995    44   233    25    44   779     0     111  offset
 31996    44   233    31    44   779     0      66  ,
 31997    44   233    33    44   779     0     111  length
 31998    44   233    39    44   779     0      66  ,
 31999    44   233    41    44   779     0     111  dst.length
 32000    44   233    51    44   779     0      60  )
 32001    44   233    52    44   779     0     102  ;
 32002    44   234    13    44   779     1      36  int
 32003    44   234    17    44   779     1     111  pos
 32004    44   234    21    44   779     1      67  =
 32005    44   234    23    44   779     1     111  position
 32006    44   234    31    44   779     1      59  (
 32007    44   234    32    44   779     1      60  )
 32008    44   234    33    44   779     1     102  ;
 32009    44   235    13    44   779     1      36  int
 32010    44   235    17    44   779     1     111  lim
 32011    44   235    21    44   779     1      67  =
 32012    44   235    23    44   779     1     111  limit
 32013    44   235    28    44   779     1      59  (
 32014    44   235    29    44   779     1      60  )
 32015    44   235    30    44   779     1     102  ;
 32016    44   236    13    44   779     0     111  assert
 32017    44   236    20    44   779     0      59  (
 32018    44   236    21    44   779     0     111  pos
 32019    44   236    25    44   779     0      92  <=
 32020    44   236    28    44   779     0     111  lim
 32021    44   236    31    44   779     0      60  )
 32022    44   236    32    44   779     0     102  ;
 32023    44   237    13    44   779     0      36  int
 32024    44   237    17    44   779     0     111  rem
 32025    44   237    21    44   779     0      67  =
 32026    44   237    23    44   779     0      59  (
 32027    44   237    24    44   779     0     111  pos
 32028    44   237    28    44   779     0      92  <=
 32029    44   237    31    44   779     0     111  lim
 32030    44   237    35    44   779     0      58  ?
 32031    44   237    37    44   779     0     111  lim
 32032    44   237    41    44   779     0      77  -
 32033    44   237    43    44   779     0     111  pos
 32034    44   237    47    44   779     0      65  :
 32035    44   237    49    44   779     0     112  0
 32036    44   237    50    44   779     0      60  )
 32037    44   237    51    44   779     0     102  ;
 32038    44   238    13    44   779     0      31  if
 32039    44   238    16    44   779     0      59  (
 32040    44   238    17    44   779     0     111  length
 32041    44   238    24    44   779     0      89  >
 32042    44   238    26    44   779     0     111  rem
 32043    44   238    29    44   779     0      60  )
 32044    44   239    17    44   779     0      20  throw
 32045    44   239    27    44   779     0     111  BufferUnderflowException
 32046    44   239    51    44   779     0      59  (
 32047    44   239    52    44   779     0      60  )
 32048    44   239    53    44   779     0     102  ;
 32049    44   241    13    44   779     0      31  if
 32050    44   241    16    44   779     0      59  (
 32051    44   241    17    44   779     0     111  order
 32052    44   241    22    44   779     0      59  (
 32053    44   241    23    44   779     0      60  )
 32054    44   241    25    44   779     0      71  !=
 32055    44   241    28    44   779     0     111  ByteOrder.nativeOrder
 32056    44   241    49    44   779     0      59  (
 32057    44   241    50    44   779     0      60  )
 32058    44   241    51    44   779     0      60  )
 32059    44   242    17    44   779     0     111  Bits.copyToIntArray
 32060    44   242    36    44   779     0      59  (
 32061    44   242    37    44   779     0     111  ix
 32062    44   242    39    44   779     0      59  (
 32063    44   242    40    44   779     0     111  pos
 32064    44   242    43    44   779     0      60  )
 32065    44   242    44    44   779     0      66  ,
 32066    44   242    46    44   779     0     111  dst
 32067    44   242    49    44   779     0      66  ,
 32068    44   243    43    44   779     0     111  offset
 32069    44   243    50    44   779     0      90  <<
 32070    44   243    53    44   779     0     112  2
 32071    44   243    54    44   779     0      66  ,
 32072    44   244    43    44   779     0     111  length
 32073    44   244    50    44   779     0      90  <<
 32074    44   244    53    44   779     0     112  2
 32075    44   244    54    44   779     0      60  )
 32076    44   244    55    44   779     0     102  ;
 32077    44   245    13    44   779     0      48  else
 32078    44   246    17    44   779     0     111  Bits.copyToByteArray
 32079    44   246    37    44   779     0      59  (
 32080    44   246    38    44   779     0     111  ix
 32081    44   246    40    44   779     0      59  (
 32082    44   246    41    44   779     0     111  pos
 32083    44   246    44    44   779     0      60  )
 32084    44   246    45    44   779     0      66  ,
 32085    44   246    47    44   779     0     111  dst
 32086    44   246    50    44   779     0      66  ,
 32087    44   247    38    44   779     0     111  offset
 32088    44   247    45    44   779     0      90  <<
 32089    44   247    48    44   779     0     112  2
 32090    44   247    49    44   779     0      66  ,
 32091    44   248    38    44   779     0     111  length
 32092    44   248    45    44   779     0      90  <<
 32093    44   248    48    44   779     0     112  2
 32094    44   248    49    44   779     0      60  )
 32095    44   248    50    44   779     0     102  ;
 32096    44   249    13    44   779     0     111  position
 32097    44   249    21    44   779     0      59  (
 32098    44   249    22    44   779     0     111  pos
 32099    44   249    26    44   779     0      74  +
 32100    44   249    28    44   779     0     111  length
 32101    44   249    34    44   779     0      60  )
 32102    44   249    35    44   779     0     102  ;
 32103    44   250     9    44   779     0      64  }
 32104    44   250    11    44   779     0      48  else
 32105    44   250    16    44   779     0      63  {
 32106    44   251    13    44   779     0     111  super.get
 32107    44   251    22    44   779     0      59  (
 32108    44   251    23    44   779     0     111  dst
 32109    44   251    26    44   779     0      66  ,
 32110    44   251    28    44   779     0     111  offset
 32111    44   251    34    44   779     0      66  ,
 32112    44   251    36    44   779     0     111  length
 32113    44   251    42    44   779     0      60  )
 32114    44   251    43    44   779     0     102  ;
 32115    44   252     9    44   779     0      64  }
 32116    44   253     9    44   779     0      19  return
 32117    44   253    16    44   779     0      44  this
 32118    44   253    20    44   779     0     102  ;
 32119    44   257     5    44   779     0      64  }
 32120    44   257     5    44   779     0    1858  ENDMETHOD
 32121    44   257     5    44   780     0    1859  STARTMETHOD
 32122    44   261    12    44   780     0     111  FloatBuffer
 32123    44   261    24    44   780     0     111  put
 32124    44   261    27    44   780     0      59  (
 32125    44   261    34    44   780     0     111  x
 32126    44   261    35    44   780     0      60  )
 32127    44   261    37    44   780     0      63  {
 32128    44   263     9    44   780     0     111  unsafe.putFloat
 32129    44   263    24    44   780     0      59  (
 32130    44   263    25    44   780     0     111  ix
 32131    44   263    27    44   780     0      59  (
 32132    44   263    28    44   780     0     111  nextPutIndex
 32133    44   263    40    44   780     0      59  (
 32134    44   263    41    44   780     0      60  )
 32135    44   263    42    44   780     0      60  )
 32136    44   263    43    44   780     0      66  ,
 32137    44   263    45    44   780     0      59  (
 32138    44   263    46    44   780     0      59  (
 32139    44   263    47    44   780     0     111  x
 32140    44   263    48    44   780     0      60  )
 32141    44   263    49    44   780     0      60  )
 32142    44   263    50    44   780     0      60  )
 32143    44   263    51    44   780     0     102  ;
 32144    44   264     9    44   780     0      19  return
 32145    44   264    16    44   780     0      44  this
 32146    44   264    20    44   780     0     102  ;
 32147    44   268     5    44   780     0      64  }
 32148    44   268     5    44   780     0    1860  ENDMETHOD
 32149    44   268     5    44   781     0    1861  STARTMETHOD
 32150    44   270    12    44   781     0     111  FloatBuffer
 32151    44   270    24    44   781     0     111  put
 32152    44   270    27    44   781     0      59  (
 32153    44   270    28    44   781     0      36  int
 32154    44   270    32    44   781     0     111  i
 32155    44   270    33    44   781     0      66  ,
 32156    44   270    41    44   781     0     111  x
 32157    44   270    42    44   781     0      60  )
 32158    44   270    44    44   781     0      63  {
 32159    44   272     9    44   781     0     111  unsafe.putFloat
 32160    44   272    24    44   781     0      59  (
 32161    44   272    25    44   781     0     111  ix
 32162    44   272    27    44   781     0      59  (
 32163    44   272    28    44   781     0     111  checkIndex
 32164    44   272    38    44   781     0      59  (
 32165    44   272    39    44   781     0     111  i
 32166    44   272    40    44   781     0      60  )
 32167    44   272    41    44   781     0      60  )
 32168    44   272    42    44   781     0      66  ,
 32169    44   272    44    44   781     0      59  (
 32170    44   272    45    44   781     0      59  (
 32171    44   272    46    44   781     0     111  x
 32172    44   272    47    44   781     0      60  )
 32173    44   272    48    44   781     0      60  )
 32174    44   272    49    44   781     0      60  )
 32175    44   272    50    44   781     0     102  ;
 32176    44   273     9    44   781     0      19  return
 32177    44   273    16    44   781     0      44  this
 32178    44   273    20    44   781     0     102  ;
 32179    44   277     5    44   781     0      64  }
 32180    44   277     5    44   781     0    1862  ENDMETHOD
 32181    44   277     5    44   782     0    1863  STARTMETHOD
 32182    44   279    12    44   782     0     111  FloatBuffer
 32183    44   279    24    44   782     0     111  put
 32184    44   279    27    44   782     0      59  (
 32185    44   279    28    44   782     0     111  FloatBuffer
 32186    44   279    40    44   782     0     111  src
 32187    44   279    43    44   782     0      60  )
 32188    44   279    45    44   782     0      63  {
 32189    44   281     9    44   782     0      31  if
 32190    44   281    12    44   782     0      59  (
 32191    44   281    13    44   782     0     111  src
 32192    44   281    28    44   782     0     111  DirectFloatBufferU
 32193    44   281    46    44   782     0      60  )
 32194    44   281    48    44   782     0      63  {
 32195    44   282    13    44   782     0      31  if
 32196    44   282    16    44   782     0      59  (
 32197    44   282    17    44   782     0     111  src
 32198    44   282    21    44   782     0      68  ==
 32199    44   282    24    44   782     0      44  this
 32200    44   282    28    44   782     0      60  )
 32201    44   283    17    44   782     0      20  throw
 32202    44   283    27    44   782     0     111  IllegalArgumentException
 32203    44   283    51    44   782     0      59  (
 32204    44   283    52    44   782     0      60  )
 32205    44   283    53    44   782     0     102  ;
 32206    44   284    13    44   782     0     111  DirectFloatBufferU
 32207    44   284    32    44   782     0     111  sb
 32208    44   284    35    44   782     0      67  =
 32209    44   284    37    44   782     0      59  (
 32210    44   284    38    44   782     0     111  DirectFloatBufferU
 32211    44   284    56    44   782     0      60  )
 32212    44   284    57    44   782     0     111  src
 32213    44   284    60    44   782     0     102  ;
 32214    44   286    13    44   782     1      36  int
 32215    44   286    17    44   782     1     111  spos
 32216    44   286    22    44   782     1      67  =
 32217    44   286    24    44   782     1     111  sb.position
 32218    44   286    35    44   782     1      59  (
 32219    44   286    36    44   782     1      60  )
 32220    44   286    37    44   782     1     102  ;
 32221    44   287    13    44   782     1      36  int
 32222    44   287    17    44   782     1     111  slim
 32223    44   287    22    44   782     1      67  =
 32224    44   287    24    44   782     1     111  sb.limit
 32225    44   287    32    44   782     1      59  (
 32226    44   287    33    44   782     1      60  )
 32227    44   287    34    44   782     1     102  ;
 32228    44   288    13    44   782     0     111  assert
 32229    44   288    20    44   782     0      59  (
 32230    44   288    21    44   782     0     111  spos
 32231    44   288    26    44   782     0      92  <=
 32232    44   288    29    44   782     0     111  slim
 32233    44   288    33    44   782     0      60  )
 32234    44   288    34    44   782     0     102  ;
 32235    44   289    13    44   782     0      36  int
 32236    44   289    17    44   782     0     111  srem
 32237    44   289    22    44   782     0      67  =
 32238    44   289    24    44   782     0      59  (
 32239    44   289    25    44   782     0     111  spos
 32240    44   289    30    44   782     0      92  <=
 32241    44   289    33    44   782     0     111  slim
 32242    44   289    38    44   782     0      58  ?
 32243    44   289    40    44   782     0     111  slim
 32244    44   289    45    44   782     0      77  -
 32245    44   289    47    44   782     0     111  spos
 32246    44   289    52    44   782     0      65  :
 32247    44   289    54    44   782     0     112  0
 32248    44   289    55    44   782     0      60  )
 32249    44   289    56    44   782     0     102  ;
 32250    44   291    13    44   782     1      36  int
 32251    44   291    17    44   782     1     111  pos
 32252    44   291    21    44   782     1      67  =
 32253    44   291    23    44   782     1     111  position
 32254    44   291    31    44   782     1      59  (
 32255    44   291    32    44   782     1      60  )
 32256    44   291    33    44   782     1     102  ;
 32257    44   292    13    44   782     1      36  int
 32258    44   292    17    44   782     1     111  lim
 32259    44   292    21    44   782     1      67  =
 32260    44   292    23    44   782     1     111  limit
 32261    44   292    28    44   782     1      59  (
 32262    44   292    29    44   782     1      60  )
 32263    44   292    30    44   782     1     102  ;
 32264    44   293    13    44   782     0     111  assert
 32265    44   293    20    44   782     0      59  (
 32266    44   293    21    44   782     0     111  pos
 32267    44   293    25    44   782     0      92  <=
 32268    44   293    28    44   782     0     111  lim
 32269    44   293    31    44   782     0      60  )
 32270    44   293    32    44   782     0     102  ;
 32271    44   294    13    44   782     0      36  int
 32272    44   294    17    44   782     0     111  rem
 32273    44   294    21    44   782     0      67  =
 32274    44   294    23    44   782     0      59  (
 32275    44   294    24    44   782     0     111  pos
 32276    44   294    28    44   782     0      92  <=
 32277    44   294    31    44   782     0     111  lim
 32278    44   294    35    44   782     0      58  ?
 32279    44   294    37    44   782     0     111  lim
 32280    44   294    41    44   782     0      77  -
 32281    44   294    43    44   782     0     111  pos
 32282    44   294    47    44   782     0      65  :
 32283    44   294    49    44   782     0     112  0
 32284    44   294    50    44   782     0      60  )
 32285    44   294    51    44   782     0     102  ;
 32286    44   296    13    44   782     0      31  if
 32287    44   296    16    44   782     0      59  (
 32288    44   296    17    44   782     0     111  srem
 32289    44   296    22    44   782     0      89  >
 32290    44   296    24    44   782     0     111  rem
 32291    44   296    27    44   782     0      60  )
 32292    44   297    17    44   782     0      20  throw
 32293    44   297    27    44   782     0     111  BufferOverflowException
 32294    44   297    50    44   782     0      59  (
 32295    44   297    51    44   782     0      60  )
 32296    44   297    52    44   782     0     102  ;
 32297    44   298    13    44   782     0     111  unsafe.copyMemory
 32298    44   298    30    44   782     0      59  (
 32299    44   298    31    44   782     0     111  sb.ix
 32300    44   298    36    44   782     0      59  (
 32301    44   298    37    44   782     0     111  spos
 32302    44   298    41    44   782     0      60  )
 32303    44   298    42    44   782     0      66  ,
 32304    44   298    44    44   782     0     111  ix
 32305    44   298    46    44   782     0      59  (
 32306    44   298    47    44   782     0     111  pos
 32307    44   298    50    44   782     0      60  )
 32308    44   298    51    44   782     0      66  ,
 32309    44   298    53    44   782     0     111  srem
 32310    44   298    58    44   782     0      90  <<
 32311    44   298    61    44   782     0     112  2
 32312    44   298    62    44   782     0      60  )
 32313    44   298    63    44   782     0     102  ;
 32314    44   299    13    44   782     1     111  sb.position
 32315    44   299    24    44   782     1      59  (
 32316    44   299    25    44   782     1     111  spos
 32317    44   299    30    44   782     1      74  +
 32318    44   299    32    44   782     1     111  srem
 32319    44   299    36    44   782     1      60  )
 32320    44   299    37    44   782     1     102  ;
 32321    44   300    13    44   782     1     111  position
 32322    44   300    21    44   782     1      59  (
 32323    44   300    22    44   782     1     111  pos
 32324    44   300    26    44   782     1      74  +
 32325    44   300    28    44   782     1     111  srem
 32326    44   300    32    44   782     1      60  )
 32327    44   300    33    44   782     1     102  ;
 32328    44   301     9    44   782     0      64  }
 32329    44   301    11    44   782     0      48  else
 32330    44   301    16    44   782     0      31  if
 32331    44   301    19    44   782     0      59  (
 32332    44   301    20    44   782     0     111  src.hb
 32333    44   301    27    44   782     0      71  !=
 32334    44   301    30    44   782     0      21  null
 32335    44   301    34    44   782     0      60  )
 32336    44   301    36    44   782     0      63  {
 32337    44   303    13    44   782     1      36  int
 32338    44   303    17    44   782     1     111  spos
 32339    44   303    22    44   782     1      67  =
 32340    44   303    24    44   782     1     111  src.position
 32341    44   303    36    44   782     1      59  (
 32342    44   303    37    44   782     1      60  )
 32343    44   303    38    44   782     1     102  ;
 32344    44   304    13    44   782     1      36  int
 32345    44   304    17    44   782     1     111  slim
 32346    44   304    22    44   782     1      67  =
 32347    44   304    24    44   782     1     111  src.limit
 32348    44   304    33    44   782     1      59  (
 32349    44   304    34    44   782     1      60  )
 32350    44   304    35    44   782     1     102  ;
 32351    44   305    13    44   782     0     111  assert
 32352    44   305    20    44   782     0      59  (
 32353    44   305    21    44   782     0     111  spos
 32354    44   305    26    44   782     0      92  <=
 32355    44   305    29    44   782     0     111  slim
 32356    44   305    33    44   782     0      60  )
 32357    44   305    34    44   782     0     102  ;
 32358    44   306    13    44   782     0      36  int
 32359    44   306    17    44   782     0     111  srem
 32360    44   306    22    44   782     0      67  =
 32361    44   306    24    44   782     0      59  (
 32362    44   306    25    44   782     0     111  spos
 32363    44   306    30    44   782     0      92  <=
 32364    44   306    33    44   782     0     111  slim
 32365    44   306    38    44   782     0      58  ?
 32366    44   306    40    44   782     0     111  slim
 32367    44   306    45    44   782     0      77  -
 32368    44   306    47    44   782     0     111  spos
 32369    44   306    52    44   782     0      65  :
 32370    44   306    54    44   782     0     112  0
 32371    44   306    55    44   782     0      60  )
 32372    44   306    56    44   782     0     102  ;
 32373    44   308    13    44   782     0     111  put
 32374    44   308    16    44   782     0      59  (
 32375    44   308    17    44   782     0     111  src.hb
 32376    44   308    23    44   782     0      66  ,
 32377    44   308    25    44   782     0     111  src.offset
 32378    44   308    36    44   782     0      74  +
 32379    44   308    38    44   782     0     111  spos
 32380    44   308    42    44   782     0      66  ,
 32381    44   308    44    44   782     0     111  srem
 32382    44   308    48    44   782     0      60  )
 32383    44   308    49    44   782     0     102  ;
 32384    44   309    13    44   782     0     111  src.position
 32385    44   309    25    44   782     0      59  (
 32386    44   309    26    44   782     0     111  spos
 32387    44   309    31    44   782     0      74  +
 32388    44   309    33    44   782     0     111  srem
 32389    44   309    37    44   782     0      60  )
 32390    44   309    38    44   782     0     102  ;
 32391    44   311     9    44   782     0      64  }
 32392    44   311    11    44   782     0      48  else
 32393    44   311    16    44   782     0      63  {
 32394    44   312    13    44   782     0     111  super.put
 32395    44   312    22    44   782     0      59  (
 32396    44   312    23    44   782     0     111  src
 32397    44   312    26    44   782     0      60  )
 32398    44   312    27    44   782     0     102  ;
 32399    44   313     9    44   782     0      64  }
 32400    44   314     9    44   782     0      19  return
 32401    44   314    16    44   782     0      44  this
 32402    44   314    20    44   782     0     102  ;
 32403    44   318     5    44   782     0      64  }
 32404    44   318     5    44   782     0    1864  ENDMETHOD
 32405    44   318     5    44   783     0    1865  STARTMETHOD
 32406    44   320    12    44   783     0     111  FloatBuffer
 32407    44   320    24    44   783     0     111  put
 32408    44   320    27    44   783     0      59  (
 32409    44   320    33    44   783     0      61  [
 32410    44   320    34    44   783     0      62  ]
 32411    44   320    36    44   783     0     111  src
 32412    44   320    39    44   783     0      66  ,
 32413    44   320    41    44   783     0      36  int
 32414    44   320    45    44   783     0     111  offset
 32415    44   320    51    44   783     0      66  ,
 32416    44   320    53    44   783     0      36  int
 32417    44   320    57    44   783     0     111  length
 32418    44   320    63    44   783     0      60  )
 32419    44   320    65    44   783     0      63  {
 32420    44   322     9    44   783     0      31  if
 32421    44   322    12    44   783     0      59  (
 32422    44   322    13    44   783     0      59  (
 32423    44   322    14    44   783     0     111  length
 32424    44   322    21    44   783     0      90  <<
 32425    44   322    24    44   783     0     112  2
 32426    44   322    25    44   783     0      60  )
 32427    44   322    27    44   783     0      89  >
 32428    44   322    29    44   783     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 32429    44   322    63    44   783     0      60  )
 32430    44   322    65    44   783     0      63  {
 32431    44   323    13    44   783     0     111  checkBounds
 32432    44   323    24    44   783     0      59  (
 32433    44   323    25    44   783     0     111  offset
 32434    44   323    31    44   783     0      66  ,
 32435    44   323    33    44   783     0     111  length
 32436    44   323    39    44   783     0      66  ,
 32437    44   323    41    44   783     0     111  src.length
 32438    44   323    51    44   783     0      60  )
 32439    44   323    52    44   783     0     102  ;
 32440    44   324    13    44   783     1      36  int
 32441    44   324    17    44   783     1     111  pos
 32442    44   324    21    44   783     1      67  =
 32443    44   324    23    44   783     1     111  position
 32444    44   324    31    44   783     1      59  (
 32445    44   324    32    44   783     1      60  )
 32446    44   324    33    44   783     1     102  ;
 32447    44   325    13    44   783     1      36  int
 32448    44   325    17    44   783     1     111  lim
 32449    44   325    21    44   783     1      67  =
 32450    44   325    23    44   783     1     111  limit
 32451    44   325    28    44   783     1      59  (
 32452    44   325    29    44   783     1      60  )
 32453    44   325    30    44   783     1     102  ;
 32454    44   326    13    44   783     0     111  assert
 32455    44   326    20    44   783     0      59  (
 32456    44   326    21    44   783     0     111  pos
 32457    44   326    25    44   783     0      92  <=
 32458    44   326    28    44   783     0     111  lim
 32459    44   326    31    44   783     0      60  )
 32460    44   326    32    44   783     0     102  ;
 32461    44   327    13    44   783     0      36  int
 32462    44   327    17    44   783     0     111  rem
 32463    44   327    21    44   783     0      67  =
 32464    44   327    23    44   783     0      59  (
 32465    44   327    24    44   783     0     111  pos
 32466    44   327    28    44   783     0      92  <=
 32467    44   327    31    44   783     0     111  lim
 32468    44   327    35    44   783     0      58  ?
 32469    44   327    37    44   783     0     111  lim
 32470    44   327    41    44   783     0      77  -
 32471    44   327    43    44   783     0     111  pos
 32472    44   327    47    44   783     0      65  :
 32473    44   327    49    44   783     0     112  0
 32474    44   327    50    44   783     0      60  )
 32475    44   327    51    44   783     0     102  ;
 32476    44   328    13    44   783     0      31  if
 32477    44   328    16    44   783     0      59  (
 32478    44   328    17    44   783     0     111  length
 32479    44   328    24    44   783     0      89  >
 32480    44   328    26    44   783     0     111  rem
 32481    44   328    29    44   783     0      60  )
 32482    44   329    17    44   783     0      20  throw
 32483    44   329    27    44   783     0     111  BufferOverflowException
 32484    44   329    50    44   783     0      59  (
 32485    44   329    51    44   783     0      60  )
 32486    44   329    52    44   783     0     102  ;
 32487    44   331    13    44   783     0      31  if
 32488    44   331    16    44   783     0      59  (
 32489    44   331    17    44   783     0     111  order
 32490    44   331    22    44   783     0      59  (
 32491    44   331    23    44   783     0      60  )
 32492    44   331    25    44   783     0      71  !=
 32493    44   331    28    44   783     0     111  ByteOrder.nativeOrder
 32494    44   331    49    44   783     0      59  (
 32495    44   331    50    44   783     0      60  )
 32496    44   331    51    44   783     0      60  )
 32497    44   332    17    44   783     0     111  Bits.copyFromIntArray
 32498    44   332    38    44   783     0      59  (
 32499    44   332    39    44   783     0     111  src
 32500    44   332    42    44   783     0      66  ,
 32501    44   332    44    44   783     0     111  offset
 32502    44   332    51    44   783     0      90  <<
 32503    44   332    54    44   783     0     112  2
 32504    44   332    55    44   783     0      66  ,
 32505    44   333    45    44   783     0     111  ix
 32506    44   333    47    44   783     0      59  (
 32507    44   333    48    44   783     0     111  pos
 32508    44   333    51    44   783     0      60  )
 32509    44   333    52    44   783     0      66  ,
 32510    44   333    54    44   783     0     111  length
 32511    44   333    61    44   783     0      90  <<
 32512    44   333    64    44   783     0     112  2
 32513    44   333    65    44   783     0      60  )
 32514    44   333    66    44   783     0     102  ;
 32515    44   334    13    44   783     0      48  else
 32516    44   335    17    44   783     0     111  Bits.copyFromByteArray
 32517    44   335    39    44   783     0      59  (
 32518    44   335    40    44   783     0     111  src
 32519    44   335    43    44   783     0      66  ,
 32520    44   335    45    44   783     0     111  offset
 32521    44   335    52    44   783     0      90  <<
 32522    44   335    55    44   783     0     112  2
 32523    44   335    56    44   783     0      66  ,
 32524    44   336    40    44   783     0     111  ix
 32525    44   336    42    44   783     0      59  (
 32526    44   336    43    44   783     0     111  pos
 32527    44   336    46    44   783     0      60  )
 32528    44   336    47    44   783     0      66  ,
 32529    44   336    49    44   783     0     111  length
 32530    44   336    56    44   783     0      90  <<
 32531    44   336    59    44   783     0     112  2
 32532    44   336    60    44   783     0      60  )
 32533    44   336    61    44   783     0     102  ;
 32534    44   337    13    44   783     0     111  position
 32535    44   337    21    44   783     0      59  (
 32536    44   337    22    44   783     0     111  pos
 32537    44   337    26    44   783     0      74  +
 32538    44   337    28    44   783     0     111  length
 32539    44   337    34    44   783     0      60  )
 32540    44   337    35    44   783     0     102  ;
 32541    44   338     9    44   783     0      64  }
 32542    44   338    11    44   783     0      48  else
 32543    44   338    16    44   783     0      63  {
 32544    44   339    13    44   783     0     111  super.put
 32545    44   339    22    44   783     0      59  (
 32546    44   339    23    44   783     0     111  src
 32547    44   339    26    44   783     0      66  ,
 32548    44   339    28    44   783     0     111  offset
 32549    44   339    34    44   783     0      66  ,
 32550    44   339    36    44   783     0     111  length
 32551    44   339    42    44   783     0      60  )
 32552    44   339    43    44   783     0     102  ;
 32553    44   340     9    44   783     0      64  }
 32554    44   341     9    44   783     0      19  return
 32555    44   341    16    44   783     0      44  this
 32556    44   341    20    44   783     0     102  ;
 32557    44   345     5    44   783     0      64  }
 32558    44   345     5    44   783     0    1866  ENDMETHOD
 32559    44   345     5    44   784     0    1867  STARTMETHOD
 32560    44   347    12    44   784     0     111  FloatBuffer
 32561    44   347    24    44   784     0     111  compact
 32562    44   347    31    44   784     0      59  (
 32563    44   347    32    44   784     0      60  )
 32564    44   347    34    44   784     0      63  {
 32565    44   349     9    44   784     1      36  int
 32566    44   349    13    44   784     1     111  pos
 32567    44   349    17    44   784     1      67  =
 32568    44   349    19    44   784     1     111  position
 32569    44   349    27    44   784     1      59  (
 32570    44   349    28    44   784     1      60  )
 32571    44   349    29    44   784     1     102  ;
 32572    44   350     9    44   784     1      36  int
 32573    44   350    13    44   784     1     111  lim
 32574    44   350    17    44   784     1      67  =
 32575    44   350    19    44   784     1     111  limit
 32576    44   350    24    44   784     1      59  (
 32577    44   350    25    44   784     1      60  )
 32578    44   350    26    44   784     1     102  ;
 32579    44   351     9    44   784     0     111  assert
 32580    44   351    16    44   784     0      59  (
 32581    44   351    17    44   784     0     111  pos
 32582    44   351    21    44   784     0      92  <=
 32583    44   351    24    44   784     0     111  lim
 32584    44   351    27    44   784     0      60  )
 32585    44   351    28    44   784     0     102  ;
 32586    44   352     9    44   784     0      36  int
 32587    44   352    13    44   784     0     111  rem
 32588    44   352    17    44   784     0      67  =
 32589    44   352    19    44   784     0      59  (
 32590    44   352    20    44   784     0     111  pos
 32591    44   352    24    44   784     0      92  <=
 32592    44   352    27    44   784     0     111  lim
 32593    44   352    31    44   784     0      58  ?
 32594    44   352    33    44   784     0     111  lim
 32595    44   352    37    44   784     0      77  -
 32596    44   352    39    44   784     0     111  pos
 32597    44   352    43    44   784     0      65  :
 32598    44   352    45    44   784     0     112  0
 32599    44   352    46    44   784     0      60  )
 32600    44   352    47    44   784     0     102  ;
 32601    44   354     9    44   784     0     111  unsafe.copyMemory
 32602    44   354    26    44   784     0      59  (
 32603    44   354    27    44   784     0     111  ix
 32604    44   354    29    44   784     0      59  (
 32605    44   354    30    44   784     0     111  pos
 32606    44   354    33    44   784     0      60  )
 32607    44   354    34    44   784     0      66  ,
 32608    44   354    36    44   784     0     111  ix
 32609    44   354    38    44   784     0      59  (
 32610    44   354    39    44   784     0     112  0
 32611    44   354    40    44   784     0      60  )
 32612    44   354    41    44   784     0      66  ,
 32613    44   354    43    44   784     0     111  rem
 32614    44   354    47    44   784     0      90  <<
 32615    44   354    50    44   784     0     112  2
 32616    44   354    51    44   784     0      60  )
 32617    44   354    52    44   784     0     102  ;
 32618    44   355     9    44   784     0     111  position
 32619    44   355    17    44   784     0      59  (
 32620    44   355    18    44   784     0     111  rem
 32621    44   355    21    44   784     0      60  )
 32622    44   355    22    44   784     0     102  ;
 32623    44   356     9    44   784     0     111  limit
 32624    44   356    14    44   784     0      59  (
 32625    44   356    15    44   784     0     111  capacity
 32626    44   356    23    44   784     0      59  (
 32627    44   356    24    44   784     0      60  )
 32628    44   356    25    44   784     0      60  )
 32629    44   356    26    44   784     0     102  ;
 32630    44   357     9    44   784     0     111  clearMark
 32631    44   357    18    44   784     0      59  (
 32632    44   357    19    44   784     0      60  )
 32633    44   357    20    44   784     0     102  ;
 32634    44   358     9    44   784     0      19  return
 32635    44   358    16    44   784     0      44  this
 32636    44   358    20    44   784     1     102  ;
 32637    44   362     5    44   784     1      64  }
 32638    44   362     5    44   784     0    1868  ENDMETHOD
 32639    44   362     5    44   785     0    1869  STARTMETHOD
 32640    44   364    12    44   785     0      39  boolean
 32641    44   364    20    44   785     0     111  isDirect
 32642    44   364    28    44   785     0      59  (
 32643    44   364    29    44   785     0      60  )
 32644    44   364    31    44   785     0      63  {
 32645    44   365     9    44   785     0      19  return
 32646    44   365    16    44   785     0      52  true
 32647    44   365    20    44   785     1     102  ;
 32648    44   366     5    44   785     1      64  }
 32649    44   366     5    44   785     0    1870  ENDMETHOD
 32650    44   366     5    44   786     0    1871  STARTMETHOD
 32651    44   368    12    44   786     0      39  boolean
 32652    44   368    20    44   786     0     111  isReadOnly
 32653    44   368    30    44   786     0      59  (
 32654    44   368    31    44   786     0      60  )
 32655    44   368    33    44   786     0      63  {
 32656    44   369     9    44   786     0      19  return
 32657    44   369    16    44   786     0      43  false
 32658    44   369    21    44   786     1     102  ;
 32659    44   370     5    44   786     1      64  }
 32660    44   370     5    44   786     0    1872  ENDMETHOD
 32661    44   370     5    44   787     0    1873  STARTMETHOD
 32662    44   416    12    44   787     0     111  ByteOrder
 32663    44   416    22    44   787     0     111  order
 32664    44   416    27    44   787     0      59  (
 32665    44   416    28    44   787     0      60  )
 32666    44   416    30    44   787     0      63  {
 32667    44   422     9    44   787     0      19  return
 32668    44   422    16    44   787     0      59  (
 32669    44   422    17    44   787     0      59  (
 32670    44   422    18    44   787     0     111  ByteOrder.nativeOrder
 32671    44   422    39    44   787     0      59  (
 32672    44   422    40    44   787     0      60  )
 32673    44   422    42    44   787     0      71  !=
 32674    44   422    45    44   787     0     111  ByteOrder.BIG_ENDIAN
 32675    44   422    65    44   787     0      60  )
 32676    44   423    17    44   787     0      58  ?
 32677    44   423    19    44   787     0     111  ByteOrder.LITTLE_ENDIAN
 32678    44   423    43    44   787     0      65  :
 32679    44   423    45    44   787     0     111  ByteOrder.BIG_ENDIAN
 32680    44   423    65    44   787     0      60  )
 32681    44   423    66    44   787     0     102  ;
 32682    44   425     5    44   787     0      64  }
 32683    44   425     5    44   787     0    1874  ENDMETHOD
 32684    44   452     1    44    -1     0      64  }
 32685    44   452     1    44    -1     1    1875  ENDCLASS
 32686    44   452     1    -1    -1     1    1876  ENDFILE C:\Users\RA\javasrc\java\nio\DirectFloatBufferU.java
 32687    45     1     1    -1    -1     1    1877  STARTFILE C:\Users\RA\javasrc\java\nio\DirectIntBufferRS.java
 32688    45    28     9    -1    -1     0     111  java.nio
 32689    45    28    17    -1    -1     0     102  ;
 32690    45    30     1    -1    -1     1      49  import
 32691    45    30     8    -1    -1     1     111  sun.misc.Cleaner
 32692    45    30    24    -1    -1     1     102  ;
 32693    45    31     1    -1    -1     1      49  import
 32694    45    31     8    -1    -1     1     111  sun.misc.Unsafe
 32695    45    31    23    -1    -1     1     102  ;
 32696    45    32     1    -1    -1     1      49  import
 32697    45    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 32698    45    32    31    -1    -1     1     102  ;
 32699    45    33     1    -1    -1     1      49  import
 32700    45    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 32701    45    33    34    -1    -1     1     102  ;
 32702    45    36     1    45    -1     0    1878  STARTCLASS
 32703    45    36     1    45    -1     0      24  class
 32704    45    36     7    45    -1     0     111  DirectIntBufferRS
 32705    45    40     5    45    -1     0      38  extends
 32706    45    40    13    45    -1     0     111  DirectIntBufferS
 32707    45    42     5    45    -1     0      17  implements
 32708    45    42    16    45    -1     0     111  DirectBuffer
 32709    45    43     1    45    -1     0      63  {
 32710    45    43     1    45   788     0    1879  STARTMETHOD
 32711    45   164     5    45   788     0     111  DirectIntBufferRS
 32712    45   164    22    45   788     0      59  (
 32713    45   164    23    45   788     0     111  DirectBuffer
 32714    45   164    36    45   788     0     111  db
 32715    45   164    38    45   788     0      66  ,
 32716    45   165    32    45   788     0      36  int
 32717    45   165    36    45   788     0     111  mark
 32718    45   165    40    45   788     0      66  ,
 32719    45   165    42    45   788     0      36  int
 32720    45   165    46    45   788     0     111  pos
 32721    45   165    49    45   788     0      66  ,
 32722    45   165    51    45   788     0      36  int
 32723    45   165    55    45   788     0     111  lim
 32724    45   165    58    45   788     0      66  ,
 32725    45   165    60    45   788     0      36  int
 32726    45   165    64    45   788     0     111  cap
 32727    45   165    67    45   788     0      66  ,
 32728    45   166    32    45   788     0      36  int
 32729    45   166    36    45   788     0     111  off
 32730    45   166    39    45   788     0      60  )
 32731    45   167     5    45   788     0      63  {
 32732    45   176     9    45   788     0      27  super
 32733    45   176    14    45   788     0      59  (
 32734    45   176    15    45   788     0     111  db
 32735    45   176    17    45   788     0      66  ,
 32736    45   176    19    45   788     0     111  mark
 32737    45   176    23    45   788     0      66  ,
 32738    45   176    25    45   788     0     111  pos
 32739    45   176    28    45   788     0      66  ,
 32740    45   176    30    45   788     0     111  lim
 32741    45   176    33    45   788     0      66  ,
 32742    45   176    35    45   788     0     111  cap
 32743    45   176    38    45   788     0      66  ,
 32744    45   176    40    45   788     0     111  off
 32745    45   176    43    45   788     0      60  )
 32746    45   176    44    45   788     0     102  ;
 32747    45   178     5    45   788     0      64  }
 32748    45   178     5    45   788     0    1880  ENDMETHOD
 32749    45   178     5    45   789     0    1881  STARTMETHOD
 32750    45   180    12    45   789     0     111  IntBuffer
 32751    45   180    22    45   789     0     111  slice
 32752    45   180    27    45   789     0      59  (
 32753    45   180    28    45   789     0      60  )
 32754    45   180    30    45   789     0      63  {
 32755    45   181     9    45   789     1      36  int
 32756    45   181    13    45   789     1     111  pos
 32757    45   181    17    45   789     1      67  =
 32758    45   181    19    45   789     1     111  this.position
 32759    45   181    32    45   789     1      59  (
 32760    45   181    33    45   789     1      60  )
 32761    45   181    34    45   789     1     102  ;
 32762    45   182     9    45   789     1      36  int
 32763    45   182    13    45   789     1     111  lim
 32764    45   182    17    45   789     1      67  =
 32765    45   182    19    45   789     1     111  this.limit
 32766    45   182    29    45   789     1      59  (
 32767    45   182    30    45   789     1      60  )
 32768    45   182    31    45   789     1     102  ;
 32769    45   183     9    45   789     0     111  assert
 32770    45   183    16    45   789     0      59  (
 32771    45   183    17    45   789     0     111  pos
 32772    45   183    21    45   789     0      92  <=
 32773    45   183    24    45   789     0     111  lim
 32774    45   183    27    45   789     0      60  )
 32775    45   183    28    45   789     0     102  ;
 32776    45   184     9    45   789     0      36  int
 32777    45   184    13    45   789     0     111  rem
 32778    45   184    17    45   789     0      67  =
 32779    45   184    19    45   789     0      59  (
 32780    45   184    20    45   789     0     111  pos
 32781    45   184    24    45   789     0      92  <=
 32782    45   184    27    45   789     0     111  lim
 32783    45   184    31    45   789     0      58  ?
 32784    45   184    33    45   789     0     111  lim
 32785    45   184    37    45   789     0      77  -
 32786    45   184    39    45   789     0     111  pos
 32787    45   184    43    45   789     0      65  :
 32788    45   184    45    45   789     0     112  0
 32789    45   184    46    45   789     0      60  )
 32790    45   184    47    45   789     0     102  ;
 32791    45   185     9    45   789     0      36  int
 32792    45   185    13    45   789     0     111  off
 32793    45   185    17    45   789     0      67  =
 32794    45   185    19    45   789     0      59  (
 32795    45   185    20    45   789     0     111  pos
 32796    45   185    24    45   789     0      90  <<
 32797    45   185    27    45   789     0     112  2
 32798    45   185    28    45   789     0      60  )
 32799    45   185    29    45   789     0     102  ;
 32800    45   186     9    45   789     0     111  assert
 32801    45   186    16    45   789     0      59  (
 32802    45   186    17    45   789     0     111  off
 32803    45   186    21    45   789     0      88  >=
 32804    45   186    24    45   789     0     112  0
 32805    45   186    25    45   789     0      60  )
 32806    45   186    26    45   789     0     102  ;
 32807    45   187     9    45   789     0      19  return
 32808    45   187    20    45   789     0     111  DirectIntBufferRS
 32809    45   187    37    45   789     0      59  (
 32810    45   187    38    45   789     0      44  this
 32811    45   187    42    45   789     0      66  ,
 32812    45   187    44    45   789     0      77  -
 32813    45   187    45    45   789     0     112  1
 32814    45   187    46    45   789     0      66  ,
 32815    45   187    48    45   789     0     112  0
 32816    45   187    49    45   789     0      66  ,
 32817    45   187    51    45   789     0     111  rem
 32818    45   187    54    45   789     0      66  ,
 32819    45   187    56    45   789     0     111  rem
 32820    45   187    59    45   789     0      66  ,
 32821    45   187    61    45   789     0     111  off
 32822    45   187    64    45   789     0      60  )
 32823    45   187    65    45   789     0     102  ;
 32824    45   188     5    45   789     0      64  }
 32825    45   188     5    45   789     0    1882  ENDMETHOD
 32826    45   188     5    45   790     0    1883  STARTMETHOD
 32827    45   190    12    45   790     0     111  IntBuffer
 32828    45   190    22    45   790     0     111  duplicate
 32829    45   190    31    45   790     0      59  (
 32830    45   190    32    45   790     0      60  )
 32831    45   190    34    45   790     0      63  {
 32832    45   191     9    45   790     0      19  return
 32833    45   191    20    45   790     0     111  DirectIntBufferRS
 32834    45   191    37    45   790     0      59  (
 32835    45   191    38    45   790     0      44  this
 32836    45   191    42    45   790     0      66  ,
 32837    45   192    47    45   790     1     111  this.markValue
 32838    45   192    61    45   790     1      59  (
 32839    45   192    62    45   790     1      60  )
 32840    45   192    63    45   790     1      66  ,
 32841    45   193    47    45   790     1     111  this.position
 32842    45   193    60    45   790     1      59  (
 32843    45   193    61    45   790     1      60  )
 32844    45   193    62    45   790     1      66  ,
 32845    45   194    47    45   790     1     111  this.limit
 32846    45   194    57    45   790     1      59  (
 32847    45   194    58    45   790     1      60  )
 32848    45   194    59    45   790     1      66  ,
 32849    45   195    47    45   790     1     111  this.capacity
 32850    45   195    60    45   790     1      59  (
 32851    45   195    61    45   790     1      60  )
 32852    45   195    62    45   790     1      66  ,
 32853    45   196    47    45   790     0     112  0
 32854    45   196    48    45   790     0      60  )
 32855    45   196    49    45   790     0     102  ;
 32856    45   197     5    45   790     0      64  }
 32857    45   197     5    45   790     0    1884  ENDMETHOD
 32858    45   197     5    45   791     0    1885  STARTMETHOD
 32859    45   199    12    45   791     0     111  IntBuffer
 32860    45   199    22    45   791     0     111  asReadOnlyBuffer
 32861    45   199    38    45   791     0      59  (
 32862    45   199    39    45   791     0      60  )
 32863    45   199    41    45   791     0      63  {
 32864    45   208     9    45   791     0      19  return
 32865    45   208    16    45   791     0     111  duplicate
 32866    45   208    25    45   791     0      59  (
 32867    45   208    26    45   791     0      60  )
 32868    45   208    27    45   791     0     102  ;
 32869    45   210     5    45   791     0      64  }
 32870    45   210     5    45   791     0    1886  ENDMETHOD
 32871    45   210     5    45   792     0    1887  STARTMETHOD
 32872    45   261    12    45   792     0     111  IntBuffer
 32873    45   261    22    45   792     0     111  put
 32874    45   261    25    45   792     0      59  (
 32875    45   261    26    45   792     0      36  int
 32876    45   261    30    45   792     0     111  x
 32877    45   261    31    45   792     0      60  )
 32878    45   261    33    45   792     0      63  {
 32879    45   266     9    45   792     0      20  throw
 32880    45   266    19    45   792     0     111  ReadOnlyBufferException
 32881    45   266    42    45   792     0      59  (
 32882    45   266    43    45   792     0      60  )
 32883    45   266    44    45   792     0     102  ;
 32884    45   268     5    45   792     0      64  }
 32885    45   268     5    45   792     0    1888  ENDMETHOD
 32886    45   268     5    45   793     0    1889  STARTMETHOD
 32887    45   270    12    45   793     0     111  IntBuffer
 32888    45   270    22    45   793     0     111  put
 32889    45   270    25    45   793     0      59  (
 32890    45   270    26    45   793     0      36  int
 32891    45   270    30    45   793     0     111  i
 32892    45   270    31    45   793     0      66  ,
 32893    45   270    33    45   793     0      36  int
 32894    45   270    37    45   793     0     111  x
 32895    45   270    38    45   793     0      60  )
 32896    45   270    40    45   793     0      63  {
 32897    45   275     9    45   793     0      20  throw
 32898    45   275    19    45   793     0     111  ReadOnlyBufferException
 32899    45   275    42    45   793     0      59  (
 32900    45   275    43    45   793     0      60  )
 32901    45   275    44    45   793     0     102  ;
 32902    45   277     5    45   793     0      64  }
 32903    45   277     5    45   793     0    1890  ENDMETHOD
 32904    45   277     5    45   794     0    1891  STARTMETHOD
 32905    45   279    12    45   794     0     111  IntBuffer
 32906    45   279    22    45   794     0     111  put
 32907    45   279    25    45   794     0      59  (
 32908    45   279    26    45   794     0     111  IntBuffer
 32909    45   279    36    45   794     0     111  src
 32910    45   279    39    45   794     0      60  )
 32911    45   279    41    45   794     0      63  {
 32912    45   316     9    45   794     0      20  throw
 32913    45   316    19    45   794     0     111  ReadOnlyBufferException
 32914    45   316    42    45   794     0      59  (
 32915    45   316    43    45   794     0      60  )
 32916    45   316    44    45   794     0     102  ;
 32917    45   318     5    45   794     0      64  }
 32918    45   318     5    45   794     0    1892  ENDMETHOD
 32919    45   318     5    45   795     0    1893  STARTMETHOD
 32920    45   320    12    45   795     0     111  IntBuffer
 32921    45   320    22    45   795     0     111  put
 32922    45   320    25    45   795     0      59  (
 32923    45   320    26    45   795     0      36  int
 32924    45   320    29    45   795     0      61  [
 32925    45   320    30    45   795     0      62  ]
 32926    45   320    32    45   795     0     111  src
 32927    45   320    35    45   795     0      66  ,
 32928    45   320    37    45   795     0      36  int
 32929    45   320    41    45   795     0     111  offset
 32930    45   320    47    45   795     0      66  ,
 32931    45   320    49    45   795     0      36  int
 32932    45   320    53    45   795     0     111  length
 32933    45   320    59    45   795     0      60  )
 32934    45   320    61    45   795     0      63  {
 32935    45   343     9    45   795     0      20  throw
 32936    45   343    19    45   795     0     111  ReadOnlyBufferException
 32937    45   343    42    45   795     0      59  (
 32938    45   343    43    45   795     0      60  )
 32939    45   343    44    45   795     0     102  ;
 32940    45   345     5    45   795     0      64  }
 32941    45   345     5    45   795     0    1894  ENDMETHOD
 32942    45   345     5    45   796     0    1895  STARTMETHOD
 32943    45   347    12    45   796     0     111  IntBuffer
 32944    45   347    22    45   796     0     111  compact
 32945    45   347    29    45   796     0      59  (
 32946    45   347    30    45   796     0      60  )
 32947    45   347    32    45   796     0      63  {
 32948    45   360     9    45   796     0      20  throw
 32949    45   360    19    45   796     0     111  ReadOnlyBufferException
 32950    45   360    42    45   796     0      59  (
 32951    45   360    43    45   796     0      60  )
 32952    45   360    44    45   796     1     102  ;
 32953    45   362     5    45   796     1      64  }
 32954    45   362     5    45   796     0    1896  ENDMETHOD
 32955    45   362     5    45   797     0    1897  STARTMETHOD
 32956    45   364    12    45   797     0      39  boolean
 32957    45   364    20    45   797     0     111  isDirect
 32958    45   364    28    45   797     0      59  (
 32959    45   364    29    45   797     0      60  )
 32960    45   364    31    45   797     0      63  {
 32961    45   365     9    45   797     0      19  return
 32962    45   365    16    45   797     0      52  true
 32963    45   365    20    45   797     1     102  ;
 32964    45   366     5    45   797     1      64  }
 32965    45   366     5    45   797     0    1898  ENDMETHOD
 32966    45   366     5    45   798     0    1899  STARTMETHOD
 32967    45   368    12    45   798     0      39  boolean
 32968    45   368    20    45   798     0     111  isReadOnly
 32969    45   368    30    45   798     0      59  (
 32970    45   368    31    45   798     0      60  )
 32971    45   368    33    45   798     0      63  {
 32972    45   369     9    45   798     0      19  return
 32973    45   369    16    45   798     0      52  true
 32974    45   369    20    45   798     1     102  ;
 32975    45   370     5    45   798     1      64  }
 32976    45   370     5    45   798     0    1900  ENDMETHOD
 32977    45   370     5    45   799     0    1901  STARTMETHOD
 32978    45   416    12    45   799     0     111  ByteOrder
 32979    45   416    22    45   799     0     111  order
 32980    45   416    27    45   799     0      59  (
 32981    45   416    28    45   799     0      60  )
 32982    45   416    30    45   799     0      63  {
 32983    45   418     9    45   799     0      19  return
 32984    45   418    16    45   799     0      59  (
 32985    45   418    17    45   799     0      59  (
 32986    45   418    18    45   799     0     111  ByteOrder.nativeOrder
 32987    45   418    39    45   799     0      59  (
 32988    45   418    40    45   799     0      60  )
 32989    45   418    42    45   799     0      68  ==
 32990    45   418    45    45   799     0     111  ByteOrder.BIG_ENDIAN
 32991    45   418    65    45   799     0      60  )
 32992    45   419    17    45   799     0      58  ?
 32993    45   419    19    45   799     0     111  ByteOrder.LITTLE_ENDIAN
 32994    45   419    43    45   799     0      65  :
 32995    45   419    45    45   799     0     111  ByteOrder.BIG_ENDIAN
 32996    45   419    65    45   799     0      60  )
 32997    45   419    66    45   799     0     102  ;
 32998    45   425     5    45   799     0      64  }
 32999    45   425     5    45   799     0    1902  ENDMETHOD
 33000    45   452     1    45    -1     0      64  }
 33001    45   452     1    45    -1     1    1903  ENDCLASS
 33002    45   452     1    -1    -1     1    1904  ENDFILE C:\Users\RA\javasrc\java\nio\DirectIntBufferRS.java
 33003    46     1     1    -1    -1     1    1905  STARTFILE C:\Users\RA\javasrc\java\nio\DirectIntBufferRU.java
 33004    46    28     9    -1    -1     0     111  java.nio
 33005    46    28    17    -1    -1     0     102  ;
 33006    46    30     1    -1    -1     1      49  import
 33007    46    30     8    -1    -1     1     111  sun.misc.Cleaner
 33008    46    30    24    -1    -1     1     102  ;
 33009    46    31     1    -1    -1     1      49  import
 33010    46    31     8    -1    -1     1     111  sun.misc.Unsafe
 33011    46    31    23    -1    -1     1     102  ;
 33012    46    32     1    -1    -1     1      49  import
 33013    46    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 33014    46    32    31    -1    -1     1     102  ;
 33015    46    33     1    -1    -1     1      49  import
 33016    46    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 33017    46    33    34    -1    -1     1     102  ;
 33018    46    36     1    46    -1     0    1906  STARTCLASS
 33019    46    36     1    46    -1     0      24  class
 33020    46    36     7    46    -1     0     111  DirectIntBufferRU
 33021    46    40     5    46    -1     0      38  extends
 33022    46    40    13    46    -1     0     111  DirectIntBufferU
 33023    46    42     5    46    -1     0      17  implements
 33024    46    42    16    46    -1     0     111  DirectBuffer
 33025    46    43     1    46    -1     0      63  {
 33026    46    43     1    46   800     0    1907  STARTMETHOD
 33027    46   164     5    46   800     0     111  DirectIntBufferRU
 33028    46   164    22    46   800     0      59  (
 33029    46   164    23    46   800     0     111  DirectBuffer
 33030    46   164    36    46   800     0     111  db
 33031    46   164    38    46   800     0      66  ,
 33032    46   165    32    46   800     0      36  int
 33033    46   165    36    46   800     0     111  mark
 33034    46   165    40    46   800     0      66  ,
 33035    46   165    42    46   800     0      36  int
 33036    46   165    46    46   800     0     111  pos
 33037    46   165    49    46   800     0      66  ,
 33038    46   165    51    46   800     0      36  int
 33039    46   165    55    46   800     0     111  lim
 33040    46   165    58    46   800     0      66  ,
 33041    46   165    60    46   800     0      36  int
 33042    46   165    64    46   800     0     111  cap
 33043    46   165    67    46   800     0      66  ,
 33044    46   166    32    46   800     0      36  int
 33045    46   166    36    46   800     0     111  off
 33046    46   166    39    46   800     0      60  )
 33047    46   167     5    46   800     0      63  {
 33048    46   176     9    46   800     0      27  super
 33049    46   176    14    46   800     0      59  (
 33050    46   176    15    46   800     0     111  db
 33051    46   176    17    46   800     0      66  ,
 33052    46   176    19    46   800     0     111  mark
 33053    46   176    23    46   800     0      66  ,
 33054    46   176    25    46   800     0     111  pos
 33055    46   176    28    46   800     0      66  ,
 33056    46   176    30    46   800     0     111  lim
 33057    46   176    33    46   800     0      66  ,
 33058    46   176    35    46   800     0     111  cap
 33059    46   176    38    46   800     0      66  ,
 33060    46   176    40    46   800     0     111  off
 33061    46   176    43    46   800     0      60  )
 33062    46   176    44    46   800     0     102  ;
 33063    46   178     5    46   800     0      64  }
 33064    46   178     5    46   800     0    1908  ENDMETHOD
 33065    46   178     5    46   801     0    1909  STARTMETHOD
 33066    46   180    12    46   801     0     111  IntBuffer
 33067    46   180    22    46   801     0     111  slice
 33068    46   180    27    46   801     0      59  (
 33069    46   180    28    46   801     0      60  )
 33070    46   180    30    46   801     0      63  {
 33071    46   181     9    46   801     1      36  int
 33072    46   181    13    46   801     1     111  pos
 33073    46   181    17    46   801     1      67  =
 33074    46   181    19    46   801     1     111  this.position
 33075    46   181    32    46   801     1      59  (
 33076    46   181    33    46   801     1      60  )
 33077    46   181    34    46   801     1     102  ;
 33078    46   182     9    46   801     1      36  int
 33079    46   182    13    46   801     1     111  lim
 33080    46   182    17    46   801     1      67  =
 33081    46   182    19    46   801     1     111  this.limit
 33082    46   182    29    46   801     1      59  (
 33083    46   182    30    46   801     1      60  )
 33084    46   182    31    46   801     1     102  ;
 33085    46   183     9    46   801     0     111  assert
 33086    46   183    16    46   801     0      59  (
 33087    46   183    17    46   801     0     111  pos
 33088    46   183    21    46   801     0      92  <=
 33089    46   183    24    46   801     0     111  lim
 33090    46   183    27    46   801     0      60  )
 33091    46   183    28    46   801     0     102  ;
 33092    46   184     9    46   801     0      36  int
 33093    46   184    13    46   801     0     111  rem
 33094    46   184    17    46   801     0      67  =
 33095    46   184    19    46   801     0      59  (
 33096    46   184    20    46   801     0     111  pos
 33097    46   184    24    46   801     0      92  <=
 33098    46   184    27    46   801     0     111  lim
 33099    46   184    31    46   801     0      58  ?
 33100    46   184    33    46   801     0     111  lim
 33101    46   184    37    46   801     0      77  -
 33102    46   184    39    46   801     0     111  pos
 33103    46   184    43    46   801     0      65  :
 33104    46   184    45    46   801     0     112  0
 33105    46   184    46    46   801     0      60  )
 33106    46   184    47    46   801     0     102  ;
 33107    46   185     9    46   801     0      36  int
 33108    46   185    13    46   801     0     111  off
 33109    46   185    17    46   801     0      67  =
 33110    46   185    19    46   801     0      59  (
 33111    46   185    20    46   801     0     111  pos
 33112    46   185    24    46   801     0      90  <<
 33113    46   185    27    46   801     0     112  2
 33114    46   185    28    46   801     0      60  )
 33115    46   185    29    46   801     0     102  ;
 33116    46   186     9    46   801     0     111  assert
 33117    46   186    16    46   801     0      59  (
 33118    46   186    17    46   801     0     111  off
 33119    46   186    21    46   801     0      88  >=
 33120    46   186    24    46   801     0     112  0
 33121    46   186    25    46   801     0      60  )
 33122    46   186    26    46   801     0     102  ;
 33123    46   187     9    46   801     0      19  return
 33124    46   187    20    46   801     0     111  DirectIntBufferRU
 33125    46   187    37    46   801     0      59  (
 33126    46   187    38    46   801     0      44  this
 33127    46   187    42    46   801     0      66  ,
 33128    46   187    44    46   801     0      77  -
 33129    46   187    45    46   801     0     112  1
 33130    46   187    46    46   801     0      66  ,
 33131    46   187    48    46   801     0     112  0
 33132    46   187    49    46   801     0      66  ,
 33133    46   187    51    46   801     0     111  rem
 33134    46   187    54    46   801     0      66  ,
 33135    46   187    56    46   801     0     111  rem
 33136    46   187    59    46   801     0      66  ,
 33137    46   187    61    46   801     0     111  off
 33138    46   187    64    46   801     0      60  )
 33139    46   187    65    46   801     0     102  ;
 33140    46   188     5    46   801     0      64  }
 33141    46   188     5    46   801     0    1910  ENDMETHOD
 33142    46   188     5    46   802     0    1911  STARTMETHOD
 33143    46   190    12    46   802     0     111  IntBuffer
 33144    46   190    22    46   802     0     111  duplicate
 33145    46   190    31    46   802     0      59  (
 33146    46   190    32    46   802     0      60  )
 33147    46   190    34    46   802     0      63  {
 33148    46   191     9    46   802     0      19  return
 33149    46   191    20    46   802     0     111  DirectIntBufferRU
 33150    46   191    37    46   802     0      59  (
 33151    46   191    38    46   802     0      44  this
 33152    46   191    42    46   802     0      66  ,
 33153    46   192    47    46   802     1     111  this.markValue
 33154    46   192    61    46   802     1      59  (
 33155    46   192    62    46   802     1      60  )
 33156    46   192    63    46   802     1      66  ,
 33157    46   193    47    46   802     1     111  this.position
 33158    46   193    60    46   802     1      59  (
 33159    46   193    61    46   802     1      60  )
 33160    46   193    62    46   802     1      66  ,
 33161    46   194    47    46   802     1     111  this.limit
 33162    46   194    57    46   802     1      59  (
 33163    46   194    58    46   802     1      60  )
 33164    46   194    59    46   802     1      66  ,
 33165    46   195    47    46   802     1     111  this.capacity
 33166    46   195    60    46   802     1      59  (
 33167    46   195    61    46   802     1      60  )
 33168    46   195    62    46   802     1      66  ,
 33169    46   196    47    46   802     0     112  0
 33170    46   196    48    46   802     0      60  )
 33171    46   196    49    46   802     0     102  ;
 33172    46   197     5    46   802     0      64  }
 33173    46   197     5    46   802     0    1912  ENDMETHOD
 33174    46   197     5    46   803     0    1913  STARTMETHOD
 33175    46   199    12    46   803     0     111  IntBuffer
 33176    46   199    22    46   803     0     111  asReadOnlyBuffer
 33177    46   199    38    46   803     0      59  (
 33178    46   199    39    46   803     0      60  )
 33179    46   199    41    46   803     0      63  {
 33180    46   208     9    46   803     0      19  return
 33181    46   208    16    46   803     0     111  duplicate
 33182    46   208    25    46   803     0      59  (
 33183    46   208    26    46   803     0      60  )
 33184    46   208    27    46   803     0     102  ;
 33185    46   210     5    46   803     0      64  }
 33186    46   210     5    46   803     0    1914  ENDMETHOD
 33187    46   210     5    46   804     0    1915  STARTMETHOD
 33188    46   261    12    46   804     0     111  IntBuffer
 33189    46   261    22    46   804     0     111  put
 33190    46   261    25    46   804     0      59  (
 33191    46   261    26    46   804     0      36  int
 33192    46   261    30    46   804     0     111  x
 33193    46   261    31    46   804     0      60  )
 33194    46   261    33    46   804     0      63  {
 33195    46   266     9    46   804     0      20  throw
 33196    46   266    19    46   804     0     111  ReadOnlyBufferException
 33197    46   266    42    46   804     0      59  (
 33198    46   266    43    46   804     0      60  )
 33199    46   266    44    46   804     0     102  ;
 33200    46   268     5    46   804     0      64  }
 33201    46   268     5    46   804     0    1916  ENDMETHOD
 33202    46   268     5    46   805     0    1917  STARTMETHOD
 33203    46   270    12    46   805     0     111  IntBuffer
 33204    46   270    22    46   805     0     111  put
 33205    46   270    25    46   805     0      59  (
 33206    46   270    26    46   805     0      36  int
 33207    46   270    30    46   805     0     111  i
 33208    46   270    31    46   805     0      66  ,
 33209    46   270    33    46   805     0      36  int
 33210    46   270    37    46   805     0     111  x
 33211    46   270    38    46   805     0      60  )
 33212    46   270    40    46   805     0      63  {
 33213    46   275     9    46   805     0      20  throw
 33214    46   275    19    46   805     0     111  ReadOnlyBufferException
 33215    46   275    42    46   805     0      59  (
 33216    46   275    43    46   805     0      60  )
 33217    46   275    44    46   805     0     102  ;
 33218    46   277     5    46   805     0      64  }
 33219    46   277     5    46   805     0    1918  ENDMETHOD
 33220    46   277     5    46   806     0    1919  STARTMETHOD
 33221    46   279    12    46   806     0     111  IntBuffer
 33222    46   279    22    46   806     0     111  put
 33223    46   279    25    46   806     0      59  (
 33224    46   279    26    46   806     0     111  IntBuffer
 33225    46   279    36    46   806     0     111  src
 33226    46   279    39    46   806     0      60  )
 33227    46   279    41    46   806     0      63  {
 33228    46   316     9    46   806     0      20  throw
 33229    46   316    19    46   806     0     111  ReadOnlyBufferException
 33230    46   316    42    46   806     0      59  (
 33231    46   316    43    46   806     0      60  )
 33232    46   316    44    46   806     0     102  ;
 33233    46   318     5    46   806     0      64  }
 33234    46   318     5    46   806     0    1920  ENDMETHOD
 33235    46   318     5    46   807     0    1921  STARTMETHOD
 33236    46   320    12    46   807     0     111  IntBuffer
 33237    46   320    22    46   807     0     111  put
 33238    46   320    25    46   807     0      59  (
 33239    46   320    26    46   807     0      36  int
 33240    46   320    29    46   807     0      61  [
 33241    46   320    30    46   807     0      62  ]
 33242    46   320    32    46   807     0     111  src
 33243    46   320    35    46   807     0      66  ,
 33244    46   320    37    46   807     0      36  int
 33245    46   320    41    46   807     0     111  offset
 33246    46   320    47    46   807     0      66  ,
 33247    46   320    49    46   807     0      36  int
 33248    46   320    53    46   807     0     111  length
 33249    46   320    59    46   807     0      60  )
 33250    46   320    61    46   807     0      63  {
 33251    46   343     9    46   807     0      20  throw
 33252    46   343    19    46   807     0     111  ReadOnlyBufferException
 33253    46   343    42    46   807     0      59  (
 33254    46   343    43    46   807     0      60  )
 33255    46   343    44    46   807     0     102  ;
 33256    46   345     5    46   807     0      64  }
 33257    46   345     5    46   807     0    1922  ENDMETHOD
 33258    46   345     5    46   808     0    1923  STARTMETHOD
 33259    46   347    12    46   808     0     111  IntBuffer
 33260    46   347    22    46   808     0     111  compact
 33261    46   347    29    46   808     0      59  (
 33262    46   347    30    46   808     0      60  )
 33263    46   347    32    46   808     0      63  {
 33264    46   360     9    46   808     0      20  throw
 33265    46   360    19    46   808     0     111  ReadOnlyBufferException
 33266    46   360    42    46   808     0      59  (
 33267    46   360    43    46   808     0      60  )
 33268    46   360    44    46   808     1     102  ;
 33269    46   362     5    46   808     1      64  }
 33270    46   362     5    46   808     0    1924  ENDMETHOD
 33271    46   362     5    46   809     0    1925  STARTMETHOD
 33272    46   364    12    46   809     0      39  boolean
 33273    46   364    20    46   809     0     111  isDirect
 33274    46   364    28    46   809     0      59  (
 33275    46   364    29    46   809     0      60  )
 33276    46   364    31    46   809     0      63  {
 33277    46   365     9    46   809     0      19  return
 33278    46   365    16    46   809     0      52  true
 33279    46   365    20    46   809     1     102  ;
 33280    46   366     5    46   809     1      64  }
 33281    46   366     5    46   809     0    1926  ENDMETHOD
 33282    46   366     5    46   810     0    1927  STARTMETHOD
 33283    46   368    12    46   810     0      39  boolean
 33284    46   368    20    46   810     0     111  isReadOnly
 33285    46   368    30    46   810     0      59  (
 33286    46   368    31    46   810     0      60  )
 33287    46   368    33    46   810     0      63  {
 33288    46   369     9    46   810     0      19  return
 33289    46   369    16    46   810     0      52  true
 33290    46   369    20    46   810     1     102  ;
 33291    46   370     5    46   810     1      64  }
 33292    46   370     5    46   810     0    1928  ENDMETHOD
 33293    46   370     5    46   811     0    1929  STARTMETHOD
 33294    46   416    12    46   811     0     111  ByteOrder
 33295    46   416    22    46   811     0     111  order
 33296    46   416    27    46   811     0      59  (
 33297    46   416    28    46   811     0      60  )
 33298    46   416    30    46   811     0      63  {
 33299    46   422     9    46   811     0      19  return
 33300    46   422    16    46   811     0      59  (
 33301    46   422    17    46   811     0      59  (
 33302    46   422    18    46   811     0     111  ByteOrder.nativeOrder
 33303    46   422    39    46   811     0      59  (
 33304    46   422    40    46   811     0      60  )
 33305    46   422    42    46   811     0      71  !=
 33306    46   422    45    46   811     0     111  ByteOrder.BIG_ENDIAN
 33307    46   422    65    46   811     0      60  )
 33308    46   423    17    46   811     0      58  ?
 33309    46   423    19    46   811     0     111  ByteOrder.LITTLE_ENDIAN
 33310    46   423    43    46   811     0      65  :
 33311    46   423    45    46   811     0     111  ByteOrder.BIG_ENDIAN
 33312    46   423    65    46   811     0      60  )
 33313    46   423    66    46   811     0     102  ;
 33314    46   425     5    46   811     0      64  }
 33315    46   425     5    46   811     0    1930  ENDMETHOD
 33316    46   452     1    46    -1     0      64  }
 33317    46   452     1    46    -1     1    1931  ENDCLASS
 33318    46   452     1    -1    -1     1    1932  ENDFILE C:\Users\RA\javasrc\java\nio\DirectIntBufferRU.java
 33319    47     1     1    -1    -1     1    1933  STARTFILE C:\Users\RA\javasrc\java\nio\DirectIntBufferS.java
 33320    47    28     9    -1    -1     0     111  java.nio
 33321    47    28    17    -1    -1     0     102  ;
 33322    47    30     1    -1    -1     1      49  import
 33323    47    30     8    -1    -1     1     111  sun.misc.Cleaner
 33324    47    30    24    -1    -1     1     102  ;
 33325    47    31     1    -1    -1     1      49  import
 33326    47    31     8    -1    -1     1     111  sun.misc.Unsafe
 33327    47    31    23    -1    -1     1     102  ;
 33328    47    32     1    -1    -1     1      49  import
 33329    47    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 33330    47    32    31    -1    -1     1     102  ;
 33331    47    33     1    -1    -1     1      49  import
 33332    47    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 33333    47    33    34    -1    -1     1     102  ;
 33334    47    36     1    47    -1     0    1934  STARTCLASS
 33335    47    36     1    47    -1     0      24  class
 33336    47    36     7    47    -1     0     111  DirectIntBufferS
 33337    47    38     5    47    -1     0      38  extends
 33338    47    38    13    47    -1     0     111  IntBuffer
 33339    47    42     5    47    -1     0      17  implements
 33340    47    42    16    47    -1     0     111  DirectBuffer
 33341    47    43     1    47    -1     0      63  {
 33342    47    48     5    47    -1     0      23  protected
 33343    47    48    15    47    -1     0      45  static
 33344    47    48    28    47    -1     0     111  Unsafe
 33345    47    48    35    47    -1     0     111  unsafe
 33346    47    48    42    47    -1     0      67  =
 33347    47    48    44    47    -1     0     111  Bits.unsafe
 33348    47    48    55    47    -1     0      59  (
 33349    47    48    56    47    -1     0      60  )
 33350    47    48    57    47    -1     0     102  ;
 33351    47    51     5    47    -1     0      23  protected
 33352    47    51    15    47    -1     0      45  static
 33353    47    51    28    47    -1     0      39  boolean
 33354    47    51    36    47    -1     0     111  unaligned
 33355    47    51    46    47    -1     0      67  =
 33356    47    51    48    47    -1     0     111  Bits.unaligned
 33357    47    51    62    47    -1     0      59  (
 33358    47    51    63    47    -1     0      60  )
 33359    47    51    64    47    -1     0     102  ;
 33360    47    59     5    47    -1     0      23  protected
 33361    47    59    15    47    -1     0     111  Object
 33362    47    59    22    47    -1     0     111  viewedBuffer
 33363    47    59    35    47    -1     0      67  =
 33364    47    59    37    47    -1     0      21  null
 33365    47    59    41    47    -1     0     102  ;
 33366    47    59    41    47   812     0    1935  STARTMETHOD
 33367    47    61    12    47   812     0     111  Object
 33368    47    61    19    47   812     0     111  viewedBuffer
 33369    47    61    31    47   812     0      59  (
 33370    47    61    32    47   812     0      60  )
 33371    47    61    34    47   812     0      63  {
 33372    47    62     9    47   812     0      19  return
 33373    47    62    16    47   812     0     111  viewedBuffer
 33374    47    62    28    47   812     0     102  ;
 33375    47    63     5    47   812     0      64  }
 33376    47    63     5    47   812     0    1936  ENDMETHOD
 33377    47    63     5    47   813     0    1937  STARTMETHOD
 33378    47   100    12    47   813     0     111  Cleaner
 33379    47   100    20    47   813     0     111  cleaner
 33380    47   100    27    47   813     0      59  (
 33381    47   100    28    47   813     0      60  )
 33382    47   100    30    47   813     0      63  {
 33383    47   100    32    47   813     0      19  return
 33384    47   100    39    47   813     0      21  null
 33385    47   100    43    47   813     0     102  ;
 33386    47   100    45    47   813     0      64  }
 33387    47   100    45    47   813     0    1938  ENDMETHOD
 33388    47   100    45    47   814     0    1939  STARTMETHOD
 33389    47   164     5    47   814     0     111  DirectIntBufferS
 33390    47   164    21    47   814     0      59  (
 33391    47   164    22    47   814     0     111  DirectBuffer
 33392    47   164    35    47   814     0     111  db
 33393    47   164    37    47   814     0      66  ,
 33394    47   165    32    47   814     0      36  int
 33395    47   165    36    47   814     0     111  mark
 33396    47   165    40    47   814     0      66  ,
 33397    47   165    42    47   814     0      36  int
 33398    47   165    46    47   814     0     111  pos
 33399    47   165    49    47   814     0      66  ,
 33400    47   165    51    47   814     0      36  int
 33401    47   165    55    47   814     0     111  lim
 33402    47   165    58    47   814     0      66  ,
 33403    47   165    60    47   814     0      36  int
 33404    47   165    64    47   814     0     111  cap
 33405    47   165    67    47   814     0      66  ,
 33406    47   166    32    47   814     0      36  int
 33407    47   166    36    47   814     0     111  off
 33408    47   166    39    47   814     0      60  )
 33409    47   167     5    47   814     0      63  {
 33410    47   169     9    47   814     0      27  super
 33411    47   169    14    47   814     0      59  (
 33412    47   169    15    47   814     0     111  mark
 33413    47   169    19    47   814     0      66  ,
 33414    47   169    21    47   814     0     111  pos
 33415    47   169    24    47   814     0      66  ,
 33416    47   169    26    47   814     0     111  lim
 33417    47   169    29    47   814     0      66  ,
 33418    47   169    31    47   814     0     111  cap
 33419    47   169    34    47   814     0      60  )
 33420    47   169    35    47   814     0     102  ;
 33421    47   170     9    47   814     0     111  address
 33422    47   170    17    47   814     0      67  =
 33423    47   170    19    47   814     0     111  db.address
 33424    47   170    29    47   814     0      59  (
 33425    47   170    30    47   814     0      60  )
 33426    47   170    32    47   814     0      74  +
 33427    47   170    34    47   814     0     111  off
 33428    47   170    37    47   814     0     102  ;
 33429    47   171     9    47   814     0     111  viewedBuffer
 33430    47   171    22    47   814     0      67  =
 33431    47   171    24    47   814     0     111  db
 33432    47   171    26    47   814     0     102  ;
 33433    47   178     5    47   814     0      64  }
 33434    47   178     5    47   814     0    1940  ENDMETHOD
 33435    47   178     5    47   815     0    1941  STARTMETHOD
 33436    47   180    12    47   815     0     111  IntBuffer
 33437    47   180    22    47   815     0     111  slice
 33438    47   180    27    47   815     0      59  (
 33439    47   180    28    47   815     0      60  )
 33440    47   180    30    47   815     0      63  {
 33441    47   181     9    47   815     1      36  int
 33442    47   181    13    47   815     1     111  pos
 33443    47   181    17    47   815     1      67  =
 33444    47   181    19    47   815     1     111  this.position
 33445    47   181    32    47   815     1      59  (
 33446    47   181    33    47   815     1      60  )
 33447    47   181    34    47   815     1     102  ;
 33448    47   182     9    47   815     1      36  int
 33449    47   182    13    47   815     1     111  lim
 33450    47   182    17    47   815     1      67  =
 33451    47   182    19    47   815     1     111  this.limit
 33452    47   182    29    47   815     1      59  (
 33453    47   182    30    47   815     1      60  )
 33454    47   182    31    47   815     1     102  ;
 33455    47   183     9    47   815     0     111  assert
 33456    47   183    16    47   815     0      59  (
 33457    47   183    17    47   815     0     111  pos
 33458    47   183    21    47   815     0      92  <=
 33459    47   183    24    47   815     0     111  lim
 33460    47   183    27    47   815     0      60  )
 33461    47   183    28    47   815     0     102  ;
 33462    47   184     9    47   815     0      36  int
 33463    47   184    13    47   815     0     111  rem
 33464    47   184    17    47   815     0      67  =
 33465    47   184    19    47   815     0      59  (
 33466    47   184    20    47   815     0     111  pos
 33467    47   184    24    47   815     0      92  <=
 33468    47   184    27    47   815     0     111  lim
 33469    47   184    31    47   815     0      58  ?
 33470    47   184    33    47   815     0     111  lim
 33471    47   184    37    47   815     0      77  -
 33472    47   184    39    47   815     0     111  pos
 33473    47   184    43    47   815     0      65  :
 33474    47   184    45    47   815     0     112  0
 33475    47   184    46    47   815     0      60  )
 33476    47   184    47    47   815     0     102  ;
 33477    47   185     9    47   815     0      36  int
 33478    47   185    13    47   815     0     111  off
 33479    47   185    17    47   815     0      67  =
 33480    47   185    19    47   815     0      59  (
 33481    47   185    20    47   815     0     111  pos
 33482    47   185    24    47   815     0      90  <<
 33483    47   185    27    47   815     0     112  2
 33484    47   185    28    47   815     0      60  )
 33485    47   185    29    47   815     0     102  ;
 33486    47   186     9    47   815     0     111  assert
 33487    47   186    16    47   815     0      59  (
 33488    47   186    17    47   815     0     111  off
 33489    47   186    21    47   815     0      88  >=
 33490    47   186    24    47   815     0     112  0
 33491    47   186    25    47   815     0      60  )
 33492    47   186    26    47   815     0     102  ;
 33493    47   187     9    47   815     0      19  return
 33494    47   187    20    47   815     0     111  DirectIntBufferS
 33495    47   187    36    47   815     0      59  (
 33496    47   187    37    47   815     0      44  this
 33497    47   187    41    47   815     0      66  ,
 33498    47   187    43    47   815     0      77  -
 33499    47   187    44    47   815     0     112  1
 33500    47   187    45    47   815     0      66  ,
 33501    47   187    47    47   815     0     112  0
 33502    47   187    48    47   815     0      66  ,
 33503    47   187    50    47   815     0     111  rem
 33504    47   187    53    47   815     0      66  ,
 33505    47   187    55    47   815     0     111  rem
 33506    47   187    58    47   815     0      66  ,
 33507    47   187    60    47   815     0     111  off
 33508    47   187    63    47   815     0      60  )
 33509    47   187    64    47   815     0     102  ;
 33510    47   188     5    47   815     0      64  }
 33511    47   188     5    47   815     0    1942  ENDMETHOD
 33512    47   188     5    47   816     0    1943  STARTMETHOD
 33513    47   190    12    47   816     0     111  IntBuffer
 33514    47   190    22    47   816     0     111  duplicate
 33515    47   190    31    47   816     0      59  (
 33516    47   190    32    47   816     0      60  )
 33517    47   190    34    47   816     0      63  {
 33518    47   191     9    47   816     0      19  return
 33519    47   191    20    47   816     0     111  DirectIntBufferS
 33520    47   191    36    47   816     0      59  (
 33521    47   191    37    47   816     0      44  this
 33522    47   191    41    47   816     0      66  ,
 33523    47   192    47    47   816     1     111  this.markValue
 33524    47   192    61    47   816     1      59  (
 33525    47   192    62    47   816     1      60  )
 33526    47   192    63    47   816     1      66  ,
 33527    47   193    47    47   816     1     111  this.position
 33528    47   193    60    47   816     1      59  (
 33529    47   193    61    47   816     1      60  )
 33530    47   193    62    47   816     1      66  ,
 33531    47   194    47    47   816     1     111  this.limit
 33532    47   194    57    47   816     1      59  (
 33533    47   194    58    47   816     1      60  )
 33534    47   194    59    47   816     1      66  ,
 33535    47   195    47    47   816     1     111  this.capacity
 33536    47   195    60    47   816     1      59  (
 33537    47   195    61    47   816     1      60  )
 33538    47   195    62    47   816     1      66  ,
 33539    47   196    47    47   816     0     112  0
 33540    47   196    48    47   816     0      60  )
 33541    47   196    49    47   816     0     102  ;
 33542    47   197     5    47   816     0      64  }
 33543    47   197     5    47   816     0    1944  ENDMETHOD
 33544    47   197     5    47   817     0    1945  STARTMETHOD
 33545    47   199    12    47   817     0     111  IntBuffer
 33546    47   199    22    47   817     0     111  asReadOnlyBuffer
 33547    47   199    38    47   817     0      59  (
 33548    47   199    39    47   817     0      60  )
 33549    47   199    41    47   817     0      63  {
 33550    47   201     9    47   817     0      19  return
 33551    47   201    20    47   817     0     111  DirectIntBufferRS
 33552    47   201    37    47   817     0      59  (
 33553    47   201    38    47   817     0      44  this
 33554    47   201    42    47   817     0      66  ,
 33555    47   202    44    47   817     1     111  this.markValue
 33556    47   202    58    47   817     1      59  (
 33557    47   202    59    47   817     1      60  )
 33558    47   202    60    47   817     1      66  ,
 33559    47   203    44    47   817     1     111  this.position
 33560    47   203    57    47   817     1      59  (
 33561    47   203    58    47   817     1      60  )
 33562    47   203    59    47   817     1      66  ,
 33563    47   204    44    47   817     1     111  this.limit
 33564    47   204    54    47   817     1      59  (
 33565    47   204    55    47   817     1      60  )
 33566    47   204    56    47   817     1      66  ,
 33567    47   205    44    47   817     1     111  this.capacity
 33568    47   205    57    47   817     1      59  (
 33569    47   205    58    47   817     1      60  )
 33570    47   205    59    47   817     1      66  ,
 33571    47   206    44    47   817     0     112  0
 33572    47   206    45    47   817     0      60  )
 33573    47   206    46    47   817     0     102  ;
 33574    47   210     5    47   817     0      64  }
 33575    47   210     5    47   817     0    1946  ENDMETHOD
 33576    47   210     5    47   818     0    1947  STARTMETHOD
 33577    47   214    12    47   818     0      53  long
 33578    47   214    17    47   818     0     111  address
 33579    47   214    24    47   818     0      59  (
 33580    47   214    25    47   818     0      60  )
 33581    47   214    27    47   818     0      63  {
 33582    47   215     9    47   818     0      19  return
 33583    47   215    16    47   818     0     111  address
 33584    47   215    23    47   818     0     102  ;
 33585    47   216     5    47   818     0      64  }
 33586    47   216     5    47   818     0    1948  ENDMETHOD
 33587    47   216     5    47   819     0    1949  STARTMETHOD
 33588    47   218     5    47   819     0      41  private
 33589    47   218    13    47   819     0      53  long
 33590    47   218    18    47   819     0     111  ix
 33591    47   218    20    47   819     0      59  (
 33592    47   218    21    47   819     0      36  int
 33593    47   218    25    47   819     0     111  i
 33594    47   218    26    47   819     0      60  )
 33595    47   218    28    47   819     0      63  {
 33596    47   219     9    47   819     0      19  return
 33597    47   219    16    47   819     0     111  address
 33598    47   219    24    47   819     0      74  +
 33599    47   219    26    47   819     0      59  (
 33600    47   219    27    47   819     0     111  i
 33601    47   219    29    47   819     0      90  <<
 33602    47   219    32    47   819     0     112  2
 33603    47   219    33    47   819     0      60  )
 33604    47   219    34    47   819     0     102  ;
 33605    47   220     5    47   819     0      64  }
 33606    47   220     5    47   819     0    1950  ENDMETHOD
 33607    47   220     5    47   820     0    1951  STARTMETHOD
 33608    47   222    12    47   820     0      36  int
 33609    47   222    16    47   820     0     111  get
 33610    47   222    19    47   820     0      59  (
 33611    47   222    20    47   820     0      60  )
 33612    47   222    22    47   820     0      63  {
 33613    47   223     9    47   820     0      19  return
 33614    47   223    16    47   820     0      59  (
 33615    47   223    17    47   820     0     111  Bits.swap
 33616    47   223    26    47   820     0      59  (
 33617    47   223    27    47   820     0     111  unsafe.getInt
 33618    47   223    40    47   820     0      59  (
 33619    47   223    41    47   820     0     111  ix
 33620    47   223    43    47   820     0      59  (
 33621    47   223    44    47   820     0     111  nextGetIndex
 33622    47   223    56    47   820     0      59  (
 33623    47   223    57    47   820     0      60  )
 33624    47   223    58    47   820     0      60  )
 33625    47   223    59    47   820     0      60  )
 33626    47   223    60    47   820     0      60  )
 33627    47   223    61    47   820     0      60  )
 33628    47   223    62    47   820     0     102  ;
 33629    47   224     5    47   820     0      64  }
 33630    47   224     5    47   820     0    1952  ENDMETHOD
 33631    47   224     5    47   821     0    1953  STARTMETHOD
 33632    47   226    12    47   821     0      36  int
 33633    47   226    16    47   821     0     111  get
 33634    47   226    19    47   821     0      59  (
 33635    47   226    20    47   821     0      36  int
 33636    47   226    24    47   821     0     111  i
 33637    47   226    25    47   821     0      60  )
 33638    47   226    27    47   821     0      63  {
 33639    47   227     9    47   821     0      19  return
 33640    47   227    16    47   821     0      59  (
 33641    47   227    17    47   821     0     111  Bits.swap
 33642    47   227    26    47   821     0      59  (
 33643    47   227    27    47   821     0     111  unsafe.getInt
 33644    47   227    40    47   821     0      59  (
 33645    47   227    41    47   821     0     111  ix
 33646    47   227    43    47   821     0      59  (
 33647    47   227    44    47   821     0     111  checkIndex
 33648    47   227    54    47   821     0      59  (
 33649    47   227    55    47   821     0     111  i
 33650    47   227    56    47   821     0      60  )
 33651    47   227    57    47   821     0      60  )
 33652    47   227    58    47   821     0      60  )
 33653    47   227    59    47   821     0      60  )
 33654    47   227    60    47   821     0      60  )
 33655    47   227    61    47   821     0     102  ;
 33656    47   228     5    47   821     0      64  }
 33657    47   228     5    47   821     0    1954  ENDMETHOD
 33658    47   228     5    47   822     0    1955  STARTMETHOD
 33659    47   230    12    47   822     0     111  IntBuffer
 33660    47   230    22    47   822     0     111  get
 33661    47   230    25    47   822     0      59  (
 33662    47   230    26    47   822     0      36  int
 33663    47   230    29    47   822     0      61  [
 33664    47   230    30    47   822     0      62  ]
 33665    47   230    32    47   822     0     111  dst
 33666    47   230    35    47   822     0      66  ,
 33667    47   230    37    47   822     0      36  int
 33668    47   230    41    47   822     0     111  offset
 33669    47   230    47    47   822     0      66  ,
 33670    47   230    49    47   822     0      36  int
 33671    47   230    53    47   822     0     111  length
 33672    47   230    59    47   822     0      60  )
 33673    47   230    61    47   822     0      63  {
 33674    47   232     9    47   822     0      31  if
 33675    47   232    12    47   822     0      59  (
 33676    47   232    13    47   822     0      59  (
 33677    47   232    14    47   822     0     111  length
 33678    47   232    21    47   822     0      90  <<
 33679    47   232    24    47   822     0     112  2
 33680    47   232    25    47   822     0      60  )
 33681    47   232    27    47   822     0      89  >
 33682    47   232    29    47   822     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 33683    47   232    61    47   822     0      60  )
 33684    47   232    63    47   822     0      63  {
 33685    47   233    13    47   822     0     111  checkBounds
 33686    47   233    24    47   822     0      59  (
 33687    47   233    25    47   822     0     111  offset
 33688    47   233    31    47   822     0      66  ,
 33689    47   233    33    47   822     0     111  length
 33690    47   233    39    47   822     0      66  ,
 33691    47   233    41    47   822     0     111  dst.length
 33692    47   233    51    47   822     0      60  )
 33693    47   233    52    47   822     0     102  ;
 33694    47   234    13    47   822     1      36  int
 33695    47   234    17    47   822     1     111  pos
 33696    47   234    21    47   822     1      67  =
 33697    47   234    23    47   822     1     111  position
 33698    47   234    31    47   822     1      59  (
 33699    47   234    32    47   822     1      60  )
 33700    47   234    33    47   822     1     102  ;
 33701    47   235    13    47   822     1      36  int
 33702    47   235    17    47   822     1     111  lim
 33703    47   235    21    47   822     1      67  =
 33704    47   235    23    47   822     1     111  limit
 33705    47   235    28    47   822     1      59  (
 33706    47   235    29    47   822     1      60  )
 33707    47   235    30    47   822     1     102  ;
 33708    47   236    13    47   822     0     111  assert
 33709    47   236    20    47   822     0      59  (
 33710    47   236    21    47   822     0     111  pos
 33711    47   236    25    47   822     0      92  <=
 33712    47   236    28    47   822     0     111  lim
 33713    47   236    31    47   822     0      60  )
 33714    47   236    32    47   822     0     102  ;
 33715    47   237    13    47   822     0      36  int
 33716    47   237    17    47   822     0     111  rem
 33717    47   237    21    47   822     0      67  =
 33718    47   237    23    47   822     0      59  (
 33719    47   237    24    47   822     0     111  pos
 33720    47   237    28    47   822     0      92  <=
 33721    47   237    31    47   822     0     111  lim
 33722    47   237    35    47   822     0      58  ?
 33723    47   237    37    47   822     0     111  lim
 33724    47   237    41    47   822     0      77  -
 33725    47   237    43    47   822     0     111  pos
 33726    47   237    47    47   822     0      65  :
 33727    47   237    49    47   822     0     112  0
 33728    47   237    50    47   822     0      60  )
 33729    47   237    51    47   822     0     102  ;
 33730    47   238    13    47   822     0      31  if
 33731    47   238    16    47   822     0      59  (
 33732    47   238    17    47   822     0     111  length
 33733    47   238    24    47   822     0      89  >
 33734    47   238    26    47   822     0     111  rem
 33735    47   238    29    47   822     0      60  )
 33736    47   239    17    47   822     0      20  throw
 33737    47   239    27    47   822     0     111  BufferUnderflowException
 33738    47   239    51    47   822     0      59  (
 33739    47   239    52    47   822     0      60  )
 33740    47   239    53    47   822     0     102  ;
 33741    47   241    13    47   822     0      31  if
 33742    47   241    16    47   822     0      59  (
 33743    47   241    17    47   822     0     111  order
 33744    47   241    22    47   822     0      59  (
 33745    47   241    23    47   822     0      60  )
 33746    47   241    25    47   822     0      71  !=
 33747    47   241    28    47   822     0     111  ByteOrder.nativeOrder
 33748    47   241    49    47   822     0      59  (
 33749    47   241    50    47   822     0      60  )
 33750    47   241    51    47   822     0      60  )
 33751    47   242    17    47   822     0     111  Bits.copyToIntArray
 33752    47   242    36    47   822     0      59  (
 33753    47   242    37    47   822     0     111  ix
 33754    47   242    39    47   822     0      59  (
 33755    47   242    40    47   822     0     111  pos
 33756    47   242    43    47   822     0      60  )
 33757    47   242    44    47   822     0      66  ,
 33758    47   242    46    47   822     0     111  dst
 33759    47   242    49    47   822     0      66  ,
 33760    47   243    43    47   822     0     111  offset
 33761    47   243    50    47   822     0      90  <<
 33762    47   243    53    47   822     0     112  2
 33763    47   243    54    47   822     0      66  ,
 33764    47   244    43    47   822     0     111  length
 33765    47   244    50    47   822     0      90  <<
 33766    47   244    53    47   822     0     112  2
 33767    47   244    54    47   822     0      60  )
 33768    47   244    55    47   822     0     102  ;
 33769    47   245    13    47   822     0      48  else
 33770    47   246    17    47   822     0     111  Bits.copyToByteArray
 33771    47   246    37    47   822     0      59  (
 33772    47   246    38    47   822     0     111  ix
 33773    47   246    40    47   822     0      59  (
 33774    47   246    41    47   822     0     111  pos
 33775    47   246    44    47   822     0      60  )
 33776    47   246    45    47   822     0      66  ,
 33777    47   246    47    47   822     0     111  dst
 33778    47   246    50    47   822     0      66  ,
 33779    47   247    38    47   822     0     111  offset
 33780    47   247    45    47   822     0      90  <<
 33781    47   247    48    47   822     0     112  2
 33782    47   247    49    47   822     0      66  ,
 33783    47   248    38    47   822     0     111  length
 33784    47   248    45    47   822     0      90  <<
 33785    47   248    48    47   822     0     112  2
 33786    47   248    49    47   822     0      60  )
 33787    47   248    50    47   822     0     102  ;
 33788    47   249    13    47   822     0     111  position
 33789    47   249    21    47   822     0      59  (
 33790    47   249    22    47   822     0     111  pos
 33791    47   249    26    47   822     0      74  +
 33792    47   249    28    47   822     0     111  length
 33793    47   249    34    47   822     0      60  )
 33794    47   249    35    47   822     0     102  ;
 33795    47   250     9    47   822     0      64  }
 33796    47   250    11    47   822     0      48  else
 33797    47   250    16    47   822     0      63  {
 33798    47   251    13    47   822     0     111  super.get
 33799    47   251    22    47   822     0      59  (
 33800    47   251    23    47   822     0     111  dst
 33801    47   251    26    47   822     0      66  ,
 33802    47   251    28    47   822     0     111  offset
 33803    47   251    34    47   822     0      66  ,
 33804    47   251    36    47   822     0     111  length
 33805    47   251    42    47   822     0      60  )
 33806    47   251    43    47   822     0     102  ;
 33807    47   252     9    47   822     0      64  }
 33808    47   253     9    47   822     0      19  return
 33809    47   253    16    47   822     0      44  this
 33810    47   253    20    47   822     0     102  ;
 33811    47   257     5    47   822     0      64  }
 33812    47   257     5    47   822     0    1956  ENDMETHOD
 33813    47   257     5    47   823     0    1957  STARTMETHOD
 33814    47   261    12    47   823     0     111  IntBuffer
 33815    47   261    22    47   823     0     111  put
 33816    47   261    25    47   823     0      59  (
 33817    47   261    26    47   823     0      36  int
 33818    47   261    30    47   823     0     111  x
 33819    47   261    31    47   823     0      60  )
 33820    47   261    33    47   823     0      63  {
 33821    47   263     9    47   823     0     111  unsafe.putInt
 33822    47   263    22    47   823     0      59  (
 33823    47   263    23    47   823     0     111  ix
 33824    47   263    25    47   823     0      59  (
 33825    47   263    26    47   823     0     111  nextPutIndex
 33826    47   263    38    47   823     0      59  (
 33827    47   263    39    47   823     0      60  )
 33828    47   263    40    47   823     0      60  )
 33829    47   263    41    47   823     0      66  ,
 33830    47   263    43    47   823     0     111  Bits.swap
 33831    47   263    52    47   823     0      59  (
 33832    47   263    53    47   823     0      59  (
 33833    47   263    54    47   823     0     111  x
 33834    47   263    55    47   823     0      60  )
 33835    47   263    56    47   823     0      60  )
 33836    47   263    57    47   823     0      60  )
 33837    47   263    58    47   823     0     102  ;
 33838    47   264     9    47   823     0      19  return
 33839    47   264    16    47   823     0      44  this
 33840    47   264    20    47   823     0     102  ;
 33841    47   268     5    47   823     0      64  }
 33842    47   268     5    47   823     0    1958  ENDMETHOD
 33843    47   268     5    47   824     0    1959  STARTMETHOD
 33844    47   270    12    47   824     0     111  IntBuffer
 33845    47   270    22    47   824     0     111  put
 33846    47   270    25    47   824     0      59  (
 33847    47   270    26    47   824     0      36  int
 33848    47   270    30    47   824     0     111  i
 33849    47   270    31    47   824     0      66  ,
 33850    47   270    33    47   824     0      36  int
 33851    47   270    37    47   824     0     111  x
 33852    47   270    38    47   824     0      60  )
 33853    47   270    40    47   824     0      63  {
 33854    47   272     9    47   824     0     111  unsafe.putInt
 33855    47   272    22    47   824     0      59  (
 33856    47   272    23    47   824     0     111  ix
 33857    47   272    25    47   824     0      59  (
 33858    47   272    26    47   824     0     111  checkIndex
 33859    47   272    36    47   824     0      59  (
 33860    47   272    37    47   824     0     111  i
 33861    47   272    38    47   824     0      60  )
 33862    47   272    39    47   824     0      60  )
 33863    47   272    40    47   824     0      66  ,
 33864    47   272    42    47   824     0     111  Bits.swap
 33865    47   272    51    47   824     0      59  (
 33866    47   272    52    47   824     0      59  (
 33867    47   272    53    47   824     0     111  x
 33868    47   272    54    47   824     0      60  )
 33869    47   272    55    47   824     0      60  )
 33870    47   272    56    47   824     0      60  )
 33871    47   272    57    47   824     0     102  ;
 33872    47   273     9    47   824     0      19  return
 33873    47   273    16    47   824     0      44  this
 33874    47   273    20    47   824     0     102  ;
 33875    47   277     5    47   824     0      64  }
 33876    47   277     5    47   824     0    1960  ENDMETHOD
 33877    47   277     5    47   825     0    1961  STARTMETHOD
 33878    47   279    12    47   825     0     111  IntBuffer
 33879    47   279    22    47   825     0     111  put
 33880    47   279    25    47   825     0      59  (
 33881    47   279    26    47   825     0     111  IntBuffer
 33882    47   279    36    47   825     0     111  src
 33883    47   279    39    47   825     0      60  )
 33884    47   279    41    47   825     0      63  {
 33885    47   281     9    47   825     0      31  if
 33886    47   281    12    47   825     0      59  (
 33887    47   281    13    47   825     0     111  src
 33888    47   281    28    47   825     0     111  DirectIntBufferS
 33889    47   281    44    47   825     0      60  )
 33890    47   281    46    47   825     0      63  {
 33891    47   282    13    47   825     0      31  if
 33892    47   282    16    47   825     0      59  (
 33893    47   282    17    47   825     0     111  src
 33894    47   282    21    47   825     0      68  ==
 33895    47   282    24    47   825     0      44  this
 33896    47   282    28    47   825     0      60  )
 33897    47   283    17    47   825     0      20  throw
 33898    47   283    27    47   825     0     111  IllegalArgumentException
 33899    47   283    51    47   825     0      59  (
 33900    47   283    52    47   825     0      60  )
 33901    47   283    53    47   825     0     102  ;
 33902    47   284    13    47   825     0     111  DirectIntBufferS
 33903    47   284    30    47   825     0     111  sb
 33904    47   284    33    47   825     0      67  =
 33905    47   284    35    47   825     0      59  (
 33906    47   284    36    47   825     0     111  DirectIntBufferS
 33907    47   284    52    47   825     0      60  )
 33908    47   284    53    47   825     0     111  src
 33909    47   284    56    47   825     0     102  ;
 33910    47   286    13    47   825     1      36  int
 33911    47   286    17    47   825     1     111  spos
 33912    47   286    22    47   825     1      67  =
 33913    47   286    24    47   825     1     111  sb.position
 33914    47   286    35    47   825     1      59  (
 33915    47   286    36    47   825     1      60  )
 33916    47   286    37    47   825     1     102  ;
 33917    47   287    13    47   825     1      36  int
 33918    47   287    17    47   825     1     111  slim
 33919    47   287    22    47   825     1      67  =
 33920    47   287    24    47   825     1     111  sb.limit
 33921    47   287    32    47   825     1      59  (
 33922    47   287    33    47   825     1      60  )
 33923    47   287    34    47   825     1     102  ;
 33924    47   288    13    47   825     0     111  assert
 33925    47   288    20    47   825     0      59  (
 33926    47   288    21    47   825     0     111  spos
 33927    47   288    26    47   825     0      92  <=
 33928    47   288    29    47   825     0     111  slim
 33929    47   288    33    47   825     0      60  )
 33930    47   288    34    47   825     0     102  ;
 33931    47   289    13    47   825     0      36  int
 33932    47   289    17    47   825     0     111  srem
 33933    47   289    22    47   825     0      67  =
 33934    47   289    24    47   825     0      59  (
 33935    47   289    25    47   825     0     111  spos
 33936    47   289    30    47   825     0      92  <=
 33937    47   289    33    47   825     0     111  slim
 33938    47   289    38    47   825     0      58  ?
 33939    47   289    40    47   825     0     111  slim
 33940    47   289    45    47   825     0      77  -
 33941    47   289    47    47   825     0     111  spos
 33942    47   289    52    47   825     0      65  :
 33943    47   289    54    47   825     0     112  0
 33944    47   289    55    47   825     0      60  )
 33945    47   289    56    47   825     0     102  ;
 33946    47   291    13    47   825     1      36  int
 33947    47   291    17    47   825     1     111  pos
 33948    47   291    21    47   825     1      67  =
 33949    47   291    23    47   825     1     111  position
 33950    47   291    31    47   825     1      59  (
 33951    47   291    32    47   825     1      60  )
 33952    47   291    33    47   825     1     102  ;
 33953    47   292    13    47   825     1      36  int
 33954    47   292    17    47   825     1     111  lim
 33955    47   292    21    47   825     1      67  =
 33956    47   292    23    47   825     1     111  limit
 33957    47   292    28    47   825     1      59  (
 33958    47   292    29    47   825     1      60  )
 33959    47   292    30    47   825     1     102  ;
 33960    47   293    13    47   825     0     111  assert
 33961    47   293    20    47   825     0      59  (
 33962    47   293    21    47   825     0     111  pos
 33963    47   293    25    47   825     0      92  <=
 33964    47   293    28    47   825     0     111  lim
 33965    47   293    31    47   825     0      60  )
 33966    47   293    32    47   825     0     102  ;
 33967    47   294    13    47   825     0      36  int
 33968    47   294    17    47   825     0     111  rem
 33969    47   294    21    47   825     0      67  =
 33970    47   294    23    47   825     0      59  (
 33971    47   294    24    47   825     0     111  pos
 33972    47   294    28    47   825     0      92  <=
 33973    47   294    31    47   825     0     111  lim
 33974    47   294    35    47   825     0      58  ?
 33975    47   294    37    47   825     0     111  lim
 33976    47   294    41    47   825     0      77  -
 33977    47   294    43    47   825     0     111  pos
 33978    47   294    47    47   825     0      65  :
 33979    47   294    49    47   825     0     112  0
 33980    47   294    50    47   825     0      60  )
 33981    47   294    51    47   825     0     102  ;
 33982    47   296    13    47   825     0      31  if
 33983    47   296    16    47   825     0      59  (
 33984    47   296    17    47   825     0     111  srem
 33985    47   296    22    47   825     0      89  >
 33986    47   296    24    47   825     0     111  rem
 33987    47   296    27    47   825     0      60  )
 33988    47   297    17    47   825     0      20  throw
 33989    47   297    27    47   825     0     111  BufferOverflowException
 33990    47   297    50    47   825     0      59  (
 33991    47   297    51    47   825     0      60  )
 33992    47   297    52    47   825     0     102  ;
 33993    47   298    13    47   825     0     111  unsafe.copyMemory
 33994    47   298    30    47   825     0      59  (
 33995    47   298    31    47   825     0     111  sb.ix
 33996    47   298    36    47   825     0      59  (
 33997    47   298    37    47   825     0     111  spos
 33998    47   298    41    47   825     0      60  )
 33999    47   298    42    47   825     0      66  ,
 34000    47   298    44    47   825     0     111  ix
 34001    47   298    46    47   825     0      59  (
 34002    47   298    47    47   825     0     111  pos
 34003    47   298    50    47   825     0      60  )
 34004    47   298    51    47   825     0      66  ,
 34005    47   298    53    47   825     0     111  srem
 34006    47   298    58    47   825     0      90  <<
 34007    47   298    61    47   825     0     112  2
 34008    47   298    62    47   825     0      60  )
 34009    47   298    63    47   825     0     102  ;
 34010    47   299    13    47   825     1     111  sb.position
 34011    47   299    24    47   825     1      59  (
 34012    47   299    25    47   825     1     111  spos
 34013    47   299    30    47   825     1      74  +
 34014    47   299    32    47   825     1     111  srem
 34015    47   299    36    47   825     1      60  )
 34016    47   299    37    47   825     1     102  ;
 34017    47   300    13    47   825     1     111  position
 34018    47   300    21    47   825     1      59  (
 34019    47   300    22    47   825     1     111  pos
 34020    47   300    26    47   825     1      74  +
 34021    47   300    28    47   825     1     111  srem
 34022    47   300    32    47   825     1      60  )
 34023    47   300    33    47   825     1     102  ;
 34024    47   301     9    47   825     0      64  }
 34025    47   301    11    47   825     0      48  else
 34026    47   301    16    47   825     0      31  if
 34027    47   301    19    47   825     0      59  (
 34028    47   301    20    47   825     0     111  src.hb
 34029    47   301    27    47   825     0      71  !=
 34030    47   301    30    47   825     0      21  null
 34031    47   301    34    47   825     0      60  )
 34032    47   301    36    47   825     0      63  {
 34033    47   303    13    47   825     1      36  int
 34034    47   303    17    47   825     1     111  spos
 34035    47   303    22    47   825     1      67  =
 34036    47   303    24    47   825     1     111  src.position
 34037    47   303    36    47   825     1      59  (
 34038    47   303    37    47   825     1      60  )
 34039    47   303    38    47   825     1     102  ;
 34040    47   304    13    47   825     1      36  int
 34041    47   304    17    47   825     1     111  slim
 34042    47   304    22    47   825     1      67  =
 34043    47   304    24    47   825     1     111  src.limit
 34044    47   304    33    47   825     1      59  (
 34045    47   304    34    47   825     1      60  )
 34046    47   304    35    47   825     1     102  ;
 34047    47   305    13    47   825     0     111  assert
 34048    47   305    20    47   825     0      59  (
 34049    47   305    21    47   825     0     111  spos
 34050    47   305    26    47   825     0      92  <=
 34051    47   305    29    47   825     0     111  slim
 34052    47   305    33    47   825     0      60  )
 34053    47   305    34    47   825     0     102  ;
 34054    47   306    13    47   825     0      36  int
 34055    47   306    17    47   825     0     111  srem
 34056    47   306    22    47   825     0      67  =
 34057    47   306    24    47   825     0      59  (
 34058    47   306    25    47   825     0     111  spos
 34059    47   306    30    47   825     0      92  <=
 34060    47   306    33    47   825     0     111  slim
 34061    47   306    38    47   825     0      58  ?
 34062    47   306    40    47   825     0     111  slim
 34063    47   306    45    47   825     0      77  -
 34064    47   306    47    47   825     0     111  spos
 34065    47   306    52    47   825     0      65  :
 34066    47   306    54    47   825     0     112  0
 34067    47   306    55    47   825     0      60  )
 34068    47   306    56    47   825     0     102  ;
 34069    47   308    13    47   825     0     111  put
 34070    47   308    16    47   825     0      59  (
 34071    47   308    17    47   825     0     111  src.hb
 34072    47   308    23    47   825     0      66  ,
 34073    47   308    25    47   825     0     111  src.offset
 34074    47   308    36    47   825     0      74  +
 34075    47   308    38    47   825     0     111  spos
 34076    47   308    42    47   825     0      66  ,
 34077    47   308    44    47   825     0     111  srem
 34078    47   308    48    47   825     0      60  )
 34079    47   308    49    47   825     0     102  ;
 34080    47   309    13    47   825     0     111  src.position
 34081    47   309    25    47   825     0      59  (
 34082    47   309    26    47   825     0     111  spos
 34083    47   309    31    47   825     0      74  +
 34084    47   309    33    47   825     0     111  srem
 34085    47   309    37    47   825     0      60  )
 34086    47   309    38    47   825     0     102  ;
 34087    47   311     9    47   825     0      64  }
 34088    47   311    11    47   825     0      48  else
 34089    47   311    16    47   825     0      63  {
 34090    47   312    13    47   825     0     111  super.put
 34091    47   312    22    47   825     0      59  (
 34092    47   312    23    47   825     0     111  src
 34093    47   312    26    47   825     0      60  )
 34094    47   312    27    47   825     0     102  ;
 34095    47   313     9    47   825     0      64  }
 34096    47   314     9    47   825     0      19  return
 34097    47   314    16    47   825     0      44  this
 34098    47   314    20    47   825     0     102  ;
 34099    47   318     5    47   825     0      64  }
 34100    47   318     5    47   825     0    1962  ENDMETHOD
 34101    47   318     5    47   826     0    1963  STARTMETHOD
 34102    47   320    12    47   826     0     111  IntBuffer
 34103    47   320    22    47   826     0     111  put
 34104    47   320    25    47   826     0      59  (
 34105    47   320    26    47   826     0      36  int
 34106    47   320    29    47   826     0      61  [
 34107    47   320    30    47   826     0      62  ]
 34108    47   320    32    47   826     0     111  src
 34109    47   320    35    47   826     0      66  ,
 34110    47   320    37    47   826     0      36  int
 34111    47   320    41    47   826     0     111  offset
 34112    47   320    47    47   826     0      66  ,
 34113    47   320    49    47   826     0      36  int
 34114    47   320    53    47   826     0     111  length
 34115    47   320    59    47   826     0      60  )
 34116    47   320    61    47   826     0      63  {
 34117    47   322     9    47   826     0      31  if
 34118    47   322    12    47   826     0      59  (
 34119    47   322    13    47   826     0      59  (
 34120    47   322    14    47   826     0     111  length
 34121    47   322    21    47   826     0      90  <<
 34122    47   322    24    47   826     0     112  2
 34123    47   322    25    47   826     0      60  )
 34124    47   322    27    47   826     0      89  >
 34125    47   322    29    47   826     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 34126    47   322    63    47   826     0      60  )
 34127    47   322    65    47   826     0      63  {
 34128    47   323    13    47   826     0     111  checkBounds
 34129    47   323    24    47   826     0      59  (
 34130    47   323    25    47   826     0     111  offset
 34131    47   323    31    47   826     0      66  ,
 34132    47   323    33    47   826     0     111  length
 34133    47   323    39    47   826     0      66  ,
 34134    47   323    41    47   826     0     111  src.length
 34135    47   323    51    47   826     0      60  )
 34136    47   323    52    47   826     0     102  ;
 34137    47   324    13    47   826     1      36  int
 34138    47   324    17    47   826     1     111  pos
 34139    47   324    21    47   826     1      67  =
 34140    47   324    23    47   826     1     111  position
 34141    47   324    31    47   826     1      59  (
 34142    47   324    32    47   826     1      60  )
 34143    47   324    33    47   826     1     102  ;
 34144    47   325    13    47   826     1      36  int
 34145    47   325    17    47   826     1     111  lim
 34146    47   325    21    47   826     1      67  =
 34147    47   325    23    47   826     1     111  limit
 34148    47   325    28    47   826     1      59  (
 34149    47   325    29    47   826     1      60  )
 34150    47   325    30    47   826     1     102  ;
 34151    47   326    13    47   826     0     111  assert
 34152    47   326    20    47   826     0      59  (
 34153    47   326    21    47   826     0     111  pos
 34154    47   326    25    47   826     0      92  <=
 34155    47   326    28    47   826     0     111  lim
 34156    47   326    31    47   826     0      60  )
 34157    47   326    32    47   826     0     102  ;
 34158    47   327    13    47   826     0      36  int
 34159    47   327    17    47   826     0     111  rem
 34160    47   327    21    47   826     0      67  =
 34161    47   327    23    47   826     0      59  (
 34162    47   327    24    47   826     0     111  pos
 34163    47   327    28    47   826     0      92  <=
 34164    47   327    31    47   826     0     111  lim
 34165    47   327    35    47   826     0      58  ?
 34166    47   327    37    47   826     0     111  lim
 34167    47   327    41    47   826     0      77  -
 34168    47   327    43    47   826     0     111  pos
 34169    47   327    47    47   826     0      65  :
 34170    47   327    49    47   826     0     112  0
 34171    47   327    50    47   826     0      60  )
 34172    47   327    51    47   826     0     102  ;
 34173    47   328    13    47   826     0      31  if
 34174    47   328    16    47   826     0      59  (
 34175    47   328    17    47   826     0     111  length
 34176    47   328    24    47   826     0      89  >
 34177    47   328    26    47   826     0     111  rem
 34178    47   328    29    47   826     0      60  )
 34179    47   329    17    47   826     0      20  throw
 34180    47   329    27    47   826     0     111  BufferOverflowException
 34181    47   329    50    47   826     0      59  (
 34182    47   329    51    47   826     0      60  )
 34183    47   329    52    47   826     0     102  ;
 34184    47   331    13    47   826     0      31  if
 34185    47   331    16    47   826     0      59  (
 34186    47   331    17    47   826     0     111  order
 34187    47   331    22    47   826     0      59  (
 34188    47   331    23    47   826     0      60  )
 34189    47   331    25    47   826     0      71  !=
 34190    47   331    28    47   826     0     111  ByteOrder.nativeOrder
 34191    47   331    49    47   826     0      59  (
 34192    47   331    50    47   826     0      60  )
 34193    47   331    51    47   826     0      60  )
 34194    47   332    17    47   826     0     111  Bits.copyFromIntArray
 34195    47   332    38    47   826     0      59  (
 34196    47   332    39    47   826     0     111  src
 34197    47   332    42    47   826     0      66  ,
 34198    47   332    44    47   826     0     111  offset
 34199    47   332    51    47   826     0      90  <<
 34200    47   332    54    47   826     0     112  2
 34201    47   332    55    47   826     0      66  ,
 34202    47   333    45    47   826     0     111  ix
 34203    47   333    47    47   826     0      59  (
 34204    47   333    48    47   826     0     111  pos
 34205    47   333    51    47   826     0      60  )
 34206    47   333    52    47   826     0      66  ,
 34207    47   333    54    47   826     0     111  length
 34208    47   333    61    47   826     0      90  <<
 34209    47   333    64    47   826     0     112  2
 34210    47   333    65    47   826     0      60  )
 34211    47   333    66    47   826     0     102  ;
 34212    47   334    13    47   826     0      48  else
 34213    47   335    17    47   826     0     111  Bits.copyFromByteArray
 34214    47   335    39    47   826     0      59  (
 34215    47   335    40    47   826     0     111  src
 34216    47   335    43    47   826     0      66  ,
 34217    47   335    45    47   826     0     111  offset
 34218    47   335    52    47   826     0      90  <<
 34219    47   335    55    47   826     0     112  2
 34220    47   335    56    47   826     0      66  ,
 34221    47   336    40    47   826     0     111  ix
 34222    47   336    42    47   826     0      59  (
 34223    47   336    43    47   826     0     111  pos
 34224    47   336    46    47   826     0      60  )
 34225    47   336    47    47   826     0      66  ,
 34226    47   336    49    47   826     0     111  length
 34227    47   336    56    47   826     0      90  <<
 34228    47   336    59    47   826     0     112  2
 34229    47   336    60    47   826     0      60  )
 34230    47   336    61    47   826     0     102  ;
 34231    47   337    13    47   826     0     111  position
 34232    47   337    21    47   826     0      59  (
 34233    47   337    22    47   826     0     111  pos
 34234    47   337    26    47   826     0      74  +
 34235    47   337    28    47   826     0     111  length
 34236    47   337    34    47   826     0      60  )
 34237    47   337    35    47   826     0     102  ;
 34238    47   338     9    47   826     0      64  }
 34239    47   338    11    47   826     0      48  else
 34240    47   338    16    47   826     0      63  {
 34241    47   339    13    47   826     0     111  super.put
 34242    47   339    22    47   826     0      59  (
 34243    47   339    23    47   826     0     111  src
 34244    47   339    26    47   826     0      66  ,
 34245    47   339    28    47   826     0     111  offset
 34246    47   339    34    47   826     0      66  ,
 34247    47   339    36    47   826     0     111  length
 34248    47   339    42    47   826     0      60  )
 34249    47   339    43    47   826     0     102  ;
 34250    47   340     9    47   826     0      64  }
 34251    47   341     9    47   826     0      19  return
 34252    47   341    16    47   826     0      44  this
 34253    47   341    20    47   826     0     102  ;
 34254    47   345     5    47   826     0      64  }
 34255    47   345     5    47   826     0    1964  ENDMETHOD
 34256    47   345     5    47   827     0    1965  STARTMETHOD
 34257    47   347    12    47   827     0     111  IntBuffer
 34258    47   347    22    47   827     0     111  compact
 34259    47   347    29    47   827     0      59  (
 34260    47   347    30    47   827     0      60  )
 34261    47   347    32    47   827     0      63  {
 34262    47   349     9    47   827     1      36  int
 34263    47   349    13    47   827     1     111  pos
 34264    47   349    17    47   827     1      67  =
 34265    47   349    19    47   827     1     111  position
 34266    47   349    27    47   827     1      59  (
 34267    47   349    28    47   827     1      60  )
 34268    47   349    29    47   827     1     102  ;
 34269    47   350     9    47   827     1      36  int
 34270    47   350    13    47   827     1     111  lim
 34271    47   350    17    47   827     1      67  =
 34272    47   350    19    47   827     1     111  limit
 34273    47   350    24    47   827     1      59  (
 34274    47   350    25    47   827     1      60  )
 34275    47   350    26    47   827     1     102  ;
 34276    47   351     9    47   827     0     111  assert
 34277    47   351    16    47   827     0      59  (
 34278    47   351    17    47   827     0     111  pos
 34279    47   351    21    47   827     0      92  <=
 34280    47   351    24    47   827     0     111  lim
 34281    47   351    27    47   827     0      60  )
 34282    47   351    28    47   827     0     102  ;
 34283    47   352     9    47   827     0      36  int
 34284    47   352    13    47   827     0     111  rem
 34285    47   352    17    47   827     0      67  =
 34286    47   352    19    47   827     0      59  (
 34287    47   352    20    47   827     0     111  pos
 34288    47   352    24    47   827     0      92  <=
 34289    47   352    27    47   827     0     111  lim
 34290    47   352    31    47   827     0      58  ?
 34291    47   352    33    47   827     0     111  lim
 34292    47   352    37    47   827     0      77  -
 34293    47   352    39    47   827     0     111  pos
 34294    47   352    43    47   827     0      65  :
 34295    47   352    45    47   827     0     112  0
 34296    47   352    46    47   827     0      60  )
 34297    47   352    47    47   827     0     102  ;
 34298    47   354     9    47   827     0     111  unsafe.copyMemory
 34299    47   354    26    47   827     0      59  (
 34300    47   354    27    47   827     0     111  ix
 34301    47   354    29    47   827     0      59  (
 34302    47   354    30    47   827     0     111  pos
 34303    47   354    33    47   827     0      60  )
 34304    47   354    34    47   827     0      66  ,
 34305    47   354    36    47   827     0     111  ix
 34306    47   354    38    47   827     0      59  (
 34307    47   354    39    47   827     0     112  0
 34308    47   354    40    47   827     0      60  )
 34309    47   354    41    47   827     0      66  ,
 34310    47   354    43    47   827     0     111  rem
 34311    47   354    47    47   827     0      90  <<
 34312    47   354    50    47   827     0     112  2
 34313    47   354    51    47   827     0      60  )
 34314    47   354    52    47   827     0     102  ;
 34315    47   355     9    47   827     0     111  position
 34316    47   355    17    47   827     0      59  (
 34317    47   355    18    47   827     0     111  rem
 34318    47   355    21    47   827     0      60  )
 34319    47   355    22    47   827     0     102  ;
 34320    47   356     9    47   827     0     111  limit
 34321    47   356    14    47   827     0      59  (
 34322    47   356    15    47   827     0     111  capacity
 34323    47   356    23    47   827     0      59  (
 34324    47   356    24    47   827     0      60  )
 34325    47   356    25    47   827     0      60  )
 34326    47   356    26    47   827     0     102  ;
 34327    47   357     9    47   827     0     111  clearMark
 34328    47   357    18    47   827     0      59  (
 34329    47   357    19    47   827     0      60  )
 34330    47   357    20    47   827     0     102  ;
 34331    47   358     9    47   827     0      19  return
 34332    47   358    16    47   827     0      44  this
 34333    47   358    20    47   827     1     102  ;
 34334    47   362     5    47   827     1      64  }
 34335    47   362     5    47   827     0    1966  ENDMETHOD
 34336    47   362     5    47   828     0    1967  STARTMETHOD
 34337    47   364    12    47   828     0      39  boolean
 34338    47   364    20    47   828     0     111  isDirect
 34339    47   364    28    47   828     0      59  (
 34340    47   364    29    47   828     0      60  )
 34341    47   364    31    47   828     0      63  {
 34342    47   365     9    47   828     0      19  return
 34343    47   365    16    47   828     0      52  true
 34344    47   365    20    47   828     1     102  ;
 34345    47   366     5    47   828     1      64  }
 34346    47   366     5    47   828     0    1968  ENDMETHOD
 34347    47   366     5    47   829     0    1969  STARTMETHOD
 34348    47   368    12    47   829     0      39  boolean
 34349    47   368    20    47   829     0     111  isReadOnly
 34350    47   368    30    47   829     0      59  (
 34351    47   368    31    47   829     0      60  )
 34352    47   368    33    47   829     0      63  {
 34353    47   369     9    47   829     0      19  return
 34354    47   369    16    47   829     0      43  false
 34355    47   369    21    47   829     1     102  ;
 34356    47   370     5    47   829     1      64  }
 34357    47   370     5    47   829     0    1970  ENDMETHOD
 34358    47   370     5    47   830     0    1971  STARTMETHOD
 34359    47   416    12    47   830     0     111  ByteOrder
 34360    47   416    22    47   830     0     111  order
 34361    47   416    27    47   830     0      59  (
 34362    47   416    28    47   830     0      60  )
 34363    47   416    30    47   830     0      63  {
 34364    47   418     9    47   830     0      19  return
 34365    47   418    16    47   830     0      59  (
 34366    47   418    17    47   830     0      59  (
 34367    47   418    18    47   830     0     111  ByteOrder.nativeOrder
 34368    47   418    39    47   830     0      59  (
 34369    47   418    40    47   830     0      60  )
 34370    47   418    42    47   830     0      68  ==
 34371    47   418    45    47   830     0     111  ByteOrder.BIG_ENDIAN
 34372    47   418    65    47   830     0      60  )
 34373    47   419    17    47   830     0      58  ?
 34374    47   419    19    47   830     0     111  ByteOrder.LITTLE_ENDIAN
 34375    47   419    43    47   830     0      65  :
 34376    47   419    45    47   830     0     111  ByteOrder.BIG_ENDIAN
 34377    47   419    65    47   830     0      60  )
 34378    47   419    66    47   830     0     102  ;
 34379    47   425     5    47   830     0      64  }
 34380    47   425     5    47   830     0    1972  ENDMETHOD
 34381    47   452     1    47    -1     0      64  }
 34382    47   452     1    47    -1     1    1973  ENDCLASS
 34383    47   452     1    -1    -1     1    1974  ENDFILE C:\Users\RA\javasrc\java\nio\DirectIntBufferS.java
 34384    48     1     1    -1    -1     1    1975  STARTFILE C:\Users\RA\javasrc\java\nio\DirectIntBufferU.java
 34385    48    28     9    -1    -1     0     111  java.nio
 34386    48    28    17    -1    -1     0     102  ;
 34387    48    30     1    -1    -1     1      49  import
 34388    48    30     8    -1    -1     1     111  sun.misc.Cleaner
 34389    48    30    24    -1    -1     1     102  ;
 34390    48    31     1    -1    -1     1      49  import
 34391    48    31     8    -1    -1     1     111  sun.misc.Unsafe
 34392    48    31    23    -1    -1     1     102  ;
 34393    48    32     1    -1    -1     1      49  import
 34394    48    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 34395    48    32    31    -1    -1     1     102  ;
 34396    48    33     1    -1    -1     1      49  import
 34397    48    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 34398    48    33    34    -1    -1     1     102  ;
 34399    48    36     1    48    -1     0    1976  STARTCLASS
 34400    48    36     1    48    -1     0      24  class
 34401    48    36     7    48    -1     0     111  DirectIntBufferU
 34402    48    38     5    48    -1     0      38  extends
 34403    48    38    13    48    -1     0     111  IntBuffer
 34404    48    42     5    48    -1     0      17  implements
 34405    48    42    16    48    -1     0     111  DirectBuffer
 34406    48    43     1    48    -1     0      63  {
 34407    48    48     5    48    -1     0      23  protected
 34408    48    48    15    48    -1     0      45  static
 34409    48    48    28    48    -1     0     111  Unsafe
 34410    48    48    35    48    -1     0     111  unsafe
 34411    48    48    42    48    -1     0      67  =
 34412    48    48    44    48    -1     0     111  Bits.unsafe
 34413    48    48    55    48    -1     0      59  (
 34414    48    48    56    48    -1     0      60  )
 34415    48    48    57    48    -1     0     102  ;
 34416    48    51     5    48    -1     0      23  protected
 34417    48    51    15    48    -1     0      45  static
 34418    48    51    28    48    -1     0      39  boolean
 34419    48    51    36    48    -1     0     111  unaligned
 34420    48    51    46    48    -1     0      67  =
 34421    48    51    48    48    -1     0     111  Bits.unaligned
 34422    48    51    62    48    -1     0      59  (
 34423    48    51    63    48    -1     0      60  )
 34424    48    51    64    48    -1     0     102  ;
 34425    48    59     5    48    -1     0      23  protected
 34426    48    59    15    48    -1     0     111  Object
 34427    48    59    22    48    -1     0     111  viewedBuffer
 34428    48    59    35    48    -1     0      67  =
 34429    48    59    37    48    -1     0      21  null
 34430    48    59    41    48    -1     0     102  ;
 34431    48    59    41    48   831     0    1977  STARTMETHOD
 34432    48    61    12    48   831     0     111  Object
 34433    48    61    19    48   831     0     111  viewedBuffer
 34434    48    61    31    48   831     0      59  (
 34435    48    61    32    48   831     0      60  )
 34436    48    61    34    48   831     0      63  {
 34437    48    62     9    48   831     0      19  return
 34438    48    62    16    48   831     0     111  viewedBuffer
 34439    48    62    28    48   831     0     102  ;
 34440    48    63     5    48   831     0      64  }
 34441    48    63     5    48   831     0    1978  ENDMETHOD
 34442    48    63     5    48   832     0    1979  STARTMETHOD
 34443    48   100    12    48   832     0     111  Cleaner
 34444    48   100    20    48   832     0     111  cleaner
 34445    48   100    27    48   832     0      59  (
 34446    48   100    28    48   832     0      60  )
 34447    48   100    30    48   832     0      63  {
 34448    48   100    32    48   832     0      19  return
 34449    48   100    39    48   832     0      21  null
 34450    48   100    43    48   832     0     102  ;
 34451    48   100    45    48   832     0      64  }
 34452    48   100    45    48   832     0    1980  ENDMETHOD
 34453    48   100    45    48   833     0    1981  STARTMETHOD
 34454    48   164     5    48   833     0     111  DirectIntBufferU
 34455    48   164    21    48   833     0      59  (
 34456    48   164    22    48   833     0     111  DirectBuffer
 34457    48   164    35    48   833     0     111  db
 34458    48   164    37    48   833     0      66  ,
 34459    48   165    32    48   833     0      36  int
 34460    48   165    36    48   833     0     111  mark
 34461    48   165    40    48   833     0      66  ,
 34462    48   165    42    48   833     0      36  int
 34463    48   165    46    48   833     0     111  pos
 34464    48   165    49    48   833     0      66  ,
 34465    48   165    51    48   833     0      36  int
 34466    48   165    55    48   833     0     111  lim
 34467    48   165    58    48   833     0      66  ,
 34468    48   165    60    48   833     0      36  int
 34469    48   165    64    48   833     0     111  cap
 34470    48   165    67    48   833     0      66  ,
 34471    48   166    32    48   833     0      36  int
 34472    48   166    36    48   833     0     111  off
 34473    48   166    39    48   833     0      60  )
 34474    48   167     5    48   833     0      63  {
 34475    48   169     9    48   833     0      27  super
 34476    48   169    14    48   833     0      59  (
 34477    48   169    15    48   833     0     111  mark
 34478    48   169    19    48   833     0      66  ,
 34479    48   169    21    48   833     0     111  pos
 34480    48   169    24    48   833     0      66  ,
 34481    48   169    26    48   833     0     111  lim
 34482    48   169    29    48   833     0      66  ,
 34483    48   169    31    48   833     0     111  cap
 34484    48   169    34    48   833     0      60  )
 34485    48   169    35    48   833     0     102  ;
 34486    48   170     9    48   833     0     111  address
 34487    48   170    17    48   833     0      67  =
 34488    48   170    19    48   833     0     111  db.address
 34489    48   170    29    48   833     0      59  (
 34490    48   170    30    48   833     0      60  )
 34491    48   170    32    48   833     0      74  +
 34492    48   170    34    48   833     0     111  off
 34493    48   170    37    48   833     0     102  ;
 34494    48   171     9    48   833     0     111  viewedBuffer
 34495    48   171    22    48   833     0      67  =
 34496    48   171    24    48   833     0     111  db
 34497    48   171    26    48   833     0     102  ;
 34498    48   178     5    48   833     0      64  }
 34499    48   178     5    48   833     0    1982  ENDMETHOD
 34500    48   178     5    48   834     0    1983  STARTMETHOD
 34501    48   180    12    48   834     0     111  IntBuffer
 34502    48   180    22    48   834     0     111  slice
 34503    48   180    27    48   834     0      59  (
 34504    48   180    28    48   834     0      60  )
 34505    48   180    30    48   834     0      63  {
 34506    48   181     9    48   834     1      36  int
 34507    48   181    13    48   834     1     111  pos
 34508    48   181    17    48   834     1      67  =
 34509    48   181    19    48   834     1     111  this.position
 34510    48   181    32    48   834     1      59  (
 34511    48   181    33    48   834     1      60  )
 34512    48   181    34    48   834     1     102  ;
 34513    48   182     9    48   834     1      36  int
 34514    48   182    13    48   834     1     111  lim
 34515    48   182    17    48   834     1      67  =
 34516    48   182    19    48   834     1     111  this.limit
 34517    48   182    29    48   834     1      59  (
 34518    48   182    30    48   834     1      60  )
 34519    48   182    31    48   834     1     102  ;
 34520    48   183     9    48   834     0     111  assert
 34521    48   183    16    48   834     0      59  (
 34522    48   183    17    48   834     0     111  pos
 34523    48   183    21    48   834     0      92  <=
 34524    48   183    24    48   834     0     111  lim
 34525    48   183    27    48   834     0      60  )
 34526    48   183    28    48   834     0     102  ;
 34527    48   184     9    48   834     0      36  int
 34528    48   184    13    48   834     0     111  rem
 34529    48   184    17    48   834     0      67  =
 34530    48   184    19    48   834     0      59  (
 34531    48   184    20    48   834     0     111  pos
 34532    48   184    24    48   834     0      92  <=
 34533    48   184    27    48   834     0     111  lim
 34534    48   184    31    48   834     0      58  ?
 34535    48   184    33    48   834     0     111  lim
 34536    48   184    37    48   834     0      77  -
 34537    48   184    39    48   834     0     111  pos
 34538    48   184    43    48   834     0      65  :
 34539    48   184    45    48   834     0     112  0
 34540    48   184    46    48   834     0      60  )
 34541    48   184    47    48   834     0     102  ;
 34542    48   185     9    48   834     0      36  int
 34543    48   185    13    48   834     0     111  off
 34544    48   185    17    48   834     0      67  =
 34545    48   185    19    48   834     0      59  (
 34546    48   185    20    48   834     0     111  pos
 34547    48   185    24    48   834     0      90  <<
 34548    48   185    27    48   834     0     112  2
 34549    48   185    28    48   834     0      60  )
 34550    48   185    29    48   834     0     102  ;
 34551    48   186     9    48   834     0     111  assert
 34552    48   186    16    48   834     0      59  (
 34553    48   186    17    48   834     0     111  off
 34554    48   186    21    48   834     0      88  >=
 34555    48   186    24    48   834     0     112  0
 34556    48   186    25    48   834     0      60  )
 34557    48   186    26    48   834     0     102  ;
 34558    48   187     9    48   834     0      19  return
 34559    48   187    20    48   834     0     111  DirectIntBufferU
 34560    48   187    36    48   834     0      59  (
 34561    48   187    37    48   834     0      44  this
 34562    48   187    41    48   834     0      66  ,
 34563    48   187    43    48   834     0      77  -
 34564    48   187    44    48   834     0     112  1
 34565    48   187    45    48   834     0      66  ,
 34566    48   187    47    48   834     0     112  0
 34567    48   187    48    48   834     0      66  ,
 34568    48   187    50    48   834     0     111  rem
 34569    48   187    53    48   834     0      66  ,
 34570    48   187    55    48   834     0     111  rem
 34571    48   187    58    48   834     0      66  ,
 34572    48   187    60    48   834     0     111  off
 34573    48   187    63    48   834     0      60  )
 34574    48   187    64    48   834     0     102  ;
 34575    48   188     5    48   834     0      64  }
 34576    48   188     5    48   834     0    1984  ENDMETHOD
 34577    48   188     5    48   835     0    1985  STARTMETHOD
 34578    48   190    12    48   835     0     111  IntBuffer
 34579    48   190    22    48   835     0     111  duplicate
 34580    48   190    31    48   835     0      59  (
 34581    48   190    32    48   835     0      60  )
 34582    48   190    34    48   835     0      63  {
 34583    48   191     9    48   835     0      19  return
 34584    48   191    20    48   835     0     111  DirectIntBufferU
 34585    48   191    36    48   835     0      59  (
 34586    48   191    37    48   835     0      44  this
 34587    48   191    41    48   835     0      66  ,
 34588    48   192    47    48   835     1     111  this.markValue
 34589    48   192    61    48   835     1      59  (
 34590    48   192    62    48   835     1      60  )
 34591    48   192    63    48   835     1      66  ,
 34592    48   193    47    48   835     1     111  this.position
 34593    48   193    60    48   835     1      59  (
 34594    48   193    61    48   835     1      60  )
 34595    48   193    62    48   835     1      66  ,
 34596    48   194    47    48   835     1     111  this.limit
 34597    48   194    57    48   835     1      59  (
 34598    48   194    58    48   835     1      60  )
 34599    48   194    59    48   835     1      66  ,
 34600    48   195    47    48   835     1     111  this.capacity
 34601    48   195    60    48   835     1      59  (
 34602    48   195    61    48   835     1      60  )
 34603    48   195    62    48   835     1      66  ,
 34604    48   196    47    48   835     0     112  0
 34605    48   196    48    48   835     0      60  )
 34606    48   196    49    48   835     0     102  ;
 34607    48   197     5    48   835     0      64  }
 34608    48   197     5    48   835     0    1986  ENDMETHOD
 34609    48   197     5    48   836     0    1987  STARTMETHOD
 34610    48   199    12    48   836     0     111  IntBuffer
 34611    48   199    22    48   836     0     111  asReadOnlyBuffer
 34612    48   199    38    48   836     0      59  (
 34613    48   199    39    48   836     0      60  )
 34614    48   199    41    48   836     0      63  {
 34615    48   201     9    48   836     0      19  return
 34616    48   201    20    48   836     0     111  DirectIntBufferRU
 34617    48   201    37    48   836     0      59  (
 34618    48   201    38    48   836     0      44  this
 34619    48   201    42    48   836     0      66  ,
 34620    48   202    44    48   836     1     111  this.markValue
 34621    48   202    58    48   836     1      59  (
 34622    48   202    59    48   836     1      60  )
 34623    48   202    60    48   836     1      66  ,
 34624    48   203    44    48   836     1     111  this.position
 34625    48   203    57    48   836     1      59  (
 34626    48   203    58    48   836     1      60  )
 34627    48   203    59    48   836     1      66  ,
 34628    48   204    44    48   836     1     111  this.limit
 34629    48   204    54    48   836     1      59  (
 34630    48   204    55    48   836     1      60  )
 34631    48   204    56    48   836     1      66  ,
 34632    48   205    44    48   836     1     111  this.capacity
 34633    48   205    57    48   836     1      59  (
 34634    48   205    58    48   836     1      60  )
 34635    48   205    59    48   836     1      66  ,
 34636    48   206    44    48   836     0     112  0
 34637    48   206    45    48   836     0      60  )
 34638    48   206    46    48   836     0     102  ;
 34639    48   210     5    48   836     0      64  }
 34640    48   210     5    48   836     0    1988  ENDMETHOD
 34641    48   210     5    48   837     0    1989  STARTMETHOD
 34642    48   214    12    48   837     0      53  long
 34643    48   214    17    48   837     0     111  address
 34644    48   214    24    48   837     0      59  (
 34645    48   214    25    48   837     0      60  )
 34646    48   214    27    48   837     0      63  {
 34647    48   215     9    48   837     0      19  return
 34648    48   215    16    48   837     0     111  address
 34649    48   215    23    48   837     0     102  ;
 34650    48   216     5    48   837     0      64  }
 34651    48   216     5    48   837     0    1990  ENDMETHOD
 34652    48   216     5    48   838     0    1991  STARTMETHOD
 34653    48   218     5    48   838     0      41  private
 34654    48   218    13    48   838     0      53  long
 34655    48   218    18    48   838     0     111  ix
 34656    48   218    20    48   838     0      59  (
 34657    48   218    21    48   838     0      36  int
 34658    48   218    25    48   838     0     111  i
 34659    48   218    26    48   838     0      60  )
 34660    48   218    28    48   838     0      63  {
 34661    48   219     9    48   838     0      19  return
 34662    48   219    16    48   838     0     111  address
 34663    48   219    24    48   838     0      74  +
 34664    48   219    26    48   838     0      59  (
 34665    48   219    27    48   838     0     111  i
 34666    48   219    29    48   838     0      90  <<
 34667    48   219    32    48   838     0     112  2
 34668    48   219    33    48   838     0      60  )
 34669    48   219    34    48   838     0     102  ;
 34670    48   220     5    48   838     0      64  }
 34671    48   220     5    48   838     0    1992  ENDMETHOD
 34672    48   220     5    48   839     0    1993  STARTMETHOD
 34673    48   222    12    48   839     0      36  int
 34674    48   222    16    48   839     0     111  get
 34675    48   222    19    48   839     0      59  (
 34676    48   222    20    48   839     0      60  )
 34677    48   222    22    48   839     0      63  {
 34678    48   223     9    48   839     0      19  return
 34679    48   223    16    48   839     0      59  (
 34680    48   223    17    48   839     0      59  (
 34681    48   223    18    48   839     0     111  unsafe.getInt
 34682    48   223    31    48   839     0      59  (
 34683    48   223    32    48   839     0     111  ix
 34684    48   223    34    48   839     0      59  (
 34685    48   223    35    48   839     0     111  nextGetIndex
 34686    48   223    47    48   839     0      59  (
 34687    48   223    48    48   839     0      60  )
 34688    48   223    49    48   839     0      60  )
 34689    48   223    50    48   839     0      60  )
 34690    48   223    51    48   839     0      60  )
 34691    48   223    52    48   839     0      60  )
 34692    48   223    53    48   839     0     102  ;
 34693    48   224     5    48   839     0      64  }
 34694    48   224     5    48   839     0    1994  ENDMETHOD
 34695    48   224     5    48   840     0    1995  STARTMETHOD
 34696    48   226    12    48   840     0      36  int
 34697    48   226    16    48   840     0     111  get
 34698    48   226    19    48   840     0      59  (
 34699    48   226    20    48   840     0      36  int
 34700    48   226    24    48   840     0     111  i
 34701    48   226    25    48   840     0      60  )
 34702    48   226    27    48   840     0      63  {
 34703    48   227     9    48   840     0      19  return
 34704    48   227    16    48   840     0      59  (
 34705    48   227    17    48   840     0      59  (
 34706    48   227    18    48   840     0     111  unsafe.getInt
 34707    48   227    31    48   840     0      59  (
 34708    48   227    32    48   840     0     111  ix
 34709    48   227    34    48   840     0      59  (
 34710    48   227    35    48   840     0     111  checkIndex
 34711    48   227    45    48   840     0      59  (
 34712    48   227    46    48   840     0     111  i
 34713    48   227    47    48   840     0      60  )
 34714    48   227    48    48   840     0      60  )
 34715    48   227    49    48   840     0      60  )
 34716    48   227    50    48   840     0      60  )
 34717    48   227    51    48   840     0      60  )
 34718    48   227    52    48   840     0     102  ;
 34719    48   228     5    48   840     0      64  }
 34720    48   228     5    48   840     0    1996  ENDMETHOD
 34721    48   228     5    48   841     0    1997  STARTMETHOD
 34722    48   230    12    48   841     0     111  IntBuffer
 34723    48   230    22    48   841     0     111  get
 34724    48   230    25    48   841     0      59  (
 34725    48   230    26    48   841     0      36  int
 34726    48   230    29    48   841     0      61  [
 34727    48   230    30    48   841     0      62  ]
 34728    48   230    32    48   841     0     111  dst
 34729    48   230    35    48   841     0      66  ,
 34730    48   230    37    48   841     0      36  int
 34731    48   230    41    48   841     0     111  offset
 34732    48   230    47    48   841     0      66  ,
 34733    48   230    49    48   841     0      36  int
 34734    48   230    53    48   841     0     111  length
 34735    48   230    59    48   841     0      60  )
 34736    48   230    61    48   841     0      63  {
 34737    48   232     9    48   841     0      31  if
 34738    48   232    12    48   841     0      59  (
 34739    48   232    13    48   841     0      59  (
 34740    48   232    14    48   841     0     111  length
 34741    48   232    21    48   841     0      90  <<
 34742    48   232    24    48   841     0     112  2
 34743    48   232    25    48   841     0      60  )
 34744    48   232    27    48   841     0      89  >
 34745    48   232    29    48   841     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 34746    48   232    61    48   841     0      60  )
 34747    48   232    63    48   841     0      63  {
 34748    48   233    13    48   841     0     111  checkBounds
 34749    48   233    24    48   841     0      59  (
 34750    48   233    25    48   841     0     111  offset
 34751    48   233    31    48   841     0      66  ,
 34752    48   233    33    48   841     0     111  length
 34753    48   233    39    48   841     0      66  ,
 34754    48   233    41    48   841     0     111  dst.length
 34755    48   233    51    48   841     0      60  )
 34756    48   233    52    48   841     0     102  ;
 34757    48   234    13    48   841     1      36  int
 34758    48   234    17    48   841     1     111  pos
 34759    48   234    21    48   841     1      67  =
 34760    48   234    23    48   841     1     111  position
 34761    48   234    31    48   841     1      59  (
 34762    48   234    32    48   841     1      60  )
 34763    48   234    33    48   841     1     102  ;
 34764    48   235    13    48   841     1      36  int
 34765    48   235    17    48   841     1     111  lim
 34766    48   235    21    48   841     1      67  =
 34767    48   235    23    48   841     1     111  limit
 34768    48   235    28    48   841     1      59  (
 34769    48   235    29    48   841     1      60  )
 34770    48   235    30    48   841     1     102  ;
 34771    48   236    13    48   841     0     111  assert
 34772    48   236    20    48   841     0      59  (
 34773    48   236    21    48   841     0     111  pos
 34774    48   236    25    48   841     0      92  <=
 34775    48   236    28    48   841     0     111  lim
 34776    48   236    31    48   841     0      60  )
 34777    48   236    32    48   841     0     102  ;
 34778    48   237    13    48   841     0      36  int
 34779    48   237    17    48   841     0     111  rem
 34780    48   237    21    48   841     0      67  =
 34781    48   237    23    48   841     0      59  (
 34782    48   237    24    48   841     0     111  pos
 34783    48   237    28    48   841     0      92  <=
 34784    48   237    31    48   841     0     111  lim
 34785    48   237    35    48   841     0      58  ?
 34786    48   237    37    48   841     0     111  lim
 34787    48   237    41    48   841     0      77  -
 34788    48   237    43    48   841     0     111  pos
 34789    48   237    47    48   841     0      65  :
 34790    48   237    49    48   841     0     112  0
 34791    48   237    50    48   841     0      60  )
 34792    48   237    51    48   841     0     102  ;
 34793    48   238    13    48   841     0      31  if
 34794    48   238    16    48   841     0      59  (
 34795    48   238    17    48   841     0     111  length
 34796    48   238    24    48   841     0      89  >
 34797    48   238    26    48   841     0     111  rem
 34798    48   238    29    48   841     0      60  )
 34799    48   239    17    48   841     0      20  throw
 34800    48   239    27    48   841     0     111  BufferUnderflowException
 34801    48   239    51    48   841     0      59  (
 34802    48   239    52    48   841     0      60  )
 34803    48   239    53    48   841     0     102  ;
 34804    48   241    13    48   841     0      31  if
 34805    48   241    16    48   841     0      59  (
 34806    48   241    17    48   841     0     111  order
 34807    48   241    22    48   841     0      59  (
 34808    48   241    23    48   841     0      60  )
 34809    48   241    25    48   841     0      71  !=
 34810    48   241    28    48   841     0     111  ByteOrder.nativeOrder
 34811    48   241    49    48   841     0      59  (
 34812    48   241    50    48   841     0      60  )
 34813    48   241    51    48   841     0      60  )
 34814    48   242    17    48   841     0     111  Bits.copyToIntArray
 34815    48   242    36    48   841     0      59  (
 34816    48   242    37    48   841     0     111  ix
 34817    48   242    39    48   841     0      59  (
 34818    48   242    40    48   841     0     111  pos
 34819    48   242    43    48   841     0      60  )
 34820    48   242    44    48   841     0      66  ,
 34821    48   242    46    48   841     0     111  dst
 34822    48   242    49    48   841     0      66  ,
 34823    48   243    43    48   841     0     111  offset
 34824    48   243    50    48   841     0      90  <<
 34825    48   243    53    48   841     0     112  2
 34826    48   243    54    48   841     0      66  ,
 34827    48   244    43    48   841     0     111  length
 34828    48   244    50    48   841     0      90  <<
 34829    48   244    53    48   841     0     112  2
 34830    48   244    54    48   841     0      60  )
 34831    48   244    55    48   841     0     102  ;
 34832    48   245    13    48   841     0      48  else
 34833    48   246    17    48   841     0     111  Bits.copyToByteArray
 34834    48   246    37    48   841     0      59  (
 34835    48   246    38    48   841     0     111  ix
 34836    48   246    40    48   841     0      59  (
 34837    48   246    41    48   841     0     111  pos
 34838    48   246    44    48   841     0      60  )
 34839    48   246    45    48   841     0      66  ,
 34840    48   246    47    48   841     0     111  dst
 34841    48   246    50    48   841     0      66  ,
 34842    48   247    38    48   841     0     111  offset
 34843    48   247    45    48   841     0      90  <<
 34844    48   247    48    48   841     0     112  2
 34845    48   247    49    48   841     0      66  ,
 34846    48   248    38    48   841     0     111  length
 34847    48   248    45    48   841     0      90  <<
 34848    48   248    48    48   841     0     112  2
 34849    48   248    49    48   841     0      60  )
 34850    48   248    50    48   841     0     102  ;
 34851    48   249    13    48   841     0     111  position
 34852    48   249    21    48   841     0      59  (
 34853    48   249    22    48   841     0     111  pos
 34854    48   249    26    48   841     0      74  +
 34855    48   249    28    48   841     0     111  length
 34856    48   249    34    48   841     0      60  )
 34857    48   249    35    48   841     0     102  ;
 34858    48   250     9    48   841     0      64  }
 34859    48   250    11    48   841     0      48  else
 34860    48   250    16    48   841     0      63  {
 34861    48   251    13    48   841     0     111  super.get
 34862    48   251    22    48   841     0      59  (
 34863    48   251    23    48   841     0     111  dst
 34864    48   251    26    48   841     0      66  ,
 34865    48   251    28    48   841     0     111  offset
 34866    48   251    34    48   841     0      66  ,
 34867    48   251    36    48   841     0     111  length
 34868    48   251    42    48   841     0      60  )
 34869    48   251    43    48   841     0     102  ;
 34870    48   252     9    48   841     0      64  }
 34871    48   253     9    48   841     0      19  return
 34872    48   253    16    48   841     0      44  this
 34873    48   253    20    48   841     0     102  ;
 34874    48   257     5    48   841     0      64  }
 34875    48   257     5    48   841     0    1998  ENDMETHOD
 34876    48   257     5    48   842     0    1999  STARTMETHOD
 34877    48   261    12    48   842     0     111  IntBuffer
 34878    48   261    22    48   842     0     111  put
 34879    48   261    25    48   842     0      59  (
 34880    48   261    26    48   842     0      36  int
 34881    48   261    30    48   842     0     111  x
 34882    48   261    31    48   842     0      60  )
 34883    48   261    33    48   842     0      63  {
 34884    48   263     9    48   842     0     111  unsafe.putInt
 34885    48   263    22    48   842     0      59  (
 34886    48   263    23    48   842     0     111  ix
 34887    48   263    25    48   842     0      59  (
 34888    48   263    26    48   842     0     111  nextPutIndex
 34889    48   263    38    48   842     0      59  (
 34890    48   263    39    48   842     0      60  )
 34891    48   263    40    48   842     0      60  )
 34892    48   263    41    48   842     0      66  ,
 34893    48   263    43    48   842     0      59  (
 34894    48   263    44    48   842     0      59  (
 34895    48   263    45    48   842     0     111  x
 34896    48   263    46    48   842     0      60  )
 34897    48   263    47    48   842     0      60  )
 34898    48   263    48    48   842     0      60  )
 34899    48   263    49    48   842     0     102  ;
 34900    48   264     9    48   842     0      19  return
 34901    48   264    16    48   842     0      44  this
 34902    48   264    20    48   842     0     102  ;
 34903    48   268     5    48   842     0      64  }
 34904    48   268     5    48   842     0    2000  ENDMETHOD
 34905    48   268     5    48   843     0    2001  STARTMETHOD
 34906    48   270    12    48   843     0     111  IntBuffer
 34907    48   270    22    48   843     0     111  put
 34908    48   270    25    48   843     0      59  (
 34909    48   270    26    48   843     0      36  int
 34910    48   270    30    48   843     0     111  i
 34911    48   270    31    48   843     0      66  ,
 34912    48   270    33    48   843     0      36  int
 34913    48   270    37    48   843     0     111  x
 34914    48   270    38    48   843     0      60  )
 34915    48   270    40    48   843     0      63  {
 34916    48   272     9    48   843     0     111  unsafe.putInt
 34917    48   272    22    48   843     0      59  (
 34918    48   272    23    48   843     0     111  ix
 34919    48   272    25    48   843     0      59  (
 34920    48   272    26    48   843     0     111  checkIndex
 34921    48   272    36    48   843     0      59  (
 34922    48   272    37    48   843     0     111  i
 34923    48   272    38    48   843     0      60  )
 34924    48   272    39    48   843     0      60  )
 34925    48   272    40    48   843     0      66  ,
 34926    48   272    42    48   843     0      59  (
 34927    48   272    43    48   843     0      59  (
 34928    48   272    44    48   843     0     111  x
 34929    48   272    45    48   843     0      60  )
 34930    48   272    46    48   843     0      60  )
 34931    48   272    47    48   843     0      60  )
 34932    48   272    48    48   843     0     102  ;
 34933    48   273     9    48   843     0      19  return
 34934    48   273    16    48   843     0      44  this
 34935    48   273    20    48   843     0     102  ;
 34936    48   277     5    48   843     0      64  }
 34937    48   277     5    48   843     0    2002  ENDMETHOD
 34938    48   277     5    48   844     0    2003  STARTMETHOD
 34939    48   279    12    48   844     0     111  IntBuffer
 34940    48   279    22    48   844     0     111  put
 34941    48   279    25    48   844     0      59  (
 34942    48   279    26    48   844     0     111  IntBuffer
 34943    48   279    36    48   844     0     111  src
 34944    48   279    39    48   844     0      60  )
 34945    48   279    41    48   844     0      63  {
 34946    48   281     9    48   844     0      31  if
 34947    48   281    12    48   844     0      59  (
 34948    48   281    13    48   844     0     111  src
 34949    48   281    28    48   844     0     111  DirectIntBufferU
 34950    48   281    44    48   844     0      60  )
 34951    48   281    46    48   844     0      63  {
 34952    48   282    13    48   844     0      31  if
 34953    48   282    16    48   844     0      59  (
 34954    48   282    17    48   844     0     111  src
 34955    48   282    21    48   844     0      68  ==
 34956    48   282    24    48   844     0      44  this
 34957    48   282    28    48   844     0      60  )
 34958    48   283    17    48   844     0      20  throw
 34959    48   283    27    48   844     0     111  IllegalArgumentException
 34960    48   283    51    48   844     0      59  (
 34961    48   283    52    48   844     0      60  )
 34962    48   283    53    48   844     0     102  ;
 34963    48   284    13    48   844     0     111  DirectIntBufferU
 34964    48   284    30    48   844     0     111  sb
 34965    48   284    33    48   844     0      67  =
 34966    48   284    35    48   844     0      59  (
 34967    48   284    36    48   844     0     111  DirectIntBufferU
 34968    48   284    52    48   844     0      60  )
 34969    48   284    53    48   844     0     111  src
 34970    48   284    56    48   844     0     102  ;
 34971    48   286    13    48   844     1      36  int
 34972    48   286    17    48   844     1     111  spos
 34973    48   286    22    48   844     1      67  =
 34974    48   286    24    48   844     1     111  sb.position
 34975    48   286    35    48   844     1      59  (
 34976    48   286    36    48   844     1      60  )
 34977    48   286    37    48   844     1     102  ;
 34978    48   287    13    48   844     1      36  int
 34979    48   287    17    48   844     1     111  slim
 34980    48   287    22    48   844     1      67  =
 34981    48   287    24    48   844     1     111  sb.limit
 34982    48   287    32    48   844     1      59  (
 34983    48   287    33    48   844     1      60  )
 34984    48   287    34    48   844     1     102  ;
 34985    48   288    13    48   844     0     111  assert
 34986    48   288    20    48   844     0      59  (
 34987    48   288    21    48   844     0     111  spos
 34988    48   288    26    48   844     0      92  <=
 34989    48   288    29    48   844     0     111  slim
 34990    48   288    33    48   844     0      60  )
 34991    48   288    34    48   844     0     102  ;
 34992    48   289    13    48   844     0      36  int
 34993    48   289    17    48   844     0     111  srem
 34994    48   289    22    48   844     0      67  =
 34995    48   289    24    48   844     0      59  (
 34996    48   289    25    48   844     0     111  spos
 34997    48   289    30    48   844     0      92  <=
 34998    48   289    33    48   844     0     111  slim
 34999    48   289    38    48   844     0      58  ?
 35000    48   289    40    48   844     0     111  slim
 35001    48   289    45    48   844     0      77  -
 35002    48   289    47    48   844     0     111  spos
 35003    48   289    52    48   844     0      65  :
 35004    48   289    54    48   844     0     112  0
 35005    48   289    55    48   844     0      60  )
 35006    48   289    56    48   844     0     102  ;
 35007    48   291    13    48   844     1      36  int
 35008    48   291    17    48   844     1     111  pos
 35009    48   291    21    48   844     1      67  =
 35010    48   291    23    48   844     1     111  position
 35011    48   291    31    48   844     1      59  (
 35012    48   291    32    48   844     1      60  )
 35013    48   291    33    48   844     1     102  ;
 35014    48   292    13    48   844     1      36  int
 35015    48   292    17    48   844     1     111  lim
 35016    48   292    21    48   844     1      67  =
 35017    48   292    23    48   844     1     111  limit
 35018    48   292    28    48   844     1      59  (
 35019    48   292    29    48   844     1      60  )
 35020    48   292    30    48   844     1     102  ;
 35021    48   293    13    48   844     0     111  assert
 35022    48   293    20    48   844     0      59  (
 35023    48   293    21    48   844     0     111  pos
 35024    48   293    25    48   844     0      92  <=
 35025    48   293    28    48   844     0     111  lim
 35026    48   293    31    48   844     0      60  )
 35027    48   293    32    48   844     0     102  ;
 35028    48   294    13    48   844     0      36  int
 35029    48   294    17    48   844     0     111  rem
 35030    48   294    21    48   844     0      67  =
 35031    48   294    23    48   844     0      59  (
 35032    48   294    24    48   844     0     111  pos
 35033    48   294    28    48   844     0      92  <=
 35034    48   294    31    48   844     0     111  lim
 35035    48   294    35    48   844     0      58  ?
 35036    48   294    37    48   844     0     111  lim
 35037    48   294    41    48   844     0      77  -
 35038    48   294    43    48   844     0     111  pos
 35039    48   294    47    48   844     0      65  :
 35040    48   294    49    48   844     0     112  0
 35041    48   294    50    48   844     0      60  )
 35042    48   294    51    48   844     0     102  ;
 35043    48   296    13    48   844     0      31  if
 35044    48   296    16    48   844     0      59  (
 35045    48   296    17    48   844     0     111  srem
 35046    48   296    22    48   844     0      89  >
 35047    48   296    24    48   844     0     111  rem
 35048    48   296    27    48   844     0      60  )
 35049    48   297    17    48   844     0      20  throw
 35050    48   297    27    48   844     0     111  BufferOverflowException
 35051    48   297    50    48   844     0      59  (
 35052    48   297    51    48   844     0      60  )
 35053    48   297    52    48   844     0     102  ;
 35054    48   298    13    48   844     0     111  unsafe.copyMemory
 35055    48   298    30    48   844     0      59  (
 35056    48   298    31    48   844     0     111  sb.ix
 35057    48   298    36    48   844     0      59  (
 35058    48   298    37    48   844     0     111  spos
 35059    48   298    41    48   844     0      60  )
 35060    48   298    42    48   844     0      66  ,
 35061    48   298    44    48   844     0     111  ix
 35062    48   298    46    48   844     0      59  (
 35063    48   298    47    48   844     0     111  pos
 35064    48   298    50    48   844     0      60  )
 35065    48   298    51    48   844     0      66  ,
 35066    48   298    53    48   844     0     111  srem
 35067    48   298    58    48   844     0      90  <<
 35068    48   298    61    48   844     0     112  2
 35069    48   298    62    48   844     0      60  )
 35070    48   298    63    48   844     0     102  ;
 35071    48   299    13    48   844     1     111  sb.position
 35072    48   299    24    48   844     1      59  (
 35073    48   299    25    48   844     1     111  spos
 35074    48   299    30    48   844     1      74  +
 35075    48   299    32    48   844     1     111  srem
 35076    48   299    36    48   844     1      60  )
 35077    48   299    37    48   844     1     102  ;
 35078    48   300    13    48   844     1     111  position
 35079    48   300    21    48   844     1      59  (
 35080    48   300    22    48   844     1     111  pos
 35081    48   300    26    48   844     1      74  +
 35082    48   300    28    48   844     1     111  srem
 35083    48   300    32    48   844     1      60  )
 35084    48   300    33    48   844     1     102  ;
 35085    48   301     9    48   844     0      64  }
 35086    48   301    11    48   844     0      48  else
 35087    48   301    16    48   844     0      31  if
 35088    48   301    19    48   844     0      59  (
 35089    48   301    20    48   844     0     111  src.hb
 35090    48   301    27    48   844     0      71  !=
 35091    48   301    30    48   844     0      21  null
 35092    48   301    34    48   844     0      60  )
 35093    48   301    36    48   844     0      63  {
 35094    48   303    13    48   844     1      36  int
 35095    48   303    17    48   844     1     111  spos
 35096    48   303    22    48   844     1      67  =
 35097    48   303    24    48   844     1     111  src.position
 35098    48   303    36    48   844     1      59  (
 35099    48   303    37    48   844     1      60  )
 35100    48   303    38    48   844     1     102  ;
 35101    48   304    13    48   844     1      36  int
 35102    48   304    17    48   844     1     111  slim
 35103    48   304    22    48   844     1      67  =
 35104    48   304    24    48   844     1     111  src.limit
 35105    48   304    33    48   844     1      59  (
 35106    48   304    34    48   844     1      60  )
 35107    48   304    35    48   844     1     102  ;
 35108    48   305    13    48   844     0     111  assert
 35109    48   305    20    48   844     0      59  (
 35110    48   305    21    48   844     0     111  spos
 35111    48   305    26    48   844     0      92  <=
 35112    48   305    29    48   844     0     111  slim
 35113    48   305    33    48   844     0      60  )
 35114    48   305    34    48   844     0     102  ;
 35115    48   306    13    48   844     0      36  int
 35116    48   306    17    48   844     0     111  srem
 35117    48   306    22    48   844     0      67  =
 35118    48   306    24    48   844     0      59  (
 35119    48   306    25    48   844     0     111  spos
 35120    48   306    30    48   844     0      92  <=
 35121    48   306    33    48   844     0     111  slim
 35122    48   306    38    48   844     0      58  ?
 35123    48   306    40    48   844     0     111  slim
 35124    48   306    45    48   844     0      77  -
 35125    48   306    47    48   844     0     111  spos
 35126    48   306    52    48   844     0      65  :
 35127    48   306    54    48   844     0     112  0
 35128    48   306    55    48   844     0      60  )
 35129    48   306    56    48   844     0     102  ;
 35130    48   308    13    48   844     0     111  put
 35131    48   308    16    48   844     0      59  (
 35132    48   308    17    48   844     0     111  src.hb
 35133    48   308    23    48   844     0      66  ,
 35134    48   308    25    48   844     0     111  src.offset
 35135    48   308    36    48   844     0      74  +
 35136    48   308    38    48   844     0     111  spos
 35137    48   308    42    48   844     0      66  ,
 35138    48   308    44    48   844     0     111  srem
 35139    48   308    48    48   844     0      60  )
 35140    48   308    49    48   844     0     102  ;
 35141    48   309    13    48   844     0     111  src.position
 35142    48   309    25    48   844     0      59  (
 35143    48   309    26    48   844     0     111  spos
 35144    48   309    31    48   844     0      74  +
 35145    48   309    33    48   844     0     111  srem
 35146    48   309    37    48   844     0      60  )
 35147    48   309    38    48   844     0     102  ;
 35148    48   311     9    48   844     0      64  }
 35149    48   311    11    48   844     0      48  else
 35150    48   311    16    48   844     0      63  {
 35151    48   312    13    48   844     0     111  super.put
 35152    48   312    22    48   844     0      59  (
 35153    48   312    23    48   844     0     111  src
 35154    48   312    26    48   844     0      60  )
 35155    48   312    27    48   844     0     102  ;
 35156    48   313     9    48   844     0      64  }
 35157    48   314     9    48   844     0      19  return
 35158    48   314    16    48   844     0      44  this
 35159    48   314    20    48   844     0     102  ;
 35160    48   318     5    48   844     0      64  }
 35161    48   318     5    48   844     0    2004  ENDMETHOD
 35162    48   318     5    48   845     0    2005  STARTMETHOD
 35163    48   320    12    48   845     0     111  IntBuffer
 35164    48   320    22    48   845     0     111  put
 35165    48   320    25    48   845     0      59  (
 35166    48   320    26    48   845     0      36  int
 35167    48   320    29    48   845     0      61  [
 35168    48   320    30    48   845     0      62  ]
 35169    48   320    32    48   845     0     111  src
 35170    48   320    35    48   845     0      66  ,
 35171    48   320    37    48   845     0      36  int
 35172    48   320    41    48   845     0     111  offset
 35173    48   320    47    48   845     0      66  ,
 35174    48   320    49    48   845     0      36  int
 35175    48   320    53    48   845     0     111  length
 35176    48   320    59    48   845     0      60  )
 35177    48   320    61    48   845     0      63  {
 35178    48   322     9    48   845     0      31  if
 35179    48   322    12    48   845     0      59  (
 35180    48   322    13    48   845     0      59  (
 35181    48   322    14    48   845     0     111  length
 35182    48   322    21    48   845     0      90  <<
 35183    48   322    24    48   845     0     112  2
 35184    48   322    25    48   845     0      60  )
 35185    48   322    27    48   845     0      89  >
 35186    48   322    29    48   845     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 35187    48   322    63    48   845     0      60  )
 35188    48   322    65    48   845     0      63  {
 35189    48   323    13    48   845     0     111  checkBounds
 35190    48   323    24    48   845     0      59  (
 35191    48   323    25    48   845     0     111  offset
 35192    48   323    31    48   845     0      66  ,
 35193    48   323    33    48   845     0     111  length
 35194    48   323    39    48   845     0      66  ,
 35195    48   323    41    48   845     0     111  src.length
 35196    48   323    51    48   845     0      60  )
 35197    48   323    52    48   845     0     102  ;
 35198    48   324    13    48   845     1      36  int
 35199    48   324    17    48   845     1     111  pos
 35200    48   324    21    48   845     1      67  =
 35201    48   324    23    48   845     1     111  position
 35202    48   324    31    48   845     1      59  (
 35203    48   324    32    48   845     1      60  )
 35204    48   324    33    48   845     1     102  ;
 35205    48   325    13    48   845     1      36  int
 35206    48   325    17    48   845     1     111  lim
 35207    48   325    21    48   845     1      67  =
 35208    48   325    23    48   845     1     111  limit
 35209    48   325    28    48   845     1      59  (
 35210    48   325    29    48   845     1      60  )
 35211    48   325    30    48   845     1     102  ;
 35212    48   326    13    48   845     0     111  assert
 35213    48   326    20    48   845     0      59  (
 35214    48   326    21    48   845     0     111  pos
 35215    48   326    25    48   845     0      92  <=
 35216    48   326    28    48   845     0     111  lim
 35217    48   326    31    48   845     0      60  )
 35218    48   326    32    48   845     0     102  ;
 35219    48   327    13    48   845     0      36  int
 35220    48   327    17    48   845     0     111  rem
 35221    48   327    21    48   845     0      67  =
 35222    48   327    23    48   845     0      59  (
 35223    48   327    24    48   845     0     111  pos
 35224    48   327    28    48   845     0      92  <=
 35225    48   327    31    48   845     0     111  lim
 35226    48   327    35    48   845     0      58  ?
 35227    48   327    37    48   845     0     111  lim
 35228    48   327    41    48   845     0      77  -
 35229    48   327    43    48   845     0     111  pos
 35230    48   327    47    48   845     0      65  :
 35231    48   327    49    48   845     0     112  0
 35232    48   327    50    48   845     0      60  )
 35233    48   327    51    48   845     0     102  ;
 35234    48   328    13    48   845     0      31  if
 35235    48   328    16    48   845     0      59  (
 35236    48   328    17    48   845     0     111  length
 35237    48   328    24    48   845     0      89  >
 35238    48   328    26    48   845     0     111  rem
 35239    48   328    29    48   845     0      60  )
 35240    48   329    17    48   845     0      20  throw
 35241    48   329    27    48   845     0     111  BufferOverflowException
 35242    48   329    50    48   845     0      59  (
 35243    48   329    51    48   845     0      60  )
 35244    48   329    52    48   845     0     102  ;
 35245    48   331    13    48   845     0      31  if
 35246    48   331    16    48   845     0      59  (
 35247    48   331    17    48   845     0     111  order
 35248    48   331    22    48   845     0      59  (
 35249    48   331    23    48   845     0      60  )
 35250    48   331    25    48   845     0      71  !=
 35251    48   331    28    48   845     0     111  ByteOrder.nativeOrder
 35252    48   331    49    48   845     0      59  (
 35253    48   331    50    48   845     0      60  )
 35254    48   331    51    48   845     0      60  )
 35255    48   332    17    48   845     0     111  Bits.copyFromIntArray
 35256    48   332    38    48   845     0      59  (
 35257    48   332    39    48   845     0     111  src
 35258    48   332    42    48   845     0      66  ,
 35259    48   332    44    48   845     0     111  offset
 35260    48   332    51    48   845     0      90  <<
 35261    48   332    54    48   845     0     112  2
 35262    48   332    55    48   845     0      66  ,
 35263    48   333    45    48   845     0     111  ix
 35264    48   333    47    48   845     0      59  (
 35265    48   333    48    48   845     0     111  pos
 35266    48   333    51    48   845     0      60  )
 35267    48   333    52    48   845     0      66  ,
 35268    48   333    54    48   845     0     111  length
 35269    48   333    61    48   845     0      90  <<
 35270    48   333    64    48   845     0     112  2
 35271    48   333    65    48   845     0      60  )
 35272    48   333    66    48   845     0     102  ;
 35273    48   334    13    48   845     0      48  else
 35274    48   335    17    48   845     0     111  Bits.copyFromByteArray
 35275    48   335    39    48   845     0      59  (
 35276    48   335    40    48   845     0     111  src
 35277    48   335    43    48   845     0      66  ,
 35278    48   335    45    48   845     0     111  offset
 35279    48   335    52    48   845     0      90  <<
 35280    48   335    55    48   845     0     112  2
 35281    48   335    56    48   845     0      66  ,
 35282    48   336    40    48   845     0     111  ix
 35283    48   336    42    48   845     0      59  (
 35284    48   336    43    48   845     0     111  pos
 35285    48   336    46    48   845     0      60  )
 35286    48   336    47    48   845     0      66  ,
 35287    48   336    49    48   845     0     111  length
 35288    48   336    56    48   845     0      90  <<
 35289    48   336    59    48   845     0     112  2
 35290    48   336    60    48   845     0      60  )
 35291    48   336    61    48   845     0     102  ;
 35292    48   337    13    48   845     0     111  position
 35293    48   337    21    48   845     0      59  (
 35294    48   337    22    48   845     0     111  pos
 35295    48   337    26    48   845     0      74  +
 35296    48   337    28    48   845     0     111  length
 35297    48   337    34    48   845     0      60  )
 35298    48   337    35    48   845     0     102  ;
 35299    48   338     9    48   845     0      64  }
 35300    48   338    11    48   845     0      48  else
 35301    48   338    16    48   845     0      63  {
 35302    48   339    13    48   845     0     111  super.put
 35303    48   339    22    48   845     0      59  (
 35304    48   339    23    48   845     0     111  src
 35305    48   339    26    48   845     0      66  ,
 35306    48   339    28    48   845     0     111  offset
 35307    48   339    34    48   845     0      66  ,
 35308    48   339    36    48   845     0     111  length
 35309    48   339    42    48   845     0      60  )
 35310    48   339    43    48   845     0     102  ;
 35311    48   340     9    48   845     0      64  }
 35312    48   341     9    48   845     0      19  return
 35313    48   341    16    48   845     0      44  this
 35314    48   341    20    48   845     0     102  ;
 35315    48   345     5    48   845     0      64  }
 35316    48   345     5    48   845     0    2006  ENDMETHOD
 35317    48   345     5    48   846     0    2007  STARTMETHOD
 35318    48   347    12    48   846     0     111  IntBuffer
 35319    48   347    22    48   846     0     111  compact
 35320    48   347    29    48   846     0      59  (
 35321    48   347    30    48   846     0      60  )
 35322    48   347    32    48   846     0      63  {
 35323    48   349     9    48   846     1      36  int
 35324    48   349    13    48   846     1     111  pos
 35325    48   349    17    48   846     1      67  =
 35326    48   349    19    48   846     1     111  position
 35327    48   349    27    48   846     1      59  (
 35328    48   349    28    48   846     1      60  )
 35329    48   349    29    48   846     1     102  ;
 35330    48   350     9    48   846     1      36  int
 35331    48   350    13    48   846     1     111  lim
 35332    48   350    17    48   846     1      67  =
 35333    48   350    19    48   846     1     111  limit
 35334    48   350    24    48   846     1      59  (
 35335    48   350    25    48   846     1      60  )
 35336    48   350    26    48   846     1     102  ;
 35337    48   351     9    48   846     0     111  assert
 35338    48   351    16    48   846     0      59  (
 35339    48   351    17    48   846     0     111  pos
 35340    48   351    21    48   846     0      92  <=
 35341    48   351    24    48   846     0     111  lim
 35342    48   351    27    48   846     0      60  )
 35343    48   351    28    48   846     0     102  ;
 35344    48   352     9    48   846     0      36  int
 35345    48   352    13    48   846     0     111  rem
 35346    48   352    17    48   846     0      67  =
 35347    48   352    19    48   846     0      59  (
 35348    48   352    20    48   846     0     111  pos
 35349    48   352    24    48   846     0      92  <=
 35350    48   352    27    48   846     0     111  lim
 35351    48   352    31    48   846     0      58  ?
 35352    48   352    33    48   846     0     111  lim
 35353    48   352    37    48   846     0      77  -
 35354    48   352    39    48   846     0     111  pos
 35355    48   352    43    48   846     0      65  :
 35356    48   352    45    48   846     0     112  0
 35357    48   352    46    48   846     0      60  )
 35358    48   352    47    48   846     0     102  ;
 35359    48   354     9    48   846     0     111  unsafe.copyMemory
 35360    48   354    26    48   846     0      59  (
 35361    48   354    27    48   846     0     111  ix
 35362    48   354    29    48   846     0      59  (
 35363    48   354    30    48   846     0     111  pos
 35364    48   354    33    48   846     0      60  )
 35365    48   354    34    48   846     0      66  ,
 35366    48   354    36    48   846     0     111  ix
 35367    48   354    38    48   846     0      59  (
 35368    48   354    39    48   846     0     112  0
 35369    48   354    40    48   846     0      60  )
 35370    48   354    41    48   846     0      66  ,
 35371    48   354    43    48   846     0     111  rem
 35372    48   354    47    48   846     0      90  <<
 35373    48   354    50    48   846     0     112  2
 35374    48   354    51    48   846     0      60  )
 35375    48   354    52    48   846     0     102  ;
 35376    48   355     9    48   846     0     111  position
 35377    48   355    17    48   846     0      59  (
 35378    48   355    18    48   846     0     111  rem
 35379    48   355    21    48   846     0      60  )
 35380    48   355    22    48   846     0     102  ;
 35381    48   356     9    48   846     0     111  limit
 35382    48   356    14    48   846     0      59  (
 35383    48   356    15    48   846     0     111  capacity
 35384    48   356    23    48   846     0      59  (
 35385    48   356    24    48   846     0      60  )
 35386    48   356    25    48   846     0      60  )
 35387    48   356    26    48   846     0     102  ;
 35388    48   357     9    48   846     0     111  clearMark
 35389    48   357    18    48   846     0      59  (
 35390    48   357    19    48   846     0      60  )
 35391    48   357    20    48   846     0     102  ;
 35392    48   358     9    48   846     0      19  return
 35393    48   358    16    48   846     0      44  this
 35394    48   358    20    48   846     1     102  ;
 35395    48   362     5    48   846     1      64  }
 35396    48   362     5    48   846     0    2008  ENDMETHOD
 35397    48   362     5    48   847     0    2009  STARTMETHOD
 35398    48   364    12    48   847     0      39  boolean
 35399    48   364    20    48   847     0     111  isDirect
 35400    48   364    28    48   847     0      59  (
 35401    48   364    29    48   847     0      60  )
 35402    48   364    31    48   847     0      63  {
 35403    48   365     9    48   847     0      19  return
 35404    48   365    16    48   847     0      52  true
 35405    48   365    20    48   847     1     102  ;
 35406    48   366     5    48   847     1      64  }
 35407    48   366     5    48   847     0    2010  ENDMETHOD
 35408    48   366     5    48   848     0    2011  STARTMETHOD
 35409    48   368    12    48   848     0      39  boolean
 35410    48   368    20    48   848     0     111  isReadOnly
 35411    48   368    30    48   848     0      59  (
 35412    48   368    31    48   848     0      60  )
 35413    48   368    33    48   848     0      63  {
 35414    48   369     9    48   848     0      19  return
 35415    48   369    16    48   848     0      43  false
 35416    48   369    21    48   848     1     102  ;
 35417    48   370     5    48   848     1      64  }
 35418    48   370     5    48   848     0    2012  ENDMETHOD
 35419    48   370     5    48   849     0    2013  STARTMETHOD
 35420    48   416    12    48   849     0     111  ByteOrder
 35421    48   416    22    48   849     0     111  order
 35422    48   416    27    48   849     0      59  (
 35423    48   416    28    48   849     0      60  )
 35424    48   416    30    48   849     0      63  {
 35425    48   422     9    48   849     0      19  return
 35426    48   422    16    48   849     0      59  (
 35427    48   422    17    48   849     0      59  (
 35428    48   422    18    48   849     0     111  ByteOrder.nativeOrder
 35429    48   422    39    48   849     0      59  (
 35430    48   422    40    48   849     0      60  )
 35431    48   422    42    48   849     0      71  !=
 35432    48   422    45    48   849     0     111  ByteOrder.BIG_ENDIAN
 35433    48   422    65    48   849     0      60  )
 35434    48   423    17    48   849     0      58  ?
 35435    48   423    19    48   849     0     111  ByteOrder.LITTLE_ENDIAN
 35436    48   423    43    48   849     0      65  :
 35437    48   423    45    48   849     0     111  ByteOrder.BIG_ENDIAN
 35438    48   423    65    48   849     0      60  )
 35439    48   423    66    48   849     0     102  ;
 35440    48   425     5    48   849     0      64  }
 35441    48   425     5    48   849     0    2014  ENDMETHOD
 35442    48   452     1    48    -1     0      64  }
 35443    48   452     1    48    -1     1    2015  ENDCLASS
 35444    48   452     1    -1    -1     1    2016  ENDFILE C:\Users\RA\javasrc\java\nio\DirectIntBufferU.java
 35445    49     1     1    -1    -1     1    2017  STARTFILE C:\Users\RA\javasrc\java\nio\DirectLongBufferRS.java
 35446    49    28     9    -1    -1     0     111  java.nio
 35447    49    28    17    -1    -1     0     102  ;
 35448    49    30     1    -1    -1     1      49  import
 35449    49    30     8    -1    -1     1     111  sun.misc.Cleaner
 35450    49    30    24    -1    -1     1     102  ;
 35451    49    31     1    -1    -1     1      49  import
 35452    49    31     8    -1    -1     1     111  sun.misc.Unsafe
 35453    49    31    23    -1    -1     1     102  ;
 35454    49    32     1    -1    -1     1      49  import
 35455    49    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 35456    49    32    31    -1    -1     1     102  ;
 35457    49    33     1    -1    -1     1      49  import
 35458    49    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 35459    49    33    34    -1    -1     1     102  ;
 35460    49    36     1    49    -1     0    2018  STARTCLASS
 35461    49    36     1    49    -1     0      24  class
 35462    49    36     7    49    -1     0     111  DirectLongBufferRS
 35463    49    40     5    49    -1     0      38  extends
 35464    49    40    13    49    -1     0     111  DirectLongBufferS
 35465    49    42     5    49    -1     0      17  implements
 35466    49    42    16    49    -1     0     111  DirectBuffer
 35467    49    43     1    49    -1     0      63  {
 35468    49    43     1    49   850     0    2019  STARTMETHOD
 35469    49   164     5    49   850     0     111  DirectLongBufferRS
 35470    49   164    23    49   850     0      59  (
 35471    49   164    24    49   850     0     111  DirectBuffer
 35472    49   164    37    49   850     0     111  db
 35473    49   164    39    49   850     0      66  ,
 35474    49   165    32    49   850     0      36  int
 35475    49   165    36    49   850     0     111  mark
 35476    49   165    40    49   850     0      66  ,
 35477    49   165    42    49   850     0      36  int
 35478    49   165    46    49   850     0     111  pos
 35479    49   165    49    49   850     0      66  ,
 35480    49   165    51    49   850     0      36  int
 35481    49   165    55    49   850     0     111  lim
 35482    49   165    58    49   850     0      66  ,
 35483    49   165    60    49   850     0      36  int
 35484    49   165    64    49   850     0     111  cap
 35485    49   165    67    49   850     0      66  ,
 35486    49   166    32    49   850     0      36  int
 35487    49   166    36    49   850     0     111  off
 35488    49   166    39    49   850     0      60  )
 35489    49   167     5    49   850     0      63  {
 35490    49   176     9    49   850     0      27  super
 35491    49   176    14    49   850     0      59  (
 35492    49   176    15    49   850     0     111  db
 35493    49   176    17    49   850     0      66  ,
 35494    49   176    19    49   850     0     111  mark
 35495    49   176    23    49   850     0      66  ,
 35496    49   176    25    49   850     0     111  pos
 35497    49   176    28    49   850     0      66  ,
 35498    49   176    30    49   850     0     111  lim
 35499    49   176    33    49   850     0      66  ,
 35500    49   176    35    49   850     0     111  cap
 35501    49   176    38    49   850     0      66  ,
 35502    49   176    40    49   850     0     111  off
 35503    49   176    43    49   850     0      60  )
 35504    49   176    44    49   850     0     102  ;
 35505    49   178     5    49   850     0      64  }
 35506    49   178     5    49   850     0    2020  ENDMETHOD
 35507    49   178     5    49   851     0    2021  STARTMETHOD
 35508    49   180    12    49   851     0     111  LongBuffer
 35509    49   180    23    49   851     0     111  slice
 35510    49   180    28    49   851     0      59  (
 35511    49   180    29    49   851     0      60  )
 35512    49   180    31    49   851     0      63  {
 35513    49   181     9    49   851     1      36  int
 35514    49   181    13    49   851     1     111  pos
 35515    49   181    17    49   851     1      67  =
 35516    49   181    19    49   851     1     111  this.position
 35517    49   181    32    49   851     1      59  (
 35518    49   181    33    49   851     1      60  )
 35519    49   181    34    49   851     1     102  ;
 35520    49   182     9    49   851     1      36  int
 35521    49   182    13    49   851     1     111  lim
 35522    49   182    17    49   851     1      67  =
 35523    49   182    19    49   851     1     111  this.limit
 35524    49   182    29    49   851     1      59  (
 35525    49   182    30    49   851     1      60  )
 35526    49   182    31    49   851     1     102  ;
 35527    49   183     9    49   851     0     111  assert
 35528    49   183    16    49   851     0      59  (
 35529    49   183    17    49   851     0     111  pos
 35530    49   183    21    49   851     0      92  <=
 35531    49   183    24    49   851     0     111  lim
 35532    49   183    27    49   851     0      60  )
 35533    49   183    28    49   851     0     102  ;
 35534    49   184     9    49   851     0      36  int
 35535    49   184    13    49   851     0     111  rem
 35536    49   184    17    49   851     0      67  =
 35537    49   184    19    49   851     0      59  (
 35538    49   184    20    49   851     0     111  pos
 35539    49   184    24    49   851     0      92  <=
 35540    49   184    27    49   851     0     111  lim
 35541    49   184    31    49   851     0      58  ?
 35542    49   184    33    49   851     0     111  lim
 35543    49   184    37    49   851     0      77  -
 35544    49   184    39    49   851     0     111  pos
 35545    49   184    43    49   851     0      65  :
 35546    49   184    45    49   851     0     112  0
 35547    49   184    46    49   851     0      60  )
 35548    49   184    47    49   851     0     102  ;
 35549    49   185     9    49   851     0      36  int
 35550    49   185    13    49   851     0     111  off
 35551    49   185    17    49   851     0      67  =
 35552    49   185    19    49   851     0      59  (
 35553    49   185    20    49   851     0     111  pos
 35554    49   185    24    49   851     0      90  <<
 35555    49   185    27    49   851     0     112  3
 35556    49   185    28    49   851     0      60  )
 35557    49   185    29    49   851     0     102  ;
 35558    49   186     9    49   851     0     111  assert
 35559    49   186    16    49   851     0      59  (
 35560    49   186    17    49   851     0     111  off
 35561    49   186    21    49   851     0      88  >=
 35562    49   186    24    49   851     0     112  0
 35563    49   186    25    49   851     0      60  )
 35564    49   186    26    49   851     0     102  ;
 35565    49   187     9    49   851     0      19  return
 35566    49   187    20    49   851     0     111  DirectLongBufferRS
 35567    49   187    38    49   851     0      59  (
 35568    49   187    39    49   851     0      44  this
 35569    49   187    43    49   851     0      66  ,
 35570    49   187    45    49   851     0      77  -
 35571    49   187    46    49   851     0     112  1
 35572    49   187    47    49   851     0      66  ,
 35573    49   187    49    49   851     0     112  0
 35574    49   187    50    49   851     0      66  ,
 35575    49   187    52    49   851     0     111  rem
 35576    49   187    55    49   851     0      66  ,
 35577    49   187    57    49   851     0     111  rem
 35578    49   187    60    49   851     0      66  ,
 35579    49   187    62    49   851     0     111  off
 35580    49   187    65    49   851     0      60  )
 35581    49   187    66    49   851     0     102  ;
 35582    49   188     5    49   851     0      64  }
 35583    49   188     5    49   851     0    2022  ENDMETHOD
 35584    49   188     5    49   852     0    2023  STARTMETHOD
 35585    49   190    12    49   852     0     111  LongBuffer
 35586    49   190    23    49   852     0     111  duplicate
 35587    49   190    32    49   852     0      59  (
 35588    49   190    33    49   852     0      60  )
 35589    49   190    35    49   852     0      63  {
 35590    49   191     9    49   852     0      19  return
 35591    49   191    20    49   852     0     111  DirectLongBufferRS
 35592    49   191    38    49   852     0      59  (
 35593    49   191    39    49   852     0      44  this
 35594    49   191    43    49   852     0      66  ,
 35595    49   192    47    49   852     1     111  this.markValue
 35596    49   192    61    49   852     1      59  (
 35597    49   192    62    49   852     1      60  )
 35598    49   192    63    49   852     1      66  ,
 35599    49   193    47    49   852     1     111  this.position
 35600    49   193    60    49   852     1      59  (
 35601    49   193    61    49   852     1      60  )
 35602    49   193    62    49   852     1      66  ,
 35603    49   194    47    49   852     1     111  this.limit
 35604    49   194    57    49   852     1      59  (
 35605    49   194    58    49   852     1      60  )
 35606    49   194    59    49   852     1      66  ,
 35607    49   195    47    49   852     1     111  this.capacity
 35608    49   195    60    49   852     1      59  (
 35609    49   195    61    49   852     1      60  )
 35610    49   195    62    49   852     1      66  ,
 35611    49   196    47    49   852     0     112  0
 35612    49   196    48    49   852     0      60  )
 35613    49   196    49    49   852     0     102  ;
 35614    49   197     5    49   852     0      64  }
 35615    49   197     5    49   852     0    2024  ENDMETHOD
 35616    49   197     5    49   853     0    2025  STARTMETHOD
 35617    49   199    12    49   853     0     111  LongBuffer
 35618    49   199    23    49   853     0     111  asReadOnlyBuffer
 35619    49   199    39    49   853     0      59  (
 35620    49   199    40    49   853     0      60  )
 35621    49   199    42    49   853     0      63  {
 35622    49   208     9    49   853     0      19  return
 35623    49   208    16    49   853     0     111  duplicate
 35624    49   208    25    49   853     0      59  (
 35625    49   208    26    49   853     0      60  )
 35626    49   208    27    49   853     0     102  ;
 35627    49   210     5    49   853     0      64  }
 35628    49   210     5    49   853     0    2026  ENDMETHOD
 35629    49   210     5    49   854     0    2027  STARTMETHOD
 35630    49   261    12    49   854     0     111  LongBuffer
 35631    49   261    23    49   854     0     111  put
 35632    49   261    26    49   854     0      59  (
 35633    49   261    27    49   854     0      53  long
 35634    49   261    32    49   854     0     111  x
 35635    49   261    33    49   854     0      60  )
 35636    49   261    35    49   854     0      63  {
 35637    49   266     9    49   854     0      20  throw
 35638    49   266    19    49   854     0     111  ReadOnlyBufferException
 35639    49   266    42    49   854     0      59  (
 35640    49   266    43    49   854     0      60  )
 35641    49   266    44    49   854     0     102  ;
 35642    49   268     5    49   854     0      64  }
 35643    49   268     5    49   854     0    2028  ENDMETHOD
 35644    49   268     5    49   855     0    2029  STARTMETHOD
 35645    49   270    12    49   855     0     111  LongBuffer
 35646    49   270    23    49   855     0     111  put
 35647    49   270    26    49   855     0      59  (
 35648    49   270    27    49   855     0      36  int
 35649    49   270    31    49   855     0     111  i
 35650    49   270    32    49   855     0      66  ,
 35651    49   270    34    49   855     0      53  long
 35652    49   270    39    49   855     0     111  x
 35653    49   270    40    49   855     0      60  )
 35654    49   270    42    49   855     0      63  {
 35655    49   275     9    49   855     0      20  throw
 35656    49   275    19    49   855     0     111  ReadOnlyBufferException
 35657    49   275    42    49   855     0      59  (
 35658    49   275    43    49   855     0      60  )
 35659    49   275    44    49   855     0     102  ;
 35660    49   277     5    49   855     0      64  }
 35661    49   277     5    49   855     0    2030  ENDMETHOD
 35662    49   277     5    49   856     0    2031  STARTMETHOD
 35663    49   279    12    49   856     0     111  LongBuffer
 35664    49   279    23    49   856     0     111  put
 35665    49   279    26    49   856     0      59  (
 35666    49   279    27    49   856     0     111  LongBuffer
 35667    49   279    38    49   856     0     111  src
 35668    49   279    41    49   856     0      60  )
 35669    49   279    43    49   856     0      63  {
 35670    49   316     9    49   856     0      20  throw
 35671    49   316    19    49   856     0     111  ReadOnlyBufferException
 35672    49   316    42    49   856     0      59  (
 35673    49   316    43    49   856     0      60  )
 35674    49   316    44    49   856     0     102  ;
 35675    49   318     5    49   856     0      64  }
 35676    49   318     5    49   856     0    2032  ENDMETHOD
 35677    49   318     5    49   857     0    2033  STARTMETHOD
 35678    49   320    12    49   857     0     111  LongBuffer
 35679    49   320    23    49   857     0     111  put
 35680    49   320    26    49   857     0      59  (
 35681    49   320    27    49   857     0      53  long
 35682    49   320    31    49   857     0      61  [
 35683    49   320    32    49   857     0      62  ]
 35684    49   320    34    49   857     0     111  src
 35685    49   320    37    49   857     0      66  ,
 35686    49   320    39    49   857     0      36  int
 35687    49   320    43    49   857     0     111  offset
 35688    49   320    49    49   857     0      66  ,
 35689    49   320    51    49   857     0      36  int
 35690    49   320    55    49   857     0     111  length
 35691    49   320    61    49   857     0      60  )
 35692    49   320    63    49   857     0      63  {
 35693    49   343     9    49   857     0      20  throw
 35694    49   343    19    49   857     0     111  ReadOnlyBufferException
 35695    49   343    42    49   857     0      59  (
 35696    49   343    43    49   857     0      60  )
 35697    49   343    44    49   857     0     102  ;
 35698    49   345     5    49   857     0      64  }
 35699    49   345     5    49   857     0    2034  ENDMETHOD
 35700    49   345     5    49   858     0    2035  STARTMETHOD
 35701    49   347    12    49   858     0     111  LongBuffer
 35702    49   347    23    49   858     0     111  compact
 35703    49   347    30    49   858     0      59  (
 35704    49   347    31    49   858     0      60  )
 35705    49   347    33    49   858     0      63  {
 35706    49   360     9    49   858     0      20  throw
 35707    49   360    19    49   858     0     111  ReadOnlyBufferException
 35708    49   360    42    49   858     0      59  (
 35709    49   360    43    49   858     0      60  )
 35710    49   360    44    49   858     1     102  ;
 35711    49   362     5    49   858     1      64  }
 35712    49   362     5    49   858     0    2036  ENDMETHOD
 35713    49   362     5    49   859     0    2037  STARTMETHOD
 35714    49   364    12    49   859     0      39  boolean
 35715    49   364    20    49   859     0     111  isDirect
 35716    49   364    28    49   859     0      59  (
 35717    49   364    29    49   859     0      60  )
 35718    49   364    31    49   859     0      63  {
 35719    49   365     9    49   859     0      19  return
 35720    49   365    16    49   859     0      52  true
 35721    49   365    20    49   859     1     102  ;
 35722    49   366     5    49   859     1      64  }
 35723    49   366     5    49   859     0    2038  ENDMETHOD
 35724    49   366     5    49   860     0    2039  STARTMETHOD
 35725    49   368    12    49   860     0      39  boolean
 35726    49   368    20    49   860     0     111  isReadOnly
 35727    49   368    30    49   860     0      59  (
 35728    49   368    31    49   860     0      60  )
 35729    49   368    33    49   860     0      63  {
 35730    49   369     9    49   860     0      19  return
 35731    49   369    16    49   860     0      52  true
 35732    49   369    20    49   860     1     102  ;
 35733    49   370     5    49   860     1      64  }
 35734    49   370     5    49   860     0    2040  ENDMETHOD
 35735    49   370     5    49   861     0    2041  STARTMETHOD
 35736    49   416    12    49   861     0     111  ByteOrder
 35737    49   416    22    49   861     0     111  order
 35738    49   416    27    49   861     0      59  (
 35739    49   416    28    49   861     0      60  )
 35740    49   416    30    49   861     0      63  {
 35741    49   418     9    49   861     0      19  return
 35742    49   418    16    49   861     0      59  (
 35743    49   418    17    49   861     0      59  (
 35744    49   418    18    49   861     0     111  ByteOrder.nativeOrder
 35745    49   418    39    49   861     0      59  (
 35746    49   418    40    49   861     0      60  )
 35747    49   418    42    49   861     0      68  ==
 35748    49   418    45    49   861     0     111  ByteOrder.BIG_ENDIAN
 35749    49   418    65    49   861     0      60  )
 35750    49   419    17    49   861     0      58  ?
 35751    49   419    19    49   861     0     111  ByteOrder.LITTLE_ENDIAN
 35752    49   419    43    49   861     0      65  :
 35753    49   419    45    49   861     0     111  ByteOrder.BIG_ENDIAN
 35754    49   419    65    49   861     0      60  )
 35755    49   419    66    49   861     0     102  ;
 35756    49   425     5    49   861     0      64  }
 35757    49   425     5    49   861     0    2042  ENDMETHOD
 35758    49   452     1    49    -1     0      64  }
 35759    49   452     1    49    -1     1    2043  ENDCLASS
 35760    49   452     1    -1    -1     1    2044  ENDFILE C:\Users\RA\javasrc\java\nio\DirectLongBufferRS.java
 35761    50     1     1    -1    -1     1    2045  STARTFILE C:\Users\RA\javasrc\java\nio\DirectLongBufferRU.java
 35762    50    28     9    -1    -1     0     111  java.nio
 35763    50    28    17    -1    -1     0     102  ;
 35764    50    30     1    -1    -1     1      49  import
 35765    50    30     8    -1    -1     1     111  sun.misc.Cleaner
 35766    50    30    24    -1    -1     1     102  ;
 35767    50    31     1    -1    -1     1      49  import
 35768    50    31     8    -1    -1     1     111  sun.misc.Unsafe
 35769    50    31    23    -1    -1     1     102  ;
 35770    50    32     1    -1    -1     1      49  import
 35771    50    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 35772    50    32    31    -1    -1     1     102  ;
 35773    50    33     1    -1    -1     1      49  import
 35774    50    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 35775    50    33    34    -1    -1     1     102  ;
 35776    50    36     1    50    -1     0    2046  STARTCLASS
 35777    50    36     1    50    -1     0      24  class
 35778    50    36     7    50    -1     0     111  DirectLongBufferRU
 35779    50    40     5    50    -1     0      38  extends
 35780    50    40    13    50    -1     0     111  DirectLongBufferU
 35781    50    42     5    50    -1     0      17  implements
 35782    50    42    16    50    -1     0     111  DirectBuffer
 35783    50    43     1    50    -1     0      63  {
 35784    50    43     1    50   862     0    2047  STARTMETHOD
 35785    50   164     5    50   862     0     111  DirectLongBufferRU
 35786    50   164    23    50   862     0      59  (
 35787    50   164    24    50   862     0     111  DirectBuffer
 35788    50   164    37    50   862     0     111  db
 35789    50   164    39    50   862     0      66  ,
 35790    50   165    32    50   862     0      36  int
 35791    50   165    36    50   862     0     111  mark
 35792    50   165    40    50   862     0      66  ,
 35793    50   165    42    50   862     0      36  int
 35794    50   165    46    50   862     0     111  pos
 35795    50   165    49    50   862     0      66  ,
 35796    50   165    51    50   862     0      36  int
 35797    50   165    55    50   862     0     111  lim
 35798    50   165    58    50   862     0      66  ,
 35799    50   165    60    50   862     0      36  int
 35800    50   165    64    50   862     0     111  cap
 35801    50   165    67    50   862     0      66  ,
 35802    50   166    32    50   862     0      36  int
 35803    50   166    36    50   862     0     111  off
 35804    50   166    39    50   862     0      60  )
 35805    50   167     5    50   862     0      63  {
 35806    50   176     9    50   862     0      27  super
 35807    50   176    14    50   862     0      59  (
 35808    50   176    15    50   862     0     111  db
 35809    50   176    17    50   862     0      66  ,
 35810    50   176    19    50   862     0     111  mark
 35811    50   176    23    50   862     0      66  ,
 35812    50   176    25    50   862     0     111  pos
 35813    50   176    28    50   862     0      66  ,
 35814    50   176    30    50   862     0     111  lim
 35815    50   176    33    50   862     0      66  ,
 35816    50   176    35    50   862     0     111  cap
 35817    50   176    38    50   862     0      66  ,
 35818    50   176    40    50   862     0     111  off
 35819    50   176    43    50   862     0      60  )
 35820    50   176    44    50   862     0     102  ;
 35821    50   178     5    50   862     0      64  }
 35822    50   178     5    50   862     0    2048  ENDMETHOD
 35823    50   178     5    50   863     0    2049  STARTMETHOD
 35824    50   180    12    50   863     0     111  LongBuffer
 35825    50   180    23    50   863     0     111  slice
 35826    50   180    28    50   863     0      59  (
 35827    50   180    29    50   863     0      60  )
 35828    50   180    31    50   863     0      63  {
 35829    50   181     9    50   863     1      36  int
 35830    50   181    13    50   863     1     111  pos
 35831    50   181    17    50   863     1      67  =
 35832    50   181    19    50   863     1     111  this.position
 35833    50   181    32    50   863     1      59  (
 35834    50   181    33    50   863     1      60  )
 35835    50   181    34    50   863     1     102  ;
 35836    50   182     9    50   863     1      36  int
 35837    50   182    13    50   863     1     111  lim
 35838    50   182    17    50   863     1      67  =
 35839    50   182    19    50   863     1     111  this.limit
 35840    50   182    29    50   863     1      59  (
 35841    50   182    30    50   863     1      60  )
 35842    50   182    31    50   863     1     102  ;
 35843    50   183     9    50   863     0     111  assert
 35844    50   183    16    50   863     0      59  (
 35845    50   183    17    50   863     0     111  pos
 35846    50   183    21    50   863     0      92  <=
 35847    50   183    24    50   863     0     111  lim
 35848    50   183    27    50   863     0      60  )
 35849    50   183    28    50   863     0     102  ;
 35850    50   184     9    50   863     0      36  int
 35851    50   184    13    50   863     0     111  rem
 35852    50   184    17    50   863     0      67  =
 35853    50   184    19    50   863     0      59  (
 35854    50   184    20    50   863     0     111  pos
 35855    50   184    24    50   863     0      92  <=
 35856    50   184    27    50   863     0     111  lim
 35857    50   184    31    50   863     0      58  ?
 35858    50   184    33    50   863     0     111  lim
 35859    50   184    37    50   863     0      77  -
 35860    50   184    39    50   863     0     111  pos
 35861    50   184    43    50   863     0      65  :
 35862    50   184    45    50   863     0     112  0
 35863    50   184    46    50   863     0      60  )
 35864    50   184    47    50   863     0     102  ;
 35865    50   185     9    50   863     0      36  int
 35866    50   185    13    50   863     0     111  off
 35867    50   185    17    50   863     0      67  =
 35868    50   185    19    50   863     0      59  (
 35869    50   185    20    50   863     0     111  pos
 35870    50   185    24    50   863     0      90  <<
 35871    50   185    27    50   863     0     112  3
 35872    50   185    28    50   863     0      60  )
 35873    50   185    29    50   863     0     102  ;
 35874    50   186     9    50   863     0     111  assert
 35875    50   186    16    50   863     0      59  (
 35876    50   186    17    50   863     0     111  off
 35877    50   186    21    50   863     0      88  >=
 35878    50   186    24    50   863     0     112  0
 35879    50   186    25    50   863     0      60  )
 35880    50   186    26    50   863     0     102  ;
 35881    50   187     9    50   863     0      19  return
 35882    50   187    20    50   863     0     111  DirectLongBufferRU
 35883    50   187    38    50   863     0      59  (
 35884    50   187    39    50   863     0      44  this
 35885    50   187    43    50   863     0      66  ,
 35886    50   187    45    50   863     0      77  -
 35887    50   187    46    50   863     0     112  1
 35888    50   187    47    50   863     0      66  ,
 35889    50   187    49    50   863     0     112  0
 35890    50   187    50    50   863     0      66  ,
 35891    50   187    52    50   863     0     111  rem
 35892    50   187    55    50   863     0      66  ,
 35893    50   187    57    50   863     0     111  rem
 35894    50   187    60    50   863     0      66  ,
 35895    50   187    62    50   863     0     111  off
 35896    50   187    65    50   863     0      60  )
 35897    50   187    66    50   863     0     102  ;
 35898    50   188     5    50   863     0      64  }
 35899    50   188     5    50   863     0    2050  ENDMETHOD
 35900    50   188     5    50   864     0    2051  STARTMETHOD
 35901    50   190    12    50   864     0     111  LongBuffer
 35902    50   190    23    50   864     0     111  duplicate
 35903    50   190    32    50   864     0      59  (
 35904    50   190    33    50   864     0      60  )
 35905    50   190    35    50   864     0      63  {
 35906    50   191     9    50   864     0      19  return
 35907    50   191    20    50   864     0     111  DirectLongBufferRU
 35908    50   191    38    50   864     0      59  (
 35909    50   191    39    50   864     0      44  this
 35910    50   191    43    50   864     0      66  ,
 35911    50   192    47    50   864     1     111  this.markValue
 35912    50   192    61    50   864     1      59  (
 35913    50   192    62    50   864     1      60  )
 35914    50   192    63    50   864     1      66  ,
 35915    50   193    47    50   864     1     111  this.position
 35916    50   193    60    50   864     1      59  (
 35917    50   193    61    50   864     1      60  )
 35918    50   193    62    50   864     1      66  ,
 35919    50   194    47    50   864     1     111  this.limit
 35920    50   194    57    50   864     1      59  (
 35921    50   194    58    50   864     1      60  )
 35922    50   194    59    50   864     1      66  ,
 35923    50   195    47    50   864     1     111  this.capacity
 35924    50   195    60    50   864     1      59  (
 35925    50   195    61    50   864     1      60  )
 35926    50   195    62    50   864     1      66  ,
 35927    50   196    47    50   864     0     112  0
 35928    50   196    48    50   864     0      60  )
 35929    50   196    49    50   864     0     102  ;
 35930    50   197     5    50   864     0      64  }
 35931    50   197     5    50   864     0    2052  ENDMETHOD
 35932    50   197     5    50   865     0    2053  STARTMETHOD
 35933    50   199    12    50   865     0     111  LongBuffer
 35934    50   199    23    50   865     0     111  asReadOnlyBuffer
 35935    50   199    39    50   865     0      59  (
 35936    50   199    40    50   865     0      60  )
 35937    50   199    42    50   865     0      63  {
 35938    50   208     9    50   865     0      19  return
 35939    50   208    16    50   865     0     111  duplicate
 35940    50   208    25    50   865     0      59  (
 35941    50   208    26    50   865     0      60  )
 35942    50   208    27    50   865     0     102  ;
 35943    50   210     5    50   865     0      64  }
 35944    50   210     5    50   865     0    2054  ENDMETHOD
 35945    50   210     5    50   866     0    2055  STARTMETHOD
 35946    50   261    12    50   866     0     111  LongBuffer
 35947    50   261    23    50   866     0     111  put
 35948    50   261    26    50   866     0      59  (
 35949    50   261    27    50   866     0      53  long
 35950    50   261    32    50   866     0     111  x
 35951    50   261    33    50   866     0      60  )
 35952    50   261    35    50   866     0      63  {
 35953    50   266     9    50   866     0      20  throw
 35954    50   266    19    50   866     0     111  ReadOnlyBufferException
 35955    50   266    42    50   866     0      59  (
 35956    50   266    43    50   866     0      60  )
 35957    50   266    44    50   866     0     102  ;
 35958    50   268     5    50   866     0      64  }
 35959    50   268     5    50   866     0    2056  ENDMETHOD
 35960    50   268     5    50   867     0    2057  STARTMETHOD
 35961    50   270    12    50   867     0     111  LongBuffer
 35962    50   270    23    50   867     0     111  put
 35963    50   270    26    50   867     0      59  (
 35964    50   270    27    50   867     0      36  int
 35965    50   270    31    50   867     0     111  i
 35966    50   270    32    50   867     0      66  ,
 35967    50   270    34    50   867     0      53  long
 35968    50   270    39    50   867     0     111  x
 35969    50   270    40    50   867     0      60  )
 35970    50   270    42    50   867     0      63  {
 35971    50   275     9    50   867     0      20  throw
 35972    50   275    19    50   867     0     111  ReadOnlyBufferException
 35973    50   275    42    50   867     0      59  (
 35974    50   275    43    50   867     0      60  )
 35975    50   275    44    50   867     0     102  ;
 35976    50   277     5    50   867     0      64  }
 35977    50   277     5    50   867     0    2058  ENDMETHOD
 35978    50   277     5    50   868     0    2059  STARTMETHOD
 35979    50   279    12    50   868     0     111  LongBuffer
 35980    50   279    23    50   868     0     111  put
 35981    50   279    26    50   868     0      59  (
 35982    50   279    27    50   868     0     111  LongBuffer
 35983    50   279    38    50   868     0     111  src
 35984    50   279    41    50   868     0      60  )
 35985    50   279    43    50   868     0      63  {
 35986    50   316     9    50   868     0      20  throw
 35987    50   316    19    50   868     0     111  ReadOnlyBufferException
 35988    50   316    42    50   868     0      59  (
 35989    50   316    43    50   868     0      60  )
 35990    50   316    44    50   868     0     102  ;
 35991    50   318     5    50   868     0      64  }
 35992    50   318     5    50   868     0    2060  ENDMETHOD
 35993    50   318     5    50   869     0    2061  STARTMETHOD
 35994    50   320    12    50   869     0     111  LongBuffer
 35995    50   320    23    50   869     0     111  put
 35996    50   320    26    50   869     0      59  (
 35997    50   320    27    50   869     0      53  long
 35998    50   320    31    50   869     0      61  [
 35999    50   320    32    50   869     0      62  ]
 36000    50   320    34    50   869     0     111  src
 36001    50   320    37    50   869     0      66  ,
 36002    50   320    39    50   869     0      36  int
 36003    50   320    43    50   869     0     111  offset
 36004    50   320    49    50   869     0      66  ,
 36005    50   320    51    50   869     0      36  int
 36006    50   320    55    50   869     0     111  length
 36007    50   320    61    50   869     0      60  )
 36008    50   320    63    50   869     0      63  {
 36009    50   343     9    50   869     0      20  throw
 36010    50   343    19    50   869     0     111  ReadOnlyBufferException
 36011    50   343    42    50   869     0      59  (
 36012    50   343    43    50   869     0      60  )
 36013    50   343    44    50   869     0     102  ;
 36014    50   345     5    50   869     0      64  }
 36015    50   345     5    50   869     0    2062  ENDMETHOD
 36016    50   345     5    50   870     0    2063  STARTMETHOD
 36017    50   347    12    50   870     0     111  LongBuffer
 36018    50   347    23    50   870     0     111  compact
 36019    50   347    30    50   870     0      59  (
 36020    50   347    31    50   870     0      60  )
 36021    50   347    33    50   870     0      63  {
 36022    50   360     9    50   870     0      20  throw
 36023    50   360    19    50   870     0     111  ReadOnlyBufferException
 36024    50   360    42    50   870     0      59  (
 36025    50   360    43    50   870     0      60  )
 36026    50   360    44    50   870     1     102  ;
 36027    50   362     5    50   870     1      64  }
 36028    50   362     5    50   870     0    2064  ENDMETHOD
 36029    50   362     5    50   871     0    2065  STARTMETHOD
 36030    50   364    12    50   871     0      39  boolean
 36031    50   364    20    50   871     0     111  isDirect
 36032    50   364    28    50   871     0      59  (
 36033    50   364    29    50   871     0      60  )
 36034    50   364    31    50   871     0      63  {
 36035    50   365     9    50   871     0      19  return
 36036    50   365    16    50   871     0      52  true
 36037    50   365    20    50   871     1     102  ;
 36038    50   366     5    50   871     1      64  }
 36039    50   366     5    50   871     0    2066  ENDMETHOD
 36040    50   366     5    50   872     0    2067  STARTMETHOD
 36041    50   368    12    50   872     0      39  boolean
 36042    50   368    20    50   872     0     111  isReadOnly
 36043    50   368    30    50   872     0      59  (
 36044    50   368    31    50   872     0      60  )
 36045    50   368    33    50   872     0      63  {
 36046    50   369     9    50   872     0      19  return
 36047    50   369    16    50   872     0      52  true
 36048    50   369    20    50   872     1     102  ;
 36049    50   370     5    50   872     1      64  }
 36050    50   370     5    50   872     0    2068  ENDMETHOD
 36051    50   370     5    50   873     0    2069  STARTMETHOD
 36052    50   416    12    50   873     0     111  ByteOrder
 36053    50   416    22    50   873     0     111  order
 36054    50   416    27    50   873     0      59  (
 36055    50   416    28    50   873     0      60  )
 36056    50   416    30    50   873     0      63  {
 36057    50   422     9    50   873     0      19  return
 36058    50   422    16    50   873     0      59  (
 36059    50   422    17    50   873     0      59  (
 36060    50   422    18    50   873     0     111  ByteOrder.nativeOrder
 36061    50   422    39    50   873     0      59  (
 36062    50   422    40    50   873     0      60  )
 36063    50   422    42    50   873     0      71  !=
 36064    50   422    45    50   873     0     111  ByteOrder.BIG_ENDIAN
 36065    50   422    65    50   873     0      60  )
 36066    50   423    17    50   873     0      58  ?
 36067    50   423    19    50   873     0     111  ByteOrder.LITTLE_ENDIAN
 36068    50   423    43    50   873     0      65  :
 36069    50   423    45    50   873     0     111  ByteOrder.BIG_ENDIAN
 36070    50   423    65    50   873     0      60  )
 36071    50   423    66    50   873     0     102  ;
 36072    50   425     5    50   873     0      64  }
 36073    50   425     5    50   873     0    2070  ENDMETHOD
 36074    50   452     1    50    -1     0      64  }
 36075    50   452     1    50    -1     1    2071  ENDCLASS
 36076    50   452     1    -1    -1     1    2072  ENDFILE C:\Users\RA\javasrc\java\nio\DirectLongBufferRU.java
 36077    51     1     1    -1    -1     1    2073  STARTFILE C:\Users\RA\javasrc\java\nio\DirectLongBufferS.java
 36078    51    28     9    -1    -1     0     111  java.nio
 36079    51    28    17    -1    -1     0     102  ;
 36080    51    30     1    -1    -1     1      49  import
 36081    51    30     8    -1    -1     1     111  sun.misc.Cleaner
 36082    51    30    24    -1    -1     1     102  ;
 36083    51    31     1    -1    -1     1      49  import
 36084    51    31     8    -1    -1     1     111  sun.misc.Unsafe
 36085    51    31    23    -1    -1     1     102  ;
 36086    51    32     1    -1    -1     1      49  import
 36087    51    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 36088    51    32    31    -1    -1     1     102  ;
 36089    51    33     1    -1    -1     1      49  import
 36090    51    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 36091    51    33    34    -1    -1     1     102  ;
 36092    51    36     1    51    -1     0    2074  STARTCLASS
 36093    51    36     1    51    -1     0      24  class
 36094    51    36     7    51    -1     0     111  DirectLongBufferS
 36095    51    38     5    51    -1     0      38  extends
 36096    51    38    13    51    -1     0     111  LongBuffer
 36097    51    42     5    51    -1     0      17  implements
 36098    51    42    16    51    -1     0     111  DirectBuffer
 36099    51    43     1    51    -1     0      63  {
 36100    51    48     5    51    -1     0      23  protected
 36101    51    48    15    51    -1     0      45  static
 36102    51    48    28    51    -1     0     111  Unsafe
 36103    51    48    35    51    -1     0     111  unsafe
 36104    51    48    42    51    -1     0      67  =
 36105    51    48    44    51    -1     0     111  Bits.unsafe
 36106    51    48    55    51    -1     0      59  (
 36107    51    48    56    51    -1     0      60  )
 36108    51    48    57    51    -1     0     102  ;
 36109    51    51     5    51    -1     0      23  protected
 36110    51    51    15    51    -1     0      45  static
 36111    51    51    28    51    -1     0      39  boolean
 36112    51    51    36    51    -1     0     111  unaligned
 36113    51    51    46    51    -1     0      67  =
 36114    51    51    48    51    -1     0     111  Bits.unaligned
 36115    51    51    62    51    -1     0      59  (
 36116    51    51    63    51    -1     0      60  )
 36117    51    51    64    51    -1     0     102  ;
 36118    51    59     5    51    -1     0      23  protected
 36119    51    59    15    51    -1     0     111  Object
 36120    51    59    22    51    -1     0     111  viewedBuffer
 36121    51    59    35    51    -1     0      67  =
 36122    51    59    37    51    -1     0      21  null
 36123    51    59    41    51    -1     0     102  ;
 36124    51    59    41    51   874     0    2075  STARTMETHOD
 36125    51    61    12    51   874     0     111  Object
 36126    51    61    19    51   874     0     111  viewedBuffer
 36127    51    61    31    51   874     0      59  (
 36128    51    61    32    51   874     0      60  )
 36129    51    61    34    51   874     0      63  {
 36130    51    62     9    51   874     0      19  return
 36131    51    62    16    51   874     0     111  viewedBuffer
 36132    51    62    28    51   874     0     102  ;
 36133    51    63     5    51   874     0      64  }
 36134    51    63     5    51   874     0    2076  ENDMETHOD
 36135    51    63     5    51   875     0    2077  STARTMETHOD
 36136    51   100    12    51   875     0     111  Cleaner
 36137    51   100    20    51   875     0     111  cleaner
 36138    51   100    27    51   875     0      59  (
 36139    51   100    28    51   875     0      60  )
 36140    51   100    30    51   875     0      63  {
 36141    51   100    32    51   875     0      19  return
 36142    51   100    39    51   875     0      21  null
 36143    51   100    43    51   875     0     102  ;
 36144    51   100    45    51   875     0      64  }
 36145    51   100    45    51   875     0    2078  ENDMETHOD
 36146    51   100    45    51   876     0    2079  STARTMETHOD
 36147    51   164     5    51   876     0     111  DirectLongBufferS
 36148    51   164    22    51   876     0      59  (
 36149    51   164    23    51   876     0     111  DirectBuffer
 36150    51   164    36    51   876     0     111  db
 36151    51   164    38    51   876     0      66  ,
 36152    51   165    32    51   876     0      36  int
 36153    51   165    36    51   876     0     111  mark
 36154    51   165    40    51   876     0      66  ,
 36155    51   165    42    51   876     0      36  int
 36156    51   165    46    51   876     0     111  pos
 36157    51   165    49    51   876     0      66  ,
 36158    51   165    51    51   876     0      36  int
 36159    51   165    55    51   876     0     111  lim
 36160    51   165    58    51   876     0      66  ,
 36161    51   165    60    51   876     0      36  int
 36162    51   165    64    51   876     0     111  cap
 36163    51   165    67    51   876     0      66  ,
 36164    51   166    32    51   876     0      36  int
 36165    51   166    36    51   876     0     111  off
 36166    51   166    39    51   876     0      60  )
 36167    51   167     5    51   876     0      63  {
 36168    51   169     9    51   876     0      27  super
 36169    51   169    14    51   876     0      59  (
 36170    51   169    15    51   876     0     111  mark
 36171    51   169    19    51   876     0      66  ,
 36172    51   169    21    51   876     0     111  pos
 36173    51   169    24    51   876     0      66  ,
 36174    51   169    26    51   876     0     111  lim
 36175    51   169    29    51   876     0      66  ,
 36176    51   169    31    51   876     0     111  cap
 36177    51   169    34    51   876     0      60  )
 36178    51   169    35    51   876     0     102  ;
 36179    51   170     9    51   876     0     111  address
 36180    51   170    17    51   876     0      67  =
 36181    51   170    19    51   876     0     111  db.address
 36182    51   170    29    51   876     0      59  (
 36183    51   170    30    51   876     0      60  )
 36184    51   170    32    51   876     0      74  +
 36185    51   170    34    51   876     0     111  off
 36186    51   170    37    51   876     0     102  ;
 36187    51   171     9    51   876     0     111  viewedBuffer
 36188    51   171    22    51   876     0      67  =
 36189    51   171    24    51   876     0     111  db
 36190    51   171    26    51   876     0     102  ;
 36191    51   178     5    51   876     0      64  }
 36192    51   178     5    51   876     0    2080  ENDMETHOD
 36193    51   178     5    51   877     0    2081  STARTMETHOD
 36194    51   180    12    51   877     0     111  LongBuffer
 36195    51   180    23    51   877     0     111  slice
 36196    51   180    28    51   877     0      59  (
 36197    51   180    29    51   877     0      60  )
 36198    51   180    31    51   877     0      63  {
 36199    51   181     9    51   877     1      36  int
 36200    51   181    13    51   877     1     111  pos
 36201    51   181    17    51   877     1      67  =
 36202    51   181    19    51   877     1     111  this.position
 36203    51   181    32    51   877     1      59  (
 36204    51   181    33    51   877     1      60  )
 36205    51   181    34    51   877     1     102  ;
 36206    51   182     9    51   877     1      36  int
 36207    51   182    13    51   877     1     111  lim
 36208    51   182    17    51   877     1      67  =
 36209    51   182    19    51   877     1     111  this.limit
 36210    51   182    29    51   877     1      59  (
 36211    51   182    30    51   877     1      60  )
 36212    51   182    31    51   877     1     102  ;
 36213    51   183     9    51   877     0     111  assert
 36214    51   183    16    51   877     0      59  (
 36215    51   183    17    51   877     0     111  pos
 36216    51   183    21    51   877     0      92  <=
 36217    51   183    24    51   877     0     111  lim
 36218    51   183    27    51   877     0      60  )
 36219    51   183    28    51   877     0     102  ;
 36220    51   184     9    51   877     0      36  int
 36221    51   184    13    51   877     0     111  rem
 36222    51   184    17    51   877     0      67  =
 36223    51   184    19    51   877     0      59  (
 36224    51   184    20    51   877     0     111  pos
 36225    51   184    24    51   877     0      92  <=
 36226    51   184    27    51   877     0     111  lim
 36227    51   184    31    51   877     0      58  ?
 36228    51   184    33    51   877     0     111  lim
 36229    51   184    37    51   877     0      77  -
 36230    51   184    39    51   877     0     111  pos
 36231    51   184    43    51   877     0      65  :
 36232    51   184    45    51   877     0     112  0
 36233    51   184    46    51   877     0      60  )
 36234    51   184    47    51   877     0     102  ;
 36235    51   185     9    51   877     0      36  int
 36236    51   185    13    51   877     0     111  off
 36237    51   185    17    51   877     0      67  =
 36238    51   185    19    51   877     0      59  (
 36239    51   185    20    51   877     0     111  pos
 36240    51   185    24    51   877     0      90  <<
 36241    51   185    27    51   877     0     112  3
 36242    51   185    28    51   877     0      60  )
 36243    51   185    29    51   877     0     102  ;
 36244    51   186     9    51   877     0     111  assert
 36245    51   186    16    51   877     0      59  (
 36246    51   186    17    51   877     0     111  off
 36247    51   186    21    51   877     0      88  >=
 36248    51   186    24    51   877     0     112  0
 36249    51   186    25    51   877     0      60  )
 36250    51   186    26    51   877     0     102  ;
 36251    51   187     9    51   877     0      19  return
 36252    51   187    20    51   877     0     111  DirectLongBufferS
 36253    51   187    37    51   877     0      59  (
 36254    51   187    38    51   877     0      44  this
 36255    51   187    42    51   877     0      66  ,
 36256    51   187    44    51   877     0      77  -
 36257    51   187    45    51   877     0     112  1
 36258    51   187    46    51   877     0      66  ,
 36259    51   187    48    51   877     0     112  0
 36260    51   187    49    51   877     0      66  ,
 36261    51   187    51    51   877     0     111  rem
 36262    51   187    54    51   877     0      66  ,
 36263    51   187    56    51   877     0     111  rem
 36264    51   187    59    51   877     0      66  ,
 36265    51   187    61    51   877     0     111  off
 36266    51   187    64    51   877     0      60  )
 36267    51   187    65    51   877     0     102  ;
 36268    51   188     5    51   877     0      64  }
 36269    51   188     5    51   877     0    2082  ENDMETHOD
 36270    51   188     5    51   878     0    2083  STARTMETHOD
 36271    51   190    12    51   878     0     111  LongBuffer
 36272    51   190    23    51   878     0     111  duplicate
 36273    51   190    32    51   878     0      59  (
 36274    51   190    33    51   878     0      60  )
 36275    51   190    35    51   878     0      63  {
 36276    51   191     9    51   878     0      19  return
 36277    51   191    20    51   878     0     111  DirectLongBufferS
 36278    51   191    37    51   878     0      59  (
 36279    51   191    38    51   878     0      44  this
 36280    51   191    42    51   878     0      66  ,
 36281    51   192    47    51   878     1     111  this.markValue
 36282    51   192    61    51   878     1      59  (
 36283    51   192    62    51   878     1      60  )
 36284    51   192    63    51   878     1      66  ,
 36285    51   193    47    51   878     1     111  this.position
 36286    51   193    60    51   878     1      59  (
 36287    51   193    61    51   878     1      60  )
 36288    51   193    62    51   878     1      66  ,
 36289    51   194    47    51   878     1     111  this.limit
 36290    51   194    57    51   878     1      59  (
 36291    51   194    58    51   878     1      60  )
 36292    51   194    59    51   878     1      66  ,
 36293    51   195    47    51   878     1     111  this.capacity
 36294    51   195    60    51   878     1      59  (
 36295    51   195    61    51   878     1      60  )
 36296    51   195    62    51   878     1      66  ,
 36297    51   196    47    51   878     0     112  0
 36298    51   196    48    51   878     0      60  )
 36299    51   196    49    51   878     0     102  ;
 36300    51   197     5    51   878     0      64  }
 36301    51   197     5    51   878     0    2084  ENDMETHOD
 36302    51   197     5    51   879     0    2085  STARTMETHOD
 36303    51   199    12    51   879     0     111  LongBuffer
 36304    51   199    23    51   879     0     111  asReadOnlyBuffer
 36305    51   199    39    51   879     0      59  (
 36306    51   199    40    51   879     0      60  )
 36307    51   199    42    51   879     0      63  {
 36308    51   201     9    51   879     0      19  return
 36309    51   201    20    51   879     0     111  DirectLongBufferRS
 36310    51   201    38    51   879     0      59  (
 36311    51   201    39    51   879     0      44  this
 36312    51   201    43    51   879     0      66  ,
 36313    51   202    44    51   879     1     111  this.markValue
 36314    51   202    58    51   879     1      59  (
 36315    51   202    59    51   879     1      60  )
 36316    51   202    60    51   879     1      66  ,
 36317    51   203    44    51   879     1     111  this.position
 36318    51   203    57    51   879     1      59  (
 36319    51   203    58    51   879     1      60  )
 36320    51   203    59    51   879     1      66  ,
 36321    51   204    44    51   879     1     111  this.limit
 36322    51   204    54    51   879     1      59  (
 36323    51   204    55    51   879     1      60  )
 36324    51   204    56    51   879     1      66  ,
 36325    51   205    44    51   879     1     111  this.capacity
 36326    51   205    57    51   879     1      59  (
 36327    51   205    58    51   879     1      60  )
 36328    51   205    59    51   879     1      66  ,
 36329    51   206    44    51   879     0     112  0
 36330    51   206    45    51   879     0      60  )
 36331    51   206    46    51   879     0     102  ;
 36332    51   210     5    51   879     0      64  }
 36333    51   210     5    51   879     0    2086  ENDMETHOD
 36334    51   210     5    51   880     0    2087  STARTMETHOD
 36335    51   214    12    51   880     0      53  long
 36336    51   214    17    51   880     0     111  address
 36337    51   214    24    51   880     0      59  (
 36338    51   214    25    51   880     0      60  )
 36339    51   214    27    51   880     0      63  {
 36340    51   215     9    51   880     0      19  return
 36341    51   215    16    51   880     0     111  address
 36342    51   215    23    51   880     0     102  ;
 36343    51   216     5    51   880     0      64  }
 36344    51   216     5    51   880     0    2088  ENDMETHOD
 36345    51   216     5    51   881     0    2089  STARTMETHOD
 36346    51   218     5    51   881     0      41  private
 36347    51   218    13    51   881     0      53  long
 36348    51   218    18    51   881     0     111  ix
 36349    51   218    20    51   881     0      59  (
 36350    51   218    21    51   881     0      36  int
 36351    51   218    25    51   881     0     111  i
 36352    51   218    26    51   881     0      60  )
 36353    51   218    28    51   881     0      63  {
 36354    51   219     9    51   881     0      19  return
 36355    51   219    16    51   881     0     111  address
 36356    51   219    24    51   881     0      74  +
 36357    51   219    26    51   881     0      59  (
 36358    51   219    27    51   881     0     111  i
 36359    51   219    29    51   881     0      90  <<
 36360    51   219    32    51   881     0     112  3
 36361    51   219    33    51   881     0      60  )
 36362    51   219    34    51   881     0     102  ;
 36363    51   220     5    51   881     0      64  }
 36364    51   220     5    51   881     0    2090  ENDMETHOD
 36365    51   220     5    51   882     0    2091  STARTMETHOD
 36366    51   222    12    51   882     0      53  long
 36367    51   222    17    51   882     0     111  get
 36368    51   222    20    51   882     0      59  (
 36369    51   222    21    51   882     0      60  )
 36370    51   222    23    51   882     0      63  {
 36371    51   223     9    51   882     0      19  return
 36372    51   223    16    51   882     0      59  (
 36373    51   223    17    51   882     0     111  Bits.swap
 36374    51   223    26    51   882     0      59  (
 36375    51   223    27    51   882     0     111  unsafe.getLong
 36376    51   223    41    51   882     0      59  (
 36377    51   223    42    51   882     0     111  ix
 36378    51   223    44    51   882     0      59  (
 36379    51   223    45    51   882     0     111  nextGetIndex
 36380    51   223    57    51   882     0      59  (
 36381    51   223    58    51   882     0      60  )
 36382    51   223    59    51   882     0      60  )
 36383    51   223    60    51   882     0      60  )
 36384    51   223    61    51   882     0      60  )
 36385    51   223    62    51   882     0      60  )
 36386    51   223    63    51   882     0     102  ;
 36387    51   224     5    51   882     0      64  }
 36388    51   224     5    51   882     0    2092  ENDMETHOD
 36389    51   224     5    51   883     0    2093  STARTMETHOD
 36390    51   226    12    51   883     0      53  long
 36391    51   226    17    51   883     0     111  get
 36392    51   226    20    51   883     0      59  (
 36393    51   226    21    51   883     0      36  int
 36394    51   226    25    51   883     0     111  i
 36395    51   226    26    51   883     0      60  )
 36396    51   226    28    51   883     0      63  {
 36397    51   227     9    51   883     0      19  return
 36398    51   227    16    51   883     0      59  (
 36399    51   227    17    51   883     0     111  Bits.swap
 36400    51   227    26    51   883     0      59  (
 36401    51   227    27    51   883     0     111  unsafe.getLong
 36402    51   227    41    51   883     0      59  (
 36403    51   227    42    51   883     0     111  ix
 36404    51   227    44    51   883     0      59  (
 36405    51   227    45    51   883     0     111  checkIndex
 36406    51   227    55    51   883     0      59  (
 36407    51   227    56    51   883     0     111  i
 36408    51   227    57    51   883     0      60  )
 36409    51   227    58    51   883     0      60  )
 36410    51   227    59    51   883     0      60  )
 36411    51   227    60    51   883     0      60  )
 36412    51   227    61    51   883     0      60  )
 36413    51   227    62    51   883     0     102  ;
 36414    51   228     5    51   883     0      64  }
 36415    51   228     5    51   883     0    2094  ENDMETHOD
 36416    51   228     5    51   884     0    2095  STARTMETHOD
 36417    51   230    12    51   884     0     111  LongBuffer
 36418    51   230    23    51   884     0     111  get
 36419    51   230    26    51   884     0      59  (
 36420    51   230    27    51   884     0      53  long
 36421    51   230    31    51   884     0      61  [
 36422    51   230    32    51   884     0      62  ]
 36423    51   230    34    51   884     0     111  dst
 36424    51   230    37    51   884     0      66  ,
 36425    51   230    39    51   884     0      36  int
 36426    51   230    43    51   884     0     111  offset
 36427    51   230    49    51   884     0      66  ,
 36428    51   230    51    51   884     0      36  int
 36429    51   230    55    51   884     0     111  length
 36430    51   230    61    51   884     0      60  )
 36431    51   230    63    51   884     0      63  {
 36432    51   232     9    51   884     0      31  if
 36433    51   232    12    51   884     0      59  (
 36434    51   232    13    51   884     0      59  (
 36435    51   232    14    51   884     0     111  length
 36436    51   232    21    51   884     0      90  <<
 36437    51   232    24    51   884     0     112  3
 36438    51   232    25    51   884     0      60  )
 36439    51   232    27    51   884     0      89  >
 36440    51   232    29    51   884     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 36441    51   232    61    51   884     0      60  )
 36442    51   232    63    51   884     0      63  {
 36443    51   233    13    51   884     0     111  checkBounds
 36444    51   233    24    51   884     0      59  (
 36445    51   233    25    51   884     0     111  offset
 36446    51   233    31    51   884     0      66  ,
 36447    51   233    33    51   884     0     111  length
 36448    51   233    39    51   884     0      66  ,
 36449    51   233    41    51   884     0     111  dst.length
 36450    51   233    51    51   884     0      60  )
 36451    51   233    52    51   884     0     102  ;
 36452    51   234    13    51   884     1      36  int
 36453    51   234    17    51   884     1     111  pos
 36454    51   234    21    51   884     1      67  =
 36455    51   234    23    51   884     1     111  position
 36456    51   234    31    51   884     1      59  (
 36457    51   234    32    51   884     1      60  )
 36458    51   234    33    51   884     1     102  ;
 36459    51   235    13    51   884     1      36  int
 36460    51   235    17    51   884     1     111  lim
 36461    51   235    21    51   884     1      67  =
 36462    51   235    23    51   884     1     111  limit
 36463    51   235    28    51   884     1      59  (
 36464    51   235    29    51   884     1      60  )
 36465    51   235    30    51   884     1     102  ;
 36466    51   236    13    51   884     0     111  assert
 36467    51   236    20    51   884     0      59  (
 36468    51   236    21    51   884     0     111  pos
 36469    51   236    25    51   884     0      92  <=
 36470    51   236    28    51   884     0     111  lim
 36471    51   236    31    51   884     0      60  )
 36472    51   236    32    51   884     0     102  ;
 36473    51   237    13    51   884     0      36  int
 36474    51   237    17    51   884     0     111  rem
 36475    51   237    21    51   884     0      67  =
 36476    51   237    23    51   884     0      59  (
 36477    51   237    24    51   884     0     111  pos
 36478    51   237    28    51   884     0      92  <=
 36479    51   237    31    51   884     0     111  lim
 36480    51   237    35    51   884     0      58  ?
 36481    51   237    37    51   884     0     111  lim
 36482    51   237    41    51   884     0      77  -
 36483    51   237    43    51   884     0     111  pos
 36484    51   237    47    51   884     0      65  :
 36485    51   237    49    51   884     0     112  0
 36486    51   237    50    51   884     0      60  )
 36487    51   237    51    51   884     0     102  ;
 36488    51   238    13    51   884     0      31  if
 36489    51   238    16    51   884     0      59  (
 36490    51   238    17    51   884     0     111  length
 36491    51   238    24    51   884     0      89  >
 36492    51   238    26    51   884     0     111  rem
 36493    51   238    29    51   884     0      60  )
 36494    51   239    17    51   884     0      20  throw
 36495    51   239    27    51   884     0     111  BufferUnderflowException
 36496    51   239    51    51   884     0      59  (
 36497    51   239    52    51   884     0      60  )
 36498    51   239    53    51   884     0     102  ;
 36499    51   241    13    51   884     0      31  if
 36500    51   241    16    51   884     0      59  (
 36501    51   241    17    51   884     0     111  order
 36502    51   241    22    51   884     0      59  (
 36503    51   241    23    51   884     0      60  )
 36504    51   241    25    51   884     0      71  !=
 36505    51   241    28    51   884     0     111  ByteOrder.nativeOrder
 36506    51   241    49    51   884     0      59  (
 36507    51   241    50    51   884     0      60  )
 36508    51   241    51    51   884     0      60  )
 36509    51   242    17    51   884     0     111  Bits.copyToLongArray
 36510    51   242    37    51   884     0      59  (
 36511    51   242    38    51   884     0     111  ix
 36512    51   242    40    51   884     0      59  (
 36513    51   242    41    51   884     0     111  pos
 36514    51   242    44    51   884     0      60  )
 36515    51   242    45    51   884     0      66  ,
 36516    51   242    47    51   884     0     111  dst
 36517    51   242    50    51   884     0      66  ,
 36518    51   243    43    51   884     0     111  offset
 36519    51   243    50    51   884     0      90  <<
 36520    51   243    53    51   884     0     112  3
 36521    51   243    54    51   884     0      66  ,
 36522    51   244    43    51   884     0     111  length
 36523    51   244    50    51   884     0      90  <<
 36524    51   244    53    51   884     0     112  3
 36525    51   244    54    51   884     0      60  )
 36526    51   244    55    51   884     0     102  ;
 36527    51   245    13    51   884     0      48  else
 36528    51   246    17    51   884     0     111  Bits.copyToByteArray
 36529    51   246    37    51   884     0      59  (
 36530    51   246    38    51   884     0     111  ix
 36531    51   246    40    51   884     0      59  (
 36532    51   246    41    51   884     0     111  pos
 36533    51   246    44    51   884     0      60  )
 36534    51   246    45    51   884     0      66  ,
 36535    51   246    47    51   884     0     111  dst
 36536    51   246    50    51   884     0      66  ,
 36537    51   247    38    51   884     0     111  offset
 36538    51   247    45    51   884     0      90  <<
 36539    51   247    48    51   884     0     112  3
 36540    51   247    49    51   884     0      66  ,
 36541    51   248    38    51   884     0     111  length
 36542    51   248    45    51   884     0      90  <<
 36543    51   248    48    51   884     0     112  3
 36544    51   248    49    51   884     0      60  )
 36545    51   248    50    51   884     0     102  ;
 36546    51   249    13    51   884     0     111  position
 36547    51   249    21    51   884     0      59  (
 36548    51   249    22    51   884     0     111  pos
 36549    51   249    26    51   884     0      74  +
 36550    51   249    28    51   884     0     111  length
 36551    51   249    34    51   884     0      60  )
 36552    51   249    35    51   884     0     102  ;
 36553    51   250     9    51   884     0      64  }
 36554    51   250    11    51   884     0      48  else
 36555    51   250    16    51   884     0      63  {
 36556    51   251    13    51   884     0     111  super.get
 36557    51   251    22    51   884     0      59  (
 36558    51   251    23    51   884     0     111  dst
 36559    51   251    26    51   884     0      66  ,
 36560    51   251    28    51   884     0     111  offset
 36561    51   251    34    51   884     0      66  ,
 36562    51   251    36    51   884     0     111  length
 36563    51   251    42    51   884     0      60  )
 36564    51   251    43    51   884     0     102  ;
 36565    51   252     9    51   884     0      64  }
 36566    51   253     9    51   884     0      19  return
 36567    51   253    16    51   884     0      44  this
 36568    51   253    20    51   884     0     102  ;
 36569    51   257     5    51   884     0      64  }
 36570    51   257     5    51   884     0    2096  ENDMETHOD
 36571    51   257     5    51   885     0    2097  STARTMETHOD
 36572    51   261    12    51   885     0     111  LongBuffer
 36573    51   261    23    51   885     0     111  put
 36574    51   261    26    51   885     0      59  (
 36575    51   261    27    51   885     0      53  long
 36576    51   261    32    51   885     0     111  x
 36577    51   261    33    51   885     0      60  )
 36578    51   261    35    51   885     0      63  {
 36579    51   263     9    51   885     0     111  unsafe.putLong
 36580    51   263    23    51   885     0      59  (
 36581    51   263    24    51   885     0     111  ix
 36582    51   263    26    51   885     0      59  (
 36583    51   263    27    51   885     0     111  nextPutIndex
 36584    51   263    39    51   885     0      59  (
 36585    51   263    40    51   885     0      60  )
 36586    51   263    41    51   885     0      60  )
 36587    51   263    42    51   885     0      66  ,
 36588    51   263    44    51   885     0     111  Bits.swap
 36589    51   263    53    51   885     0      59  (
 36590    51   263    54    51   885     0      59  (
 36591    51   263    55    51   885     0     111  x
 36592    51   263    56    51   885     0      60  )
 36593    51   263    57    51   885     0      60  )
 36594    51   263    58    51   885     0      60  )
 36595    51   263    59    51   885     0     102  ;
 36596    51   264     9    51   885     0      19  return
 36597    51   264    16    51   885     0      44  this
 36598    51   264    20    51   885     0     102  ;
 36599    51   268     5    51   885     0      64  }
 36600    51   268     5    51   885     0    2098  ENDMETHOD
 36601    51   268     5    51   886     0    2099  STARTMETHOD
 36602    51   270    12    51   886     0     111  LongBuffer
 36603    51   270    23    51   886     0     111  put
 36604    51   270    26    51   886     0      59  (
 36605    51   270    27    51   886     0      36  int
 36606    51   270    31    51   886     0     111  i
 36607    51   270    32    51   886     0      66  ,
 36608    51   270    34    51   886     0      53  long
 36609    51   270    39    51   886     0     111  x
 36610    51   270    40    51   886     0      60  )
 36611    51   270    42    51   886     0      63  {
 36612    51   272     9    51   886     0     111  unsafe.putLong
 36613    51   272    23    51   886     0      59  (
 36614    51   272    24    51   886     0     111  ix
 36615    51   272    26    51   886     0      59  (
 36616    51   272    27    51   886     0     111  checkIndex
 36617    51   272    37    51   886     0      59  (
 36618    51   272    38    51   886     0     111  i
 36619    51   272    39    51   886     0      60  )
 36620    51   272    40    51   886     0      60  )
 36621    51   272    41    51   886     0      66  ,
 36622    51   272    43    51   886     0     111  Bits.swap
 36623    51   272    52    51   886     0      59  (
 36624    51   272    53    51   886     0      59  (
 36625    51   272    54    51   886     0     111  x
 36626    51   272    55    51   886     0      60  )
 36627    51   272    56    51   886     0      60  )
 36628    51   272    57    51   886     0      60  )
 36629    51   272    58    51   886     0     102  ;
 36630    51   273     9    51   886     0      19  return
 36631    51   273    16    51   886     0      44  this
 36632    51   273    20    51   886     0     102  ;
 36633    51   277     5    51   886     0      64  }
 36634    51   277     5    51   886     0    2100  ENDMETHOD
 36635    51   277     5    51   887     0    2101  STARTMETHOD
 36636    51   279    12    51   887     0     111  LongBuffer
 36637    51   279    23    51   887     0     111  put
 36638    51   279    26    51   887     0      59  (
 36639    51   279    27    51   887     0     111  LongBuffer
 36640    51   279    38    51   887     0     111  src
 36641    51   279    41    51   887     0      60  )
 36642    51   279    43    51   887     0      63  {
 36643    51   281     9    51   887     0      31  if
 36644    51   281    12    51   887     0      59  (
 36645    51   281    13    51   887     0     111  src
 36646    51   281    28    51   887     0     111  DirectLongBufferS
 36647    51   281    45    51   887     0      60  )
 36648    51   281    47    51   887     0      63  {
 36649    51   282    13    51   887     0      31  if
 36650    51   282    16    51   887     0      59  (
 36651    51   282    17    51   887     0     111  src
 36652    51   282    21    51   887     0      68  ==
 36653    51   282    24    51   887     0      44  this
 36654    51   282    28    51   887     0      60  )
 36655    51   283    17    51   887     0      20  throw
 36656    51   283    27    51   887     0     111  IllegalArgumentException
 36657    51   283    51    51   887     0      59  (
 36658    51   283    52    51   887     0      60  )
 36659    51   283    53    51   887     0     102  ;
 36660    51   284    13    51   887     0     111  DirectLongBufferS
 36661    51   284    31    51   887     0     111  sb
 36662    51   284    34    51   887     0      67  =
 36663    51   284    36    51   887     0      59  (
 36664    51   284    37    51   887     0     111  DirectLongBufferS
 36665    51   284    54    51   887     0      60  )
 36666    51   284    55    51   887     0     111  src
 36667    51   284    58    51   887     0     102  ;
 36668    51   286    13    51   887     1      36  int
 36669    51   286    17    51   887     1     111  spos
 36670    51   286    22    51   887     1      67  =
 36671    51   286    24    51   887     1     111  sb.position
 36672    51   286    35    51   887     1      59  (
 36673    51   286    36    51   887     1      60  )
 36674    51   286    37    51   887     1     102  ;
 36675    51   287    13    51   887     1      36  int
 36676    51   287    17    51   887     1     111  slim
 36677    51   287    22    51   887     1      67  =
 36678    51   287    24    51   887     1     111  sb.limit
 36679    51   287    32    51   887     1      59  (
 36680    51   287    33    51   887     1      60  )
 36681    51   287    34    51   887     1     102  ;
 36682    51   288    13    51   887     0     111  assert
 36683    51   288    20    51   887     0      59  (
 36684    51   288    21    51   887     0     111  spos
 36685    51   288    26    51   887     0      92  <=
 36686    51   288    29    51   887     0     111  slim
 36687    51   288    33    51   887     0      60  )
 36688    51   288    34    51   887     0     102  ;
 36689    51   289    13    51   887     0      36  int
 36690    51   289    17    51   887     0     111  srem
 36691    51   289    22    51   887     0      67  =
 36692    51   289    24    51   887     0      59  (
 36693    51   289    25    51   887     0     111  spos
 36694    51   289    30    51   887     0      92  <=
 36695    51   289    33    51   887     0     111  slim
 36696    51   289    38    51   887     0      58  ?
 36697    51   289    40    51   887     0     111  slim
 36698    51   289    45    51   887     0      77  -
 36699    51   289    47    51   887     0     111  spos
 36700    51   289    52    51   887     0      65  :
 36701    51   289    54    51   887     0     112  0
 36702    51   289    55    51   887     0      60  )
 36703    51   289    56    51   887     0     102  ;
 36704    51   291    13    51   887     1      36  int
 36705    51   291    17    51   887     1     111  pos
 36706    51   291    21    51   887     1      67  =
 36707    51   291    23    51   887     1     111  position
 36708    51   291    31    51   887     1      59  (
 36709    51   291    32    51   887     1      60  )
 36710    51   291    33    51   887     1     102  ;
 36711    51   292    13    51   887     1      36  int
 36712    51   292    17    51   887     1     111  lim
 36713    51   292    21    51   887     1      67  =
 36714    51   292    23    51   887     1     111  limit
 36715    51   292    28    51   887     1      59  (
 36716    51   292    29    51   887     1      60  )
 36717    51   292    30    51   887     1     102  ;
 36718    51   293    13    51   887     0     111  assert
 36719    51   293    20    51   887     0      59  (
 36720    51   293    21    51   887     0     111  pos
 36721    51   293    25    51   887     0      92  <=
 36722    51   293    28    51   887     0     111  lim
 36723    51   293    31    51   887     0      60  )
 36724    51   293    32    51   887     0     102  ;
 36725    51   294    13    51   887     0      36  int
 36726    51   294    17    51   887     0     111  rem
 36727    51   294    21    51   887     0      67  =
 36728    51   294    23    51   887     0      59  (
 36729    51   294    24    51   887     0     111  pos
 36730    51   294    28    51   887     0      92  <=
 36731    51   294    31    51   887     0     111  lim
 36732    51   294    35    51   887     0      58  ?
 36733    51   294    37    51   887     0     111  lim
 36734    51   294    41    51   887     0      77  -
 36735    51   294    43    51   887     0     111  pos
 36736    51   294    47    51   887     0      65  :
 36737    51   294    49    51   887     0     112  0
 36738    51   294    50    51   887     0      60  )
 36739    51   294    51    51   887     0     102  ;
 36740    51   296    13    51   887     0      31  if
 36741    51   296    16    51   887     0      59  (
 36742    51   296    17    51   887     0     111  srem
 36743    51   296    22    51   887     0      89  >
 36744    51   296    24    51   887     0     111  rem
 36745    51   296    27    51   887     0      60  )
 36746    51   297    17    51   887     0      20  throw
 36747    51   297    27    51   887     0     111  BufferOverflowException
 36748    51   297    50    51   887     0      59  (
 36749    51   297    51    51   887     0      60  )
 36750    51   297    52    51   887     0     102  ;
 36751    51   298    13    51   887     0     111  unsafe.copyMemory
 36752    51   298    30    51   887     0      59  (
 36753    51   298    31    51   887     0     111  sb.ix
 36754    51   298    36    51   887     0      59  (
 36755    51   298    37    51   887     0     111  spos
 36756    51   298    41    51   887     0      60  )
 36757    51   298    42    51   887     0      66  ,
 36758    51   298    44    51   887     0     111  ix
 36759    51   298    46    51   887     0      59  (
 36760    51   298    47    51   887     0     111  pos
 36761    51   298    50    51   887     0      60  )
 36762    51   298    51    51   887     0      66  ,
 36763    51   298    53    51   887     0     111  srem
 36764    51   298    58    51   887     0      90  <<
 36765    51   298    61    51   887     0     112  3
 36766    51   298    62    51   887     0      60  )
 36767    51   298    63    51   887     0     102  ;
 36768    51   299    13    51   887     1     111  sb.position
 36769    51   299    24    51   887     1      59  (
 36770    51   299    25    51   887     1     111  spos
 36771    51   299    30    51   887     1      74  +
 36772    51   299    32    51   887     1     111  srem
 36773    51   299    36    51   887     1      60  )
 36774    51   299    37    51   887     1     102  ;
 36775    51   300    13    51   887     1     111  position
 36776    51   300    21    51   887     1      59  (
 36777    51   300    22    51   887     1     111  pos
 36778    51   300    26    51   887     1      74  +
 36779    51   300    28    51   887     1     111  srem
 36780    51   300    32    51   887     1      60  )
 36781    51   300    33    51   887     1     102  ;
 36782    51   301     9    51   887     0      64  }
 36783    51   301    11    51   887     0      48  else
 36784    51   301    16    51   887     0      31  if
 36785    51   301    19    51   887     0      59  (
 36786    51   301    20    51   887     0     111  src.hb
 36787    51   301    27    51   887     0      71  !=
 36788    51   301    30    51   887     0      21  null
 36789    51   301    34    51   887     0      60  )
 36790    51   301    36    51   887     0      63  {
 36791    51   303    13    51   887     1      36  int
 36792    51   303    17    51   887     1     111  spos
 36793    51   303    22    51   887     1      67  =
 36794    51   303    24    51   887     1     111  src.position
 36795    51   303    36    51   887     1      59  (
 36796    51   303    37    51   887     1      60  )
 36797    51   303    38    51   887     1     102  ;
 36798    51   304    13    51   887     1      36  int
 36799    51   304    17    51   887     1     111  slim
 36800    51   304    22    51   887     1      67  =
 36801    51   304    24    51   887     1     111  src.limit
 36802    51   304    33    51   887     1      59  (
 36803    51   304    34    51   887     1      60  )
 36804    51   304    35    51   887     1     102  ;
 36805    51   305    13    51   887     0     111  assert
 36806    51   305    20    51   887     0      59  (
 36807    51   305    21    51   887     0     111  spos
 36808    51   305    26    51   887     0      92  <=
 36809    51   305    29    51   887     0     111  slim
 36810    51   305    33    51   887     0      60  )
 36811    51   305    34    51   887     0     102  ;
 36812    51   306    13    51   887     0      36  int
 36813    51   306    17    51   887     0     111  srem
 36814    51   306    22    51   887     0      67  =
 36815    51   306    24    51   887     0      59  (
 36816    51   306    25    51   887     0     111  spos
 36817    51   306    30    51   887     0      92  <=
 36818    51   306    33    51   887     0     111  slim
 36819    51   306    38    51   887     0      58  ?
 36820    51   306    40    51   887     0     111  slim
 36821    51   306    45    51   887     0      77  -
 36822    51   306    47    51   887     0     111  spos
 36823    51   306    52    51   887     0      65  :
 36824    51   306    54    51   887     0     112  0
 36825    51   306    55    51   887     0      60  )
 36826    51   306    56    51   887     0     102  ;
 36827    51   308    13    51   887     0     111  put
 36828    51   308    16    51   887     0      59  (
 36829    51   308    17    51   887     0     111  src.hb
 36830    51   308    23    51   887     0      66  ,
 36831    51   308    25    51   887     0     111  src.offset
 36832    51   308    36    51   887     0      74  +
 36833    51   308    38    51   887     0     111  spos
 36834    51   308    42    51   887     0      66  ,
 36835    51   308    44    51   887     0     111  srem
 36836    51   308    48    51   887     0      60  )
 36837    51   308    49    51   887     0     102  ;
 36838    51   309    13    51   887     0     111  src.position
 36839    51   309    25    51   887     0      59  (
 36840    51   309    26    51   887     0     111  spos
 36841    51   309    31    51   887     0      74  +
 36842    51   309    33    51   887     0     111  srem
 36843    51   309    37    51   887     0      60  )
 36844    51   309    38    51   887     0     102  ;
 36845    51   311     9    51   887     0      64  }
 36846    51   311    11    51   887     0      48  else
 36847    51   311    16    51   887     0      63  {
 36848    51   312    13    51   887     0     111  super.put
 36849    51   312    22    51   887     0      59  (
 36850    51   312    23    51   887     0     111  src
 36851    51   312    26    51   887     0      60  )
 36852    51   312    27    51   887     0     102  ;
 36853    51   313     9    51   887     0      64  }
 36854    51   314     9    51   887     0      19  return
 36855    51   314    16    51   887     0      44  this
 36856    51   314    20    51   887     0     102  ;
 36857    51   318     5    51   887     0      64  }
 36858    51   318     5    51   887     0    2102  ENDMETHOD
 36859    51   318     5    51   888     0    2103  STARTMETHOD
 36860    51   320    12    51   888     0     111  LongBuffer
 36861    51   320    23    51   888     0     111  put
 36862    51   320    26    51   888     0      59  (
 36863    51   320    27    51   888     0      53  long
 36864    51   320    31    51   888     0      61  [
 36865    51   320    32    51   888     0      62  ]
 36866    51   320    34    51   888     0     111  src
 36867    51   320    37    51   888     0      66  ,
 36868    51   320    39    51   888     0      36  int
 36869    51   320    43    51   888     0     111  offset
 36870    51   320    49    51   888     0      66  ,
 36871    51   320    51    51   888     0      36  int
 36872    51   320    55    51   888     0     111  length
 36873    51   320    61    51   888     0      60  )
 36874    51   320    63    51   888     0      63  {
 36875    51   322     9    51   888     0      31  if
 36876    51   322    12    51   888     0      59  (
 36877    51   322    13    51   888     0      59  (
 36878    51   322    14    51   888     0     111  length
 36879    51   322    21    51   888     0      90  <<
 36880    51   322    24    51   888     0     112  3
 36881    51   322    25    51   888     0      60  )
 36882    51   322    27    51   888     0      89  >
 36883    51   322    29    51   888     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 36884    51   322    63    51   888     0      60  )
 36885    51   322    65    51   888     0      63  {
 36886    51   323    13    51   888     0     111  checkBounds
 36887    51   323    24    51   888     0      59  (
 36888    51   323    25    51   888     0     111  offset
 36889    51   323    31    51   888     0      66  ,
 36890    51   323    33    51   888     0     111  length
 36891    51   323    39    51   888     0      66  ,
 36892    51   323    41    51   888     0     111  src.length
 36893    51   323    51    51   888     0      60  )
 36894    51   323    52    51   888     0     102  ;
 36895    51   324    13    51   888     1      36  int
 36896    51   324    17    51   888     1     111  pos
 36897    51   324    21    51   888     1      67  =
 36898    51   324    23    51   888     1     111  position
 36899    51   324    31    51   888     1      59  (
 36900    51   324    32    51   888     1      60  )
 36901    51   324    33    51   888     1     102  ;
 36902    51   325    13    51   888     1      36  int
 36903    51   325    17    51   888     1     111  lim
 36904    51   325    21    51   888     1      67  =
 36905    51   325    23    51   888     1     111  limit
 36906    51   325    28    51   888     1      59  (
 36907    51   325    29    51   888     1      60  )
 36908    51   325    30    51   888     1     102  ;
 36909    51   326    13    51   888     0     111  assert
 36910    51   326    20    51   888     0      59  (
 36911    51   326    21    51   888     0     111  pos
 36912    51   326    25    51   888     0      92  <=
 36913    51   326    28    51   888     0     111  lim
 36914    51   326    31    51   888     0      60  )
 36915    51   326    32    51   888     0     102  ;
 36916    51   327    13    51   888     0      36  int
 36917    51   327    17    51   888     0     111  rem
 36918    51   327    21    51   888     0      67  =
 36919    51   327    23    51   888     0      59  (
 36920    51   327    24    51   888     0     111  pos
 36921    51   327    28    51   888     0      92  <=
 36922    51   327    31    51   888     0     111  lim
 36923    51   327    35    51   888     0      58  ?
 36924    51   327    37    51   888     0     111  lim
 36925    51   327    41    51   888     0      77  -
 36926    51   327    43    51   888     0     111  pos
 36927    51   327    47    51   888     0      65  :
 36928    51   327    49    51   888     0     112  0
 36929    51   327    50    51   888     0      60  )
 36930    51   327    51    51   888     0     102  ;
 36931    51   328    13    51   888     0      31  if
 36932    51   328    16    51   888     0      59  (
 36933    51   328    17    51   888     0     111  length
 36934    51   328    24    51   888     0      89  >
 36935    51   328    26    51   888     0     111  rem
 36936    51   328    29    51   888     0      60  )
 36937    51   329    17    51   888     0      20  throw
 36938    51   329    27    51   888     0     111  BufferOverflowException
 36939    51   329    50    51   888     0      59  (
 36940    51   329    51    51   888     0      60  )
 36941    51   329    52    51   888     0     102  ;
 36942    51   331    13    51   888     0      31  if
 36943    51   331    16    51   888     0      59  (
 36944    51   331    17    51   888     0     111  order
 36945    51   331    22    51   888     0      59  (
 36946    51   331    23    51   888     0      60  )
 36947    51   331    25    51   888     0      71  !=
 36948    51   331    28    51   888     0     111  ByteOrder.nativeOrder
 36949    51   331    49    51   888     0      59  (
 36950    51   331    50    51   888     0      60  )
 36951    51   331    51    51   888     0      60  )
 36952    51   332    17    51   888     0     111  Bits.copyFromLongArray
 36953    51   332    39    51   888     0      59  (
 36954    51   332    40    51   888     0     111  src
 36955    51   332    43    51   888     0      66  ,
 36956    51   332    45    51   888     0     111  offset
 36957    51   332    52    51   888     0      90  <<
 36958    51   332    55    51   888     0     112  3
 36959    51   332    56    51   888     0      66  ,
 36960    51   333    45    51   888     0     111  ix
 36961    51   333    47    51   888     0      59  (
 36962    51   333    48    51   888     0     111  pos
 36963    51   333    51    51   888     0      60  )
 36964    51   333    52    51   888     0      66  ,
 36965    51   333    54    51   888     0     111  length
 36966    51   333    61    51   888     0      90  <<
 36967    51   333    64    51   888     0     112  3
 36968    51   333    65    51   888     0      60  )
 36969    51   333    66    51   888     0     102  ;
 36970    51   334    13    51   888     0      48  else
 36971    51   335    17    51   888     0     111  Bits.copyFromByteArray
 36972    51   335    39    51   888     0      59  (
 36973    51   335    40    51   888     0     111  src
 36974    51   335    43    51   888     0      66  ,
 36975    51   335    45    51   888     0     111  offset
 36976    51   335    52    51   888     0      90  <<
 36977    51   335    55    51   888     0     112  3
 36978    51   335    56    51   888     0      66  ,
 36979    51   336    40    51   888     0     111  ix
 36980    51   336    42    51   888     0      59  (
 36981    51   336    43    51   888     0     111  pos
 36982    51   336    46    51   888     0      60  )
 36983    51   336    47    51   888     0      66  ,
 36984    51   336    49    51   888     0     111  length
 36985    51   336    56    51   888     0      90  <<
 36986    51   336    59    51   888     0     112  3
 36987    51   336    60    51   888     0      60  )
 36988    51   336    61    51   888     0     102  ;
 36989    51   337    13    51   888     0     111  position
 36990    51   337    21    51   888     0      59  (
 36991    51   337    22    51   888     0     111  pos
 36992    51   337    26    51   888     0      74  +
 36993    51   337    28    51   888     0     111  length
 36994    51   337    34    51   888     0      60  )
 36995    51   337    35    51   888     0     102  ;
 36996    51   338     9    51   888     0      64  }
 36997    51   338    11    51   888     0      48  else
 36998    51   338    16    51   888     0      63  {
 36999    51   339    13    51   888     0     111  super.put
 37000    51   339    22    51   888     0      59  (
 37001    51   339    23    51   888     0     111  src
 37002    51   339    26    51   888     0      66  ,
 37003    51   339    28    51   888     0     111  offset
 37004    51   339    34    51   888     0      66  ,
 37005    51   339    36    51   888     0     111  length
 37006    51   339    42    51   888     0      60  )
 37007    51   339    43    51   888     0     102  ;
 37008    51   340     9    51   888     0      64  }
 37009    51   341     9    51   888     0      19  return
 37010    51   341    16    51   888     0      44  this
 37011    51   341    20    51   888     0     102  ;
 37012    51   345     5    51   888     0      64  }
 37013    51   345     5    51   888     0    2104  ENDMETHOD
 37014    51   345     5    51   889     0    2105  STARTMETHOD
 37015    51   347    12    51   889     0     111  LongBuffer
 37016    51   347    23    51   889     0     111  compact
 37017    51   347    30    51   889     0      59  (
 37018    51   347    31    51   889     0      60  )
 37019    51   347    33    51   889     0      63  {
 37020    51   349     9    51   889     1      36  int
 37021    51   349    13    51   889     1     111  pos
 37022    51   349    17    51   889     1      67  =
 37023    51   349    19    51   889     1     111  position
 37024    51   349    27    51   889     1      59  (
 37025    51   349    28    51   889     1      60  )
 37026    51   349    29    51   889     1     102  ;
 37027    51   350     9    51   889     1      36  int
 37028    51   350    13    51   889     1     111  lim
 37029    51   350    17    51   889     1      67  =
 37030    51   350    19    51   889     1     111  limit
 37031    51   350    24    51   889     1      59  (
 37032    51   350    25    51   889     1      60  )
 37033    51   350    26    51   889     1     102  ;
 37034    51   351     9    51   889     0     111  assert
 37035    51   351    16    51   889     0      59  (
 37036    51   351    17    51   889     0     111  pos
 37037    51   351    21    51   889     0      92  <=
 37038    51   351    24    51   889     0     111  lim
 37039    51   351    27    51   889     0      60  )
 37040    51   351    28    51   889     0     102  ;
 37041    51   352     9    51   889     0      36  int
 37042    51   352    13    51   889     0     111  rem
 37043    51   352    17    51   889     0      67  =
 37044    51   352    19    51   889     0      59  (
 37045    51   352    20    51   889     0     111  pos
 37046    51   352    24    51   889     0      92  <=
 37047    51   352    27    51   889     0     111  lim
 37048    51   352    31    51   889     0      58  ?
 37049    51   352    33    51   889     0     111  lim
 37050    51   352    37    51   889     0      77  -
 37051    51   352    39    51   889     0     111  pos
 37052    51   352    43    51   889     0      65  :
 37053    51   352    45    51   889     0     112  0
 37054    51   352    46    51   889     0      60  )
 37055    51   352    47    51   889     0     102  ;
 37056    51   354     9    51   889     0     111  unsafe.copyMemory
 37057    51   354    26    51   889     0      59  (
 37058    51   354    27    51   889     0     111  ix
 37059    51   354    29    51   889     0      59  (
 37060    51   354    30    51   889     0     111  pos
 37061    51   354    33    51   889     0      60  )
 37062    51   354    34    51   889     0      66  ,
 37063    51   354    36    51   889     0     111  ix
 37064    51   354    38    51   889     0      59  (
 37065    51   354    39    51   889     0     112  0
 37066    51   354    40    51   889     0      60  )
 37067    51   354    41    51   889     0      66  ,
 37068    51   354    43    51   889     0     111  rem
 37069    51   354    47    51   889     0      90  <<
 37070    51   354    50    51   889     0     112  3
 37071    51   354    51    51   889     0      60  )
 37072    51   354    52    51   889     0     102  ;
 37073    51   355     9    51   889     0     111  position
 37074    51   355    17    51   889     0      59  (
 37075    51   355    18    51   889     0     111  rem
 37076    51   355    21    51   889     0      60  )
 37077    51   355    22    51   889     0     102  ;
 37078    51   356     9    51   889     0     111  limit
 37079    51   356    14    51   889     0      59  (
 37080    51   356    15    51   889     0     111  capacity
 37081    51   356    23    51   889     0      59  (
 37082    51   356    24    51   889     0      60  )
 37083    51   356    25    51   889     0      60  )
 37084    51   356    26    51   889     0     102  ;
 37085    51   357     9    51   889     0     111  clearMark
 37086    51   357    18    51   889     0      59  (
 37087    51   357    19    51   889     0      60  )
 37088    51   357    20    51   889     0     102  ;
 37089    51   358     9    51   889     0      19  return
 37090    51   358    16    51   889     0      44  this
 37091    51   358    20    51   889     1     102  ;
 37092    51   362     5    51   889     1      64  }
 37093    51   362     5    51   889     0    2106  ENDMETHOD
 37094    51   362     5    51   890     0    2107  STARTMETHOD
 37095    51   364    12    51   890     0      39  boolean
 37096    51   364    20    51   890     0     111  isDirect
 37097    51   364    28    51   890     0      59  (
 37098    51   364    29    51   890     0      60  )
 37099    51   364    31    51   890     0      63  {
 37100    51   365     9    51   890     0      19  return
 37101    51   365    16    51   890     0      52  true
 37102    51   365    20    51   890     1     102  ;
 37103    51   366     5    51   890     1      64  }
 37104    51   366     5    51   890     0    2108  ENDMETHOD
 37105    51   366     5    51   891     0    2109  STARTMETHOD
 37106    51   368    12    51   891     0      39  boolean
 37107    51   368    20    51   891     0     111  isReadOnly
 37108    51   368    30    51   891     0      59  (
 37109    51   368    31    51   891     0      60  )
 37110    51   368    33    51   891     0      63  {
 37111    51   369     9    51   891     0      19  return
 37112    51   369    16    51   891     0      43  false
 37113    51   369    21    51   891     1     102  ;
 37114    51   370     5    51   891     1      64  }
 37115    51   370     5    51   891     0    2110  ENDMETHOD
 37116    51   370     5    51   892     0    2111  STARTMETHOD
 37117    51   416    12    51   892     0     111  ByteOrder
 37118    51   416    22    51   892     0     111  order
 37119    51   416    27    51   892     0      59  (
 37120    51   416    28    51   892     0      60  )
 37121    51   416    30    51   892     0      63  {
 37122    51   418     9    51   892     0      19  return
 37123    51   418    16    51   892     0      59  (
 37124    51   418    17    51   892     0      59  (
 37125    51   418    18    51   892     0     111  ByteOrder.nativeOrder
 37126    51   418    39    51   892     0      59  (
 37127    51   418    40    51   892     0      60  )
 37128    51   418    42    51   892     0      68  ==
 37129    51   418    45    51   892     0     111  ByteOrder.BIG_ENDIAN
 37130    51   418    65    51   892     0      60  )
 37131    51   419    17    51   892     0      58  ?
 37132    51   419    19    51   892     0     111  ByteOrder.LITTLE_ENDIAN
 37133    51   419    43    51   892     0      65  :
 37134    51   419    45    51   892     0     111  ByteOrder.BIG_ENDIAN
 37135    51   419    65    51   892     0      60  )
 37136    51   419    66    51   892     0     102  ;
 37137    51   425     5    51   892     0      64  }
 37138    51   425     5    51   892     0    2112  ENDMETHOD
 37139    51   452     1    51    -1     0      64  }
 37140    51   452     1    51    -1     1    2113  ENDCLASS
 37141    51   452     1    -1    -1     1    2114  ENDFILE C:\Users\RA\javasrc\java\nio\DirectLongBufferS.java
 37142    52     1     1    -1    -1     1    2115  STARTFILE C:\Users\RA\javasrc\java\nio\DirectLongBufferU.java
 37143    52    28     9    -1    -1     0     111  java.nio
 37144    52    28    17    -1    -1     0     102  ;
 37145    52    30     1    -1    -1     1      49  import
 37146    52    30     8    -1    -1     1     111  sun.misc.Cleaner
 37147    52    30    24    -1    -1     1     102  ;
 37148    52    31     1    -1    -1     1      49  import
 37149    52    31     8    -1    -1     1     111  sun.misc.Unsafe
 37150    52    31    23    -1    -1     1     102  ;
 37151    52    32     1    -1    -1     1      49  import
 37152    52    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 37153    52    32    31    -1    -1     1     102  ;
 37154    52    33     1    -1    -1     1      49  import
 37155    52    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 37156    52    33    34    -1    -1     1     102  ;
 37157    52    36     1    52    -1     0    2116  STARTCLASS
 37158    52    36     1    52    -1     0      24  class
 37159    52    36     7    52    -1     0     111  DirectLongBufferU
 37160    52    38     5    52    -1     0      38  extends
 37161    52    38    13    52    -1     0     111  LongBuffer
 37162    52    42     5    52    -1     0      17  implements
 37163    52    42    16    52    -1     0     111  DirectBuffer
 37164    52    43     1    52    -1     0      63  {
 37165    52    48     5    52    -1     0      23  protected
 37166    52    48    15    52    -1     0      45  static
 37167    52    48    28    52    -1     0     111  Unsafe
 37168    52    48    35    52    -1     0     111  unsafe
 37169    52    48    42    52    -1     0      67  =
 37170    52    48    44    52    -1     0     111  Bits.unsafe
 37171    52    48    55    52    -1     0      59  (
 37172    52    48    56    52    -1     0      60  )
 37173    52    48    57    52    -1     0     102  ;
 37174    52    51     5    52    -1     0      23  protected
 37175    52    51    15    52    -1     0      45  static
 37176    52    51    28    52    -1     0      39  boolean
 37177    52    51    36    52    -1     0     111  unaligned
 37178    52    51    46    52    -1     0      67  =
 37179    52    51    48    52    -1     0     111  Bits.unaligned
 37180    52    51    62    52    -1     0      59  (
 37181    52    51    63    52    -1     0      60  )
 37182    52    51    64    52    -1     0     102  ;
 37183    52    59     5    52    -1     0      23  protected
 37184    52    59    15    52    -1     0     111  Object
 37185    52    59    22    52    -1     0     111  viewedBuffer
 37186    52    59    35    52    -1     0      67  =
 37187    52    59    37    52    -1     0      21  null
 37188    52    59    41    52    -1     0     102  ;
 37189    52    59    41    52   893     0    2117  STARTMETHOD
 37190    52    61    12    52   893     0     111  Object
 37191    52    61    19    52   893     0     111  viewedBuffer
 37192    52    61    31    52   893     0      59  (
 37193    52    61    32    52   893     0      60  )
 37194    52    61    34    52   893     0      63  {
 37195    52    62     9    52   893     0      19  return
 37196    52    62    16    52   893     0     111  viewedBuffer
 37197    52    62    28    52   893     0     102  ;
 37198    52    63     5    52   893     0      64  }
 37199    52    63     5    52   893     0    2118  ENDMETHOD
 37200    52    63     5    52   894     0    2119  STARTMETHOD
 37201    52   100    12    52   894     0     111  Cleaner
 37202    52   100    20    52   894     0     111  cleaner
 37203    52   100    27    52   894     0      59  (
 37204    52   100    28    52   894     0      60  )
 37205    52   100    30    52   894     0      63  {
 37206    52   100    32    52   894     0      19  return
 37207    52   100    39    52   894     0      21  null
 37208    52   100    43    52   894     0     102  ;
 37209    52   100    45    52   894     0      64  }
 37210    52   100    45    52   894     0    2120  ENDMETHOD
 37211    52   100    45    52   895     0    2121  STARTMETHOD
 37212    52   164     5    52   895     0     111  DirectLongBufferU
 37213    52   164    22    52   895     0      59  (
 37214    52   164    23    52   895     0     111  DirectBuffer
 37215    52   164    36    52   895     0     111  db
 37216    52   164    38    52   895     0      66  ,
 37217    52   165    32    52   895     0      36  int
 37218    52   165    36    52   895     0     111  mark
 37219    52   165    40    52   895     0      66  ,
 37220    52   165    42    52   895     0      36  int
 37221    52   165    46    52   895     0     111  pos
 37222    52   165    49    52   895     0      66  ,
 37223    52   165    51    52   895     0      36  int
 37224    52   165    55    52   895     0     111  lim
 37225    52   165    58    52   895     0      66  ,
 37226    52   165    60    52   895     0      36  int
 37227    52   165    64    52   895     0     111  cap
 37228    52   165    67    52   895     0      66  ,
 37229    52   166    32    52   895     0      36  int
 37230    52   166    36    52   895     0     111  off
 37231    52   166    39    52   895     0      60  )
 37232    52   167     5    52   895     0      63  {
 37233    52   169     9    52   895     0      27  super
 37234    52   169    14    52   895     0      59  (
 37235    52   169    15    52   895     0     111  mark
 37236    52   169    19    52   895     0      66  ,
 37237    52   169    21    52   895     0     111  pos
 37238    52   169    24    52   895     0      66  ,
 37239    52   169    26    52   895     0     111  lim
 37240    52   169    29    52   895     0      66  ,
 37241    52   169    31    52   895     0     111  cap
 37242    52   169    34    52   895     0      60  )
 37243    52   169    35    52   895     0     102  ;
 37244    52   170     9    52   895     0     111  address
 37245    52   170    17    52   895     0      67  =
 37246    52   170    19    52   895     0     111  db.address
 37247    52   170    29    52   895     0      59  (
 37248    52   170    30    52   895     0      60  )
 37249    52   170    32    52   895     0      74  +
 37250    52   170    34    52   895     0     111  off
 37251    52   170    37    52   895     0     102  ;
 37252    52   171     9    52   895     0     111  viewedBuffer
 37253    52   171    22    52   895     0      67  =
 37254    52   171    24    52   895     0     111  db
 37255    52   171    26    52   895     0     102  ;
 37256    52   178     5    52   895     0      64  }
 37257    52   178     5    52   895     0    2122  ENDMETHOD
 37258    52   178     5    52   896     0    2123  STARTMETHOD
 37259    52   180    12    52   896     0     111  LongBuffer
 37260    52   180    23    52   896     0     111  slice
 37261    52   180    28    52   896     0      59  (
 37262    52   180    29    52   896     0      60  )
 37263    52   180    31    52   896     0      63  {
 37264    52   181     9    52   896     1      36  int
 37265    52   181    13    52   896     1     111  pos
 37266    52   181    17    52   896     1      67  =
 37267    52   181    19    52   896     1     111  this.position
 37268    52   181    32    52   896     1      59  (
 37269    52   181    33    52   896     1      60  )
 37270    52   181    34    52   896     1     102  ;
 37271    52   182     9    52   896     1      36  int
 37272    52   182    13    52   896     1     111  lim
 37273    52   182    17    52   896     1      67  =
 37274    52   182    19    52   896     1     111  this.limit
 37275    52   182    29    52   896     1      59  (
 37276    52   182    30    52   896     1      60  )
 37277    52   182    31    52   896     1     102  ;
 37278    52   183     9    52   896     0     111  assert
 37279    52   183    16    52   896     0      59  (
 37280    52   183    17    52   896     0     111  pos
 37281    52   183    21    52   896     0      92  <=
 37282    52   183    24    52   896     0     111  lim
 37283    52   183    27    52   896     0      60  )
 37284    52   183    28    52   896     0     102  ;
 37285    52   184     9    52   896     0      36  int
 37286    52   184    13    52   896     0     111  rem
 37287    52   184    17    52   896     0      67  =
 37288    52   184    19    52   896     0      59  (
 37289    52   184    20    52   896     0     111  pos
 37290    52   184    24    52   896     0      92  <=
 37291    52   184    27    52   896     0     111  lim
 37292    52   184    31    52   896     0      58  ?
 37293    52   184    33    52   896     0     111  lim
 37294    52   184    37    52   896     0      77  -
 37295    52   184    39    52   896     0     111  pos
 37296    52   184    43    52   896     0      65  :
 37297    52   184    45    52   896     0     112  0
 37298    52   184    46    52   896     0      60  )
 37299    52   184    47    52   896     0     102  ;
 37300    52   185     9    52   896     0      36  int
 37301    52   185    13    52   896     0     111  off
 37302    52   185    17    52   896     0      67  =
 37303    52   185    19    52   896     0      59  (
 37304    52   185    20    52   896     0     111  pos
 37305    52   185    24    52   896     0      90  <<
 37306    52   185    27    52   896     0     112  3
 37307    52   185    28    52   896     0      60  )
 37308    52   185    29    52   896     0     102  ;
 37309    52   186     9    52   896     0     111  assert
 37310    52   186    16    52   896     0      59  (
 37311    52   186    17    52   896     0     111  off
 37312    52   186    21    52   896     0      88  >=
 37313    52   186    24    52   896     0     112  0
 37314    52   186    25    52   896     0      60  )
 37315    52   186    26    52   896     0     102  ;
 37316    52   187     9    52   896     0      19  return
 37317    52   187    20    52   896     0     111  DirectLongBufferU
 37318    52   187    37    52   896     0      59  (
 37319    52   187    38    52   896     0      44  this
 37320    52   187    42    52   896     0      66  ,
 37321    52   187    44    52   896     0      77  -
 37322    52   187    45    52   896     0     112  1
 37323    52   187    46    52   896     0      66  ,
 37324    52   187    48    52   896     0     112  0
 37325    52   187    49    52   896     0      66  ,
 37326    52   187    51    52   896     0     111  rem
 37327    52   187    54    52   896     0      66  ,
 37328    52   187    56    52   896     0     111  rem
 37329    52   187    59    52   896     0      66  ,
 37330    52   187    61    52   896     0     111  off
 37331    52   187    64    52   896     0      60  )
 37332    52   187    65    52   896     0     102  ;
 37333    52   188     5    52   896     0      64  }
 37334    52   188     5    52   896     0    2124  ENDMETHOD
 37335    52   188     5    52   897     0    2125  STARTMETHOD
 37336    52   190    12    52   897     0     111  LongBuffer
 37337    52   190    23    52   897     0     111  duplicate
 37338    52   190    32    52   897     0      59  (
 37339    52   190    33    52   897     0      60  )
 37340    52   190    35    52   897     0      63  {
 37341    52   191     9    52   897     0      19  return
 37342    52   191    20    52   897     0     111  DirectLongBufferU
 37343    52   191    37    52   897     0      59  (
 37344    52   191    38    52   897     0      44  this
 37345    52   191    42    52   897     0      66  ,
 37346    52   192    47    52   897     1     111  this.markValue
 37347    52   192    61    52   897     1      59  (
 37348    52   192    62    52   897     1      60  )
 37349    52   192    63    52   897     1      66  ,
 37350    52   193    47    52   897     1     111  this.position
 37351    52   193    60    52   897     1      59  (
 37352    52   193    61    52   897     1      60  )
 37353    52   193    62    52   897     1      66  ,
 37354    52   194    47    52   897     1     111  this.limit
 37355    52   194    57    52   897     1      59  (
 37356    52   194    58    52   897     1      60  )
 37357    52   194    59    52   897     1      66  ,
 37358    52   195    47    52   897     1     111  this.capacity
 37359    52   195    60    52   897     1      59  (
 37360    52   195    61    52   897     1      60  )
 37361    52   195    62    52   897     1      66  ,
 37362    52   196    47    52   897     0     112  0
 37363    52   196    48    52   897     0      60  )
 37364    52   196    49    52   897     0     102  ;
 37365    52   197     5    52   897     0      64  }
 37366    52   197     5    52   897     0    2126  ENDMETHOD
 37367    52   197     5    52   898     0    2127  STARTMETHOD
 37368    52   199    12    52   898     0     111  LongBuffer
 37369    52   199    23    52   898     0     111  asReadOnlyBuffer
 37370    52   199    39    52   898     0      59  (
 37371    52   199    40    52   898     0      60  )
 37372    52   199    42    52   898     0      63  {
 37373    52   201     9    52   898     0      19  return
 37374    52   201    20    52   898     0     111  DirectLongBufferRU
 37375    52   201    38    52   898     0      59  (
 37376    52   201    39    52   898     0      44  this
 37377    52   201    43    52   898     0      66  ,
 37378    52   202    44    52   898     1     111  this.markValue
 37379    52   202    58    52   898     1      59  (
 37380    52   202    59    52   898     1      60  )
 37381    52   202    60    52   898     1      66  ,
 37382    52   203    44    52   898     1     111  this.position
 37383    52   203    57    52   898     1      59  (
 37384    52   203    58    52   898     1      60  )
 37385    52   203    59    52   898     1      66  ,
 37386    52   204    44    52   898     1     111  this.limit
 37387    52   204    54    52   898     1      59  (
 37388    52   204    55    52   898     1      60  )
 37389    52   204    56    52   898     1      66  ,
 37390    52   205    44    52   898     1     111  this.capacity
 37391    52   205    57    52   898     1      59  (
 37392    52   205    58    52   898     1      60  )
 37393    52   205    59    52   898     1      66  ,
 37394    52   206    44    52   898     0     112  0
 37395    52   206    45    52   898     0      60  )
 37396    52   206    46    52   898     0     102  ;
 37397    52   210     5    52   898     0      64  }
 37398    52   210     5    52   898     0    2128  ENDMETHOD
 37399    52   210     5    52   899     0    2129  STARTMETHOD
 37400    52   214    12    52   899     0      53  long
 37401    52   214    17    52   899     0     111  address
 37402    52   214    24    52   899     0      59  (
 37403    52   214    25    52   899     0      60  )
 37404    52   214    27    52   899     0      63  {
 37405    52   215     9    52   899     0      19  return
 37406    52   215    16    52   899     0     111  address
 37407    52   215    23    52   899     0     102  ;
 37408    52   216     5    52   899     0      64  }
 37409    52   216     5    52   899     0    2130  ENDMETHOD
 37410    52   216     5    52   900     0    2131  STARTMETHOD
 37411    52   218     5    52   900     0      41  private
 37412    52   218    13    52   900     0      53  long
 37413    52   218    18    52   900     0     111  ix
 37414    52   218    20    52   900     0      59  (
 37415    52   218    21    52   900     0      36  int
 37416    52   218    25    52   900     0     111  i
 37417    52   218    26    52   900     0      60  )
 37418    52   218    28    52   900     0      63  {
 37419    52   219     9    52   900     0      19  return
 37420    52   219    16    52   900     0     111  address
 37421    52   219    24    52   900     0      74  +
 37422    52   219    26    52   900     0      59  (
 37423    52   219    27    52   900     0     111  i
 37424    52   219    29    52   900     0      90  <<
 37425    52   219    32    52   900     0     112  3
 37426    52   219    33    52   900     0      60  )
 37427    52   219    34    52   900     0     102  ;
 37428    52   220     5    52   900     0      64  }
 37429    52   220     5    52   900     0    2132  ENDMETHOD
 37430    52   220     5    52   901     0    2133  STARTMETHOD
 37431    52   222    12    52   901     0      53  long
 37432    52   222    17    52   901     0     111  get
 37433    52   222    20    52   901     0      59  (
 37434    52   222    21    52   901     0      60  )
 37435    52   222    23    52   901     0      63  {
 37436    52   223     9    52   901     0      19  return
 37437    52   223    16    52   901     0      59  (
 37438    52   223    17    52   901     0      59  (
 37439    52   223    18    52   901     0     111  unsafe.getLong
 37440    52   223    32    52   901     0      59  (
 37441    52   223    33    52   901     0     111  ix
 37442    52   223    35    52   901     0      59  (
 37443    52   223    36    52   901     0     111  nextGetIndex
 37444    52   223    48    52   901     0      59  (
 37445    52   223    49    52   901     0      60  )
 37446    52   223    50    52   901     0      60  )
 37447    52   223    51    52   901     0      60  )
 37448    52   223    52    52   901     0      60  )
 37449    52   223    53    52   901     0      60  )
 37450    52   223    54    52   901     0     102  ;
 37451    52   224     5    52   901     0      64  }
 37452    52   224     5    52   901     0    2134  ENDMETHOD
 37453    52   224     5    52   902     0    2135  STARTMETHOD
 37454    52   226    12    52   902     0      53  long
 37455    52   226    17    52   902     0     111  get
 37456    52   226    20    52   902     0      59  (
 37457    52   226    21    52   902     0      36  int
 37458    52   226    25    52   902     0     111  i
 37459    52   226    26    52   902     0      60  )
 37460    52   226    28    52   902     0      63  {
 37461    52   227     9    52   902     0      19  return
 37462    52   227    16    52   902     0      59  (
 37463    52   227    17    52   902     0      59  (
 37464    52   227    18    52   902     0     111  unsafe.getLong
 37465    52   227    32    52   902     0      59  (
 37466    52   227    33    52   902     0     111  ix
 37467    52   227    35    52   902     0      59  (
 37468    52   227    36    52   902     0     111  checkIndex
 37469    52   227    46    52   902     0      59  (
 37470    52   227    47    52   902     0     111  i
 37471    52   227    48    52   902     0      60  )
 37472    52   227    49    52   902     0      60  )
 37473    52   227    50    52   902     0      60  )
 37474    52   227    51    52   902     0      60  )
 37475    52   227    52    52   902     0      60  )
 37476    52   227    53    52   902     0     102  ;
 37477    52   228     5    52   902     0      64  }
 37478    52   228     5    52   902     0    2136  ENDMETHOD
 37479    52   228     5    52   903     0    2137  STARTMETHOD
 37480    52   230    12    52   903     0     111  LongBuffer
 37481    52   230    23    52   903     0     111  get
 37482    52   230    26    52   903     0      59  (
 37483    52   230    27    52   903     0      53  long
 37484    52   230    31    52   903     0      61  [
 37485    52   230    32    52   903     0      62  ]
 37486    52   230    34    52   903     0     111  dst
 37487    52   230    37    52   903     0      66  ,
 37488    52   230    39    52   903     0      36  int
 37489    52   230    43    52   903     0     111  offset
 37490    52   230    49    52   903     0      66  ,
 37491    52   230    51    52   903     0      36  int
 37492    52   230    55    52   903     0     111  length
 37493    52   230    61    52   903     0      60  )
 37494    52   230    63    52   903     0      63  {
 37495    52   232     9    52   903     0      31  if
 37496    52   232    12    52   903     0      59  (
 37497    52   232    13    52   903     0      59  (
 37498    52   232    14    52   903     0     111  length
 37499    52   232    21    52   903     0      90  <<
 37500    52   232    24    52   903     0     112  3
 37501    52   232    25    52   903     0      60  )
 37502    52   232    27    52   903     0      89  >
 37503    52   232    29    52   903     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 37504    52   232    61    52   903     0      60  )
 37505    52   232    63    52   903     0      63  {
 37506    52   233    13    52   903     0     111  checkBounds
 37507    52   233    24    52   903     0      59  (
 37508    52   233    25    52   903     0     111  offset
 37509    52   233    31    52   903     0      66  ,
 37510    52   233    33    52   903     0     111  length
 37511    52   233    39    52   903     0      66  ,
 37512    52   233    41    52   903     0     111  dst.length
 37513    52   233    51    52   903     0      60  )
 37514    52   233    52    52   903     0     102  ;
 37515    52   234    13    52   903     1      36  int
 37516    52   234    17    52   903     1     111  pos
 37517    52   234    21    52   903     1      67  =
 37518    52   234    23    52   903     1     111  position
 37519    52   234    31    52   903     1      59  (
 37520    52   234    32    52   903     1      60  )
 37521    52   234    33    52   903     1     102  ;
 37522    52   235    13    52   903     1      36  int
 37523    52   235    17    52   903     1     111  lim
 37524    52   235    21    52   903     1      67  =
 37525    52   235    23    52   903     1     111  limit
 37526    52   235    28    52   903     1      59  (
 37527    52   235    29    52   903     1      60  )
 37528    52   235    30    52   903     1     102  ;
 37529    52   236    13    52   903     0     111  assert
 37530    52   236    20    52   903     0      59  (
 37531    52   236    21    52   903     0     111  pos
 37532    52   236    25    52   903     0      92  <=
 37533    52   236    28    52   903     0     111  lim
 37534    52   236    31    52   903     0      60  )
 37535    52   236    32    52   903     0     102  ;
 37536    52   237    13    52   903     0      36  int
 37537    52   237    17    52   903     0     111  rem
 37538    52   237    21    52   903     0      67  =
 37539    52   237    23    52   903     0      59  (
 37540    52   237    24    52   903     0     111  pos
 37541    52   237    28    52   903     0      92  <=
 37542    52   237    31    52   903     0     111  lim
 37543    52   237    35    52   903     0      58  ?
 37544    52   237    37    52   903     0     111  lim
 37545    52   237    41    52   903     0      77  -
 37546    52   237    43    52   903     0     111  pos
 37547    52   237    47    52   903     0      65  :
 37548    52   237    49    52   903     0     112  0
 37549    52   237    50    52   903     0      60  )
 37550    52   237    51    52   903     0     102  ;
 37551    52   238    13    52   903     0      31  if
 37552    52   238    16    52   903     0      59  (
 37553    52   238    17    52   903     0     111  length
 37554    52   238    24    52   903     0      89  >
 37555    52   238    26    52   903     0     111  rem
 37556    52   238    29    52   903     0      60  )
 37557    52   239    17    52   903     0      20  throw
 37558    52   239    27    52   903     0     111  BufferUnderflowException
 37559    52   239    51    52   903     0      59  (
 37560    52   239    52    52   903     0      60  )
 37561    52   239    53    52   903     0     102  ;
 37562    52   241    13    52   903     0      31  if
 37563    52   241    16    52   903     0      59  (
 37564    52   241    17    52   903     0     111  order
 37565    52   241    22    52   903     0      59  (
 37566    52   241    23    52   903     0      60  )
 37567    52   241    25    52   903     0      71  !=
 37568    52   241    28    52   903     0     111  ByteOrder.nativeOrder
 37569    52   241    49    52   903     0      59  (
 37570    52   241    50    52   903     0      60  )
 37571    52   241    51    52   903     0      60  )
 37572    52   242    17    52   903     0     111  Bits.copyToLongArray
 37573    52   242    37    52   903     0      59  (
 37574    52   242    38    52   903     0     111  ix
 37575    52   242    40    52   903     0      59  (
 37576    52   242    41    52   903     0     111  pos
 37577    52   242    44    52   903     0      60  )
 37578    52   242    45    52   903     0      66  ,
 37579    52   242    47    52   903     0     111  dst
 37580    52   242    50    52   903     0      66  ,
 37581    52   243    43    52   903     0     111  offset
 37582    52   243    50    52   903     0      90  <<
 37583    52   243    53    52   903     0     112  3
 37584    52   243    54    52   903     0      66  ,
 37585    52   244    43    52   903     0     111  length
 37586    52   244    50    52   903     0      90  <<
 37587    52   244    53    52   903     0     112  3
 37588    52   244    54    52   903     0      60  )
 37589    52   244    55    52   903     0     102  ;
 37590    52   245    13    52   903     0      48  else
 37591    52   246    17    52   903     0     111  Bits.copyToByteArray
 37592    52   246    37    52   903     0      59  (
 37593    52   246    38    52   903     0     111  ix
 37594    52   246    40    52   903     0      59  (
 37595    52   246    41    52   903     0     111  pos
 37596    52   246    44    52   903     0      60  )
 37597    52   246    45    52   903     0      66  ,
 37598    52   246    47    52   903     0     111  dst
 37599    52   246    50    52   903     0      66  ,
 37600    52   247    38    52   903     0     111  offset
 37601    52   247    45    52   903     0      90  <<
 37602    52   247    48    52   903     0     112  3
 37603    52   247    49    52   903     0      66  ,
 37604    52   248    38    52   903     0     111  length
 37605    52   248    45    52   903     0      90  <<
 37606    52   248    48    52   903     0     112  3
 37607    52   248    49    52   903     0      60  )
 37608    52   248    50    52   903     0     102  ;
 37609    52   249    13    52   903     0     111  position
 37610    52   249    21    52   903     0      59  (
 37611    52   249    22    52   903     0     111  pos
 37612    52   249    26    52   903     0      74  +
 37613    52   249    28    52   903     0     111  length
 37614    52   249    34    52   903     0      60  )
 37615    52   249    35    52   903     0     102  ;
 37616    52   250     9    52   903     0      64  }
 37617    52   250    11    52   903     0      48  else
 37618    52   250    16    52   903     0      63  {
 37619    52   251    13    52   903     0     111  super.get
 37620    52   251    22    52   903     0      59  (
 37621    52   251    23    52   903     0     111  dst
 37622    52   251    26    52   903     0      66  ,
 37623    52   251    28    52   903     0     111  offset
 37624    52   251    34    52   903     0      66  ,
 37625    52   251    36    52   903     0     111  length
 37626    52   251    42    52   903     0      60  )
 37627    52   251    43    52   903     0     102  ;
 37628    52   252     9    52   903     0      64  }
 37629    52   253     9    52   903     0      19  return
 37630    52   253    16    52   903     0      44  this
 37631    52   253    20    52   903     0     102  ;
 37632    52   257     5    52   903     0      64  }
 37633    52   257     5    52   903     0    2138  ENDMETHOD
 37634    52   257     5    52   904     0    2139  STARTMETHOD
 37635    52   261    12    52   904     0     111  LongBuffer
 37636    52   261    23    52   904     0     111  put
 37637    52   261    26    52   904     0      59  (
 37638    52   261    27    52   904     0      53  long
 37639    52   261    32    52   904     0     111  x
 37640    52   261    33    52   904     0      60  )
 37641    52   261    35    52   904     0      63  {
 37642    52   263     9    52   904     0     111  unsafe.putLong
 37643    52   263    23    52   904     0      59  (
 37644    52   263    24    52   904     0     111  ix
 37645    52   263    26    52   904     0      59  (
 37646    52   263    27    52   904     0     111  nextPutIndex
 37647    52   263    39    52   904     0      59  (
 37648    52   263    40    52   904     0      60  )
 37649    52   263    41    52   904     0      60  )
 37650    52   263    42    52   904     0      66  ,
 37651    52   263    44    52   904     0      59  (
 37652    52   263    45    52   904     0      59  (
 37653    52   263    46    52   904     0     111  x
 37654    52   263    47    52   904     0      60  )
 37655    52   263    48    52   904     0      60  )
 37656    52   263    49    52   904     0      60  )
 37657    52   263    50    52   904     0     102  ;
 37658    52   264     9    52   904     0      19  return
 37659    52   264    16    52   904     0      44  this
 37660    52   264    20    52   904     0     102  ;
 37661    52   268     5    52   904     0      64  }
 37662    52   268     5    52   904     0    2140  ENDMETHOD
 37663    52   268     5    52   905     0    2141  STARTMETHOD
 37664    52   270    12    52   905     0     111  LongBuffer
 37665    52   270    23    52   905     0     111  put
 37666    52   270    26    52   905     0      59  (
 37667    52   270    27    52   905     0      36  int
 37668    52   270    31    52   905     0     111  i
 37669    52   270    32    52   905     0      66  ,
 37670    52   270    34    52   905     0      53  long
 37671    52   270    39    52   905     0     111  x
 37672    52   270    40    52   905     0      60  )
 37673    52   270    42    52   905     0      63  {
 37674    52   272     9    52   905     0     111  unsafe.putLong
 37675    52   272    23    52   905     0      59  (
 37676    52   272    24    52   905     0     111  ix
 37677    52   272    26    52   905     0      59  (
 37678    52   272    27    52   905     0     111  checkIndex
 37679    52   272    37    52   905     0      59  (
 37680    52   272    38    52   905     0     111  i
 37681    52   272    39    52   905     0      60  )
 37682    52   272    40    52   905     0      60  )
 37683    52   272    41    52   905     0      66  ,
 37684    52   272    43    52   905     0      59  (
 37685    52   272    44    52   905     0      59  (
 37686    52   272    45    52   905     0     111  x
 37687    52   272    46    52   905     0      60  )
 37688    52   272    47    52   905     0      60  )
 37689    52   272    48    52   905     0      60  )
 37690    52   272    49    52   905     0     102  ;
 37691    52   273     9    52   905     0      19  return
 37692    52   273    16    52   905     0      44  this
 37693    52   273    20    52   905     0     102  ;
 37694    52   277     5    52   905     0      64  }
 37695    52   277     5    52   905     0    2142  ENDMETHOD
 37696    52   277     5    52   906     0    2143  STARTMETHOD
 37697    52   279    12    52   906     0     111  LongBuffer
 37698    52   279    23    52   906     0     111  put
 37699    52   279    26    52   906     0      59  (
 37700    52   279    27    52   906     0     111  LongBuffer
 37701    52   279    38    52   906     0     111  src
 37702    52   279    41    52   906     0      60  )
 37703    52   279    43    52   906     0      63  {
 37704    52   281     9    52   906     0      31  if
 37705    52   281    12    52   906     0      59  (
 37706    52   281    13    52   906     0     111  src
 37707    52   281    28    52   906     0     111  DirectLongBufferU
 37708    52   281    45    52   906     0      60  )
 37709    52   281    47    52   906     0      63  {
 37710    52   282    13    52   906     0      31  if
 37711    52   282    16    52   906     0      59  (
 37712    52   282    17    52   906     0     111  src
 37713    52   282    21    52   906     0      68  ==
 37714    52   282    24    52   906     0      44  this
 37715    52   282    28    52   906     0      60  )
 37716    52   283    17    52   906     0      20  throw
 37717    52   283    27    52   906     0     111  IllegalArgumentException
 37718    52   283    51    52   906     0      59  (
 37719    52   283    52    52   906     0      60  )
 37720    52   283    53    52   906     0     102  ;
 37721    52   284    13    52   906     0     111  DirectLongBufferU
 37722    52   284    31    52   906     0     111  sb
 37723    52   284    34    52   906     0      67  =
 37724    52   284    36    52   906     0      59  (
 37725    52   284    37    52   906     0     111  DirectLongBufferU
 37726    52   284    54    52   906     0      60  )
 37727    52   284    55    52   906     0     111  src
 37728    52   284    58    52   906     0     102  ;
 37729    52   286    13    52   906     1      36  int
 37730    52   286    17    52   906     1     111  spos
 37731    52   286    22    52   906     1      67  =
 37732    52   286    24    52   906     1     111  sb.position
 37733    52   286    35    52   906     1      59  (
 37734    52   286    36    52   906     1      60  )
 37735    52   286    37    52   906     1     102  ;
 37736    52   287    13    52   906     1      36  int
 37737    52   287    17    52   906     1     111  slim
 37738    52   287    22    52   906     1      67  =
 37739    52   287    24    52   906     1     111  sb.limit
 37740    52   287    32    52   906     1      59  (
 37741    52   287    33    52   906     1      60  )
 37742    52   287    34    52   906     1     102  ;
 37743    52   288    13    52   906     0     111  assert
 37744    52   288    20    52   906     0      59  (
 37745    52   288    21    52   906     0     111  spos
 37746    52   288    26    52   906     0      92  <=
 37747    52   288    29    52   906     0     111  slim
 37748    52   288    33    52   906     0      60  )
 37749    52   288    34    52   906     0     102  ;
 37750    52   289    13    52   906     0      36  int
 37751    52   289    17    52   906     0     111  srem
 37752    52   289    22    52   906     0      67  =
 37753    52   289    24    52   906     0      59  (
 37754    52   289    25    52   906     0     111  spos
 37755    52   289    30    52   906     0      92  <=
 37756    52   289    33    52   906     0     111  slim
 37757    52   289    38    52   906     0      58  ?
 37758    52   289    40    52   906     0     111  slim
 37759    52   289    45    52   906     0      77  -
 37760    52   289    47    52   906     0     111  spos
 37761    52   289    52    52   906     0      65  :
 37762    52   289    54    52   906     0     112  0
 37763    52   289    55    52   906     0      60  )
 37764    52   289    56    52   906     0     102  ;
 37765    52   291    13    52   906     1      36  int
 37766    52   291    17    52   906     1     111  pos
 37767    52   291    21    52   906     1      67  =
 37768    52   291    23    52   906     1     111  position
 37769    52   291    31    52   906     1      59  (
 37770    52   291    32    52   906     1      60  )
 37771    52   291    33    52   906     1     102  ;
 37772    52   292    13    52   906     1      36  int
 37773    52   292    17    52   906     1     111  lim
 37774    52   292    21    52   906     1      67  =
 37775    52   292    23    52   906     1     111  limit
 37776    52   292    28    52   906     1      59  (
 37777    52   292    29    52   906     1      60  )
 37778    52   292    30    52   906     1     102  ;
 37779    52   293    13    52   906     0     111  assert
 37780    52   293    20    52   906     0      59  (
 37781    52   293    21    52   906     0     111  pos
 37782    52   293    25    52   906     0      92  <=
 37783    52   293    28    52   906     0     111  lim
 37784    52   293    31    52   906     0      60  )
 37785    52   293    32    52   906     0     102  ;
 37786    52   294    13    52   906     0      36  int
 37787    52   294    17    52   906     0     111  rem
 37788    52   294    21    52   906     0      67  =
 37789    52   294    23    52   906     0      59  (
 37790    52   294    24    52   906     0     111  pos
 37791    52   294    28    52   906     0      92  <=
 37792    52   294    31    52   906     0     111  lim
 37793    52   294    35    52   906     0      58  ?
 37794    52   294    37    52   906     0     111  lim
 37795    52   294    41    52   906     0      77  -
 37796    52   294    43    52   906     0     111  pos
 37797    52   294    47    52   906     0      65  :
 37798    52   294    49    52   906     0     112  0
 37799    52   294    50    52   906     0      60  )
 37800    52   294    51    52   906     0     102  ;
 37801    52   296    13    52   906     0      31  if
 37802    52   296    16    52   906     0      59  (
 37803    52   296    17    52   906     0     111  srem
 37804    52   296    22    52   906     0      89  >
 37805    52   296    24    52   906     0     111  rem
 37806    52   296    27    52   906     0      60  )
 37807    52   297    17    52   906     0      20  throw
 37808    52   297    27    52   906     0     111  BufferOverflowException
 37809    52   297    50    52   906     0      59  (
 37810    52   297    51    52   906     0      60  )
 37811    52   297    52    52   906     0     102  ;
 37812    52   298    13    52   906     0     111  unsafe.copyMemory
 37813    52   298    30    52   906     0      59  (
 37814    52   298    31    52   906     0     111  sb.ix
 37815    52   298    36    52   906     0      59  (
 37816    52   298    37    52   906     0     111  spos
 37817    52   298    41    52   906     0      60  )
 37818    52   298    42    52   906     0      66  ,
 37819    52   298    44    52   906     0     111  ix
 37820    52   298    46    52   906     0      59  (
 37821    52   298    47    52   906     0     111  pos
 37822    52   298    50    52   906     0      60  )
 37823    52   298    51    52   906     0      66  ,
 37824    52   298    53    52   906     0     111  srem
 37825    52   298    58    52   906     0      90  <<
 37826    52   298    61    52   906     0     112  3
 37827    52   298    62    52   906     0      60  )
 37828    52   298    63    52   906     0     102  ;
 37829    52   299    13    52   906     1     111  sb.position
 37830    52   299    24    52   906     1      59  (
 37831    52   299    25    52   906     1     111  spos
 37832    52   299    30    52   906     1      74  +
 37833    52   299    32    52   906     1     111  srem
 37834    52   299    36    52   906     1      60  )
 37835    52   299    37    52   906     1     102  ;
 37836    52   300    13    52   906     1     111  position
 37837    52   300    21    52   906     1      59  (
 37838    52   300    22    52   906     1     111  pos
 37839    52   300    26    52   906     1      74  +
 37840    52   300    28    52   906     1     111  srem
 37841    52   300    32    52   906     1      60  )
 37842    52   300    33    52   906     1     102  ;
 37843    52   301     9    52   906     0      64  }
 37844    52   301    11    52   906     0      48  else
 37845    52   301    16    52   906     0      31  if
 37846    52   301    19    52   906     0      59  (
 37847    52   301    20    52   906     0     111  src.hb
 37848    52   301    27    52   906     0      71  !=
 37849    52   301    30    52   906     0      21  null
 37850    52   301    34    52   906     0      60  )
 37851    52   301    36    52   906     0      63  {
 37852    52   303    13    52   906     1      36  int
 37853    52   303    17    52   906     1     111  spos
 37854    52   303    22    52   906     1      67  =
 37855    52   303    24    52   906     1     111  src.position
 37856    52   303    36    52   906     1      59  (
 37857    52   303    37    52   906     1      60  )
 37858    52   303    38    52   906     1     102  ;
 37859    52   304    13    52   906     1      36  int
 37860    52   304    17    52   906     1     111  slim
 37861    52   304    22    52   906     1      67  =
 37862    52   304    24    52   906     1     111  src.limit
 37863    52   304    33    52   906     1      59  (
 37864    52   304    34    52   906     1      60  )
 37865    52   304    35    52   906     1     102  ;
 37866    52   305    13    52   906     0     111  assert
 37867    52   305    20    52   906     0      59  (
 37868    52   305    21    52   906     0     111  spos
 37869    52   305    26    52   906     0      92  <=
 37870    52   305    29    52   906     0     111  slim
 37871    52   305    33    52   906     0      60  )
 37872    52   305    34    52   906     0     102  ;
 37873    52   306    13    52   906     0      36  int
 37874    52   306    17    52   906     0     111  srem
 37875    52   306    22    52   906     0      67  =
 37876    52   306    24    52   906     0      59  (
 37877    52   306    25    52   906     0     111  spos
 37878    52   306    30    52   906     0      92  <=
 37879    52   306    33    52   906     0     111  slim
 37880    52   306    38    52   906     0      58  ?
 37881    52   306    40    52   906     0     111  slim
 37882    52   306    45    52   906     0      77  -
 37883    52   306    47    52   906     0     111  spos
 37884    52   306    52    52   906     0      65  :
 37885    52   306    54    52   906     0     112  0
 37886    52   306    55    52   906     0      60  )
 37887    52   306    56    52   906     0     102  ;
 37888    52   308    13    52   906     0     111  put
 37889    52   308    16    52   906     0      59  (
 37890    52   308    17    52   906     0     111  src.hb
 37891    52   308    23    52   906     0      66  ,
 37892    52   308    25    52   906     0     111  src.offset
 37893    52   308    36    52   906     0      74  +
 37894    52   308    38    52   906     0     111  spos
 37895    52   308    42    52   906     0      66  ,
 37896    52   308    44    52   906     0     111  srem
 37897    52   308    48    52   906     0      60  )
 37898    52   308    49    52   906     0     102  ;
 37899    52   309    13    52   906     0     111  src.position
 37900    52   309    25    52   906     0      59  (
 37901    52   309    26    52   906     0     111  spos
 37902    52   309    31    52   906     0      74  +
 37903    52   309    33    52   906     0     111  srem
 37904    52   309    37    52   906     0      60  )
 37905    52   309    38    52   906     0     102  ;
 37906    52   311     9    52   906     0      64  }
 37907    52   311    11    52   906     0      48  else
 37908    52   311    16    52   906     0      63  {
 37909    52   312    13    52   906     0     111  super.put
 37910    52   312    22    52   906     0      59  (
 37911    52   312    23    52   906     0     111  src
 37912    52   312    26    52   906     0      60  )
 37913    52   312    27    52   906     0     102  ;
 37914    52   313     9    52   906     0      64  }
 37915    52   314     9    52   906     0      19  return
 37916    52   314    16    52   906     0      44  this
 37917    52   314    20    52   906     0     102  ;
 37918    52   318     5    52   906     0      64  }
 37919    52   318     5    52   906     0    2144  ENDMETHOD
 37920    52   318     5    52   907     0    2145  STARTMETHOD
 37921    52   320    12    52   907     0     111  LongBuffer
 37922    52   320    23    52   907     0     111  put
 37923    52   320    26    52   907     0      59  (
 37924    52   320    27    52   907     0      53  long
 37925    52   320    31    52   907     0      61  [
 37926    52   320    32    52   907     0      62  ]
 37927    52   320    34    52   907     0     111  src
 37928    52   320    37    52   907     0      66  ,
 37929    52   320    39    52   907     0      36  int
 37930    52   320    43    52   907     0     111  offset
 37931    52   320    49    52   907     0      66  ,
 37932    52   320    51    52   907     0      36  int
 37933    52   320    55    52   907     0     111  length
 37934    52   320    61    52   907     0      60  )
 37935    52   320    63    52   907     0      63  {
 37936    52   322     9    52   907     0      31  if
 37937    52   322    12    52   907     0      59  (
 37938    52   322    13    52   907     0      59  (
 37939    52   322    14    52   907     0     111  length
 37940    52   322    21    52   907     0      90  <<
 37941    52   322    24    52   907     0     112  3
 37942    52   322    25    52   907     0      60  )
 37943    52   322    27    52   907     0      89  >
 37944    52   322    29    52   907     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 37945    52   322    63    52   907     0      60  )
 37946    52   322    65    52   907     0      63  {
 37947    52   323    13    52   907     0     111  checkBounds
 37948    52   323    24    52   907     0      59  (
 37949    52   323    25    52   907     0     111  offset
 37950    52   323    31    52   907     0      66  ,
 37951    52   323    33    52   907     0     111  length
 37952    52   323    39    52   907     0      66  ,
 37953    52   323    41    52   907     0     111  src.length
 37954    52   323    51    52   907     0      60  )
 37955    52   323    52    52   907     0     102  ;
 37956    52   324    13    52   907     1      36  int
 37957    52   324    17    52   907     1     111  pos
 37958    52   324    21    52   907     1      67  =
 37959    52   324    23    52   907     1     111  position
 37960    52   324    31    52   907     1      59  (
 37961    52   324    32    52   907     1      60  )
 37962    52   324    33    52   907     1     102  ;
 37963    52   325    13    52   907     1      36  int
 37964    52   325    17    52   907     1     111  lim
 37965    52   325    21    52   907     1      67  =
 37966    52   325    23    52   907     1     111  limit
 37967    52   325    28    52   907     1      59  (
 37968    52   325    29    52   907     1      60  )
 37969    52   325    30    52   907     1     102  ;
 37970    52   326    13    52   907     0     111  assert
 37971    52   326    20    52   907     0      59  (
 37972    52   326    21    52   907     0     111  pos
 37973    52   326    25    52   907     0      92  <=
 37974    52   326    28    52   907     0     111  lim
 37975    52   326    31    52   907     0      60  )
 37976    52   326    32    52   907     0     102  ;
 37977    52   327    13    52   907     0      36  int
 37978    52   327    17    52   907     0     111  rem
 37979    52   327    21    52   907     0      67  =
 37980    52   327    23    52   907     0      59  (
 37981    52   327    24    52   907     0     111  pos
 37982    52   327    28    52   907     0      92  <=
 37983    52   327    31    52   907     0     111  lim
 37984    52   327    35    52   907     0      58  ?
 37985    52   327    37    52   907     0     111  lim
 37986    52   327    41    52   907     0      77  -
 37987    52   327    43    52   907     0     111  pos
 37988    52   327    47    52   907     0      65  :
 37989    52   327    49    52   907     0     112  0
 37990    52   327    50    52   907     0      60  )
 37991    52   327    51    52   907     0     102  ;
 37992    52   328    13    52   907     0      31  if
 37993    52   328    16    52   907     0      59  (
 37994    52   328    17    52   907     0     111  length
 37995    52   328    24    52   907     0      89  >
 37996    52   328    26    52   907     0     111  rem
 37997    52   328    29    52   907     0      60  )
 37998    52   329    17    52   907     0      20  throw
 37999    52   329    27    52   907     0     111  BufferOverflowException
 38000    52   329    50    52   907     0      59  (
 38001    52   329    51    52   907     0      60  )
 38002    52   329    52    52   907     0     102  ;
 38003    52   331    13    52   907     0      31  if
 38004    52   331    16    52   907     0      59  (
 38005    52   331    17    52   907     0     111  order
 38006    52   331    22    52   907     0      59  (
 38007    52   331    23    52   907     0      60  )
 38008    52   331    25    52   907     0      71  !=
 38009    52   331    28    52   907     0     111  ByteOrder.nativeOrder
 38010    52   331    49    52   907     0      59  (
 38011    52   331    50    52   907     0      60  )
 38012    52   331    51    52   907     0      60  )
 38013    52   332    17    52   907     0     111  Bits.copyFromLongArray
 38014    52   332    39    52   907     0      59  (
 38015    52   332    40    52   907     0     111  src
 38016    52   332    43    52   907     0      66  ,
 38017    52   332    45    52   907     0     111  offset
 38018    52   332    52    52   907     0      90  <<
 38019    52   332    55    52   907     0     112  3
 38020    52   332    56    52   907     0      66  ,
 38021    52   333    45    52   907     0     111  ix
 38022    52   333    47    52   907     0      59  (
 38023    52   333    48    52   907     0     111  pos
 38024    52   333    51    52   907     0      60  )
 38025    52   333    52    52   907     0      66  ,
 38026    52   333    54    52   907     0     111  length
 38027    52   333    61    52   907     0      90  <<
 38028    52   333    64    52   907     0     112  3
 38029    52   333    65    52   907     0      60  )
 38030    52   333    66    52   907     0     102  ;
 38031    52   334    13    52   907     0      48  else
 38032    52   335    17    52   907     0     111  Bits.copyFromByteArray
 38033    52   335    39    52   907     0      59  (
 38034    52   335    40    52   907     0     111  src
 38035    52   335    43    52   907     0      66  ,
 38036    52   335    45    52   907     0     111  offset
 38037    52   335    52    52   907     0      90  <<
 38038    52   335    55    52   907     0     112  3
 38039    52   335    56    52   907     0      66  ,
 38040    52   336    40    52   907     0     111  ix
 38041    52   336    42    52   907     0      59  (
 38042    52   336    43    52   907     0     111  pos
 38043    52   336    46    52   907     0      60  )
 38044    52   336    47    52   907     0      66  ,
 38045    52   336    49    52   907     0     111  length
 38046    52   336    56    52   907     0      90  <<
 38047    52   336    59    52   907     0     112  3
 38048    52   336    60    52   907     0      60  )
 38049    52   336    61    52   907     0     102  ;
 38050    52   337    13    52   907     0     111  position
 38051    52   337    21    52   907     0      59  (
 38052    52   337    22    52   907     0     111  pos
 38053    52   337    26    52   907     0      74  +
 38054    52   337    28    52   907     0     111  length
 38055    52   337    34    52   907     0      60  )
 38056    52   337    35    52   907     0     102  ;
 38057    52   338     9    52   907     0      64  }
 38058    52   338    11    52   907     0      48  else
 38059    52   338    16    52   907     0      63  {
 38060    52   339    13    52   907     0     111  super.put
 38061    52   339    22    52   907     0      59  (
 38062    52   339    23    52   907     0     111  src
 38063    52   339    26    52   907     0      66  ,
 38064    52   339    28    52   907     0     111  offset
 38065    52   339    34    52   907     0      66  ,
 38066    52   339    36    52   907     0     111  length
 38067    52   339    42    52   907     0      60  )
 38068    52   339    43    52   907     0     102  ;
 38069    52   340     9    52   907     0      64  }
 38070    52   341     9    52   907     0      19  return
 38071    52   341    16    52   907     0      44  this
 38072    52   341    20    52   907     0     102  ;
 38073    52   345     5    52   907     0      64  }
 38074    52   345     5    52   907     0    2146  ENDMETHOD
 38075    52   345     5    52   908     0    2147  STARTMETHOD
 38076    52   347    12    52   908     0     111  LongBuffer
 38077    52   347    23    52   908     0     111  compact
 38078    52   347    30    52   908     0      59  (
 38079    52   347    31    52   908     0      60  )
 38080    52   347    33    52   908     0      63  {
 38081    52   349     9    52   908     1      36  int
 38082    52   349    13    52   908     1     111  pos
 38083    52   349    17    52   908     1      67  =
 38084    52   349    19    52   908     1     111  position
 38085    52   349    27    52   908     1      59  (
 38086    52   349    28    52   908     1      60  )
 38087    52   349    29    52   908     1     102  ;
 38088    52   350     9    52   908     1      36  int
 38089    52   350    13    52   908     1     111  lim
 38090    52   350    17    52   908     1      67  =
 38091    52   350    19    52   908     1     111  limit
 38092    52   350    24    52   908     1      59  (
 38093    52   350    25    52   908     1      60  )
 38094    52   350    26    52   908     1     102  ;
 38095    52   351     9    52   908     0     111  assert
 38096    52   351    16    52   908     0      59  (
 38097    52   351    17    52   908     0     111  pos
 38098    52   351    21    52   908     0      92  <=
 38099    52   351    24    52   908     0     111  lim
 38100    52   351    27    52   908     0      60  )
 38101    52   351    28    52   908     0     102  ;
 38102    52   352     9    52   908     0      36  int
 38103    52   352    13    52   908     0     111  rem
 38104    52   352    17    52   908     0      67  =
 38105    52   352    19    52   908     0      59  (
 38106    52   352    20    52   908     0     111  pos
 38107    52   352    24    52   908     0      92  <=
 38108    52   352    27    52   908     0     111  lim
 38109    52   352    31    52   908     0      58  ?
 38110    52   352    33    52   908     0     111  lim
 38111    52   352    37    52   908     0      77  -
 38112    52   352    39    52   908     0     111  pos
 38113    52   352    43    52   908     0      65  :
 38114    52   352    45    52   908     0     112  0
 38115    52   352    46    52   908     0      60  )
 38116    52   352    47    52   908     0     102  ;
 38117    52   354     9    52   908     0     111  unsafe.copyMemory
 38118    52   354    26    52   908     0      59  (
 38119    52   354    27    52   908     0     111  ix
 38120    52   354    29    52   908     0      59  (
 38121    52   354    30    52   908     0     111  pos
 38122    52   354    33    52   908     0      60  )
 38123    52   354    34    52   908     0      66  ,
 38124    52   354    36    52   908     0     111  ix
 38125    52   354    38    52   908     0      59  (
 38126    52   354    39    52   908     0     112  0
 38127    52   354    40    52   908     0      60  )
 38128    52   354    41    52   908     0      66  ,
 38129    52   354    43    52   908     0     111  rem
 38130    52   354    47    52   908     0      90  <<
 38131    52   354    50    52   908     0     112  3
 38132    52   354    51    52   908     0      60  )
 38133    52   354    52    52   908     0     102  ;
 38134    52   355     9    52   908     0     111  position
 38135    52   355    17    52   908     0      59  (
 38136    52   355    18    52   908     0     111  rem
 38137    52   355    21    52   908     0      60  )
 38138    52   355    22    52   908     0     102  ;
 38139    52   356     9    52   908     0     111  limit
 38140    52   356    14    52   908     0      59  (
 38141    52   356    15    52   908     0     111  capacity
 38142    52   356    23    52   908     0      59  (
 38143    52   356    24    52   908     0      60  )
 38144    52   356    25    52   908     0      60  )
 38145    52   356    26    52   908     0     102  ;
 38146    52   357     9    52   908     0     111  clearMark
 38147    52   357    18    52   908     0      59  (
 38148    52   357    19    52   908     0      60  )
 38149    52   357    20    52   908     0     102  ;
 38150    52   358     9    52   908     0      19  return
 38151    52   358    16    52   908     0      44  this
 38152    52   358    20    52   908     1     102  ;
 38153    52   362     5    52   908     1      64  }
 38154    52   362     5    52   908     0    2148  ENDMETHOD
 38155    52   362     5    52   909     0    2149  STARTMETHOD
 38156    52   364    12    52   909     0      39  boolean
 38157    52   364    20    52   909     0     111  isDirect
 38158    52   364    28    52   909     0      59  (
 38159    52   364    29    52   909     0      60  )
 38160    52   364    31    52   909     0      63  {
 38161    52   365     9    52   909     0      19  return
 38162    52   365    16    52   909     0      52  true
 38163    52   365    20    52   909     1     102  ;
 38164    52   366     5    52   909     1      64  }
 38165    52   366     5    52   909     0    2150  ENDMETHOD
 38166    52   366     5    52   910     0    2151  STARTMETHOD
 38167    52   368    12    52   910     0      39  boolean
 38168    52   368    20    52   910     0     111  isReadOnly
 38169    52   368    30    52   910     0      59  (
 38170    52   368    31    52   910     0      60  )
 38171    52   368    33    52   910     0      63  {
 38172    52   369     9    52   910     0      19  return
 38173    52   369    16    52   910     0      43  false
 38174    52   369    21    52   910     1     102  ;
 38175    52   370     5    52   910     1      64  }
 38176    52   370     5    52   910     0    2152  ENDMETHOD
 38177    52   370     5    52   911     0    2153  STARTMETHOD
 38178    52   416    12    52   911     0     111  ByteOrder
 38179    52   416    22    52   911     0     111  order
 38180    52   416    27    52   911     0      59  (
 38181    52   416    28    52   911     0      60  )
 38182    52   416    30    52   911     0      63  {
 38183    52   422     9    52   911     0      19  return
 38184    52   422    16    52   911     0      59  (
 38185    52   422    17    52   911     0      59  (
 38186    52   422    18    52   911     0     111  ByteOrder.nativeOrder
 38187    52   422    39    52   911     0      59  (
 38188    52   422    40    52   911     0      60  )
 38189    52   422    42    52   911     0      71  !=
 38190    52   422    45    52   911     0     111  ByteOrder.BIG_ENDIAN
 38191    52   422    65    52   911     0      60  )
 38192    52   423    17    52   911     0      58  ?
 38193    52   423    19    52   911     0     111  ByteOrder.LITTLE_ENDIAN
 38194    52   423    43    52   911     0      65  :
 38195    52   423    45    52   911     0     111  ByteOrder.BIG_ENDIAN
 38196    52   423    65    52   911     0      60  )
 38197    52   423    66    52   911     0     102  ;
 38198    52   425     5    52   911     0      64  }
 38199    52   425     5    52   911     0    2154  ENDMETHOD
 38200    52   452     1    52    -1     0      64  }
 38201    52   452     1    52    -1     1    2155  ENDCLASS
 38202    52   452     1    -1    -1     1    2156  ENDFILE C:\Users\RA\javasrc\java\nio\DirectLongBufferU.java
 38203    53     1     1    -1    -1     1    2157  STARTFILE C:\Users\RA\javasrc\java\nio\DirectShortBufferRS.java
 38204    53    28     9    -1    -1     0     111  java.nio
 38205    53    28    17    -1    -1     0     102  ;
 38206    53    30     1    -1    -1     1      49  import
 38207    53    30     8    -1    -1     1     111  sun.misc.Cleaner
 38208    53    30    24    -1    -1     1     102  ;
 38209    53    31     1    -1    -1     1      49  import
 38210    53    31     8    -1    -1     1     111  sun.misc.Unsafe
 38211    53    31    23    -1    -1     1     102  ;
 38212    53    32     1    -1    -1     1      49  import
 38213    53    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 38214    53    32    31    -1    -1     1     102  ;
 38215    53    33     1    -1    -1     1      49  import
 38216    53    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 38217    53    33    34    -1    -1     1     102  ;
 38218    53    36     1    53    -1     0    2158  STARTCLASS
 38219    53    36     1    53    -1     0      24  class
 38220    53    36     7    53    -1     0     111  DirectShortBufferRS
 38221    53    40     5    53    -1     0      38  extends
 38222    53    40    13    53    -1     0     111  DirectShortBufferS
 38223    53    42     5    53    -1     0      17  implements
 38224    53    42    16    53    -1     0     111  DirectBuffer
 38225    53    43     1    53    -1     0      63  {
 38226    53    43     1    53   912     0    2159  STARTMETHOD
 38227    53   164     5    53   912     0     111  DirectShortBufferRS
 38228    53   164    24    53   912     0      59  (
 38229    53   164    25    53   912     0     111  DirectBuffer
 38230    53   164    38    53   912     0     111  db
 38231    53   164    40    53   912     0      66  ,
 38232    53   165    32    53   912     0      36  int
 38233    53   165    36    53   912     0     111  mark
 38234    53   165    40    53   912     0      66  ,
 38235    53   165    42    53   912     0      36  int
 38236    53   165    46    53   912     0     111  pos
 38237    53   165    49    53   912     0      66  ,
 38238    53   165    51    53   912     0      36  int
 38239    53   165    55    53   912     0     111  lim
 38240    53   165    58    53   912     0      66  ,
 38241    53   165    60    53   912     0      36  int
 38242    53   165    64    53   912     0     111  cap
 38243    53   165    67    53   912     0      66  ,
 38244    53   166    32    53   912     0      36  int
 38245    53   166    36    53   912     0     111  off
 38246    53   166    39    53   912     0      60  )
 38247    53   167     5    53   912     0      63  {
 38248    53   176     9    53   912     0      27  super
 38249    53   176    14    53   912     0      59  (
 38250    53   176    15    53   912     0     111  db
 38251    53   176    17    53   912     0      66  ,
 38252    53   176    19    53   912     0     111  mark
 38253    53   176    23    53   912     0      66  ,
 38254    53   176    25    53   912     0     111  pos
 38255    53   176    28    53   912     0      66  ,
 38256    53   176    30    53   912     0     111  lim
 38257    53   176    33    53   912     0      66  ,
 38258    53   176    35    53   912     0     111  cap
 38259    53   176    38    53   912     0      66  ,
 38260    53   176    40    53   912     0     111  off
 38261    53   176    43    53   912     0      60  )
 38262    53   176    44    53   912     0     102  ;
 38263    53   178     5    53   912     0      64  }
 38264    53   178     5    53   912     0    2160  ENDMETHOD
 38265    53   178     5    53   913     0    2161  STARTMETHOD
 38266    53   180    12    53   913     0     111  ShortBuffer
 38267    53   180    24    53   913     0     111  slice
 38268    53   180    29    53   913     0      59  (
 38269    53   180    30    53   913     0      60  )
 38270    53   180    32    53   913     0      63  {
 38271    53   181     9    53   913     1      36  int
 38272    53   181    13    53   913     1     111  pos
 38273    53   181    17    53   913     1      67  =
 38274    53   181    19    53   913     1     111  this.position
 38275    53   181    32    53   913     1      59  (
 38276    53   181    33    53   913     1      60  )
 38277    53   181    34    53   913     1     102  ;
 38278    53   182     9    53   913     1      36  int
 38279    53   182    13    53   913     1     111  lim
 38280    53   182    17    53   913     1      67  =
 38281    53   182    19    53   913     1     111  this.limit
 38282    53   182    29    53   913     1      59  (
 38283    53   182    30    53   913     1      60  )
 38284    53   182    31    53   913     1     102  ;
 38285    53   183     9    53   913     0     111  assert
 38286    53   183    16    53   913     0      59  (
 38287    53   183    17    53   913     0     111  pos
 38288    53   183    21    53   913     0      92  <=
 38289    53   183    24    53   913     0     111  lim
 38290    53   183    27    53   913     0      60  )
 38291    53   183    28    53   913     0     102  ;
 38292    53   184     9    53   913     0      36  int
 38293    53   184    13    53   913     0     111  rem
 38294    53   184    17    53   913     0      67  =
 38295    53   184    19    53   913     0      59  (
 38296    53   184    20    53   913     0     111  pos
 38297    53   184    24    53   913     0      92  <=
 38298    53   184    27    53   913     0     111  lim
 38299    53   184    31    53   913     0      58  ?
 38300    53   184    33    53   913     0     111  lim
 38301    53   184    37    53   913     0      77  -
 38302    53   184    39    53   913     0     111  pos
 38303    53   184    43    53   913     0      65  :
 38304    53   184    45    53   913     0     112  0
 38305    53   184    46    53   913     0      60  )
 38306    53   184    47    53   913     0     102  ;
 38307    53   185     9    53   913     0      36  int
 38308    53   185    13    53   913     0     111  off
 38309    53   185    17    53   913     0      67  =
 38310    53   185    19    53   913     0      59  (
 38311    53   185    20    53   913     0     111  pos
 38312    53   185    24    53   913     0      90  <<
 38313    53   185    27    53   913     0     112  1
 38314    53   185    28    53   913     0      60  )
 38315    53   185    29    53   913     0     102  ;
 38316    53   186     9    53   913     0     111  assert
 38317    53   186    16    53   913     0      59  (
 38318    53   186    17    53   913     0     111  off
 38319    53   186    21    53   913     0      88  >=
 38320    53   186    24    53   913     0     112  0
 38321    53   186    25    53   913     0      60  )
 38322    53   186    26    53   913     0     102  ;
 38323    53   187     9    53   913     0      19  return
 38324    53   187    20    53   913     0     111  DirectShortBufferRS
 38325    53   187    39    53   913     0      59  (
 38326    53   187    40    53   913     0      44  this
 38327    53   187    44    53   913     0      66  ,
 38328    53   187    46    53   913     0      77  -
 38329    53   187    47    53   913     0     112  1
 38330    53   187    48    53   913     0      66  ,
 38331    53   187    50    53   913     0     112  0
 38332    53   187    51    53   913     0      66  ,
 38333    53   187    53    53   913     0     111  rem
 38334    53   187    56    53   913     0      66  ,
 38335    53   187    58    53   913     0     111  rem
 38336    53   187    61    53   913     0      66  ,
 38337    53   187    63    53   913     0     111  off
 38338    53   187    66    53   913     0      60  )
 38339    53   187    67    53   913     0     102  ;
 38340    53   188     5    53   913     0      64  }
 38341    53   188     5    53   913     0    2162  ENDMETHOD
 38342    53   188     5    53   914     0    2163  STARTMETHOD
 38343    53   190    12    53   914     0     111  ShortBuffer
 38344    53   190    24    53   914     0     111  duplicate
 38345    53   190    33    53   914     0      59  (
 38346    53   190    34    53   914     0      60  )
 38347    53   190    36    53   914     0      63  {
 38348    53   191     9    53   914     0      19  return
 38349    53   191    20    53   914     0     111  DirectShortBufferRS
 38350    53   191    39    53   914     0      59  (
 38351    53   191    40    53   914     0      44  this
 38352    53   191    44    53   914     0      66  ,
 38353    53   192    47    53   914     1     111  this.markValue
 38354    53   192    61    53   914     1      59  (
 38355    53   192    62    53   914     1      60  )
 38356    53   192    63    53   914     1      66  ,
 38357    53   193    47    53   914     1     111  this.position
 38358    53   193    60    53   914     1      59  (
 38359    53   193    61    53   914     1      60  )
 38360    53   193    62    53   914     1      66  ,
 38361    53   194    47    53   914     1     111  this.limit
 38362    53   194    57    53   914     1      59  (
 38363    53   194    58    53   914     1      60  )
 38364    53   194    59    53   914     1      66  ,
 38365    53   195    47    53   914     1     111  this.capacity
 38366    53   195    60    53   914     1      59  (
 38367    53   195    61    53   914     1      60  )
 38368    53   195    62    53   914     1      66  ,
 38369    53   196    47    53   914     0     112  0
 38370    53   196    48    53   914     0      60  )
 38371    53   196    49    53   914     0     102  ;
 38372    53   197     5    53   914     0      64  }
 38373    53   197     5    53   914     0    2164  ENDMETHOD
 38374    53   197     5    53   915     0    2165  STARTMETHOD
 38375    53   199    12    53   915     0     111  ShortBuffer
 38376    53   199    24    53   915     0     111  asReadOnlyBuffer
 38377    53   199    40    53   915     0      59  (
 38378    53   199    41    53   915     0      60  )
 38379    53   199    43    53   915     0      63  {
 38380    53   208     9    53   915     0      19  return
 38381    53   208    16    53   915     0     111  duplicate
 38382    53   208    25    53   915     0      59  (
 38383    53   208    26    53   915     0      60  )
 38384    53   208    27    53   915     0     102  ;
 38385    53   210     5    53   915     0      64  }
 38386    53   210     5    53   915     0    2166  ENDMETHOD
 38387    53   210     5    53   916     0    2167  STARTMETHOD
 38388    53   261    12    53   916     0     111  ShortBuffer
 38389    53   261    24    53   916     0     111  put
 38390    53   261    27    53   916     0      59  (
 38391    53   261    34    53   916     0     111  x
 38392    53   261    35    53   916     0      60  )
 38393    53   261    37    53   916     0      63  {
 38394    53   266     9    53   916     0      20  throw
 38395    53   266    19    53   916     0     111  ReadOnlyBufferException
 38396    53   266    42    53   916     0      59  (
 38397    53   266    43    53   916     0      60  )
 38398    53   266    44    53   916     0     102  ;
 38399    53   268     5    53   916     0      64  }
 38400    53   268     5    53   916     0    2168  ENDMETHOD
 38401    53   268     5    53   917     0    2169  STARTMETHOD
 38402    53   270    12    53   917     0     111  ShortBuffer
 38403    53   270    24    53   917     0     111  put
 38404    53   270    27    53   917     0      59  (
 38405    53   270    28    53   917     0      36  int
 38406    53   270    32    53   917     0     111  i
 38407    53   270    33    53   917     0      66  ,
 38408    53   270    41    53   917     0     111  x
 38409    53   270    42    53   917     0      60  )
 38410    53   270    44    53   917     0      63  {
 38411    53   275     9    53   917     0      20  throw
 38412    53   275    19    53   917     0     111  ReadOnlyBufferException
 38413    53   275    42    53   917     0      59  (
 38414    53   275    43    53   917     0      60  )
 38415    53   275    44    53   917     0     102  ;
 38416    53   277     5    53   917     0      64  }
 38417    53   277     5    53   917     0    2170  ENDMETHOD
 38418    53   277     5    53   918     0    2171  STARTMETHOD
 38419    53   279    12    53   918     0     111  ShortBuffer
 38420    53   279    24    53   918     0     111  put
 38421    53   279    27    53   918     0      59  (
 38422    53   279    28    53   918     0     111  ShortBuffer
 38423    53   279    40    53   918     0     111  src
 38424    53   279    43    53   918     0      60  )
 38425    53   279    45    53   918     0      63  {
 38426    53   316     9    53   918     0      20  throw
 38427    53   316    19    53   918     0     111  ReadOnlyBufferException
 38428    53   316    42    53   918     0      59  (
 38429    53   316    43    53   918     0      60  )
 38430    53   316    44    53   918     0     102  ;
 38431    53   318     5    53   918     0      64  }
 38432    53   318     5    53   918     0    2172  ENDMETHOD
 38433    53   318     5    53   919     0    2173  STARTMETHOD
 38434    53   320    12    53   919     0     111  ShortBuffer
 38435    53   320    24    53   919     0     111  put
 38436    53   320    27    53   919     0      59  (
 38437    53   320    33    53   919     0      61  [
 38438    53   320    34    53   919     0      62  ]
 38439    53   320    36    53   919     0     111  src
 38440    53   320    39    53   919     0      66  ,
 38441    53   320    41    53   919     0      36  int
 38442    53   320    45    53   919     0     111  offset
 38443    53   320    51    53   919     0      66  ,
 38444    53   320    53    53   919     0      36  int
 38445    53   320    57    53   919     0     111  length
 38446    53   320    63    53   919     0      60  )
 38447    53   320    65    53   919     0      63  {
 38448    53   343     9    53   919     0      20  throw
 38449    53   343    19    53   919     0     111  ReadOnlyBufferException
 38450    53   343    42    53   919     0      59  (
 38451    53   343    43    53   919     0      60  )
 38452    53   343    44    53   919     0     102  ;
 38453    53   345     5    53   919     0      64  }
 38454    53   345     5    53   919     0    2174  ENDMETHOD
 38455    53   345     5    53   920     0    2175  STARTMETHOD
 38456    53   347    12    53   920     0     111  ShortBuffer
 38457    53   347    24    53   920     0     111  compact
 38458    53   347    31    53   920     0      59  (
 38459    53   347    32    53   920     0      60  )
 38460    53   347    34    53   920     0      63  {
 38461    53   360     9    53   920     0      20  throw
 38462    53   360    19    53   920     0     111  ReadOnlyBufferException
 38463    53   360    42    53   920     0      59  (
 38464    53   360    43    53   920     0      60  )
 38465    53   360    44    53   920     1     102  ;
 38466    53   362     5    53   920     1      64  }
 38467    53   362     5    53   920     0    2176  ENDMETHOD
 38468    53   362     5    53   921     0    2177  STARTMETHOD
 38469    53   364    12    53   921     0      39  boolean
 38470    53   364    20    53   921     0     111  isDirect
 38471    53   364    28    53   921     0      59  (
 38472    53   364    29    53   921     0      60  )
 38473    53   364    31    53   921     0      63  {
 38474    53   365     9    53   921     0      19  return
 38475    53   365    16    53   921     0      52  true
 38476    53   365    20    53   921     1     102  ;
 38477    53   366     5    53   921     1      64  }
 38478    53   366     5    53   921     0    2178  ENDMETHOD
 38479    53   366     5    53   922     0    2179  STARTMETHOD
 38480    53   368    12    53   922     0      39  boolean
 38481    53   368    20    53   922     0     111  isReadOnly
 38482    53   368    30    53   922     0      59  (
 38483    53   368    31    53   922     0      60  )
 38484    53   368    33    53   922     0      63  {
 38485    53   369     9    53   922     0      19  return
 38486    53   369    16    53   922     0      52  true
 38487    53   369    20    53   922     1     102  ;
 38488    53   370     5    53   922     1      64  }
 38489    53   370     5    53   922     0    2180  ENDMETHOD
 38490    53   370     5    53   923     0    2181  STARTMETHOD
 38491    53   416    12    53   923     0     111  ByteOrder
 38492    53   416    22    53   923     0     111  order
 38493    53   416    27    53   923     0      59  (
 38494    53   416    28    53   923     0      60  )
 38495    53   416    30    53   923     0      63  {
 38496    53   418     9    53   923     0      19  return
 38497    53   418    16    53   923     0      59  (
 38498    53   418    17    53   923     0      59  (
 38499    53   418    18    53   923     0     111  ByteOrder.nativeOrder
 38500    53   418    39    53   923     0      59  (
 38501    53   418    40    53   923     0      60  )
 38502    53   418    42    53   923     0      68  ==
 38503    53   418    45    53   923     0     111  ByteOrder.BIG_ENDIAN
 38504    53   418    65    53   923     0      60  )
 38505    53   419    17    53   923     0      58  ?
 38506    53   419    19    53   923     0     111  ByteOrder.LITTLE_ENDIAN
 38507    53   419    43    53   923     0      65  :
 38508    53   419    45    53   923     0     111  ByteOrder.BIG_ENDIAN
 38509    53   419    65    53   923     0      60  )
 38510    53   419    66    53   923     0     102  ;
 38511    53   425     5    53   923     0      64  }
 38512    53   425     5    53   923     0    2182  ENDMETHOD
 38513    53   452     1    53    -1     0      64  }
 38514    53   452     1    53    -1     1    2183  ENDCLASS
 38515    53   452     1    -1    -1     1    2184  ENDFILE C:\Users\RA\javasrc\java\nio\DirectShortBufferRS.java
 38516    54     1     1    -1    -1     1    2185  STARTFILE C:\Users\RA\javasrc\java\nio\DirectShortBufferRU.java
 38517    54    28     9    -1    -1     0     111  java.nio
 38518    54    28    17    -1    -1     0     102  ;
 38519    54    30     1    -1    -1     1      49  import
 38520    54    30     8    -1    -1     1     111  sun.misc.Cleaner
 38521    54    30    24    -1    -1     1     102  ;
 38522    54    31     1    -1    -1     1      49  import
 38523    54    31     8    -1    -1     1     111  sun.misc.Unsafe
 38524    54    31    23    -1    -1     1     102  ;
 38525    54    32     1    -1    -1     1      49  import
 38526    54    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 38527    54    32    31    -1    -1     1     102  ;
 38528    54    33     1    -1    -1     1      49  import
 38529    54    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 38530    54    33    34    -1    -1     1     102  ;
 38531    54    36     1    54    -1     0    2186  STARTCLASS
 38532    54    36     1    54    -1     0      24  class
 38533    54    36     7    54    -1     0     111  DirectShortBufferRU
 38534    54    40     5    54    -1     0      38  extends
 38535    54    40    13    54    -1     0     111  DirectShortBufferU
 38536    54    42     5    54    -1     0      17  implements
 38537    54    42    16    54    -1     0     111  DirectBuffer
 38538    54    43     1    54    -1     0      63  {
 38539    54    43     1    54   924     0    2187  STARTMETHOD
 38540    54   164     5    54   924     0     111  DirectShortBufferRU
 38541    54   164    24    54   924     0      59  (
 38542    54   164    25    54   924     0     111  DirectBuffer
 38543    54   164    38    54   924     0     111  db
 38544    54   164    40    54   924     0      66  ,
 38545    54   165    32    54   924     0      36  int
 38546    54   165    36    54   924     0     111  mark
 38547    54   165    40    54   924     0      66  ,
 38548    54   165    42    54   924     0      36  int
 38549    54   165    46    54   924     0     111  pos
 38550    54   165    49    54   924     0      66  ,
 38551    54   165    51    54   924     0      36  int
 38552    54   165    55    54   924     0     111  lim
 38553    54   165    58    54   924     0      66  ,
 38554    54   165    60    54   924     0      36  int
 38555    54   165    64    54   924     0     111  cap
 38556    54   165    67    54   924     0      66  ,
 38557    54   166    32    54   924     0      36  int
 38558    54   166    36    54   924     0     111  off
 38559    54   166    39    54   924     0      60  )
 38560    54   167     5    54   924     0      63  {
 38561    54   176     9    54   924     0      27  super
 38562    54   176    14    54   924     0      59  (
 38563    54   176    15    54   924     0     111  db
 38564    54   176    17    54   924     0      66  ,
 38565    54   176    19    54   924     0     111  mark
 38566    54   176    23    54   924     0      66  ,
 38567    54   176    25    54   924     0     111  pos
 38568    54   176    28    54   924     0      66  ,
 38569    54   176    30    54   924     0     111  lim
 38570    54   176    33    54   924     0      66  ,
 38571    54   176    35    54   924     0     111  cap
 38572    54   176    38    54   924     0      66  ,
 38573    54   176    40    54   924     0     111  off
 38574    54   176    43    54   924     0      60  )
 38575    54   176    44    54   924     0     102  ;
 38576    54   178     5    54   924     0      64  }
 38577    54   178     5    54   924     0    2188  ENDMETHOD
 38578    54   178     5    54   925     0    2189  STARTMETHOD
 38579    54   180    12    54   925     0     111  ShortBuffer
 38580    54   180    24    54   925     0     111  slice
 38581    54   180    29    54   925     0      59  (
 38582    54   180    30    54   925     0      60  )
 38583    54   180    32    54   925     0      63  {
 38584    54   181     9    54   925     1      36  int
 38585    54   181    13    54   925     1     111  pos
 38586    54   181    17    54   925     1      67  =
 38587    54   181    19    54   925     1     111  this.position
 38588    54   181    32    54   925     1      59  (
 38589    54   181    33    54   925     1      60  )
 38590    54   181    34    54   925     1     102  ;
 38591    54   182     9    54   925     1      36  int
 38592    54   182    13    54   925     1     111  lim
 38593    54   182    17    54   925     1      67  =
 38594    54   182    19    54   925     1     111  this.limit
 38595    54   182    29    54   925     1      59  (
 38596    54   182    30    54   925     1      60  )
 38597    54   182    31    54   925     1     102  ;
 38598    54   183     9    54   925     0     111  assert
 38599    54   183    16    54   925     0      59  (
 38600    54   183    17    54   925     0     111  pos
 38601    54   183    21    54   925     0      92  <=
 38602    54   183    24    54   925     0     111  lim
 38603    54   183    27    54   925     0      60  )
 38604    54   183    28    54   925     0     102  ;
 38605    54   184     9    54   925     0      36  int
 38606    54   184    13    54   925     0     111  rem
 38607    54   184    17    54   925     0      67  =
 38608    54   184    19    54   925     0      59  (
 38609    54   184    20    54   925     0     111  pos
 38610    54   184    24    54   925     0      92  <=
 38611    54   184    27    54   925     0     111  lim
 38612    54   184    31    54   925     0      58  ?
 38613    54   184    33    54   925     0     111  lim
 38614    54   184    37    54   925     0      77  -
 38615    54   184    39    54   925     0     111  pos
 38616    54   184    43    54   925     0      65  :
 38617    54   184    45    54   925     0     112  0
 38618    54   184    46    54   925     0      60  )
 38619    54   184    47    54   925     0     102  ;
 38620    54   185     9    54   925     0      36  int
 38621    54   185    13    54   925     0     111  off
 38622    54   185    17    54   925     0      67  =
 38623    54   185    19    54   925     0      59  (
 38624    54   185    20    54   925     0     111  pos
 38625    54   185    24    54   925     0      90  <<
 38626    54   185    27    54   925     0     112  1
 38627    54   185    28    54   925     0      60  )
 38628    54   185    29    54   925     0     102  ;
 38629    54   186     9    54   925     0     111  assert
 38630    54   186    16    54   925     0      59  (
 38631    54   186    17    54   925     0     111  off
 38632    54   186    21    54   925     0      88  >=
 38633    54   186    24    54   925     0     112  0
 38634    54   186    25    54   925     0      60  )
 38635    54   186    26    54   925     0     102  ;
 38636    54   187     9    54   925     0      19  return
 38637    54   187    20    54   925     0     111  DirectShortBufferRU
 38638    54   187    39    54   925     0      59  (
 38639    54   187    40    54   925     0      44  this
 38640    54   187    44    54   925     0      66  ,
 38641    54   187    46    54   925     0      77  -
 38642    54   187    47    54   925     0     112  1
 38643    54   187    48    54   925     0      66  ,
 38644    54   187    50    54   925     0     112  0
 38645    54   187    51    54   925     0      66  ,
 38646    54   187    53    54   925     0     111  rem
 38647    54   187    56    54   925     0      66  ,
 38648    54   187    58    54   925     0     111  rem
 38649    54   187    61    54   925     0      66  ,
 38650    54   187    63    54   925     0     111  off
 38651    54   187    66    54   925     0      60  )
 38652    54   187    67    54   925     0     102  ;
 38653    54   188     5    54   925     0      64  }
 38654    54   188     5    54   925     0    2190  ENDMETHOD
 38655    54   188     5    54   926     0    2191  STARTMETHOD
 38656    54   190    12    54   926     0     111  ShortBuffer
 38657    54   190    24    54   926     0     111  duplicate
 38658    54   190    33    54   926     0      59  (
 38659    54   190    34    54   926     0      60  )
 38660    54   190    36    54   926     0      63  {
 38661    54   191     9    54   926     0      19  return
 38662    54   191    20    54   926     0     111  DirectShortBufferRU
 38663    54   191    39    54   926     0      59  (
 38664    54   191    40    54   926     0      44  this
 38665    54   191    44    54   926     0      66  ,
 38666    54   192    47    54   926     1     111  this.markValue
 38667    54   192    61    54   926     1      59  (
 38668    54   192    62    54   926     1      60  )
 38669    54   192    63    54   926     1      66  ,
 38670    54   193    47    54   926     1     111  this.position
 38671    54   193    60    54   926     1      59  (
 38672    54   193    61    54   926     1      60  )
 38673    54   193    62    54   926     1      66  ,
 38674    54   194    47    54   926     1     111  this.limit
 38675    54   194    57    54   926     1      59  (
 38676    54   194    58    54   926     1      60  )
 38677    54   194    59    54   926     1      66  ,
 38678    54   195    47    54   926     1     111  this.capacity
 38679    54   195    60    54   926     1      59  (
 38680    54   195    61    54   926     1      60  )
 38681    54   195    62    54   926     1      66  ,
 38682    54   196    47    54   926     0     112  0
 38683    54   196    48    54   926     0      60  )
 38684    54   196    49    54   926     0     102  ;
 38685    54   197     5    54   926     0      64  }
 38686    54   197     5    54   926     0    2192  ENDMETHOD
 38687    54   197     5    54   927     0    2193  STARTMETHOD
 38688    54   199    12    54   927     0     111  ShortBuffer
 38689    54   199    24    54   927     0     111  asReadOnlyBuffer
 38690    54   199    40    54   927     0      59  (
 38691    54   199    41    54   927     0      60  )
 38692    54   199    43    54   927     0      63  {
 38693    54   208     9    54   927     0      19  return
 38694    54   208    16    54   927     0     111  duplicate
 38695    54   208    25    54   927     0      59  (
 38696    54   208    26    54   927     0      60  )
 38697    54   208    27    54   927     0     102  ;
 38698    54   210     5    54   927     0      64  }
 38699    54   210     5    54   927     0    2194  ENDMETHOD
 38700    54   210     5    54   928     0    2195  STARTMETHOD
 38701    54   261    12    54   928     0     111  ShortBuffer
 38702    54   261    24    54   928     0     111  put
 38703    54   261    27    54   928     0      59  (
 38704    54   261    34    54   928     0     111  x
 38705    54   261    35    54   928     0      60  )
 38706    54   261    37    54   928     0      63  {
 38707    54   266     9    54   928     0      20  throw
 38708    54   266    19    54   928     0     111  ReadOnlyBufferException
 38709    54   266    42    54   928     0      59  (
 38710    54   266    43    54   928     0      60  )
 38711    54   266    44    54   928     0     102  ;
 38712    54   268     5    54   928     0      64  }
 38713    54   268     5    54   928     0    2196  ENDMETHOD
 38714    54   268     5    54   929     0    2197  STARTMETHOD
 38715    54   270    12    54   929     0     111  ShortBuffer
 38716    54   270    24    54   929     0     111  put
 38717    54   270    27    54   929     0      59  (
 38718    54   270    28    54   929     0      36  int
 38719    54   270    32    54   929     0     111  i
 38720    54   270    33    54   929     0      66  ,
 38721    54   270    41    54   929     0     111  x
 38722    54   270    42    54   929     0      60  )
 38723    54   270    44    54   929     0      63  {
 38724    54   275     9    54   929     0      20  throw
 38725    54   275    19    54   929     0     111  ReadOnlyBufferException
 38726    54   275    42    54   929     0      59  (
 38727    54   275    43    54   929     0      60  )
 38728    54   275    44    54   929     0     102  ;
 38729    54   277     5    54   929     0      64  }
 38730    54   277     5    54   929     0    2198  ENDMETHOD
 38731    54   277     5    54   930     0    2199  STARTMETHOD
 38732    54   279    12    54   930     0     111  ShortBuffer
 38733    54   279    24    54   930     0     111  put
 38734    54   279    27    54   930     0      59  (
 38735    54   279    28    54   930     0     111  ShortBuffer
 38736    54   279    40    54   930     0     111  src
 38737    54   279    43    54   930     0      60  )
 38738    54   279    45    54   930     0      63  {
 38739    54   316     9    54   930     0      20  throw
 38740    54   316    19    54   930     0     111  ReadOnlyBufferException
 38741    54   316    42    54   930     0      59  (
 38742    54   316    43    54   930     0      60  )
 38743    54   316    44    54   930     0     102  ;
 38744    54   318     5    54   930     0      64  }
 38745    54   318     5    54   930     0    2200  ENDMETHOD
 38746    54   318     5    54   931     0    2201  STARTMETHOD
 38747    54   320    12    54   931     0     111  ShortBuffer
 38748    54   320    24    54   931     0     111  put
 38749    54   320    27    54   931     0      59  (
 38750    54   320    33    54   931     0      61  [
 38751    54   320    34    54   931     0      62  ]
 38752    54   320    36    54   931     0     111  src
 38753    54   320    39    54   931     0      66  ,
 38754    54   320    41    54   931     0      36  int
 38755    54   320    45    54   931     0     111  offset
 38756    54   320    51    54   931     0      66  ,
 38757    54   320    53    54   931     0      36  int
 38758    54   320    57    54   931     0     111  length
 38759    54   320    63    54   931     0      60  )
 38760    54   320    65    54   931     0      63  {
 38761    54   343     9    54   931     0      20  throw
 38762    54   343    19    54   931     0     111  ReadOnlyBufferException
 38763    54   343    42    54   931     0      59  (
 38764    54   343    43    54   931     0      60  )
 38765    54   343    44    54   931     0     102  ;
 38766    54   345     5    54   931     0      64  }
 38767    54   345     5    54   931     0    2202  ENDMETHOD
 38768    54   345     5    54   932     0    2203  STARTMETHOD
 38769    54   347    12    54   932     0     111  ShortBuffer
 38770    54   347    24    54   932     0     111  compact
 38771    54   347    31    54   932     0      59  (
 38772    54   347    32    54   932     0      60  )
 38773    54   347    34    54   932     0      63  {
 38774    54   360     9    54   932     0      20  throw
 38775    54   360    19    54   932     0     111  ReadOnlyBufferException
 38776    54   360    42    54   932     0      59  (
 38777    54   360    43    54   932     0      60  )
 38778    54   360    44    54   932     1     102  ;
 38779    54   362     5    54   932     1      64  }
 38780    54   362     5    54   932     0    2204  ENDMETHOD
 38781    54   362     5    54   933     0    2205  STARTMETHOD
 38782    54   364    12    54   933     0      39  boolean
 38783    54   364    20    54   933     0     111  isDirect
 38784    54   364    28    54   933     0      59  (
 38785    54   364    29    54   933     0      60  )
 38786    54   364    31    54   933     0      63  {
 38787    54   365     9    54   933     0      19  return
 38788    54   365    16    54   933     0      52  true
 38789    54   365    20    54   933     1     102  ;
 38790    54   366     5    54   933     1      64  }
 38791    54   366     5    54   933     0    2206  ENDMETHOD
 38792    54   366     5    54   934     0    2207  STARTMETHOD
 38793    54   368    12    54   934     0      39  boolean
 38794    54   368    20    54   934     0     111  isReadOnly
 38795    54   368    30    54   934     0      59  (
 38796    54   368    31    54   934     0      60  )
 38797    54   368    33    54   934     0      63  {
 38798    54   369     9    54   934     0      19  return
 38799    54   369    16    54   934     0      52  true
 38800    54   369    20    54   934     1     102  ;
 38801    54   370     5    54   934     1      64  }
 38802    54   370     5    54   934     0    2208  ENDMETHOD
 38803    54   370     5    54   935     0    2209  STARTMETHOD
 38804    54   416    12    54   935     0     111  ByteOrder
 38805    54   416    22    54   935     0     111  order
 38806    54   416    27    54   935     0      59  (
 38807    54   416    28    54   935     0      60  )
 38808    54   416    30    54   935     0      63  {
 38809    54   422     9    54   935     0      19  return
 38810    54   422    16    54   935     0      59  (
 38811    54   422    17    54   935     0      59  (
 38812    54   422    18    54   935     0     111  ByteOrder.nativeOrder
 38813    54   422    39    54   935     0      59  (
 38814    54   422    40    54   935     0      60  )
 38815    54   422    42    54   935     0      71  !=
 38816    54   422    45    54   935     0     111  ByteOrder.BIG_ENDIAN
 38817    54   422    65    54   935     0      60  )
 38818    54   423    17    54   935     0      58  ?
 38819    54   423    19    54   935     0     111  ByteOrder.LITTLE_ENDIAN
 38820    54   423    43    54   935     0      65  :
 38821    54   423    45    54   935     0     111  ByteOrder.BIG_ENDIAN
 38822    54   423    65    54   935     0      60  )
 38823    54   423    66    54   935     0     102  ;
 38824    54   425     5    54   935     0      64  }
 38825    54   425     5    54   935     0    2210  ENDMETHOD
 38826    54   452     1    54    -1     0      64  }
 38827    54   452     1    54    -1     1    2211  ENDCLASS
 38828    54   452     1    -1    -1     1    2212  ENDFILE C:\Users\RA\javasrc\java\nio\DirectShortBufferRU.java
 38829    55     1     1    -1    -1     1    2213  STARTFILE C:\Users\RA\javasrc\java\nio\DirectShortBufferS.java
 38830    55    28     9    -1    -1     0     111  java.nio
 38831    55    28    17    -1    -1     0     102  ;
 38832    55    30     1    -1    -1     1      49  import
 38833    55    30     8    -1    -1     1     111  sun.misc.Cleaner
 38834    55    30    24    -1    -1     1     102  ;
 38835    55    31     1    -1    -1     1      49  import
 38836    55    31     8    -1    -1     1     111  sun.misc.Unsafe
 38837    55    31    23    -1    -1     1     102  ;
 38838    55    32     1    -1    -1     1      49  import
 38839    55    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 38840    55    32    31    -1    -1     1     102  ;
 38841    55    33     1    -1    -1     1      49  import
 38842    55    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 38843    55    33    34    -1    -1     1     102  ;
 38844    55    36     1    55    -1     0    2214  STARTCLASS
 38845    55    36     1    55    -1     0      24  class
 38846    55    36     7    55    -1     0     111  DirectShortBufferS
 38847    55    36    26    55    -1     0      38  extends
 38848    55    36    34    55    -1     0     111  ShortBuffer
 38849    55    40     5    55    -1     0      17  implements
 38850    55    40    16    55    -1     0     111  DirectBuffer
 38851    55    41     1    55    -1     0      63  {
 38852    55    46     5    55    -1     0      23  protected
 38853    55    46    15    55    -1     0      45  static
 38854    55    46    28    55    -1     0     111  Unsafe
 38855    55    46    35    55    -1     0     111  unsafe
 38856    55    46    42    55    -1     0      67  =
 38857    55    46    44    55    -1     0     111  Bits.unsafe
 38858    55    46    55    55    -1     0      59  (
 38859    55    46    56    55    -1     0      60  )
 38860    55    46    57    55    -1     0     102  ;
 38861    55    49     5    55    -1     0      23  protected
 38862    55    49    15    55    -1     0      45  static
 38863    55    49    28    55    -1     0      39  boolean
 38864    55    49    36    55    -1     0     111  unaligned
 38865    55    49    46    55    -1     0      67  =
 38866    55    49    48    55    -1     0     111  Bits.unaligned
 38867    55    49    62    55    -1     0      59  (
 38868    55    49    63    55    -1     0      60  )
 38869    55    49    64    55    -1     0     102  ;
 38870    55    57     5    55    -1     0      23  protected
 38871    55    57    15    55    -1     0     111  Object
 38872    55    57    22    55    -1     0     111  viewedBuffer
 38873    55    57    35    55    -1     0      67  =
 38874    55    57    37    55    -1     0      21  null
 38875    55    57    41    55    -1     0     102  ;
 38876    55    57    41    55   936     0    2215  STARTMETHOD
 38877    55    59    12    55   936     0     111  Object
 38878    55    59    19    55   936     0     111  viewedBuffer
 38879    55    59    31    55   936     0      59  (
 38880    55    59    32    55   936     0      60  )
 38881    55    59    34    55   936     0      63  {
 38882    55    60     9    55   936     0      19  return
 38883    55    60    16    55   936     0     111  viewedBuffer
 38884    55    60    28    55   936     0     102  ;
 38885    55    61     5    55   936     0      64  }
 38886    55    61     5    55   936     0    2216  ENDMETHOD
 38887    55    61     5    55   937     0    2217  STARTMETHOD
 38888    55    98    12    55   937     0     111  Cleaner
 38889    55    98    20    55   937     0     111  cleaner
 38890    55    98    27    55   937     0      59  (
 38891    55    98    28    55   937     0      60  )
 38892    55    98    30    55   937     0      63  {
 38893    55    98    32    55   937     0      19  return
 38894    55    98    39    55   937     0      21  null
 38895    55    98    43    55   937     0     102  ;
 38896    55    98    45    55   937     0      64  }
 38897    55    98    45    55   937     0    2218  ENDMETHOD
 38898    55    98    45    55   938     0    2219  STARTMETHOD
 38899    55   162     5    55   938     0     111  DirectShortBufferS
 38900    55   162    23    55   938     0      59  (
 38901    55   162    24    55   938     0     111  DirectBuffer
 38902    55   162    37    55   938     0     111  db
 38903    55   162    39    55   938     0      66  ,
 38904    55   163    32    55   938     0      36  int
 38905    55   163    36    55   938     0     111  mark
 38906    55   163    40    55   938     0      66  ,
 38907    55   163    42    55   938     0      36  int
 38908    55   163    46    55   938     0     111  pos
 38909    55   163    49    55   938     0      66  ,
 38910    55   163    51    55   938     0      36  int
 38911    55   163    55    55   938     0     111  lim
 38912    55   163    58    55   938     0      66  ,
 38913    55   163    60    55   938     0      36  int
 38914    55   163    64    55   938     0     111  cap
 38915    55   163    67    55   938     0      66  ,
 38916    55   164    32    55   938     0      36  int
 38917    55   164    36    55   938     0     111  off
 38918    55   164    39    55   938     0      60  )
 38919    55   165     5    55   938     0      63  {
 38920    55   167     9    55   938     0      27  super
 38921    55   167    14    55   938     0      59  (
 38922    55   167    15    55   938     0     111  mark
 38923    55   167    19    55   938     0      66  ,
 38924    55   167    21    55   938     0     111  pos
 38925    55   167    24    55   938     0      66  ,
 38926    55   167    26    55   938     0     111  lim
 38927    55   167    29    55   938     0      66  ,
 38928    55   167    31    55   938     0     111  cap
 38929    55   167    34    55   938     0      60  )
 38930    55   167    35    55   938     0     102  ;
 38931    55   168     9    55   938     0     111  address
 38932    55   168    17    55   938     0      67  =
 38933    55   168    19    55   938     0     111  db.address
 38934    55   168    29    55   938     0      59  (
 38935    55   168    30    55   938     0      60  )
 38936    55   168    32    55   938     0      74  +
 38937    55   168    34    55   938     0     111  off
 38938    55   168    37    55   938     0     102  ;
 38939    55   169     9    55   938     0     111  viewedBuffer
 38940    55   169    22    55   938     0      67  =
 38941    55   169    24    55   938     0     111  db
 38942    55   169    26    55   938     0     102  ;
 38943    55   176     5    55   938     0      64  }
 38944    55   176     5    55   938     0    2220  ENDMETHOD
 38945    55   176     5    55   939     0    2221  STARTMETHOD
 38946    55   178    12    55   939     0     111  ShortBuffer
 38947    55   178    24    55   939     0     111  slice
 38948    55   178    29    55   939     0      59  (
 38949    55   178    30    55   939     0      60  )
 38950    55   178    32    55   939     0      63  {
 38951    55   179     9    55   939     1      36  int
 38952    55   179    13    55   939     1     111  pos
 38953    55   179    17    55   939     1      67  =
 38954    55   179    19    55   939     1     111  this.position
 38955    55   179    32    55   939     1      59  (
 38956    55   179    33    55   939     1      60  )
 38957    55   179    34    55   939     1     102  ;
 38958    55   180     9    55   939     1      36  int
 38959    55   180    13    55   939     1     111  lim
 38960    55   180    17    55   939     1      67  =
 38961    55   180    19    55   939     1     111  this.limit
 38962    55   180    29    55   939     1      59  (
 38963    55   180    30    55   939     1      60  )
 38964    55   180    31    55   939     1     102  ;
 38965    55   181     9    55   939     0     111  assert
 38966    55   181    16    55   939     0      59  (
 38967    55   181    17    55   939     0     111  pos
 38968    55   181    21    55   939     0      92  <=
 38969    55   181    24    55   939     0     111  lim
 38970    55   181    27    55   939     0      60  )
 38971    55   181    28    55   939     0     102  ;
 38972    55   182     9    55   939     0      36  int
 38973    55   182    13    55   939     0     111  rem
 38974    55   182    17    55   939     0      67  =
 38975    55   182    19    55   939     0      59  (
 38976    55   182    20    55   939     0     111  pos
 38977    55   182    24    55   939     0      92  <=
 38978    55   182    27    55   939     0     111  lim
 38979    55   182    31    55   939     0      58  ?
 38980    55   182    33    55   939     0     111  lim
 38981    55   182    37    55   939     0      77  -
 38982    55   182    39    55   939     0     111  pos
 38983    55   182    43    55   939     0      65  :
 38984    55   182    45    55   939     0     112  0
 38985    55   182    46    55   939     0      60  )
 38986    55   182    47    55   939     0     102  ;
 38987    55   183     9    55   939     0      36  int
 38988    55   183    13    55   939     0     111  off
 38989    55   183    17    55   939     0      67  =
 38990    55   183    19    55   939     0      59  (
 38991    55   183    20    55   939     0     111  pos
 38992    55   183    24    55   939     0      90  <<
 38993    55   183    27    55   939     0     112  1
 38994    55   183    28    55   939     0      60  )
 38995    55   183    29    55   939     0     102  ;
 38996    55   184     9    55   939     0     111  assert
 38997    55   184    16    55   939     0      59  (
 38998    55   184    17    55   939     0     111  off
 38999    55   184    21    55   939     0      88  >=
 39000    55   184    24    55   939     0     112  0
 39001    55   184    25    55   939     0      60  )
 39002    55   184    26    55   939     0     102  ;
 39003    55   185     9    55   939     0      19  return
 39004    55   185    20    55   939     0     111  DirectShortBufferS
 39005    55   185    38    55   939     0      59  (
 39006    55   185    39    55   939     0      44  this
 39007    55   185    43    55   939     0      66  ,
 39008    55   185    45    55   939     0      77  -
 39009    55   185    46    55   939     0     112  1
 39010    55   185    47    55   939     0      66  ,
 39011    55   185    49    55   939     0     112  0
 39012    55   185    50    55   939     0      66  ,
 39013    55   185    52    55   939     0     111  rem
 39014    55   185    55    55   939     0      66  ,
 39015    55   185    57    55   939     0     111  rem
 39016    55   185    60    55   939     0      66  ,
 39017    55   185    62    55   939     0     111  off
 39018    55   185    65    55   939     0      60  )
 39019    55   185    66    55   939     0     102  ;
 39020    55   186     5    55   939     0      64  }
 39021    55   186     5    55   939     0    2222  ENDMETHOD
 39022    55   186     5    55   940     0    2223  STARTMETHOD
 39023    55   188    12    55   940     0     111  ShortBuffer
 39024    55   188    24    55   940     0     111  duplicate
 39025    55   188    33    55   940     0      59  (
 39026    55   188    34    55   940     0      60  )
 39027    55   188    36    55   940     0      63  {
 39028    55   189     9    55   940     0      19  return
 39029    55   189    20    55   940     0     111  DirectShortBufferS
 39030    55   189    38    55   940     0      59  (
 39031    55   189    39    55   940     0      44  this
 39032    55   189    43    55   940     0      66  ,
 39033    55   190    47    55   940     1     111  this.markValue
 39034    55   190    61    55   940     1      59  (
 39035    55   190    62    55   940     1      60  )
 39036    55   190    63    55   940     1      66  ,
 39037    55   191    47    55   940     1     111  this.position
 39038    55   191    60    55   940     1      59  (
 39039    55   191    61    55   940     1      60  )
 39040    55   191    62    55   940     1      66  ,
 39041    55   192    47    55   940     1     111  this.limit
 39042    55   192    57    55   940     1      59  (
 39043    55   192    58    55   940     1      60  )
 39044    55   192    59    55   940     1      66  ,
 39045    55   193    47    55   940     1     111  this.capacity
 39046    55   193    60    55   940     1      59  (
 39047    55   193    61    55   940     1      60  )
 39048    55   193    62    55   940     1      66  ,
 39049    55   194    47    55   940     0     112  0
 39050    55   194    48    55   940     0      60  )
 39051    55   194    49    55   940     0     102  ;
 39052    55   195     5    55   940     0      64  }
 39053    55   195     5    55   940     0    2224  ENDMETHOD
 39054    55   195     5    55   941     0    2225  STARTMETHOD
 39055    55   197    12    55   941     0     111  ShortBuffer
 39056    55   197    24    55   941     0     111  asReadOnlyBuffer
 39057    55   197    40    55   941     0      59  (
 39058    55   197    41    55   941     0      60  )
 39059    55   197    43    55   941     0      63  {
 39060    55   199     9    55   941     0      19  return
 39061    55   199    20    55   941     0     111  DirectShortBufferRS
 39062    55   199    39    55   941     0      59  (
 39063    55   199    40    55   941     0      44  this
 39064    55   199    44    55   941     0      66  ,
 39065    55   200    44    55   941     1     111  this.markValue
 39066    55   200    58    55   941     1      59  (
 39067    55   200    59    55   941     1      60  )
 39068    55   200    60    55   941     1      66  ,
 39069    55   201    44    55   941     1     111  this.position
 39070    55   201    57    55   941     1      59  (
 39071    55   201    58    55   941     1      60  )
 39072    55   201    59    55   941     1      66  ,
 39073    55   202    44    55   941     1     111  this.limit
 39074    55   202    54    55   941     1      59  (
 39075    55   202    55    55   941     1      60  )
 39076    55   202    56    55   941     1      66  ,
 39077    55   203    44    55   941     1     111  this.capacity
 39078    55   203    57    55   941     1      59  (
 39079    55   203    58    55   941     1      60  )
 39080    55   203    59    55   941     1      66  ,
 39081    55   204    44    55   941     0     112  0
 39082    55   204    45    55   941     0      60  )
 39083    55   204    46    55   941     0     102  ;
 39084    55   208     5    55   941     0      64  }
 39085    55   208     5    55   941     0    2226  ENDMETHOD
 39086    55   208     5    55   942     0    2227  STARTMETHOD
 39087    55   212    12    55   942     0      53  long
 39088    55   212    17    55   942     0     111  address
 39089    55   212    24    55   942     0      59  (
 39090    55   212    25    55   942     0      60  )
 39091    55   212    27    55   942     0      63  {
 39092    55   213     9    55   942     0      19  return
 39093    55   213    16    55   942     0     111  address
 39094    55   213    23    55   942     0     102  ;
 39095    55   214     5    55   942     0      64  }
 39096    55   214     5    55   942     0    2228  ENDMETHOD
 39097    55   214     5    55   943     0    2229  STARTMETHOD
 39098    55   216     5    55   943     0      41  private
 39099    55   216    13    55   943     0      53  long
 39100    55   216    18    55   943     0     111  ix
 39101    55   216    20    55   943     0      59  (
 39102    55   216    21    55   943     0      36  int
 39103    55   216    25    55   943     0     111  i
 39104    55   216    26    55   943     0      60  )
 39105    55   216    28    55   943     0      63  {
 39106    55   217     9    55   943     0      19  return
 39107    55   217    16    55   943     0     111  address
 39108    55   217    24    55   943     0      74  +
 39109    55   217    26    55   943     0      59  (
 39110    55   217    27    55   943     0     111  i
 39111    55   217    29    55   943     0      90  <<
 39112    55   217    32    55   943     0     112  1
 39113    55   217    33    55   943     0      60  )
 39114    55   217    34    55   943     0     102  ;
 39115    55   218     5    55   943     0      64  }
 39116    55   218     5    55   943     0    2230  ENDMETHOD
 39117    55   218     5    55   944     0    2231  STARTMETHOD
 39118    55   220    18    55   944     0     111  get
 39119    55   220    21    55   944     0      59  (
 39120    55   220    22    55   944     0      60  )
 39121    55   220    24    55   944     0      63  {
 39122    55   221     9    55   944     0      19  return
 39123    55   221    16    55   944     0      59  (
 39124    55   221    17    55   944     0     111  Bits.swap
 39125    55   221    26    55   944     0      59  (
 39126    55   221    27    55   944     0     111  unsafe.getShort
 39127    55   221    42    55   944     0      59  (
 39128    55   221    43    55   944     0     111  ix
 39129    55   221    45    55   944     0      59  (
 39130    55   221    46    55   944     0     111  nextGetIndex
 39131    55   221    58    55   944     0      59  (
 39132    55   221    59    55   944     0      60  )
 39133    55   221    60    55   944     0      60  )
 39134    55   221    61    55   944     0      60  )
 39135    55   221    62    55   944     0      60  )
 39136    55   221    63    55   944     0      60  )
 39137    55   221    64    55   944     0     102  ;
 39138    55   222     5    55   944     0      64  }
 39139    55   222     5    55   944     0    2232  ENDMETHOD
 39140    55   222     5    55   945     0    2233  STARTMETHOD
 39141    55   224    18    55   945     0     111  get
 39142    55   224    21    55   945     0      59  (
 39143    55   224    22    55   945     0      36  int
 39144    55   224    26    55   945     0     111  i
 39145    55   224    27    55   945     0      60  )
 39146    55   224    29    55   945     0      63  {
 39147    55   225     9    55   945     0      19  return
 39148    55   225    16    55   945     0      59  (
 39149    55   225    17    55   945     0     111  Bits.swap
 39150    55   225    26    55   945     0      59  (
 39151    55   225    27    55   945     0     111  unsafe.getShort
 39152    55   225    42    55   945     0      59  (
 39153    55   225    43    55   945     0     111  ix
 39154    55   225    45    55   945     0      59  (
 39155    55   225    46    55   945     0     111  checkIndex
 39156    55   225    56    55   945     0      59  (
 39157    55   225    57    55   945     0     111  i
 39158    55   225    58    55   945     0      60  )
 39159    55   225    59    55   945     0      60  )
 39160    55   225    60    55   945     0      60  )
 39161    55   225    61    55   945     0      60  )
 39162    55   225    62    55   945     0      60  )
 39163    55   225    63    55   945     0     102  ;
 39164    55   226     5    55   945     0      64  }
 39165    55   226     5    55   945     0    2234  ENDMETHOD
 39166    55   226     5    55   946     0    2235  STARTMETHOD
 39167    55   228    12    55   946     0     111  ShortBuffer
 39168    55   228    24    55   946     0     111  get
 39169    55   228    27    55   946     0      59  (
 39170    55   228    33    55   946     0      61  [
 39171    55   228    34    55   946     0      62  ]
 39172    55   228    36    55   946     0     111  dst
 39173    55   228    39    55   946     0      66  ,
 39174    55   228    41    55   946     0      36  int
 39175    55   228    45    55   946     0     111  offset
 39176    55   228    51    55   946     0      66  ,
 39177    55   228    53    55   946     0      36  int
 39178    55   228    57    55   946     0     111  length
 39179    55   228    63    55   946     0      60  )
 39180    55   228    65    55   946     0      63  {
 39181    55   230     9    55   946     0      31  if
 39182    55   230    12    55   946     0      59  (
 39183    55   230    13    55   946     0      59  (
 39184    55   230    14    55   946     0     111  length
 39185    55   230    21    55   946     0      90  <<
 39186    55   230    24    55   946     0     112  1
 39187    55   230    25    55   946     0      60  )
 39188    55   230    27    55   946     0      89  >
 39189    55   230    29    55   946     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 39190    55   230    61    55   946     0      60  )
 39191    55   230    63    55   946     0      63  {
 39192    55   231    13    55   946     0     111  checkBounds
 39193    55   231    24    55   946     0      59  (
 39194    55   231    25    55   946     0     111  offset
 39195    55   231    31    55   946     0      66  ,
 39196    55   231    33    55   946     0     111  length
 39197    55   231    39    55   946     0      66  ,
 39198    55   231    41    55   946     0     111  dst.length
 39199    55   231    51    55   946     0      60  )
 39200    55   231    52    55   946     0     102  ;
 39201    55   232    13    55   946     1      36  int
 39202    55   232    17    55   946     1     111  pos
 39203    55   232    21    55   946     1      67  =
 39204    55   232    23    55   946     1     111  position
 39205    55   232    31    55   946     1      59  (
 39206    55   232    32    55   946     1      60  )
 39207    55   232    33    55   946     1     102  ;
 39208    55   233    13    55   946     1      36  int
 39209    55   233    17    55   946     1     111  lim
 39210    55   233    21    55   946     1      67  =
 39211    55   233    23    55   946     1     111  limit
 39212    55   233    28    55   946     1      59  (
 39213    55   233    29    55   946     1      60  )
 39214    55   233    30    55   946     1     102  ;
 39215    55   234    13    55   946     0     111  assert
 39216    55   234    20    55   946     0      59  (
 39217    55   234    21    55   946     0     111  pos
 39218    55   234    25    55   946     0      92  <=
 39219    55   234    28    55   946     0     111  lim
 39220    55   234    31    55   946     0      60  )
 39221    55   234    32    55   946     0     102  ;
 39222    55   235    13    55   946     0      36  int
 39223    55   235    17    55   946     0     111  rem
 39224    55   235    21    55   946     0      67  =
 39225    55   235    23    55   946     0      59  (
 39226    55   235    24    55   946     0     111  pos
 39227    55   235    28    55   946     0      92  <=
 39228    55   235    31    55   946     0     111  lim
 39229    55   235    35    55   946     0      58  ?
 39230    55   235    37    55   946     0     111  lim
 39231    55   235    41    55   946     0      77  -
 39232    55   235    43    55   946     0     111  pos
 39233    55   235    47    55   946     0      65  :
 39234    55   235    49    55   946     0     112  0
 39235    55   235    50    55   946     0      60  )
 39236    55   235    51    55   946     0     102  ;
 39237    55   236    13    55   946     0      31  if
 39238    55   236    16    55   946     0      59  (
 39239    55   236    17    55   946     0     111  length
 39240    55   236    24    55   946     0      89  >
 39241    55   236    26    55   946     0     111  rem
 39242    55   236    29    55   946     0      60  )
 39243    55   237    17    55   946     0      20  throw
 39244    55   237    27    55   946     0     111  BufferUnderflowException
 39245    55   237    51    55   946     0      59  (
 39246    55   237    52    55   946     0      60  )
 39247    55   237    53    55   946     0     102  ;
 39248    55   239    13    55   946     0      31  if
 39249    55   239    16    55   946     0      59  (
 39250    55   239    17    55   946     0     111  order
 39251    55   239    22    55   946     0      59  (
 39252    55   239    23    55   946     0      60  )
 39253    55   239    25    55   946     0      71  !=
 39254    55   239    28    55   946     0     111  ByteOrder.nativeOrder
 39255    55   239    49    55   946     0      59  (
 39256    55   239    50    55   946     0      60  )
 39257    55   239    51    55   946     0      60  )
 39258    55   240    17    55   946     0     111  Bits.copyToShortArray
 39259    55   240    38    55   946     0      59  (
 39260    55   240    39    55   946     0     111  ix
 39261    55   240    41    55   946     0      59  (
 39262    55   240    42    55   946     0     111  pos
 39263    55   240    45    55   946     0      60  )
 39264    55   240    46    55   946     0      66  ,
 39265    55   240    48    55   946     0     111  dst
 39266    55   240    51    55   946     0      66  ,
 39267    55   241    43    55   946     0     111  offset
 39268    55   241    50    55   946     0      90  <<
 39269    55   241    53    55   946     0     112  1
 39270    55   241    54    55   946     0      66  ,
 39271    55   242    43    55   946     0     111  length
 39272    55   242    50    55   946     0      90  <<
 39273    55   242    53    55   946     0     112  1
 39274    55   242    54    55   946     0      60  )
 39275    55   242    55    55   946     0     102  ;
 39276    55   243    13    55   946     0      48  else
 39277    55   244    17    55   946     0     111  Bits.copyToByteArray
 39278    55   244    37    55   946     0      59  (
 39279    55   244    38    55   946     0     111  ix
 39280    55   244    40    55   946     0      59  (
 39281    55   244    41    55   946     0     111  pos
 39282    55   244    44    55   946     0      60  )
 39283    55   244    45    55   946     0      66  ,
 39284    55   244    47    55   946     0     111  dst
 39285    55   244    50    55   946     0      66  ,
 39286    55   245    38    55   946     0     111  offset
 39287    55   245    45    55   946     0      90  <<
 39288    55   245    48    55   946     0     112  1
 39289    55   245    49    55   946     0      66  ,
 39290    55   246    38    55   946     0     111  length
 39291    55   246    45    55   946     0      90  <<
 39292    55   246    48    55   946     0     112  1
 39293    55   246    49    55   946     0      60  )
 39294    55   246    50    55   946     0     102  ;
 39295    55   247    13    55   946     0     111  position
 39296    55   247    21    55   946     0      59  (
 39297    55   247    22    55   946     0     111  pos
 39298    55   247    26    55   946     0      74  +
 39299    55   247    28    55   946     0     111  length
 39300    55   247    34    55   946     0      60  )
 39301    55   247    35    55   946     0     102  ;
 39302    55   248     9    55   946     0      64  }
 39303    55   248    11    55   946     0      48  else
 39304    55   248    16    55   946     0      63  {
 39305    55   249    13    55   946     0     111  super.get
 39306    55   249    22    55   946     0      59  (
 39307    55   249    23    55   946     0     111  dst
 39308    55   249    26    55   946     0      66  ,
 39309    55   249    28    55   946     0     111  offset
 39310    55   249    34    55   946     0      66  ,
 39311    55   249    36    55   946     0     111  length
 39312    55   249    42    55   946     0      60  )
 39313    55   249    43    55   946     0     102  ;
 39314    55   250     9    55   946     0      64  }
 39315    55   251     9    55   946     0      19  return
 39316    55   251    16    55   946     0      44  this
 39317    55   251    20    55   946     0     102  ;
 39318    55   255     5    55   946     0      64  }
 39319    55   255     5    55   946     0    2236  ENDMETHOD
 39320    55   255     5    55   947     0    2237  STARTMETHOD
 39321    55   259    12    55   947     0     111  ShortBuffer
 39322    55   259    24    55   947     0     111  put
 39323    55   259    27    55   947     0      59  (
 39324    55   259    34    55   947     0     111  x
 39325    55   259    35    55   947     0      60  )
 39326    55   259    37    55   947     0      63  {
 39327    55   261     9    55   947     0     111  unsafe.putShort
 39328    55   261    24    55   947     0      59  (
 39329    55   261    25    55   947     0     111  ix
 39330    55   261    27    55   947     0      59  (
 39331    55   261    28    55   947     0     111  nextPutIndex
 39332    55   261    40    55   947     0      59  (
 39333    55   261    41    55   947     0      60  )
 39334    55   261    42    55   947     0      60  )
 39335    55   261    43    55   947     0      66  ,
 39336    55   261    45    55   947     0     111  Bits.swap
 39337    55   261    54    55   947     0      59  (
 39338    55   261    55    55   947     0      59  (
 39339    55   261    56    55   947     0     111  x
 39340    55   261    57    55   947     0      60  )
 39341    55   261    58    55   947     0      60  )
 39342    55   261    59    55   947     0      60  )
 39343    55   261    60    55   947     0     102  ;
 39344    55   262     9    55   947     0      19  return
 39345    55   262    16    55   947     0      44  this
 39346    55   262    20    55   947     0     102  ;
 39347    55   266     5    55   947     0      64  }
 39348    55   266     5    55   947     0    2238  ENDMETHOD
 39349    55   266     5    55   948     0    2239  STARTMETHOD
 39350    55   268    12    55   948     0     111  ShortBuffer
 39351    55   268    24    55   948     0     111  put
 39352    55   268    27    55   948     0      59  (
 39353    55   268    28    55   948     0      36  int
 39354    55   268    32    55   948     0     111  i
 39355    55   268    33    55   948     0      66  ,
 39356    55   268    41    55   948     0     111  x
 39357    55   268    42    55   948     0      60  )
 39358    55   268    44    55   948     0      63  {
 39359    55   270     9    55   948     0     111  unsafe.putShort
 39360    55   270    24    55   948     0      59  (
 39361    55   270    25    55   948     0     111  ix
 39362    55   270    27    55   948     0      59  (
 39363    55   270    28    55   948     0     111  checkIndex
 39364    55   270    38    55   948     0      59  (
 39365    55   270    39    55   948     0     111  i
 39366    55   270    40    55   948     0      60  )
 39367    55   270    41    55   948     0      60  )
 39368    55   270    42    55   948     0      66  ,
 39369    55   270    44    55   948     0     111  Bits.swap
 39370    55   270    53    55   948     0      59  (
 39371    55   270    54    55   948     0      59  (
 39372    55   270    55    55   948     0     111  x
 39373    55   270    56    55   948     0      60  )
 39374    55   270    57    55   948     0      60  )
 39375    55   270    58    55   948     0      60  )
 39376    55   270    59    55   948     0     102  ;
 39377    55   271     9    55   948     0      19  return
 39378    55   271    16    55   948     0      44  this
 39379    55   271    20    55   948     0     102  ;
 39380    55   275     5    55   948     0      64  }
 39381    55   275     5    55   948     0    2240  ENDMETHOD
 39382    55   275     5    55   949     0    2241  STARTMETHOD
 39383    55   277    12    55   949     0     111  ShortBuffer
 39384    55   277    24    55   949     0     111  put
 39385    55   277    27    55   949     0      59  (
 39386    55   277    28    55   949     0     111  ShortBuffer
 39387    55   277    40    55   949     0     111  src
 39388    55   277    43    55   949     0      60  )
 39389    55   277    45    55   949     0      63  {
 39390    55   279     9    55   949     0      31  if
 39391    55   279    12    55   949     0      59  (
 39392    55   279    13    55   949     0     111  src
 39393    55   279    28    55   949     0     111  DirectShortBufferS
 39394    55   279    46    55   949     0      60  )
 39395    55   279    48    55   949     0      63  {
 39396    55   280    13    55   949     0      31  if
 39397    55   280    16    55   949     0      59  (
 39398    55   280    17    55   949     0     111  src
 39399    55   280    21    55   949     0      68  ==
 39400    55   280    24    55   949     0      44  this
 39401    55   280    28    55   949     0      60  )
 39402    55   281    17    55   949     0      20  throw
 39403    55   281    27    55   949     0     111  IllegalArgumentException
 39404    55   281    51    55   949     0      59  (
 39405    55   281    52    55   949     0      60  )
 39406    55   281    53    55   949     0     102  ;
 39407    55   282    13    55   949     0     111  DirectShortBufferS
 39408    55   282    32    55   949     0     111  sb
 39409    55   282    35    55   949     0      67  =
 39410    55   282    37    55   949     0      59  (
 39411    55   282    38    55   949     0     111  DirectShortBufferS
 39412    55   282    56    55   949     0      60  )
 39413    55   282    57    55   949     0     111  src
 39414    55   282    60    55   949     0     102  ;
 39415    55   284    13    55   949     1      36  int
 39416    55   284    17    55   949     1     111  spos
 39417    55   284    22    55   949     1      67  =
 39418    55   284    24    55   949     1     111  sb.position
 39419    55   284    35    55   949     1      59  (
 39420    55   284    36    55   949     1      60  )
 39421    55   284    37    55   949     1     102  ;
 39422    55   285    13    55   949     1      36  int
 39423    55   285    17    55   949     1     111  slim
 39424    55   285    22    55   949     1      67  =
 39425    55   285    24    55   949     1     111  sb.limit
 39426    55   285    32    55   949     1      59  (
 39427    55   285    33    55   949     1      60  )
 39428    55   285    34    55   949     1     102  ;
 39429    55   286    13    55   949     0     111  assert
 39430    55   286    20    55   949     0      59  (
 39431    55   286    21    55   949     0     111  spos
 39432    55   286    26    55   949     0      92  <=
 39433    55   286    29    55   949     0     111  slim
 39434    55   286    33    55   949     0      60  )
 39435    55   286    34    55   949     0     102  ;
 39436    55   287    13    55   949     0      36  int
 39437    55   287    17    55   949     0     111  srem
 39438    55   287    22    55   949     0      67  =
 39439    55   287    24    55   949     0      59  (
 39440    55   287    25    55   949     0     111  spos
 39441    55   287    30    55   949     0      92  <=
 39442    55   287    33    55   949     0     111  slim
 39443    55   287    38    55   949     0      58  ?
 39444    55   287    40    55   949     0     111  slim
 39445    55   287    45    55   949     0      77  -
 39446    55   287    47    55   949     0     111  spos
 39447    55   287    52    55   949     0      65  :
 39448    55   287    54    55   949     0     112  0
 39449    55   287    55    55   949     0      60  )
 39450    55   287    56    55   949     0     102  ;
 39451    55   289    13    55   949     1      36  int
 39452    55   289    17    55   949     1     111  pos
 39453    55   289    21    55   949     1      67  =
 39454    55   289    23    55   949     1     111  position
 39455    55   289    31    55   949     1      59  (
 39456    55   289    32    55   949     1      60  )
 39457    55   289    33    55   949     1     102  ;
 39458    55   290    13    55   949     1      36  int
 39459    55   290    17    55   949     1     111  lim
 39460    55   290    21    55   949     1      67  =
 39461    55   290    23    55   949     1     111  limit
 39462    55   290    28    55   949     1      59  (
 39463    55   290    29    55   949     1      60  )
 39464    55   290    30    55   949     1     102  ;
 39465    55   291    13    55   949     0     111  assert
 39466    55   291    20    55   949     0      59  (
 39467    55   291    21    55   949     0     111  pos
 39468    55   291    25    55   949     0      92  <=
 39469    55   291    28    55   949     0     111  lim
 39470    55   291    31    55   949     0      60  )
 39471    55   291    32    55   949     0     102  ;
 39472    55   292    13    55   949     0      36  int
 39473    55   292    17    55   949     0     111  rem
 39474    55   292    21    55   949     0      67  =
 39475    55   292    23    55   949     0      59  (
 39476    55   292    24    55   949     0     111  pos
 39477    55   292    28    55   949     0      92  <=
 39478    55   292    31    55   949     0     111  lim
 39479    55   292    35    55   949     0      58  ?
 39480    55   292    37    55   949     0     111  lim
 39481    55   292    41    55   949     0      77  -
 39482    55   292    43    55   949     0     111  pos
 39483    55   292    47    55   949     0      65  :
 39484    55   292    49    55   949     0     112  0
 39485    55   292    50    55   949     0      60  )
 39486    55   292    51    55   949     0     102  ;
 39487    55   294    13    55   949     0      31  if
 39488    55   294    16    55   949     0      59  (
 39489    55   294    17    55   949     0     111  srem
 39490    55   294    22    55   949     0      89  >
 39491    55   294    24    55   949     0     111  rem
 39492    55   294    27    55   949     0      60  )
 39493    55   295    17    55   949     0      20  throw
 39494    55   295    27    55   949     0     111  BufferOverflowException
 39495    55   295    50    55   949     0      59  (
 39496    55   295    51    55   949     0      60  )
 39497    55   295    52    55   949     0     102  ;
 39498    55   296    13    55   949     0     111  unsafe.copyMemory
 39499    55   296    30    55   949     0      59  (
 39500    55   296    31    55   949     0     111  sb.ix
 39501    55   296    36    55   949     0      59  (
 39502    55   296    37    55   949     0     111  spos
 39503    55   296    41    55   949     0      60  )
 39504    55   296    42    55   949     0      66  ,
 39505    55   296    44    55   949     0     111  ix
 39506    55   296    46    55   949     0      59  (
 39507    55   296    47    55   949     0     111  pos
 39508    55   296    50    55   949     0      60  )
 39509    55   296    51    55   949     0      66  ,
 39510    55   296    53    55   949     0     111  srem
 39511    55   296    58    55   949     0      90  <<
 39512    55   296    61    55   949     0     112  1
 39513    55   296    62    55   949     0      60  )
 39514    55   296    63    55   949     0     102  ;
 39515    55   297    13    55   949     1     111  sb.position
 39516    55   297    24    55   949     1      59  (
 39517    55   297    25    55   949     1     111  spos
 39518    55   297    30    55   949     1      74  +
 39519    55   297    32    55   949     1     111  srem
 39520    55   297    36    55   949     1      60  )
 39521    55   297    37    55   949     1     102  ;
 39522    55   298    13    55   949     1     111  position
 39523    55   298    21    55   949     1      59  (
 39524    55   298    22    55   949     1     111  pos
 39525    55   298    26    55   949     1      74  +
 39526    55   298    28    55   949     1     111  srem
 39527    55   298    32    55   949     1      60  )
 39528    55   298    33    55   949     1     102  ;
 39529    55   299     9    55   949     0      64  }
 39530    55   299    11    55   949     0      48  else
 39531    55   299    16    55   949     0      31  if
 39532    55   299    19    55   949     0      59  (
 39533    55   299    20    55   949     0     111  src.hb
 39534    55   299    27    55   949     0      71  !=
 39535    55   299    30    55   949     0      21  null
 39536    55   299    34    55   949     0      60  )
 39537    55   299    36    55   949     0      63  {
 39538    55   301    13    55   949     1      36  int
 39539    55   301    17    55   949     1     111  spos
 39540    55   301    22    55   949     1      67  =
 39541    55   301    24    55   949     1     111  src.position
 39542    55   301    36    55   949     1      59  (
 39543    55   301    37    55   949     1      60  )
 39544    55   301    38    55   949     1     102  ;
 39545    55   302    13    55   949     1      36  int
 39546    55   302    17    55   949     1     111  slim
 39547    55   302    22    55   949     1      67  =
 39548    55   302    24    55   949     1     111  src.limit
 39549    55   302    33    55   949     1      59  (
 39550    55   302    34    55   949     1      60  )
 39551    55   302    35    55   949     1     102  ;
 39552    55   303    13    55   949     0     111  assert
 39553    55   303    20    55   949     0      59  (
 39554    55   303    21    55   949     0     111  spos
 39555    55   303    26    55   949     0      92  <=
 39556    55   303    29    55   949     0     111  slim
 39557    55   303    33    55   949     0      60  )
 39558    55   303    34    55   949     0     102  ;
 39559    55   304    13    55   949     0      36  int
 39560    55   304    17    55   949     0     111  srem
 39561    55   304    22    55   949     0      67  =
 39562    55   304    24    55   949     0      59  (
 39563    55   304    25    55   949     0     111  spos
 39564    55   304    30    55   949     0      92  <=
 39565    55   304    33    55   949     0     111  slim
 39566    55   304    38    55   949     0      58  ?
 39567    55   304    40    55   949     0     111  slim
 39568    55   304    45    55   949     0      77  -
 39569    55   304    47    55   949     0     111  spos
 39570    55   304    52    55   949     0      65  :
 39571    55   304    54    55   949     0     112  0
 39572    55   304    55    55   949     0      60  )
 39573    55   304    56    55   949     0     102  ;
 39574    55   306    13    55   949     0     111  put
 39575    55   306    16    55   949     0      59  (
 39576    55   306    17    55   949     0     111  src.hb
 39577    55   306    23    55   949     0      66  ,
 39578    55   306    25    55   949     0     111  src.offset
 39579    55   306    36    55   949     0      74  +
 39580    55   306    38    55   949     0     111  spos
 39581    55   306    42    55   949     0      66  ,
 39582    55   306    44    55   949     0     111  srem
 39583    55   306    48    55   949     0      60  )
 39584    55   306    49    55   949     0     102  ;
 39585    55   307    13    55   949     0     111  src.position
 39586    55   307    25    55   949     0      59  (
 39587    55   307    26    55   949     0     111  spos
 39588    55   307    31    55   949     0      74  +
 39589    55   307    33    55   949     0     111  srem
 39590    55   307    37    55   949     0      60  )
 39591    55   307    38    55   949     0     102  ;
 39592    55   309     9    55   949     0      64  }
 39593    55   309    11    55   949     0      48  else
 39594    55   309    16    55   949     0      63  {
 39595    55   310    13    55   949     0     111  super.put
 39596    55   310    22    55   949     0      59  (
 39597    55   310    23    55   949     0     111  src
 39598    55   310    26    55   949     0      60  )
 39599    55   310    27    55   949     0     102  ;
 39600    55   311     9    55   949     0      64  }
 39601    55   312     9    55   949     0      19  return
 39602    55   312    16    55   949     0      44  this
 39603    55   312    20    55   949     0     102  ;
 39604    55   316     5    55   949     0      64  }
 39605    55   316     5    55   949     0    2242  ENDMETHOD
 39606    55   316     5    55   950     0    2243  STARTMETHOD
 39607    55   318    12    55   950     0     111  ShortBuffer
 39608    55   318    24    55   950     0     111  put
 39609    55   318    27    55   950     0      59  (
 39610    55   318    33    55   950     0      61  [
 39611    55   318    34    55   950     0      62  ]
 39612    55   318    36    55   950     0     111  src
 39613    55   318    39    55   950     0      66  ,
 39614    55   318    41    55   950     0      36  int
 39615    55   318    45    55   950     0     111  offset
 39616    55   318    51    55   950     0      66  ,
 39617    55   318    53    55   950     0      36  int
 39618    55   318    57    55   950     0     111  length
 39619    55   318    63    55   950     0      60  )
 39620    55   318    65    55   950     0      63  {
 39621    55   320     9    55   950     0      31  if
 39622    55   320    12    55   950     0      59  (
 39623    55   320    13    55   950     0      59  (
 39624    55   320    14    55   950     0     111  length
 39625    55   320    21    55   950     0      90  <<
 39626    55   320    24    55   950     0     112  1
 39627    55   320    25    55   950     0      60  )
 39628    55   320    27    55   950     0      89  >
 39629    55   320    29    55   950     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 39630    55   320    63    55   950     0      60  )
 39631    55   320    65    55   950     0      63  {
 39632    55   321    13    55   950     0     111  checkBounds
 39633    55   321    24    55   950     0      59  (
 39634    55   321    25    55   950     0     111  offset
 39635    55   321    31    55   950     0      66  ,
 39636    55   321    33    55   950     0     111  length
 39637    55   321    39    55   950     0      66  ,
 39638    55   321    41    55   950     0     111  src.length
 39639    55   321    51    55   950     0      60  )
 39640    55   321    52    55   950     0     102  ;
 39641    55   322    13    55   950     1      36  int
 39642    55   322    17    55   950     1     111  pos
 39643    55   322    21    55   950     1      67  =
 39644    55   322    23    55   950     1     111  position
 39645    55   322    31    55   950     1      59  (
 39646    55   322    32    55   950     1      60  )
 39647    55   322    33    55   950     1     102  ;
 39648    55   323    13    55   950     1      36  int
 39649    55   323    17    55   950     1     111  lim
 39650    55   323    21    55   950     1      67  =
 39651    55   323    23    55   950     1     111  limit
 39652    55   323    28    55   950     1      59  (
 39653    55   323    29    55   950     1      60  )
 39654    55   323    30    55   950     1     102  ;
 39655    55   324    13    55   950     0     111  assert
 39656    55   324    20    55   950     0      59  (
 39657    55   324    21    55   950     0     111  pos
 39658    55   324    25    55   950     0      92  <=
 39659    55   324    28    55   950     0     111  lim
 39660    55   324    31    55   950     0      60  )
 39661    55   324    32    55   950     0     102  ;
 39662    55   325    13    55   950     0      36  int
 39663    55   325    17    55   950     0     111  rem
 39664    55   325    21    55   950     0      67  =
 39665    55   325    23    55   950     0      59  (
 39666    55   325    24    55   950     0     111  pos
 39667    55   325    28    55   950     0      92  <=
 39668    55   325    31    55   950     0     111  lim
 39669    55   325    35    55   950     0      58  ?
 39670    55   325    37    55   950     0     111  lim
 39671    55   325    41    55   950     0      77  -
 39672    55   325    43    55   950     0     111  pos
 39673    55   325    47    55   950     0      65  :
 39674    55   325    49    55   950     0     112  0
 39675    55   325    50    55   950     0      60  )
 39676    55   325    51    55   950     0     102  ;
 39677    55   326    13    55   950     0      31  if
 39678    55   326    16    55   950     0      59  (
 39679    55   326    17    55   950     0     111  length
 39680    55   326    24    55   950     0      89  >
 39681    55   326    26    55   950     0     111  rem
 39682    55   326    29    55   950     0      60  )
 39683    55   327    17    55   950     0      20  throw
 39684    55   327    27    55   950     0     111  BufferOverflowException
 39685    55   327    50    55   950     0      59  (
 39686    55   327    51    55   950     0      60  )
 39687    55   327    52    55   950     0     102  ;
 39688    55   329    13    55   950     0      31  if
 39689    55   329    16    55   950     0      59  (
 39690    55   329    17    55   950     0     111  order
 39691    55   329    22    55   950     0      59  (
 39692    55   329    23    55   950     0      60  )
 39693    55   329    25    55   950     0      71  !=
 39694    55   329    28    55   950     0     111  ByteOrder.nativeOrder
 39695    55   329    49    55   950     0      59  (
 39696    55   329    50    55   950     0      60  )
 39697    55   329    51    55   950     0      60  )
 39698    55   330    17    55   950     0     111  Bits.copyFromShortArray
 39699    55   330    40    55   950     0      59  (
 39700    55   330    41    55   950     0     111  src
 39701    55   330    44    55   950     0      66  ,
 39702    55   330    46    55   950     0     111  offset
 39703    55   330    53    55   950     0      90  <<
 39704    55   330    56    55   950     0     112  1
 39705    55   330    57    55   950     0      66  ,
 39706    55   331    45    55   950     0     111  ix
 39707    55   331    47    55   950     0      59  (
 39708    55   331    48    55   950     0     111  pos
 39709    55   331    51    55   950     0      60  )
 39710    55   331    52    55   950     0      66  ,
 39711    55   331    54    55   950     0     111  length
 39712    55   331    61    55   950     0      90  <<
 39713    55   331    64    55   950     0     112  1
 39714    55   331    65    55   950     0      60  )
 39715    55   331    66    55   950     0     102  ;
 39716    55   332    13    55   950     0      48  else
 39717    55   333    17    55   950     0     111  Bits.copyFromByteArray
 39718    55   333    39    55   950     0      59  (
 39719    55   333    40    55   950     0     111  src
 39720    55   333    43    55   950     0      66  ,
 39721    55   333    45    55   950     0     111  offset
 39722    55   333    52    55   950     0      90  <<
 39723    55   333    55    55   950     0     112  1
 39724    55   333    56    55   950     0      66  ,
 39725    55   334    40    55   950     0     111  ix
 39726    55   334    42    55   950     0      59  (
 39727    55   334    43    55   950     0     111  pos
 39728    55   334    46    55   950     0      60  )
 39729    55   334    47    55   950     0      66  ,
 39730    55   334    49    55   950     0     111  length
 39731    55   334    56    55   950     0      90  <<
 39732    55   334    59    55   950     0     112  1
 39733    55   334    60    55   950     0      60  )
 39734    55   334    61    55   950     0     102  ;
 39735    55   335    13    55   950     0     111  position
 39736    55   335    21    55   950     0      59  (
 39737    55   335    22    55   950     0     111  pos
 39738    55   335    26    55   950     0      74  +
 39739    55   335    28    55   950     0     111  length
 39740    55   335    34    55   950     0      60  )
 39741    55   335    35    55   950     0     102  ;
 39742    55   336     9    55   950     0      64  }
 39743    55   336    11    55   950     0      48  else
 39744    55   336    16    55   950     0      63  {
 39745    55   337    13    55   950     0     111  super.put
 39746    55   337    22    55   950     0      59  (
 39747    55   337    23    55   950     0     111  src
 39748    55   337    26    55   950     0      66  ,
 39749    55   337    28    55   950     0     111  offset
 39750    55   337    34    55   950     0      66  ,
 39751    55   337    36    55   950     0     111  length
 39752    55   337    42    55   950     0      60  )
 39753    55   337    43    55   950     0     102  ;
 39754    55   338     9    55   950     0      64  }
 39755    55   339     9    55   950     0      19  return
 39756    55   339    16    55   950     0      44  this
 39757    55   339    20    55   950     0     102  ;
 39758    55   343     5    55   950     0      64  }
 39759    55   343     5    55   950     0    2244  ENDMETHOD
 39760    55   343     5    55   951     0    2245  STARTMETHOD
 39761    55   345    12    55   951     0     111  ShortBuffer
 39762    55   345    24    55   951     0     111  compact
 39763    55   345    31    55   951     0      59  (
 39764    55   345    32    55   951     0      60  )
 39765    55   345    34    55   951     0      63  {
 39766    55   347     9    55   951     1      36  int
 39767    55   347    13    55   951     1     111  pos
 39768    55   347    17    55   951     1      67  =
 39769    55   347    19    55   951     1     111  position
 39770    55   347    27    55   951     1      59  (
 39771    55   347    28    55   951     1      60  )
 39772    55   347    29    55   951     1     102  ;
 39773    55   348     9    55   951     1      36  int
 39774    55   348    13    55   951     1     111  lim
 39775    55   348    17    55   951     1      67  =
 39776    55   348    19    55   951     1     111  limit
 39777    55   348    24    55   951     1      59  (
 39778    55   348    25    55   951     1      60  )
 39779    55   348    26    55   951     1     102  ;
 39780    55   349     9    55   951     0     111  assert
 39781    55   349    16    55   951     0      59  (
 39782    55   349    17    55   951     0     111  pos
 39783    55   349    21    55   951     0      92  <=
 39784    55   349    24    55   951     0     111  lim
 39785    55   349    27    55   951     0      60  )
 39786    55   349    28    55   951     0     102  ;
 39787    55   350     9    55   951     0      36  int
 39788    55   350    13    55   951     0     111  rem
 39789    55   350    17    55   951     0      67  =
 39790    55   350    19    55   951     0      59  (
 39791    55   350    20    55   951     0     111  pos
 39792    55   350    24    55   951     0      92  <=
 39793    55   350    27    55   951     0     111  lim
 39794    55   350    31    55   951     0      58  ?
 39795    55   350    33    55   951     0     111  lim
 39796    55   350    37    55   951     0      77  -
 39797    55   350    39    55   951     0     111  pos
 39798    55   350    43    55   951     0      65  :
 39799    55   350    45    55   951     0     112  0
 39800    55   350    46    55   951     0      60  )
 39801    55   350    47    55   951     0     102  ;
 39802    55   352     9    55   951     0     111  unsafe.copyMemory
 39803    55   352    26    55   951     0      59  (
 39804    55   352    27    55   951     0     111  ix
 39805    55   352    29    55   951     0      59  (
 39806    55   352    30    55   951     0     111  pos
 39807    55   352    33    55   951     0      60  )
 39808    55   352    34    55   951     0      66  ,
 39809    55   352    36    55   951     0     111  ix
 39810    55   352    38    55   951     0      59  (
 39811    55   352    39    55   951     0     112  0
 39812    55   352    40    55   951     0      60  )
 39813    55   352    41    55   951     0      66  ,
 39814    55   352    43    55   951     0     111  rem
 39815    55   352    47    55   951     0      90  <<
 39816    55   352    50    55   951     0     112  1
 39817    55   352    51    55   951     0      60  )
 39818    55   352    52    55   951     0     102  ;
 39819    55   353     9    55   951     0     111  position
 39820    55   353    17    55   951     0      59  (
 39821    55   353    18    55   951     0     111  rem
 39822    55   353    21    55   951     0      60  )
 39823    55   353    22    55   951     0     102  ;
 39824    55   354     9    55   951     0     111  limit
 39825    55   354    14    55   951     0      59  (
 39826    55   354    15    55   951     0     111  capacity
 39827    55   354    23    55   951     0      59  (
 39828    55   354    24    55   951     0      60  )
 39829    55   354    25    55   951     0      60  )
 39830    55   354    26    55   951     0     102  ;
 39831    55   355     9    55   951     0     111  clearMark
 39832    55   355    18    55   951     0      59  (
 39833    55   355    19    55   951     0      60  )
 39834    55   355    20    55   951     0     102  ;
 39835    55   356     9    55   951     0      19  return
 39836    55   356    16    55   951     0      44  this
 39837    55   356    20    55   951     1     102  ;
 39838    55   360     5    55   951     1      64  }
 39839    55   360     5    55   951     0    2246  ENDMETHOD
 39840    55   360     5    55   952     0    2247  STARTMETHOD
 39841    55   362    12    55   952     0      39  boolean
 39842    55   362    20    55   952     0     111  isDirect
 39843    55   362    28    55   952     0      59  (
 39844    55   362    29    55   952     0      60  )
 39845    55   362    31    55   952     0      63  {
 39846    55   363     9    55   952     0      19  return
 39847    55   363    16    55   952     0      52  true
 39848    55   363    20    55   952     1     102  ;
 39849    55   364     5    55   952     1      64  }
 39850    55   364     5    55   952     0    2248  ENDMETHOD
 39851    55   364     5    55   953     0    2249  STARTMETHOD
 39852    55   366    12    55   953     0      39  boolean
 39853    55   366    20    55   953     0     111  isReadOnly
 39854    55   366    30    55   953     0      59  (
 39855    55   366    31    55   953     0      60  )
 39856    55   366    33    55   953     0      63  {
 39857    55   367     9    55   953     0      19  return
 39858    55   367    16    55   953     0      43  false
 39859    55   367    21    55   953     1     102  ;
 39860    55   368     5    55   953     1      64  }
 39861    55   368     5    55   953     0    2250  ENDMETHOD
 39862    55   368     5    55   954     0    2251  STARTMETHOD
 39863    55   414    12    55   954     0     111  ByteOrder
 39864    55   414    22    55   954     0     111  order
 39865    55   414    27    55   954     0      59  (
 39866    55   414    28    55   954     0      60  )
 39867    55   414    30    55   954     0      63  {
 39868    55   416     9    55   954     0      19  return
 39869    55   416    16    55   954     0      59  (
 39870    55   416    17    55   954     0      59  (
 39871    55   416    18    55   954     0     111  ByteOrder.nativeOrder
 39872    55   416    39    55   954     0      59  (
 39873    55   416    40    55   954     0      60  )
 39874    55   416    42    55   954     0      68  ==
 39875    55   416    45    55   954     0     111  ByteOrder.BIG_ENDIAN
 39876    55   416    65    55   954     0      60  )
 39877    55   417    17    55   954     0      58  ?
 39878    55   417    19    55   954     0     111  ByteOrder.LITTLE_ENDIAN
 39879    55   417    43    55   954     0      65  :
 39880    55   417    45    55   954     0     111  ByteOrder.BIG_ENDIAN
 39881    55   417    65    55   954     0      60  )
 39882    55   417    66    55   954     0     102  ;
 39883    55   423     5    55   954     0      64  }
 39884    55   423     5    55   954     0    2252  ENDMETHOD
 39885    55   450     1    55    -1     0      64  }
 39886    55   450     1    55    -1     1    2253  ENDCLASS
 39887    55   450     1    -1    -1     1    2254  ENDFILE C:\Users\RA\javasrc\java\nio\DirectShortBufferS.java
 39888    56     1     1    -1    -1     1    2255  STARTFILE C:\Users\RA\javasrc\java\nio\DirectShortBufferU.java
 39889    56    28     9    -1    -1     0     111  java.nio
 39890    56    28    17    -1    -1     0     102  ;
 39891    56    30     1    -1    -1     1      49  import
 39892    56    30     8    -1    -1     1     111  sun.misc.Cleaner
 39893    56    30    24    -1    -1     1     102  ;
 39894    56    31     1    -1    -1     1      49  import
 39895    56    31     8    -1    -1     1     111  sun.misc.Unsafe
 39896    56    31    23    -1    -1     1     102  ;
 39897    56    32     1    -1    -1     1      49  import
 39898    56    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 39899    56    32    31    -1    -1     1     102  ;
 39900    56    33     1    -1    -1     1      49  import
 39901    56    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 39902    56    33    34    -1    -1     1     102  ;
 39903    56    36     1    56    -1     0    2256  STARTCLASS
 39904    56    36     1    56    -1     0      24  class
 39905    56    36     7    56    -1     0     111  DirectShortBufferU
 39906    56    38     5    56    -1     0      38  extends
 39907    56    38    13    56    -1     0     111  ShortBuffer
 39908    56    42     5    56    -1     0      17  implements
 39909    56    42    16    56    -1     0     111  DirectBuffer
 39910    56    43     1    56    -1     0      63  {
 39911    56    48     5    56    -1     0      23  protected
 39912    56    48    15    56    -1     0      45  static
 39913    56    48    28    56    -1     0     111  Unsafe
 39914    56    48    35    56    -1     0     111  unsafe
 39915    56    48    42    56    -1     0      67  =
 39916    56    48    44    56    -1     0     111  Bits.unsafe
 39917    56    48    55    56    -1     0      59  (
 39918    56    48    56    56    -1     0      60  )
 39919    56    48    57    56    -1     0     102  ;
 39920    56    51     5    56    -1     0      23  protected
 39921    56    51    15    56    -1     0      45  static
 39922    56    51    28    56    -1     0      39  boolean
 39923    56    51    36    56    -1     0     111  unaligned
 39924    56    51    46    56    -1     0      67  =
 39925    56    51    48    56    -1     0     111  Bits.unaligned
 39926    56    51    62    56    -1     0      59  (
 39927    56    51    63    56    -1     0      60  )
 39928    56    51    64    56    -1     0     102  ;
 39929    56    59     5    56    -1     0      23  protected
 39930    56    59    15    56    -1     0     111  Object
 39931    56    59    22    56    -1     0     111  viewedBuffer
 39932    56    59    35    56    -1     0      67  =
 39933    56    59    37    56    -1     0      21  null
 39934    56    59    41    56    -1     0     102  ;
 39935    56    59    41    56   955     0    2257  STARTMETHOD
 39936    56    61    12    56   955     0     111  Object
 39937    56    61    19    56   955     0     111  viewedBuffer
 39938    56    61    31    56   955     0      59  (
 39939    56    61    32    56   955     0      60  )
 39940    56    61    34    56   955     0      63  {
 39941    56    62     9    56   955     0      19  return
 39942    56    62    16    56   955     0     111  viewedBuffer
 39943    56    62    28    56   955     0     102  ;
 39944    56    63     5    56   955     0      64  }
 39945    56    63     5    56   955     0    2258  ENDMETHOD
 39946    56    63     5    56   956     0    2259  STARTMETHOD
 39947    56   100    12    56   956     0     111  Cleaner
 39948    56   100    20    56   956     0     111  cleaner
 39949    56   100    27    56   956     0      59  (
 39950    56   100    28    56   956     0      60  )
 39951    56   100    30    56   956     0      63  {
 39952    56   100    32    56   956     0      19  return
 39953    56   100    39    56   956     0      21  null
 39954    56   100    43    56   956     0     102  ;
 39955    56   100    45    56   956     0      64  }
 39956    56   100    45    56   956     0    2260  ENDMETHOD
 39957    56   100    45    56   957     0    2261  STARTMETHOD
 39958    56   164     5    56   957     0     111  DirectShortBufferU
 39959    56   164    23    56   957     0      59  (
 39960    56   164    24    56   957     0     111  DirectBuffer
 39961    56   164    37    56   957     0     111  db
 39962    56   164    39    56   957     0      66  ,
 39963    56   165    32    56   957     0      36  int
 39964    56   165    36    56   957     0     111  mark
 39965    56   165    40    56   957     0      66  ,
 39966    56   165    42    56   957     0      36  int
 39967    56   165    46    56   957     0     111  pos
 39968    56   165    49    56   957     0      66  ,
 39969    56   165    51    56   957     0      36  int
 39970    56   165    55    56   957     0     111  lim
 39971    56   165    58    56   957     0      66  ,
 39972    56   165    60    56   957     0      36  int
 39973    56   165    64    56   957     0     111  cap
 39974    56   165    67    56   957     0      66  ,
 39975    56   166    32    56   957     0      36  int
 39976    56   166    36    56   957     0     111  off
 39977    56   166    39    56   957     0      60  )
 39978    56   167     5    56   957     0      63  {
 39979    56   169     9    56   957     0      27  super
 39980    56   169    14    56   957     0      59  (
 39981    56   169    15    56   957     0     111  mark
 39982    56   169    19    56   957     0      66  ,
 39983    56   169    21    56   957     0     111  pos
 39984    56   169    24    56   957     0      66  ,
 39985    56   169    26    56   957     0     111  lim
 39986    56   169    29    56   957     0      66  ,
 39987    56   169    31    56   957     0     111  cap
 39988    56   169    34    56   957     0      60  )
 39989    56   169    35    56   957     0     102  ;
 39990    56   170     9    56   957     0     111  address
 39991    56   170    17    56   957     0      67  =
 39992    56   170    19    56   957     0     111  db.address
 39993    56   170    29    56   957     0      59  (
 39994    56   170    30    56   957     0      60  )
 39995    56   170    32    56   957     0      74  +
 39996    56   170    34    56   957     0     111  off
 39997    56   170    37    56   957     0     102  ;
 39998    56   171     9    56   957     0     111  viewedBuffer
 39999    56   171    22    56   957     0      67  =
 40000    56   171    24    56   957     0     111  db
 40001    56   171    26    56   957     0     102  ;
 40002    56   178     5    56   957     0      64  }
 40003    56   178     5    56   957     0    2262  ENDMETHOD
 40004    56   178     5    56   958     0    2263  STARTMETHOD
 40005    56   180    12    56   958     0     111  ShortBuffer
 40006    56   180    24    56   958     0     111  slice
 40007    56   180    29    56   958     0      59  (
 40008    56   180    30    56   958     0      60  )
 40009    56   180    32    56   958     0      63  {
 40010    56   181     9    56   958     1      36  int
 40011    56   181    13    56   958     1     111  pos
 40012    56   181    17    56   958     1      67  =
 40013    56   181    19    56   958     1     111  this.position
 40014    56   181    32    56   958     1      59  (
 40015    56   181    33    56   958     1      60  )
 40016    56   181    34    56   958     1     102  ;
 40017    56   182     9    56   958     1      36  int
 40018    56   182    13    56   958     1     111  lim
 40019    56   182    17    56   958     1      67  =
 40020    56   182    19    56   958     1     111  this.limit
 40021    56   182    29    56   958     1      59  (
 40022    56   182    30    56   958     1      60  )
 40023    56   182    31    56   958     1     102  ;
 40024    56   183     9    56   958     0     111  assert
 40025    56   183    16    56   958     0      59  (
 40026    56   183    17    56   958     0     111  pos
 40027    56   183    21    56   958     0      92  <=
 40028    56   183    24    56   958     0     111  lim
 40029    56   183    27    56   958     0      60  )
 40030    56   183    28    56   958     0     102  ;
 40031    56   184     9    56   958     0      36  int
 40032    56   184    13    56   958     0     111  rem
 40033    56   184    17    56   958     0      67  =
 40034    56   184    19    56   958     0      59  (
 40035    56   184    20    56   958     0     111  pos
 40036    56   184    24    56   958     0      92  <=
 40037    56   184    27    56   958     0     111  lim
 40038    56   184    31    56   958     0      58  ?
 40039    56   184    33    56   958     0     111  lim
 40040    56   184    37    56   958     0      77  -
 40041    56   184    39    56   958     0     111  pos
 40042    56   184    43    56   958     0      65  :
 40043    56   184    45    56   958     0     112  0
 40044    56   184    46    56   958     0      60  )
 40045    56   184    47    56   958     0     102  ;
 40046    56   185     9    56   958     0      36  int
 40047    56   185    13    56   958     0     111  off
 40048    56   185    17    56   958     0      67  =
 40049    56   185    19    56   958     0      59  (
 40050    56   185    20    56   958     0     111  pos
 40051    56   185    24    56   958     0      90  <<
 40052    56   185    27    56   958     0     112  1
 40053    56   185    28    56   958     0      60  )
 40054    56   185    29    56   958     0     102  ;
 40055    56   186     9    56   958     0     111  assert
 40056    56   186    16    56   958     0      59  (
 40057    56   186    17    56   958     0     111  off
 40058    56   186    21    56   958     0      88  >=
 40059    56   186    24    56   958     0     112  0
 40060    56   186    25    56   958     0      60  )
 40061    56   186    26    56   958     0     102  ;
 40062    56   187     9    56   958     0      19  return
 40063    56   187    20    56   958     0     111  DirectShortBufferU
 40064    56   187    38    56   958     0      59  (
 40065    56   187    39    56   958     0      44  this
 40066    56   187    43    56   958     0      66  ,
 40067    56   187    45    56   958     0      77  -
 40068    56   187    46    56   958     0     112  1
 40069    56   187    47    56   958     0      66  ,
 40070    56   187    49    56   958     0     112  0
 40071    56   187    50    56   958     0      66  ,
 40072    56   187    52    56   958     0     111  rem
 40073    56   187    55    56   958     0      66  ,
 40074    56   187    57    56   958     0     111  rem
 40075    56   187    60    56   958     0      66  ,
 40076    56   187    62    56   958     0     111  off
 40077    56   187    65    56   958     0      60  )
 40078    56   187    66    56   958     0     102  ;
 40079    56   188     5    56   958     0      64  }
 40080    56   188     5    56   958     0    2264  ENDMETHOD
 40081    56   188     5    56   959     0    2265  STARTMETHOD
 40082    56   190    12    56   959     0     111  ShortBuffer
 40083    56   190    24    56   959     0     111  duplicate
 40084    56   190    33    56   959     0      59  (
 40085    56   190    34    56   959     0      60  )
 40086    56   190    36    56   959     0      63  {
 40087    56   191     9    56   959     0      19  return
 40088    56   191    20    56   959     0     111  DirectShortBufferU
 40089    56   191    38    56   959     0      59  (
 40090    56   191    39    56   959     0      44  this
 40091    56   191    43    56   959     0      66  ,
 40092    56   192    47    56   959     1     111  this.markValue
 40093    56   192    61    56   959     1      59  (
 40094    56   192    62    56   959     1      60  )
 40095    56   192    63    56   959     1      66  ,
 40096    56   193    47    56   959     1     111  this.position
 40097    56   193    60    56   959     1      59  (
 40098    56   193    61    56   959     1      60  )
 40099    56   193    62    56   959     1      66  ,
 40100    56   194    47    56   959     1     111  this.limit
 40101    56   194    57    56   959     1      59  (
 40102    56   194    58    56   959     1      60  )
 40103    56   194    59    56   959     1      66  ,
 40104    56   195    47    56   959     1     111  this.capacity
 40105    56   195    60    56   959     1      59  (
 40106    56   195    61    56   959     1      60  )
 40107    56   195    62    56   959     1      66  ,
 40108    56   196    47    56   959     0     112  0
 40109    56   196    48    56   959     0      60  )
 40110    56   196    49    56   959     0     102  ;
 40111    56   197     5    56   959     0      64  }
 40112    56   197     5    56   959     0    2266  ENDMETHOD
 40113    56   197     5    56   960     0    2267  STARTMETHOD
 40114    56   199    12    56   960     0     111  ShortBuffer
 40115    56   199    24    56   960     0     111  asReadOnlyBuffer
 40116    56   199    40    56   960     0      59  (
 40117    56   199    41    56   960     0      60  )
 40118    56   199    43    56   960     0      63  {
 40119    56   201     9    56   960     0      19  return
 40120    56   201    20    56   960     0     111  DirectShortBufferRU
 40121    56   201    39    56   960     0      59  (
 40122    56   201    40    56   960     0      44  this
 40123    56   201    44    56   960     0      66  ,
 40124    56   202    44    56   960     1     111  this.markValue
 40125    56   202    58    56   960     1      59  (
 40126    56   202    59    56   960     1      60  )
 40127    56   202    60    56   960     1      66  ,
 40128    56   203    44    56   960     1     111  this.position
 40129    56   203    57    56   960     1      59  (
 40130    56   203    58    56   960     1      60  )
 40131    56   203    59    56   960     1      66  ,
 40132    56   204    44    56   960     1     111  this.limit
 40133    56   204    54    56   960     1      59  (
 40134    56   204    55    56   960     1      60  )
 40135    56   204    56    56   960     1      66  ,
 40136    56   205    44    56   960     1     111  this.capacity
 40137    56   205    57    56   960     1      59  (
 40138    56   205    58    56   960     1      60  )
 40139    56   205    59    56   960     1      66  ,
 40140    56   206    44    56   960     0     112  0
 40141    56   206    45    56   960     0      60  )
 40142    56   206    46    56   960     0     102  ;
 40143    56   210     5    56   960     0      64  }
 40144    56   210     5    56   960     0    2268  ENDMETHOD
 40145    56   210     5    56   961     0    2269  STARTMETHOD
 40146    56   214    12    56   961     0      53  long
 40147    56   214    17    56   961     0     111  address
 40148    56   214    24    56   961     0      59  (
 40149    56   214    25    56   961     0      60  )
 40150    56   214    27    56   961     0      63  {
 40151    56   215     9    56   961     0      19  return
 40152    56   215    16    56   961     0     111  address
 40153    56   215    23    56   961     0     102  ;
 40154    56   216     5    56   961     0      64  }
 40155    56   216     5    56   961     0    2270  ENDMETHOD
 40156    56   216     5    56   962     0    2271  STARTMETHOD
 40157    56   218     5    56   962     0      41  private
 40158    56   218    13    56   962     0      53  long
 40159    56   218    18    56   962     0     111  ix
 40160    56   218    20    56   962     0      59  (
 40161    56   218    21    56   962     0      36  int
 40162    56   218    25    56   962     0     111  i
 40163    56   218    26    56   962     0      60  )
 40164    56   218    28    56   962     0      63  {
 40165    56   219     9    56   962     0      19  return
 40166    56   219    16    56   962     0     111  address
 40167    56   219    24    56   962     0      74  +
 40168    56   219    26    56   962     0      59  (
 40169    56   219    27    56   962     0     111  i
 40170    56   219    29    56   962     0      90  <<
 40171    56   219    32    56   962     0     112  1
 40172    56   219    33    56   962     0      60  )
 40173    56   219    34    56   962     0     102  ;
 40174    56   220     5    56   962     0      64  }
 40175    56   220     5    56   962     0    2272  ENDMETHOD
 40176    56   220     5    56   963     0    2273  STARTMETHOD
 40177    56   222    18    56   963     0     111  get
 40178    56   222    21    56   963     0      59  (
 40179    56   222    22    56   963     0      60  )
 40180    56   222    24    56   963     0      63  {
 40181    56   223     9    56   963     0      19  return
 40182    56   223    16    56   963     0      59  (
 40183    56   223    17    56   963     0      59  (
 40184    56   223    18    56   963     0     111  unsafe.getShort
 40185    56   223    33    56   963     0      59  (
 40186    56   223    34    56   963     0     111  ix
 40187    56   223    36    56   963     0      59  (
 40188    56   223    37    56   963     0     111  nextGetIndex
 40189    56   223    49    56   963     0      59  (
 40190    56   223    50    56   963     0      60  )
 40191    56   223    51    56   963     0      60  )
 40192    56   223    52    56   963     0      60  )
 40193    56   223    53    56   963     0      60  )
 40194    56   223    54    56   963     0      60  )
 40195    56   223    55    56   963     0     102  ;
 40196    56   224     5    56   963     0      64  }
 40197    56   224     5    56   963     0    2274  ENDMETHOD
 40198    56   224     5    56   964     0    2275  STARTMETHOD
 40199    56   226    18    56   964     0     111  get
 40200    56   226    21    56   964     0      59  (
 40201    56   226    22    56   964     0      36  int
 40202    56   226    26    56   964     0     111  i
 40203    56   226    27    56   964     0      60  )
 40204    56   226    29    56   964     0      63  {
 40205    56   227     9    56   964     0      19  return
 40206    56   227    16    56   964     0      59  (
 40207    56   227    17    56   964     0      59  (
 40208    56   227    18    56   964     0     111  unsafe.getShort
 40209    56   227    33    56   964     0      59  (
 40210    56   227    34    56   964     0     111  ix
 40211    56   227    36    56   964     0      59  (
 40212    56   227    37    56   964     0     111  checkIndex
 40213    56   227    47    56   964     0      59  (
 40214    56   227    48    56   964     0     111  i
 40215    56   227    49    56   964     0      60  )
 40216    56   227    50    56   964     0      60  )
 40217    56   227    51    56   964     0      60  )
 40218    56   227    52    56   964     0      60  )
 40219    56   227    53    56   964     0      60  )
 40220    56   227    54    56   964     0     102  ;
 40221    56   228     5    56   964     0      64  }
 40222    56   228     5    56   964     0    2276  ENDMETHOD
 40223    56   228     5    56   965     0    2277  STARTMETHOD
 40224    56   230    12    56   965     0     111  ShortBuffer
 40225    56   230    24    56   965     0     111  get
 40226    56   230    27    56   965     0      59  (
 40227    56   230    33    56   965     0      61  [
 40228    56   230    34    56   965     0      62  ]
 40229    56   230    36    56   965     0     111  dst
 40230    56   230    39    56   965     0      66  ,
 40231    56   230    41    56   965     0      36  int
 40232    56   230    45    56   965     0     111  offset
 40233    56   230    51    56   965     0      66  ,
 40234    56   230    53    56   965     0      36  int
 40235    56   230    57    56   965     0     111  length
 40236    56   230    63    56   965     0      60  )
 40237    56   230    65    56   965     0      63  {
 40238    56   232     9    56   965     0      31  if
 40239    56   232    12    56   965     0      59  (
 40240    56   232    13    56   965     0      59  (
 40241    56   232    14    56   965     0     111  length
 40242    56   232    21    56   965     0      90  <<
 40243    56   232    24    56   965     0     112  1
 40244    56   232    25    56   965     0      60  )
 40245    56   232    27    56   965     0      89  >
 40246    56   232    29    56   965     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 40247    56   232    61    56   965     0      60  )
 40248    56   232    63    56   965     0      63  {
 40249    56   233    13    56   965     0     111  checkBounds
 40250    56   233    24    56   965     0      59  (
 40251    56   233    25    56   965     0     111  offset
 40252    56   233    31    56   965     0      66  ,
 40253    56   233    33    56   965     0     111  length
 40254    56   233    39    56   965     0      66  ,
 40255    56   233    41    56   965     0     111  dst.length
 40256    56   233    51    56   965     0      60  )
 40257    56   233    52    56   965     0     102  ;
 40258    56   234    13    56   965     1      36  int
 40259    56   234    17    56   965     1     111  pos
 40260    56   234    21    56   965     1      67  =
 40261    56   234    23    56   965     1     111  position
 40262    56   234    31    56   965     1      59  (
 40263    56   234    32    56   965     1      60  )
 40264    56   234    33    56   965     1     102  ;
 40265    56   235    13    56   965     1      36  int
 40266    56   235    17    56   965     1     111  lim
 40267    56   235    21    56   965     1      67  =
 40268    56   235    23    56   965     1     111  limit
 40269    56   235    28    56   965     1      59  (
 40270    56   235    29    56   965     1      60  )
 40271    56   235    30    56   965     1     102  ;
 40272    56   236    13    56   965     0     111  assert
 40273    56   236    20    56   965     0      59  (
 40274    56   236    21    56   965     0     111  pos
 40275    56   236    25    56   965     0      92  <=
 40276    56   236    28    56   965     0     111  lim
 40277    56   236    31    56   965     0      60  )
 40278    56   236    32    56   965     0     102  ;
 40279    56   237    13    56   965     0      36  int
 40280    56   237    17    56   965     0     111  rem
 40281    56   237    21    56   965     0      67  =
 40282    56   237    23    56   965     0      59  (
 40283    56   237    24    56   965     0     111  pos
 40284    56   237    28    56   965     0      92  <=
 40285    56   237    31    56   965     0     111  lim
 40286    56   237    35    56   965     0      58  ?
 40287    56   237    37    56   965     0     111  lim
 40288    56   237    41    56   965     0      77  -
 40289    56   237    43    56   965     0     111  pos
 40290    56   237    47    56   965     0      65  :
 40291    56   237    49    56   965     0     112  0
 40292    56   237    50    56   965     0      60  )
 40293    56   237    51    56   965     0     102  ;
 40294    56   238    13    56   965     0      31  if
 40295    56   238    16    56   965     0      59  (
 40296    56   238    17    56   965     0     111  length
 40297    56   238    24    56   965     0      89  >
 40298    56   238    26    56   965     0     111  rem
 40299    56   238    29    56   965     0      60  )
 40300    56   239    17    56   965     0      20  throw
 40301    56   239    27    56   965     0     111  BufferUnderflowException
 40302    56   239    51    56   965     0      59  (
 40303    56   239    52    56   965     0      60  )
 40304    56   239    53    56   965     0     102  ;
 40305    56   241    13    56   965     0      31  if
 40306    56   241    16    56   965     0      59  (
 40307    56   241    17    56   965     0     111  order
 40308    56   241    22    56   965     0      59  (
 40309    56   241    23    56   965     0      60  )
 40310    56   241    25    56   965     0      71  !=
 40311    56   241    28    56   965     0     111  ByteOrder.nativeOrder
 40312    56   241    49    56   965     0      59  (
 40313    56   241    50    56   965     0      60  )
 40314    56   241    51    56   965     0      60  )
 40315    56   242    17    56   965     0     111  Bits.copyToShortArray
 40316    56   242    38    56   965     0      59  (
 40317    56   242    39    56   965     0     111  ix
 40318    56   242    41    56   965     0      59  (
 40319    56   242    42    56   965     0     111  pos
 40320    56   242    45    56   965     0      60  )
 40321    56   242    46    56   965     0      66  ,
 40322    56   242    48    56   965     0     111  dst
 40323    56   242    51    56   965     0      66  ,
 40324    56   243    43    56   965     0     111  offset
 40325    56   243    50    56   965     0      90  <<
 40326    56   243    53    56   965     0     112  1
 40327    56   243    54    56   965     0      66  ,
 40328    56   244    43    56   965     0     111  length
 40329    56   244    50    56   965     0      90  <<
 40330    56   244    53    56   965     0     112  1
 40331    56   244    54    56   965     0      60  )
 40332    56   244    55    56   965     0     102  ;
 40333    56   245    13    56   965     0      48  else
 40334    56   246    17    56   965     0     111  Bits.copyToByteArray
 40335    56   246    37    56   965     0      59  (
 40336    56   246    38    56   965     0     111  ix
 40337    56   246    40    56   965     0      59  (
 40338    56   246    41    56   965     0     111  pos
 40339    56   246    44    56   965     0      60  )
 40340    56   246    45    56   965     0      66  ,
 40341    56   246    47    56   965     0     111  dst
 40342    56   246    50    56   965     0      66  ,
 40343    56   247    38    56   965     0     111  offset
 40344    56   247    45    56   965     0      90  <<
 40345    56   247    48    56   965     0     112  1
 40346    56   247    49    56   965     0      66  ,
 40347    56   248    38    56   965     0     111  length
 40348    56   248    45    56   965     0      90  <<
 40349    56   248    48    56   965     0     112  1
 40350    56   248    49    56   965     0      60  )
 40351    56   248    50    56   965     0     102  ;
 40352    56   249    13    56   965     0     111  position
 40353    56   249    21    56   965     0      59  (
 40354    56   249    22    56   965     0     111  pos
 40355    56   249    26    56   965     0      74  +
 40356    56   249    28    56   965     0     111  length
 40357    56   249    34    56   965     0      60  )
 40358    56   249    35    56   965     0     102  ;
 40359    56   250     9    56   965     0      64  }
 40360    56   250    11    56   965     0      48  else
 40361    56   250    16    56   965     0      63  {
 40362    56   251    13    56   965     0     111  super.get
 40363    56   251    22    56   965     0      59  (
 40364    56   251    23    56   965     0     111  dst
 40365    56   251    26    56   965     0      66  ,
 40366    56   251    28    56   965     0     111  offset
 40367    56   251    34    56   965     0      66  ,
 40368    56   251    36    56   965     0     111  length
 40369    56   251    42    56   965     0      60  )
 40370    56   251    43    56   965     0     102  ;
 40371    56   252     9    56   965     0      64  }
 40372    56   253     9    56   965     0      19  return
 40373    56   253    16    56   965     0      44  this
 40374    56   253    20    56   965     0     102  ;
 40375    56   257     5    56   965     0      64  }
 40376    56   257     5    56   965     0    2278  ENDMETHOD
 40377    56   257     5    56   966     0    2279  STARTMETHOD
 40378    56   261    12    56   966     0     111  ShortBuffer
 40379    56   261    24    56   966     0     111  put
 40380    56   261    27    56   966     0      59  (
 40381    56   261    34    56   966     0     111  x
 40382    56   261    35    56   966     0      60  )
 40383    56   261    37    56   966     0      63  {
 40384    56   263     9    56   966     0     111  unsafe.putShort
 40385    56   263    24    56   966     0      59  (
 40386    56   263    25    56   966     0     111  ix
 40387    56   263    27    56   966     0      59  (
 40388    56   263    28    56   966     0     111  nextPutIndex
 40389    56   263    40    56   966     0      59  (
 40390    56   263    41    56   966     0      60  )
 40391    56   263    42    56   966     0      60  )
 40392    56   263    43    56   966     0      66  ,
 40393    56   263    45    56   966     0      59  (
 40394    56   263    46    56   966     0      59  (
 40395    56   263    47    56   966     0     111  x
 40396    56   263    48    56   966     0      60  )
 40397    56   263    49    56   966     0      60  )
 40398    56   263    50    56   966     0      60  )
 40399    56   263    51    56   966     0     102  ;
 40400    56   264     9    56   966     0      19  return
 40401    56   264    16    56   966     0      44  this
 40402    56   264    20    56   966     0     102  ;
 40403    56   268     5    56   966     0      64  }
 40404    56   268     5    56   966     0    2280  ENDMETHOD
 40405    56   268     5    56   967     0    2281  STARTMETHOD
 40406    56   270    12    56   967     0     111  ShortBuffer
 40407    56   270    24    56   967     0     111  put
 40408    56   270    27    56   967     0      59  (
 40409    56   270    28    56   967     0      36  int
 40410    56   270    32    56   967     0     111  i
 40411    56   270    33    56   967     0      66  ,
 40412    56   270    41    56   967     0     111  x
 40413    56   270    42    56   967     0      60  )
 40414    56   270    44    56   967     0      63  {
 40415    56   272     9    56   967     0     111  unsafe.putShort
 40416    56   272    24    56   967     0      59  (
 40417    56   272    25    56   967     0     111  ix
 40418    56   272    27    56   967     0      59  (
 40419    56   272    28    56   967     0     111  checkIndex
 40420    56   272    38    56   967     0      59  (
 40421    56   272    39    56   967     0     111  i
 40422    56   272    40    56   967     0      60  )
 40423    56   272    41    56   967     0      60  )
 40424    56   272    42    56   967     0      66  ,
 40425    56   272    44    56   967     0      59  (
 40426    56   272    45    56   967     0      59  (
 40427    56   272    46    56   967     0     111  x
 40428    56   272    47    56   967     0      60  )
 40429    56   272    48    56   967     0      60  )
 40430    56   272    49    56   967     0      60  )
 40431    56   272    50    56   967     0     102  ;
 40432    56   273     9    56   967     0      19  return
 40433    56   273    16    56   967     0      44  this
 40434    56   273    20    56   967     0     102  ;
 40435    56   277     5    56   967     0      64  }
 40436    56   277     5    56   967     0    2282  ENDMETHOD
 40437    56   277     5    56   968     0    2283  STARTMETHOD
 40438    56   279    12    56   968     0     111  ShortBuffer
 40439    56   279    24    56   968     0     111  put
 40440    56   279    27    56   968     0      59  (
 40441    56   279    28    56   968     0     111  ShortBuffer
 40442    56   279    40    56   968     0     111  src
 40443    56   279    43    56   968     0      60  )
 40444    56   279    45    56   968     0      63  {
 40445    56   281     9    56   968     0      31  if
 40446    56   281    12    56   968     0      59  (
 40447    56   281    13    56   968     0     111  src
 40448    56   281    28    56   968     0     111  DirectShortBufferU
 40449    56   281    46    56   968     0      60  )
 40450    56   281    48    56   968     0      63  {
 40451    56   282    13    56   968     0      31  if
 40452    56   282    16    56   968     0      59  (
 40453    56   282    17    56   968     0     111  src
 40454    56   282    21    56   968     0      68  ==
 40455    56   282    24    56   968     0      44  this
 40456    56   282    28    56   968     0      60  )
 40457    56   283    17    56   968     0      20  throw
 40458    56   283    27    56   968     0     111  IllegalArgumentException
 40459    56   283    51    56   968     0      59  (
 40460    56   283    52    56   968     0      60  )
 40461    56   283    53    56   968     0     102  ;
 40462    56   284    13    56   968     0     111  DirectShortBufferU
 40463    56   284    32    56   968     0     111  sb
 40464    56   284    35    56   968     0      67  =
 40465    56   284    37    56   968     0      59  (
 40466    56   284    38    56   968     0     111  DirectShortBufferU
 40467    56   284    56    56   968     0      60  )
 40468    56   284    57    56   968     0     111  src
 40469    56   284    60    56   968     0     102  ;
 40470    56   286    13    56   968     1      36  int
 40471    56   286    17    56   968     1     111  spos
 40472    56   286    22    56   968     1      67  =
 40473    56   286    24    56   968     1     111  sb.position
 40474    56   286    35    56   968     1      59  (
 40475    56   286    36    56   968     1      60  )
 40476    56   286    37    56   968     1     102  ;
 40477    56   287    13    56   968     1      36  int
 40478    56   287    17    56   968     1     111  slim
 40479    56   287    22    56   968     1      67  =
 40480    56   287    24    56   968     1     111  sb.limit
 40481    56   287    32    56   968     1      59  (
 40482    56   287    33    56   968     1      60  )
 40483    56   287    34    56   968     1     102  ;
 40484    56   288    13    56   968     0     111  assert
 40485    56   288    20    56   968     0      59  (
 40486    56   288    21    56   968     0     111  spos
 40487    56   288    26    56   968     0      92  <=
 40488    56   288    29    56   968     0     111  slim
 40489    56   288    33    56   968     0      60  )
 40490    56   288    34    56   968     0     102  ;
 40491    56   289    13    56   968     0      36  int
 40492    56   289    17    56   968     0     111  srem
 40493    56   289    22    56   968     0      67  =
 40494    56   289    24    56   968     0      59  (
 40495    56   289    25    56   968     0     111  spos
 40496    56   289    30    56   968     0      92  <=
 40497    56   289    33    56   968     0     111  slim
 40498    56   289    38    56   968     0      58  ?
 40499    56   289    40    56   968     0     111  slim
 40500    56   289    45    56   968     0      77  -
 40501    56   289    47    56   968     0     111  spos
 40502    56   289    52    56   968     0      65  :
 40503    56   289    54    56   968     0     112  0
 40504    56   289    55    56   968     0      60  )
 40505    56   289    56    56   968     0     102  ;
 40506    56   291    13    56   968     1      36  int
 40507    56   291    17    56   968     1     111  pos
 40508    56   291    21    56   968     1      67  =
 40509    56   291    23    56   968     1     111  position
 40510    56   291    31    56   968     1      59  (
 40511    56   291    32    56   968     1      60  )
 40512    56   291    33    56   968     1     102  ;
 40513    56   292    13    56   968     1      36  int
 40514    56   292    17    56   968     1     111  lim
 40515    56   292    21    56   968     1      67  =
 40516    56   292    23    56   968     1     111  limit
 40517    56   292    28    56   968     1      59  (
 40518    56   292    29    56   968     1      60  )
 40519    56   292    30    56   968     1     102  ;
 40520    56   293    13    56   968     0     111  assert
 40521    56   293    20    56   968     0      59  (
 40522    56   293    21    56   968     0     111  pos
 40523    56   293    25    56   968     0      92  <=
 40524    56   293    28    56   968     0     111  lim
 40525    56   293    31    56   968     0      60  )
 40526    56   293    32    56   968     0     102  ;
 40527    56   294    13    56   968     0      36  int
 40528    56   294    17    56   968     0     111  rem
 40529    56   294    21    56   968     0      67  =
 40530    56   294    23    56   968     0      59  (
 40531    56   294    24    56   968     0     111  pos
 40532    56   294    28    56   968     0      92  <=
 40533    56   294    31    56   968     0     111  lim
 40534    56   294    35    56   968     0      58  ?
 40535    56   294    37    56   968     0     111  lim
 40536    56   294    41    56   968     0      77  -
 40537    56   294    43    56   968     0     111  pos
 40538    56   294    47    56   968     0      65  :
 40539    56   294    49    56   968     0     112  0
 40540    56   294    50    56   968     0      60  )
 40541    56   294    51    56   968     0     102  ;
 40542    56   296    13    56   968     0      31  if
 40543    56   296    16    56   968     0      59  (
 40544    56   296    17    56   968     0     111  srem
 40545    56   296    22    56   968     0      89  >
 40546    56   296    24    56   968     0     111  rem
 40547    56   296    27    56   968     0      60  )
 40548    56   297    17    56   968     0      20  throw
 40549    56   297    27    56   968     0     111  BufferOverflowException
 40550    56   297    50    56   968     0      59  (
 40551    56   297    51    56   968     0      60  )
 40552    56   297    52    56   968     0     102  ;
 40553    56   298    13    56   968     0     111  unsafe.copyMemory
 40554    56   298    30    56   968     0      59  (
 40555    56   298    31    56   968     0     111  sb.ix
 40556    56   298    36    56   968     0      59  (
 40557    56   298    37    56   968     0     111  spos
 40558    56   298    41    56   968     0      60  )
 40559    56   298    42    56   968     0      66  ,
 40560    56   298    44    56   968     0     111  ix
 40561    56   298    46    56   968     0      59  (
 40562    56   298    47    56   968     0     111  pos
 40563    56   298    50    56   968     0      60  )
 40564    56   298    51    56   968     0      66  ,
 40565    56   298    53    56   968     0     111  srem
 40566    56   298    58    56   968     0      90  <<
 40567    56   298    61    56   968     0     112  1
 40568    56   298    62    56   968     0      60  )
 40569    56   298    63    56   968     0     102  ;
 40570    56   299    13    56   968     1     111  sb.position
 40571    56   299    24    56   968     1      59  (
 40572    56   299    25    56   968     1     111  spos
 40573    56   299    30    56   968     1      74  +
 40574    56   299    32    56   968     1     111  srem
 40575    56   299    36    56   968     1      60  )
 40576    56   299    37    56   968     1     102  ;
 40577    56   300    13    56   968     1     111  position
 40578    56   300    21    56   968     1      59  (
 40579    56   300    22    56   968     1     111  pos
 40580    56   300    26    56   968     1      74  +
 40581    56   300    28    56   968     1     111  srem
 40582    56   300    32    56   968     1      60  )
 40583    56   300    33    56   968     1     102  ;
 40584    56   301     9    56   968     0      64  }
 40585    56   301    11    56   968     0      48  else
 40586    56   301    16    56   968     0      31  if
 40587    56   301    19    56   968     0      59  (
 40588    56   301    20    56   968     0     111  src.hb
 40589    56   301    27    56   968     0      71  !=
 40590    56   301    30    56   968     0      21  null
 40591    56   301    34    56   968     0      60  )
 40592    56   301    36    56   968     0      63  {
 40593    56   303    13    56   968     1      36  int
 40594    56   303    17    56   968     1     111  spos
 40595    56   303    22    56   968     1      67  =
 40596    56   303    24    56   968     1     111  src.position
 40597    56   303    36    56   968     1      59  (
 40598    56   303    37    56   968     1      60  )
 40599    56   303    38    56   968     1     102  ;
 40600    56   304    13    56   968     1      36  int
 40601    56   304    17    56   968     1     111  slim
 40602    56   304    22    56   968     1      67  =
 40603    56   304    24    56   968     1     111  src.limit
 40604    56   304    33    56   968     1      59  (
 40605    56   304    34    56   968     1      60  )
 40606    56   304    35    56   968     1     102  ;
 40607    56   305    13    56   968     0     111  assert
 40608    56   305    20    56   968     0      59  (
 40609    56   305    21    56   968     0     111  spos
 40610    56   305    26    56   968     0      92  <=
 40611    56   305    29    56   968     0     111  slim
 40612    56   305    33    56   968     0      60  )
 40613    56   305    34    56   968     0     102  ;
 40614    56   306    13    56   968     0      36  int
 40615    56   306    17    56   968     0     111  srem
 40616    56   306    22    56   968     0      67  =
 40617    56   306    24    56   968     0      59  (
 40618    56   306    25    56   968     0     111  spos
 40619    56   306    30    56   968     0      92  <=
 40620    56   306    33    56   968     0     111  slim
 40621    56   306    38    56   968     0      58  ?
 40622    56   306    40    56   968     0     111  slim
 40623    56   306    45    56   968     0      77  -
 40624    56   306    47    56   968     0     111  spos
 40625    56   306    52    56   968     0      65  :
 40626    56   306    54    56   968     0     112  0
 40627    56   306    55    56   968     0      60  )
 40628    56   306    56    56   968     0     102  ;
 40629    56   308    13    56   968     0     111  put
 40630    56   308    16    56   968     0      59  (
 40631    56   308    17    56   968     0     111  src.hb
 40632    56   308    23    56   968     0      66  ,
 40633    56   308    25    56   968     0     111  src.offset
 40634    56   308    36    56   968     0      74  +
 40635    56   308    38    56   968     0     111  spos
 40636    56   308    42    56   968     0      66  ,
 40637    56   308    44    56   968     0     111  srem
 40638    56   308    48    56   968     0      60  )
 40639    56   308    49    56   968     0     102  ;
 40640    56   309    13    56   968     0     111  src.position
 40641    56   309    25    56   968     0      59  (
 40642    56   309    26    56   968     0     111  spos
 40643    56   309    31    56   968     0      74  +
 40644    56   309    33    56   968     0     111  srem
 40645    56   309    37    56   968     0      60  )
 40646    56   309    38    56   968     0     102  ;
 40647    56   311     9    56   968     0      64  }
 40648    56   311    11    56   968     0      48  else
 40649    56   311    16    56   968     0      63  {
 40650    56   312    13    56   968     0     111  super.put
 40651    56   312    22    56   968     0      59  (
 40652    56   312    23    56   968     0     111  src
 40653    56   312    26    56   968     0      60  )
 40654    56   312    27    56   968     0     102  ;
 40655    56   313     9    56   968     0      64  }
 40656    56   314     9    56   968     0      19  return
 40657    56   314    16    56   968     0      44  this
 40658    56   314    20    56   968     0     102  ;
 40659    56   318     5    56   968     0      64  }
 40660    56   318     5    56   968     0    2284  ENDMETHOD
 40661    56   318     5    56   969     0    2285  STARTMETHOD
 40662    56   320    12    56   969     0     111  ShortBuffer
 40663    56   320    24    56   969     0     111  put
 40664    56   320    27    56   969     0      59  (
 40665    56   320    33    56   969     0      61  [
 40666    56   320    34    56   969     0      62  ]
 40667    56   320    36    56   969     0     111  src
 40668    56   320    39    56   969     0      66  ,
 40669    56   320    41    56   969     0      36  int
 40670    56   320    45    56   969     0     111  offset
 40671    56   320    51    56   969     0      66  ,
 40672    56   320    53    56   969     0      36  int
 40673    56   320    57    56   969     0     111  length
 40674    56   320    63    56   969     0      60  )
 40675    56   320    65    56   969     0      63  {
 40676    56   322     9    56   969     0      31  if
 40677    56   322    12    56   969     0      59  (
 40678    56   322    13    56   969     0      59  (
 40679    56   322    14    56   969     0     111  length
 40680    56   322    21    56   969     0      90  <<
 40681    56   322    24    56   969     0     112  1
 40682    56   322    25    56   969     0      60  )
 40683    56   322    27    56   969     0      89  >
 40684    56   322    29    56   969     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 40685    56   322    63    56   969     0      60  )
 40686    56   322    65    56   969     0      63  {
 40687    56   323    13    56   969     0     111  checkBounds
 40688    56   323    24    56   969     0      59  (
 40689    56   323    25    56   969     0     111  offset
 40690    56   323    31    56   969     0      66  ,
 40691    56   323    33    56   969     0     111  length
 40692    56   323    39    56   969     0      66  ,
 40693    56   323    41    56   969     0     111  src.length
 40694    56   323    51    56   969     0      60  )
 40695    56   323    52    56   969     0     102  ;
 40696    56   324    13    56   969     1      36  int
 40697    56   324    17    56   969     1     111  pos
 40698    56   324    21    56   969     1      67  =
 40699    56   324    23    56   969     1     111  position
 40700    56   324    31    56   969     1      59  (
 40701    56   324    32    56   969     1      60  )
 40702    56   324    33    56   969     1     102  ;
 40703    56   325    13    56   969     1      36  int
 40704    56   325    17    56   969     1     111  lim
 40705    56   325    21    56   969     1      67  =
 40706    56   325    23    56   969     1     111  limit
 40707    56   325    28    56   969     1      59  (
 40708    56   325    29    56   969     1      60  )
 40709    56   325    30    56   969     1     102  ;
 40710    56   326    13    56   969     0     111  assert
 40711    56   326    20    56   969     0      59  (
 40712    56   326    21    56   969     0     111  pos
 40713    56   326    25    56   969     0      92  <=
 40714    56   326    28    56   969     0     111  lim
 40715    56   326    31    56   969     0      60  )
 40716    56   326    32    56   969     0     102  ;
 40717    56   327    13    56   969     0      36  int
 40718    56   327    17    56   969     0     111  rem
 40719    56   327    21    56   969     0      67  =
 40720    56   327    23    56   969     0      59  (
 40721    56   327    24    56   969     0     111  pos
 40722    56   327    28    56   969     0      92  <=
 40723    56   327    31    56   969     0     111  lim
 40724    56   327    35    56   969     0      58  ?
 40725    56   327    37    56   969     0     111  lim
 40726    56   327    41    56   969     0      77  -
 40727    56   327    43    56   969     0     111  pos
 40728    56   327    47    56   969     0      65  :
 40729    56   327    49    56   969     0     112  0
 40730    56   327    50    56   969     0      60  )
 40731    56   327    51    56   969     0     102  ;
 40732    56   328    13    56   969     0      31  if
 40733    56   328    16    56   969     0      59  (
 40734    56   328    17    56   969     0     111  length
 40735    56   328    24    56   969     0      89  >
 40736    56   328    26    56   969     0     111  rem
 40737    56   328    29    56   969     0      60  )
 40738    56   329    17    56   969     0      20  throw
 40739    56   329    27    56   969     0     111  BufferOverflowException
 40740    56   329    50    56   969     0      59  (
 40741    56   329    51    56   969     0      60  )
 40742    56   329    52    56   969     0     102  ;
 40743    56   331    13    56   969     0      31  if
 40744    56   331    16    56   969     0      59  (
 40745    56   331    17    56   969     0     111  order
 40746    56   331    22    56   969     0      59  (
 40747    56   331    23    56   969     0      60  )
 40748    56   331    25    56   969     0      71  !=
 40749    56   331    28    56   969     0     111  ByteOrder.nativeOrder
 40750    56   331    49    56   969     0      59  (
 40751    56   331    50    56   969     0      60  )
 40752    56   331    51    56   969     0      60  )
 40753    56   332    17    56   969     0     111  Bits.copyFromShortArray
 40754    56   332    40    56   969     0      59  (
 40755    56   332    41    56   969     0     111  src
 40756    56   332    44    56   969     0      66  ,
 40757    56   332    46    56   969     0     111  offset
 40758    56   332    53    56   969     0      90  <<
 40759    56   332    56    56   969     0     112  1
 40760    56   332    57    56   969     0      66  ,
 40761    56   333    45    56   969     0     111  ix
 40762    56   333    47    56   969     0      59  (
 40763    56   333    48    56   969     0     111  pos
 40764    56   333    51    56   969     0      60  )
 40765    56   333    52    56   969     0      66  ,
 40766    56   333    54    56   969     0     111  length
 40767    56   333    61    56   969     0      90  <<
 40768    56   333    64    56   969     0     112  1
 40769    56   333    65    56   969     0      60  )
 40770    56   333    66    56   969     0     102  ;
 40771    56   334    13    56   969     0      48  else
 40772    56   335    17    56   969     0     111  Bits.copyFromByteArray
 40773    56   335    39    56   969     0      59  (
 40774    56   335    40    56   969     0     111  src
 40775    56   335    43    56   969     0      66  ,
 40776    56   335    45    56   969     0     111  offset
 40777    56   335    52    56   969     0      90  <<
 40778    56   335    55    56   969     0     112  1
 40779    56   335    56    56   969     0      66  ,
 40780    56   336    40    56   969     0     111  ix
 40781    56   336    42    56   969     0      59  (
 40782    56   336    43    56   969     0     111  pos
 40783    56   336    46    56   969     0      60  )
 40784    56   336    47    56   969     0      66  ,
 40785    56   336    49    56   969     0     111  length
 40786    56   336    56    56   969     0      90  <<
 40787    56   336    59    56   969     0     112  1
 40788    56   336    60    56   969     0      60  )
 40789    56   336    61    56   969     0     102  ;
 40790    56   337    13    56   969     0     111  position
 40791    56   337    21    56   969     0      59  (
 40792    56   337    22    56   969     0     111  pos
 40793    56   337    26    56   969     0      74  +
 40794    56   337    28    56   969     0     111  length
 40795    56   337    34    56   969     0      60  )
 40796    56   337    35    56   969     0     102  ;
 40797    56   338     9    56   969     0      64  }
 40798    56   338    11    56   969     0      48  else
 40799    56   338    16    56   969     0      63  {
 40800    56   339    13    56   969     0     111  super.put
 40801    56   339    22    56   969     0      59  (
 40802    56   339    23    56   969     0     111  src
 40803    56   339    26    56   969     0      66  ,
 40804    56   339    28    56   969     0     111  offset
 40805    56   339    34    56   969     0      66  ,
 40806    56   339    36    56   969     0     111  length
 40807    56   339    42    56   969     0      60  )
 40808    56   339    43    56   969     0     102  ;
 40809    56   340     9    56   969     0      64  }
 40810    56   341     9    56   969     0      19  return
 40811    56   341    16    56   969     0      44  this
 40812    56   341    20    56   969     0     102  ;
 40813    56   345     5    56   969     0      64  }
 40814    56   345     5    56   969     0    2286  ENDMETHOD
 40815    56   345     5    56   970     0    2287  STARTMETHOD
 40816    56   347    12    56   970     0     111  ShortBuffer
 40817    56   347    24    56   970     0     111  compact
 40818    56   347    31    56   970     0      59  (
 40819    56   347    32    56   970     0      60  )
 40820    56   347    34    56   970     0      63  {
 40821    56   349     9    56   970     1      36  int
 40822    56   349    13    56   970     1     111  pos
 40823    56   349    17    56   970     1      67  =
 40824    56   349    19    56   970     1     111  position
 40825    56   349    27    56   970     1      59  (
 40826    56   349    28    56   970     1      60  )
 40827    56   349    29    56   970     1     102  ;
 40828    56   350     9    56   970     1      36  int
 40829    56   350    13    56   970     1     111  lim
 40830    56   350    17    56   970     1      67  =
 40831    56   350    19    56   970     1     111  limit
 40832    56   350    24    56   970     1      59  (
 40833    56   350    25    56   970     1      60  )
 40834    56   350    26    56   970     1     102  ;
 40835    56   351     9    56   970     0     111  assert
 40836    56   351    16    56   970     0      59  (
 40837    56   351    17    56   970     0     111  pos
 40838    56   351    21    56   970     0      92  <=
 40839    56   351    24    56   970     0     111  lim
 40840    56   351    27    56   970     0      60  )
 40841    56   351    28    56   970     0     102  ;
 40842    56   352     9    56   970     0      36  int
 40843    56   352    13    56   970     0     111  rem
 40844    56   352    17    56   970     0      67  =
 40845    56   352    19    56   970     0      59  (
 40846    56   352    20    56   970     0     111  pos
 40847    56   352    24    56   970     0      92  <=
 40848    56   352    27    56   970     0     111  lim
 40849    56   352    31    56   970     0      58  ?
 40850    56   352    33    56   970     0     111  lim
 40851    56   352    37    56   970     0      77  -
 40852    56   352    39    56   970     0     111  pos
 40853    56   352    43    56   970     0      65  :
 40854    56   352    45    56   970     0     112  0
 40855    56   352    46    56   970     0      60  )
 40856    56   352    47    56   970     0     102  ;
 40857    56   354     9    56   970     0     111  unsafe.copyMemory
 40858    56   354    26    56   970     0      59  (
 40859    56   354    27    56   970     0     111  ix
 40860    56   354    29    56   970     0      59  (
 40861    56   354    30    56   970     0     111  pos
 40862    56   354    33    56   970     0      60  )
 40863    56   354    34    56   970     0      66  ,
 40864    56   354    36    56   970     0     111  ix
 40865    56   354    38    56   970     0      59  (
 40866    56   354    39    56   970     0     112  0
 40867    56   354    40    56   970     0      60  )
 40868    56   354    41    56   970     0      66  ,
 40869    56   354    43    56   970     0     111  rem
 40870    56   354    47    56   970     0      90  <<
 40871    56   354    50    56   970     0     112  1
 40872    56   354    51    56   970     0      60  )
 40873    56   354    52    56   970     0     102  ;
 40874    56   355     9    56   970     0     111  position
 40875    56   355    17    56   970     0      59  (
 40876    56   355    18    56   970     0     111  rem
 40877    56   355    21    56   970     0      60  )
 40878    56   355    22    56   970     0     102  ;
 40879    56   356     9    56   970     0     111  limit
 40880    56   356    14    56   970     0      59  (
 40881    56   356    15    56   970     0     111  capacity
 40882    56   356    23    56   970     0      59  (
 40883    56   356    24    56   970     0      60  )
 40884    56   356    25    56   970     0      60  )
 40885    56   356    26    56   970     0     102  ;
 40886    56   357     9    56   970     0     111  clearMark
 40887    56   357    18    56   970     0      59  (
 40888    56   357    19    56   970     0      60  )
 40889    56   357    20    56   970     0     102  ;
 40890    56   358     9    56   970     0      19  return
 40891    56   358    16    56   970     0      44  this
 40892    56   358    20    56   970     1     102  ;
 40893    56   362     5    56   970     1      64  }
 40894    56   362     5    56   970     0    2288  ENDMETHOD
 40895    56   362     5    56   971     0    2289  STARTMETHOD
 40896    56   364    12    56   971     0      39  boolean
 40897    56   364    20    56   971     0     111  isDirect
 40898    56   364    28    56   971     0      59  (
 40899    56   364    29    56   971     0      60  )
 40900    56   364    31    56   971     0      63  {
 40901    56   365     9    56   971     0      19  return
 40902    56   365    16    56   971     0      52  true
 40903    56   365    20    56   971     1     102  ;
 40904    56   366     5    56   971     1      64  }
 40905    56   366     5    56   971     0    2290  ENDMETHOD
 40906    56   366     5    56   972     0    2291  STARTMETHOD
 40907    56   368    12    56   972     0      39  boolean
 40908    56   368    20    56   972     0     111  isReadOnly
 40909    56   368    30    56   972     0      59  (
 40910    56   368    31    56   972     0      60  )
 40911    56   368    33    56   972     0      63  {
 40912    56   369     9    56   972     0      19  return
 40913    56   369    16    56   972     0      43  false
 40914    56   369    21    56   972     1     102  ;
 40915    56   370     5    56   972     1      64  }
 40916    56   370     5    56   972     0    2292  ENDMETHOD
 40917    56   370     5    56   973     0    2293  STARTMETHOD
 40918    56   416    12    56   973     0     111  ByteOrder
 40919    56   416    22    56   973     0     111  order
 40920    56   416    27    56   973     0      59  (
 40921    56   416    28    56   973     0      60  )
 40922    56   416    30    56   973     0      63  {
 40923    56   422     9    56   973     0      19  return
 40924    56   422    16    56   973     0      59  (
 40925    56   422    17    56   973     0      59  (
 40926    56   422    18    56   973     0     111  ByteOrder.nativeOrder
 40927    56   422    39    56   973     0      59  (
 40928    56   422    40    56   973     0      60  )
 40929    56   422    42    56   973     0      71  !=
 40930    56   422    45    56   973     0     111  ByteOrder.BIG_ENDIAN
 40931    56   422    65    56   973     0      60  )
 40932    56   423    17    56   973     0      58  ?
 40933    56   423    19    56   973     0     111  ByteOrder.LITTLE_ENDIAN
 40934    56   423    43    56   973     0      65  :
 40935    56   423    45    56   973     0     111  ByteOrder.BIG_ENDIAN
 40936    56   423    65    56   973     0      60  )
 40937    56   423    66    56   973     0     102  ;
 40938    56   425     5    56   973     0      64  }
 40939    56   425     5    56   973     0    2294  ENDMETHOD
 40940    56   452     1    56    -1     0      64  }
 40941    56   452     1    56    -1     1    2295  ENDCLASS
 40942    56   452     1    -1    -1     1    2296  ENDFILE C:\Users\RA\javasrc\java\nio\DirectShortBufferU.java
 40943    57     1     1    -1    -1     1    2297  STARTFILE C:\Users\RA\javasrc\java\nio\DoubleBuffer.java
 40944    57    28     9    -1    -1     0     111  java.nio
 40945    57    28    17    -1    -1     0     102  ;
 40946    57   257    17    57    -1     0    2298  STARTCLASS
 40947    57   257    17    57    -1     0      24  class
 40948    57   257    23    57    -1     0     111  DoubleBuffer
 40949    57   258     5    57    -1     0      38  extends
 40950    57   258    13    57    -1     0     111  Buffer
 40951    57   259     5    57    -1     0      17  implements
 40952    57   259    16    57    -1     0     111  Comparable
 40953    57   259    26    57    -1     0      93  <
 40954    57   259    27    57    -1     0     111  DoubleBuffer
 40955    57   259    39    57    -1     0      89  >
 40956    57   260     1    57    -1     0      63  {
 40957    57   266    11    57    -1     0      32  double
 40958    57   266    17    57    -1     0      61  [
 40959    57   266    18    57    -1     0      62  ]
 40960    57   266    20    57    -1     0     111  hb
 40961    57   266    22    57    -1     0     102  ;
 40962    57   267    11    57    -1     0      36  int
 40963    57   267    15    57    -1     0     111  offset
 40964    57   267    21    57    -1     0     102  ;
 40965    57   268     5    57    -1     0      39  boolean
 40966    57   268    13    57    -1     0     111  isReadOnly
 40967    57   268    23    57    -1     0     102  ;
 40968    57   268    23    57   974     0    2299  STARTMETHOD
 40969    57   273     5    57   974     0     111  DoubleBuffer
 40970    57   273    17    57   974     0      59  (
 40971    57   273    18    57   974     0      36  int
 40972    57   273    22    57   974     0     111  mark
 40973    57   273    26    57   974     0      66  ,
 40974    57   273    28    57   974     0      36  int
 40975    57   273    32    57   974     0     111  pos
 40976    57   273    35    57   974     0      66  ,
 40977    57   273    37    57   974     0      36  int
 40978    57   273    41    57   974     0     111  lim
 40979    57   273    44    57   974     0      66  ,
 40980    57   273    46    57   974     0      36  int
 40981    57   273    50    57   974     0     111  cap
 40982    57   273    53    57   974     0      66  ,
 40983    57   274    18    57   974     0      32  double
 40984    57   274    24    57   974     0      61  [
 40985    57   274    25    57   974     0      62  ]
 40986    57   274    27    57   974     0     111  hb
 40987    57   274    29    57   974     0      66  ,
 40988    57   274    31    57   974     0      36  int
 40989    57   274    35    57   974     0     111  offset
 40990    57   274    41    57   974     0      60  )
 40991    57   275     5    57   974     0      63  {
 40992    57   276     9    57   974     0      27  super
 40993    57   276    14    57   974     0      59  (
 40994    57   276    15    57   974     0     111  mark
 40995    57   276    19    57   974     0      66  ,
 40996    57   276    21    57   974     0     111  pos
 40997    57   276    24    57   974     0      66  ,
 40998    57   276    26    57   974     0     111  lim
 40999    57   276    29    57   974     0      66  ,
 41000    57   276    31    57   974     0     111  cap
 41001    57   276    34    57   974     0      60  )
 41002    57   276    35    57   974     0     102  ;
 41003    57   277     9    57   974     1     111  this.hb
 41004    57   277    17    57   974     1      67  =
 41005    57   277    19    57   974     1     111  hb
 41006    57   277    21    57   974     1     102  ;
 41007    57   278     9    57   974     1     111  this.offset
 41008    57   278    21    57   974     1      67  =
 41009    57   278    23    57   974     1     111  offset
 41010    57   278    29    57   974     1     102  ;
 41011    57   279     5    57   974     0      64  }
 41012    57   279     5    57   974     0    2300  ENDMETHOD
 41013    57   279     5    57   975     0    2301  STARTMETHOD
 41014    57   283     5    57   975     0     111  DoubleBuffer
 41015    57   283    17    57   975     0      59  (
 41016    57   283    18    57   975     0      36  int
 41017    57   283    22    57   975     0     111  mark
 41018    57   283    26    57   975     0      66  ,
 41019    57   283    28    57   975     0      36  int
 41020    57   283    32    57   975     0     111  pos
 41021    57   283    35    57   975     0      66  ,
 41022    57   283    37    57   975     0      36  int
 41023    57   283    41    57   975     0     111  lim
 41024    57   283    44    57   975     0      66  ,
 41025    57   283    46    57   975     0      36  int
 41026    57   283    50    57   975     0     111  cap
 41027    57   283    53    57   975     0      60  )
 41028    57   283    55    57   975     0      63  {
 41029    57   284     9    57   975     0      44  this
 41030    57   284    13    57   975     0      59  (
 41031    57   284    14    57   975     0     111  mark
 41032    57   284    18    57   975     0      66  ,
 41033    57   284    20    57   975     0     111  pos
 41034    57   284    23    57   975     0      66  ,
 41035    57   284    25    57   975     0     111  lim
 41036    57   284    28    57   975     0      66  ,
 41037    57   284    30    57   975     0     111  cap
 41038    57   284    33    57   975     0      66  ,
 41039    57   284    35    57   975     0      21  null
 41040    57   284    39    57   975     0      66  ,
 41041    57   284    41    57   975     0     112  0
 41042    57   284    42    57   975     0      60  )
 41043    57   284    43    57   975     0     102  ;
 41044    57   285     5    57   975     0      64  }
 41045    57   285     5    57   975     0    2302  ENDMETHOD
 41046    57   285     5    57   976     0    2303  STARTMETHOD
 41047    57   326    12    57   976     0      45  static
 41048    57   326    19    57   976     0     111  DoubleBuffer
 41049    57   326    32    57   976     0     111  allocate
 41050    57   326    40    57   976     0      59  (
 41051    57   326    41    57   976     0      36  int
 41052    57   326    45    57   976     0     111  capacity
 41053    57   326    53    57   976     0      60  )
 41054    57   326    55    57   976     0      63  {
 41055    57   327     9    57   976     0      31  if
 41056    57   327    12    57   976     0      59  (
 41057    57   327    13    57   976     0     111  capacity
 41058    57   327    22    57   976     0      93  <
 41059    57   327    24    57   976     0     112  0
 41060    57   327    25    57   976     0      60  )
 41061    57   328    13    57   976     0      20  throw
 41062    57   328    23    57   976     0     111  IllegalArgumentException
 41063    57   328    47    57   976     0      59  (
 41064    57   328    48    57   976     0      60  )
 41065    57   328    49    57   976     0     102  ;
 41066    57   329     9    57   976     0      19  return
 41067    57   329    20    57   976     0     111  HeapDoubleBuffer
 41068    57   329    36    57   976     0      59  (
 41069    57   329    37    57   976     0     111  capacity
 41070    57   329    45    57   976     0      66  ,
 41071    57   329    47    57   976     0     111  capacity
 41072    57   329    55    57   976     0      60  )
 41073    57   329    56    57   976     0     102  ;
 41074    57   330     5    57   976     0      64  }
 41075    57   330     5    57   976     0    2304  ENDMETHOD
 41076    57   330     5    57   977     0    2305  STARTMETHOD
 41077    57   363    12    57   977     0      45  static
 41078    57   363    19    57   977     0     111  DoubleBuffer
 41079    57   363    32    57   977     0     111  wrap
 41080    57   363    36    57   977     0      59  (
 41081    57   363    37    57   977     0      32  double
 41082    57   363    43    57   977     0      61  [
 41083    57   363    44    57   977     0      62  ]
 41084    57   363    46    57   977     0     111  array
 41085    57   363    51    57   977     0      66  ,
 41086    57   364    37    57   977     0      36  int
 41087    57   364    41    57   977     0     111  offset
 41088    57   364    47    57   977     0      66  ,
 41089    57   364    49    57   977     0      36  int
 41090    57   364    53    57   977     0     111  length
 41091    57   364    59    57   977     0      60  )
 41092    57   365     5    57   977     0      63  {
 41093    57   366     9    57   977     0      35  try
 41094    57   366    13    57   977     0      63  {
 41095    57   367    13    57   977     0      19  return
 41096    57   367    24    57   977     0     111  HeapDoubleBuffer
 41097    57   367    40    57   977     0      59  (
 41098    57   367    41    57   977     0     111  array
 41099    57   367    46    57   977     0      66  ,
 41100    57   367    48    57   977     0     111  offset
 41101    57   367    54    57   977     0      66  ,
 41102    57   367    56    57   977     0     111  length
 41103    57   367    62    57   977     0      60  )
 41104    57   367    63    57   977     0     102  ;
 41105    57   368     9    57   977     0      64  }
 41106    57   368    11    57   977     0      34  catch
 41107    57   368    17    57   977     0      59  (
 41108    57   368    18    57   977     0     111  IllegalArgumentException
 41109    57   368    43    57   977     0     111  x
 41110    57   368    44    57   977     0      60  )
 41111    57   368    46    57   977     0      63  {
 41112    57   369    13    57   977     0      20  throw
 41113    57   369    23    57   977     0     111  IndexOutOfBoundsException
 41114    57   369    48    57   977     0      59  (
 41115    57   369    49    57   977     0      60  )
 41116    57   369    50    57   977     0     102  ;
 41117    57   370     9    57   977     0      64  }
 41118    57   371     5    57   977     0      64  }
 41119    57   371     5    57   977     0    2306  ENDMETHOD
 41120    57   371     5    57   978     0    2307  STARTMETHOD
 41121    57   389    12    57   978     0      45  static
 41122    57   389    19    57   978     0     111  DoubleBuffer
 41123    57   389    32    57   978     0     111  wrap
 41124    57   389    36    57   978     0      59  (
 41125    57   389    37    57   978     0      32  double
 41126    57   389    43    57   978     0      61  [
 41127    57   389    44    57   978     0      62  ]
 41128    57   389    46    57   978     0     111  array
 41129    57   389    51    57   978     0      60  )
 41130    57   389    53    57   978     0      63  {
 41131    57   390     9    57   978     0      19  return
 41132    57   390    16    57   978     0     111  wrap
 41133    57   390    20    57   978     0      59  (
 41134    57   390    21    57   978     0     111  array
 41135    57   390    26    57   978     0      66  ,
 41136    57   390    28    57   978     0     112  0
 41137    57   390    29    57   978     0      66  ,
 41138    57   390    31    57   978     0     111  array.length
 41139    57   390    43    57   978     0      60  )
 41140    57   390    44    57   978     0     102  ;
 41141    57   391     5    57   978     0      64  }
 41142    57   391     5    57   978     0    2308  ENDMETHOD
 41143    57   503    21    57    -1     1     111  DoubleBuffer
 41144    57   503    34    57    -1     1     111  slice
 41145    57   503    39    57    -1     1      59  (
 41146    57   503    40    57    -1     1      60  )
 41147    57   503    41    57    -1     1     102  ;
 41148    57   520    21    57    -1     1     111  DoubleBuffer
 41149    57   520    34    57    -1     1     111  duplicate
 41150    57   520    43    57    -1     1      59  (
 41151    57   520    44    57    -1     1      60  )
 41152    57   520    45    57    -1     1     102  ;
 41153    57   540    21    57    -1     1     111  DoubleBuffer
 41154    57   540    34    57    -1     1     111  asReadOnlyBuffer
 41155    57   540    50    57    -1     1      59  (
 41156    57   540    51    57    -1     1      60  )
 41157    57   540    52    57    -1     1     102  ;
 41158    57   554    21    57    -1     0      32  double
 41159    57   554    28    57    -1     0     111  get
 41160    57   554    31    57    -1     0      59  (
 41161    57   554    32    57    -1     0      60  )
 41162    57   554    33    57    -1     0     102  ;
 41163    57   573    21    57    -1     0     111  DoubleBuffer
 41164    57   573    34    57    -1     0     111  put
 41165    57   573    37    57    -1     0      59  (
 41166    57   573    38    57    -1     0      32  double
 41167    57   573    45    57    -1     0     111  d
 41168    57   573    46    57    -1     0      60  )
 41169    57   573    47    57    -1     0     102  ;
 41170    57   588    21    57    -1     0      32  double
 41171    57   588    28    57    -1     0     111  get
 41172    57   588    31    57    -1     0      59  (
 41173    57   588    32    57    -1     0      36  int
 41174    57   588    36    57    -1     0     111  index
 41175    57   588    41    57    -1     0      60  )
 41176    57   588    42    57    -1     0     102  ;
 41177    57   611    21    57    -1     0     111  DoubleBuffer
 41178    57   611    34    57    -1     0     111  put
 41179    57   611    37    57    -1     0      59  (
 41180    57   611    38    57    -1     0      36  int
 41181    57   611    42    57    -1     0     111  index
 41182    57   611    47    57    -1     0      66  ,
 41183    57   611    49    57    -1     0      32  double
 41184    57   611    56    57    -1     0     111  d
 41185    57   611    57    57    -1     0      60  )
 41186    57   611    58    57    -1     0     102  ;
 41187    57   611    58    57   979     0    2309  STARTMETHOD
 41188    57   665    12    57   979     0     111  DoubleBuffer
 41189    57   665    25    57   979     0     111  get
 41190    57   665    28    57   979     0      59  (
 41191    57   665    29    57   979     0      32  double
 41192    57   665    35    57   979     0      61  [
 41193    57   665    36    57   979     0      62  ]
 41194    57   665    38    57   979     0     111  dst
 41195    57   665    41    57   979     0      66  ,
 41196    57   665    43    57   979     0      36  int
 41197    57   665    47    57   979     0     111  offset
 41198    57   665    53    57   979     0      66  ,
 41199    57   665    55    57   979     0      36  int
 41200    57   665    59    57   979     0     111  length
 41201    57   665    65    57   979     0      60  )
 41202    57   665    67    57   979     0      63  {
 41203    57   666     9    57   979     0     111  checkBounds
 41204    57   666    20    57   979     0      59  (
 41205    57   666    21    57   979     0     111  offset
 41206    57   666    27    57   979     0      66  ,
 41207    57   666    29    57   979     0     111  length
 41208    57   666    35    57   979     0      66  ,
 41209    57   666    37    57   979     0     111  dst.length
 41210    57   666    47    57   979     0      60  )
 41211    57   666    48    57   979     0     102  ;
 41212    57   667     9    57   979     0      31  if
 41213    57   667    12    57   979     0      59  (
 41214    57   667    13    57   979     0     111  length
 41215    57   667    20    57   979     0      89  >
 41216    57   667    22    57   979     0     111  remaining
 41217    57   667    31    57   979     0      59  (
 41218    57   667    32    57   979     0      60  )
 41219    57   667    33    57   979     0      60  )
 41220    57   668    13    57   979     0      20  throw
 41221    57   668    23    57   979     0     111  BufferUnderflowException
 41222    57   668    47    57   979     0      59  (
 41223    57   668    48    57   979     0      60  )
 41224    57   668    49    57   979     0     102  ;
 41225    57   669     9    57   979     0      36  int
 41226    57   669    13    57   979     0     111  end
 41227    57   669    17    57   979     0      67  =
 41228    57   669    19    57   979     0     111  offset
 41229    57   669    26    57   979     0      74  +
 41230    57   669    28    57   979     0     111  length
 41231    57   669    34    57   979     0     102  ;
 41232    57   670     9    57   979     0      37  for
 41233    57   670    13    57   979     0      59  (
 41234    57   670    14    57   979     0      36  int
 41235    57   670    18    57   979     0     111  i
 41236    57   670    20    57   979     0      67  =
 41237    57   670    22    57   979     0     111  offset
 41238    57   670    28    57   979     0     102  ;
 41239    57   670    30    57   979     0     111  i
 41240    57   670    32    57   979     0      93  <
 41241    57   670    34    57   979     0     111  end
 41242    57   670    37    57   979     0     102  ;
 41243    57   670    39    57   979     0     111  i
 41244    57   670    40    57   979     0      76  ++
 41245    57   670    42    57   979     0      60  )
 41246    57   671    13    57   979     0     111  dst
 41247    57   671    16    57   979     0      61  [
 41248    57   671    17    57   979     0     111  i
 41249    57   671    18    57   979     0      62  ]
 41250    57   671    20    57   979     0      67  =
 41251    57   671    22    57   979     0     111  get
 41252    57   671    25    57   979     0      59  (
 41253    57   671    26    57   979     0      60  )
 41254    57   671    27    57   979     0     102  ;
 41255    57   672     9    57   979     0      19  return
 41256    57   672    16    57   979     0      44  this
 41257    57   672    20    57   979     0     102  ;
 41258    57   673     5    57   979     0      64  }
 41259    57   673     5    57   979     0    2310  ENDMETHOD
 41260    57   673     5    57   980     0    2311  STARTMETHOD
 41261    57   691    12    57   980     0     111  DoubleBuffer
 41262    57   691    25    57   980     0     111  get
 41263    57   691    28    57   980     0      59  (
 41264    57   691    29    57   980     0      32  double
 41265    57   691    35    57   980     0      61  [
 41266    57   691    36    57   980     0      62  ]
 41267    57   691    38    57   980     0     111  dst
 41268    57   691    41    57   980     0      60  )
 41269    57   691    43    57   980     0      63  {
 41270    57   692     9    57   980     0      19  return
 41271    57   692    16    57   980     0     111  get
 41272    57   692    19    57   980     0      59  (
 41273    57   692    20    57   980     0     111  dst
 41274    57   692    23    57   980     0      66  ,
 41275    57   692    25    57   980     0     112  0
 41276    57   692    26    57   980     0      66  ,
 41277    57   692    28    57   980     0     111  dst.length
 41278    57   692    38    57   980     0      60  )
 41279    57   692    39    57   980     0     102  ;
 41280    57   693     5    57   980     0      64  }
 41281    57   693     5    57   980     0    2312  ENDMETHOD
 41282    57   693     5    57   981     0    2313  STARTMETHOD
 41283    57   739    12    57   981     0     111  DoubleBuffer
 41284    57   739    25    57   981     0     111  put
 41285    57   739    28    57   981     0      59  (
 41286    57   739    29    57   981     0     111  DoubleBuffer
 41287    57   739    42    57   981     0     111  src
 41288    57   739    45    57   981     0      60  )
 41289    57   739    47    57   981     0      63  {
 41290    57   740     9    57   981     0      31  if
 41291    57   740    12    57   981     0      59  (
 41292    57   740    13    57   981     0     111  src
 41293    57   740    17    57   981     0      68  ==
 41294    57   740    20    57   981     0      44  this
 41295    57   740    24    57   981     0      60  )
 41296    57   741    13    57   981     0      20  throw
 41297    57   741    23    57   981     0     111  IllegalArgumentException
 41298    57   741    47    57   981     0      59  (
 41299    57   741    48    57   981     0      60  )
 41300    57   741    49    57   981     0     102  ;
 41301    57   742     9    57   981     0      36  int
 41302    57   742    13    57   981     0     111  n
 41303    57   742    15    57   981     0      67  =
 41304    57   742    17    57   981     0     111  src.remaining
 41305    57   742    30    57   981     0      59  (
 41306    57   742    31    57   981     0      60  )
 41307    57   742    32    57   981     0     102  ;
 41308    57   743     9    57   981     0      31  if
 41309    57   743    12    57   981     0      59  (
 41310    57   743    13    57   981     0     111  n
 41311    57   743    15    57   981     0      89  >
 41312    57   743    17    57   981     0     111  remaining
 41313    57   743    26    57   981     0      59  (
 41314    57   743    27    57   981     0      60  )
 41315    57   743    28    57   981     0      60  )
 41316    57   744    13    57   981     0      20  throw
 41317    57   744    23    57   981     0     111  BufferOverflowException
 41318    57   744    46    57   981     0      59  (
 41319    57   744    47    57   981     0      60  )
 41320    57   744    48    57   981     0     102  ;
 41321    57   745     9    57   981     0      37  for
 41322    57   745    13    57   981     0      59  (
 41323    57   745    14    57   981     0      36  int
 41324    57   745    18    57   981     0     111  i
 41325    57   745    20    57   981     0      67  =
 41326    57   745    22    57   981     0     112  0
 41327    57   745    23    57   981     0     102  ;
 41328    57   745    25    57   981     0     111  i
 41329    57   745    27    57   981     0      93  <
 41330    57   745    29    57   981     0     111  n
 41331    57   745    30    57   981     0     102  ;
 41332    57   745    32    57   981     0     111  i
 41333    57   745    33    57   981     0      76  ++
 41334    57   745    35    57   981     0      60  )
 41335    57   746    13    57   981     0     111  put
 41336    57   746    16    57   981     0      59  (
 41337    57   746    17    57   981     0     111  src.get
 41338    57   746    24    57   981     0      59  (
 41339    57   746    25    57   981     0      60  )
 41340    57   746    26    57   981     0      60  )
 41341    57   746    27    57   981     0     102  ;
 41342    57   747     9    57   981     0      19  return
 41343    57   747    16    57   981     0      44  this
 41344    57   747    20    57   981     0     102  ;
 41345    57   748     5    57   981     0      64  }
 41346    57   748     5    57   981     0    2314  ENDMETHOD
 41347    57   748     5    57   982     0    2315  STARTMETHOD
 41348    57   800    12    57   982     0     111  DoubleBuffer
 41349    57   800    25    57   982     0     111  put
 41350    57   800    28    57   982     0      59  (
 41351    57   800    29    57   982     0      32  double
 41352    57   800    35    57   982     0      61  [
 41353    57   800    36    57   982     0      62  ]
 41354    57   800    38    57   982     0     111  src
 41355    57   800    41    57   982     0      66  ,
 41356    57   800    43    57   982     0      36  int
 41357    57   800    47    57   982     0     111  offset
 41358    57   800    53    57   982     0      66  ,
 41359    57   800    55    57   982     0      36  int
 41360    57   800    59    57   982     0     111  length
 41361    57   800    65    57   982     0      60  )
 41362    57   800    67    57   982     0      63  {
 41363    57   801     9    57   982     0     111  checkBounds
 41364    57   801    20    57   982     0      59  (
 41365    57   801    21    57   982     0     111  offset
 41366    57   801    27    57   982     0      66  ,
 41367    57   801    29    57   982     0     111  length
 41368    57   801    35    57   982     0      66  ,
 41369    57   801    37    57   982     0     111  src.length
 41370    57   801    47    57   982     0      60  )
 41371    57   801    48    57   982     0     102  ;
 41372    57   802     9    57   982     0      31  if
 41373    57   802    12    57   982     0      59  (
 41374    57   802    13    57   982     0     111  length
 41375    57   802    20    57   982     0      89  >
 41376    57   802    22    57   982     0     111  remaining
 41377    57   802    31    57   982     0      59  (
 41378    57   802    32    57   982     0      60  )
 41379    57   802    33    57   982     0      60  )
 41380    57   803    13    57   982     0      20  throw
 41381    57   803    23    57   982     0     111  BufferOverflowException
 41382    57   803    46    57   982     0      59  (
 41383    57   803    47    57   982     0      60  )
 41384    57   803    48    57   982     0     102  ;
 41385    57   804     9    57   982     0      36  int
 41386    57   804    13    57   982     0     111  end
 41387    57   804    17    57   982     0      67  =
 41388    57   804    19    57   982     0     111  offset
 41389    57   804    26    57   982     0      74  +
 41390    57   804    28    57   982     0     111  length
 41391    57   804    34    57   982     0     102  ;
 41392    57   805     9    57   982     0      37  for
 41393    57   805    13    57   982     0      59  (
 41394    57   805    14    57   982     0      36  int
 41395    57   805    18    57   982     0     111  i
 41396    57   805    20    57   982     0      67  =
 41397    57   805    22    57   982     0     111  offset
 41398    57   805    28    57   982     0     102  ;
 41399    57   805    30    57   982     0     111  i
 41400    57   805    32    57   982     0      93  <
 41401    57   805    34    57   982     0     111  end
 41402    57   805    37    57   982     0     102  ;
 41403    57   805    39    57   982     0     111  i
 41404    57   805    40    57   982     0      76  ++
 41405    57   805    42    57   982     0      60  )
 41406    57   806    13    57   982     0     111  this.put
 41407    57   806    21    57   982     0      59  (
 41408    57   806    22    57   982     0     111  src
 41409    57   806    25    57   982     0      61  [
 41410    57   806    26    57   982     0     111  i
 41411    57   806    27    57   982     0      62  ]
 41412    57   806    28    57   982     0      60  )
 41413    57   806    29    57   982     0     102  ;
 41414    57   807     9    57   982     0      19  return
 41415    57   807    16    57   982     0      44  this
 41416    57   807    20    57   982     0     102  ;
 41417    57   808     5    57   982     0      64  }
 41418    57   808     5    57   982     0    2316  ENDMETHOD
 41419    57   808     5    57   983     0    2317  STARTMETHOD
 41420    57   829    18    57   983     0     111  DoubleBuffer
 41421    57   829    31    57   983     0     111  put
 41422    57   829    34    57   983     0      59  (
 41423    57   829    35    57   983     0      32  double
 41424    57   829    41    57   983     0      61  [
 41425    57   829    42    57   983     0      62  ]
 41426    57   829    44    57   983     0     111  src
 41427    57   829    47    57   983     0      60  )
 41428    57   829    49    57   983     0      63  {
 41429    57   830     9    57   983     0      19  return
 41430    57   830    16    57   983     0     111  put
 41431    57   830    19    57   983     0      59  (
 41432    57   830    20    57   983     0     111  src
 41433    57   830    23    57   983     0      66  ,
 41434    57   830    25    57   983     0     112  0
 41435    57   830    26    57   983     0      66  ,
 41436    57   830    28    57   983     0     111  src.length
 41437    57   830    38    57   983     0      60  )
 41438    57   830    39    57   983     0     102  ;
 41439    57   831     5    57   983     0      64  }
 41440    57   831     5    57   983     0    2318  ENDMETHOD
 41441    57   831     5    57   984     0    2319  STARTMETHOD
 41442    57   932    18    57   984     0      39  boolean
 41443    57   932    26    57   984     0     111  hasArray
 41444    57   932    34    57   984     0      59  (
 41445    57   932    35    57   984     0      60  )
 41446    57   932    37    57   984     0      63  {
 41447    57   933     9    57   984     0      19  return
 41448    57   933    16    57   984     0      59  (
 41449    57   933    17    57   984     0     111  hb
 41450    57   933    20    57   984     0      71  !=
 41451    57   933    23    57   984     0      21  null
 41452    57   933    27    57   984     0      60  )
 41453    57   933    29    57   984     0     101  &&
 41454    57   933    32    57   984     0      69  !
 41455    57   933    33    57   984     0     111  isReadOnly
 41456    57   933    43    57   984     0     102  ;
 41457    57   934     5    57   984     0      64  }
 41458    57   934     5    57   984     0    2320  ENDMETHOD
 41459    57   934     5    57   985     0    2321  STARTMETHOD
 41460    57   955    18    57   985     0      32  double
 41461    57   955    24    57   985     0      61  [
 41462    57   955    25    57   985     0      62  ]
 41463    57   955    27    57   985     0     111  array
 41464    57   955    32    57   985     0      59  (
 41465    57   955    33    57   985     0      60  )
 41466    57   955    35    57   985     0      63  {
 41467    57   956     9    57   985     0      31  if
 41468    57   956    12    57   985     0      59  (
 41469    57   956    13    57   985     0     111  hb
 41470    57   956    16    57   985     0      68  ==
 41471    57   956    19    57   985     0      21  null
 41472    57   956    23    57   985     0      60  )
 41473    57   957    13    57   985     0      20  throw
 41474    57   957    23    57   985     0     111  UnsupportedOperationException
 41475    57   957    52    57   985     0      59  (
 41476    57   957    53    57   985     0      60  )
 41477    57   957    54    57   985     0     102  ;
 41478    57   958     9    57   985     0      31  if
 41479    57   958    12    57   985     0      59  (
 41480    57   958    13    57   985     0     111  isReadOnly
 41481    57   958    23    57   985     0      60  )
 41482    57   959    13    57   985     0      20  throw
 41483    57   959    23    57   985     0     111  ReadOnlyBufferException
 41484    57   959    46    57   985     0      59  (
 41485    57   959    47    57   985     0      60  )
 41486    57   959    48    57   985     0     102  ;
 41487    57   960     9    57   985     0      19  return
 41488    57   960    16    57   985     0     111  hb
 41489    57   960    18    57   985     0     102  ;
 41490    57   961     5    57   985     0      64  }
 41491    57   961     5    57   985     0    2322  ENDMETHOD
 41492    57   961     5    57   986     0    2323  STARTMETHOD
 41493    57   983    18    57   986     0      36  int
 41494    57   983    22    57   986     0     111  arrayOffset
 41495    57   983    33    57   986     0      59  (
 41496    57   983    34    57   986     0      60  )
 41497    57   983    36    57   986     0      63  {
 41498    57   984     9    57   986     0      31  if
 41499    57   984    12    57   986     0      59  (
 41500    57   984    13    57   986     0     111  hb
 41501    57   984    16    57   986     0      68  ==
 41502    57   984    19    57   986     0      21  null
 41503    57   984    23    57   986     0      60  )
 41504    57   985    13    57   986     0      20  throw
 41505    57   985    23    57   986     0     111  UnsupportedOperationException
 41506    57   985    52    57   986     0      59  (
 41507    57   985    53    57   986     0      60  )
 41508    57   985    54    57   986     0     102  ;
 41509    57   986     9    57   986     0      31  if
 41510    57   986    12    57   986     0      59  (
 41511    57   986    13    57   986     0     111  isReadOnly
 41512    57   986    23    57   986     0      60  )
 41513    57   987    13    57   986     0      20  throw
 41514    57   987    23    57   986     0     111  ReadOnlyBufferException
 41515    57   987    46    57   986     0      59  (
 41516    57   987    47    57   986     0      60  )
 41517    57   987    48    57   986     0     102  ;
 41518    57   988     9    57   986     0      19  return
 41519    57   988    16    57   986     0     111  offset
 41520    57   988    22    57   986     0     102  ;
 41521    57   989     5    57   986     0      64  }
 41522    57   989     5    57   986     0    2324  ENDMETHOD
 41523    57  1030    21    57    -1     0     111  DoubleBuffer
 41524    57  1030    34    57    -1     0     111  compact
 41525    57  1030    41    57    -1     0      59  (
 41526    57  1030    42    57    -1     0      60  )
 41527    57  1030    43    57    -1     0     102  ;
 41528    57  1037    21    57    -1     0      39  boolean
 41529    57  1037    29    57    -1     0     111  isDirect
 41530    57  1037    37    57    -1     0      59  (
 41531    57  1037    38    57    -1     0      60  )
 41532    57  1037    39    57    -1     0     102  ;
 41533    57  1037    39    57   987     0    2325  STARTMETHOD
 41534    57  1046    12    57   987     0     111  String
 41535    57  1046    19    57   987     0     111  toString
 41536    57  1046    27    57   987     0      59  (
 41537    57  1046    28    57   987     0      60  )
 41538    57  1046    30    57   987     0      63  {
 41539    57  1047     9    57   987     0     111  StringBuffer
 41540    57  1047    22    57   987     0     111  sb
 41541    57  1047    25    57   987     0      67  =
 41542    57  1047    31    57   987     0     111  StringBuffer
 41543    57  1047    43    57   987     0      59  (
 41544    57  1047    44    57   987     0      60  )
 41545    57  1047    45    57   987     0     102  ;
 41546    57  1048     9    57   987     0     111  sb.append
 41547    57  1048    18    57   987     0      59  (
 41548    57  1048    19    57   987     0     111  getClass
 41549    57  1048    27    57   987     0      59  (
 41550    57  1048    28    57   987     0      60  )
 41551    57  1048    29    57   987     0      54  .
 41552    57  1048    30    57   987     0     111  getName
 41553    57  1048    37    57   987     0      59  (
 41554    57  1048    38    57   987     0      60  )
 41555    57  1048    39    57   987     0      60  )
 41556    57  1048    40    57   987     0     102  ;
 41557    57  1049     9    57   987     0     111  sb.append
 41558    57  1049    18    57   987     0      59  (
 41559    57  1049    19    57   987     0     107  "[pos="
 41560    57  1049    26    57   987     0      60  )
 41561    57  1049    27    57   987     0     102  ;
 41562    57  1050     9    57   987     0     111  sb.append
 41563    57  1050    18    57   987     0      59  (
 41564    57  1050    19    57   987     0     111  position
 41565    57  1050    27    57   987     0      59  (
 41566    57  1050    28    57   987     0      60  )
 41567    57  1050    29    57   987     0      60  )
 41568    57  1050    30    57   987     0     102  ;
 41569    57  1051     9    57   987     0     111  sb.append
 41570    57  1051    18    57   987     0      59  (
 41571    57  1051    19    57   987     0     107  " lim="
 41572    57  1051    26    57   987     0      60  )
 41573    57  1051    27    57   987     0     102  ;
 41574    57  1052     9    57   987     0     111  sb.append
 41575    57  1052    18    57   987     0      59  (
 41576    57  1052    19    57   987     0     111  limit
 41577    57  1052    24    57   987     0      59  (
 41578    57  1052    25    57   987     0      60  )
 41579    57  1052    26    57   987     0      60  )
 41580    57  1052    27    57   987     0     102  ;
 41581    57  1053     9    57   987     0     111  sb.append
 41582    57  1053    18    57   987     0      59  (
 41583    57  1053    19    57   987     0     107  " cap="
 41584    57  1053    26    57   987     0      60  )
 41585    57  1053    27    57   987     0     102  ;
 41586    57  1054     9    57   987     0     111  sb.append
 41587    57  1054    18    57   987     0      59  (
 41588    57  1054    19    57   987     0     111  capacity
 41589    57  1054    27    57   987     0      59  (
 41590    57  1054    28    57   987     0      60  )
 41591    57  1054    29    57   987     0      60  )
 41592    57  1054    30    57   987     0     102  ;
 41593    57  1055     9    57   987     0     111  sb.append
 41594    57  1055    18    57   987     0      59  (
 41595    57  1055    19    57   987     0     107  "]"
 41596    57  1055    22    57   987     0      60  )
 41597    57  1055    23    57   987     0     102  ;
 41598    57  1056     9    57   987     0      19  return
 41599    57  1056    16    57   987     0     111  sb.toString
 41600    57  1056    27    57   987     0      59  (
 41601    57  1056    28    57   987     0      60  )
 41602    57  1056    29    57   987     0     102  ;
 41603    57  1057     5    57   987     0      64  }
 41604    57  1057     5    57   987     0    2326  ENDMETHOD
 41605    57  1057     5    57   988     0    2327  STARTMETHOD
 41606    57  1077    12    57   988     0      36  int
 41607    57  1077    16    57   988     0     111  hashCode
 41608    57  1077    24    57   988     0      59  (
 41609    57  1077    25    57   988     0      60  )
 41610    57  1077    27    57   988     0      63  {
 41611    57  1078     9    57   988     0      36  int
 41612    57  1078    13    57   988     0     111  h
 41613    57  1078    15    57   988     0      67  =
 41614    57  1078    17    57   988     0     112  1
 41615    57  1078    18    57   988     0     102  ;
 41616    57  1079     9    57   988     0      36  int
 41617    57  1079    13    57   988     0     111  p
 41618    57  1079    15    57   988     0      67  =
 41619    57  1079    17    57   988     0     111  position
 41620    57  1079    25    57   988     0      59  (
 41621    57  1079    26    57   988     0      60  )
 41622    57  1079    27    57   988     0     102  ;
 41623    57  1080     9    57   988     0      37  for
 41624    57  1080    13    57   988     0      59  (
 41625    57  1080    14    57   988     0      36  int
 41626    57  1080    18    57   988     0     111  i
 41627    57  1080    20    57   988     0      67  =
 41628    57  1080    22    57   988     0     111  limit
 41629    57  1080    27    57   988     0      59  (
 41630    57  1080    28    57   988     0      60  )
 41631    57  1080    30    57   988     0      77  -
 41632    57  1080    32    57   988     0     112  1
 41633    57  1080    33    57   988     0     102  ;
 41634    57  1080    35    57   988     0     111  i
 41635    57  1080    37    57   988     0      88  >=
 41636    57  1080    40    57   988     0     111  p
 41637    57  1080    41    57   988     0     102  ;
 41638    57  1080    43    57   988     0     111  i
 41639    57  1080    44    57   988     0      79  --
 41640    57  1080    46    57   988     0      60  )
 41641    57  1081    13    57   988     0     111  h
 41642    57  1081    15    57   988     0      67  =
 41643    57  1081    17    57   988     0     112  31
 41644    57  1081    20    57   988     0      80  *
 41645    57  1081    22    57   988     0     111  h
 41646    57  1081    24    57   988     0      74  +
 41647    57  1081    26    57   988     0      59  (
 41648    57  1081    27    57   988     0      36  int
 41649    57  1081    30    57   988     0      60  )
 41650    57  1081    31    57   988     0     111  get
 41651    57  1081    34    57   988     0      59  (
 41652    57  1081    35    57   988     0     111  i
 41653    57  1081    36    57   988     0      60  )
 41654    57  1081    37    57   988     0     102  ;
 41655    57  1082     9    57   988     0      19  return
 41656    57  1082    16    57   988     0     111  h
 41657    57  1082    17    57   988     0     102  ;
 41658    57  1083     5    57   988     0      64  }
 41659    57  1083     5    57   988     0    2328  ENDMETHOD
 41660    57  1083     5    57   989     0    2329  STARTMETHOD
 41661    57  1110    12    57   989     0      39  boolean
 41662    57  1110    20    57   989     0     111  equals
 41663    57  1110    26    57   989     0      59  (
 41664    57  1110    27    57   989     0     111  Object
 41665    57  1110    34    57   989     0     111  ob
 41666    57  1110    36    57   989     0      60  )
 41667    57  1110    38    57   989     0      63  {
 41668    57  1111     9    57   989     0      31  if
 41669    57  1111    12    57   989     0      59  (
 41670    57  1111    13    57   989     0      44  this
 41671    57  1111    18    57   989     0      68  ==
 41672    57  1111    21    57   989     0     111  ob
 41673    57  1111    23    57   989     0      60  )
 41674    57  1112    13    57   989     0      19  return
 41675    57  1112    20    57   989     0      52  true
 41676    57  1112    24    57   989     0     102  ;
 41677    57  1113     9    57   989     0      31  if
 41678    57  1113    12    57   989     0      59  (
 41679    57  1113    13    57   989     0      69  !
 41680    57  1113    14    57   989     0      59  (
 41681    57  1113    15    57   989     0     111  ob
 41682    57  1113    29    57   989     0     111  DoubleBuffer
 41683    57  1113    41    57   989     0      60  )
 41684    57  1113    42    57   989     0      60  )
 41685    57  1114    13    57   989     0      19  return
 41686    57  1114    20    57   989     0      43  false
 41687    57  1114    25    57   989     0     102  ;
 41688    57  1115     9    57   989     0     111  DoubleBuffer
 41689    57  1115    22    57   989     0     111  that
 41690    57  1115    27    57   989     0      67  =
 41691    57  1115    29    57   989     0      59  (
 41692    57  1115    30    57   989     0     111  DoubleBuffer
 41693    57  1115    42    57   989     0      60  )
 41694    57  1115    43    57   989     0     111  ob
 41695    57  1115    45    57   989     0     102  ;
 41696    57  1116     9    57   989     0      31  if
 41697    57  1116    12    57   989     0      59  (
 41698    57  1116    13    57   989     0     111  this.remaining
 41699    57  1116    27    57   989     0      59  (
 41700    57  1116    28    57   989     0      60  )
 41701    57  1116    30    57   989     0      71  !=
 41702    57  1116    33    57   989     0     111  that.remaining
 41703    57  1116    47    57   989     0      59  (
 41704    57  1116    48    57   989     0      60  )
 41705    57  1116    49    57   989     0      60  )
 41706    57  1117    13    57   989     0      19  return
 41707    57  1117    20    57   989     0      43  false
 41708    57  1117    25    57   989     0     102  ;
 41709    57  1118     9    57   989     0      36  int
 41710    57  1118    13    57   989     0     111  p
 41711    57  1118    15    57   989     0      67  =
 41712    57  1118    17    57   989     0     111  this.position
 41713    57  1118    30    57   989     0      59  (
 41714    57  1118    31    57   989     0      60  )
 41715    57  1118    32    57   989     0     102  ;
 41716    57  1119     9    57   989     0      37  for
 41717    57  1119    13    57   989     0      59  (
 41718    57  1119    14    57   989     0      36  int
 41719    57  1119    18    57   989     0     111  i
 41720    57  1119    20    57   989     0      67  =
 41721    57  1119    22    57   989     0     111  this.limit
 41722    57  1119    32    57   989     0      59  (
 41723    57  1119    33    57   989     0      60  )
 41724    57  1119    35    57   989     0      77  -
 41725    57  1119    37    57   989     0     112  1
 41726    57  1119    38    57   989     0      66  ,
 41727    57  1119    40    57   989     0     111  j
 41728    57  1119    42    57   989     0      67  =
 41729    57  1119    44    57   989     0     111  that.limit
 41730    57  1119    54    57   989     0      59  (
 41731    57  1119    55    57   989     0      60  )
 41732    57  1119    57    57   989     0      77  -
 41733    57  1119    59    57   989     0     112  1
 41734    57  1119    60    57   989     0     102  ;
 41735    57  1119    62    57   989     0     111  i
 41736    57  1119    64    57   989     0      88  >=
 41737    57  1119    67    57   989     0     111  p
 41738    57  1119    68    57   989     0     102  ;
 41739    57  1119    70    57   989     0     111  i
 41740    57  1119    71    57   989     0      79  --
 41741    57  1119    73    57   989     0      66  ,
 41742    57  1119    75    57   989     0     111  j
 41743    57  1119    76    57   989     0      79  --
 41744    57  1119    78    57   989     0      60  )
 41745    57  1119    80    57   989     0      63  {
 41746    57  1120    13    57   989     1      32  double
 41747    57  1120    20    57   989     1     111  v1
 41748    57  1120    23    57   989     1      67  =
 41749    57  1120    25    57   989     1     111  this.get
 41750    57  1120    33    57   989     1      59  (
 41751    57  1120    34    57   989     1     111  i
 41752    57  1120    35    57   989     1      60  )
 41753    57  1120    36    57   989     1     102  ;
 41754    57  1121    13    57   989     1      32  double
 41755    57  1121    20    57   989     1     111  v2
 41756    57  1121    23    57   989     1      67  =
 41757    57  1121    25    57   989     1     111  that.get
 41758    57  1121    33    57   989     1      59  (
 41759    57  1121    34    57   989     1     111  j
 41760    57  1121    35    57   989     1      60  )
 41761    57  1121    36    57   989     1     102  ;
 41762    57  1122    13    57   989     0      31  if
 41763    57  1122    16    57   989     0      59  (
 41764    57  1122    17    57   989     0     111  v1
 41765    57  1122    20    57   989     0      71  !=
 41766    57  1122    23    57   989     0     111  v2
 41767    57  1122    25    57   989     0      60  )
 41768    57  1122    27    57   989     0      63  {
 41769    57  1123    17    57   989     0      31  if
 41770    57  1123    20    57   989     0      59  (
 41771    57  1123    21    57   989     0      59  (
 41772    57  1123    22    57   989     0     111  v1
 41773    57  1123    25    57   989     0      71  !=
 41774    57  1123    28    57   989     0     111  v1
 41775    57  1123    30    57   989     0      60  )
 41776    57  1123    32    57   989     0     101  &&
 41777    57  1123    35    57   989     0      59  (
 41778    57  1123    36    57   989     0     111  v2
 41779    57  1123    39    57   989     0      71  !=
 41780    57  1123    42    57   989     0     111  v2
 41781    57  1123    44    57   989     0      60  )
 41782    57  1123    45    57   989     0      60  )
 41783    57  1124    21    57   989     0      46  continue
 41784    57  1124    29    57   989     0     102  ;
 41785    57  1125    17    57   989     0      19  return
 41786    57  1125    24    57   989     0      43  false
 41787    57  1125    29    57   989     0     102  ;
 41788    57  1126    13    57   989     1      64  }
 41789    57  1127     9    57   989     1      64  }
 41790    57  1128     9    57   989     0      19  return
 41791    57  1128    16    57   989     0      52  true
 41792    57  1128    20    57   989     0     102  ;
 41793    57  1129     5    57   989     0      64  }
 41794    57  1129     5    57   989     0    2330  ENDMETHOD
 41795    57  1129     5    57   990     0    2331  STARTMETHOD
 41796    57  1143    12    57   990     0      36  int
 41797    57  1143    16    57   990     0     111  compareTo
 41798    57  1143    25    57   990     0      59  (
 41799    57  1143    26    57   990     0     111  DoubleBuffer
 41800    57  1143    39    57   990     0     111  that
 41801    57  1143    43    57   990     0      60  )
 41802    57  1143    45    57   990     0      63  {
 41803    57  1144     9    57   990     0      36  int
 41804    57  1144    13    57   990     0     111  n
 41805    57  1144    15    57   990     0      67  =
 41806    57  1144    17    57   990     0     111  this.position
 41807    57  1144    30    57   990     0      59  (
 41808    57  1144    31    57   990     0      60  )
 41809    57  1144    33    57   990     0      74  +
 41810    57  1144    35    57   990     0     111  Math.min
 41811    57  1144    43    57   990     0      59  (
 41812    57  1144    44    57   990     0     111  this.remaining
 41813    57  1144    58    57   990     0      59  (
 41814    57  1144    59    57   990     0      60  )
 41815    57  1144    60    57   990     0      66  ,
 41816    57  1144    62    57   990     0     111  that.remaining
 41817    57  1144    76    57   990     0      59  (
 41818    57  1144    77    57   990     0      60  )
 41819    57  1144    78    57   990     0      60  )
 41820    57  1144    79    57   990     0     102  ;
 41821    57  1145     9    57   990     0      37  for
 41822    57  1145    13    57   990     0      59  (
 41823    57  1145    14    57   990     0      36  int
 41824    57  1145    18    57   990     0     111  i
 41825    57  1145    20    57   990     0      67  =
 41826    57  1145    22    57   990     0     111  this.position
 41827    57  1145    35    57   990     0      59  (
 41828    57  1145    36    57   990     0      60  )
 41829    57  1145    37    57   990     0      66  ,
 41830    57  1145    39    57   990     0     111  j
 41831    57  1145    41    57   990     0      67  =
 41832    57  1145    43    57   990     0     111  that.position
 41833    57  1145    56    57   990     0      59  (
 41834    57  1145    57    57   990     0      60  )
 41835    57  1145    58    57   990     0     102  ;
 41836    57  1145    60    57   990     0     111  i
 41837    57  1145    62    57   990     0      93  <
 41838    57  1145    64    57   990     0     111  n
 41839    57  1145    65    57   990     0     102  ;
 41840    57  1145    67    57   990     0     111  i
 41841    57  1145    68    57   990     0      76  ++
 41842    57  1145    70    57   990     0      66  ,
 41843    57  1145    72    57   990     0     111  j
 41844    57  1145    73    57   990     0      76  ++
 41845    57  1145    75    57   990     0      60  )
 41846    57  1145    77    57   990     0      63  {
 41847    57  1146    13    57   990     1      32  double
 41848    57  1146    20    57   990     1     111  v1
 41849    57  1146    23    57   990     1      67  =
 41850    57  1146    25    57   990     1     111  this.get
 41851    57  1146    33    57   990     1      59  (
 41852    57  1146    34    57   990     1     111  i
 41853    57  1146    35    57   990     1      60  )
 41854    57  1146    36    57   990     1     102  ;
 41855    57  1147    13    57   990     1      32  double
 41856    57  1147    20    57   990     1     111  v2
 41857    57  1147    23    57   990     1      67  =
 41858    57  1147    25    57   990     1     111  that.get
 41859    57  1147    33    57   990     1      59  (
 41860    57  1147    34    57   990     1     111  j
 41861    57  1147    35    57   990     1      60  )
 41862    57  1147    36    57   990     1     102  ;
 41863    57  1148    13    57   990     0      31  if
 41864    57  1148    16    57   990     0      59  (
 41865    57  1148    17    57   990     0     111  v1
 41866    57  1148    20    57   990     0      68  ==
 41867    57  1148    23    57   990     0     111  v2
 41868    57  1148    25    57   990     0      60  )
 41869    57  1149    17    57   990     0      46  continue
 41870    57  1149    25    57   990     0     102  ;
 41871    57  1150    13    57   990     0      31  if
 41872    57  1150    16    57   990     0      59  (
 41873    57  1150    17    57   990     0      59  (
 41874    57  1150    18    57   990     0     111  v1
 41875    57  1150    21    57   990     0      71  !=
 41876    57  1150    24    57   990     0     111  v1
 41877    57  1150    26    57   990     0      60  )
 41878    57  1150    28    57   990     0     101  &&
 41879    57  1150    31    57   990     0      59  (
 41880    57  1150    32    57   990     0     111  v2
 41881    57  1150    35    57   990     0      71  !=
 41882    57  1150    38    57   990     0     111  v2
 41883    57  1150    40    57   990     0      60  )
 41884    57  1150    41    57   990     0      60  )
 41885    57  1151    17    57   990     0      46  continue
 41886    57  1151    25    57   990     0     102  ;
 41887    57  1152    13    57   990     0      31  if
 41888    57  1152    16    57   990     0      59  (
 41889    57  1152    17    57   990     0     111  v1
 41890    57  1152    20    57   990     0      93  <
 41891    57  1152    22    57   990     0     111  v2
 41892    57  1152    24    57   990     0      60  )
 41893    57  1153    17    57   990     0      19  return
 41894    57  1153    24    57   990     0      77  -
 41895    57  1153    25    57   990     0     112  1
 41896    57  1153    26    57   990     0     102  ;
 41897    57  1154    13    57   990     0      19  return
 41898    57  1154    20    57   990     0      74  +
 41899    57  1154    21    57   990     0     112  1
 41900    57  1154    22    57   990     0     102  ;
 41901    57  1155     9    57   990     0      64  }
 41902    57  1156     9    57   990     0      19  return
 41903    57  1156    16    57   990     0     111  this.remaining
 41904    57  1156    30    57   990     0      59  (
 41905    57  1156    31    57   990     0      60  )
 41906    57  1156    33    57   990     0      77  -
 41907    57  1156    35    57   990     0     111  that.remaining
 41908    57  1156    49    57   990     0      59  (
 41909    57  1156    50    57   990     0      60  )
 41910    57  1156    51    57   990     0     102  ;
 41911    57  1157     5    57   990     0      64  }
 41912    57  1157     5    57   990     0    2332  ENDMETHOD
 41913    57  1372    21    57    -1     0     111  ByteOrder
 41914    57  1372    31    57    -1     0     111  order
 41915    57  1372    36    57    -1     0      59  (
 41916    57  1372    37    57    -1     0      60  )
 41917    57  1372    38    57    -1     0     102  ;
 41918    57  1426     1    57    -1     0      64  }
 41919    57  1426     1    57    -1     1    2333  ENDCLASS
 41920    57  1426     1    -1    -1     1    2334  ENDFILE C:\Users\RA\javasrc\java\nio\DoubleBuffer.java
 41921    58     1     1    -1    -1     1    2335  STARTFILE C:\Users\RA\javasrc\java\nio\FloatBuffer.java
 41922    58     2     9    -1    -1     0     111  java.nio
 41923    58     2    17    -1    -1     0     102  ;
 41924    58   231    17    58    -1     0    2336  STARTCLASS
 41925    58   231    17    58    -1     0      24  class
 41926    58   231    23    58    -1     0     111  FloatBuffer
 41927    58   232     5    58    -1     0      38  extends
 41928    58   232    13    58    -1     0     111  Buffer
 41929    58   233     5    58    -1     0      17  implements
 41930    58   233    16    58    -1     0     111  Comparable
 41931    58   233    26    58    -1     0      93  <
 41932    58   233    27    58    -1     0     111  FloatBuffer
 41933    58   233    38    58    -1     0      89  >
 41934    58   234     1    58    -1     0      63  {
 41935    58   240    16    58    -1     0      61  [
 41936    58   240    17    58    -1     0      62  ]
 41937    58   240    19    58    -1     0     111  hb
 41938    58   240    21    58    -1     0     102  ;
 41939    58   241    11    58    -1     0      36  int
 41940    58   241    15    58    -1     0     111  offset
 41941    58   241    21    58    -1     0     102  ;
 41942    58   242     5    58    -1     0      39  boolean
 41943    58   242    13    58    -1     0     111  isReadOnly
 41944    58   242    23    58    -1     0     102  ;
 41945    58   242    23    58   991     0    2337  STARTMETHOD
 41946    58   247     5    58   991     0     111  FloatBuffer
 41947    58   247    16    58   991     0      59  (
 41948    58   247    17    58   991     0      36  int
 41949    58   247    21    58   991     0     111  mark
 41950    58   247    25    58   991     0      66  ,
 41951    58   247    27    58   991     0      36  int
 41952    58   247    31    58   991     0     111  pos
 41953    58   247    34    58   991     0      66  ,
 41954    58   247    36    58   991     0      36  int
 41955    58   247    40    58   991     0     111  lim
 41956    58   247    43    58   991     0      66  ,
 41957    58   247    45    58   991     0      36  int
 41958    58   247    49    58   991     0     111  cap
 41959    58   247    52    58   991     0      66  ,
 41960    58   248    23    58   991     0      61  [
 41961    58   248    24    58   991     0      62  ]
 41962    58   248    26    58   991     0     111  hb
 41963    58   248    28    58   991     0      66  ,
 41964    58   248    30    58   991     0      36  int
 41965    58   248    34    58   991     0     111  offset
 41966    58   248    40    58   991     0      60  )
 41967    58   249     5    58   991     0      63  {
 41968    58   250     9    58   991     0      27  super
 41969    58   250    14    58   991     0      59  (
 41970    58   250    15    58   991     0     111  mark
 41971    58   250    19    58   991     0      66  ,
 41972    58   250    21    58   991     0     111  pos
 41973    58   250    24    58   991     0      66  ,
 41974    58   250    26    58   991     0     111  lim
 41975    58   250    29    58   991     0      66  ,
 41976    58   250    31    58   991     0     111  cap
 41977    58   250    34    58   991     0      60  )
 41978    58   250    35    58   991     0     102  ;
 41979    58   251     9    58   991     1     111  this.hb
 41980    58   251    17    58   991     1      67  =
 41981    58   251    19    58   991     1     111  hb
 41982    58   251    21    58   991     1     102  ;
 41983    58   252     9    58   991     1     111  this.offset
 41984    58   252    21    58   991     1      67  =
 41985    58   252    23    58   991     1     111  offset
 41986    58   252    29    58   991     1     102  ;
 41987    58   253     5    58   991     0      64  }
 41988    58   253     5    58   991     0    2338  ENDMETHOD
 41989    58   253     5    58   992     0    2339  STARTMETHOD
 41990    58   257     5    58   992     0     111  FloatBuffer
 41991    58   257    16    58   992     0      59  (
 41992    58   257    17    58   992     0      36  int
 41993    58   257    21    58   992     0     111  mark
 41994    58   257    25    58   992     0      66  ,
 41995    58   257    27    58   992     0      36  int
 41996    58   257    31    58   992     0     111  pos
 41997    58   257    34    58   992     0      66  ,
 41998    58   257    36    58   992     0      36  int
 41999    58   257    40    58   992     0     111  lim
 42000    58   257    43    58   992     0      66  ,
 42001    58   257    45    58   992     0      36  int
 42002    58   257    49    58   992     0     111  cap
 42003    58   257    52    58   992     0      60  )
 42004    58   257    54    58   992     0      63  {
 42005    58   258     9    58   992     0      44  this
 42006    58   258    13    58   992     0      59  (
 42007    58   258    14    58   992     0     111  mark
 42008    58   258    18    58   992     0      66  ,
 42009    58   258    20    58   992     0     111  pos
 42010    58   258    23    58   992     0      66  ,
 42011    58   258    25    58   992     0     111  lim
 42012    58   258    28    58   992     0      66  ,
 42013    58   258    30    58   992     0     111  cap
 42014    58   258    33    58   992     0      66  ,
 42015    58   258    35    58   992     0      21  null
 42016    58   258    39    58   992     0      66  ,
 42017    58   258    41    58   992     0     112  0
 42018    58   258    42    58   992     0      60  )
 42019    58   258    43    58   992     0     102  ;
 42020    58   259     5    58   992     0      64  }
 42021    58   259     5    58   992     0    2340  ENDMETHOD
 42022    58   259     5    58   993     0    2341  STARTMETHOD
 42023    58   300    12    58   993     0      45  static
 42024    58   300    19    58   993     0     111  FloatBuffer
 42025    58   300    31    58   993     0     111  allocate
 42026    58   300    39    58   993     0      59  (
 42027    58   300    40    58   993     0      36  int
 42028    58   300    44    58   993     0     111  capacity
 42029    58   300    52    58   993     0      60  )
 42030    58   300    54    58   993     0      63  {
 42031    58   301     9    58   993     0      31  if
 42032    58   301    12    58   993     0      59  (
 42033    58   301    13    58   993     0     111  capacity
 42034    58   301    22    58   993     0      93  <
 42035    58   301    24    58   993     0     112  0
 42036    58   301    25    58   993     0      60  )
 42037    58   302    13    58   993     0      20  throw
 42038    58   302    23    58   993     0     111  IllegalArgumentException
 42039    58   302    47    58   993     0      59  (
 42040    58   302    48    58   993     0      60  )
 42041    58   302    49    58   993     0     102  ;
 42042    58   303     9    58   993     0      19  return
 42043    58   303    20    58   993     0     111  HeapFloatBuffer
 42044    58   303    35    58   993     0      59  (
 42045    58   303    36    58   993     0     111  capacity
 42046    58   303    44    58   993     0      66  ,
 42047    58   303    46    58   993     0     111  capacity
 42048    58   303    54    58   993     0      60  )
 42049    58   303    55    58   993     0     102  ;
 42050    58   304     5    58   993     0      64  }
 42051    58   304     5    58   993     0    2342  ENDMETHOD
 42052    58   304     5    58   994     0    2343  STARTMETHOD
 42053    58   337    12    58   994     0      45  static
 42054    58   337    19    58   994     0     111  FloatBuffer
 42055    58   337    31    58   994     0     111  wrap
 42056    58   337    35    58   994     0      59  (
 42057    58   337    41    58   994     0      61  [
 42058    58   337    42    58   994     0      62  ]
 42059    58   337    44    58   994     0     111  array
 42060    58   337    49    58   994     0      66  ,
 42061    58   338    37    58   994     0      36  int
 42062    58   338    41    58   994     0     111  offset
 42063    58   338    47    58   994     0      66  ,
 42064    58   338    49    58   994     0      36  int
 42065    58   338    53    58   994     0     111  length
 42066    58   338    59    58   994     0      60  )
 42067    58   339     5    58   994     0      63  {
 42068    58   340     9    58   994     0      35  try
 42069    58   340    13    58   994     0      63  {
 42070    58   341    13    58   994     0      19  return
 42071    58   341    24    58   994     0     111  HeapFloatBuffer
 42072    58   341    39    58   994     0      59  (
 42073    58   341    40    58   994     0     111  array
 42074    58   341    45    58   994     0      66  ,
 42075    58   341    47    58   994     0     111  offset
 42076    58   341    53    58   994     0      66  ,
 42077    58   341    55    58   994     0     111  length
 42078    58   341    61    58   994     0      60  )
 42079    58   341    62    58   994     0     102  ;
 42080    58   342     9    58   994     0      64  }
 42081    58   342    11    58   994     0      34  catch
 42082    58   342    17    58   994     0      59  (
 42083    58   342    18    58   994     0     111  IllegalArgumentException
 42084    58   342    43    58   994     0     111  x
 42085    58   342    44    58   994     0      60  )
 42086    58   342    46    58   994     0      63  {
 42087    58   343    13    58   994     0      20  throw
 42088    58   343    23    58   994     0     111  IndexOutOfBoundsException
 42089    58   343    48    58   994     0      59  (
 42090    58   343    49    58   994     0      60  )
 42091    58   343    50    58   994     0     102  ;
 42092    58   344     9    58   994     0      64  }
 42093    58   345     5    58   994     0      64  }
 42094    58   345     5    58   994     0    2344  ENDMETHOD
 42095    58   345     5    58   995     0    2345  STARTMETHOD
 42096    58   363    12    58   995     0      45  static
 42097    58   363    19    58   995     0     111  FloatBuffer
 42098    58   363    31    58   995     0     111  wrap
 42099    58   363    35    58   995     0      59  (
 42100    58   363    41    58   995     0      61  [
 42101    58   363    42    58   995     0      62  ]
 42102    58   363    44    58   995     0     111  array
 42103    58   363    49    58   995     0      60  )
 42104    58   363    51    58   995     0      63  {
 42105    58   364     9    58   995     0      19  return
 42106    58   364    16    58   995     0     111  wrap
 42107    58   364    20    58   995     0      59  (
 42108    58   364    21    58   995     0     111  array
 42109    58   364    26    58   995     0      66  ,
 42110    58   364    28    58   995     0     112  0
 42111    58   364    29    58   995     0      66  ,
 42112    58   364    31    58   995     0     111  array.length
 42113    58   364    43    58   995     0      60  )
 42114    58   364    44    58   995     0     102  ;
 42115    58   365     5    58   995     0      64  }
 42116    58   365     5    58   995     0    2346  ENDMETHOD
 42117    58   477    21    58    -1     1     111  FloatBuffer
 42118    58   477    33    58    -1     1     111  slice
 42119    58   477    38    58    -1     1      59  (
 42120    58   477    39    58    -1     1      60  )
 42121    58   477    40    58    -1     1     102  ;
 42122    58   494    21    58    -1     1     111  FloatBuffer
 42123    58   494    33    58    -1     1     111  duplicate
 42124    58   494    42    58    -1     1      59  (
 42125    58   494    43    58    -1     1      60  )
 42126    58   494    44    58    -1     1     102  ;
 42127    58   514    21    58    -1     1     111  FloatBuffer
 42128    58   514    33    58    -1     1     111  asReadOnlyBuffer
 42129    58   514    49    58    -1     1      59  (
 42130    58   514    50    58    -1     1      60  )
 42131    58   514    51    58    -1     1     102  ;
 42132    58   528    27    58    -1     0     111  get
 42133    58   528    30    58    -1     0      59  (
 42134    58   528    31    58    -1     0      60  )
 42135    58   528    32    58    -1     0     102  ;
 42136    58   547    21    58    -1     0     111  FloatBuffer
 42137    58   547    33    58    -1     0     111  put
 42138    58   547    36    58    -1     0      59  (
 42139    58   547    43    58    -1     0     111  f
 42140    58   547    44    58    -1     0      60  )
 42141    58   547    45    58    -1     0     102  ;
 42142    58   562    27    58    -1     0     111  get
 42143    58   562    30    58    -1     0      59  (
 42144    58   562    31    58    -1     0      36  int
 42145    58   562    35    58    -1     0     111  index
 42146    58   562    40    58    -1     0      60  )
 42147    58   562    41    58    -1     0     102  ;
 42148    58   585    21    58    -1     0     111  FloatBuffer
 42149    58   585    33    58    -1     0     111  put
 42150    58   585    36    58    -1     0      59  (
 42151    58   585    37    58    -1     0      36  int
 42152    58   585    41    58    -1     0     111  index
 42153    58   585    46    58    -1     0      66  ,
 42154    58   585    54    58    -1     0     111  f
 42155    58   585    55    58    -1     0      60  )
 42156    58   585    56    58    -1     0     102  ;
 42157    58   585    56    58   996     0    2347  STARTMETHOD
 42158    58   639    12    58   996     0     111  FloatBuffer
 42159    58   639    24    58   996     0     111  get
 42160    58   639    27    58   996     0      59  (
 42161    58   639    33    58   996     0      61  [
 42162    58   639    34    58   996     0      62  ]
 42163    58   639    36    58   996     0     111  dst
 42164    58   639    39    58   996     0      66  ,
 42165    58   639    41    58   996     0      36  int
 42166    58   639    45    58   996     0     111  offset
 42167    58   639    51    58   996     0      66  ,
 42168    58   639    53    58   996     0      36  int
 42169    58   639    57    58   996     0     111  length
 42170    58   639    63    58   996     0      60  )
 42171    58   639    65    58   996     0      63  {
 42172    58   640     9    58   996     0     111  checkBounds
 42173    58   640    20    58   996     0      59  (
 42174    58   640    21    58   996     0     111  offset
 42175    58   640    27    58   996     0      66  ,
 42176    58   640    29    58   996     0     111  length
 42177    58   640    35    58   996     0      66  ,
 42178    58   640    37    58   996     0     111  dst.length
 42179    58   640    47    58   996     0      60  )
 42180    58   640    48    58   996     0     102  ;
 42181    58   641     9    58   996     0      31  if
 42182    58   641    12    58   996     0      59  (
 42183    58   641    13    58   996     0     111  length
 42184    58   641    20    58   996     0      89  >
 42185    58   641    22    58   996     0     111  remaining
 42186    58   641    31    58   996     0      59  (
 42187    58   641    32    58   996     0      60  )
 42188    58   641    33    58   996     0      60  )
 42189    58   642    13    58   996     0      20  throw
 42190    58   642    23    58   996     0     111  BufferUnderflowException
 42191    58   642    47    58   996     0      59  (
 42192    58   642    48    58   996     0      60  )
 42193    58   642    49    58   996     0     102  ;
 42194    58   643     9    58   996     0      36  int
 42195    58   643    13    58   996     0     111  end
 42196    58   643    17    58   996     0      67  =
 42197    58   643    19    58   996     0     111  offset
 42198    58   643    26    58   996     0      74  +
 42199    58   643    28    58   996     0     111  length
 42200    58   643    34    58   996     0     102  ;
 42201    58   644     9    58   996     0      37  for
 42202    58   644    13    58   996     0      59  (
 42203    58   644    14    58   996     0      36  int
 42204    58   644    18    58   996     0     111  i
 42205    58   644    20    58   996     0      67  =
 42206    58   644    22    58   996     0     111  offset
 42207    58   644    28    58   996     0     102  ;
 42208    58   644    30    58   996     0     111  i
 42209    58   644    32    58   996     0      93  <
 42210    58   644    34    58   996     0     111  end
 42211    58   644    37    58   996     0     102  ;
 42212    58   644    39    58   996     0     111  i
 42213    58   644    40    58   996     0      76  ++
 42214    58   644    42    58   996     0      60  )
 42215    58   645    13    58   996     0     111  dst
 42216    58   645    16    58   996     0      61  [
 42217    58   645    17    58   996     0     111  i
 42218    58   645    18    58   996     0      62  ]
 42219    58   645    20    58   996     0      67  =
 42220    58   645    22    58   996     0     111  get
 42221    58   645    25    58   996     0      59  (
 42222    58   645    26    58   996     0      60  )
 42223    58   645    27    58   996     0     102  ;
 42224    58   646     9    58   996     0      19  return
 42225    58   646    16    58   996     0      44  this
 42226    58   646    20    58   996     0     102  ;
 42227    58   647     5    58   996     0      64  }
 42228    58   647     5    58   996     0    2348  ENDMETHOD
 42229    58   647     5    58   997     0    2349  STARTMETHOD
 42230    58   665    12    58   997     0     111  FloatBuffer
 42231    58   665    24    58   997     0     111  get
 42232    58   665    27    58   997     0      59  (
 42233    58   665    33    58   997     0      61  [
 42234    58   665    34    58   997     0      62  ]
 42235    58   665    36    58   997     0     111  dst
 42236    58   665    39    58   997     0      60  )
 42237    58   665    41    58   997     0      63  {
 42238    58   666     9    58   997     0      19  return
 42239    58   666    16    58   997     0     111  get
 42240    58   666    19    58   997     0      59  (
 42241    58   666    20    58   997     0     111  dst
 42242    58   666    23    58   997     0      66  ,
 42243    58   666    25    58   997     0     112  0
 42244    58   666    26    58   997     0      66  ,
 42245    58   666    28    58   997     0     111  dst.length
 42246    58   666    38    58   997     0      60  )
 42247    58   666    39    58   997     0     102  ;
 42248    58   667     5    58   997     0      64  }
 42249    58   667     5    58   997     0    2350  ENDMETHOD
 42250    58   667     5    58   998     0    2351  STARTMETHOD
 42251    58   713    12    58   998     0     111  FloatBuffer
 42252    58   713    24    58   998     0     111  put
 42253    58   713    27    58   998     0      59  (
 42254    58   713    28    58   998     0     111  FloatBuffer
 42255    58   713    40    58   998     0     111  src
 42256    58   713    43    58   998     0      60  )
 42257    58   713    45    58   998     0      63  {
 42258    58   714     9    58   998     0      31  if
 42259    58   714    12    58   998     0      59  (
 42260    58   714    13    58   998     0     111  src
 42261    58   714    17    58   998     0      68  ==
 42262    58   714    20    58   998     0      44  this
 42263    58   714    24    58   998     0      60  )
 42264    58   715    13    58   998     0      20  throw
 42265    58   715    23    58   998     0     111  IllegalArgumentException
 42266    58   715    47    58   998     0      59  (
 42267    58   715    48    58   998     0      60  )
 42268    58   715    49    58   998     0     102  ;
 42269    58   716     9    58   998     0      36  int
 42270    58   716    13    58   998     0     111  n
 42271    58   716    15    58   998     0      67  =
 42272    58   716    17    58   998     0     111  src.remaining
 42273    58   716    30    58   998     0      59  (
 42274    58   716    31    58   998     0      60  )
 42275    58   716    32    58   998     0     102  ;
 42276    58   717     9    58   998     0      31  if
 42277    58   717    12    58   998     0      59  (
 42278    58   717    13    58   998     0     111  n
 42279    58   717    15    58   998     0      89  >
 42280    58   717    17    58   998     0     111  remaining
 42281    58   717    26    58   998     0      59  (
 42282    58   717    27    58   998     0      60  )
 42283    58   717    28    58   998     0      60  )
 42284    58   718    13    58   998     0      20  throw
 42285    58   718    23    58   998     0     111  BufferOverflowException
 42286    58   718    46    58   998     0      59  (
 42287    58   718    47    58   998     0      60  )
 42288    58   718    48    58   998     0     102  ;
 42289    58   719     9    58   998     0      37  for
 42290    58   719    13    58   998     0      59  (
 42291    58   719    14    58   998     0      36  int
 42292    58   719    18    58   998     0     111  i
 42293    58   719    20    58   998     0      67  =
 42294    58   719    22    58   998     0     112  0
 42295    58   719    23    58   998     0     102  ;
 42296    58   719    25    58   998     0     111  i
 42297    58   719    27    58   998     0      93  <
 42298    58   719    29    58   998     0     111  n
 42299    58   719    30    58   998     0     102  ;
 42300    58   719    32    58   998     0     111  i
 42301    58   719    33    58   998     0      76  ++
 42302    58   719    35    58   998     0      60  )
 42303    58   720    13    58   998     0     111  put
 42304    58   720    16    58   998     0      59  (
 42305    58   720    17    58   998     0     111  src.get
 42306    58   720    24    58   998     0      59  (
 42307    58   720    25    58   998     0      60  )
 42308    58   720    26    58   998     0      60  )
 42309    58   720    27    58   998     0     102  ;
 42310    58   721     9    58   998     0      19  return
 42311    58   721    16    58   998     0      44  this
 42312    58   721    20    58   998     0     102  ;
 42313    58   722     5    58   998     0      64  }
 42314    58   722     5    58   998     0    2352  ENDMETHOD
 42315    58   722     5    58   999     0    2353  STARTMETHOD
 42316    58   774    12    58   999     0     111  FloatBuffer
 42317    58   774    24    58   999     0     111  put
 42318    58   774    27    58   999     0      59  (
 42319    58   774    33    58   999     0      61  [
 42320    58   774    34    58   999     0      62  ]
 42321    58   774    36    58   999     0     111  src
 42322    58   774    39    58   999     0      66  ,
 42323    58   774    41    58   999     0      36  int
 42324    58   774    45    58   999     0     111  offset
 42325    58   774    51    58   999     0      66  ,
 42326    58   774    53    58   999     0      36  int
 42327    58   774    57    58   999     0     111  length
 42328    58   774    63    58   999     0      60  )
 42329    58   774    65    58   999     0      63  {
 42330    58   775     9    58   999     0     111  checkBounds
 42331    58   775    20    58   999     0      59  (
 42332    58   775    21    58   999     0     111  offset
 42333    58   775    27    58   999     0      66  ,
 42334    58   775    29    58   999     0     111  length
 42335    58   775    35    58   999     0      66  ,
 42336    58   775    37    58   999     0     111  src.length
 42337    58   775    47    58   999     0      60  )
 42338    58   775    48    58   999     0     102  ;
 42339    58   776     9    58   999     0      31  if
 42340    58   776    12    58   999     0      59  (
 42341    58   776    13    58   999     0     111  length
 42342    58   776    20    58   999     0      89  >
 42343    58   776    22    58   999     0     111  remaining
 42344    58   776    31    58   999     0      59  (
 42345    58   776    32    58   999     0      60  )
 42346    58   776    33    58   999     0      60  )
 42347    58   777    13    58   999     0      20  throw
 42348    58   777    23    58   999     0     111  BufferOverflowException
 42349    58   777    46    58   999     0      59  (
 42350    58   777    47    58   999     0      60  )
 42351    58   777    48    58   999     0     102  ;
 42352    58   778     9    58   999     0      36  int
 42353    58   778    13    58   999     0     111  end
 42354    58   778    17    58   999     0      67  =
 42355    58   778    19    58   999     0     111  offset
 42356    58   778    26    58   999     0      74  +
 42357    58   778    28    58   999     0     111  length
 42358    58   778    34    58   999     0     102  ;
 42359    58   779     9    58   999     0      37  for
 42360    58   779    13    58   999     0      59  (
 42361    58   779    14    58   999     0      36  int
 42362    58   779    18    58   999     0     111  i
 42363    58   779    20    58   999     0      67  =
 42364    58   779    22    58   999     0     111  offset
 42365    58   779    28    58   999     0     102  ;
 42366    58   779    30    58   999     0     111  i
 42367    58   779    32    58   999     0      93  <
 42368    58   779    34    58   999     0     111  end
 42369    58   779    37    58   999     0     102  ;
 42370    58   779    39    58   999     0     111  i
 42371    58   779    40    58   999     0      76  ++
 42372    58   779    42    58   999     0      60  )
 42373    58   780    13    58   999     0     111  this.put
 42374    58   780    21    58   999     0      59  (
 42375    58   780    22    58   999     0     111  src
 42376    58   780    25    58   999     0      61  [
 42377    58   780    26    58   999     0     111  i
 42378    58   780    27    58   999     0      62  ]
 42379    58   780    28    58   999     0      60  )
 42380    58   780    29    58   999     0     102  ;
 42381    58   781     9    58   999     0      19  return
 42382    58   781    16    58   999     0      44  this
 42383    58   781    20    58   999     0     102  ;
 42384    58   782     5    58   999     0      64  }
 42385    58   782     5    58   999     0    2354  ENDMETHOD
 42386    58   782     5    58  1000     0    2355  STARTMETHOD
 42387    58   803    18    58  1000     0     111  FloatBuffer
 42388    58   803    30    58  1000     0     111  put
 42389    58   803    33    58  1000     0      59  (
 42390    58   803    39    58  1000     0      61  [
 42391    58   803    40    58  1000     0      62  ]
 42392    58   803    42    58  1000     0     111  src
 42393    58   803    45    58  1000     0      60  )
 42394    58   803    47    58  1000     0      63  {
 42395    58   804     9    58  1000     0      19  return
 42396    58   804    16    58  1000     0     111  put
 42397    58   804    19    58  1000     0      59  (
 42398    58   804    20    58  1000     0     111  src
 42399    58   804    23    58  1000     0      66  ,
 42400    58   804    25    58  1000     0     112  0
 42401    58   804    26    58  1000     0      66  ,
 42402    58   804    28    58  1000     0     111  src.length
 42403    58   804    38    58  1000     0      60  )
 42404    58   804    39    58  1000     0     102  ;
 42405    58   805     5    58  1000     0      64  }
 42406    58   805     5    58  1000     0    2356  ENDMETHOD
 42407    58   805     5    58  1001     0    2357  STARTMETHOD
 42408    58   906    18    58  1001     0      39  boolean
 42409    58   906    26    58  1001     0     111  hasArray
 42410    58   906    34    58  1001     0      59  (
 42411    58   906    35    58  1001     0      60  )
 42412    58   906    37    58  1001     0      63  {
 42413    58   907     9    58  1001     0      19  return
 42414    58   907    16    58  1001     0      59  (
 42415    58   907    17    58  1001     0     111  hb
 42416    58   907    20    58  1001     0      71  !=
 42417    58   907    23    58  1001     0      21  null
 42418    58   907    27    58  1001     0      60  )
 42419    58   907    29    58  1001     0     101  &&
 42420    58   907    32    58  1001     0      69  !
 42421    58   907    33    58  1001     0     111  isReadOnly
 42422    58   907    43    58  1001     0     102  ;
 42423    58   908     5    58  1001     0      64  }
 42424    58   908     5    58  1001     0    2358  ENDMETHOD
 42425    58   908     5    58  1002     0    2359  STARTMETHOD
 42426    58   929    23    58  1002     0      61  [
 42427    58   929    24    58  1002     0      62  ]
 42428    58   929    26    58  1002     0     111  array
 42429    58   929    31    58  1002     0      59  (
 42430    58   929    32    58  1002     0      60  )
 42431    58   929    34    58  1002     0      63  {
 42432    58   930     9    58  1002     0      31  if
 42433    58   930    12    58  1002     0      59  (
 42434    58   930    13    58  1002     0     111  hb
 42435    58   930    16    58  1002     0      68  ==
 42436    58   930    19    58  1002     0      21  null
 42437    58   930    23    58  1002     0      60  )
 42438    58   931    13    58  1002     0      20  throw
 42439    58   931    23    58  1002     0     111  UnsupportedOperationException
 42440    58   931    52    58  1002     0      59  (
 42441    58   931    53    58  1002     0      60  )
 42442    58   931    54    58  1002     0     102  ;
 42443    58   932     9    58  1002     0      31  if
 42444    58   932    12    58  1002     0      59  (
 42445    58   932    13    58  1002     0     111  isReadOnly
 42446    58   932    23    58  1002     0      60  )
 42447    58   933    13    58  1002     0      20  throw
 42448    58   933    23    58  1002     0     111  ReadOnlyBufferException
 42449    58   933    46    58  1002     0      59  (
 42450    58   933    47    58  1002     0      60  )
 42451    58   933    48    58  1002     0     102  ;
 42452    58   934     9    58  1002     0      19  return
 42453    58   934    16    58  1002     0     111  hb
 42454    58   934    18    58  1002     0     102  ;
 42455    58   935     5    58  1002     0      64  }
 42456    58   935     5    58  1002     0    2360  ENDMETHOD
 42457    58   935     5    58  1003     0    2361  STARTMETHOD
 42458    58   957    18    58  1003     0      36  int
 42459    58   957    22    58  1003     0     111  arrayOffset
 42460    58   957    33    58  1003     0      59  (
 42461    58   957    34    58  1003     0      60  )
 42462    58   957    36    58  1003     0      63  {
 42463    58   958     9    58  1003     0      31  if
 42464    58   958    12    58  1003     0      59  (
 42465    58   958    13    58  1003     0     111  hb
 42466    58   958    16    58  1003     0      68  ==
 42467    58   958    19    58  1003     0      21  null
 42468    58   958    23    58  1003     0      60  )
 42469    58   959    13    58  1003     0      20  throw
 42470    58   959    23    58  1003     0     111  UnsupportedOperationException
 42471    58   959    52    58  1003     0      59  (
 42472    58   959    53    58  1003     0      60  )
 42473    58   959    54    58  1003     0     102  ;
 42474    58   960     9    58  1003     0      31  if
 42475    58   960    12    58  1003     0      59  (
 42476    58   960    13    58  1003     0     111  isReadOnly
 42477    58   960    23    58  1003     0      60  )
 42478    58   961    13    58  1003     0      20  throw
 42479    58   961    23    58  1003     0     111  ReadOnlyBufferException
 42480    58   961    46    58  1003     0      59  (
 42481    58   961    47    58  1003     0      60  )
 42482    58   961    48    58  1003     0     102  ;
 42483    58   962     9    58  1003     0      19  return
 42484    58   962    16    58  1003     0     111  offset
 42485    58   962    22    58  1003     0     102  ;
 42486    58   963     5    58  1003     0      64  }
 42487    58   963     5    58  1003     0    2362  ENDMETHOD
 42488    58  1004    21    58    -1     0     111  FloatBuffer
 42489    58  1004    33    58    -1     0     111  compact
 42490    58  1004    40    58    -1     0      59  (
 42491    58  1004    41    58    -1     0      60  )
 42492    58  1004    42    58    -1     0     102  ;
 42493    58  1011    21    58    -1     0      39  boolean
 42494    58  1011    29    58    -1     0     111  isDirect
 42495    58  1011    37    58    -1     0      59  (
 42496    58  1011    38    58    -1     0      60  )
 42497    58  1011    39    58    -1     0     102  ;
 42498    58  1011    39    58  1004     0    2363  STARTMETHOD
 42499    58  1020    12    58  1004     0     111  String
 42500    58  1020    19    58  1004     0     111  toString
 42501    58  1020    27    58  1004     0      59  (
 42502    58  1020    28    58  1004     0      60  )
 42503    58  1020    30    58  1004     0      63  {
 42504    58  1021     9    58  1004     0     111  StringBuffer
 42505    58  1021    22    58  1004     0     111  sb
 42506    58  1021    25    58  1004     0      67  =
 42507    58  1021    31    58  1004     0     111  StringBuffer
 42508    58  1021    43    58  1004     0      59  (
 42509    58  1021    44    58  1004     0      60  )
 42510    58  1021    45    58  1004     0     102  ;
 42511    58  1022     9    58  1004     0     111  sb.append
 42512    58  1022    18    58  1004     0      59  (
 42513    58  1022    19    58  1004     0     111  getClass
 42514    58  1022    27    58  1004     0      59  (
 42515    58  1022    28    58  1004     0      60  )
 42516    58  1022    29    58  1004     0      54  .
 42517    58  1022    30    58  1004     0     111  getName
 42518    58  1022    37    58  1004     0      59  (
 42519    58  1022    38    58  1004     0      60  )
 42520    58  1022    39    58  1004     0      60  )
 42521    58  1022    40    58  1004     0     102  ;
 42522    58  1023     9    58  1004     0     111  sb.append
 42523    58  1023    18    58  1004     0      59  (
 42524    58  1023    19    58  1004     0     107  "[pos="
 42525    58  1023    26    58  1004     0      60  )
 42526    58  1023    27    58  1004     0     102  ;
 42527    58  1024     9    58  1004     0     111  sb.append
 42528    58  1024    18    58  1004     0      59  (
 42529    58  1024    19    58  1004     0     111  position
 42530    58  1024    27    58  1004     0      59  (
 42531    58  1024    28    58  1004     0      60  )
 42532    58  1024    29    58  1004     0      60  )
 42533    58  1024    30    58  1004     0     102  ;
 42534    58  1025     9    58  1004     0     111  sb.append
 42535    58  1025    18    58  1004     0      59  (
 42536    58  1025    19    58  1004     0     107  " lim="
 42537    58  1025    26    58  1004     0      60  )
 42538    58  1025    27    58  1004     0     102  ;
 42539    58  1026     9    58  1004     0     111  sb.append
 42540    58  1026    18    58  1004     0      59  (
 42541    58  1026    19    58  1004     0     111  limit
 42542    58  1026    24    58  1004     0      59  (
 42543    58  1026    25    58  1004     0      60  )
 42544    58  1026    26    58  1004     0      60  )
 42545    58  1026    27    58  1004     0     102  ;
 42546    58  1027     9    58  1004     0     111  sb.append
 42547    58  1027    18    58  1004     0      59  (
 42548    58  1027    19    58  1004     0     107  " cap="
 42549    58  1027    26    58  1004     0      60  )
 42550    58  1027    27    58  1004     0     102  ;
 42551    58  1028     9    58  1004     0     111  sb.append
 42552    58  1028    18    58  1004     0      59  (
 42553    58  1028    19    58  1004     0     111  capacity
 42554    58  1028    27    58  1004     0      59  (
 42555    58  1028    28    58  1004     0      60  )
 42556    58  1028    29    58  1004     0      60  )
 42557    58  1028    30    58  1004     0     102  ;
 42558    58  1029     9    58  1004     0     111  sb.append
 42559    58  1029    18    58  1004     0      59  (
 42560    58  1029    19    58  1004     0     107  "]"
 42561    58  1029    22    58  1004     0      60  )
 42562    58  1029    23    58  1004     0     102  ;
 42563    58  1030     9    58  1004     0      19  return
 42564    58  1030    16    58  1004     0     111  sb.toString
 42565    58  1030    27    58  1004     0      59  (
 42566    58  1030    28    58  1004     0      60  )
 42567    58  1030    29    58  1004     0     102  ;
 42568    58  1031     5    58  1004     0      64  }
 42569    58  1031     5    58  1004     0    2364  ENDMETHOD
 42570    58  1031     5    58  1005     0    2365  STARTMETHOD
 42571    58  1051    12    58  1005     0      36  int
 42572    58  1051    16    58  1005     0     111  hashCode
 42573    58  1051    24    58  1005     0      59  (
 42574    58  1051    25    58  1005     0      60  )
 42575    58  1051    27    58  1005     0      63  {
 42576    58  1052     9    58  1005     0      36  int
 42577    58  1052    13    58  1005     0     111  h
 42578    58  1052    15    58  1005     0      67  =
 42579    58  1052    17    58  1005     0     112  1
 42580    58  1052    18    58  1005     0     102  ;
 42581    58  1053     9    58  1005     0      36  int
 42582    58  1053    13    58  1005     0     111  p
 42583    58  1053    15    58  1005     0      67  =
 42584    58  1053    17    58  1005     0     111  position
 42585    58  1053    25    58  1005     0      59  (
 42586    58  1053    26    58  1005     0      60  )
 42587    58  1053    27    58  1005     0     102  ;
 42588    58  1054     9    58  1005     0      37  for
 42589    58  1054    13    58  1005     0      59  (
 42590    58  1054    14    58  1005     0      36  int
 42591    58  1054    18    58  1005     0     111  i
 42592    58  1054    20    58  1005     0      67  =
 42593    58  1054    22    58  1005     0     111  limit
 42594    58  1054    27    58  1005     0      59  (
 42595    58  1054    28    58  1005     0      60  )
 42596    58  1054    30    58  1005     0      77  -
 42597    58  1054    32    58  1005     0     112  1
 42598    58  1054    33    58  1005     0     102  ;
 42599    58  1054    35    58  1005     0     111  i
 42600    58  1054    37    58  1005     0      88  >=
 42601    58  1054    40    58  1005     0     111  p
 42602    58  1054    41    58  1005     0     102  ;
 42603    58  1054    43    58  1005     0     111  i
 42604    58  1054    44    58  1005     0      79  --
 42605    58  1054    46    58  1005     0      60  )
 42606    58  1055    13    58  1005     0     111  h
 42607    58  1055    15    58  1005     0      67  =
 42608    58  1055    17    58  1005     0     112  31
 42609    58  1055    20    58  1005     0      80  *
 42610    58  1055    22    58  1005     0     111  h
 42611    58  1055    24    58  1005     0      74  +
 42612    58  1055    26    58  1005     0      59  (
 42613    58  1055    27    58  1005     0      36  int
 42614    58  1055    30    58  1005     0      60  )
 42615    58  1055    31    58  1005     0     111  get
 42616    58  1055    34    58  1005     0      59  (
 42617    58  1055    35    58  1005     0     111  i
 42618    58  1055    36    58  1005     0      60  )
 42619    58  1055    37    58  1005     0     102  ;
 42620    58  1056     9    58  1005     0      19  return
 42621    58  1056    16    58  1005     0     111  h
 42622    58  1056    17    58  1005     0     102  ;
 42623    58  1057     5    58  1005     0      64  }
 42624    58  1057     5    58  1005     0    2366  ENDMETHOD
 42625    58  1057     5    58  1006     0    2367  STARTMETHOD
 42626    58  1084    12    58  1006     0      39  boolean
 42627    58  1084    20    58  1006     0     111  equals
 42628    58  1084    26    58  1006     0      59  (
 42629    58  1084    27    58  1006     0     111  Object
 42630    58  1084    34    58  1006     0     111  ob
 42631    58  1084    36    58  1006     0      60  )
 42632    58  1084    38    58  1006     0      63  {
 42633    58  1085     9    58  1006     0      31  if
 42634    58  1085    12    58  1006     0      59  (
 42635    58  1085    13    58  1006     0      44  this
 42636    58  1085    18    58  1006     0      68  ==
 42637    58  1085    21    58  1006     0     111  ob
 42638    58  1085    23    58  1006     0      60  )
 42639    58  1086    13    58  1006     0      19  return
 42640    58  1086    20    58  1006     0      52  true
 42641    58  1086    24    58  1006     0     102  ;
 42642    58  1087     9    58  1006     0      31  if
 42643    58  1087    12    58  1006     0      59  (
 42644    58  1087    13    58  1006     0      69  !
 42645    58  1087    14    58  1006     0      59  (
 42646    58  1087    15    58  1006     0     111  ob
 42647    58  1087    29    58  1006     0     111  FloatBuffer
 42648    58  1087    40    58  1006     0      60  )
 42649    58  1087    41    58  1006     0      60  )
 42650    58  1088    13    58  1006     0      19  return
 42651    58  1088    20    58  1006     0      43  false
 42652    58  1088    25    58  1006     0     102  ;
 42653    58  1089     9    58  1006     0     111  FloatBuffer
 42654    58  1089    21    58  1006     0     111  that
 42655    58  1089    26    58  1006     0      67  =
 42656    58  1089    28    58  1006     0      59  (
 42657    58  1089    29    58  1006     0     111  FloatBuffer
 42658    58  1089    40    58  1006     0      60  )
 42659    58  1089    41    58  1006     0     111  ob
 42660    58  1089    43    58  1006     0     102  ;
 42661    58  1090     9    58  1006     0      31  if
 42662    58  1090    12    58  1006     0      59  (
 42663    58  1090    13    58  1006     0     111  this.remaining
 42664    58  1090    27    58  1006     0      59  (
 42665    58  1090    28    58  1006     0      60  )
 42666    58  1090    30    58  1006     0      71  !=
 42667    58  1090    33    58  1006     0     111  that.remaining
 42668    58  1090    47    58  1006     0      59  (
 42669    58  1090    48    58  1006     0      60  )
 42670    58  1090    49    58  1006     0      60  )
 42671    58  1091    13    58  1006     0      19  return
 42672    58  1091    20    58  1006     0      43  false
 42673    58  1091    25    58  1006     0     102  ;
 42674    58  1092     9    58  1006     0      36  int
 42675    58  1092    13    58  1006     0     111  p
 42676    58  1092    15    58  1006     0      67  =
 42677    58  1092    17    58  1006     0     111  this.position
 42678    58  1092    30    58  1006     0      59  (
 42679    58  1092    31    58  1006     0      60  )
 42680    58  1092    32    58  1006     0     102  ;
 42681    58  1093     9    58  1006     0      37  for
 42682    58  1093    13    58  1006     0      59  (
 42683    58  1093    14    58  1006     0      36  int
 42684    58  1093    18    58  1006     0     111  i
 42685    58  1093    20    58  1006     0      67  =
 42686    58  1093    22    58  1006     0     111  this.limit
 42687    58  1093    32    58  1006     0      59  (
 42688    58  1093    33    58  1006     0      60  )
 42689    58  1093    35    58  1006     0      77  -
 42690    58  1093    37    58  1006     0     112  1
 42691    58  1093    38    58  1006     0      66  ,
 42692    58  1093    40    58  1006     0     111  j
 42693    58  1093    42    58  1006     0      67  =
 42694    58  1093    44    58  1006     0     111  that.limit
 42695    58  1093    54    58  1006     0      59  (
 42696    58  1093    55    58  1006     0      60  )
 42697    58  1093    57    58  1006     0      77  -
 42698    58  1093    59    58  1006     0     112  1
 42699    58  1093    60    58  1006     0     102  ;
 42700    58  1093    62    58  1006     0     111  i
 42701    58  1093    64    58  1006     0      88  >=
 42702    58  1093    67    58  1006     0     111  p
 42703    58  1093    68    58  1006     0     102  ;
 42704    58  1093    70    58  1006     0     111  i
 42705    58  1093    71    58  1006     0      79  --
 42706    58  1093    73    58  1006     0      66  ,
 42707    58  1093    75    58  1006     0     111  j
 42708    58  1093    76    58  1006     0      79  --
 42709    58  1093    78    58  1006     0      60  )
 42710    58  1093    80    58  1006     0      63  {
 42711    58  1094    19    58  1006     1     111  v1
 42712    58  1094    22    58  1006     1      67  =
 42713    58  1094    24    58  1006     1     111  this.get
 42714    58  1094    32    58  1006     1      59  (
 42715    58  1094    33    58  1006     1     111  i
 42716    58  1094    34    58  1006     1      60  )
 42717    58  1094    35    58  1006     1     102  ;
 42718    58  1095    19    58  1006     1     111  v2
 42719    58  1095    22    58  1006     1      67  =
 42720    58  1095    24    58  1006     1     111  that.get
 42721    58  1095    32    58  1006     1      59  (
 42722    58  1095    33    58  1006     1     111  j
 42723    58  1095    34    58  1006     1      60  )
 42724    58  1095    35    58  1006     1     102  ;
 42725    58  1096    13    58  1006     0      31  if
 42726    58  1096    16    58  1006     0      59  (
 42727    58  1096    17    58  1006     0     111  v1
 42728    58  1096    20    58  1006     0      71  !=
 42729    58  1096    23    58  1006     0     111  v2
 42730    58  1096    25    58  1006     0      60  )
 42731    58  1096    27    58  1006     0      63  {
 42732    58  1097    17    58  1006     0      31  if
 42733    58  1097    20    58  1006     0      59  (
 42734    58  1097    21    58  1006     0      59  (
 42735    58  1097    22    58  1006     0     111  v1
 42736    58  1097    25    58  1006     0      71  !=
 42737    58  1097    28    58  1006     0     111  v1
 42738    58  1097    30    58  1006     0      60  )
 42739    58  1097    32    58  1006     0     101  &&
 42740    58  1097    35    58  1006     0      59  (
 42741    58  1097    36    58  1006     0     111  v2
 42742    58  1097    39    58  1006     0      71  !=
 42743    58  1097    42    58  1006     0     111  v2
 42744    58  1097    44    58  1006     0      60  )
 42745    58  1097    45    58  1006     0      60  )
 42746    58  1098    21    58  1006     0      46  continue
 42747    58  1098    29    58  1006     0     102  ;
 42748    58  1099    17    58  1006     0      19  return
 42749    58  1099    24    58  1006     0      43  false
 42750    58  1099    29    58  1006     0     102  ;
 42751    58  1100    13    58  1006     1      64  }
 42752    58  1101     9    58  1006     1      64  }
 42753    58  1102     9    58  1006     0      19  return
 42754    58  1102    16    58  1006     0      52  true
 42755    58  1102    20    58  1006     0     102  ;
 42756    58  1103     5    58  1006     0      64  }
 42757    58  1103     5    58  1006     0    2368  ENDMETHOD
 42758    58  1103     5    58  1007     0    2369  STARTMETHOD
 42759    58  1117    12    58  1007     0      36  int
 42760    58  1117    16    58  1007     0     111  compareTo
 42761    58  1117    25    58  1007     0      59  (
 42762    58  1117    26    58  1007     0     111  FloatBuffer
 42763    58  1117    38    58  1007     0     111  that
 42764    58  1117    42    58  1007     0      60  )
 42765    58  1117    44    58  1007     0      63  {
 42766    58  1118     9    58  1007     0      36  int
 42767    58  1118    13    58  1007     0     111  n
 42768    58  1118    15    58  1007     0      67  =
 42769    58  1118    17    58  1007     0     111  this.position
 42770    58  1118    30    58  1007     0      59  (
 42771    58  1118    31    58  1007     0      60  )
 42772    58  1118    33    58  1007     0      74  +
 42773    58  1118    35    58  1007     0     111  Math.min
 42774    58  1118    43    58  1007     0      59  (
 42775    58  1118    44    58  1007     0     111  this.remaining
 42776    58  1118    58    58  1007     0      59  (
 42777    58  1118    59    58  1007     0      60  )
 42778    58  1118    60    58  1007     0      66  ,
 42779    58  1118    62    58  1007     0     111  that.remaining
 42780    58  1118    76    58  1007     0      59  (
 42781    58  1118    77    58  1007     0      60  )
 42782    58  1118    78    58  1007     0      60  )
 42783    58  1118    79    58  1007     0     102  ;
 42784    58  1119     9    58  1007     0      37  for
 42785    58  1119    13    58  1007     0      59  (
 42786    58  1119    14    58  1007     0      36  int
 42787    58  1119    18    58  1007     0     111  i
 42788    58  1119    20    58  1007     0      67  =
 42789    58  1119    22    58  1007     0     111  this.position
 42790    58  1119    35    58  1007     0      59  (
 42791    58  1119    36    58  1007     0      60  )
 42792    58  1119    37    58  1007     0      66  ,
 42793    58  1119    39    58  1007     0     111  j
 42794    58  1119    41    58  1007     0      67  =
 42795    58  1119    43    58  1007     0     111  that.position
 42796    58  1119    56    58  1007     0      59  (
 42797    58  1119    57    58  1007     0      60  )
 42798    58  1119    58    58  1007     0     102  ;
 42799    58  1119    60    58  1007     0     111  i
 42800    58  1119    62    58  1007     0      93  <
 42801    58  1119    64    58  1007     0     111  n
 42802    58  1119    65    58  1007     0     102  ;
 42803    58  1119    67    58  1007     0     111  i
 42804    58  1119    68    58  1007     0      76  ++
 42805    58  1119    70    58  1007     0      66  ,
 42806    58  1119    72    58  1007     0     111  j
 42807    58  1119    73    58  1007     0      76  ++
 42808    58  1119    75    58  1007     0      60  )
 42809    58  1119    77    58  1007     0      63  {
 42810    58  1120    19    58  1007     1     111  v1
 42811    58  1120    22    58  1007     1      67  =
 42812    58  1120    24    58  1007     1     111  this.get
 42813    58  1120    32    58  1007     1      59  (
 42814    58  1120    33    58  1007     1     111  i
 42815    58  1120    34    58  1007     1      60  )
 42816    58  1120    35    58  1007     1     102  ;
 42817    58  1121    19    58  1007     1     111  v2
 42818    58  1121    22    58  1007     1      67  =
 42819    58  1121    24    58  1007     1     111  that.get
 42820    58  1121    32    58  1007     1      59  (
 42821    58  1121    33    58  1007     1     111  j
 42822    58  1121    34    58  1007     1      60  )
 42823    58  1121    35    58  1007     1     102  ;
 42824    58  1122    13    58  1007     0      31  if
 42825    58  1122    16    58  1007     0      59  (
 42826    58  1122    17    58  1007     0     111  v1
 42827    58  1122    20    58  1007     0      68  ==
 42828    58  1122    23    58  1007     0     111  v2
 42829    58  1122    25    58  1007     0      60  )
 42830    58  1123    17    58  1007     0      46  continue
 42831    58  1123    25    58  1007     0     102  ;
 42832    58  1124    13    58  1007     0      31  if
 42833    58  1124    16    58  1007     0      59  (
 42834    58  1124    17    58  1007     0      59  (
 42835    58  1124    18    58  1007     0     111  v1
 42836    58  1124    21    58  1007     0      71  !=
 42837    58  1124    24    58  1007     0     111  v1
 42838    58  1124    26    58  1007     0      60  )
 42839    58  1124    28    58  1007     0     101  &&
 42840    58  1124    31    58  1007     0      59  (
 42841    58  1124    32    58  1007     0     111  v2
 42842    58  1124    35    58  1007     0      71  !=
 42843    58  1124    38    58  1007     0     111  v2
 42844    58  1124    40    58  1007     0      60  )
 42845    58  1124    41    58  1007     0      60  )
 42846    58  1125    17    58  1007     0      46  continue
 42847    58  1125    25    58  1007     0     102  ;
 42848    58  1126    13    58  1007     0      31  if
 42849    58  1126    16    58  1007     0      59  (
 42850    58  1126    17    58  1007     0     111  v1
 42851    58  1126    20    58  1007     0      93  <
 42852    58  1126    22    58  1007     0     111  v2
 42853    58  1126    24    58  1007     0      60  )
 42854    58  1127    17    58  1007     0      19  return
 42855    58  1127    24    58  1007     0      77  -
 42856    58  1127    25    58  1007     0     112  1
 42857    58  1127    26    58  1007     0     102  ;
 42858    58  1128    13    58  1007     0      19  return
 42859    58  1128    20    58  1007     0      74  +
 42860    58  1128    21    58  1007     0     112  1
 42861    58  1128    22    58  1007     0     102  ;
 42862    58  1129     9    58  1007     0      64  }
 42863    58  1130     9    58  1007     0      19  return
 42864    58  1130    16    58  1007     0     111  this.remaining
 42865    58  1130    30    58  1007     0      59  (
 42866    58  1130    31    58  1007     0      60  )
 42867    58  1130    33    58  1007     0      77  -
 42868    58  1130    35    58  1007     0     111  that.remaining
 42869    58  1130    49    58  1007     0      59  (
 42870    58  1130    50    58  1007     0      60  )
 42871    58  1130    51    58  1007     0     102  ;
 42872    58  1131     5    58  1007     0      64  }
 42873    58  1131     5    58  1007     0    2370  ENDMETHOD
 42874    58  1346    21    58    -1     0     111  ByteOrder
 42875    58  1346    31    58    -1     0     111  order
 42876    58  1346    36    58    -1     0      59  (
 42877    58  1346    37    58    -1     0      60  )
 42878    58  1346    38    58    -1     0     102  ;
 42879    58  1400     1    58    -1     0      64  }
 42880    58  1400     1    58    -1     1    2371  ENDCLASS
 42881    58  1400     1    -1    -1     1    2372  ENDFILE C:\Users\RA\javasrc\java\nio\FloatBuffer.java
 42882    59     1     1    -1    -1     1    2373  STARTFILE C:\Users\RA\javasrc\java\nio\HeapByteBuffer.java
 42883    59    28     9    -1    -1     0     111  java.nio
 42884    59    28    17    -1    -1     0     102  ;
 42885    59    42     1    59    -1     0    2374  STARTCLASS
 42886    59    42     1    59    -1     0      24  class
 42887    59    42     7    59    -1     0     111  HeapByteBuffer
 42888    59    43     5    59    -1     0      38  extends
 42889    59    43    13    59    -1     0     111  ByteBuffer
 42890    59    44     1    59    -1     0      63  {
 42891    59    44     1    59  1008     0    2375  STARTMETHOD
 42892    59    55     5    59  1008     0     111  HeapByteBuffer
 42893    59    55    19    59  1008     0      59  (
 42894    59    55    20    59  1008     0      36  int
 42895    59    55    24    59  1008     0     111  cap
 42896    59    55    27    59  1008     0      66  ,
 42897    59    55    29    59  1008     0      36  int
 42898    59    55    33    59  1008     0     111  lim
 42899    59    55    36    59  1008     0      60  )
 42900    59    55    38    59  1008     0      63  {
 42901    59    57     9    59  1008     0      27  super
 42902    59    57    14    59  1008     0      59  (
 42903    59    57    15    59  1008     0      77  -
 42904    59    57    16    59  1008     0     112  1
 42905    59    57    17    59  1008     0      66  ,
 42906    59    57    19    59  1008     0     112  0
 42907    59    57    20    59  1008     0      66  ,
 42908    59    57    22    59  1008     0     111  lim
 42909    59    57    25    59  1008     0      66  ,
 42910    59    57    27    59  1008     0     111  cap
 42911    59    57    30    59  1008     0      66  ,
 42912    59    57    40    59  1008     0      61  [
 42913    59    57    41    59  1008     0     111  cap
 42914    59    57    44    59  1008     0      62  ]
 42915    59    57    45    59  1008     0      66  ,
 42916    59    57    47    59  1008     0     112  0
 42917    59    57    48    59  1008     0      60  )
 42918    59    57    49    59  1008     0     102  ;
 42919    59    66     5    59  1008     0      64  }
 42920    59    66     5    59  1008     0    2376  ENDMETHOD
 42921    59    66     5    59  1009     0    2377  STARTMETHOD
 42922    59    68     5    59  1009     0     111  HeapByteBuffer
 42923    59    68    19    59  1009     0      59  (
 42924    59    68    24    59  1009     0      61  [
 42925    59    68    25    59  1009     0      62  ]
 42926    59    68    27    59  1009     0     111  buf
 42927    59    68    30    59  1009     0      66  ,
 42928    59    68    32    59  1009     0      36  int
 42929    59    68    36    59  1009     0     111  off
 42930    59    68    39    59  1009     0      66  ,
 42931    59    68    41    59  1009     0      36  int
 42932    59    68    45    59  1009     0     111  len
 42933    59    68    48    59  1009     0      60  )
 42934    59    68    50    59  1009     0      63  {
 42935    59    70     9    59  1009     0      27  super
 42936    59    70    14    59  1009     0      59  (
 42937    59    70    15    59  1009     0      77  -
 42938    59    70    16    59  1009     0     112  1
 42939    59    70    17    59  1009     0      66  ,
 42940    59    70    19    59  1009     0     111  off
 42941    59    70    22    59  1009     0      66  ,
 42942    59    70    24    59  1009     0     111  off
 42943    59    70    28    59  1009     0      74  +
 42944    59    70    30    59  1009     0     111  len
 42945    59    70    33    59  1009     0      66  ,
 42946    59    70    35    59  1009     0     111  buf.length
 42947    59    70    45    59  1009     0      66  ,
 42948    59    70    47    59  1009     0     111  buf
 42949    59    70    50    59  1009     0      66  ,
 42950    59    70    52    59  1009     0     112  0
 42951    59    70    53    59  1009     0      60  )
 42952    59    70    54    59  1009     0     102  ;
 42953    59    79     5    59  1009     0      64  }
 42954    59    79     5    59  1009     0    2378  ENDMETHOD
 42955    59    79     5    59  1010     0    2379  STARTMETHOD
 42956    59    81     5    59  1010     0      23  protected
 42957    59    81    15    59  1010     0     111  HeapByteBuffer
 42958    59    81    29    59  1010     0      59  (
 42959    59    81    34    59  1010     0      61  [
 42960    59    81    35    59  1010     0      62  ]
 42961    59    81    37    59  1010     0     111  buf
 42962    59    81    40    59  1010     0      66  ,
 42963    59    82    36    59  1010     0      36  int
 42964    59    82    40    59  1010     0     111  mark
 42965    59    82    44    59  1010     0      66  ,
 42966    59    82    46    59  1010     0      36  int
 42967    59    82    50    59  1010     0     111  pos
 42968    59    82    53    59  1010     0      66  ,
 42969    59    82    55    59  1010     0      36  int
 42970    59    82    59    59  1010     0     111  lim
 42971    59    82    62    59  1010     0      66  ,
 42972    59    82    64    59  1010     0      36  int
 42973    59    82    68    59  1010     0     111  cap
 42974    59    82    71    59  1010     0      66  ,
 42975    59    83    36    59  1010     0      36  int
 42976    59    83    40    59  1010     0     111  off
 42977    59    83    43    59  1010     0      60  )
 42978    59    84     5    59  1010     0      63  {
 42979    59    86     9    59  1010     0      27  super
 42980    59    86    14    59  1010     0      59  (
 42981    59    86    15    59  1010     0     111  mark
 42982    59    86    19    59  1010     0      66  ,
 42983    59    86    21    59  1010     0     111  pos
 42984    59    86    24    59  1010     0      66  ,
 42985    59    86    26    59  1010     0     111  lim
 42986    59    86    29    59  1010     0      66  ,
 42987    59    86    31    59  1010     0     111  cap
 42988    59    86    34    59  1010     0      66  ,
 42989    59    86    36    59  1010     0     111  buf
 42990    59    86    39    59  1010     0      66  ,
 42991    59    86    41    59  1010     0     111  off
 42992    59    86    44    59  1010     0      60  )
 42993    59    86    45    59  1010     0     102  ;
 42994    59    95     5    59  1010     0      64  }
 42995    59    95     5    59  1010     0    2380  ENDMETHOD
 42996    59    95     5    59  1011     0    2381  STARTMETHOD
 42997    59    97    12    59  1011     0     111  ByteBuffer
 42998    59    97    23    59  1011     0     111  slice
 42999    59    97    28    59  1011     0      59  (
 43000    59    97    29    59  1011     0      60  )
 43001    59    97    31    59  1011     0      63  {
 43002    59    98     9    59  1011     0      19  return
 43003    59    98    20    59  1011     0     111  HeapByteBuffer
 43004    59    98    34    59  1011     0      59  (
 43005    59    98    35    59  1011     0     111  hb
 43006    59    98    37    59  1011     0      66  ,
 43007    59    99    41    59  1011     0      77  -
 43008    59    99    42    59  1011     0     112  1
 43009    59    99    43    59  1011     0      66  ,
 43010    59   100    41    59  1011     0     112  0
 43011    59   100    42    59  1011     0      66  ,
 43012    59   101    41    59  1011     1     111  this.remaining
 43013    59   101    55    59  1011     1      59  (
 43014    59   101    56    59  1011     1      60  )
 43015    59   101    57    59  1011     1      66  ,
 43016    59   102    41    59  1011     1     111  this.remaining
 43017    59   102    55    59  1011     1      59  (
 43018    59   102    56    59  1011     1      60  )
 43019    59   102    57    59  1011     1      66  ,
 43020    59   103    41    59  1011     0     111  this.position
 43021    59   103    54    59  1011     0      59  (
 43022    59   103    55    59  1011     0      60  )
 43023    59   103    57    59  1011     0      74  +
 43024    59   103    59    59  1011     0     111  offset
 43025    59   103    65    59  1011     0      60  )
 43026    59   103    66    59  1011     0     102  ;
 43027    59   104     5    59  1011     0      64  }
 43028    59   104     5    59  1011     0    2382  ENDMETHOD
 43029    59   104     5    59  1012     0    2383  STARTMETHOD
 43030    59   106    12    59  1012     0     111  ByteBuffer
 43031    59   106    23    59  1012     0     111  duplicate
 43032    59   106    32    59  1012     0      59  (
 43033    59   106    33    59  1012     0      60  )
 43034    59   106    35    59  1012     0      63  {
 43035    59   107     9    59  1012     0      19  return
 43036    59   107    20    59  1012     0     111  HeapByteBuffer
 43037    59   107    34    59  1012     0      59  (
 43038    59   107    35    59  1012     0     111  hb
 43039    59   107    37    59  1012     0      66  ,
 43040    59   108    41    59  1012     1     111  this.markValue
 43041    59   108    55    59  1012     1      59  (
 43042    59   108    56    59  1012     1      60  )
 43043    59   108    57    59  1012     1      66  ,
 43044    59   109    41    59  1012     1     111  this.position
 43045    59   109    54    59  1012     1      59  (
 43046    59   109    55    59  1012     1      60  )
 43047    59   109    56    59  1012     1      66  ,
 43048    59   110    41    59  1012     1     111  this.limit
 43049    59   110    51    59  1012     1      59  (
 43050    59   110    52    59  1012     1      60  )
 43051    59   110    53    59  1012     1      66  ,
 43052    59   111    41    59  1012     1     111  this.capacity
 43053    59   111    54    59  1012     1      59  (
 43054    59   111    55    59  1012     1      60  )
 43055    59   111    56    59  1012     1      66  ,
 43056    59   112    41    59  1012     0     111  offset
 43057    59   112    47    59  1012     0      60  )
 43058    59   112    48    59  1012     0     102  ;
 43059    59   113     5    59  1012     0      64  }
 43060    59   113     5    59  1012     0    2384  ENDMETHOD
 43061    59   113     5    59  1013     0    2385  STARTMETHOD
 43062    59   115    12    59  1013     0     111  ByteBuffer
 43063    59   115    23    59  1013     0     111  asReadOnlyBuffer
 43064    59   115    39    59  1013     0      59  (
 43065    59   115    40    59  1013     0      60  )
 43066    59   115    42    59  1013     0      63  {
 43067    59   117     9    59  1013     0      19  return
 43068    59   117    20    59  1013     0     111  HeapByteBufferR
 43069    59   117    35    59  1013     0      59  (
 43070    59   117    36    59  1013     0     111  hb
 43071    59   117    38    59  1013     0      66  ,
 43072    59   118    38    59  1013     1     111  this.markValue
 43073    59   118    52    59  1013     1      59  (
 43074    59   118    53    59  1013     1      60  )
 43075    59   118    54    59  1013     1      66  ,
 43076    59   119    38    59  1013     1     111  this.position
 43077    59   119    51    59  1013     1      59  (
 43078    59   119    52    59  1013     1      60  )
 43079    59   119    53    59  1013     1      66  ,
 43080    59   120    38    59  1013     1     111  this.limit
 43081    59   120    48    59  1013     1      59  (
 43082    59   120    49    59  1013     1      60  )
 43083    59   120    50    59  1013     1      66  ,
 43084    59   121    38    59  1013     1     111  this.capacity
 43085    59   121    51    59  1013     1      59  (
 43086    59   121    52    59  1013     1      60  )
 43087    59   121    53    59  1013     1      66  ,
 43088    59   122    38    59  1013     0     111  offset
 43089    59   122    44    59  1013     0      60  )
 43090    59   122    45    59  1013     0     102  ;
 43091    59   126     5    59  1013     0      64  }
 43092    59   126     5    59  1013     0    2386  ENDMETHOD
 43093    59   126     5    59  1014     0    2387  STARTMETHOD
 43094    59   130     5    59  1014     0      23  protected
 43095    59   130    15    59  1014     0      36  int
 43096    59   130    19    59  1014     0     111  ix
 43097    59   130    21    59  1014     0      59  (
 43098    59   130    22    59  1014     0      36  int
 43099    59   130    26    59  1014     0     111  i
 43100    59   130    27    59  1014     0      60  )
 43101    59   130    29    59  1014     0      63  {
 43102    59   131     9    59  1014     0      19  return
 43103    59   131    16    59  1014     0     111  i
 43104    59   131    18    59  1014     0      74  +
 43105    59   131    20    59  1014     0     111  offset
 43106    59   131    26    59  1014     0     102  ;
 43107    59   132     5    59  1014     0      64  }
 43108    59   132     5    59  1014     0    2388  ENDMETHOD
 43109    59   132     5    59  1015     0    2389  STARTMETHOD
 43110    59   134    17    59  1015     0     111  get
 43111    59   134    20    59  1015     0      59  (
 43112    59   134    21    59  1015     0      60  )
 43113    59   134    23    59  1015     0      63  {
 43114    59   135     9    59  1015     0      19  return
 43115    59   135    16    59  1015     0     111  hb
 43116    59   135    18    59  1015     0      61  [
 43117    59   135    19    59  1015     0     111  ix
 43118    59   135    21    59  1015     0      59  (
 43119    59   135    22    59  1015     0     111  nextGetIndex
 43120    59   135    34    59  1015     0      59  (
 43121    59   135    35    59  1015     0      60  )
 43122    59   135    36    59  1015     0      60  )
 43123    59   135    37    59  1015     0      62  ]
 43124    59   135    38    59  1015     0     102  ;
 43125    59   136     5    59  1015     0      64  }
 43126    59   136     5    59  1015     0    2390  ENDMETHOD
 43127    59   136     5    59  1016     0    2391  STARTMETHOD
 43128    59   138    17    59  1016     0     111  get
 43129    59   138    20    59  1016     0      59  (
 43130    59   138    21    59  1016     0      36  int
 43131    59   138    25    59  1016     0     111  i
 43132    59   138    26    59  1016     0      60  )
 43133    59   138    28    59  1016     0      63  {
 43134    59   139     9    59  1016     0      19  return
 43135    59   139    16    59  1016     0     111  hb
 43136    59   139    18    59  1016     0      61  [
 43137    59   139    19    59  1016     0     111  ix
 43138    59   139    21    59  1016     0      59  (
 43139    59   139    22    59  1016     0     111  checkIndex
 43140    59   139    32    59  1016     0      59  (
 43141    59   139    33    59  1016     0     111  i
 43142    59   139    34    59  1016     0      60  )
 43143    59   139    35    59  1016     0      60  )
 43144    59   139    36    59  1016     0      62  ]
 43145    59   139    37    59  1016     0     102  ;
 43146    59   140     5    59  1016     0      64  }
 43147    59   140     5    59  1016     0    2392  ENDMETHOD
 43148    59   140     5    59  1017     0    2393  STARTMETHOD
 43149    59   142    12    59  1017     0     111  ByteBuffer
 43150    59   142    23    59  1017     0     111  get
 43151    59   142    26    59  1017     0      59  (
 43152    59   142    31    59  1017     0      61  [
 43153    59   142    32    59  1017     0      62  ]
 43154    59   142    34    59  1017     0     111  dst
 43155    59   142    37    59  1017     0      66  ,
 43156    59   142    39    59  1017     0      36  int
 43157    59   142    43    59  1017     0     111  offset
 43158    59   142    49    59  1017     0      66  ,
 43159    59   142    51    59  1017     0      36  int
 43160    59   142    55    59  1017     0     111  length
 43161    59   142    61    59  1017     0      60  )
 43162    59   142    63    59  1017     0      63  {
 43163    59   143     9    59  1017     0     111  checkBounds
 43164    59   143    20    59  1017     0      59  (
 43165    59   143    21    59  1017     0     111  offset
 43166    59   143    27    59  1017     0      66  ,
 43167    59   143    29    59  1017     0     111  length
 43168    59   143    35    59  1017     0      66  ,
 43169    59   143    37    59  1017     0     111  dst.length
 43170    59   143    47    59  1017     0      60  )
 43171    59   143    48    59  1017     0     102  ;
 43172    59   144     9    59  1017     0      31  if
 43173    59   144    12    59  1017     0      59  (
 43174    59   144    13    59  1017     0     111  length
 43175    59   144    20    59  1017     0      89  >
 43176    59   144    22    59  1017     0     111  remaining
 43177    59   144    31    59  1017     0      59  (
 43178    59   144    32    59  1017     0      60  )
 43179    59   144    33    59  1017     0      60  )
 43180    59   145    13    59  1017     0      20  throw
 43181    59   145    23    59  1017     0     111  BufferUnderflowException
 43182    59   145    47    59  1017     0      59  (
 43183    59   145    48    59  1017     0      60  )
 43184    59   145    49    59  1017     0     102  ;
 43185    59   146     9    59  1017     0     111  System.arraycopy
 43186    59   146    25    59  1017     0      59  (
 43187    59   146    26    59  1017     0     111  hb
 43188    59   146    28    59  1017     0      66  ,
 43189    59   146    30    59  1017     0     111  ix
 43190    59   146    32    59  1017     0      59  (
 43191    59   146    33    59  1017     0     111  position
 43192    59   146    41    59  1017     0      59  (
 43193    59   146    42    59  1017     0      60  )
 43194    59   146    43    59  1017     0      60  )
 43195    59   146    44    59  1017     0      66  ,
 43196    59   146    46    59  1017     0     111  dst
 43197    59   146    49    59  1017     0      66  ,
 43198    59   146    51    59  1017     0     111  offset
 43199    59   146    57    59  1017     0      66  ,
 43200    59   146    59    59  1017     0     111  length
 43201    59   146    65    59  1017     0      60  )
 43202    59   146    66    59  1017     0     102  ;
 43203    59   147     9    59  1017     0     111  position
 43204    59   147    17    59  1017     0      59  (
 43205    59   147    18    59  1017     0     111  position
 43206    59   147    26    59  1017     0      59  (
 43207    59   147    27    59  1017     0      60  )
 43208    59   147    29    59  1017     0      74  +
 43209    59   147    31    59  1017     0     111  length
 43210    59   147    37    59  1017     0      60  )
 43211    59   147    38    59  1017     0     102  ;
 43212    59   148     9    59  1017     0      19  return
 43213    59   148    16    59  1017     0      44  this
 43214    59   148    20    59  1017     1     102  ;
 43215    59   149     5    59  1017     1      64  }
 43216    59   149     5    59  1017     0    2394  ENDMETHOD
 43217    59   149     5    59  1018     0    2395  STARTMETHOD
 43218    59   151    12    59  1018     0      39  boolean
 43219    59   151    20    59  1018     0     111  isDirect
 43220    59   151    28    59  1018     0      59  (
 43221    59   151    29    59  1018     0      60  )
 43222    59   151    31    59  1018     0      63  {
 43223    59   152     9    59  1018     0      19  return
 43224    59   152    16    59  1018     0      43  false
 43225    59   152    21    59  1018     1     102  ;
 43226    59   153     5    59  1018     1      64  }
 43227    59   153     5    59  1018     0    2396  ENDMETHOD
 43228    59   153     5    59  1019     0    2397  STARTMETHOD
 43229    59   157    12    59  1019     0      39  boolean
 43230    59   157    20    59  1019     0     111  isReadOnly
 43231    59   157    30    59  1019     0      59  (
 43232    59   157    31    59  1019     0      60  )
 43233    59   157    33    59  1019     0      63  {
 43234    59   158     9    59  1019     0      19  return
 43235    59   158    16    59  1019     0      43  false
 43236    59   158    21    59  1019     1     102  ;
 43237    59   159     5    59  1019     1      64  }
 43238    59   159     5    59  1019     0    2398  ENDMETHOD
 43239    59   159     5    59  1020     0    2399  STARTMETHOD
 43240    59   161    12    59  1020     0     111  ByteBuffer
 43241    59   161    23    59  1020     0     111  put
 43242    59   161    26    59  1020     0      59  (
 43243    59   161    32    59  1020     0     111  x
 43244    59   161    33    59  1020     0      60  )
 43245    59   161    35    59  1020     0      63  {
 43246    59   163     9    59  1020     0     111  hb
 43247    59   163    11    59  1020     0      61  [
 43248    59   163    12    59  1020     0     111  ix
 43249    59   163    14    59  1020     0      59  (
 43250    59   163    15    59  1020     0     111  nextPutIndex
 43251    59   163    27    59  1020     0      59  (
 43252    59   163    28    59  1020     0      60  )
 43253    59   163    29    59  1020     0      60  )
 43254    59   163    30    59  1020     0      62  ]
 43255    59   163    32    59  1020     0      67  =
 43256    59   163    34    59  1020     0     111  x
 43257    59   163    35    59  1020     0     102  ;
 43258    59   164     9    59  1020     0      19  return
 43259    59   164    16    59  1020     0      44  this
 43260    59   164    20    59  1020     0     102  ;
 43261    59   168     5    59  1020     0      64  }
 43262    59   168     5    59  1020     0    2400  ENDMETHOD
 43263    59   168     5    59  1021     0    2401  STARTMETHOD
 43264    59   170    12    59  1021     0     111  ByteBuffer
 43265    59   170    23    59  1021     0     111  put
 43266    59   170    26    59  1021     0      59  (
 43267    59   170    27    59  1021     0      36  int
 43268    59   170    31    59  1021     0     111  i
 43269    59   170    32    59  1021     0      66  ,
 43270    59   170    39    59  1021     0     111  x
 43271    59   170    40    59  1021     0      60  )
 43272    59   170    42    59  1021     0      63  {
 43273    59   172     9    59  1021     0     111  hb
 43274    59   172    11    59  1021     0      61  [
 43275    59   172    12    59  1021     0     111  ix
 43276    59   172    14    59  1021     0      59  (
 43277    59   172    15    59  1021     0     111  checkIndex
 43278    59   172    25    59  1021     0      59  (
 43279    59   172    26    59  1021     0     111  i
 43280    59   172    27    59  1021     0      60  )
 43281    59   172    28    59  1021     0      60  )
 43282    59   172    29    59  1021     0      62  ]
 43283    59   172    31    59  1021     0      67  =
 43284    59   172    33    59  1021     0     111  x
 43285    59   172    34    59  1021     0     102  ;
 43286    59   173     9    59  1021     0      19  return
 43287    59   173    16    59  1021     0      44  this
 43288    59   173    20    59  1021     0     102  ;
 43289    59   177     5    59  1021     0      64  }
 43290    59   177     5    59  1021     0    2402  ENDMETHOD
 43291    59   177     5    59  1022     0    2403  STARTMETHOD
 43292    59   179    12    59  1022     0     111  ByteBuffer
 43293    59   179    23    59  1022     0     111  put
 43294    59   179    26    59  1022     0      59  (
 43295    59   179    31    59  1022     0      61  [
 43296    59   179    32    59  1022     0      62  ]
 43297    59   179    34    59  1022     0     111  src
 43298    59   179    37    59  1022     0      66  ,
 43299    59   179    39    59  1022     0      36  int
 43300    59   179    43    59  1022     0     111  offset
 43301    59   179    49    59  1022     0      66  ,
 43302    59   179    51    59  1022     0      36  int
 43303    59   179    55    59  1022     0     111  length
 43304    59   179    61    59  1022     0      60  )
 43305    59   179    63    59  1022     0      63  {
 43306    59   181     9    59  1022     0     111  checkBounds
 43307    59   181    20    59  1022     0      59  (
 43308    59   181    21    59  1022     0     111  offset
 43309    59   181    27    59  1022     0      66  ,
 43310    59   181    29    59  1022     0     111  length
 43311    59   181    35    59  1022     0      66  ,
 43312    59   181    37    59  1022     0     111  src.length
 43313    59   181    47    59  1022     0      60  )
 43314    59   181    48    59  1022     0     102  ;
 43315    59   182     9    59  1022     0      31  if
 43316    59   182    12    59  1022     0      59  (
 43317    59   182    13    59  1022     0     111  length
 43318    59   182    20    59  1022     0      89  >
 43319    59   182    22    59  1022     0     111  remaining
 43320    59   182    31    59  1022     0      59  (
 43321    59   182    32    59  1022     0      60  )
 43322    59   182    33    59  1022     0      60  )
 43323    59   183    13    59  1022     0      20  throw
 43324    59   183    23    59  1022     0     111  BufferOverflowException
 43325    59   183    46    59  1022     0      59  (
 43326    59   183    47    59  1022     0      60  )
 43327    59   183    48    59  1022     0     102  ;
 43328    59   184     9    59  1022     0     111  System.arraycopy
 43329    59   184    25    59  1022     0      59  (
 43330    59   184    26    59  1022     0     111  src
 43331    59   184    29    59  1022     0      66  ,
 43332    59   184    31    59  1022     0     111  offset
 43333    59   184    37    59  1022     0      66  ,
 43334    59   184    39    59  1022     0     111  hb
 43335    59   184    41    59  1022     0      66  ,
 43336    59   184    43    59  1022     0     111  ix
 43337    59   184    45    59  1022     0      59  (
 43338    59   184    46    59  1022     0     111  position
 43339    59   184    54    59  1022     0      59  (
 43340    59   184    55    59  1022     0      60  )
 43341    59   184    56    59  1022     0      60  )
 43342    59   184    57    59  1022     0      66  ,
 43343    59   184    59    59  1022     0     111  length
 43344    59   184    65    59  1022     0      60  )
 43345    59   184    66    59  1022     0     102  ;
 43346    59   185     9    59  1022     0     111  position
 43347    59   185    17    59  1022     0      59  (
 43348    59   185    18    59  1022     0     111  position
 43349    59   185    26    59  1022     0      59  (
 43350    59   185    27    59  1022     0      60  )
 43351    59   185    29    59  1022     0      74  +
 43352    59   185    31    59  1022     0     111  length
 43353    59   185    37    59  1022     0      60  )
 43354    59   185    38    59  1022     0     102  ;
 43355    59   186     9    59  1022     0      19  return
 43356    59   186    16    59  1022     0      44  this
 43357    59   186    20    59  1022     0     102  ;
 43358    59   190     5    59  1022     0      64  }
 43359    59   190     5    59  1022     0    2404  ENDMETHOD
 43360    59   190     5    59  1023     0    2405  STARTMETHOD
 43361    59   192    12    59  1023     0     111  ByteBuffer
 43362    59   192    23    59  1023     0     111  put
 43363    59   192    26    59  1023     0      59  (
 43364    59   192    27    59  1023     0     111  ByteBuffer
 43365    59   192    38    59  1023     0     111  src
 43366    59   192    41    59  1023     0      60  )
 43367    59   192    43    59  1023     0      63  {
 43368    59   194     9    59  1023     0      31  if
 43369    59   194    12    59  1023     0      59  (
 43370    59   194    13    59  1023     0     111  src
 43371    59   194    28    59  1023     0     111  HeapByteBuffer
 43372    59   194    42    59  1023     0      60  )
 43373    59   194    44    59  1023     0      63  {
 43374    59   195    13    59  1023     0      31  if
 43375    59   195    16    59  1023     0      59  (
 43376    59   195    17    59  1023     0     111  src
 43377    59   195    21    59  1023     0      68  ==
 43378    59   195    24    59  1023     0      44  this
 43379    59   195    28    59  1023     0      60  )
 43380    59   196    17    59  1023     0      20  throw
 43381    59   196    27    59  1023     0     111  IllegalArgumentException
 43382    59   196    51    59  1023     0      59  (
 43383    59   196    52    59  1023     0      60  )
 43384    59   196    53    59  1023     0     102  ;
 43385    59   197    13    59  1023     0     111  HeapByteBuffer
 43386    59   197    28    59  1023     0     111  sb
 43387    59   197    31    59  1023     0      67  =
 43388    59   197    33    59  1023     0      59  (
 43389    59   197    34    59  1023     0     111  HeapByteBuffer
 43390    59   197    48    59  1023     0      60  )
 43391    59   197    49    59  1023     0     111  src
 43392    59   197    52    59  1023     0     102  ;
 43393    59   198    13    59  1023     0      36  int
 43394    59   198    17    59  1023     0     111  n
 43395    59   198    19    59  1023     0      67  =
 43396    59   198    21    59  1023     0     111  sb.remaining
 43397    59   198    33    59  1023     0      59  (
 43398    59   198    34    59  1023     0      60  )
 43399    59   198    35    59  1023     0     102  ;
 43400    59   199    13    59  1023     0      31  if
 43401    59   199    16    59  1023     0      59  (
 43402    59   199    17    59  1023     0     111  n
 43403    59   199    19    59  1023     0      89  >
 43404    59   199    21    59  1023     0     111  remaining
 43405    59   199    30    59  1023     0      59  (
 43406    59   199    31    59  1023     0      60  )
 43407    59   199    32    59  1023     0      60  )
 43408    59   200    17    59  1023     0      20  throw
 43409    59   200    27    59  1023     0     111  BufferOverflowException
 43410    59   200    50    59  1023     0      59  (
 43411    59   200    51    59  1023     0      60  )
 43412    59   200    52    59  1023     0     102  ;
 43413    59   201    13    59  1023     0     111  System.arraycopy
 43414    59   201    29    59  1023     0      59  (
 43415    59   201    30    59  1023     0     111  sb.hb
 43416    59   201    35    59  1023     0      66  ,
 43417    59   201    37    59  1023     0     111  sb.ix
 43418    59   201    42    59  1023     0      59  (
 43419    59   201    43    59  1023     0     111  sb.position
 43420    59   201    54    59  1023     0      59  (
 43421    59   201    55    59  1023     0      60  )
 43422    59   201    56    59  1023     0      60  )
 43423    59   201    57    59  1023     0      66  ,
 43424    59   202    30    59  1023     0     111  hb
 43425    59   202    32    59  1023     0      66  ,
 43426    59   202    34    59  1023     0     111  ix
 43427    59   202    36    59  1023     0      59  (
 43428    59   202    37    59  1023     0     111  position
 43429    59   202    45    59  1023     0      59  (
 43430    59   202    46    59  1023     0      60  )
 43431    59   202    47    59  1023     0      60  )
 43432    59   202    48    59  1023     0      66  ,
 43433    59   202    50    59  1023     0     111  n
 43434    59   202    51    59  1023     0      60  )
 43435    59   202    52    59  1023     0     102  ;
 43436    59   203    13    59  1023     1     111  sb.position
 43437    59   203    24    59  1023     1      59  (
 43438    59   203    25    59  1023     1     111  sb.position
 43439    59   203    36    59  1023     1      59  (
 43440    59   203    37    59  1023     1      60  )
 43441    59   203    39    59  1023     1      74  +
 43442    59   203    41    59  1023     1     111  n
 43443    59   203    42    59  1023     1      60  )
 43444    59   203    43    59  1023     1     102  ;
 43445    59   204    13    59  1023     1     111  position
 43446    59   204    21    59  1023     1      59  (
 43447    59   204    22    59  1023     1     111  position
 43448    59   204    30    59  1023     1      59  (
 43449    59   204    31    59  1023     1      60  )
 43450    59   204    33    59  1023     1      74  +
 43451    59   204    35    59  1023     1     111  n
 43452    59   204    36    59  1023     1      60  )
 43453    59   204    37    59  1023     1     102  ;
 43454    59   205     9    59  1023     0      64  }
 43455    59   205    11    59  1023     0      48  else
 43456    59   205    16    59  1023     0      31  if
 43457    59   205    19    59  1023     0      59  (
 43458    59   205    20    59  1023     0     111  src.isDirect
 43459    59   205    32    59  1023     0      59  (
 43460    59   205    33    59  1023     0      60  )
 43461    59   205    34    59  1023     0      60  )
 43462    59   205    36    59  1023     0      63  {
 43463    59   206    13    59  1023     0      36  int
 43464    59   206    17    59  1023     0     111  n
 43465    59   206    19    59  1023     0      67  =
 43466    59   206    21    59  1023     0     111  src.remaining
 43467    59   206    34    59  1023     0      59  (
 43468    59   206    35    59  1023     0      60  )
 43469    59   206    36    59  1023     0     102  ;
 43470    59   207    13    59  1023     0      31  if
 43471    59   207    16    59  1023     0      59  (
 43472    59   207    17    59  1023     0     111  n
 43473    59   207    19    59  1023     0      89  >
 43474    59   207    21    59  1023     0     111  remaining
 43475    59   207    30    59  1023     0      59  (
 43476    59   207    31    59  1023     0      60  )
 43477    59   207    32    59  1023     0      60  )
 43478    59   208    17    59  1023     0      20  throw
 43479    59   208    27    59  1023     0     111  BufferOverflowException
 43480    59   208    50    59  1023     0      59  (
 43481    59   208    51    59  1023     0      60  )
 43482    59   208    52    59  1023     0     102  ;
 43483    59   209    13    59  1023     0     111  src.get
 43484    59   209    20    59  1023     0      59  (
 43485    59   209    21    59  1023     0     111  hb
 43486    59   209    23    59  1023     0      66  ,
 43487    59   209    25    59  1023     0     111  ix
 43488    59   209    27    59  1023     0      59  (
 43489    59   209    28    59  1023     0     111  position
 43490    59   209    36    59  1023     0      59  (
 43491    59   209    37    59  1023     0      60  )
 43492    59   209    38    59  1023     0      60  )
 43493    59   209    39    59  1023     0      66  ,
 43494    59   209    41    59  1023     0     111  n
 43495    59   209    42    59  1023     0      60  )
 43496    59   209    43    59  1023     0     102  ;
 43497    59   210    13    59  1023     0     111  position
 43498    59   210    21    59  1023     0      59  (
 43499    59   210    22    59  1023     0     111  position
 43500    59   210    30    59  1023     0      59  (
 43501    59   210    31    59  1023     0      60  )
 43502    59   210    33    59  1023     0      74  +
 43503    59   210    35    59  1023     0     111  n
 43504    59   210    36    59  1023     0      60  )
 43505    59   210    37    59  1023     0     102  ;
 43506    59   211     9    59  1023     0      64  }
 43507    59   211    11    59  1023     0      48  else
 43508    59   211    16    59  1023     0      63  {
 43509    59   212    13    59  1023     0     111  super.put
 43510    59   212    22    59  1023     0      59  (
 43511    59   212    23    59  1023     0     111  src
 43512    59   212    26    59  1023     0      60  )
 43513    59   212    27    59  1023     0     102  ;
 43514    59   213     9    59  1023     0      64  }
 43515    59   214     9    59  1023     0      19  return
 43516    59   214    16    59  1023     0      44  this
 43517    59   214    20    59  1023     0     102  ;
 43518    59   218     5    59  1023     0      64  }
 43519    59   218     5    59  1023     0    2406  ENDMETHOD
 43520    59   218     5    59  1024     0    2407  STARTMETHOD
 43521    59   220    12    59  1024     0     111  ByteBuffer
 43522    59   220    23    59  1024     0     111  compact
 43523    59   220    30    59  1024     0      59  (
 43524    59   220    31    59  1024     0      60  )
 43525    59   220    33    59  1024     0      63  {
 43526    59   222     9    59  1024     0     111  System.arraycopy
 43527    59   222    25    59  1024     0      59  (
 43528    59   222    26    59  1024     0     111  hb
 43529    59   222    28    59  1024     0      66  ,
 43530    59   222    30    59  1024     0     111  ix
 43531    59   222    32    59  1024     0      59  (
 43532    59   222    33    59  1024     0     111  position
 43533    59   222    41    59  1024     0      59  (
 43534    59   222    42    59  1024     0      60  )
 43535    59   222    43    59  1024     0      60  )
 43536    59   222    44    59  1024     0      66  ,
 43537    59   222    46    59  1024     0     111  hb
 43538    59   222    48    59  1024     0      66  ,
 43539    59   222    50    59  1024     0     111  ix
 43540    59   222    52    59  1024     0      59  (
 43541    59   222    53    59  1024     0     112  0
 43542    59   222    54    59  1024     0      60  )
 43543    59   222    55    59  1024     0      66  ,
 43544    59   222    57    59  1024     0     111  remaining
 43545    59   222    66    59  1024     0      59  (
 43546    59   222    67    59  1024     0      60  )
 43547    59   222    68    59  1024     0      60  )
 43548    59   222    69    59  1024     0     102  ;
 43549    59   223     9    59  1024     1     111  position
 43550    59   223    17    59  1024     1      59  (
 43551    59   223    18    59  1024     1     111  remaining
 43552    59   223    27    59  1024     1      59  (
 43553    59   223    28    59  1024     1      60  )
 43554    59   223    29    59  1024     1      60  )
 43555    59   223    30    59  1024     1     102  ;
 43556    59   224     9    59  1024     1     111  limit
 43557    59   224    14    59  1024     1      59  (
 43558    59   224    15    59  1024     1     111  capacity
 43559    59   224    23    59  1024     1      59  (
 43560    59   224    24    59  1024     1      60  )
 43561    59   224    25    59  1024     1      60  )
 43562    59   224    26    59  1024     1     102  ;
 43563    59   225     9    59  1024     0     111  clearMark
 43564    59   225    18    59  1024     0      59  (
 43565    59   225    19    59  1024     0      60  )
 43566    59   225    20    59  1024     0     102  ;
 43567    59   226     9    59  1024     0      19  return
 43568    59   226    16    59  1024     0      44  this
 43569    59   226    20    59  1024     0     102  ;
 43570    59   230     5    59  1024     0      64  }
 43571    59   230     5    59  1024     0    2408  ENDMETHOD
 43572    59   230     5    59  1025     0    2409  STARTMETHOD
 43573    59   236    10    59  1025     0     111  _get
 43574    59   236    14    59  1025     0      59  (
 43575    59   236    15    59  1025     0      36  int
 43576    59   236    19    59  1025     0     111  i
 43577    59   236    20    59  1025     0      60  )
 43578    59   236    22    59  1025     0      63  {
 43579    59   237     9    59  1025     0      19  return
 43580    59   237    16    59  1025     0     111  hb
 43581    59   237    18    59  1025     0      61  [
 43582    59   237    19    59  1025     0     111  i
 43583    59   237    20    59  1025     0      62  ]
 43584    59   237    21    59  1025     0     102  ;
 43585    59   238     5    59  1025     0      64  }
 43586    59   238     5    59  1025     0    2410  ENDMETHOD
 43587    59   238     5    59  1026     0    2411  STARTMETHOD
 43588    59   240     5    59  1026     0      50  void
 43589    59   240    10    59  1026     0     111  _put
 43590    59   240    14    59  1026     0      59  (
 43591    59   240    15    59  1026     0      36  int
 43592    59   240    19    59  1026     0     111  i
 43593    59   240    20    59  1026     0      66  ,
 43594    59   240    27    59  1026     0     111  b
 43595    59   240    28    59  1026     0      60  )
 43596    59   240    30    59  1026     0      63  {
 43597    59   242     9    59  1026     0     111  hb
 43598    59   242    11    59  1026     0      61  [
 43599    59   242    12    59  1026     0     111  i
 43600    59   242    13    59  1026     0      62  ]
 43601    59   242    15    59  1026     0      67  =
 43602    59   242    17    59  1026     0     111  b
 43603    59   242    18    59  1026     0     102  ;
 43604    59   246     5    59  1026     0      64  }
 43605    59   246     5    59  1026     0    2412  ENDMETHOD
 43606    59   246     5    59  1027     0    2413  STARTMETHOD
 43607    59   252    12    59  1027     0      40  char
 43608    59   252    17    59  1027     0     111  getChar
 43609    59   252    24    59  1027     0      59  (
 43610    59   252    25    59  1027     0      60  )
 43611    59   252    27    59  1027     0      63  {
 43612    59   253     9    59  1027     0      19  return
 43613    59   253    16    59  1027     0     111  Bits.getChar
 43614    59   253    28    59  1027     0      59  (
 43615    59   253    29    59  1027     0      44  this
 43616    59   253    33    59  1027     0      66  ,
 43617    59   253    35    59  1027     0     111  ix
 43618    59   253    37    59  1027     0      59  (
 43619    59   253    38    59  1027     0     111  nextGetIndex
 43620    59   253    50    59  1027     0      59  (
 43621    59   253    51    59  1027     0     112  2
 43622    59   253    52    59  1027     0      60  )
 43623    59   253    53    59  1027     0      60  )
 43624    59   253    54    59  1027     0      66  ,
 43625    59   253    56    59  1027     0     111  bigEndian
 43626    59   253    65    59  1027     0      60  )
 43627    59   253    66    59  1027     0     102  ;
 43628    59   254     5    59  1027     0      64  }
 43629    59   254     5    59  1027     0    2414  ENDMETHOD
 43630    59   254     5    59  1028     0    2415  STARTMETHOD
 43631    59   256    12    59  1028     0      40  char
 43632    59   256    17    59  1028     0     111  getChar
 43633    59   256    24    59  1028     0      59  (
 43634    59   256    25    59  1028     0      36  int
 43635    59   256    29    59  1028     0     111  i
 43636    59   256    30    59  1028     0      60  )
 43637    59   256    32    59  1028     0      63  {
 43638    59   257     9    59  1028     0      19  return
 43639    59   257    16    59  1028     0     111  Bits.getChar
 43640    59   257    28    59  1028     0      59  (
 43641    59   257    29    59  1028     0      44  this
 43642    59   257    33    59  1028     0      66  ,
 43643    59   257    35    59  1028     0     111  ix
 43644    59   257    37    59  1028     0      59  (
 43645    59   257    38    59  1028     0     111  checkIndex
 43646    59   257    48    59  1028     0      59  (
 43647    59   257    49    59  1028     0     111  i
 43648    59   257    50    59  1028     0      66  ,
 43649    59   257    52    59  1028     0     112  2
 43650    59   257    53    59  1028     0      60  )
 43651    59   257    54    59  1028     0      60  )
 43652    59   257    55    59  1028     0      66  ,
 43653    59   257    57    59  1028     0     111  bigEndian
 43654    59   257    66    59  1028     0      60  )
 43655    59   257    67    59  1028     0     102  ;
 43656    59   258     5    59  1028     0      64  }
 43657    59   258     5    59  1028     0    2416  ENDMETHOD
 43658    59   258     5    59  1029     0    2417  STARTMETHOD
 43659    59   262    12    59  1029     0     111  ByteBuffer
 43660    59   262    23    59  1029     0     111  putChar
 43661    59   262    30    59  1029     0      59  (
 43662    59   262    31    59  1029     0      40  char
 43663    59   262    36    59  1029     0     111  x
 43664    59   262    37    59  1029     0      60  )
 43665    59   262    39    59  1029     0      63  {
 43666    59   264     9    59  1029     0     111  Bits.putChar
 43667    59   264    21    59  1029     0      59  (
 43668    59   264    22    59  1029     0      44  this
 43669    59   264    26    59  1029     0      66  ,
 43670    59   264    28    59  1029     0     111  ix
 43671    59   264    30    59  1029     0      59  (
 43672    59   264    31    59  1029     0     111  nextPutIndex
 43673    59   264    43    59  1029     0      59  (
 43674    59   264    44    59  1029     0     112  2
 43675    59   264    45    59  1029     0      60  )
 43676    59   264    46    59  1029     0      60  )
 43677    59   264    47    59  1029     0      66  ,
 43678    59   264    49    59  1029     0     111  x
 43679    59   264    50    59  1029     0      66  ,
 43680    59   264    52    59  1029     0     111  bigEndian
 43681    59   264    61    59  1029     0      60  )
 43682    59   264    62    59  1029     0     102  ;
 43683    59   265     9    59  1029     0      19  return
 43684    59   265    16    59  1029     0      44  this
 43685    59   265    20    59  1029     0     102  ;
 43686    59   269     5    59  1029     0      64  }
 43687    59   269     5    59  1029     0    2418  ENDMETHOD
 43688    59   269     5    59  1030     0    2419  STARTMETHOD
 43689    59   271    12    59  1030     0     111  ByteBuffer
 43690    59   271    23    59  1030     0     111  putChar
 43691    59   271    30    59  1030     0      59  (
 43692    59   271    31    59  1030     0      36  int
 43693    59   271    35    59  1030     0     111  i
 43694    59   271    36    59  1030     0      66  ,
 43695    59   271    38    59  1030     0      40  char
 43696    59   271    43    59  1030     0     111  x
 43697    59   271    44    59  1030     0      60  )
 43698    59   271    46    59  1030     0      63  {
 43699    59   273     9    59  1030     0     111  Bits.putChar
 43700    59   273    21    59  1030     0      59  (
 43701    59   273    22    59  1030     0      44  this
 43702    59   273    26    59  1030     0      66  ,
 43703    59   273    28    59  1030     0     111  ix
 43704    59   273    30    59  1030     0      59  (
 43705    59   273    31    59  1030     0     111  checkIndex
 43706    59   273    41    59  1030     0      59  (
 43707    59   273    42    59  1030     0     111  i
 43708    59   273    43    59  1030     0      66  ,
 43709    59   273    45    59  1030     0     112  2
 43710    59   273    46    59  1030     0      60  )
 43711    59   273    47    59  1030     0      60  )
 43712    59   273    48    59  1030     0      66  ,
 43713    59   273    50    59  1030     0     111  x
 43714    59   273    51    59  1030     0      66  ,
 43715    59   273    53    59  1030     0     111  bigEndian
 43716    59   273    62    59  1030     0      60  )
 43717    59   273    63    59  1030     0     102  ;
 43718    59   274     9    59  1030     0      19  return
 43719    59   274    16    59  1030     0      44  this
 43720    59   274    20    59  1030     0     102  ;
 43721    59   278     5    59  1030     0      64  }
 43722    59   278     5    59  1030     0    2420  ENDMETHOD
 43723    59   278     5    59  1031     0    2421  STARTMETHOD
 43724    59   280    12    59  1031     0     111  CharBuffer
 43725    59   280    23    59  1031     0     111  asCharBuffer
 43726    59   280    35    59  1031     0      59  (
 43727    59   280    36    59  1031     0      60  )
 43728    59   280    38    59  1031     0      63  {
 43729    59   281     9    59  1031     0      36  int
 43730    59   281    13    59  1031     0     111  size
 43731    59   281    18    59  1031     0      67  =
 43732    59   281    20    59  1031     0     111  this.remaining
 43733    59   281    34    59  1031     0      59  (
 43734    59   281    35    59  1031     0      60  )
 43735    59   281    37    59  1031     0      84  >>
 43736    59   281    40    59  1031     0     112  1
 43737    59   281    41    59  1031     0     102  ;
 43738    59   282     9    59  1031     0      36  int
 43739    59   282    13    59  1031     0     111  off
 43740    59   282    17    59  1031     0      67  =
 43741    59   282    19    59  1031     0     111  offset
 43742    59   282    26    59  1031     0      74  +
 43743    59   282    28    59  1031     0     111  position
 43744    59   282    36    59  1031     0      59  (
 43745    59   282    37    59  1031     0      60  )
 43746    59   282    38    59  1031     0     102  ;
 43747    59   283     9    59  1031     0      19  return
 43748    59   283    16    59  1031     0      59  (
 43749    59   283    17    59  1031     0     111  bigEndian
 43750    59   284    17    59  1031     0      58  ?
 43751    59   284    19    59  1031     0      59  (
 43752    59   284    20    59  1031     0     111  CharBuffer
 43753    59   284    30    59  1031     0      60  )
 43754    59   284    31    59  1031     0      59  (
 43755    59   284    36    59  1031     0     111  ByteBufferAsCharBufferB
 43756    59   284    59    59  1031     0      59  (
 43757    59   284    60    59  1031     0      44  this
 43758    59   284    64    59  1031     0      66  ,
 43759    59   285    64    59  1031     0      77  -
 43760    59   285    65    59  1031     0     112  1
 43761    59   285    66    59  1031     0      66  ,
 43762    59   286    64    59  1031     0     112  0
 43763    59   286    65    59  1031     0      66  ,
 43764    59   287    64    59  1031     1     111  size
 43765    59   287    68    59  1031     1      66  ,
 43766    59   288    64    59  1031     1     111  size
 43767    59   288    68    59  1031     1      66  ,
 43768    59   289    64    59  1031     0     111  off
 43769    59   289    67    59  1031     0      60  )
 43770    59   289    68    59  1031     0      60  )
 43771    59   290    17    59  1031     0      65  :
 43772    59   290    19    59  1031     0      59  (
 43773    59   290    20    59  1031     0     111  CharBuffer
 43774    59   290    30    59  1031     0      60  )
 43775    59   290    31    59  1031     0      59  (
 43776    59   290    36    59  1031     0     111  ByteBufferAsCharBufferL
 43777    59   290    59    59  1031     0      59  (
 43778    59   290    60    59  1031     0      44  this
 43779    59   290    64    59  1031     0      66  ,
 43780    59   291    64    59  1031     0      77  -
 43781    59   291    65    59  1031     0     112  1
 43782    59   291    66    59  1031     0      66  ,
 43783    59   292    64    59  1031     0     112  0
 43784    59   292    65    59  1031     0      66  ,
 43785    59   293    64    59  1031     1     111  size
 43786    59   293    68    59  1031     1      66  ,
 43787    59   294    64    59  1031     1     111  size
 43788    59   294    68    59  1031     1      66  ,
 43789    59   295    64    59  1031     0     111  off
 43790    59   295    67    59  1031     0      60  )
 43791    59   295    68    59  1031     0      60  )
 43792    59   295    69    59  1031     0      60  )
 43793    59   295    70    59  1031     0     102  ;
 43794    59   296     5    59  1031     0      64  }
 43795    59   296     5    59  1031     0    2422  ENDMETHOD
 43796    59   296     5    59  1032     0    2423  STARTMETHOD
 43797    59   303    18    59  1032     0     111  getShort
 43798    59   303    26    59  1032     0      59  (
 43799    59   303    27    59  1032     0      60  )
 43800    59   303    29    59  1032     0      63  {
 43801    59   304     9    59  1032     0      19  return
 43802    59   304    16    59  1032     0     111  Bits.getShort
 43803    59   304    29    59  1032     0      59  (
 43804    59   304    30    59  1032     0      44  this
 43805    59   304    34    59  1032     0      66  ,
 43806    59   304    36    59  1032     0     111  ix
 43807    59   304    38    59  1032     0      59  (
 43808    59   304    39    59  1032     0     111  nextGetIndex
 43809    59   304    51    59  1032     0      59  (
 43810    59   304    52    59  1032     0     112  2
 43811    59   304    53    59  1032     0      60  )
 43812    59   304    54    59  1032     0      60  )
 43813    59   304    55    59  1032     0      66  ,
 43814    59   304    57    59  1032     0     111  bigEndian
 43815    59   304    66    59  1032     0      60  )
 43816    59   304    67    59  1032     0     102  ;
 43817    59   305     5    59  1032     0      64  }
 43818    59   305     5    59  1032     0    2424  ENDMETHOD
 43819    59   305     5    59  1033     0    2425  STARTMETHOD
 43820    59   307    18    59  1033     0     111  getShort
 43821    59   307    26    59  1033     0      59  (
 43822    59   307    27    59  1033     0      36  int
 43823    59   307    31    59  1033     0     111  i
 43824    59   307    32    59  1033     0      60  )
 43825    59   307    34    59  1033     0      63  {
 43826    59   308     9    59  1033     0      19  return
 43827    59   308    16    59  1033     0     111  Bits.getShort
 43828    59   308    29    59  1033     0      59  (
 43829    59   308    30    59  1033     0      44  this
 43830    59   308    34    59  1033     0      66  ,
 43831    59   308    36    59  1033     0     111  ix
 43832    59   308    38    59  1033     0      59  (
 43833    59   308    39    59  1033     0     111  checkIndex
 43834    59   308    49    59  1033     0      59  (
 43835    59   308    50    59  1033     0     111  i
 43836    59   308    51    59  1033     0      66  ,
 43837    59   308    53    59  1033     0     112  2
 43838    59   308    54    59  1033     0      60  )
 43839    59   308    55    59  1033     0      60  )
 43840    59   308    56    59  1033     0      66  ,
 43841    59   308    58    59  1033     0     111  bigEndian
 43842    59   308    67    59  1033     0      60  )
 43843    59   308    68    59  1033     0     102  ;
 43844    59   309     5    59  1033     0      64  }
 43845    59   309     5    59  1033     0    2426  ENDMETHOD
 43846    59   309     5    59  1034     0    2427  STARTMETHOD
 43847    59   313    12    59  1034     0     111  ByteBuffer
 43848    59   313    23    59  1034     0     111  putShort
 43849    59   313    31    59  1034     0      59  (
 43850    59   313    38    59  1034     0     111  x
 43851    59   313    39    59  1034     0      60  )
 43852    59   313    41    59  1034     0      63  {
 43853    59   315     9    59  1034     0     111  Bits.putShort
 43854    59   315    22    59  1034     0      59  (
 43855    59   315    23    59  1034     0      44  this
 43856    59   315    27    59  1034     0      66  ,
 43857    59   315    29    59  1034     0     111  ix
 43858    59   315    31    59  1034     0      59  (
 43859    59   315    32    59  1034     0     111  nextPutIndex
 43860    59   315    44    59  1034     0      59  (
 43861    59   315    45    59  1034     0     112  2
 43862    59   315    46    59  1034     0      60  )
 43863    59   315    47    59  1034     0      60  )
 43864    59   315    48    59  1034     0      66  ,
 43865    59   315    50    59  1034     0     111  x
 43866    59   315    51    59  1034     0      66  ,
 43867    59   315    53    59  1034     0     111  bigEndian
 43868    59   315    62    59  1034     0      60  )
 43869    59   315    63    59  1034     0     102  ;
 43870    59   316     9    59  1034     0      19  return
 43871    59   316    16    59  1034     0      44  this
 43872    59   316    20    59  1034     0     102  ;
 43873    59   320     5    59  1034     0      64  }
 43874    59   320     5    59  1034     0    2428  ENDMETHOD
 43875    59   320     5    59  1035     0    2429  STARTMETHOD
 43876    59   322    12    59  1035     0     111  ByteBuffer
 43877    59   322    23    59  1035     0     111  putShort
 43878    59   322    31    59  1035     0      59  (
 43879    59   322    32    59  1035     0      36  int
 43880    59   322    36    59  1035     0     111  i
 43881    59   322    37    59  1035     0      66  ,
 43882    59   322    45    59  1035     0     111  x
 43883    59   322    46    59  1035     0      60  )
 43884    59   322    48    59  1035     0      63  {
 43885    59   324     9    59  1035     0     111  Bits.putShort
 43886    59   324    22    59  1035     0      59  (
 43887    59   324    23    59  1035     0      44  this
 43888    59   324    27    59  1035     0      66  ,
 43889    59   324    29    59  1035     0     111  ix
 43890    59   324    31    59  1035     0      59  (
 43891    59   324    32    59  1035     0     111  checkIndex
 43892    59   324    42    59  1035     0      59  (
 43893    59   324    43    59  1035     0     111  i
 43894    59   324    44    59  1035     0      66  ,
 43895    59   324    46    59  1035     0     112  2
 43896    59   324    47    59  1035     0      60  )
 43897    59   324    48    59  1035     0      60  )
 43898    59   324    49    59  1035     0      66  ,
 43899    59   324    51    59  1035     0     111  x
 43900    59   324    52    59  1035     0      66  ,
 43901    59   324    54    59  1035     0     111  bigEndian
 43902    59   324    63    59  1035     0      60  )
 43903    59   324    64    59  1035     0     102  ;
 43904    59   325     9    59  1035     0      19  return
 43905    59   325    16    59  1035     0      44  this
 43906    59   325    20    59  1035     0     102  ;
 43907    59   328     5    59  1035     0      64  }
 43908    59   328     5    59  1035     0    2430  ENDMETHOD
 43909    59   328     5    59  1036     0    2431  STARTMETHOD
 43910    59   330    12    59  1036     0     111  ShortBuffer
 43911    59   330    24    59  1036     0     111  asShortBuffer
 43912    59   330    37    59  1036     0      59  (
 43913    59   330    38    59  1036     0      60  )
 43914    59   330    40    59  1036     0      63  {
 43915    59   331     9    59  1036     0      36  int
 43916    59   331    13    59  1036     0     111  size
 43917    59   331    18    59  1036     0      67  =
 43918    59   331    20    59  1036     0     111  this.remaining
 43919    59   331    34    59  1036     0      59  (
 43920    59   331    35    59  1036     0      60  )
 43921    59   331    37    59  1036     0      84  >>
 43922    59   331    40    59  1036     0     112  1
 43923    59   331    41    59  1036     0     102  ;
 43924    59   332     9    59  1036     0      36  int
 43925    59   332    13    59  1036     0     111  off
 43926    59   332    17    59  1036     0      67  =
 43927    59   332    19    59  1036     0     111  offset
 43928    59   332    26    59  1036     0      74  +
 43929    59   332    28    59  1036     0     111  position
 43930    59   332    36    59  1036     0      59  (
 43931    59   332    37    59  1036     0      60  )
 43932    59   332    38    59  1036     0     102  ;
 43933    59   333     9    59  1036     0      19  return
 43934    59   333    16    59  1036     0      59  (
 43935    59   333    17    59  1036     0     111  bigEndian
 43936    59   334    17    59  1036     0      58  ?
 43937    59   334    19    59  1036     0      59  (
 43938    59   334    20    59  1036     0     111  ShortBuffer
 43939    59   334    31    59  1036     0      60  )
 43940    59   334    32    59  1036     0      59  (
 43941    59   334    37    59  1036     0     111  ByteBufferAsShortBufferB
 43942    59   334    61    59  1036     0      59  (
 43943    59   334    62    59  1036     0      44  this
 43944    59   334    66    59  1036     0      66  ,
 43945    59   335    66    59  1036     0      77  -
 43946    59   335    67    59  1036     0     112  1
 43947    59   335    68    59  1036     0      66  ,
 43948    59   336    66    59  1036     0     112  0
 43949    59   336    67    59  1036     0      66  ,
 43950    59   337    66    59  1036     1     111  size
 43951    59   337    70    59  1036     1      66  ,
 43952    59   338    66    59  1036     1     111  size
 43953    59   338    70    59  1036     1      66  ,
 43954    59   339    66    59  1036     0     111  off
 43955    59   339    69    59  1036     0      60  )
 43956    59   339    70    59  1036     0      60  )
 43957    59   340    17    59  1036     0      65  :
 43958    59   340    19    59  1036     0      59  (
 43959    59   340    20    59  1036     0     111  ShortBuffer
 43960    59   340    31    59  1036     0      60  )
 43961    59   340    32    59  1036     0      59  (
 43962    59   340    37    59  1036     0     111  ByteBufferAsShortBufferL
 43963    59   340    61    59  1036     0      59  (
 43964    59   340    62    59  1036     0      44  this
 43965    59   340    66    59  1036     0      66  ,
 43966    59   341    66    59  1036     0      77  -
 43967    59   341    67    59  1036     0     112  1
 43968    59   341    68    59  1036     0      66  ,
 43969    59   342    66    59  1036     0     112  0
 43970    59   342    67    59  1036     0      66  ,
 43971    59   343    66    59  1036     1     111  size
 43972    59   343    70    59  1036     1      66  ,
 43973    59   344    66    59  1036     1     111  size
 43974    59   344    70    59  1036     1      66  ,
 43975    59   345    66    59  1036     0     111  off
 43976    59   345    69    59  1036     0      60  )
 43977    59   345    70    59  1036     0      60  )
 43978    59   345    71    59  1036     0      60  )
 43979    59   345    72    59  1036     0     102  ;
 43980    59   346     5    59  1036     0      64  }
 43981    59   346     5    59  1036     0    2432  ENDMETHOD
 43982    59   346     5    59  1037     0    2433  STARTMETHOD
 43983    59   353    12    59  1037     0      36  int
 43984    59   353    16    59  1037     0     111  getInt
 43985    59   353    22    59  1037     0      59  (
 43986    59   353    23    59  1037     0      60  )
 43987    59   353    25    59  1037     0      63  {
 43988    59   354     9    59  1037     0      19  return
 43989    59   354    16    59  1037     0     111  Bits.getInt
 43990    59   354    27    59  1037     0      59  (
 43991    59   354    28    59  1037     0      44  this
 43992    59   354    32    59  1037     0      66  ,
 43993    59   354    34    59  1037     0     111  ix
 43994    59   354    36    59  1037     0      59  (
 43995    59   354    37    59  1037     0     111  nextGetIndex
 43996    59   354    49    59  1037     0      59  (
 43997    59   354    50    59  1037     0     112  4
 43998    59   354    51    59  1037     0      60  )
 43999    59   354    52    59  1037     0      60  )
 44000    59   354    53    59  1037     0      66  ,
 44001    59   354    55    59  1037     0     111  bigEndian
 44002    59   354    64    59  1037     0      60  )
 44003    59   354    65    59  1037     0     102  ;
 44004    59   355     5    59  1037     0      64  }
 44005    59   355     5    59  1037     0    2434  ENDMETHOD
 44006    59   355     5    59  1038     0    2435  STARTMETHOD
 44007    59   357    12    59  1038     0      36  int
 44008    59   357    16    59  1038     0     111  getInt
 44009    59   357    22    59  1038     0      59  (
 44010    59   357    23    59  1038     0      36  int
 44011    59   357    27    59  1038     0     111  i
 44012    59   357    28    59  1038     0      60  )
 44013    59   357    30    59  1038     0      63  {
 44014    59   358     9    59  1038     0      19  return
 44015    59   358    16    59  1038     0     111  Bits.getInt
 44016    59   358    27    59  1038     0      59  (
 44017    59   358    28    59  1038     0      44  this
 44018    59   358    32    59  1038     0      66  ,
 44019    59   358    34    59  1038     0     111  ix
 44020    59   358    36    59  1038     0      59  (
 44021    59   358    37    59  1038     0     111  checkIndex
 44022    59   358    47    59  1038     0      59  (
 44023    59   358    48    59  1038     0     111  i
 44024    59   358    49    59  1038     0      66  ,
 44025    59   358    51    59  1038     0     112  4
 44026    59   358    52    59  1038     0      60  )
 44027    59   358    53    59  1038     0      60  )
 44028    59   358    54    59  1038     0      66  ,
 44029    59   358    56    59  1038     0     111  bigEndian
 44030    59   358    65    59  1038     0      60  )
 44031    59   358    66    59  1038     0     102  ;
 44032    59   359     5    59  1038     0      64  }
 44033    59   359     5    59  1038     0    2436  ENDMETHOD
 44034    59   359     5    59  1039     0    2437  STARTMETHOD
 44035    59   363    12    59  1039     0     111  ByteBuffer
 44036    59   363    23    59  1039     0     111  putInt
 44037    59   363    29    59  1039     0      59  (
 44038    59   363    30    59  1039     0      36  int
 44039    59   363    34    59  1039     0     111  x
 44040    59   363    35    59  1039     0      60  )
 44041    59   363    37    59  1039     0      63  {
 44042    59   365     9    59  1039     0     111  Bits.putInt
 44043    59   365    20    59  1039     0      59  (
 44044    59   365    21    59  1039     0      44  this
 44045    59   365    25    59  1039     0      66  ,
 44046    59   365    27    59  1039     0     111  ix
 44047    59   365    29    59  1039     0      59  (
 44048    59   365    30    59  1039     0     111  nextPutIndex
 44049    59   365    42    59  1039     0      59  (
 44050    59   365    43    59  1039     0     112  4
 44051    59   365    44    59  1039     0      60  )
 44052    59   365    45    59  1039     0      60  )
 44053    59   365    46    59  1039     0      66  ,
 44054    59   365    48    59  1039     0     111  x
 44055    59   365    49    59  1039     0      66  ,
 44056    59   365    51    59  1039     0     111  bigEndian
 44057    59   365    60    59  1039     0      60  )
 44058    59   365    61    59  1039     0     102  ;
 44059    59   366     9    59  1039     0      19  return
 44060    59   366    16    59  1039     0      44  this
 44061    59   366    20    59  1039     0     102  ;
 44062    59   370     5    59  1039     0      64  }
 44063    59   370     5    59  1039     0    2438  ENDMETHOD
 44064    59   370     5    59  1040     0    2439  STARTMETHOD
 44065    59   372    12    59  1040     0     111  ByteBuffer
 44066    59   372    23    59  1040     0     111  putInt
 44067    59   372    29    59  1040     0      59  (
 44068    59   372    30    59  1040     0      36  int
 44069    59   372    34    59  1040     0     111  i
 44070    59   372    35    59  1040     0      66  ,
 44071    59   372    37    59  1040     0      36  int
 44072    59   372    41    59  1040     0     111  x
 44073    59   372    42    59  1040     0      60  )
 44074    59   372    44    59  1040     0      63  {
 44075    59   374     9    59  1040     0     111  Bits.putInt
 44076    59   374    20    59  1040     0      59  (
 44077    59   374    21    59  1040     0      44  this
 44078    59   374    25    59  1040     0      66  ,
 44079    59   374    27    59  1040     0     111  ix
 44080    59   374    29    59  1040     0      59  (
 44081    59   374    30    59  1040     0     111  checkIndex
 44082    59   374    40    59  1040     0      59  (
 44083    59   374    41    59  1040     0     111  i
 44084    59   374    42    59  1040     0      66  ,
 44085    59   374    44    59  1040     0     112  4
 44086    59   374    45    59  1040     0      60  )
 44087    59   374    46    59  1040     0      60  )
 44088    59   374    47    59  1040     0      66  ,
 44089    59   374    49    59  1040     0     111  x
 44090    59   374    50    59  1040     0      66  ,
 44091    59   374    52    59  1040     0     111  bigEndian
 44092    59   374    61    59  1040     0      60  )
 44093    59   374    62    59  1040     0     102  ;
 44094    59   375     9    59  1040     0      19  return
 44095    59   375    16    59  1040     0      44  this
 44096    59   375    20    59  1040     0     102  ;
 44097    59   379     5    59  1040     0      64  }
 44098    59   379     5    59  1040     0    2440  ENDMETHOD
 44099    59   379     5    59  1041     0    2441  STARTMETHOD
 44100    59   381    12    59  1041     0     111  IntBuffer
 44101    59   381    22    59  1041     0     111  asIntBuffer
 44102    59   381    33    59  1041     0      59  (
 44103    59   381    34    59  1041     0      60  )
 44104    59   381    36    59  1041     0      63  {
 44105    59   382     9    59  1041     0      36  int
 44106    59   382    13    59  1041     0     111  size
 44107    59   382    18    59  1041     0      67  =
 44108    59   382    20    59  1041     0     111  this.remaining
 44109    59   382    34    59  1041     0      59  (
 44110    59   382    35    59  1041     0      60  )
 44111    59   382    37    59  1041     0      84  >>
 44112    59   382    40    59  1041     0     112  2
 44113    59   382    41    59  1041     0     102  ;
 44114    59   383     9    59  1041     0      36  int
 44115    59   383    13    59  1041     0     111  off
 44116    59   383    17    59  1041     0      67  =
 44117    59   383    19    59  1041     0     111  offset
 44118    59   383    26    59  1041     0      74  +
 44119    59   383    28    59  1041     0     111  position
 44120    59   383    36    59  1041     0      59  (
 44121    59   383    37    59  1041     0      60  )
 44122    59   383    38    59  1041     0     102  ;
 44123    59   384     9    59  1041     0      19  return
 44124    59   384    16    59  1041     0      59  (
 44125    59   384    17    59  1041     0     111  bigEndian
 44126    59   385    17    59  1041     0      58  ?
 44127    59   385    19    59  1041     0      59  (
 44128    59   385    20    59  1041     0     111  IntBuffer
 44129    59   385    29    59  1041     0      60  )
 44130    59   385    30    59  1041     0      59  (
 44131    59   385    35    59  1041     0     111  ByteBufferAsIntBufferB
 44132    59   385    57    59  1041     0      59  (
 44133    59   385    58    59  1041     0      44  this
 44134    59   385    62    59  1041     0      66  ,
 44135    59   386    62    59  1041     0      77  -
 44136    59   386    63    59  1041     0     112  1
 44137    59   386    64    59  1041     0      66  ,
 44138    59   387    62    59  1041     0     112  0
 44139    59   387    63    59  1041     0      66  ,
 44140    59   388    62    59  1041     1     111  size
 44141    59   388    66    59  1041     1      66  ,
 44142    59   389    62    59  1041     1     111  size
 44143    59   389    66    59  1041     1      66  ,
 44144    59   390    62    59  1041     0     111  off
 44145    59   390    65    59  1041     0      60  )
 44146    59   390    66    59  1041     0      60  )
 44147    59   391    17    59  1041     0      65  :
 44148    59   391    19    59  1041     0      59  (
 44149    59   391    20    59  1041     0     111  IntBuffer
 44150    59   391    29    59  1041     0      60  )
 44151    59   391    30    59  1041     0      59  (
 44152    59   391    35    59  1041     0     111  ByteBufferAsIntBufferL
 44153    59   391    57    59  1041     0      59  (
 44154    59   391    58    59  1041     0      44  this
 44155    59   391    62    59  1041     0      66  ,
 44156    59   392    62    59  1041     0      77  -
 44157    59   392    63    59  1041     0     112  1
 44158    59   392    64    59  1041     0      66  ,
 44159    59   393    62    59  1041     0     112  0
 44160    59   393    63    59  1041     0      66  ,
 44161    59   394    62    59  1041     1     111  size
 44162    59   394    66    59  1041     1      66  ,
 44163    59   395    62    59  1041     1     111  size
 44164    59   395    66    59  1041     1      66  ,
 44165    59   396    62    59  1041     0     111  off
 44166    59   396    65    59  1041     0      60  )
 44167    59   396    66    59  1041     0      60  )
 44168    59   396    67    59  1041     0      60  )
 44169    59   396    68    59  1041     0     102  ;
 44170    59   397     5    59  1041     0      64  }
 44171    59   397     5    59  1041     0    2442  ENDMETHOD
 44172    59   397     5    59  1042     0    2443  STARTMETHOD
 44173    59   404    12    59  1042     0      53  long
 44174    59   404    17    59  1042     0     111  getLong
 44175    59   404    24    59  1042     0      59  (
 44176    59   404    25    59  1042     0      60  )
 44177    59   404    27    59  1042     0      63  {
 44178    59   405     9    59  1042     0      19  return
 44179    59   405    16    59  1042     0     111  Bits.getLong
 44180    59   405    28    59  1042     0      59  (
 44181    59   405    29    59  1042     0      44  this
 44182    59   405    33    59  1042     0      66  ,
 44183    59   405    35    59  1042     0     111  ix
 44184    59   405    37    59  1042     0      59  (
 44185    59   405    38    59  1042     0     111  nextGetIndex
 44186    59   405    50    59  1042     0      59  (
 44187    59   405    51    59  1042     0     112  8
 44188    59   405    52    59  1042     0      60  )
 44189    59   405    53    59  1042     0      60  )
 44190    59   405    54    59  1042     0      66  ,
 44191    59   405    56    59  1042     0     111  bigEndian
 44192    59   405    65    59  1042     0      60  )
 44193    59   405    66    59  1042     0     102  ;
 44194    59   406     5    59  1042     0      64  }
 44195    59   406     5    59  1042     0    2444  ENDMETHOD
 44196    59   406     5    59  1043     0    2445  STARTMETHOD
 44197    59   408    12    59  1043     0      53  long
 44198    59   408    17    59  1043     0     111  getLong
 44199    59   408    24    59  1043     0      59  (
 44200    59   408    25    59  1043     0      36  int
 44201    59   408    29    59  1043     0     111  i
 44202    59   408    30    59  1043     0      60  )
 44203    59   408    32    59  1043     0      63  {
 44204    59   409     9    59  1043     0      19  return
 44205    59   409    16    59  1043     0     111  Bits.getLong
 44206    59   409    28    59  1043     0      59  (
 44207    59   409    29    59  1043     0      44  this
 44208    59   409    33    59  1043     0      66  ,
 44209    59   409    35    59  1043     0     111  ix
 44210    59   409    37    59  1043     0      59  (
 44211    59   409    38    59  1043     0     111  checkIndex
 44212    59   409    48    59  1043     0      59  (
 44213    59   409    49    59  1043     0     111  i
 44214    59   409    50    59  1043     0      66  ,
 44215    59   409    52    59  1043     0     112  8
 44216    59   409    53    59  1043     0      60  )
 44217    59   409    54    59  1043     0      60  )
 44218    59   409    55    59  1043     0      66  ,
 44219    59   409    57    59  1043     0     111  bigEndian
 44220    59   409    66    59  1043     0      60  )
 44221    59   409    67    59  1043     0     102  ;
 44222    59   410     5    59  1043     0      64  }
 44223    59   410     5    59  1043     0    2446  ENDMETHOD
 44224    59   410     5    59  1044     0    2447  STARTMETHOD
 44225    59   414    12    59  1044     0     111  ByteBuffer
 44226    59   414    23    59  1044     0     111  putLong
 44227    59   414    30    59  1044     0      59  (
 44228    59   414    31    59  1044     0      53  long
 44229    59   414    36    59  1044     0     111  x
 44230    59   414    37    59  1044     0      60  )
 44231    59   414    39    59  1044     0      63  {
 44232    59   416     9    59  1044     0     111  Bits.putLong
 44233    59   416    21    59  1044     0      59  (
 44234    59   416    22    59  1044     0      44  this
 44235    59   416    26    59  1044     0      66  ,
 44236    59   416    28    59  1044     0     111  ix
 44237    59   416    30    59  1044     0      59  (
 44238    59   416    31    59  1044     0     111  nextPutIndex
 44239    59   416    43    59  1044     0      59  (
 44240    59   416    44    59  1044     0     112  8
 44241    59   416    45    59  1044     0      60  )
 44242    59   416    46    59  1044     0      60  )
 44243    59   416    47    59  1044     0      66  ,
 44244    59   416    49    59  1044     0     111  x
 44245    59   416    50    59  1044     0      66  ,
 44246    59   416    52    59  1044     0     111  bigEndian
 44247    59   416    61    59  1044     0      60  )
 44248    59   416    62    59  1044     0     102  ;
 44249    59   417     9    59  1044     0      19  return
 44250    59   417    16    59  1044     0      44  this
 44251    59   417    20    59  1044     0     102  ;
 44252    59   421     5    59  1044     0      64  }
 44253    59   421     5    59  1044     0    2448  ENDMETHOD
 44254    59   421     5    59  1045     0    2449  STARTMETHOD
 44255    59   423    12    59  1045     0     111  ByteBuffer
 44256    59   423    23    59  1045     0     111  putLong
 44257    59   423    30    59  1045     0      59  (
 44258    59   423    31    59  1045     0      36  int
 44259    59   423    35    59  1045     0     111  i
 44260    59   423    36    59  1045     0      66  ,
 44261    59   423    38    59  1045     0      53  long
 44262    59   423    43    59  1045     0     111  x
 44263    59   423    44    59  1045     0      60  )
 44264    59   423    46    59  1045     0      63  {
 44265    59   425     9    59  1045     0     111  Bits.putLong
 44266    59   425    21    59  1045     0      59  (
 44267    59   425    22    59  1045     0      44  this
 44268    59   425    26    59  1045     0      66  ,
 44269    59   425    28    59  1045     0     111  ix
 44270    59   425    30    59  1045     0      59  (
 44271    59   425    31    59  1045     0     111  checkIndex
 44272    59   425    41    59  1045     0      59  (
 44273    59   425    42    59  1045     0     111  i
 44274    59   425    43    59  1045     0      66  ,
 44275    59   425    45    59  1045     0     112  8
 44276    59   425    46    59  1045     0      60  )
 44277    59   425    47    59  1045     0      60  )
 44278    59   425    48    59  1045     0      66  ,
 44279    59   425    50    59  1045     0     111  x
 44280    59   425    51    59  1045     0      66  ,
 44281    59   425    53    59  1045     0     111  bigEndian
 44282    59   425    62    59  1045     0      60  )
 44283    59   425    63    59  1045     0     102  ;
 44284    59   426     9    59  1045     0      19  return
 44285    59   426    16    59  1045     0      44  this
 44286    59   426    20    59  1045     0     102  ;
 44287    59   430     5    59  1045     0      64  }
 44288    59   430     5    59  1045     0    2450  ENDMETHOD
 44289    59   430     5    59  1046     0    2451  STARTMETHOD
 44290    59   432    12    59  1046     0     111  LongBuffer
 44291    59   432    23    59  1046     0     111  asLongBuffer
 44292    59   432    35    59  1046     0      59  (
 44293    59   432    36    59  1046     0      60  )
 44294    59   432    38    59  1046     0      63  {
 44295    59   433     9    59  1046     0      36  int
 44296    59   433    13    59  1046     0     111  size
 44297    59   433    18    59  1046     0      67  =
 44298    59   433    20    59  1046     0     111  this.remaining
 44299    59   433    34    59  1046     0      59  (
 44300    59   433    35    59  1046     0      60  )
 44301    59   433    37    59  1046     0      84  >>
 44302    59   433    40    59  1046     0     112  3
 44303    59   433    41    59  1046     0     102  ;
 44304    59   434     9    59  1046     0      36  int
 44305    59   434    13    59  1046     0     111  off
 44306    59   434    17    59  1046     0      67  =
 44307    59   434    19    59  1046     0     111  offset
 44308    59   434    26    59  1046     0      74  +
 44309    59   434    28    59  1046     0     111  position
 44310    59   434    36    59  1046     0      59  (
 44311    59   434    37    59  1046     0      60  )
 44312    59   434    38    59  1046     0     102  ;
 44313    59   435     9    59  1046     0      19  return
 44314    59   435    16    59  1046     0      59  (
 44315    59   435    17    59  1046     0     111  bigEndian
 44316    59   436    17    59  1046     0      58  ?
 44317    59   436    19    59  1046     0      59  (
 44318    59   436    20    59  1046     0     111  LongBuffer
 44319    59   436    30    59  1046     0      60  )
 44320    59   436    31    59  1046     0      59  (
 44321    59   436    36    59  1046     0     111  ByteBufferAsLongBufferB
 44322    59   436    59    59  1046     0      59  (
 44323    59   436    60    59  1046     0      44  this
 44324    59   436    64    59  1046     0      66  ,
 44325    59   437    64    59  1046     0      77  -
 44326    59   437    65    59  1046     0     112  1
 44327    59   437    66    59  1046     0      66  ,
 44328    59   438    64    59  1046     0     112  0
 44329    59   438    65    59  1046     0      66  ,
 44330    59   439    64    59  1046     1     111  size
 44331    59   439    68    59  1046     1      66  ,
 44332    59   440    64    59  1046     1     111  size
 44333    59   440    68    59  1046     1      66  ,
 44334    59   441    64    59  1046     0     111  off
 44335    59   441    67    59  1046     0      60  )
 44336    59   441    68    59  1046     0      60  )
 44337    59   442    17    59  1046     0      65  :
 44338    59   442    19    59  1046     0      59  (
 44339    59   442    20    59  1046     0     111  LongBuffer
 44340    59   442    30    59  1046     0      60  )
 44341    59   442    31    59  1046     0      59  (
 44342    59   442    36    59  1046     0     111  ByteBufferAsLongBufferL
 44343    59   442    59    59  1046     0      59  (
 44344    59   442    60    59  1046     0      44  this
 44345    59   442    64    59  1046     0      66  ,
 44346    59   443    64    59  1046     0      77  -
 44347    59   443    65    59  1046     0     112  1
 44348    59   443    66    59  1046     0      66  ,
 44349    59   444    64    59  1046     0     112  0
 44350    59   444    65    59  1046     0      66  ,
 44351    59   445    64    59  1046     1     111  size
 44352    59   445    68    59  1046     1      66  ,
 44353    59   446    64    59  1046     1     111  size
 44354    59   446    68    59  1046     1      66  ,
 44355    59   447    64    59  1046     0     111  off
 44356    59   447    67    59  1046     0      60  )
 44357    59   447    68    59  1046     0      60  )
 44358    59   447    69    59  1046     0      60  )
 44359    59   447    70    59  1046     0     102  ;
 44360    59   448     5    59  1046     0      64  }
 44361    59   448     5    59  1046     0    2452  ENDMETHOD
 44362    59   448     5    59  1047     0    2453  STARTMETHOD
 44363    59   455    18    59  1047     0     111  getFloat
 44364    59   455    26    59  1047     0      59  (
 44365    59   455    27    59  1047     0      60  )
 44366    59   455    29    59  1047     0      63  {
 44367    59   456     9    59  1047     0      19  return
 44368    59   456    16    59  1047     0     111  Bits.getFloat
 44369    59   456    29    59  1047     0      59  (
 44370    59   456    30    59  1047     0      44  this
 44371    59   456    34    59  1047     0      66  ,
 44372    59   456    36    59  1047     0     111  ix
 44373    59   456    38    59  1047     0      59  (
 44374    59   456    39    59  1047     0     111  nextGetIndex
 44375    59   456    51    59  1047     0      59  (
 44376    59   456    52    59  1047     0     112  4
 44377    59   456    53    59  1047     0      60  )
 44378    59   456    54    59  1047     0      60  )
 44379    59   456    55    59  1047     0      66  ,
 44380    59   456    57    59  1047     0     111  bigEndian
 44381    59   456    66    59  1047     0      60  )
 44382    59   456    67    59  1047     0     102  ;
 44383    59   457     5    59  1047     0      64  }
 44384    59   457     5    59  1047     0    2454  ENDMETHOD
 44385    59   457     5    59  1048     0    2455  STARTMETHOD
 44386    59   459    18    59  1048     0     111  getFloat
 44387    59   459    26    59  1048     0      59  (
 44388    59   459    27    59  1048     0      36  int
 44389    59   459    31    59  1048     0     111  i
 44390    59   459    32    59  1048     0      60  )
 44391    59   459    34    59  1048     0      63  {
 44392    59   460     9    59  1048     0      19  return
 44393    59   460    16    59  1048     0     111  Bits.getFloat
 44394    59   460    29    59  1048     0      59  (
 44395    59   460    30    59  1048     0      44  this
 44396    59   460    34    59  1048     0      66  ,
 44397    59   460    36    59  1048     0     111  ix
 44398    59   460    38    59  1048     0      59  (
 44399    59   460    39    59  1048     0     111  checkIndex
 44400    59   460    49    59  1048     0      59  (
 44401    59   460    50    59  1048     0     111  i
 44402    59   460    51    59  1048     0      66  ,
 44403    59   460    53    59  1048     0     112  4
 44404    59   460    54    59  1048     0      60  )
 44405    59   460    55    59  1048     0      60  )
 44406    59   460    56    59  1048     0      66  ,
 44407    59   460    58    59  1048     0     111  bigEndian
 44408    59   460    67    59  1048     0      60  )
 44409    59   460    68    59  1048     0     102  ;
 44410    59   461     5    59  1048     0      64  }
 44411    59   461     5    59  1048     0    2456  ENDMETHOD
 44412    59   461     5    59  1049     0    2457  STARTMETHOD
 44413    59   465    12    59  1049     0     111  ByteBuffer
 44414    59   465    23    59  1049     0     111  putFloat
 44415    59   465    31    59  1049     0      59  (
 44416    59   465    38    59  1049     0     111  x
 44417    59   465    39    59  1049     0      60  )
 44418    59   465    41    59  1049     0      63  {
 44419    59   467     9    59  1049     0     111  Bits.putFloat
 44420    59   467    22    59  1049     0      59  (
 44421    59   467    23    59  1049     0      44  this
 44422    59   467    27    59  1049     0      66  ,
 44423    59   467    29    59  1049     0     111  ix
 44424    59   467    31    59  1049     0      59  (
 44425    59   467    32    59  1049     0     111  nextPutIndex
 44426    59   467    44    59  1049     0      59  (
 44427    59   467    45    59  1049     0     112  4
 44428    59   467    46    59  1049     0      60  )
 44429    59   467    47    59  1049     0      60  )
 44430    59   467    48    59  1049     0      66  ,
 44431    59   467    50    59  1049     0     111  x
 44432    59   467    51    59  1049     0      66  ,
 44433    59   467    53    59  1049     0     111  bigEndian
 44434    59   467    62    59  1049     0      60  )
 44435    59   467    63    59  1049     0     102  ;
 44436    59   468     9    59  1049     0      19  return
 44437    59   468    16    59  1049     0      44  this
 44438    59   468    20    59  1049     0     102  ;
 44439    59   472     5    59  1049     0      64  }
 44440    59   472     5    59  1049     0    2458  ENDMETHOD
 44441    59   472     5    59  1050     0    2459  STARTMETHOD
 44442    59   474    12    59  1050     0     111  ByteBuffer
 44443    59   474    23    59  1050     0     111  putFloat
 44444    59   474    31    59  1050     0      59  (
 44445    59   474    32    59  1050     0      36  int
 44446    59   474    36    59  1050     0     111  i
 44447    59   474    37    59  1050     0      66  ,
 44448    59   474    45    59  1050     0     111  x
 44449    59   474    46    59  1050     0      60  )
 44450    59   474    48    59  1050     0      63  {
 44451    59   476     9    59  1050     0     111  Bits.putFloat
 44452    59   476    22    59  1050     0      59  (
 44453    59   476    23    59  1050     0      44  this
 44454    59   476    27    59  1050     0      66  ,
 44455    59   476    29    59  1050     0     111  ix
 44456    59   476    31    59  1050     0      59  (
 44457    59   476    32    59  1050     0     111  checkIndex
 44458    59   476    42    59  1050     0      59  (
 44459    59   476    43    59  1050     0     111  i
 44460    59   476    44    59  1050     0      66  ,
 44461    59   476    46    59  1050     0     112  4
 44462    59   476    47    59  1050     0      60  )
 44463    59   476    48    59  1050     0      60  )
 44464    59   476    49    59  1050     0      66  ,
 44465    59   476    51    59  1050     0     111  x
 44466    59   476    52    59  1050     0      66  ,
 44467    59   476    54    59  1050     0     111  bigEndian
 44468    59   476    63    59  1050     0      60  )
 44469    59   476    64    59  1050     0     102  ;
 44470    59   477     9    59  1050     0      19  return
 44471    59   477    16    59  1050     0      44  this
 44472    59   477    20    59  1050     0     102  ;
 44473    59   481     5    59  1050     0      64  }
 44474    59   481     5    59  1050     0    2460  ENDMETHOD
 44475    59   481     5    59  1051     0    2461  STARTMETHOD
 44476    59   483    12    59  1051     0     111  FloatBuffer
 44477    59   483    24    59  1051     0     111  asFloatBuffer
 44478    59   483    37    59  1051     0      59  (
 44479    59   483    38    59  1051     0      60  )
 44480    59   483    40    59  1051     0      63  {
 44481    59   484     9    59  1051     0      36  int
 44482    59   484    13    59  1051     0     111  size
 44483    59   484    18    59  1051     0      67  =
 44484    59   484    20    59  1051     0     111  this.remaining
 44485    59   484    34    59  1051     0      59  (
 44486    59   484    35    59  1051     0      60  )
 44487    59   484    37    59  1051     0      84  >>
 44488    59   484    40    59  1051     0     112  2
 44489    59   484    41    59  1051     0     102  ;
 44490    59   485     9    59  1051     0      36  int
 44491    59   485    13    59  1051     0     111  off
 44492    59   485    17    59  1051     0      67  =
 44493    59   485    19    59  1051     0     111  offset
 44494    59   485    26    59  1051     0      74  +
 44495    59   485    28    59  1051     0     111  position
 44496    59   485    36    59  1051     0      59  (
 44497    59   485    37    59  1051     0      60  )
 44498    59   485    38    59  1051     0     102  ;
 44499    59   486     9    59  1051     0      19  return
 44500    59   486    16    59  1051     0      59  (
 44501    59   486    17    59  1051     0     111  bigEndian
 44502    59   487    17    59  1051     0      58  ?
 44503    59   487    19    59  1051     0      59  (
 44504    59   487    20    59  1051     0     111  FloatBuffer
 44505    59   487    31    59  1051     0      60  )
 44506    59   487    32    59  1051     0      59  (
 44507    59   487    37    59  1051     0     111  ByteBufferAsFloatBufferB
 44508    59   487    61    59  1051     0      59  (
 44509    59   487    62    59  1051     0      44  this
 44510    59   487    66    59  1051     0      66  ,
 44511    59   488    66    59  1051     0      77  -
 44512    59   488    67    59  1051     0     112  1
 44513    59   488    68    59  1051     0      66  ,
 44514    59   489    66    59  1051     0     112  0
 44515    59   489    67    59  1051     0      66  ,
 44516    59   490    66    59  1051     1     111  size
 44517    59   490    70    59  1051     1      66  ,
 44518    59   491    66    59  1051     1     111  size
 44519    59   491    70    59  1051     1      66  ,
 44520    59   492    66    59  1051     0     111  off
 44521    59   492    69    59  1051     0      60  )
 44522    59   492    70    59  1051     0      60  )
 44523    59   493    17    59  1051     0      65  :
 44524    59   493    19    59  1051     0      59  (
 44525    59   493    20    59  1051     0     111  FloatBuffer
 44526    59   493    31    59  1051     0      60  )
 44527    59   493    32    59  1051     0      59  (
 44528    59   493    37    59  1051     0     111  ByteBufferAsFloatBufferL
 44529    59   493    61    59  1051     0      59  (
 44530    59   493    62    59  1051     0      44  this
 44531    59   493    66    59  1051     0      66  ,
 44532    59   494    66    59  1051     0      77  -
 44533    59   494    67    59  1051     0     112  1
 44534    59   494    68    59  1051     0      66  ,
 44535    59   495    66    59  1051     0     112  0
 44536    59   495    67    59  1051     0      66  ,
 44537    59   496    66    59  1051     1     111  size
 44538    59   496    70    59  1051     1      66  ,
 44539    59   497    66    59  1051     1     111  size
 44540    59   497    70    59  1051     1      66  ,
 44541    59   498    66    59  1051     0     111  off
 44542    59   498    69    59  1051     0      60  )
 44543    59   498    70    59  1051     0      60  )
 44544    59   498    71    59  1051     0      60  )
 44545    59   498    72    59  1051     0     102  ;
 44546    59   499     5    59  1051     0      64  }
 44547    59   499     5    59  1051     0    2462  ENDMETHOD
 44548    59   499     5    59  1052     0    2463  STARTMETHOD
 44549    59   506    12    59  1052     0      32  double
 44550    59   506    19    59  1052     0     111  getDouble
 44551    59   506    28    59  1052     0      59  (
 44552    59   506    29    59  1052     0      60  )
 44553    59   506    31    59  1052     0      63  {
 44554    59   507     9    59  1052     0      19  return
 44555    59   507    16    59  1052     0     111  Bits.getDouble
 44556    59   507    30    59  1052     0      59  (
 44557    59   507    31    59  1052     0      44  this
 44558    59   507    35    59  1052     0      66  ,
 44559    59   507    37    59  1052     0     111  ix
 44560    59   507    39    59  1052     0      59  (
 44561    59   507    40    59  1052     0     111  nextGetIndex
 44562    59   507    52    59  1052     0      59  (
 44563    59   507    53    59  1052     0     112  8
 44564    59   507    54    59  1052     0      60  )
 44565    59   507    55    59  1052     0      60  )
 44566    59   507    56    59  1052     0      66  ,
 44567    59   507    58    59  1052     0     111  bigEndian
 44568    59   507    67    59  1052     0      60  )
 44569    59   507    68    59  1052     0     102  ;
 44570    59   508     5    59  1052     0      64  }
 44571    59   508     5    59  1052     0    2464  ENDMETHOD
 44572    59   508     5    59  1053     0    2465  STARTMETHOD
 44573    59   510    12    59  1053     0      32  double
 44574    59   510    19    59  1053     0     111  getDouble
 44575    59   510    28    59  1053     0      59  (
 44576    59   510    29    59  1053     0      36  int
 44577    59   510    33    59  1053     0     111  i
 44578    59   510    34    59  1053     0      60  )
 44579    59   510    36    59  1053     0      63  {
 44580    59   511     9    59  1053     0      19  return
 44581    59   511    16    59  1053     0     111  Bits.getDouble
 44582    59   511    30    59  1053     0      59  (
 44583    59   511    31    59  1053     0      44  this
 44584    59   511    35    59  1053     0      66  ,
 44585    59   511    37    59  1053     0     111  ix
 44586    59   511    39    59  1053     0      59  (
 44587    59   511    40    59  1053     0     111  checkIndex
 44588    59   511    50    59  1053     0      59  (
 44589    59   511    51    59  1053     0     111  i
 44590    59   511    52    59  1053     0      66  ,
 44591    59   511    54    59  1053     0     112  8
 44592    59   511    55    59  1053     0      60  )
 44593    59   511    56    59  1053     0      60  )
 44594    59   511    57    59  1053     0      66  ,
 44595    59   511    59    59  1053     0     111  bigEndian
 44596    59   511    68    59  1053     0      60  )
 44597    59   511    69    59  1053     0     102  ;
 44598    59   512     5    59  1053     0      64  }
 44599    59   512     5    59  1053     0    2466  ENDMETHOD
 44600    59   512     5    59  1054     0    2467  STARTMETHOD
 44601    59   516    12    59  1054     0     111  ByteBuffer
 44602    59   516    23    59  1054     0     111  putDouble
 44603    59   516    32    59  1054     0      59  (
 44604    59   516    33    59  1054     0      32  double
 44605    59   516    40    59  1054     0     111  x
 44606    59   516    41    59  1054     0      60  )
 44607    59   516    43    59  1054     0      63  {
 44608    59   518     9    59  1054     0     111  Bits.putDouble
 44609    59   518    23    59  1054     0      59  (
 44610    59   518    24    59  1054     0      44  this
 44611    59   518    28    59  1054     0      66  ,
 44612    59   518    30    59  1054     0     111  ix
 44613    59   518    32    59  1054     0      59  (
 44614    59   518    33    59  1054     0     111  nextPutIndex
 44615    59   518    45    59  1054     0      59  (
 44616    59   518    46    59  1054     0     112  8
 44617    59   518    47    59  1054     0      60  )
 44618    59   518    48    59  1054     0      60  )
 44619    59   518    49    59  1054     0      66  ,
 44620    59   518    51    59  1054     0     111  x
 44621    59   518    52    59  1054     0      66  ,
 44622    59   518    54    59  1054     0     111  bigEndian
 44623    59   518    63    59  1054     0      60  )
 44624    59   518    64    59  1054     0     102  ;
 44625    59   519     9    59  1054     0      19  return
 44626    59   519    16    59  1054     0      44  this
 44627    59   519    20    59  1054     0     102  ;
 44628    59   523     5    59  1054     0      64  }
 44629    59   523     5    59  1054     0    2468  ENDMETHOD
 44630    59   523     5    59  1055     0    2469  STARTMETHOD
 44631    59   525    12    59  1055     0     111  ByteBuffer
 44632    59   525    23    59  1055     0     111  putDouble
 44633    59   525    32    59  1055     0      59  (
 44634    59   525    33    59  1055     0      36  int
 44635    59   525    37    59  1055     0     111  i
 44636    59   525    38    59  1055     0      66  ,
 44637    59   525    40    59  1055     0      32  double
 44638    59   525    47    59  1055     0     111  x
 44639    59   525    48    59  1055     0      60  )
 44640    59   525    50    59  1055     0      63  {
 44641    59   527     9    59  1055     0     111  Bits.putDouble
 44642    59   527    23    59  1055     0      59  (
 44643    59   527    24    59  1055     0      44  this
 44644    59   527    28    59  1055     0      66  ,
 44645    59   527    30    59  1055     0     111  ix
 44646    59   527    32    59  1055     0      59  (
 44647    59   527    33    59  1055     0     111  checkIndex
 44648    59   527    43    59  1055     0      59  (
 44649    59   527    44    59  1055     0     111  i
 44650    59   527    45    59  1055     0      66  ,
 44651    59   527    47    59  1055     0     112  8
 44652    59   527    48    59  1055     0      60  )
 44653    59   527    49    59  1055     0      60  )
 44654    59   527    50    59  1055     0      66  ,
 44655    59   527    52    59  1055     0     111  x
 44656    59   527    53    59  1055     0      66  ,
 44657    59   527    55    59  1055     0     111  bigEndian
 44658    59   527    64    59  1055     0      60  )
 44659    59   527    65    59  1055     0     102  ;
 44660    59   528     9    59  1055     0      19  return
 44661    59   528    16    59  1055     0      44  this
 44662    59   528    20    59  1055     0     102  ;
 44663    59   532     5    59  1055     0      64  }
 44664    59   532     5    59  1055     0    2470  ENDMETHOD
 44665    59   532     5    59  1056     0    2471  STARTMETHOD
 44666    59   534    12    59  1056     0     111  DoubleBuffer
 44667    59   534    25    59  1056     0     111  asDoubleBuffer
 44668    59   534    39    59  1056     0      59  (
 44669    59   534    40    59  1056     0      60  )
 44670    59   534    42    59  1056     0      63  {
 44671    59   535     9    59  1056     0      36  int
 44672    59   535    13    59  1056     0     111  size
 44673    59   535    18    59  1056     0      67  =
 44674    59   535    20    59  1056     0     111  this.remaining
 44675    59   535    34    59  1056     0      59  (
 44676    59   535    35    59  1056     0      60  )
 44677    59   535    37    59  1056     0      84  >>
 44678    59   535    40    59  1056     0     112  3
 44679    59   535    41    59  1056     0     102  ;
 44680    59   536     9    59  1056     0      36  int
 44681    59   536    13    59  1056     0     111  off
 44682    59   536    17    59  1056     0      67  =
 44683    59   536    19    59  1056     0     111  offset
 44684    59   536    26    59  1056     0      74  +
 44685    59   536    28    59  1056     0     111  position
 44686    59   536    36    59  1056     0      59  (
 44687    59   536    37    59  1056     0      60  )
 44688    59   536    38    59  1056     0     102  ;
 44689    59   537     9    59  1056     0      19  return
 44690    59   537    16    59  1056     0      59  (
 44691    59   537    17    59  1056     0     111  bigEndian
 44692    59   538    17    59  1056     0      58  ?
 44693    59   538    19    59  1056     0      59  (
 44694    59   538    20    59  1056     0     111  DoubleBuffer
 44695    59   538    32    59  1056     0      60  )
 44696    59   538    33    59  1056     0      59  (
 44697    59   538    38    59  1056     0     111  ByteBufferAsDoubleBufferB
 44698    59   538    63    59  1056     0      59  (
 44699    59   538    64    59  1056     0      44  this
 44700    59   538    68    59  1056     0      66  ,
 44701    59   539    68    59  1056     0      77  -
 44702    59   539    69    59  1056     0     112  1
 44703    59   539    70    59  1056     0      66  ,
 44704    59   540    68    59  1056     0     112  0
 44705    59   540    69    59  1056     0      66  ,
 44706    59   541    68    59  1056     1     111  size
 44707    59   541    72    59  1056     1      66  ,
 44708    59   542    68    59  1056     1     111  size
 44709    59   542    72    59  1056     1      66  ,
 44710    59   543    68    59  1056     0     111  off
 44711    59   543    71    59  1056     0      60  )
 44712    59   543    72    59  1056     0      60  )
 44713    59   544    17    59  1056     0      65  :
 44714    59   544    19    59  1056     0      59  (
 44715    59   544    20    59  1056     0     111  DoubleBuffer
 44716    59   544    32    59  1056     0      60  )
 44717    59   544    33    59  1056     0      59  (
 44718    59   544    38    59  1056     0     111  ByteBufferAsDoubleBufferL
 44719    59   544    63    59  1056     0      59  (
 44720    59   544    64    59  1056     0      44  this
 44721    59   544    68    59  1056     0      66  ,
 44722    59   545    68    59  1056     0      77  -
 44723    59   545    69    59  1056     0     112  1
 44724    59   545    70    59  1056     0      66  ,
 44725    59   546    68    59  1056     0     112  0
 44726    59   546    69    59  1056     0      66  ,
 44727    59   547    68    59  1056     1     111  size
 44728    59   547    72    59  1056     1      66  ,
 44729    59   548    68    59  1056     1     111  size
 44730    59   548    72    59  1056     1      66  ,
 44731    59   549    68    59  1056     0     111  off
 44732    59   549    71    59  1056     0      60  )
 44733    59   549    72    59  1056     0      60  )
 44734    59   549    73    59  1056     0      60  )
 44735    59   549    74    59  1056     0     102  ;
 44736    59   550     5    59  1056     0      64  }
 44737    59   550     5    59  1056     0    2472  ENDMETHOD
 44738    59   591     1    59    -1     0      64  }
 44739    59   591     1    59    -1     1    2473  ENDCLASS
 44740    59   591     1    -1    -1     1    2474  ENDFILE C:\Users\RA\javasrc\java\nio\HeapByteBuffer.java
 44741    60     1     1    -1    -1     1    2475  STARTFILE C:\Users\RA\javasrc\java\nio\HeapByteBufferR.java
 44742    60    28     9    -1    -1     0     111  java.nio
 44743    60    28    17    -1    -1     0     102  ;
 44744    60    42     1    60    -1     0    2476  STARTCLASS
 44745    60    42     1    60    -1     0      24  class
 44746    60    42     7    60    -1     0     111  HeapByteBufferR
 44747    60    43     5    60    -1     0      38  extends
 44748    60    43    13    60    -1     0     111  HeapByteBuffer
 44749    60    44     1    60    -1     0      63  {
 44750    60    44     1    60  1057     0    2477  STARTMETHOD
 44751    60    55     5    60  1057     0     111  HeapByteBufferR
 44752    60    55    20    60  1057     0      59  (
 44753    60    55    21    60  1057     0      36  int
 44754    60    55    25    60  1057     0     111  cap
 44755    60    55    28    60  1057     0      66  ,
 44756    60    55    30    60  1057     0      36  int
 44757    60    55    34    60  1057     0     111  lim
 44758    60    55    37    60  1057     0      60  )
 44759    60    55    39    60  1057     0      63  {
 44760    60    63     9    60  1057     0      27  super
 44761    60    63    14    60  1057     0      59  (
 44762    60    63    15    60  1057     0     111  cap
 44763    60    63    18    60  1057     0      66  ,
 44764    60    63    20    60  1057     0     111  lim
 44765    60    63    23    60  1057     0      60  )
 44766    60    63    24    60  1057     0     102  ;
 44767    60    64     9    60  1057     0     111  this.isReadOnly
 44768    60    64    25    60  1057     0      67  =
 44769    60    64    27    60  1057     0      52  true
 44770    60    64    31    60  1057     0     102  ;
 44771    60    66     5    60  1057     0      64  }
 44772    60    66     5    60  1057     0    2478  ENDMETHOD
 44773    60    66     5    60  1058     0    2479  STARTMETHOD
 44774    60    68     5    60  1058     0     111  HeapByteBufferR
 44775    60    68    20    60  1058     0      59  (
 44776    60    68    25    60  1058     0      61  [
 44777    60    68    26    60  1058     0      62  ]
 44778    60    68    28    60  1058     0     111  buf
 44779    60    68    31    60  1058     0      66  ,
 44780    60    68    33    60  1058     0      36  int
 44781    60    68    37    60  1058     0     111  off
 44782    60    68    40    60  1058     0      66  ,
 44783    60    68    42    60  1058     0      36  int
 44784    60    68    46    60  1058     0     111  len
 44785    60    68    49    60  1058     0      60  )
 44786    60    68    51    60  1058     0      63  {
 44787    60    76     9    60  1058     0      27  super
 44788    60    76    14    60  1058     0      59  (
 44789    60    76    15    60  1058     0     111  buf
 44790    60    76    18    60  1058     0      66  ,
 44791    60    76    20    60  1058     0     111  off
 44792    60    76    23    60  1058     0      66  ,
 44793    60    76    25    60  1058     0     111  len
 44794    60    76    28    60  1058     0      60  )
 44795    60    76    29    60  1058     0     102  ;
 44796    60    77     9    60  1058     0     111  this.isReadOnly
 44797    60    77    25    60  1058     0      67  =
 44798    60    77    27    60  1058     0      52  true
 44799    60    77    31    60  1058     0     102  ;
 44800    60    79     5    60  1058     0      64  }
 44801    60    79     5    60  1058     0    2480  ENDMETHOD
 44802    60    79     5    60  1059     0    2481  STARTMETHOD
 44803    60    81     5    60  1059     0      23  protected
 44804    60    81    15    60  1059     0     111  HeapByteBufferR
 44805    60    81    30    60  1059     0      59  (
 44806    60    81    35    60  1059     0      61  [
 44807    60    81    36    60  1059     0      62  ]
 44808    60    81    38    60  1059     0     111  buf
 44809    60    81    41    60  1059     0      66  ,
 44810    60    82    36    60  1059     0      36  int
 44811    60    82    40    60  1059     0     111  mark
 44812    60    82    44    60  1059     0      66  ,
 44813    60    82    46    60  1059     0      36  int
 44814    60    82    50    60  1059     0     111  pos
 44815    60    82    53    60  1059     0      66  ,
 44816    60    82    55    60  1059     0      36  int
 44817    60    82    59    60  1059     0     111  lim
 44818    60    82    62    60  1059     0      66  ,
 44819    60    82    64    60  1059     0      36  int
 44820    60    82    68    60  1059     0     111  cap
 44821    60    82    71    60  1059     0      66  ,
 44822    60    83    36    60  1059     0      36  int
 44823    60    83    40    60  1059     0     111  off
 44824    60    83    43    60  1059     0      60  )
 44825    60    84     5    60  1059     0      63  {
 44826    60    92     9    60  1059     0      27  super
 44827    60    92    14    60  1059     0      59  (
 44828    60    92    15    60  1059     0     111  buf
 44829    60    92    18    60  1059     0      66  ,
 44830    60    92    20    60  1059     0     111  mark
 44831    60    92    24    60  1059     0      66  ,
 44832    60    92    26    60  1059     0     111  pos
 44833    60    92    29    60  1059     0      66  ,
 44834    60    92    31    60  1059     0     111  lim
 44835    60    92    34    60  1059     0      66  ,
 44836    60    92    36    60  1059     0     111  cap
 44837    60    92    39    60  1059     0      66  ,
 44838    60    92    41    60  1059     0     111  off
 44839    60    92    44    60  1059     0      60  )
 44840    60    92    45    60  1059     0     102  ;
 44841    60    93     9    60  1059     0     111  this.isReadOnly
 44842    60    93    25    60  1059     0      67  =
 44843    60    93    27    60  1059     0      52  true
 44844    60    93    31    60  1059     0     102  ;
 44845    60    95     5    60  1059     0      64  }
 44846    60    95     5    60  1059     0    2482  ENDMETHOD
 44847    60    95     5    60  1060     0    2483  STARTMETHOD
 44848    60    97    12    60  1060     0     111  ByteBuffer
 44849    60    97    23    60  1060     0     111  slice
 44850    60    97    28    60  1060     0      59  (
 44851    60    97    29    60  1060     0      60  )
 44852    60    97    31    60  1060     0      63  {
 44853    60    98     9    60  1060     0      19  return
 44854    60    98    20    60  1060     0     111  HeapByteBufferR
 44855    60    98    35    60  1060     0      59  (
 44856    60    98    36    60  1060     0     111  hb
 44857    60    98    38    60  1060     0      66  ,
 44858    60    99    41    60  1060     0      77  -
 44859    60    99    42    60  1060     0     112  1
 44860    60    99    43    60  1060     0      66  ,
 44861    60   100    41    60  1060     0     112  0
 44862    60   100    42    60  1060     0      66  ,
 44863    60   101    41    60  1060     1     111  this.remaining
 44864    60   101    55    60  1060     1      59  (
 44865    60   101    56    60  1060     1      60  )
 44866    60   101    57    60  1060     1      66  ,
 44867    60   102    41    60  1060     1     111  this.remaining
 44868    60   102    55    60  1060     1      59  (
 44869    60   102    56    60  1060     1      60  )
 44870    60   102    57    60  1060     1      66  ,
 44871    60   103    41    60  1060     0     111  this.position
 44872    60   103    54    60  1060     0      59  (
 44873    60   103    55    60  1060     0      60  )
 44874    60   103    57    60  1060     0      74  +
 44875    60   103    59    60  1060     0     111  offset
 44876    60   103    65    60  1060     0      60  )
 44877    60   103    66    60  1060     0     102  ;
 44878    60   104     5    60  1060     0      64  }
 44879    60   104     5    60  1060     0    2484  ENDMETHOD
 44880    60   104     5    60  1061     0    2485  STARTMETHOD
 44881    60   106    12    60  1061     0     111  ByteBuffer
 44882    60   106    23    60  1061     0     111  duplicate
 44883    60   106    32    60  1061     0      59  (
 44884    60   106    33    60  1061     0      60  )
 44885    60   106    35    60  1061     0      63  {
 44886    60   107     9    60  1061     0      19  return
 44887    60   107    20    60  1061     0     111  HeapByteBufferR
 44888    60   107    35    60  1061     0      59  (
 44889    60   107    36    60  1061     0     111  hb
 44890    60   107    38    60  1061     0      66  ,
 44891    60   108    41    60  1061     1     111  this.markValue
 44892    60   108    55    60  1061     1      59  (
 44893    60   108    56    60  1061     1      60  )
 44894    60   108    57    60  1061     1      66  ,
 44895    60   109    41    60  1061     1     111  this.position
 44896    60   109    54    60  1061     1      59  (
 44897    60   109    55    60  1061     1      60  )
 44898    60   109    56    60  1061     1      66  ,
 44899    60   110    41    60  1061     1     111  this.limit
 44900    60   110    51    60  1061     1      59  (
 44901    60   110    52    60  1061     1      60  )
 44902    60   110    53    60  1061     1      66  ,
 44903    60   111    41    60  1061     1     111  this.capacity
 44904    60   111    54    60  1061     1      59  (
 44905    60   111    55    60  1061     1      60  )
 44906    60   111    56    60  1061     1      66  ,
 44907    60   112    41    60  1061     0     111  offset
 44908    60   112    47    60  1061     0      60  )
 44909    60   112    48    60  1061     0     102  ;
 44910    60   113     5    60  1061     0      64  }
 44911    60   113     5    60  1061     0    2486  ENDMETHOD
 44912    60   113     5    60  1062     0    2487  STARTMETHOD
 44913    60   115    12    60  1062     0     111  ByteBuffer
 44914    60   115    23    60  1062     0     111  asReadOnlyBuffer
 44915    60   115    39    60  1062     0      59  (
 44916    60   115    40    60  1062     0      60  )
 44917    60   115    42    60  1062     0      63  {
 44918    60   124     9    60  1062     0      19  return
 44919    60   124    16    60  1062     0     111  duplicate
 44920    60   124    25    60  1062     0      59  (
 44921    60   124    26    60  1062     0      60  )
 44922    60   124    27    60  1062     0     102  ;
 44923    60   126     5    60  1062     0      64  }
 44924    60   126     5    60  1062     0    2488  ENDMETHOD
 44925    60   126     5    60  1063     0    2489  STARTMETHOD
 44926    60   157    12    60  1063     0      39  boolean
 44927    60   157    20    60  1063     0     111  isReadOnly
 44928    60   157    30    60  1063     0      59  (
 44929    60   157    31    60  1063     0      60  )
 44930    60   157    33    60  1063     0      63  {
 44931    60   158     9    60  1063     0      19  return
 44932    60   158    16    60  1063     0      52  true
 44933    60   158    20    60  1063     0     102  ;
 44934    60   159     5    60  1063     0      64  }
 44935    60   159     5    60  1063     0    2490  ENDMETHOD
 44936    60   159     5    60  1064     0    2491  STARTMETHOD
 44937    60   161    12    60  1064     0     111  ByteBuffer
 44938    60   161    23    60  1064     0     111  put
 44939    60   161    26    60  1064     0      59  (
 44940    60   161    32    60  1064     0     111  x
 44941    60   161    33    60  1064     0      60  )
 44942    60   161    35    60  1064     0      63  {
 44943    60   166     9    60  1064     0      20  throw
 44944    60   166    19    60  1064     0     111  ReadOnlyBufferException
 44945    60   166    42    60  1064     0      59  (
 44946    60   166    43    60  1064     0      60  )
 44947    60   166    44    60  1064     0     102  ;
 44948    60   168     5    60  1064     0      64  }
 44949    60   168     5    60  1064     0    2492  ENDMETHOD
 44950    60   168     5    60  1065     0    2493  STARTMETHOD
 44951    60   170    12    60  1065     0     111  ByteBuffer
 44952    60   170    23    60  1065     0     111  put
 44953    60   170    26    60  1065     0      59  (
 44954    60   170    27    60  1065     0      36  int
 44955    60   170    31    60  1065     0     111  i
 44956    60   170    32    60  1065     0      66  ,
 44957    60   170    39    60  1065     0     111  x
 44958    60   170    40    60  1065     0      60  )
 44959    60   170    42    60  1065     0      63  {
 44960    60   175     9    60  1065     0      20  throw
 44961    60   175    19    60  1065     0     111  ReadOnlyBufferException
 44962    60   175    42    60  1065     0      59  (
 44963    60   175    43    60  1065     0      60  )
 44964    60   175    44    60  1065     0     102  ;
 44965    60   177     5    60  1065     0      64  }
 44966    60   177     5    60  1065     0    2494  ENDMETHOD
 44967    60   177     5    60  1066     0    2495  STARTMETHOD
 44968    60   179    12    60  1066     0     111  ByteBuffer
 44969    60   179    23    60  1066     0     111  put
 44970    60   179    26    60  1066     0      59  (
 44971    60   179    31    60  1066     0      61  [
 44972    60   179    32    60  1066     0      62  ]
 44973    60   179    34    60  1066     0     111  src
 44974    60   179    37    60  1066     0      66  ,
 44975    60   179    39    60  1066     0      36  int
 44976    60   179    43    60  1066     0     111  offset
 44977    60   179    49    60  1066     0      66  ,
 44978    60   179    51    60  1066     0      36  int
 44979    60   179    55    60  1066     0     111  length
 44980    60   179    61    60  1066     0      60  )
 44981    60   179    63    60  1066     0      63  {
 44982    60   188     9    60  1066     0      20  throw
 44983    60   188    19    60  1066     0     111  ReadOnlyBufferException
 44984    60   188    42    60  1066     0      59  (
 44985    60   188    43    60  1066     0      60  )
 44986    60   188    44    60  1066     0     102  ;
 44987    60   190     5    60  1066     0      64  }
 44988    60   190     5    60  1066     0    2496  ENDMETHOD
 44989    60   190     5    60  1067     0    2497  STARTMETHOD
 44990    60   192    12    60  1067     0     111  ByteBuffer
 44991    60   192    23    60  1067     0     111  put
 44992    60   192    26    60  1067     0      59  (
 44993    60   192    27    60  1067     0     111  ByteBuffer
 44994    60   192    38    60  1067     0     111  src
 44995    60   192    41    60  1067     0      60  )
 44996    60   192    43    60  1067     0      63  {
 44997    60   216     9    60  1067     0      20  throw
 44998    60   216    19    60  1067     0     111  ReadOnlyBufferException
 44999    60   216    42    60  1067     0      59  (
 45000    60   216    43    60  1067     0      60  )
 45001    60   216    44    60  1067     0     102  ;
 45002    60   218     5    60  1067     0      64  }
 45003    60   218     5    60  1067     0    2498  ENDMETHOD
 45004    60   218     5    60  1068     0    2499  STARTMETHOD
 45005    60   220    12    60  1068     0     111  ByteBuffer
 45006    60   220    23    60  1068     0     111  compact
 45007    60   220    30    60  1068     0      59  (
 45008    60   220    31    60  1068     0      60  )
 45009    60   220    33    60  1068     0      63  {
 45010    60   228     9    60  1068     0      20  throw
 45011    60   228    19    60  1068     0     111  ReadOnlyBufferException
 45012    60   228    42    60  1068     0      59  (
 45013    60   228    43    60  1068     0      60  )
 45014    60   228    44    60  1068     0     102  ;
 45015    60   230     5    60  1068     0      64  }
 45016    60   230     5    60  1068     0    2500  ENDMETHOD
 45017    60   230     5    60  1069     0    2501  STARTMETHOD
 45018    60   236    10    60  1069     0     111  _get
 45019    60   236    14    60  1069     0      59  (
 45020    60   236    15    60  1069     0      36  int
 45021    60   236    19    60  1069     0     111  i
 45022    60   236    20    60  1069     0      60  )
 45023    60   236    22    60  1069     0      63  {
 45024    60   237     9    60  1069     0      19  return
 45025    60   237    16    60  1069     0     111  hb
 45026    60   237    18    60  1069     0      61  [
 45027    60   237    19    60  1069     0     111  i
 45028    60   237    20    60  1069     0      62  ]
 45029    60   237    21    60  1069     0     102  ;
 45030    60   238     5    60  1069     0      64  }
 45031    60   238     5    60  1069     0    2502  ENDMETHOD
 45032    60   238     5    60  1070     0    2503  STARTMETHOD
 45033    60   240     5    60  1070     0      50  void
 45034    60   240    10    60  1070     0     111  _put
 45035    60   240    14    60  1070     0      59  (
 45036    60   240    15    60  1070     0      36  int
 45037    60   240    19    60  1070     0     111  i
 45038    60   240    20    60  1070     0      66  ,
 45039    60   240    27    60  1070     0     111  b
 45040    60   240    28    60  1070     0      60  )
 45041    60   240    30    60  1070     0      63  {
 45042    60   244     9    60  1070     0      20  throw
 45043    60   244    19    60  1070     0     111  ReadOnlyBufferException
 45044    60   244    42    60  1070     0      59  (
 45045    60   244    43    60  1070     0      60  )
 45046    60   244    44    60  1070     0     102  ;
 45047    60   246     5    60  1070     0      64  }
 45048    60   246     5    60  1070     0    2504  ENDMETHOD
 45049    60   246     5    60  1071     0    2505  STARTMETHOD
 45050    60   262    12    60  1071     0     111  ByteBuffer
 45051    60   262    23    60  1071     0     111  putChar
 45052    60   262    30    60  1071     0      59  (
 45053    60   262    31    60  1071     0      40  char
 45054    60   262    36    60  1071     0     111  x
 45055    60   262    37    60  1071     0      60  )
 45056    60   262    39    60  1071     0      63  {
 45057    60   267     9    60  1071     0      20  throw
 45058    60   267    19    60  1071     0     111  ReadOnlyBufferException
 45059    60   267    42    60  1071     0      59  (
 45060    60   267    43    60  1071     0      60  )
 45061    60   267    44    60  1071     0     102  ;
 45062    60   269     5    60  1071     0      64  }
 45063    60   269     5    60  1071     0    2506  ENDMETHOD
 45064    60   269     5    60  1072     0    2507  STARTMETHOD
 45065    60   271    12    60  1072     0     111  ByteBuffer
 45066    60   271    23    60  1072     0     111  putChar
 45067    60   271    30    60  1072     0      59  (
 45068    60   271    31    60  1072     0      36  int
 45069    60   271    35    60  1072     0     111  i
 45070    60   271    36    60  1072     0      66  ,
 45071    60   271    38    60  1072     0      40  char
 45072    60   271    43    60  1072     0     111  x
 45073    60   271    44    60  1072     0      60  )
 45074    60   271    46    60  1072     0      63  {
 45075    60   276     9    60  1072     0      20  throw
 45076    60   276    19    60  1072     0     111  ReadOnlyBufferException
 45077    60   276    42    60  1072     0      59  (
 45078    60   276    43    60  1072     0      60  )
 45079    60   276    44    60  1072     0     102  ;
 45080    60   278     5    60  1072     0      64  }
 45081    60   278     5    60  1072     0    2508  ENDMETHOD
 45082    60   278     5    60  1073     0    2509  STARTMETHOD
 45083    60   280    12    60  1073     0     111  CharBuffer
 45084    60   280    23    60  1073     0     111  asCharBuffer
 45085    60   280    35    60  1073     0      59  (
 45086    60   280    36    60  1073     0      60  )
 45087    60   280    38    60  1073     0      63  {
 45088    60   281     9    60  1073     0      36  int
 45089    60   281    13    60  1073     0     111  size
 45090    60   281    18    60  1073     0      67  =
 45091    60   281    20    60  1073     0     111  this.remaining
 45092    60   281    34    60  1073     0      59  (
 45093    60   281    35    60  1073     0      60  )
 45094    60   281    37    60  1073     0      84  >>
 45095    60   281    40    60  1073     0     112  1
 45096    60   281    41    60  1073     0     102  ;
 45097    60   282     9    60  1073     0      36  int
 45098    60   282    13    60  1073     0     111  off
 45099    60   282    17    60  1073     0      67  =
 45100    60   282    19    60  1073     0     111  offset
 45101    60   282    26    60  1073     0      74  +
 45102    60   282    28    60  1073     0     111  position
 45103    60   282    36    60  1073     0      59  (
 45104    60   282    37    60  1073     0      60  )
 45105    60   282    38    60  1073     0     102  ;
 45106    60   283     9    60  1073     0      19  return
 45107    60   283    16    60  1073     0      59  (
 45108    60   283    17    60  1073     0     111  bigEndian
 45109    60   284    17    60  1073     0      58  ?
 45110    60   284    19    60  1073     0      59  (
 45111    60   284    20    60  1073     0     111  CharBuffer
 45112    60   284    30    60  1073     0      60  )
 45113    60   284    31    60  1073     0      59  (
 45114    60   284    36    60  1073     0     111  ByteBufferAsCharBufferRB
 45115    60   284    60    60  1073     0      59  (
 45116    60   284    61    60  1073     0      44  this
 45117    60   284    65    60  1073     0      66  ,
 45118    60   285    64    60  1073     0      77  -
 45119    60   285    65    60  1073     0     112  1
 45120    60   285    66    60  1073     0      66  ,
 45121    60   286    64    60  1073     0     112  0
 45122    60   286    65    60  1073     0      66  ,
 45123    60   287    64    60  1073     1     111  size
 45124    60   287    68    60  1073     1      66  ,
 45125    60   288    64    60  1073     1     111  size
 45126    60   288    68    60  1073     1      66  ,
 45127    60   289    64    60  1073     0     111  off
 45128    60   289    67    60  1073     0      60  )
 45129    60   289    68    60  1073     0      60  )
 45130    60   290    17    60  1073     0      65  :
 45131    60   290    19    60  1073     0      59  (
 45132    60   290    20    60  1073     0     111  CharBuffer
 45133    60   290    30    60  1073     0      60  )
 45134    60   290    31    60  1073     0      59  (
 45135    60   290    36    60  1073     0     111  ByteBufferAsCharBufferRL
 45136    60   290    60    60  1073     0      59  (
 45137    60   290    61    60  1073     0      44  this
 45138    60   290    65    60  1073     0      66  ,
 45139    60   291    64    60  1073     0      77  -
 45140    60   291    65    60  1073     0     112  1
 45141    60   291    66    60  1073     0      66  ,
 45142    60   292    64    60  1073     0     112  0
 45143    60   292    65    60  1073     0      66  ,
 45144    60   293    64    60  1073     1     111  size
 45145    60   293    68    60  1073     1      66  ,
 45146    60   294    64    60  1073     1     111  size
 45147    60   294    68    60  1073     1      66  ,
 45148    60   295    64    60  1073     0     111  off
 45149    60   295    67    60  1073     0      60  )
 45150    60   295    68    60  1073     0      60  )
 45151    60   295    69    60  1073     0      60  )
 45152    60   295    70    60  1073     0     102  ;
 45153    60   296     5    60  1073     0      64  }
 45154    60   296     5    60  1073     0    2510  ENDMETHOD
 45155    60   296     5    60  1074     0    2511  STARTMETHOD
 45156    60   313    12    60  1074     0     111  ByteBuffer
 45157    60   313    23    60  1074     0     111  putShort
 45158    60   313    31    60  1074     0      59  (
 45159    60   313    38    60  1074     0     111  x
 45160    60   313    39    60  1074     0      60  )
 45161    60   313    41    60  1074     0      63  {
 45162    60   318     9    60  1074     0      20  throw
 45163    60   318    19    60  1074     0     111  ReadOnlyBufferException
 45164    60   318    42    60  1074     0      59  (
 45165    60   318    43    60  1074     0      60  )
 45166    60   318    44    60  1074     0     102  ;
 45167    60   320     5    60  1074     0      64  }
 45168    60   320     5    60  1074     0    2512  ENDMETHOD
 45169    60   320     5    60  1075     0    2513  STARTMETHOD
 45170    60   322    12    60  1075     0     111  ByteBuffer
 45171    60   322    23    60  1075     0     111  putShort
 45172    60   322    31    60  1075     0      59  (
 45173    60   322    32    60  1075     0      36  int
 45174    60   322    36    60  1075     0     111  i
 45175    60   322    37    60  1075     0      66  ,
 45176    60   322    45    60  1075     0     111  x
 45177    60   322    46    60  1075     0      60  )
 45178    60   322    48    60  1075     0      63  {
 45179    60   327     9    60  1075     0      20  throw
 45180    60   327    19    60  1075     0     111  ReadOnlyBufferException
 45181    60   327    42    60  1075     0      59  (
 45182    60   327    43    60  1075     0      60  )
 45183    60   327    44    60  1075     0     102  ;
 45184    60   329     5    60  1075     0      64  }
 45185    60   329     5    60  1075     0    2514  ENDMETHOD
 45186    60   329     5    60  1076     0    2515  STARTMETHOD
 45187    60   331    12    60  1076     0     111  ShortBuffer
 45188    60   331    24    60  1076     0     111  asShortBuffer
 45189    60   331    37    60  1076     0      59  (
 45190    60   331    38    60  1076     0      60  )
 45191    60   331    40    60  1076     0      63  {
 45192    60   332     9    60  1076     0      36  int
 45193    60   332    13    60  1076     0     111  size
 45194    60   332    18    60  1076     0      67  =
 45195    60   332    20    60  1076     0     111  this.remaining
 45196    60   332    34    60  1076     0      59  (
 45197    60   332    35    60  1076     0      60  )
 45198    60   332    37    60  1076     0      84  >>
 45199    60   332    40    60  1076     0     112  1
 45200    60   332    41    60  1076     0     102  ;
 45201    60   333     9    60  1076     0      36  int
 45202    60   333    13    60  1076     0     111  off
 45203    60   333    17    60  1076     0      67  =
 45204    60   333    19    60  1076     0     111  offset
 45205    60   333    26    60  1076     0      74  +
 45206    60   333    28    60  1076     0     111  position
 45207    60   333    36    60  1076     0      59  (
 45208    60   333    37    60  1076     0      60  )
 45209    60   333    38    60  1076     0     102  ;
 45210    60   334     9    60  1076     0      19  return
 45211    60   334    16    60  1076     0      59  (
 45212    60   334    17    60  1076     0     111  bigEndian
 45213    60   335    17    60  1076     0      58  ?
 45214    60   335    19    60  1076     0      59  (
 45215    60   335    20    60  1076     0     111  ShortBuffer
 45216    60   335    31    60  1076     0      60  )
 45217    60   335    32    60  1076     0      59  (
 45218    60   335    37    60  1076     0     111  ByteBufferAsShortBufferRB
 45219    60   335    62    60  1076     0      59  (
 45220    60   335    63    60  1076     0      44  this
 45221    60   335    67    60  1076     0      66  ,
 45222    60   336    66    60  1076     0      77  -
 45223    60   336    67    60  1076     0     112  1
 45224    60   336    68    60  1076     0      66  ,
 45225    60   337    66    60  1076     0     112  0
 45226    60   337    67    60  1076     0      66  ,
 45227    60   338    66    60  1076     1     111  size
 45228    60   338    70    60  1076     1      66  ,
 45229    60   339    66    60  1076     1     111  size
 45230    60   339    70    60  1076     1      66  ,
 45231    60   340    66    60  1076     0     111  off
 45232    60   340    69    60  1076     0      60  )
 45233    60   340    70    60  1076     0      60  )
 45234    60   341    17    60  1076     0      65  :
 45235    60   341    19    60  1076     0      59  (
 45236    60   341    20    60  1076     0     111  ShortBuffer
 45237    60   341    31    60  1076     0      60  )
 45238    60   341    32    60  1076     0      59  (
 45239    60   341    37    60  1076     0     111  ByteBufferAsShortBufferRL
 45240    60   341    62    60  1076     0      59  (
 45241    60   341    63    60  1076     0      44  this
 45242    60   341    67    60  1076     0      66  ,
 45243    60   342    66    60  1076     0      77  -
 45244    60   342    67    60  1076     0     112  1
 45245    60   342    68    60  1076     0      66  ,
 45246    60   343    66    60  1076     0     112  0
 45247    60   343    67    60  1076     0      66  ,
 45248    60   344    66    60  1076     1     111  size
 45249    60   344    70    60  1076     1      66  ,
 45250    60   345    66    60  1076     1     111  size
 45251    60   345    70    60  1076     1      66  ,
 45252    60   346    66    60  1076     0     111  off
 45253    60   346    69    60  1076     0      60  )
 45254    60   346    70    60  1076     0      60  )
 45255    60   346    71    60  1076     0      60  )
 45256    60   346    72    60  1076     0     102  ;
 45257    60   347     5    60  1076     0      64  }
 45258    60   347     5    60  1076     0    2516  ENDMETHOD
 45259    60   347     5    60  1077     0    2517  STARTMETHOD
 45260    60   364    12    60  1077     0     111  ByteBuffer
 45261    60   364    23    60  1077     0     111  putInt
 45262    60   364    29    60  1077     0      59  (
 45263    60   364    30    60  1077     0      36  int
 45264    60   364    34    60  1077     0     111  x
 45265    60   364    35    60  1077     0      60  )
 45266    60   364    37    60  1077     0      63  {
 45267    60   369     9    60  1077     0      20  throw
 45268    60   369    19    60  1077     0     111  ReadOnlyBufferException
 45269    60   369    42    60  1077     0      59  (
 45270    60   369    43    60  1077     0      60  )
 45271    60   369    44    60  1077     0     102  ;
 45272    60   371     5    60  1077     0      64  }
 45273    60   371     5    60  1077     0    2518  ENDMETHOD
 45274    60   371     5    60  1078     0    2519  STARTMETHOD
 45275    60   373    12    60  1078     0     111  ByteBuffer
 45276    60   373    23    60  1078     0     111  putInt
 45277    60   373    29    60  1078     0      59  (
 45278    60   373    30    60  1078     0      36  int
 45279    60   373    34    60  1078     0     111  i
 45280    60   373    35    60  1078     0      66  ,
 45281    60   373    37    60  1078     0      36  int
 45282    60   373    41    60  1078     0     111  x
 45283    60   373    42    60  1078     0      60  )
 45284    60   373    44    60  1078     0      63  {
 45285    60   378     9    60  1078     0      20  throw
 45286    60   378    19    60  1078     0     111  ReadOnlyBufferException
 45287    60   378    42    60  1078     0      59  (
 45288    60   378    43    60  1078     0      60  )
 45289    60   378    44    60  1078     0     102  ;
 45290    60   380     5    60  1078     0      64  }
 45291    60   380     5    60  1078     0    2520  ENDMETHOD
 45292    60   380     5    60  1079     0    2521  STARTMETHOD
 45293    60   382    12    60  1079     0     111  IntBuffer
 45294    60   382    22    60  1079     0     111  asIntBuffer
 45295    60   382    33    60  1079     0      59  (
 45296    60   382    34    60  1079     0      60  )
 45297    60   382    36    60  1079     0      63  {
 45298    60   383     9    60  1079     0      36  int
 45299    60   383    13    60  1079     0     111  size
 45300    60   383    18    60  1079     0      67  =
 45301    60   383    20    60  1079     0     111  this.remaining
 45302    60   383    34    60  1079     0      59  (
 45303    60   383    35    60  1079     0      60  )
 45304    60   383    37    60  1079     0      84  >>
 45305    60   383    40    60  1079     0     112  2
 45306    60   383    41    60  1079     0     102  ;
 45307    60   384     9    60  1079     0      36  int
 45308    60   384    13    60  1079     0     111  off
 45309    60   384    17    60  1079     0      67  =
 45310    60   384    19    60  1079     0     111  offset
 45311    60   384    26    60  1079     0      74  +
 45312    60   384    28    60  1079     0     111  position
 45313    60   384    36    60  1079     0      59  (
 45314    60   384    37    60  1079     0      60  )
 45315    60   384    38    60  1079     0     102  ;
 45316    60   385     9    60  1079     0      19  return
 45317    60   385    16    60  1079     0      59  (
 45318    60   385    17    60  1079     0     111  bigEndian
 45319    60   386    17    60  1079     0      58  ?
 45320    60   386    19    60  1079     0      59  (
 45321    60   386    20    60  1079     0     111  IntBuffer
 45322    60   386    29    60  1079     0      60  )
 45323    60   386    30    60  1079     0      59  (
 45324    60   386    35    60  1079     0     111  ByteBufferAsIntBufferRB
 45325    60   386    58    60  1079     0      59  (
 45326    60   386    59    60  1079     0      44  this
 45327    60   386    63    60  1079     0      66  ,
 45328    60   387    62    60  1079     0      77  -
 45329    60   387    63    60  1079     0     112  1
 45330    60   387    64    60  1079     0      66  ,
 45331    60   388    62    60  1079     0     112  0
 45332    60   388    63    60  1079     0      66  ,
 45333    60   389    62    60  1079     1     111  size
 45334    60   389    66    60  1079     1      66  ,
 45335    60   390    62    60  1079     1     111  size
 45336    60   390    66    60  1079     1      66  ,
 45337    60   391    62    60  1079     0     111  off
 45338    60   391    65    60  1079     0      60  )
 45339    60   391    66    60  1079     0      60  )
 45340    60   392    17    60  1079     0      65  :
 45341    60   392    19    60  1079     0      59  (
 45342    60   392    20    60  1079     0     111  IntBuffer
 45343    60   392    29    60  1079     0      60  )
 45344    60   392    30    60  1079     0      59  (
 45345    60   392    35    60  1079     0     111  ByteBufferAsIntBufferRL
 45346    60   392    58    60  1079     0      59  (
 45347    60   392    59    60  1079     0      44  this
 45348    60   392    63    60  1079     0      66  ,
 45349    60   393    62    60  1079     0      77  -
 45350    60   393    63    60  1079     0     112  1
 45351    60   393    64    60  1079     0      66  ,
 45352    60   394    62    60  1079     0     112  0
 45353    60   394    63    60  1079     0      66  ,
 45354    60   395    62    60  1079     1     111  size
 45355    60   395    66    60  1079     1      66  ,
 45356    60   396    62    60  1079     1     111  size
 45357    60   396    66    60  1079     1      66  ,
 45358    60   397    62    60  1079     0     111  off
 45359    60   397    65    60  1079     0      60  )
 45360    60   397    66    60  1079     0      60  )
 45361    60   397    67    60  1079     0      60  )
 45362    60   397    68    60  1079     0     102  ;
 45363    60   398     5    60  1079     0      64  }
 45364    60   398     5    60  1079     0    2522  ENDMETHOD
 45365    60   398     5    60  1080     0    2523  STARTMETHOD
 45366    60   415    12    60  1080     0     111  ByteBuffer
 45367    60   415    23    60  1080     0     111  putLong
 45368    60   415    30    60  1080     0      59  (
 45369    60   415    31    60  1080     0      53  long
 45370    60   415    36    60  1080     0     111  x
 45371    60   415    37    60  1080     0      60  )
 45372    60   415    39    60  1080     0      63  {
 45373    60   420     9    60  1080     0      20  throw
 45374    60   420    19    60  1080     0     111  ReadOnlyBufferException
 45375    60   420    42    60  1080     0      59  (
 45376    60   420    43    60  1080     0      60  )
 45377    60   420    44    60  1080     0     102  ;
 45378    60   422     5    60  1080     0      64  }
 45379    60   422     5    60  1080     0    2524  ENDMETHOD
 45380    60   422     5    60  1081     0    2525  STARTMETHOD
 45381    60   424    12    60  1081     0     111  ByteBuffer
 45382    60   424    23    60  1081     0     111  putLong
 45383    60   424    30    60  1081     0      59  (
 45384    60   424    31    60  1081     0      36  int
 45385    60   424    35    60  1081     0     111  i
 45386    60   424    36    60  1081     0      66  ,
 45387    60   424    38    60  1081     0      53  long
 45388    60   424    43    60  1081     0     111  x
 45389    60   424    44    60  1081     0      60  )
 45390    60   424    46    60  1081     0      63  {
 45391    60   429     9    60  1081     0      20  throw
 45392    60   429    19    60  1081     0     111  ReadOnlyBufferException
 45393    60   429    42    60  1081     0      59  (
 45394    60   429    43    60  1081     0      60  )
 45395    60   429    44    60  1081     0     102  ;
 45396    60   431     5    60  1081     0      64  }
 45397    60   431     5    60  1081     0    2526  ENDMETHOD
 45398    60   431     5    60  1082     0    2527  STARTMETHOD
 45399    60   433    12    60  1082     0     111  LongBuffer
 45400    60   433    23    60  1082     0     111  asLongBuffer
 45401    60   433    35    60  1082     0      59  (
 45402    60   433    36    60  1082     0      60  )
 45403    60   433    38    60  1082     0      63  {
 45404    60   434     9    60  1082     0      36  int
 45405    60   434    13    60  1082     0     111  size
 45406    60   434    18    60  1082     0      67  =
 45407    60   434    20    60  1082     0     111  this.remaining
 45408    60   434    34    60  1082     0      59  (
 45409    60   434    35    60  1082     0      60  )
 45410    60   434    37    60  1082     0      84  >>
 45411    60   434    40    60  1082     0     112  3
 45412    60   434    41    60  1082     0     102  ;
 45413    60   435     9    60  1082     0      36  int
 45414    60   435    13    60  1082     0     111  off
 45415    60   435    17    60  1082     0      67  =
 45416    60   435    19    60  1082     0     111  offset
 45417    60   435    26    60  1082     0      74  +
 45418    60   435    28    60  1082     0     111  position
 45419    60   435    36    60  1082     0      59  (
 45420    60   435    37    60  1082     0      60  )
 45421    60   435    38    60  1082     0     102  ;
 45422    60   436     9    60  1082     0      19  return
 45423    60   436    16    60  1082     0      59  (
 45424    60   436    17    60  1082     0     111  bigEndian
 45425    60   437    17    60  1082     0      58  ?
 45426    60   437    19    60  1082     0      59  (
 45427    60   437    20    60  1082     0     111  LongBuffer
 45428    60   437    30    60  1082     0      60  )
 45429    60   437    31    60  1082     0      59  (
 45430    60   437    36    60  1082     0     111  ByteBufferAsLongBufferRB
 45431    60   437    60    60  1082     0      59  (
 45432    60   437    61    60  1082     0      44  this
 45433    60   437    65    60  1082     0      66  ,
 45434    60   438    64    60  1082     0      77  -
 45435    60   438    65    60  1082     0     112  1
 45436    60   438    66    60  1082     0      66  ,
 45437    60   439    64    60  1082     0     112  0
 45438    60   439    65    60  1082     0      66  ,
 45439    60   440    64    60  1082     1     111  size
 45440    60   440    68    60  1082     1      66  ,
 45441    60   441    64    60  1082     1     111  size
 45442    60   441    68    60  1082     1      66  ,
 45443    60   442    64    60  1082     0     111  off
 45444    60   442    67    60  1082     0      60  )
 45445    60   442    68    60  1082     0      60  )
 45446    60   443    17    60  1082     0      65  :
 45447    60   443    19    60  1082     0      59  (
 45448    60   443    20    60  1082     0     111  LongBuffer
 45449    60   443    30    60  1082     0      60  )
 45450    60   443    31    60  1082     0      59  (
 45451    60   443    36    60  1082     0     111  ByteBufferAsLongBufferRL
 45452    60   443    60    60  1082     0      59  (
 45453    60   443    61    60  1082     0      44  this
 45454    60   443    65    60  1082     0      66  ,
 45455    60   444    64    60  1082     0      77  -
 45456    60   444    65    60  1082     0     112  1
 45457    60   444    66    60  1082     0      66  ,
 45458    60   445    64    60  1082     0     112  0
 45459    60   445    65    60  1082     0      66  ,
 45460    60   446    64    60  1082     1     111  size
 45461    60   446    68    60  1082     1      66  ,
 45462    60   447    64    60  1082     1     111  size
 45463    60   447    68    60  1082     1      66  ,
 45464    60   448    64    60  1082     0     111  off
 45465    60   448    67    60  1082     0      60  )
 45466    60   448    68    60  1082     0      60  )
 45467    60   448    69    60  1082     0      60  )
 45468    60   448    70    60  1082     0     102  ;
 45469    60   449     5    60  1082     0      64  }
 45470    60   449     5    60  1082     0    2528  ENDMETHOD
 45471    60   449     5    60  1083     0    2529  STARTMETHOD
 45472    60   466    12    60  1083     0     111  ByteBuffer
 45473    60   466    23    60  1083     0     111  putFloat
 45474    60   466    31    60  1083     0      59  (
 45475    60   466    38    60  1083     0     111  x
 45476    60   466    39    60  1083     0      60  )
 45477    60   466    41    60  1083     0      63  {
 45478    60   471     9    60  1083     0      20  throw
 45479    60   471    19    60  1083     0     111  ReadOnlyBufferException
 45480    60   471    42    60  1083     0      59  (
 45481    60   471    43    60  1083     0      60  )
 45482    60   471    44    60  1083     0     102  ;
 45483    60   473     5    60  1083     0      64  }
 45484    60   473     5    60  1083     0    2530  ENDMETHOD
 45485    60   473     5    60  1084     0    2531  STARTMETHOD
 45486    60   475    12    60  1084     0     111  ByteBuffer
 45487    60   475    23    60  1084     0     111  putFloat
 45488    60   475    31    60  1084     0      59  (
 45489    60   475    32    60  1084     0      36  int
 45490    60   475    36    60  1084     0     111  i
 45491    60   475    37    60  1084     0      66  ,
 45492    60   475    45    60  1084     0     111  x
 45493    60   475    46    60  1084     0      60  )
 45494    60   475    48    60  1084     0      63  {
 45495    60   480     9    60  1084     0      20  throw
 45496    60   480    19    60  1084     0     111  ReadOnlyBufferException
 45497    60   480    42    60  1084     0      59  (
 45498    60   480    43    60  1084     0      60  )
 45499    60   480    44    60  1084     0     102  ;
 45500    60   482     5    60  1084     0      64  }
 45501    60   482     5    60  1084     0    2532  ENDMETHOD
 45502    60   482     5    60  1085     0    2533  STARTMETHOD
 45503    60   484    12    60  1085     0     111  FloatBuffer
 45504    60   484    24    60  1085     0     111  asFloatBuffer
 45505    60   484    37    60  1085     0      59  (
 45506    60   484    38    60  1085     0      60  )
 45507    60   484    40    60  1085     0      63  {
 45508    60   485     9    60  1085     0      36  int
 45509    60   485    13    60  1085     0     111  size
 45510    60   485    18    60  1085     0      67  =
 45511    60   485    20    60  1085     0     111  this.remaining
 45512    60   485    34    60  1085     0      59  (
 45513    60   485    35    60  1085     0      60  )
 45514    60   485    37    60  1085     0      84  >>
 45515    60   485    40    60  1085     0     112  2
 45516    60   485    41    60  1085     0     102  ;
 45517    60   486     9    60  1085     0      36  int
 45518    60   486    13    60  1085     0     111  off
 45519    60   486    17    60  1085     0      67  =
 45520    60   486    19    60  1085     0     111  offset
 45521    60   486    26    60  1085     0      74  +
 45522    60   486    28    60  1085     0     111  position
 45523    60   486    36    60  1085     0      59  (
 45524    60   486    37    60  1085     0      60  )
 45525    60   486    38    60  1085     0     102  ;
 45526    60   487     9    60  1085     0      19  return
 45527    60   487    16    60  1085     0      59  (
 45528    60   487    17    60  1085     0     111  bigEndian
 45529    60   488    17    60  1085     0      58  ?
 45530    60   488    19    60  1085     0      59  (
 45531    60   488    20    60  1085     0     111  FloatBuffer
 45532    60   488    31    60  1085     0      60  )
 45533    60   488    32    60  1085     0      59  (
 45534    60   488    37    60  1085     0     111  ByteBufferAsFloatBufferRB
 45535    60   488    62    60  1085     0      59  (
 45536    60   488    63    60  1085     0      44  this
 45537    60   488    67    60  1085     0      66  ,
 45538    60   489    66    60  1085     0      77  -
 45539    60   489    67    60  1085     0     112  1
 45540    60   489    68    60  1085     0      66  ,
 45541    60   490    66    60  1085     0     112  0
 45542    60   490    67    60  1085     0      66  ,
 45543    60   491    66    60  1085     1     111  size
 45544    60   491    70    60  1085     1      66  ,
 45545    60   492    66    60  1085     1     111  size
 45546    60   492    70    60  1085     1      66  ,
 45547    60   493    66    60  1085     0     111  off
 45548    60   493    69    60  1085     0      60  )
 45549    60   493    70    60  1085     0      60  )
 45550    60   494    17    60  1085     0      65  :
 45551    60   494    19    60  1085     0      59  (
 45552    60   494    20    60  1085     0     111  FloatBuffer
 45553    60   494    31    60  1085     0      60  )
 45554    60   494    32    60  1085     0      59  (
 45555    60   494    37    60  1085     0     111  ByteBufferAsFloatBufferRL
 45556    60   494    62    60  1085     0      59  (
 45557    60   494    63    60  1085     0      44  this
 45558    60   494    67    60  1085     0      66  ,
 45559    60   495    66    60  1085     0      77  -
 45560    60   495    67    60  1085     0     112  1
 45561    60   495    68    60  1085     0      66  ,
 45562    60   496    66    60  1085     0     112  0
 45563    60   496    67    60  1085     0      66  ,
 45564    60   497    66    60  1085     1     111  size
 45565    60   497    70    60  1085     1      66  ,
 45566    60   498    66    60  1085     1     111  size
 45567    60   498    70    60  1085     1      66  ,
 45568    60   499    66    60  1085     0     111  off
 45569    60   499    69    60  1085     0      60  )
 45570    60   499    70    60  1085     0      60  )
 45571    60   499    71    60  1085     0      60  )
 45572    60   499    72    60  1085     0     102  ;
 45573    60   500     5    60  1085     0      64  }
 45574    60   500     5    60  1085     0    2534  ENDMETHOD
 45575    60   500     5    60  1086     0    2535  STARTMETHOD
 45576    60   517    12    60  1086     0     111  ByteBuffer
 45577    60   517    23    60  1086     0     111  putDouble
 45578    60   517    32    60  1086     0      59  (
 45579    60   517    33    60  1086     0      32  double
 45580    60   517    40    60  1086     0     111  x
 45581    60   517    41    60  1086     0      60  )
 45582    60   517    43    60  1086     0      63  {
 45583    60   522     9    60  1086     0      20  throw
 45584    60   522    19    60  1086     0     111  ReadOnlyBufferException
 45585    60   522    42    60  1086     0      59  (
 45586    60   522    43    60  1086     0      60  )
 45587    60   522    44    60  1086     0     102  ;
 45588    60   524     5    60  1086     0      64  }
 45589    60   524     5    60  1086     0    2536  ENDMETHOD
 45590    60   524     5    60  1087     0    2537  STARTMETHOD
 45591    60   526    12    60  1087     0     111  ByteBuffer
 45592    60   526    23    60  1087     0     111  putDouble
 45593    60   526    32    60  1087     0      59  (
 45594    60   526    33    60  1087     0      36  int
 45595    60   526    37    60  1087     0     111  i
 45596    60   526    38    60  1087     0      66  ,
 45597    60   526    40    60  1087     0      32  double
 45598    60   526    47    60  1087     0     111  x
 45599    60   526    48    60  1087     0      60  )
 45600    60   526    50    60  1087     0      63  {
 45601    60   531     9    60  1087     0      20  throw
 45602    60   531    19    60  1087     0     111  ReadOnlyBufferException
 45603    60   531    42    60  1087     0      59  (
 45604    60   531    43    60  1087     0      60  )
 45605    60   531    44    60  1087     0     102  ;
 45606    60   533     5    60  1087     0      64  }
 45607    60   533     5    60  1087     0    2538  ENDMETHOD
 45608    60   533     5    60  1088     0    2539  STARTMETHOD
 45609    60   535    12    60  1088     0     111  DoubleBuffer
 45610    60   535    25    60  1088     0     111  asDoubleBuffer
 45611    60   535    39    60  1088     0      59  (
 45612    60   535    40    60  1088     0      60  )
 45613    60   535    42    60  1088     0      63  {
 45614    60   536     9    60  1088     0      36  int
 45615    60   536    13    60  1088     0     111  size
 45616    60   536    18    60  1088     0      67  =
 45617    60   536    20    60  1088     0     111  this.remaining
 45618    60   536    34    60  1088     0      59  (
 45619    60   536    35    60  1088     0      60  )
 45620    60   536    37    60  1088     0      84  >>
 45621    60   536    40    60  1088     0     112  3
 45622    60   536    41    60  1088     0     102  ;
 45623    60   537     9    60  1088     0      36  int
 45624    60   537    13    60  1088     0     111  off
 45625    60   537    17    60  1088     0      67  =
 45626    60   537    19    60  1088     0     111  offset
 45627    60   537    26    60  1088     0      74  +
 45628    60   537    28    60  1088     0     111  position
 45629    60   537    36    60  1088     0      59  (
 45630    60   537    37    60  1088     0      60  )
 45631    60   537    38    60  1088     0     102  ;
 45632    60   538     9    60  1088     0      19  return
 45633    60   538    16    60  1088     0      59  (
 45634    60   538    17    60  1088     0     111  bigEndian
 45635    60   539    17    60  1088     0      58  ?
 45636    60   539    19    60  1088     0      59  (
 45637    60   539    20    60  1088     0     111  DoubleBuffer
 45638    60   539    32    60  1088     0      60  )
 45639    60   539    33    60  1088     0      59  (
 45640    60   539    38    60  1088     0     111  ByteBufferAsDoubleBufferRB
 45641    60   539    64    60  1088     0      59  (
 45642    60   539    65    60  1088     0      44  this
 45643    60   539    69    60  1088     0      66  ,
 45644    60   540    68    60  1088     0      77  -
 45645    60   540    69    60  1088     0     112  1
 45646    60   540    70    60  1088     0      66  ,
 45647    60   541    68    60  1088     0     112  0
 45648    60   541    69    60  1088     0      66  ,
 45649    60   542    68    60  1088     1     111  size
 45650    60   542    72    60  1088     1      66  ,
 45651    60   543    68    60  1088     1     111  size
 45652    60   543    72    60  1088     1      66  ,
 45653    60   544    68    60  1088     0     111  off
 45654    60   544    71    60  1088     0      60  )
 45655    60   544    72    60  1088     0      60  )
 45656    60   545    17    60  1088     0      65  :
 45657    60   545    19    60  1088     0      59  (
 45658    60   545    20    60  1088     0     111  DoubleBuffer
 45659    60   545    32    60  1088     0      60  )
 45660    60   545    33    60  1088     0      59  (
 45661    60   545    38    60  1088     0     111  ByteBufferAsDoubleBufferRL
 45662    60   545    64    60  1088     0      59  (
 45663    60   545    65    60  1088     0      44  this
 45664    60   545    69    60  1088     0      66  ,
 45665    60   546    68    60  1088     0      77  -
 45666    60   546    69    60  1088     0     112  1
 45667    60   546    70    60  1088     0      66  ,
 45668    60   547    68    60  1088     0     112  0
 45669    60   547    69    60  1088     0      66  ,
 45670    60   548    68    60  1088     1     111  size
 45671    60   548    72    60  1088     1      66  ,
 45672    60   549    68    60  1088     1     111  size
 45673    60   549    72    60  1088     1      66  ,
 45674    60   550    68    60  1088     0     111  off
 45675    60   550    71    60  1088     0      60  )
 45676    60   550    72    60  1088     0      60  )
 45677    60   550    73    60  1088     0      60  )
 45678    60   550    74    60  1088     0     102  ;
 45679    60   551     5    60  1088     0      64  }
 45680    60   551     5    60  1088     0    2540  ENDMETHOD
 45681    60   592     1    60    -1     0      64  }
 45682    60   592     1    60    -1     1    2541  ENDCLASS
 45683    60   592     1    -1    -1     1    2542  ENDFILE C:\Users\RA\javasrc\java\nio\HeapByteBufferR.java
 45684    61     1     1    -1    -1     1    2543  STARTFILE C:\Users\RA\javasrc\java\nio\HeapCharBuffer.java
 45685    61    28     9    -1    -1     0     111  java.nio
 45686    61    28    17    -1    -1     0     102  ;
 45687    61    42     1    61    -1     0    2544  STARTCLASS
 45688    61    42     1    61    -1     0      24  class
 45689    61    42     7    61    -1     0     111  HeapCharBuffer
 45690    61    43     5    61    -1     0      38  extends
 45691    61    43    13    61    -1     0     111  CharBuffer
 45692    61    44     1    61    -1     0      63  {
 45693    61    44     1    61  1089     0    2545  STARTMETHOD
 45694    61    55     5    61  1089     0     111  HeapCharBuffer
 45695    61    55    19    61  1089     0      59  (
 45696    61    55    20    61  1089     0      36  int
 45697    61    55    24    61  1089     0     111  cap
 45698    61    55    27    61  1089     0      66  ,
 45699    61    55    29    61  1089     0      36  int
 45700    61    55    33    61  1089     0     111  lim
 45701    61    55    36    61  1089     0      60  )
 45702    61    55    38    61  1089     0      63  {
 45703    61    57     9    61  1089     0      27  super
 45704    61    57    14    61  1089     0      59  (
 45705    61    57    15    61  1089     0      77  -
 45706    61    57    16    61  1089     0     112  1
 45707    61    57    17    61  1089     0      66  ,
 45708    61    57    19    61  1089     0     112  0
 45709    61    57    20    61  1089     0      66  ,
 45710    61    57    22    61  1089     0     111  lim
 45711    61    57    25    61  1089     0      66  ,
 45712    61    57    27    61  1089     0     111  cap
 45713    61    57    30    61  1089     0      66  ,
 45714    61    57    36    61  1089     0      40  char
 45715    61    57    40    61  1089     0      61  [
 45716    61    57    41    61  1089     0     111  cap
 45717    61    57    44    61  1089     0      62  ]
 45718    61    57    45    61  1089     0      66  ,
 45719    61    57    47    61  1089     0     112  0
 45720    61    57    48    61  1089     0      60  )
 45721    61    57    49    61  1089     0     102  ;
 45722    61    66     5    61  1089     0      64  }
 45723    61    66     5    61  1089     0    2546  ENDMETHOD
 45724    61    66     5    61  1090     0    2547  STARTMETHOD
 45725    61    68     5    61  1090     0     111  HeapCharBuffer
 45726    61    68    19    61  1090     0      59  (
 45727    61    68    20    61  1090     0      40  char
 45728    61    68    24    61  1090     0      61  [
 45729    61    68    25    61  1090     0      62  ]
 45730    61    68    27    61  1090     0     111  buf
 45731    61    68    30    61  1090     0      66  ,
 45732    61    68    32    61  1090     0      36  int
 45733    61    68    36    61  1090     0     111  off
 45734    61    68    39    61  1090     0      66  ,
 45735    61    68    41    61  1090     0      36  int
 45736    61    68    45    61  1090     0     111  len
 45737    61    68    48    61  1090     0      60  )
 45738    61    68    50    61  1090     0      63  {
 45739    61    70     9    61  1090     0      27  super
 45740    61    70    14    61  1090     0      59  (
 45741    61    70    15    61  1090     0      77  -
 45742    61    70    16    61  1090     0     112  1
 45743    61    70    17    61  1090     0      66  ,
 45744    61    70    19    61  1090     0     111  off
 45745    61    70    22    61  1090     0      66  ,
 45746    61    70    24    61  1090     0     111  off
 45747    61    70    28    61  1090     0      74  +
 45748    61    70    30    61  1090     0     111  len
 45749    61    70    33    61  1090     0      66  ,
 45750    61    70    35    61  1090     0     111  buf.length
 45751    61    70    45    61  1090     0      66  ,
 45752    61    70    47    61  1090     0     111  buf
 45753    61    70    50    61  1090     0      66  ,
 45754    61    70    52    61  1090     0     112  0
 45755    61    70    53    61  1090     0      60  )
 45756    61    70    54    61  1090     0     102  ;
 45757    61    79     5    61  1090     0      64  }
 45758    61    79     5    61  1090     0    2548  ENDMETHOD
 45759    61    79     5    61  1091     0    2549  STARTMETHOD
 45760    61    81     5    61  1091     0      23  protected
 45761    61    81    15    61  1091     0     111  HeapCharBuffer
 45762    61    81    29    61  1091     0      59  (
 45763    61    81    30    61  1091     0      40  char
 45764    61    81    34    61  1091     0      61  [
 45765    61    81    35    61  1091     0      62  ]
 45766    61    81    37    61  1091     0     111  buf
 45767    61    81    40    61  1091     0      66  ,
 45768    61    82    36    61  1091     0      36  int
 45769    61    82    40    61  1091     0     111  mark
 45770    61    82    44    61  1091     0      66  ,
 45771    61    82    46    61  1091     0      36  int
 45772    61    82    50    61  1091     0     111  pos
 45773    61    82    53    61  1091     0      66  ,
 45774    61    82    55    61  1091     0      36  int
 45775    61    82    59    61  1091     0     111  lim
 45776    61    82    62    61  1091     0      66  ,
 45777    61    82    64    61  1091     0      36  int
 45778    61    82    68    61  1091     0     111  cap
 45779    61    82    71    61  1091     0      66  ,
 45780    61    83    36    61  1091     0      36  int
 45781    61    83    40    61  1091     0     111  off
 45782    61    83    43    61  1091     0      60  )
 45783    61    84     5    61  1091     0      63  {
 45784    61    86     9    61  1091     0      27  super
 45785    61    86    14    61  1091     0      59  (
 45786    61    86    15    61  1091     0     111  mark
 45787    61    86    19    61  1091     0      66  ,
 45788    61    86    21    61  1091     0     111  pos
 45789    61    86    24    61  1091     0      66  ,
 45790    61    86    26    61  1091     0     111  lim
 45791    61    86    29    61  1091     0      66  ,
 45792    61    86    31    61  1091     0     111  cap
 45793    61    86    34    61  1091     0      66  ,
 45794    61    86    36    61  1091     0     111  buf
 45795    61    86    39    61  1091     0      66  ,
 45796    61    86    41    61  1091     0     111  off
 45797    61    86    44    61  1091     0      60  )
 45798    61    86    45    61  1091     0     102  ;
 45799    61    95     5    61  1091     0      64  }
 45800    61    95     5    61  1091     0    2550  ENDMETHOD
 45801    61    95     5    61  1092     0    2551  STARTMETHOD
 45802    61    97    12    61  1092     0     111  CharBuffer
 45803    61    97    23    61  1092     0     111  slice
 45804    61    97    28    61  1092     0      59  (
 45805    61    97    29    61  1092     0      60  )
 45806    61    97    31    61  1092     0      63  {
 45807    61    98     9    61  1092     0      19  return
 45808    61    98    20    61  1092     0     111  HeapCharBuffer
 45809    61    98    34    61  1092     0      59  (
 45810    61    98    35    61  1092     0     111  hb
 45811    61    98    37    61  1092     0      66  ,
 45812    61    99    41    61  1092     0      77  -
 45813    61    99    42    61  1092     0     112  1
 45814    61    99    43    61  1092     0      66  ,
 45815    61   100    41    61  1092     0     112  0
 45816    61   100    42    61  1092     0      66  ,
 45817    61   101    41    61  1092     1     111  this.remaining
 45818    61   101    55    61  1092     1      59  (
 45819    61   101    56    61  1092     1      60  )
 45820    61   101    57    61  1092     1      66  ,
 45821    61   102    41    61  1092     1     111  this.remaining
 45822    61   102    55    61  1092     1      59  (
 45823    61   102    56    61  1092     1      60  )
 45824    61   102    57    61  1092     1      66  ,
 45825    61   103    41    61  1092     0     111  this.position
 45826    61   103    54    61  1092     0      59  (
 45827    61   103    55    61  1092     0      60  )
 45828    61   103    57    61  1092     0      74  +
 45829    61   103    59    61  1092     0     111  offset
 45830    61   103    65    61  1092     0      60  )
 45831    61   103    66    61  1092     0     102  ;
 45832    61   104     5    61  1092     0      64  }
 45833    61   104     5    61  1092     0    2552  ENDMETHOD
 45834    61   104     5    61  1093     0    2553  STARTMETHOD
 45835    61   106    12    61  1093     0     111  CharBuffer
 45836    61   106    23    61  1093     0     111  duplicate
 45837    61   106    32    61  1093     0      59  (
 45838    61   106    33    61  1093     0      60  )
 45839    61   106    35    61  1093     0      63  {
 45840    61   107     9    61  1093     0      19  return
 45841    61   107    20    61  1093     0     111  HeapCharBuffer
 45842    61   107    34    61  1093     0      59  (
 45843    61   107    35    61  1093     0     111  hb
 45844    61   107    37    61  1093     0      66  ,
 45845    61   108    41    61  1093     1     111  this.markValue
 45846    61   108    55    61  1093     1      59  (
 45847    61   108    56    61  1093     1      60  )
 45848    61   108    57    61  1093     1      66  ,
 45849    61   109    41    61  1093     1     111  this.position
 45850    61   109    54    61  1093     1      59  (
 45851    61   109    55    61  1093     1      60  )
 45852    61   109    56    61  1093     1      66  ,
 45853    61   110    41    61  1093     1     111  this.limit
 45854    61   110    51    61  1093     1      59  (
 45855    61   110    52    61  1093     1      60  )
 45856    61   110    53    61  1093     1      66  ,
 45857    61   111    41    61  1093     1     111  this.capacity
 45858    61   111    54    61  1093     1      59  (
 45859    61   111    55    61  1093     1      60  )
 45860    61   111    56    61  1093     1      66  ,
 45861    61   112    41    61  1093     0     111  offset
 45862    61   112    47    61  1093     0      60  )
 45863    61   112    48    61  1093     0     102  ;
 45864    61   113     5    61  1093     0      64  }
 45865    61   113     5    61  1093     0    2554  ENDMETHOD
 45866    61   113     5    61  1094     0    2555  STARTMETHOD
 45867    61   115    12    61  1094     0     111  CharBuffer
 45868    61   115    23    61  1094     0     111  asReadOnlyBuffer
 45869    61   115    39    61  1094     0      59  (
 45870    61   115    40    61  1094     0      60  )
 45871    61   115    42    61  1094     0      63  {
 45872    61   117     9    61  1094     0      19  return
 45873    61   117    20    61  1094     0     111  HeapCharBufferR
 45874    61   117    35    61  1094     0      59  (
 45875    61   117    36    61  1094     0     111  hb
 45876    61   117    38    61  1094     0      66  ,
 45877    61   118    38    61  1094     1     111  this.markValue
 45878    61   118    52    61  1094     1      59  (
 45879    61   118    53    61  1094     1      60  )
 45880    61   118    54    61  1094     1      66  ,
 45881    61   119    38    61  1094     1     111  this.position
 45882    61   119    51    61  1094     1      59  (
 45883    61   119    52    61  1094     1      60  )
 45884    61   119    53    61  1094     1      66  ,
 45885    61   120    38    61  1094     1     111  this.limit
 45886    61   120    48    61  1094     1      59  (
 45887    61   120    49    61  1094     1      60  )
 45888    61   120    50    61  1094     1      66  ,
 45889    61   121    38    61  1094     1     111  this.capacity
 45890    61   121    51    61  1094     1      59  (
 45891    61   121    52    61  1094     1      60  )
 45892    61   121    53    61  1094     1      66  ,
 45893    61   122    38    61  1094     0     111  offset
 45894    61   122    44    61  1094     0      60  )
 45895    61   122    45    61  1094     0     102  ;
 45896    61   126     5    61  1094     0      64  }
 45897    61   126     5    61  1094     0    2556  ENDMETHOD
 45898    61   126     5    61  1095     0    2557  STARTMETHOD
 45899    61   130     5    61  1095     0      23  protected
 45900    61   130    15    61  1095     0      36  int
 45901    61   130    19    61  1095     0     111  ix
 45902    61   130    21    61  1095     0      59  (
 45903    61   130    22    61  1095     0      36  int
 45904    61   130    26    61  1095     0     111  i
 45905    61   130    27    61  1095     0      60  )
 45906    61   130    29    61  1095     0      63  {
 45907    61   131     9    61  1095     0      19  return
 45908    61   131    16    61  1095     0     111  i
 45909    61   131    18    61  1095     0      74  +
 45910    61   131    20    61  1095     0     111  offset
 45911    61   131    26    61  1095     0     102  ;
 45912    61   132     5    61  1095     0      64  }
 45913    61   132     5    61  1095     0    2558  ENDMETHOD
 45914    61   132     5    61  1096     0    2559  STARTMETHOD
 45915    61   134    12    61  1096     0      40  char
 45916    61   134    17    61  1096     0     111  get
 45917    61   134    20    61  1096     0      59  (
 45918    61   134    21    61  1096     0      60  )
 45919    61   134    23    61  1096     0      63  {
 45920    61   135     9    61  1096     0      19  return
 45921    61   135    16    61  1096     0     111  hb
 45922    61   135    18    61  1096     0      61  [
 45923    61   135    19    61  1096     0     111  ix
 45924    61   135    21    61  1096     0      59  (
 45925    61   135    22    61  1096     0     111  nextGetIndex
 45926    61   135    34    61  1096     0      59  (
 45927    61   135    35    61  1096     0      60  )
 45928    61   135    36    61  1096     0      60  )
 45929    61   135    37    61  1096     0      62  ]
 45930    61   135    38    61  1096     0     102  ;
 45931    61   136     5    61  1096     0      64  }
 45932    61   136     5    61  1096     0    2560  ENDMETHOD
 45933    61   136     5    61  1097     0    2561  STARTMETHOD
 45934    61   138    12    61  1097     0      40  char
 45935    61   138    17    61  1097     0     111  get
 45936    61   138    20    61  1097     0      59  (
 45937    61   138    21    61  1097     0      36  int
 45938    61   138    25    61  1097     0     111  i
 45939    61   138    26    61  1097     0      60  )
 45940    61   138    28    61  1097     0      63  {
 45941    61   139     9    61  1097     0      19  return
 45942    61   139    16    61  1097     0     111  hb
 45943    61   139    18    61  1097     0      61  [
 45944    61   139    19    61  1097     0     111  ix
 45945    61   139    21    61  1097     0      59  (
 45946    61   139    22    61  1097     0     111  checkIndex
 45947    61   139    32    61  1097     0      59  (
 45948    61   139    33    61  1097     0     111  i
 45949    61   139    34    61  1097     0      60  )
 45950    61   139    35    61  1097     0      60  )
 45951    61   139    36    61  1097     0      62  ]
 45952    61   139    37    61  1097     0     102  ;
 45953    61   140     5    61  1097     0      64  }
 45954    61   140     5    61  1097     0    2562  ENDMETHOD
 45955    61   140     5    61  1098     0    2563  STARTMETHOD
 45956    61   142    12    61  1098     0     111  CharBuffer
 45957    61   142    23    61  1098     0     111  get
 45958    61   142    26    61  1098     0      59  (
 45959    61   142    27    61  1098     0      40  char
 45960    61   142    31    61  1098     0      61  [
 45961    61   142    32    61  1098     0      62  ]
 45962    61   142    34    61  1098     0     111  dst
 45963    61   142    37    61  1098     0      66  ,
 45964    61   142    39    61  1098     0      36  int
 45965    61   142    43    61  1098     0     111  offset
 45966    61   142    49    61  1098     0      66  ,
 45967    61   142    51    61  1098     0      36  int
 45968    61   142    55    61  1098     0     111  length
 45969    61   142    61    61  1098     0      60  )
 45970    61   142    63    61  1098     0      63  {
 45971    61   143     9    61  1098     0     111  checkBounds
 45972    61   143    20    61  1098     0      59  (
 45973    61   143    21    61  1098     0     111  offset
 45974    61   143    27    61  1098     0      66  ,
 45975    61   143    29    61  1098     0     111  length
 45976    61   143    35    61  1098     0      66  ,
 45977    61   143    37    61  1098     0     111  dst.length
 45978    61   143    47    61  1098     0      60  )
 45979    61   143    48    61  1098     0     102  ;
 45980    61   144     9    61  1098     0      31  if
 45981    61   144    12    61  1098     0      59  (
 45982    61   144    13    61  1098     0     111  length
 45983    61   144    20    61  1098     0      89  >
 45984    61   144    22    61  1098     0     111  remaining
 45985    61   144    31    61  1098     0      59  (
 45986    61   144    32    61  1098     0      60  )
 45987    61   144    33    61  1098     0      60  )
 45988    61   145    13    61  1098     0      20  throw
 45989    61   145    23    61  1098     0     111  BufferUnderflowException
 45990    61   145    47    61  1098     0      59  (
 45991    61   145    48    61  1098     0      60  )
 45992    61   145    49    61  1098     0     102  ;
 45993    61   146     9    61  1098     0     111  System.arraycopy
 45994    61   146    25    61  1098     0      59  (
 45995    61   146    26    61  1098     0     111  hb
 45996    61   146    28    61  1098     0      66  ,
 45997    61   146    30    61  1098     0     111  ix
 45998    61   146    32    61  1098     0      59  (
 45999    61   146    33    61  1098     0     111  position
 46000    61   146    41    61  1098     0      59  (
 46001    61   146    42    61  1098     0      60  )
 46002    61   146    43    61  1098     0      60  )
 46003    61   146    44    61  1098     0      66  ,
 46004    61   146    46    61  1098     0     111  dst
 46005    61   146    49    61  1098     0      66  ,
 46006    61   146    51    61  1098     0     111  offset
 46007    61   146    57    61  1098     0      66  ,
 46008    61   146    59    61  1098     0     111  length
 46009    61   146    65    61  1098     0      60  )
 46010    61   146    66    61  1098     0     102  ;
 46011    61   147     9    61  1098     0     111  position
 46012    61   147    17    61  1098     0      59  (
 46013    61   147    18    61  1098     0     111  position
 46014    61   147    26    61  1098     0      59  (
 46015    61   147    27    61  1098     0      60  )
 46016    61   147    29    61  1098     0      74  +
 46017    61   147    31    61  1098     0     111  length
 46018    61   147    37    61  1098     0      60  )
 46019    61   147    38    61  1098     0     102  ;
 46020    61   148     9    61  1098     0      19  return
 46021    61   148    16    61  1098     0      44  this
 46022    61   148    20    61  1098     1     102  ;
 46023    61   149     5    61  1098     1      64  }
 46024    61   149     5    61  1098     0    2564  ENDMETHOD
 46025    61   149     5    61  1099     0    2565  STARTMETHOD
 46026    61   151    12    61  1099     0      39  boolean
 46027    61   151    20    61  1099     0     111  isDirect
 46028    61   151    28    61  1099     0      59  (
 46029    61   151    29    61  1099     0      60  )
 46030    61   151    31    61  1099     0      63  {
 46031    61   152     9    61  1099     0      19  return
 46032    61   152    16    61  1099     0      43  false
 46033    61   152    21    61  1099     1     102  ;
 46034    61   153     5    61  1099     1      64  }
 46035    61   153     5    61  1099     0    2566  ENDMETHOD
 46036    61   153     5    61  1100     0    2567  STARTMETHOD
 46037    61   157    12    61  1100     0      39  boolean
 46038    61   157    20    61  1100     0     111  isReadOnly
 46039    61   157    30    61  1100     0      59  (
 46040    61   157    31    61  1100     0      60  )
 46041    61   157    33    61  1100     0      63  {
 46042    61   158     9    61  1100     0      19  return
 46043    61   158    16    61  1100     0      43  false
 46044    61   158    21    61  1100     1     102  ;
 46045    61   159     5    61  1100     1      64  }
 46046    61   159     5    61  1100     0    2568  ENDMETHOD
 46047    61   159     5    61  1101     0    2569  STARTMETHOD
 46048    61   161    12    61  1101     0     111  CharBuffer
 46049    61   161    23    61  1101     0     111  put
 46050    61   161    26    61  1101     0      59  (
 46051    61   161    27    61  1101     0      40  char
 46052    61   161    32    61  1101     0     111  x
 46053    61   161    33    61  1101     0      60  )
 46054    61   161    35    61  1101     0      63  {
 46055    61   163     9    61  1101     0     111  hb
 46056    61   163    11    61  1101     0      61  [
 46057    61   163    12    61  1101     0     111  ix
 46058    61   163    14    61  1101     0      59  (
 46059    61   163    15    61  1101     0     111  nextPutIndex
 46060    61   163    27    61  1101     0      59  (
 46061    61   163    28    61  1101     0      60  )
 46062    61   163    29    61  1101     0      60  )
 46063    61   163    30    61  1101     0      62  ]
 46064    61   163    32    61  1101     0      67  =
 46065    61   163    34    61  1101     0     111  x
 46066    61   163    35    61  1101     0     102  ;
 46067    61   164     9    61  1101     0      19  return
 46068    61   164    16    61  1101     0      44  this
 46069    61   164    20    61  1101     0     102  ;
 46070    61   168     5    61  1101     0      64  }
 46071    61   168     5    61  1101     0    2570  ENDMETHOD
 46072    61   168     5    61  1102     0    2571  STARTMETHOD
 46073    61   170    12    61  1102     0     111  CharBuffer
 46074    61   170    23    61  1102     0     111  put
 46075    61   170    26    61  1102     0      59  (
 46076    61   170    27    61  1102     0      36  int
 46077    61   170    31    61  1102     0     111  i
 46078    61   170    32    61  1102     0      66  ,
 46079    61   170    34    61  1102     0      40  char
 46080    61   170    39    61  1102     0     111  x
 46081    61   170    40    61  1102     0      60  )
 46082    61   170    42    61  1102     0      63  {
 46083    61   172     9    61  1102     0     111  hb
 46084    61   172    11    61  1102     0      61  [
 46085    61   172    12    61  1102     0     111  ix
 46086    61   172    14    61  1102     0      59  (
 46087    61   172    15    61  1102     0     111  checkIndex
 46088    61   172    25    61  1102     0      59  (
 46089    61   172    26    61  1102     0     111  i
 46090    61   172    27    61  1102     0      60  )
 46091    61   172    28    61  1102     0      60  )
 46092    61   172    29    61  1102     0      62  ]
 46093    61   172    31    61  1102     0      67  =
 46094    61   172    33    61  1102     0     111  x
 46095    61   172    34    61  1102     0     102  ;
 46096    61   173     9    61  1102     0      19  return
 46097    61   173    16    61  1102     0      44  this
 46098    61   173    20    61  1102     0     102  ;
 46099    61   177     5    61  1102     0      64  }
 46100    61   177     5    61  1102     0    2572  ENDMETHOD
 46101    61   177     5    61  1103     0    2573  STARTMETHOD
 46102    61   179    12    61  1103     0     111  CharBuffer
 46103    61   179    23    61  1103     0     111  put
 46104    61   179    26    61  1103     0      59  (
 46105    61   179    27    61  1103     0      40  char
 46106    61   179    31    61  1103     0      61  [
 46107    61   179    32    61  1103     0      62  ]
 46108    61   179    34    61  1103     0     111  src
 46109    61   179    37    61  1103     0      66  ,
 46110    61   179    39    61  1103     0      36  int
 46111    61   179    43    61  1103     0     111  offset
 46112    61   179    49    61  1103     0      66  ,
 46113    61   179    51    61  1103     0      36  int
 46114    61   179    55    61  1103     0     111  length
 46115    61   179    61    61  1103     0      60  )
 46116    61   179    63    61  1103     0      63  {
 46117    61   181     9    61  1103     0     111  checkBounds
 46118    61   181    20    61  1103     0      59  (
 46119    61   181    21    61  1103     0     111  offset
 46120    61   181    27    61  1103     0      66  ,
 46121    61   181    29    61  1103     0     111  length
 46122    61   181    35    61  1103     0      66  ,
 46123    61   181    37    61  1103     0     111  src.length
 46124    61   181    47    61  1103     0      60  )
 46125    61   181    48    61  1103     0     102  ;
 46126    61   182     9    61  1103     0      31  if
 46127    61   182    12    61  1103     0      59  (
 46128    61   182    13    61  1103     0     111  length
 46129    61   182    20    61  1103     0      89  >
 46130    61   182    22    61  1103     0     111  remaining
 46131    61   182    31    61  1103     0      59  (
 46132    61   182    32    61  1103     0      60  )
 46133    61   182    33    61  1103     0      60  )
 46134    61   183    13    61  1103     0      20  throw
 46135    61   183    23    61  1103     0     111  BufferOverflowException
 46136    61   183    46    61  1103     0      59  (
 46137    61   183    47    61  1103     0      60  )
 46138    61   183    48    61  1103     0     102  ;
 46139    61   184     9    61  1103     0     111  System.arraycopy
 46140    61   184    25    61  1103     0      59  (
 46141    61   184    26    61  1103     0     111  src
 46142    61   184    29    61  1103     0      66  ,
 46143    61   184    31    61  1103     0     111  offset
 46144    61   184    37    61  1103     0      66  ,
 46145    61   184    39    61  1103     0     111  hb
 46146    61   184    41    61  1103     0      66  ,
 46147    61   184    43    61  1103     0     111  ix
 46148    61   184    45    61  1103     0      59  (
 46149    61   184    46    61  1103     0     111  position
 46150    61   184    54    61  1103     0      59  (
 46151    61   184    55    61  1103     0      60  )
 46152    61   184    56    61  1103     0      60  )
 46153    61   184    57    61  1103     0      66  ,
 46154    61   184    59    61  1103     0     111  length
 46155    61   184    65    61  1103     0      60  )
 46156    61   184    66    61  1103     0     102  ;
 46157    61   185     9    61  1103     0     111  position
 46158    61   185    17    61  1103     0      59  (
 46159    61   185    18    61  1103     0     111  position
 46160    61   185    26    61  1103     0      59  (
 46161    61   185    27    61  1103     0      60  )
 46162    61   185    29    61  1103     0      74  +
 46163    61   185    31    61  1103     0     111  length
 46164    61   185    37    61  1103     0      60  )
 46165    61   185    38    61  1103     0     102  ;
 46166    61   186     9    61  1103     0      19  return
 46167    61   186    16    61  1103     0      44  this
 46168    61   186    20    61  1103     0     102  ;
 46169    61   190     5    61  1103     0      64  }
 46170    61   190     5    61  1103     0    2574  ENDMETHOD
 46171    61   190     5    61  1104     0    2575  STARTMETHOD
 46172    61   192    12    61  1104     0     111  CharBuffer
 46173    61   192    23    61  1104     0     111  put
 46174    61   192    26    61  1104     0      59  (
 46175    61   192    27    61  1104     0     111  CharBuffer
 46176    61   192    38    61  1104     0     111  src
 46177    61   192    41    61  1104     0      60  )
 46178    61   192    43    61  1104     0      63  {
 46179    61   194     9    61  1104     0      31  if
 46180    61   194    12    61  1104     0      59  (
 46181    61   194    13    61  1104     0     111  src
 46182    61   194    28    61  1104     0     111  HeapCharBuffer
 46183    61   194    42    61  1104     0      60  )
 46184    61   194    44    61  1104     0      63  {
 46185    61   195    13    61  1104     0      31  if
 46186    61   195    16    61  1104     0      59  (
 46187    61   195    17    61  1104     0     111  src
 46188    61   195    21    61  1104     0      68  ==
 46189    61   195    24    61  1104     0      44  this
 46190    61   195    28    61  1104     0      60  )
 46191    61   196    17    61  1104     0      20  throw
 46192    61   196    27    61  1104     0     111  IllegalArgumentException
 46193    61   196    51    61  1104     0      59  (
 46194    61   196    52    61  1104     0      60  )
 46195    61   196    53    61  1104     0     102  ;
 46196    61   197    13    61  1104     0     111  HeapCharBuffer
 46197    61   197    28    61  1104     0     111  sb
 46198    61   197    31    61  1104     0      67  =
 46199    61   197    33    61  1104     0      59  (
 46200    61   197    34    61  1104     0     111  HeapCharBuffer
 46201    61   197    48    61  1104     0      60  )
 46202    61   197    49    61  1104     0     111  src
 46203    61   197    52    61  1104     0     102  ;
 46204    61   198    13    61  1104     0      36  int
 46205    61   198    17    61  1104     0     111  n
 46206    61   198    19    61  1104     0      67  =
 46207    61   198    21    61  1104     0     111  sb.remaining
 46208    61   198    33    61  1104     0      59  (
 46209    61   198    34    61  1104     0      60  )
 46210    61   198    35    61  1104     0     102  ;
 46211    61   199    13    61  1104     0      31  if
 46212    61   199    16    61  1104     0      59  (
 46213    61   199    17    61  1104     0     111  n
 46214    61   199    19    61  1104     0      89  >
 46215    61   199    21    61  1104     0     111  remaining
 46216    61   199    30    61  1104     0      59  (
 46217    61   199    31    61  1104     0      60  )
 46218    61   199    32    61  1104     0      60  )
 46219    61   200    17    61  1104     0      20  throw
 46220    61   200    27    61  1104     0     111  BufferOverflowException
 46221    61   200    50    61  1104     0      59  (
 46222    61   200    51    61  1104     0      60  )
 46223    61   200    52    61  1104     0     102  ;
 46224    61   201    13    61  1104     0     111  System.arraycopy
 46225    61   201    29    61  1104     0      59  (
 46226    61   201    30    61  1104     0     111  sb.hb
 46227    61   201    35    61  1104     0      66  ,
 46228    61   201    37    61  1104     0     111  sb.ix
 46229    61   201    42    61  1104     0      59  (
 46230    61   201    43    61  1104     0     111  sb.position
 46231    61   201    54    61  1104     0      59  (
 46232    61   201    55    61  1104     0      60  )
 46233    61   201    56    61  1104     0      60  )
 46234    61   201    57    61  1104     0      66  ,
 46235    61   202    30    61  1104     0     111  hb
 46236    61   202    32    61  1104     0      66  ,
 46237    61   202    34    61  1104     0     111  ix
 46238    61   202    36    61  1104     0      59  (
 46239    61   202    37    61  1104     0     111  position
 46240    61   202    45    61  1104     0      59  (
 46241    61   202    46    61  1104     0      60  )
 46242    61   202    47    61  1104     0      60  )
 46243    61   202    48    61  1104     0      66  ,
 46244    61   202    50    61  1104     0     111  n
 46245    61   202    51    61  1104     0      60  )
 46246    61   202    52    61  1104     0     102  ;
 46247    61   203    13    61  1104     1     111  sb.position
 46248    61   203    24    61  1104     1      59  (
 46249    61   203    25    61  1104     1     111  sb.position
 46250    61   203    36    61  1104     1      59  (
 46251    61   203    37    61  1104     1      60  )
 46252    61   203    39    61  1104     1      74  +
 46253    61   203    41    61  1104     1     111  n
 46254    61   203    42    61  1104     1      60  )
 46255    61   203    43    61  1104     1     102  ;
 46256    61   204    13    61  1104     1     111  position
 46257    61   204    21    61  1104     1      59  (
 46258    61   204    22    61  1104     1     111  position
 46259    61   204    30    61  1104     1      59  (
 46260    61   204    31    61  1104     1      60  )
 46261    61   204    33    61  1104     1      74  +
 46262    61   204    35    61  1104     1     111  n
 46263    61   204    36    61  1104     1      60  )
 46264    61   204    37    61  1104     1     102  ;
 46265    61   205     9    61  1104     0      64  }
 46266    61   205    11    61  1104     0      48  else
 46267    61   205    16    61  1104     0      31  if
 46268    61   205    19    61  1104     0      59  (
 46269    61   205    20    61  1104     0     111  src.isDirect
 46270    61   205    32    61  1104     0      59  (
 46271    61   205    33    61  1104     0      60  )
 46272    61   205    34    61  1104     0      60  )
 46273    61   205    36    61  1104     0      63  {
 46274    61   206    13    61  1104     0      36  int
 46275    61   206    17    61  1104     0     111  n
 46276    61   206    19    61  1104     0      67  =
 46277    61   206    21    61  1104     0     111  src.remaining
 46278    61   206    34    61  1104     0      59  (
 46279    61   206    35    61  1104     0      60  )
 46280    61   206    36    61  1104     0     102  ;
 46281    61   207    13    61  1104     0      31  if
 46282    61   207    16    61  1104     0      59  (
 46283    61   207    17    61  1104     0     111  n
 46284    61   207    19    61  1104     0      89  >
 46285    61   207    21    61  1104     0     111  remaining
 46286    61   207    30    61  1104     0      59  (
 46287    61   207    31    61  1104     0      60  )
 46288    61   207    32    61  1104     0      60  )
 46289    61   208    17    61  1104     0      20  throw
 46290    61   208    27    61  1104     0     111  BufferOverflowException
 46291    61   208    50    61  1104     0      59  (
 46292    61   208    51    61  1104     0      60  )
 46293    61   208    52    61  1104     0     102  ;
 46294    61   209    13    61  1104     0     111  src.get
 46295    61   209    20    61  1104     0      59  (
 46296    61   209    21    61  1104     0     111  hb
 46297    61   209    23    61  1104     0      66  ,
 46298    61   209    25    61  1104     0     111  ix
 46299    61   209    27    61  1104     0      59  (
 46300    61   209    28    61  1104     0     111  position
 46301    61   209    36    61  1104     0      59  (
 46302    61   209    37    61  1104     0      60  )
 46303    61   209    38    61  1104     0      60  )
 46304    61   209    39    61  1104     0      66  ,
 46305    61   209    41    61  1104     0     111  n
 46306    61   209    42    61  1104     0      60  )
 46307    61   209    43    61  1104     0     102  ;
 46308    61   210    13    61  1104     0     111  position
 46309    61   210    21    61  1104     0      59  (
 46310    61   210    22    61  1104     0     111  position
 46311    61   210    30    61  1104     0      59  (
 46312    61   210    31    61  1104     0      60  )
 46313    61   210    33    61  1104     0      74  +
 46314    61   210    35    61  1104     0     111  n
 46315    61   210    36    61  1104     0      60  )
 46316    61   210    37    61  1104     0     102  ;
 46317    61   211     9    61  1104     0      64  }
 46318    61   211    11    61  1104     0      48  else
 46319    61   211    16    61  1104     0      63  {
 46320    61   212    13    61  1104     0     111  super.put
 46321    61   212    22    61  1104     0      59  (
 46322    61   212    23    61  1104     0     111  src
 46323    61   212    26    61  1104     0      60  )
 46324    61   212    27    61  1104     0     102  ;
 46325    61   213     9    61  1104     0      64  }
 46326    61   214     9    61  1104     0      19  return
 46327    61   214    16    61  1104     0      44  this
 46328    61   214    20    61  1104     0     102  ;
 46329    61   218     5    61  1104     0      64  }
 46330    61   218     5    61  1104     0    2576  ENDMETHOD
 46331    61   218     5    61  1105     0    2577  STARTMETHOD
 46332    61   220    12    61  1105     0     111  CharBuffer
 46333    61   220    23    61  1105     0     111  compact
 46334    61   220    30    61  1105     0      59  (
 46335    61   220    31    61  1105     0      60  )
 46336    61   220    33    61  1105     0      63  {
 46337    61   222     9    61  1105     0     111  System.arraycopy
 46338    61   222    25    61  1105     0      59  (
 46339    61   222    26    61  1105     0     111  hb
 46340    61   222    28    61  1105     0      66  ,
 46341    61   222    30    61  1105     0     111  ix
 46342    61   222    32    61  1105     0      59  (
 46343    61   222    33    61  1105     0     111  position
 46344    61   222    41    61  1105     0      59  (
 46345    61   222    42    61  1105     0      60  )
 46346    61   222    43    61  1105     0      60  )
 46347    61   222    44    61  1105     0      66  ,
 46348    61   222    46    61  1105     0     111  hb
 46349    61   222    48    61  1105     0      66  ,
 46350    61   222    50    61  1105     0     111  ix
 46351    61   222    52    61  1105     0      59  (
 46352    61   222    53    61  1105     0     112  0
 46353    61   222    54    61  1105     0      60  )
 46354    61   222    55    61  1105     0      66  ,
 46355    61   222    57    61  1105     0     111  remaining
 46356    61   222    66    61  1105     0      59  (
 46357    61   222    67    61  1105     0      60  )
 46358    61   222    68    61  1105     0      60  )
 46359    61   222    69    61  1105     0     102  ;
 46360    61   223     9    61  1105     1     111  position
 46361    61   223    17    61  1105     1      59  (
 46362    61   223    18    61  1105     1     111  remaining
 46363    61   223    27    61  1105     1      59  (
 46364    61   223    28    61  1105     1      60  )
 46365    61   223    29    61  1105     1      60  )
 46366    61   223    30    61  1105     1     102  ;
 46367    61   224     9    61  1105     1     111  limit
 46368    61   224    14    61  1105     1      59  (
 46369    61   224    15    61  1105     1     111  capacity
 46370    61   224    23    61  1105     1      59  (
 46371    61   224    24    61  1105     1      60  )
 46372    61   224    25    61  1105     1      60  )
 46373    61   224    26    61  1105     1     102  ;
 46374    61   225     9    61  1105     0     111  clearMark
 46375    61   225    18    61  1105     0      59  (
 46376    61   225    19    61  1105     0      60  )
 46377    61   225    20    61  1105     0     102  ;
 46378    61   226     9    61  1105     0      19  return
 46379    61   226    16    61  1105     0      44  this
 46380    61   226    20    61  1105     0     102  ;
 46381    61   230     5    61  1105     0      64  }
 46382    61   230     5    61  1105     0    2578  ENDMETHOD
 46383    61   230     5    61  1106     0    2579  STARTMETHOD
 46384    61   559     5    61  1106     0     111  String
 46385    61   559    12    61  1106     0     111  toString
 46386    61   559    20    61  1106     0      59  (
 46387    61   559    21    61  1106     0      36  int
 46388    61   559    25    61  1106     0     111  start
 46389    61   559    30    61  1106     0      66  ,
 46390    61   559    32    61  1106     0      36  int
 46391    61   559    36    61  1106     0     111  end
 46392    61   559    39    61  1106     0      60  )
 46393    61   559    41    61  1106     0      63  {
 46394    61   560     9    61  1106     0      35  try
 46395    61   560    13    61  1106     0      63  {
 46396    61   561    13    61  1106     0      19  return
 46397    61   561    24    61  1106     0     111  String
 46398    61   561    30    61  1106     0      59  (
 46399    61   561    31    61  1106     0     111  hb
 46400    61   561    33    61  1106     0      66  ,
 46401    61   561    35    61  1106     0     111  start
 46402    61   561    41    61  1106     0      74  +
 46403    61   561    43    61  1106     0     111  offset
 46404    61   561    49    61  1106     0      66  ,
 46405    61   561    51    61  1106     0     111  end
 46406    61   561    55    61  1106     0      77  -
 46407    61   561    57    61  1106     0     111  start
 46408    61   561    62    61  1106     0      60  )
 46409    61   561    63    61  1106     0     102  ;
 46410    61   562     9    61  1106     0      64  }
 46411    61   562    11    61  1106     0      34  catch
 46412    61   562    17    61  1106     0      59  (
 46413    61   562    18    61  1106     0     111  StringIndexOutOfBoundsException
 46414    61   562    50    61  1106     0     111  x
 46415    61   562    51    61  1106     0      60  )
 46416    61   562    53    61  1106     0      63  {
 46417    61   563    13    61  1106     0      20  throw
 46418    61   563    23    61  1106     0     111  IndexOutOfBoundsException
 46419    61   563    48    61  1106     0      59  (
 46420    61   563    49    61  1106     0      60  )
 46421    61   563    50    61  1106     0     102  ;
 46422    61   564     9    61  1106     0      64  }
 46423    61   565     5    61  1106     0      64  }
 46424    61   565     5    61  1106     0    2580  ENDMETHOD
 46425    61   565     5    61  1107     0    2581  STARTMETHOD
 46426    61   570    12    61  1107     0     111  CharSequence
 46427    61   570    25    61  1107     0     111  subSequence
 46428    61   570    36    61  1107     0      59  (
 46429    61   570    37    61  1107     0      36  int
 46430    61   570    41    61  1107     0     111  start
 46431    61   570    46    61  1107     0      66  ,
 46432    61   570    48    61  1107     0      36  int
 46433    61   570    52    61  1107     0     111  end
 46434    61   570    55    61  1107     0      60  )
 46435    61   570    57    61  1107     0      63  {
 46436    61   571     9    61  1107     0      31  if
 46437    61   571    12    61  1107     0      59  (
 46438    61   571    13    61  1107     0      59  (
 46439    61   571    14    61  1107     0     111  start
 46440    61   571    20    61  1107     0      93  <
 46441    61   571    22    61  1107     0     112  0
 46442    61   571    23    61  1107     0      60  )
 46443    61   572    13    61  1107     0      98  ||
 46444    61   572    16    61  1107     0      59  (
 46445    61   572    17    61  1107     0     111  end
 46446    61   572    21    61  1107     0      89  >
 46447    61   572    23    61  1107     0     111  length
 46448    61   572    29    61  1107     0      59  (
 46449    61   572    30    61  1107     0      60  )
 46450    61   572    31    61  1107     0      60  )
 46451    61   573    13    61  1107     0      98  ||
 46452    61   573    16    61  1107     0      59  (
 46453    61   573    17    61  1107     0     111  start
 46454    61   573    23    61  1107     0      89  >
 46455    61   573    25    61  1107     0     111  end
 46456    61   573    28    61  1107     0      60  )
 46457    61   573    29    61  1107     0      60  )
 46458    61   574    13    61  1107     0      20  throw
 46459    61   574    23    61  1107     0     111  IndexOutOfBoundsException
 46460    61   574    48    61  1107     0      59  (
 46461    61   574    49    61  1107     0      60  )
 46462    61   574    50    61  1107     0     102  ;
 46463    61   575     9    61  1107     0      36  int
 46464    61   575    13    61  1107     0     111  len
 46465    61   575    17    61  1107     0      67  =
 46466    61   575    19    61  1107     0     111  end
 46467    61   575    23    61  1107     0      77  -
 46468    61   575    25    61  1107     0     111  start
 46469    61   575    30    61  1107     0     102  ;
 46470    61   576     9    61  1107     0      19  return
 46471    61   576    20    61  1107     0     111  HeapCharBuffer
 46472    61   576    34    61  1107     0      59  (
 46473    61   576    35    61  1107     0     111  hb
 46474    61   576    37    61  1107     0      66  ,
 46475    61   577    39    61  1107     0      77  -
 46476    61   577    40    61  1107     0     112  1
 46477    61   577    41    61  1107     0      66  ,
 46478    61   577    43    61  1107     0     112  0
 46479    61   577    44    61  1107     0      66  ,
 46480    61   577    46    61  1107     0     111  len
 46481    61   577    49    61  1107     0      66  ,
 46482    61   577    51    61  1107     0     111  len
 46483    61   577    54    61  1107     0      66  ,
 46484    61   578    39    61  1107     0     111  offset
 46485    61   578    46    61  1107     0      74  +
 46486    61   578    48    61  1107     0     111  position
 46487    61   578    56    61  1107     0      59  (
 46488    61   578    57    61  1107     0      60  )
 46489    61   578    59    61  1107     0      74  +
 46490    61   578    61    61  1107     0     111  start
 46491    61   578    66    61  1107     0      60  )
 46492    61   578    67    61  1107     0     102  ;
 46493    61   579     5    61  1107     0      64  }
 46494    61   579     5    61  1107     0    2582  ENDMETHOD
 46495    61   579     5    61  1108     0    2583  STARTMETHOD
 46496    61   586    12    61  1108     0     111  ByteOrder
 46497    61   586    22    61  1108     0     111  order
 46498    61   586    27    61  1108     0      59  (
 46499    61   586    28    61  1108     0      60  )
 46500    61   586    30    61  1108     0      63  {
 46501    61   587     9    61  1108     0      19  return
 46502    61   587    16    61  1108     0     111  ByteOrder.nativeOrder
 46503    61   587    37    61  1108     0      59  (
 46504    61   587    38    61  1108     0      60  )
 46505    61   587    39    61  1108     0     102  ;
 46506    61   588     5    61  1108     0      64  }
 46507    61   588     5    61  1108     0    2584  ENDMETHOD
 46508    61   592     1    61    -1     0      64  }
 46509    61   592     1    61    -1     1    2585  ENDCLASS
 46510    61   592     1    -1    -1     1    2586  ENDFILE C:\Users\RA\javasrc\java\nio\HeapCharBuffer.java
 46511    62     1     1    -1    -1     1    2587  STARTFILE C:\Users\RA\javasrc\java\nio\HeapCharBufferR.java
 46512    62    28     9    -1    -1     0     111  java.nio
 46513    62    28    17    -1    -1     0     102  ;
 46514    62    42     1    62    -1     0    2588  STARTCLASS
 46515    62    42     1    62    -1     0      24  class
 46516    62    42     7    62    -1     0     111  HeapCharBufferR
 46517    62    43     5    62    -1     0      38  extends
 46518    62    43    13    62    -1     0     111  HeapCharBuffer
 46519    62    44     1    62    -1     0      63  {
 46520    62    44     1    62  1109     0    2589  STARTMETHOD
 46521    62    55     5    62  1109     0     111  HeapCharBufferR
 46522    62    55    20    62  1109     0      59  (
 46523    62    55    21    62  1109     0      36  int
 46524    62    55    25    62  1109     0     111  cap
 46525    62    55    28    62  1109     0      66  ,
 46526    62    55    30    62  1109     0      36  int
 46527    62    55    34    62  1109     0     111  lim
 46528    62    55    37    62  1109     0      60  )
 46529    62    55    39    62  1109     0      63  {
 46530    62    63     9    62  1109     0      27  super
 46531    62    63    14    62  1109     0      59  (
 46532    62    63    15    62  1109     0     111  cap
 46533    62    63    18    62  1109     0      66  ,
 46534    62    63    20    62  1109     0     111  lim
 46535    62    63    23    62  1109     0      60  )
 46536    62    63    24    62  1109     0     102  ;
 46537    62    64     9    62  1109     0     111  this.isReadOnly
 46538    62    64    25    62  1109     0      67  =
 46539    62    64    27    62  1109     0      52  true
 46540    62    64    31    62  1109     0     102  ;
 46541    62    66     5    62  1109     0      64  }
 46542    62    66     5    62  1109     0    2590  ENDMETHOD
 46543    62    66     5    62  1110     0    2591  STARTMETHOD
 46544    62    68     5    62  1110     0     111  HeapCharBufferR
 46545    62    68    20    62  1110     0      59  (
 46546    62    68    21    62  1110     0      40  char
 46547    62    68    25    62  1110     0      61  [
 46548    62    68    26    62  1110     0      62  ]
 46549    62    68    28    62  1110     0     111  buf
 46550    62    68    31    62  1110     0      66  ,
 46551    62    68    33    62  1110     0      36  int
 46552    62    68    37    62  1110     0     111  off
 46553    62    68    40    62  1110     0      66  ,
 46554    62    68    42    62  1110     0      36  int
 46555    62    68    46    62  1110     0     111  len
 46556    62    68    49    62  1110     0      60  )
 46557    62    68    51    62  1110     0      63  {
 46558    62    76     9    62  1110     0      27  super
 46559    62    76    14    62  1110     0      59  (
 46560    62    76    15    62  1110     0     111  buf
 46561    62    76    18    62  1110     0      66  ,
 46562    62    76    20    62  1110     0     111  off
 46563    62    76    23    62  1110     0      66  ,
 46564    62    76    25    62  1110     0     111  len
 46565    62    76    28    62  1110     0      60  )
 46566    62    76    29    62  1110     0     102  ;
 46567    62    77     9    62  1110     0     111  this.isReadOnly
 46568    62    77    25    62  1110     0      67  =
 46569    62    77    27    62  1110     0      52  true
 46570    62    77    31    62  1110     0     102  ;
 46571    62    79     5    62  1110     0      64  }
 46572    62    79     5    62  1110     0    2592  ENDMETHOD
 46573    62    79     5    62  1111     0    2593  STARTMETHOD
 46574    62    81     5    62  1111     0      23  protected
 46575    62    81    15    62  1111     0     111  HeapCharBufferR
 46576    62    81    30    62  1111     0      59  (
 46577    62    81    31    62  1111     0      40  char
 46578    62    81    35    62  1111     0      61  [
 46579    62    81    36    62  1111     0      62  ]
 46580    62    81    38    62  1111     0     111  buf
 46581    62    81    41    62  1111     0      66  ,
 46582    62    82    36    62  1111     0      36  int
 46583    62    82    40    62  1111     0     111  mark
 46584    62    82    44    62  1111     0      66  ,
 46585    62    82    46    62  1111     0      36  int
 46586    62    82    50    62  1111     0     111  pos
 46587    62    82    53    62  1111     0      66  ,
 46588    62    82    55    62  1111     0      36  int
 46589    62    82    59    62  1111     0     111  lim
 46590    62    82    62    62  1111     0      66  ,
 46591    62    82    64    62  1111     0      36  int
 46592    62    82    68    62  1111     0     111  cap
 46593    62    82    71    62  1111     0      66  ,
 46594    62    83    36    62  1111     0      36  int
 46595    62    83    40    62  1111     0     111  off
 46596    62    83    43    62  1111     0      60  )
 46597    62    84     5    62  1111     0      63  {
 46598    62    92     9    62  1111     0      27  super
 46599    62    92    14    62  1111     0      59  (
 46600    62    92    15    62  1111     0     111  buf
 46601    62    92    18    62  1111     0      66  ,
 46602    62    92    20    62  1111     0     111  mark
 46603    62    92    24    62  1111     0      66  ,
 46604    62    92    26    62  1111     0     111  pos
 46605    62    92    29    62  1111     0      66  ,
 46606    62    92    31    62  1111     0     111  lim
 46607    62    92    34    62  1111     0      66  ,
 46608    62    92    36    62  1111     0     111  cap
 46609    62    92    39    62  1111     0      66  ,
 46610    62    92    41    62  1111     0     111  off
 46611    62    92    44    62  1111     0      60  )
 46612    62    92    45    62  1111     0     102  ;
 46613    62    93     9    62  1111     0     111  this.isReadOnly
 46614    62    93    25    62  1111     0      67  =
 46615    62    93    27    62  1111     0      52  true
 46616    62    93    31    62  1111     0     102  ;
 46617    62    95     5    62  1111     0      64  }
 46618    62    95     5    62  1111     0    2594  ENDMETHOD
 46619    62    95     5    62  1112     0    2595  STARTMETHOD
 46620    62    97    12    62  1112     0     111  CharBuffer
 46621    62    97    23    62  1112     0     111  slice
 46622    62    97    28    62  1112     0      59  (
 46623    62    97    29    62  1112     0      60  )
 46624    62    97    31    62  1112     0      63  {
 46625    62    98     9    62  1112     0      19  return
 46626    62    98    20    62  1112     0     111  HeapCharBufferR
 46627    62    98    35    62  1112     0      59  (
 46628    62    98    36    62  1112     0     111  hb
 46629    62    98    38    62  1112     0      66  ,
 46630    62    99    41    62  1112     0      77  -
 46631    62    99    42    62  1112     0     112  1
 46632    62    99    43    62  1112     0      66  ,
 46633    62   100    41    62  1112     0     112  0
 46634    62   100    42    62  1112     0      66  ,
 46635    62   101    41    62  1112     1     111  this.remaining
 46636    62   101    55    62  1112     1      59  (
 46637    62   101    56    62  1112     1      60  )
 46638    62   101    57    62  1112     1      66  ,
 46639    62   102    41    62  1112     1     111  this.remaining
 46640    62   102    55    62  1112     1      59  (
 46641    62   102    56    62  1112     1      60  )
 46642    62   102    57    62  1112     1      66  ,
 46643    62   103    41    62  1112     0     111  this.position
 46644    62   103    54    62  1112     0      59  (
 46645    62   103    55    62  1112     0      60  )
 46646    62   103    57    62  1112     0      74  +
 46647    62   103    59    62  1112     0     111  offset
 46648    62   103    65    62  1112     0      60  )
 46649    62   103    66    62  1112     0     102  ;
 46650    62   104     5    62  1112     0      64  }
 46651    62   104     5    62  1112     0    2596  ENDMETHOD
 46652    62   104     5    62  1113     0    2597  STARTMETHOD
 46653    62   106    12    62  1113     0     111  CharBuffer
 46654    62   106    23    62  1113     0     111  duplicate
 46655    62   106    32    62  1113     0      59  (
 46656    62   106    33    62  1113     0      60  )
 46657    62   106    35    62  1113     0      63  {
 46658    62   107     9    62  1113     0      19  return
 46659    62   107    20    62  1113     0     111  HeapCharBufferR
 46660    62   107    35    62  1113     0      59  (
 46661    62   107    36    62  1113     0     111  hb
 46662    62   107    38    62  1113     0      66  ,
 46663    62   108    41    62  1113     1     111  this.markValue
 46664    62   108    55    62  1113     1      59  (
 46665    62   108    56    62  1113     1      60  )
 46666    62   108    57    62  1113     1      66  ,
 46667    62   109    41    62  1113     1     111  this.position
 46668    62   109    54    62  1113     1      59  (
 46669    62   109    55    62  1113     1      60  )
 46670    62   109    56    62  1113     1      66  ,
 46671    62   110    41    62  1113     1     111  this.limit
 46672    62   110    51    62  1113     1      59  (
 46673    62   110    52    62  1113     1      60  )
 46674    62   110    53    62  1113     1      66  ,
 46675    62   111    41    62  1113     1     111  this.capacity
 46676    62   111    54    62  1113     1      59  (
 46677    62   111    55    62  1113     1      60  )
 46678    62   111    56    62  1113     1      66  ,
 46679    62   112    41    62  1113     0     111  offset
 46680    62   112    47    62  1113     0      60  )
 46681    62   112    48    62  1113     0     102  ;
 46682    62   113     5    62  1113     0      64  }
 46683    62   113     5    62  1113     0    2598  ENDMETHOD
 46684    62   113     5    62  1114     0    2599  STARTMETHOD
 46685    62   115    12    62  1114     0     111  CharBuffer
 46686    62   115    23    62  1114     0     111  asReadOnlyBuffer
 46687    62   115    39    62  1114     0      59  (
 46688    62   115    40    62  1114     0      60  )
 46689    62   115    42    62  1114     0      63  {
 46690    62   124     9    62  1114     0      19  return
 46691    62   124    16    62  1114     0     111  duplicate
 46692    62   124    25    62  1114     0      59  (
 46693    62   124    26    62  1114     0      60  )
 46694    62   124    27    62  1114     0     102  ;
 46695    62   126     5    62  1114     0      64  }
 46696    62   126     5    62  1114     0    2600  ENDMETHOD
 46697    62   126     5    62  1115     0    2601  STARTMETHOD
 46698    62   157    12    62  1115     0      39  boolean
 46699    62   157    20    62  1115     0     111  isReadOnly
 46700    62   157    30    62  1115     0      59  (
 46701    62   157    31    62  1115     0      60  )
 46702    62   157    33    62  1115     0      63  {
 46703    62   158     9    62  1115     0      19  return
 46704    62   158    16    62  1115     0      52  true
 46705    62   158    20    62  1115     0     102  ;
 46706    62   159     5    62  1115     0      64  }
 46707    62   159     5    62  1115     0    2602  ENDMETHOD
 46708    62   159     5    62  1116     0    2603  STARTMETHOD
 46709    62   161    12    62  1116     0     111  CharBuffer
 46710    62   161    23    62  1116     0     111  put
 46711    62   161    26    62  1116     0      59  (
 46712    62   161    27    62  1116     0      40  char
 46713    62   161    32    62  1116     0     111  x
 46714    62   161    33    62  1116     0      60  )
 46715    62   161    35    62  1116     0      63  {
 46716    62   166     9    62  1116     0      20  throw
 46717    62   166    19    62  1116     0     111  ReadOnlyBufferException
 46718    62   166    42    62  1116     0      59  (
 46719    62   166    43    62  1116     0      60  )
 46720    62   166    44    62  1116     0     102  ;
 46721    62   168     5    62  1116     0      64  }
 46722    62   168     5    62  1116     0    2604  ENDMETHOD
 46723    62   168     5    62  1117     0    2605  STARTMETHOD
 46724    62   170    12    62  1117     0     111  CharBuffer
 46725    62   170    23    62  1117     0     111  put
 46726    62   170    26    62  1117     0      59  (
 46727    62   170    27    62  1117     0      36  int
 46728    62   170    31    62  1117     0     111  i
 46729    62   170    32    62  1117     0      66  ,
 46730    62   170    34    62  1117     0      40  char
 46731    62   170    39    62  1117     0     111  x
 46732    62   170    40    62  1117     0      60  )
 46733    62   170    42    62  1117     0      63  {
 46734    62   175     9    62  1117     0      20  throw
 46735    62   175    19    62  1117     0     111  ReadOnlyBufferException
 46736    62   175    42    62  1117     0      59  (
 46737    62   175    43    62  1117     0      60  )
 46738    62   175    44    62  1117     0     102  ;
 46739    62   177     5    62  1117     0      64  }
 46740    62   177     5    62  1117     0    2606  ENDMETHOD
 46741    62   177     5    62  1118     0    2607  STARTMETHOD
 46742    62   179    12    62  1118     0     111  CharBuffer
 46743    62   179    23    62  1118     0     111  put
 46744    62   179    26    62  1118     0      59  (
 46745    62   179    27    62  1118     0      40  char
 46746    62   179    31    62  1118     0      61  [
 46747    62   179    32    62  1118     0      62  ]
 46748    62   179    34    62  1118     0     111  src
 46749    62   179    37    62  1118     0      66  ,
 46750    62   179    39    62  1118     0      36  int
 46751    62   179    43    62  1118     0     111  offset
 46752    62   179    49    62  1118     0      66  ,
 46753    62   179    51    62  1118     0      36  int
 46754    62   179    55    62  1118     0     111  length
 46755    62   179    61    62  1118     0      60  )
 46756    62   179    63    62  1118     0      63  {
 46757    62   188     9    62  1118     0      20  throw
 46758    62   188    19    62  1118     0     111  ReadOnlyBufferException
 46759    62   188    42    62  1118     0      59  (
 46760    62   188    43    62  1118     0      60  )
 46761    62   188    44    62  1118     0     102  ;
 46762    62   190     5    62  1118     0      64  }
 46763    62   190     5    62  1118     0    2608  ENDMETHOD
 46764    62   190     5    62  1119     0    2609  STARTMETHOD
 46765    62   192    12    62  1119     0     111  CharBuffer
 46766    62   192    23    62  1119     0     111  put
 46767    62   192    26    62  1119     0      59  (
 46768    62   192    27    62  1119     0     111  CharBuffer
 46769    62   192    38    62  1119     0     111  src
 46770    62   192    41    62  1119     0      60  )
 46771    62   192    43    62  1119     0      63  {
 46772    62   216     9    62  1119     0      20  throw
 46773    62   216    19    62  1119     0     111  ReadOnlyBufferException
 46774    62   216    42    62  1119     0      59  (
 46775    62   216    43    62  1119     0      60  )
 46776    62   216    44    62  1119     0     102  ;
 46777    62   218     5    62  1119     0      64  }
 46778    62   218     5    62  1119     0    2610  ENDMETHOD
 46779    62   218     5    62  1120     0    2611  STARTMETHOD
 46780    62   220    12    62  1120     0     111  CharBuffer
 46781    62   220    23    62  1120     0     111  compact
 46782    62   220    30    62  1120     0      59  (
 46783    62   220    31    62  1120     0      60  )
 46784    62   220    33    62  1120     0      63  {
 46785    62   228     9    62  1120     0      20  throw
 46786    62   228    19    62  1120     0     111  ReadOnlyBufferException
 46787    62   228    42    62  1120     0      59  (
 46788    62   228    43    62  1120     0      60  )
 46789    62   228    44    62  1120     0     102  ;
 46790    62   230     5    62  1120     0      64  }
 46791    62   230     5    62  1120     0    2612  ENDMETHOD
 46792    62   230     5    62  1121     0    2613  STARTMETHOD
 46793    62   557     5    62  1121     0     111  String
 46794    62   557    12    62  1121     0     111  toString
 46795    62   557    20    62  1121     0      59  (
 46796    62   557    21    62  1121     0      36  int
 46797    62   557    25    62  1121     0     111  start
 46798    62   557    30    62  1121     0      66  ,
 46799    62   557    32    62  1121     0      36  int
 46800    62   557    36    62  1121     0     111  end
 46801    62   557    39    62  1121     0      60  )
 46802    62   557    41    62  1121     0      63  {
 46803    62   558     9    62  1121     0      35  try
 46804    62   558    13    62  1121     0      63  {
 46805    62   559    13    62  1121     0      19  return
 46806    62   559    24    62  1121     0     111  String
 46807    62   559    30    62  1121     0      59  (
 46808    62   559    31    62  1121     0     111  hb
 46809    62   559    33    62  1121     0      66  ,
 46810    62   559    35    62  1121     0     111  start
 46811    62   559    41    62  1121     0      74  +
 46812    62   559    43    62  1121     0     111  offset
 46813    62   559    49    62  1121     0      66  ,
 46814    62   559    51    62  1121     0     111  end
 46815    62   559    55    62  1121     0      77  -
 46816    62   559    57    62  1121     0     111  start
 46817    62   559    62    62  1121     0      60  )
 46818    62   559    63    62  1121     0     102  ;
 46819    62   560     9    62  1121     0      64  }
 46820    62   560    11    62  1121     0      34  catch
 46821    62   560    17    62  1121     0      59  (
 46822    62   560    18    62  1121     0     111  StringIndexOutOfBoundsException
 46823    62   560    50    62  1121     0     111  x
 46824    62   560    51    62  1121     0      60  )
 46825    62   560    53    62  1121     0      63  {
 46826    62   561    13    62  1121     0      20  throw
 46827    62   561    23    62  1121     0     111  IndexOutOfBoundsException
 46828    62   561    48    62  1121     0      59  (
 46829    62   561    49    62  1121     0      60  )
 46830    62   561    50    62  1121     0     102  ;
 46831    62   562     9    62  1121     0      64  }
 46832    62   563     5    62  1121     0      64  }
 46833    62   563     5    62  1121     0    2614  ENDMETHOD
 46834    62   563     5    62  1122     0    2615  STARTMETHOD
 46835    62   568    12    62  1122     0     111  CharSequence
 46836    62   568    25    62  1122     0     111  subSequence
 46837    62   568    36    62  1122     0      59  (
 46838    62   568    37    62  1122     0      36  int
 46839    62   568    41    62  1122     0     111  start
 46840    62   568    46    62  1122     0      66  ,
 46841    62   568    48    62  1122     0      36  int
 46842    62   568    52    62  1122     0     111  end
 46843    62   568    55    62  1122     0      60  )
 46844    62   568    57    62  1122     0      63  {
 46845    62   569     9    62  1122     0      31  if
 46846    62   569    12    62  1122     0      59  (
 46847    62   569    13    62  1122     0      59  (
 46848    62   569    14    62  1122     0     111  start
 46849    62   569    20    62  1122     0      93  <
 46850    62   569    22    62  1122     0     112  0
 46851    62   569    23    62  1122     0      60  )
 46852    62   570    13    62  1122     0      98  ||
 46853    62   570    16    62  1122     0      59  (
 46854    62   570    17    62  1122     0     111  end
 46855    62   570    21    62  1122     0      89  >
 46856    62   570    23    62  1122     0     111  length
 46857    62   570    29    62  1122     0      59  (
 46858    62   570    30    62  1122     0      60  )
 46859    62   570    31    62  1122     0      60  )
 46860    62   571    13    62  1122     0      98  ||
 46861    62   571    16    62  1122     0      59  (
 46862    62   571    17    62  1122     0     111  start
 46863    62   571    23    62  1122     0      89  >
 46864    62   571    25    62  1122     0     111  end
 46865    62   571    28    62  1122     0      60  )
 46866    62   571    29    62  1122     0      60  )
 46867    62   572    13    62  1122     0      20  throw
 46868    62   572    23    62  1122     0     111  IndexOutOfBoundsException
 46869    62   572    48    62  1122     0      59  (
 46870    62   572    49    62  1122     0      60  )
 46871    62   572    50    62  1122     0     102  ;
 46872    62   573     9    62  1122     0      36  int
 46873    62   573    13    62  1122     0     111  len
 46874    62   573    17    62  1122     0      67  =
 46875    62   573    19    62  1122     0     111  end
 46876    62   573    23    62  1122     0      77  -
 46877    62   573    25    62  1122     0     111  start
 46878    62   573    30    62  1122     0     102  ;
 46879    62   574     9    62  1122     0      19  return
 46880    62   574    20    62  1122     0     111  HeapCharBufferR
 46881    62   574    35    62  1122     0      59  (
 46882    62   574    36    62  1122     0     111  hb
 46883    62   574    38    62  1122     0      66  ,
 46884    62   575    39    62  1122     0      77  -
 46885    62   575    40    62  1122     0     112  1
 46886    62   575    41    62  1122     0      66  ,
 46887    62   575    43    62  1122     0     112  0
 46888    62   575    44    62  1122     0      66  ,
 46889    62   575    46    62  1122     0     111  len
 46890    62   575    49    62  1122     0      66  ,
 46891    62   575    51    62  1122     0     111  len
 46892    62   575    54    62  1122     0      66  ,
 46893    62   576    39    62  1122     0     111  offset
 46894    62   576    46    62  1122     0      74  +
 46895    62   576    48    62  1122     0     111  position
 46896    62   576    56    62  1122     0      59  (
 46897    62   576    57    62  1122     0      60  )
 46898    62   576    59    62  1122     0      74  +
 46899    62   576    61    62  1122     0     111  start
 46900    62   576    66    62  1122     0      60  )
 46901    62   576    67    62  1122     0     102  ;
 46902    62   577     5    62  1122     0      64  }
 46903    62   577     5    62  1122     0    2616  ENDMETHOD
 46904    62   577     5    62  1123     0    2617  STARTMETHOD
 46905    62   584    12    62  1123     0     111  ByteOrder
 46906    62   584    22    62  1123     0     111  order
 46907    62   584    27    62  1123     0      59  (
 46908    62   584    28    62  1123     0      60  )
 46909    62   584    30    62  1123     0      63  {
 46910    62   585     9    62  1123     0      19  return
 46911    62   585    16    62  1123     0     111  ByteOrder.nativeOrder
 46912    62   585    37    62  1123     0      59  (
 46913    62   585    38    62  1123     0      60  )
 46914    62   585    39    62  1123     0     102  ;
 46915    62   586     5    62  1123     0      64  }
 46916    62   586     5    62  1123     0    2618  ENDMETHOD
 46917    62   590     1    62    -1     0      64  }
 46918    62   590     1    62    -1     1    2619  ENDCLASS
 46919    62   590     1    -1    -1     1    2620  ENDFILE C:\Users\RA\javasrc\java\nio\HeapCharBufferR.java
 46920    63     1     1    -1    -1     1    2621  STARTFILE C:\Users\RA\javasrc\java\nio\HeapDoubleBuffer.java
 46921    63    28     9    -1    -1     0     111  java.nio
 46922    63    28    17    -1    -1     0     102  ;
 46923    63    42     1    63    -1     0    2622  STARTCLASS
 46924    63    42     1    63    -1     0      24  class
 46925    63    42     7    63    -1     0     111  HeapDoubleBuffer
 46926    63    43     5    63    -1     0      38  extends
 46927    63    43    13    63    -1     0     111  DoubleBuffer
 46928    63    44     1    63    -1     0      63  {
 46929    63    44     1    63  1124     0    2623  STARTMETHOD
 46930    63    55     5    63  1124     0     111  HeapDoubleBuffer
 46931    63    55    21    63  1124     0      59  (
 46932    63    55    22    63  1124     0      36  int
 46933    63    55    26    63  1124     0     111  cap
 46934    63    55    29    63  1124     0      66  ,
 46935    63    55    31    63  1124     0      36  int
 46936    63    55    35    63  1124     0     111  lim
 46937    63    55    38    63  1124     0      60  )
 46938    63    55    40    63  1124     0      63  {
 46939    63    57     9    63  1124     0      27  super
 46940    63    57    14    63  1124     0      59  (
 46941    63    57    15    63  1124     0      77  -
 46942    63    57    16    63  1124     0     112  1
 46943    63    57    17    63  1124     0      66  ,
 46944    63    57    19    63  1124     0     112  0
 46945    63    57    20    63  1124     0      66  ,
 46946    63    57    22    63  1124     0     111  lim
 46947    63    57    25    63  1124     0      66  ,
 46948    63    57    27    63  1124     0     111  cap
 46949    63    57    30    63  1124     0      66  ,
 46950    63    57    36    63  1124     0      32  double
 46951    63    57    42    63  1124     0      61  [
 46952    63    57    43    63  1124     0     111  cap
 46953    63    57    46    63  1124     0      62  ]
 46954    63    57    47    63  1124     0      66  ,
 46955    63    57    49    63  1124     0     112  0
 46956    63    57    50    63  1124     0      60  )
 46957    63    57    51    63  1124     0     102  ;
 46958    63    66     5    63  1124     0      64  }
 46959    63    66     5    63  1124     0    2624  ENDMETHOD
 46960    63    66     5    63  1125     0    2625  STARTMETHOD
 46961    63    68     5    63  1125     0     111  HeapDoubleBuffer
 46962    63    68    21    63  1125     0      59  (
 46963    63    68    22    63  1125     0      32  double
 46964    63    68    28    63  1125     0      61  [
 46965    63    68    29    63  1125     0      62  ]
 46966    63    68    31    63  1125     0     111  buf
 46967    63    68    34    63  1125     0      66  ,
 46968    63    68    36    63  1125     0      36  int
 46969    63    68    40    63  1125     0     111  off
 46970    63    68    43    63  1125     0      66  ,
 46971    63    68    45    63  1125     0      36  int
 46972    63    68    49    63  1125     0     111  len
 46973    63    68    52    63  1125     0      60  )
 46974    63    68    54    63  1125     0      63  {
 46975    63    70     9    63  1125     0      27  super
 46976    63    70    14    63  1125     0      59  (
 46977    63    70    15    63  1125     0      77  -
 46978    63    70    16    63  1125     0     112  1
 46979    63    70    17    63  1125     0      66  ,
 46980    63    70    19    63  1125     0     111  off
 46981    63    70    22    63  1125     0      66  ,
 46982    63    70    24    63  1125     0     111  off
 46983    63    70    28    63  1125     0      74  +
 46984    63    70    30    63  1125     0     111  len
 46985    63    70    33    63  1125     0      66  ,
 46986    63    70    35    63  1125     0     111  buf.length
 46987    63    70    45    63  1125     0      66  ,
 46988    63    70    47    63  1125     0     111  buf
 46989    63    70    50    63  1125     0      66  ,
 46990    63    70    52    63  1125     0     112  0
 46991    63    70    53    63  1125     0      60  )
 46992    63    70    54    63  1125     0     102  ;
 46993    63    79     5    63  1125     0      64  }
 46994    63    79     5    63  1125     0    2626  ENDMETHOD
 46995    63    79     5    63  1126     0    2627  STARTMETHOD
 46996    63    81     5    63  1126     0      23  protected
 46997    63    81    15    63  1126     0     111  HeapDoubleBuffer
 46998    63    81    31    63  1126     0      59  (
 46999    63    81    32    63  1126     0      32  double
 47000    63    81    38    63  1126     0      61  [
 47001    63    81    39    63  1126     0      62  ]
 47002    63    81    41    63  1126     0     111  buf
 47003    63    81    44    63  1126     0      66  ,
 47004    63    82    36    63  1126     0      36  int
 47005    63    82    40    63  1126     0     111  mark
 47006    63    82    44    63  1126     0      66  ,
 47007    63    82    46    63  1126     0      36  int
 47008    63    82    50    63  1126     0     111  pos
 47009    63    82    53    63  1126     0      66  ,
 47010    63    82    55    63  1126     0      36  int
 47011    63    82    59    63  1126     0     111  lim
 47012    63    82    62    63  1126     0      66  ,
 47013    63    82    64    63  1126     0      36  int
 47014    63    82    68    63  1126     0     111  cap
 47015    63    82    71    63  1126     0      66  ,
 47016    63    83    36    63  1126     0      36  int
 47017    63    83    40    63  1126     0     111  off
 47018    63    83    43    63  1126     0      60  )
 47019    63    84     5    63  1126     0      63  {
 47020    63    86     9    63  1126     0      27  super
 47021    63    86    14    63  1126     0      59  (
 47022    63    86    15    63  1126     0     111  mark
 47023    63    86    19    63  1126     0      66  ,
 47024    63    86    21    63  1126     0     111  pos
 47025    63    86    24    63  1126     0      66  ,
 47026    63    86    26    63  1126     0     111  lim
 47027    63    86    29    63  1126     0      66  ,
 47028    63    86    31    63  1126     0     111  cap
 47029    63    86    34    63  1126     0      66  ,
 47030    63    86    36    63  1126     0     111  buf
 47031    63    86    39    63  1126     0      66  ,
 47032    63    86    41    63  1126     0     111  off
 47033    63    86    44    63  1126     0      60  )
 47034    63    86    45    63  1126     0     102  ;
 47035    63    95     5    63  1126     0      64  }
 47036    63    95     5    63  1126     0    2628  ENDMETHOD
 47037    63    95     5    63  1127     0    2629  STARTMETHOD
 47038    63    97    12    63  1127     0     111  DoubleBuffer
 47039    63    97    25    63  1127     0     111  slice
 47040    63    97    30    63  1127     0      59  (
 47041    63    97    31    63  1127     0      60  )
 47042    63    97    33    63  1127     0      63  {
 47043    63    98     9    63  1127     0      19  return
 47044    63    98    20    63  1127     0     111  HeapDoubleBuffer
 47045    63    98    36    63  1127     0      59  (
 47046    63    98    37    63  1127     0     111  hb
 47047    63    98    39    63  1127     0      66  ,
 47048    63    99    41    63  1127     0      77  -
 47049    63    99    42    63  1127     0     112  1
 47050    63    99    43    63  1127     0      66  ,
 47051    63   100    41    63  1127     0     112  0
 47052    63   100    42    63  1127     0      66  ,
 47053    63   101    41    63  1127     1     111  this.remaining
 47054    63   101    55    63  1127     1      59  (
 47055    63   101    56    63  1127     1      60  )
 47056    63   101    57    63  1127     1      66  ,
 47057    63   102    41    63  1127     1     111  this.remaining
 47058    63   102    55    63  1127     1      59  (
 47059    63   102    56    63  1127     1      60  )
 47060    63   102    57    63  1127     1      66  ,
 47061    63   103    41    63  1127     0     111  this.position
 47062    63   103    54    63  1127     0      59  (
 47063    63   103    55    63  1127     0      60  )
 47064    63   103    57    63  1127     0      74  +
 47065    63   103    59    63  1127     0     111  offset
 47066    63   103    65    63  1127     0      60  )
 47067    63   103    66    63  1127     0     102  ;
 47068    63   104     5    63  1127     0      64  }
 47069    63   104     5    63  1127     0    2630  ENDMETHOD
 47070    63   104     5    63  1128     0    2631  STARTMETHOD
 47071    63   106    12    63  1128     0     111  DoubleBuffer
 47072    63   106    25    63  1128     0     111  duplicate
 47073    63   106    34    63  1128     0      59  (
 47074    63   106    35    63  1128     0      60  )
 47075    63   106    37    63  1128     0      63  {
 47076    63   107     9    63  1128     0      19  return
 47077    63   107    20    63  1128     0     111  HeapDoubleBuffer
 47078    63   107    36    63  1128     0      59  (
 47079    63   107    37    63  1128     0     111  hb
 47080    63   107    39    63  1128     0      66  ,
 47081    63   108    41    63  1128     1     111  this.markValue
 47082    63   108    55    63  1128     1      59  (
 47083    63   108    56    63  1128     1      60  )
 47084    63   108    57    63  1128     1      66  ,
 47085    63   109    41    63  1128     1     111  this.position
 47086    63   109    54    63  1128     1      59  (
 47087    63   109    55    63  1128     1      60  )
 47088    63   109    56    63  1128     1      66  ,
 47089    63   110    41    63  1128     1     111  this.limit
 47090    63   110    51    63  1128     1      59  (
 47091    63   110    52    63  1128     1      60  )
 47092    63   110    53    63  1128     1      66  ,
 47093    63   111    41    63  1128     1     111  this.capacity
 47094    63   111    54    63  1128     1      59  (
 47095    63   111    55    63  1128     1      60  )
 47096    63   111    56    63  1128     1      66  ,
 47097    63   112    41    63  1128     0     111  offset
 47098    63   112    47    63  1128     0      60  )
 47099    63   112    48    63  1128     0     102  ;
 47100    63   113     5    63  1128     0      64  }
 47101    63   113     5    63  1128     0    2632  ENDMETHOD
 47102    63   113     5    63  1129     0    2633  STARTMETHOD
 47103    63   115    12    63  1129     0     111  DoubleBuffer
 47104    63   115    25    63  1129     0     111  asReadOnlyBuffer
 47105    63   115    41    63  1129     0      59  (
 47106    63   115    42    63  1129     0      60  )
 47107    63   115    44    63  1129     0      63  {
 47108    63   117     9    63  1129     0      19  return
 47109    63   117    20    63  1129     0     111  HeapDoubleBufferR
 47110    63   117    37    63  1129     0      59  (
 47111    63   117    38    63  1129     0     111  hb
 47112    63   117    40    63  1129     0      66  ,
 47113    63   118    38    63  1129     1     111  this.markValue
 47114    63   118    52    63  1129     1      59  (
 47115    63   118    53    63  1129     1      60  )
 47116    63   118    54    63  1129     1      66  ,
 47117    63   119    38    63  1129     1     111  this.position
 47118    63   119    51    63  1129     1      59  (
 47119    63   119    52    63  1129     1      60  )
 47120    63   119    53    63  1129     1      66  ,
 47121    63   120    38    63  1129     1     111  this.limit
 47122    63   120    48    63  1129     1      59  (
 47123    63   120    49    63  1129     1      60  )
 47124    63   120    50    63  1129     1      66  ,
 47125    63   121    38    63  1129     1     111  this.capacity
 47126    63   121    51    63  1129     1      59  (
 47127    63   121    52    63  1129     1      60  )
 47128    63   121    53    63  1129     1      66  ,
 47129    63   122    38    63  1129     0     111  offset
 47130    63   122    44    63  1129     0      60  )
 47131    63   122    45    63  1129     0     102  ;
 47132    63   126     5    63  1129     0      64  }
 47133    63   126     5    63  1129     0    2634  ENDMETHOD
 47134    63   126     5    63  1130     0    2635  STARTMETHOD
 47135    63   130     5    63  1130     0      23  protected
 47136    63   130    15    63  1130     0      36  int
 47137    63   130    19    63  1130     0     111  ix
 47138    63   130    21    63  1130     0      59  (
 47139    63   130    22    63  1130     0      36  int
 47140    63   130    26    63  1130     0     111  i
 47141    63   130    27    63  1130     0      60  )
 47142    63   130    29    63  1130     0      63  {
 47143    63   131     9    63  1130     0      19  return
 47144    63   131    16    63  1130     0     111  i
 47145    63   131    18    63  1130     0      74  +
 47146    63   131    20    63  1130     0     111  offset
 47147    63   131    26    63  1130     0     102  ;
 47148    63   132     5    63  1130     0      64  }
 47149    63   132     5    63  1130     0    2636  ENDMETHOD
 47150    63   132     5    63  1131     0    2637  STARTMETHOD
 47151    63   134    12    63  1131     0      32  double
 47152    63   134    19    63  1131     0     111  get
 47153    63   134    22    63  1131     0      59  (
 47154    63   134    23    63  1131     0      60  )
 47155    63   134    25    63  1131     0      63  {
 47156    63   135     9    63  1131     0      19  return
 47157    63   135    16    63  1131     0     111  hb
 47158    63   135    18    63  1131     0      61  [
 47159    63   135    19    63  1131     0     111  ix
 47160    63   135    21    63  1131     0      59  (
 47161    63   135    22    63  1131     0     111  nextGetIndex
 47162    63   135    34    63  1131     0      59  (
 47163    63   135    35    63  1131     0      60  )
 47164    63   135    36    63  1131     0      60  )
 47165    63   135    37    63  1131     0      62  ]
 47166    63   135    38    63  1131     0     102  ;
 47167    63   136     5    63  1131     0      64  }
 47168    63   136     5    63  1131     0    2638  ENDMETHOD
 47169    63   136     5    63  1132     0    2639  STARTMETHOD
 47170    63   138    12    63  1132     0      32  double
 47171    63   138    19    63  1132     0     111  get
 47172    63   138    22    63  1132     0      59  (
 47173    63   138    23    63  1132     0      36  int
 47174    63   138    27    63  1132     0     111  i
 47175    63   138    28    63  1132     0      60  )
 47176    63   138    30    63  1132     0      63  {
 47177    63   139     9    63  1132     0      19  return
 47178    63   139    16    63  1132     0     111  hb
 47179    63   139    18    63  1132     0      61  [
 47180    63   139    19    63  1132     0     111  ix
 47181    63   139    21    63  1132     0      59  (
 47182    63   139    22    63  1132     0     111  checkIndex
 47183    63   139    32    63  1132     0      59  (
 47184    63   139    33    63  1132     0     111  i
 47185    63   139    34    63  1132     0      60  )
 47186    63   139    35    63  1132     0      60  )
 47187    63   139    36    63  1132     0      62  ]
 47188    63   139    37    63  1132     0     102  ;
 47189    63   140     5    63  1132     0      64  }
 47190    63   140     5    63  1132     0    2640  ENDMETHOD
 47191    63   140     5    63  1133     0    2641  STARTMETHOD
 47192    63   142    12    63  1133     0     111  DoubleBuffer
 47193    63   142    25    63  1133     0     111  get
 47194    63   142    28    63  1133     0      59  (
 47195    63   142    29    63  1133     0      32  double
 47196    63   142    35    63  1133     0      61  [
 47197    63   142    36    63  1133     0      62  ]
 47198    63   142    38    63  1133     0     111  dst
 47199    63   142    41    63  1133     0      66  ,
 47200    63   142    43    63  1133     0      36  int
 47201    63   142    47    63  1133     0     111  offset
 47202    63   142    53    63  1133     0      66  ,
 47203    63   142    55    63  1133     0      36  int
 47204    63   142    59    63  1133     0     111  length
 47205    63   142    65    63  1133     0      60  )
 47206    63   142    67    63  1133     0      63  {
 47207    63   143     9    63  1133     0     111  checkBounds
 47208    63   143    20    63  1133     0      59  (
 47209    63   143    21    63  1133     0     111  offset
 47210    63   143    27    63  1133     0      66  ,
 47211    63   143    29    63  1133     0     111  length
 47212    63   143    35    63  1133     0      66  ,
 47213    63   143    37    63  1133     0     111  dst.length
 47214    63   143    47    63  1133     0      60  )
 47215    63   143    48    63  1133     0     102  ;
 47216    63   144     9    63  1133     0      31  if
 47217    63   144    12    63  1133     0      59  (
 47218    63   144    13    63  1133     0     111  length
 47219    63   144    20    63  1133     0      89  >
 47220    63   144    22    63  1133     0     111  remaining
 47221    63   144    31    63  1133     0      59  (
 47222    63   144    32    63  1133     0      60  )
 47223    63   144    33    63  1133     0      60  )
 47224    63   145    13    63  1133     0      20  throw
 47225    63   145    23    63  1133     0     111  BufferUnderflowException
 47226    63   145    47    63  1133     0      59  (
 47227    63   145    48    63  1133     0      60  )
 47228    63   145    49    63  1133     0     102  ;
 47229    63   146     9    63  1133     0     111  System.arraycopy
 47230    63   146    25    63  1133     0      59  (
 47231    63   146    26    63  1133     0     111  hb
 47232    63   146    28    63  1133     0      66  ,
 47233    63   146    30    63  1133     0     111  ix
 47234    63   146    32    63  1133     0      59  (
 47235    63   146    33    63  1133     0     111  position
 47236    63   146    41    63  1133     0      59  (
 47237    63   146    42    63  1133     0      60  )
 47238    63   146    43    63  1133     0      60  )
 47239    63   146    44    63  1133     0      66  ,
 47240    63   146    46    63  1133     0     111  dst
 47241    63   146    49    63  1133     0      66  ,
 47242    63   146    51    63  1133     0     111  offset
 47243    63   146    57    63  1133     0      66  ,
 47244    63   146    59    63  1133     0     111  length
 47245    63   146    65    63  1133     0      60  )
 47246    63   146    66    63  1133     0     102  ;
 47247    63   147     9    63  1133     0     111  position
 47248    63   147    17    63  1133     0      59  (
 47249    63   147    18    63  1133     0     111  position
 47250    63   147    26    63  1133     0      59  (
 47251    63   147    27    63  1133     0      60  )
 47252    63   147    29    63  1133     0      74  +
 47253    63   147    31    63  1133     0     111  length
 47254    63   147    37    63  1133     0      60  )
 47255    63   147    38    63  1133     0     102  ;
 47256    63   148     9    63  1133     0      19  return
 47257    63   148    16    63  1133     0      44  this
 47258    63   148    20    63  1133     1     102  ;
 47259    63   149     5    63  1133     1      64  }
 47260    63   149     5    63  1133     0    2642  ENDMETHOD
 47261    63   149     5    63  1134     0    2643  STARTMETHOD
 47262    63   151    12    63  1134     0      39  boolean
 47263    63   151    20    63  1134     0     111  isDirect
 47264    63   151    28    63  1134     0      59  (
 47265    63   151    29    63  1134     0      60  )
 47266    63   151    31    63  1134     0      63  {
 47267    63   152     9    63  1134     0      19  return
 47268    63   152    16    63  1134     0      43  false
 47269    63   152    21    63  1134     1     102  ;
 47270    63   153     5    63  1134     1      64  }
 47271    63   153     5    63  1134     0    2644  ENDMETHOD
 47272    63   153     5    63  1135     0    2645  STARTMETHOD
 47273    63   157    12    63  1135     0      39  boolean
 47274    63   157    20    63  1135     0     111  isReadOnly
 47275    63   157    30    63  1135     0      59  (
 47276    63   157    31    63  1135     0      60  )
 47277    63   157    33    63  1135     0      63  {
 47278    63   158     9    63  1135     0      19  return
 47279    63   158    16    63  1135     0      43  false
 47280    63   158    21    63  1135     1     102  ;
 47281    63   159     5    63  1135     1      64  }
 47282    63   159     5    63  1135     0    2646  ENDMETHOD
 47283    63   159     5    63  1136     0    2647  STARTMETHOD
 47284    63   161    12    63  1136     0     111  DoubleBuffer
 47285    63   161    25    63  1136     0     111  put
 47286    63   161    28    63  1136     0      59  (
 47287    63   161    29    63  1136     0      32  double
 47288    63   161    36    63  1136     0     111  x
 47289    63   161    37    63  1136     0      60  )
 47290    63   161    39    63  1136     0      63  {
 47291    63   163     9    63  1136     0     111  hb
 47292    63   163    11    63  1136     0      61  [
 47293    63   163    12    63  1136     0     111  ix
 47294    63   163    14    63  1136     0      59  (
 47295    63   163    15    63  1136     0     111  nextPutIndex
 47296    63   163    27    63  1136     0      59  (
 47297    63   163    28    63  1136     0      60  )
 47298    63   163    29    63  1136     0      60  )
 47299    63   163    30    63  1136     0      62  ]
 47300    63   163    32    63  1136     0      67  =
 47301    63   163    34    63  1136     0     111  x
 47302    63   163    35    63  1136     0     102  ;
 47303    63   164     9    63  1136     0      19  return
 47304    63   164    16    63  1136     0      44  this
 47305    63   164    20    63  1136     0     102  ;
 47306    63   168     5    63  1136     0      64  }
 47307    63   168     5    63  1136     0    2648  ENDMETHOD
 47308    63   168     5    63  1137     0    2649  STARTMETHOD
 47309    63   170    12    63  1137     0     111  DoubleBuffer
 47310    63   170    25    63  1137     0     111  put
 47311    63   170    28    63  1137     0      59  (
 47312    63   170    29    63  1137     0      36  int
 47313    63   170    33    63  1137     0     111  i
 47314    63   170    34    63  1137     0      66  ,
 47315    63   170    36    63  1137     0      32  double
 47316    63   170    43    63  1137     0     111  x
 47317    63   170    44    63  1137     0      60  )
 47318    63   170    46    63  1137     0      63  {
 47319    63   172     9    63  1137     0     111  hb
 47320    63   172    11    63  1137     0      61  [
 47321    63   172    12    63  1137     0     111  ix
 47322    63   172    14    63  1137     0      59  (
 47323    63   172    15    63  1137     0     111  checkIndex
 47324    63   172    25    63  1137     0      59  (
 47325    63   172    26    63  1137     0     111  i
 47326    63   172    27    63  1137     0      60  )
 47327    63   172    28    63  1137     0      60  )
 47328    63   172    29    63  1137     0      62  ]
 47329    63   172    31    63  1137     0      67  =
 47330    63   172    33    63  1137     0     111  x
 47331    63   172    34    63  1137     0     102  ;
 47332    63   173     9    63  1137     0      19  return
 47333    63   173    16    63  1137     0      44  this
 47334    63   173    20    63  1137     0     102  ;
 47335    63   177     5    63  1137     0      64  }
 47336    63   177     5    63  1137     0    2650  ENDMETHOD
 47337    63   177     5    63  1138     0    2651  STARTMETHOD
 47338    63   179    12    63  1138     0     111  DoubleBuffer
 47339    63   179    25    63  1138     0     111  put
 47340    63   179    28    63  1138     0      59  (
 47341    63   179    29    63  1138     0      32  double
 47342    63   179    35    63  1138     0      61  [
 47343    63   179    36    63  1138     0      62  ]
 47344    63   179    38    63  1138     0     111  src
 47345    63   179    41    63  1138     0      66  ,
 47346    63   179    43    63  1138     0      36  int
 47347    63   179    47    63  1138     0     111  offset
 47348    63   179    53    63  1138     0      66  ,
 47349    63   179    55    63  1138     0      36  int
 47350    63   179    59    63  1138     0     111  length
 47351    63   179    65    63  1138     0      60  )
 47352    63   179    67    63  1138     0      63  {
 47353    63   181     9    63  1138     0     111  checkBounds
 47354    63   181    20    63  1138     0      59  (
 47355    63   181    21    63  1138     0     111  offset
 47356    63   181    27    63  1138     0      66  ,
 47357    63   181    29    63  1138     0     111  length
 47358    63   181    35    63  1138     0      66  ,
 47359    63   181    37    63  1138     0     111  src.length
 47360    63   181    47    63  1138     0      60  )
 47361    63   181    48    63  1138     0     102  ;
 47362    63   182     9    63  1138     0      31  if
 47363    63   182    12    63  1138     0      59  (
 47364    63   182    13    63  1138     0     111  length
 47365    63   182    20    63  1138     0      89  >
 47366    63   182    22    63  1138     0     111  remaining
 47367    63   182    31    63  1138     0      59  (
 47368    63   182    32    63  1138     0      60  )
 47369    63   182    33    63  1138     0      60  )
 47370    63   183    13    63  1138     0      20  throw
 47371    63   183    23    63  1138     0     111  BufferOverflowException
 47372    63   183    46    63  1138     0      59  (
 47373    63   183    47    63  1138     0      60  )
 47374    63   183    48    63  1138     0     102  ;
 47375    63   184     9    63  1138     0     111  System.arraycopy
 47376    63   184    25    63  1138     0      59  (
 47377    63   184    26    63  1138     0     111  src
 47378    63   184    29    63  1138     0      66  ,
 47379    63   184    31    63  1138     0     111  offset
 47380    63   184    37    63  1138     0      66  ,
 47381    63   184    39    63  1138     0     111  hb
 47382    63   184    41    63  1138     0      66  ,
 47383    63   184    43    63  1138     0     111  ix
 47384    63   184    45    63  1138     0      59  (
 47385    63   184    46    63  1138     0     111  position
 47386    63   184    54    63  1138     0      59  (
 47387    63   184    55    63  1138     0      60  )
 47388    63   184    56    63  1138     0      60  )
 47389    63   184    57    63  1138     0      66  ,
 47390    63   184    59    63  1138     0     111  length
 47391    63   184    65    63  1138     0      60  )
 47392    63   184    66    63  1138     0     102  ;
 47393    63   185     9    63  1138     0     111  position
 47394    63   185    17    63  1138     0      59  (
 47395    63   185    18    63  1138     0     111  position
 47396    63   185    26    63  1138     0      59  (
 47397    63   185    27    63  1138     0      60  )
 47398    63   185    29    63  1138     0      74  +
 47399    63   185    31    63  1138     0     111  length
 47400    63   185    37    63  1138     0      60  )
 47401    63   185    38    63  1138     0     102  ;
 47402    63   186     9    63  1138     0      19  return
 47403    63   186    16    63  1138     0      44  this
 47404    63   186    20    63  1138     0     102  ;
 47405    63   190     5    63  1138     0      64  }
 47406    63   190     5    63  1138     0    2652  ENDMETHOD
 47407    63   190     5    63  1139     0    2653  STARTMETHOD
 47408    63   192    12    63  1139     0     111  DoubleBuffer
 47409    63   192    25    63  1139     0     111  put
 47410    63   192    28    63  1139     0      59  (
 47411    63   192    29    63  1139     0     111  DoubleBuffer
 47412    63   192    42    63  1139     0     111  src
 47413    63   192    45    63  1139     0      60  )
 47414    63   192    47    63  1139     0      63  {
 47415    63   194     9    63  1139     0      31  if
 47416    63   194    12    63  1139     0      59  (
 47417    63   194    13    63  1139     0     111  src
 47418    63   194    28    63  1139     0     111  HeapDoubleBuffer
 47419    63   194    44    63  1139     0      60  )
 47420    63   194    46    63  1139     0      63  {
 47421    63   195    13    63  1139     0      31  if
 47422    63   195    16    63  1139     0      59  (
 47423    63   195    17    63  1139     0     111  src
 47424    63   195    21    63  1139     0      68  ==
 47425    63   195    24    63  1139     0      44  this
 47426    63   195    28    63  1139     0      60  )
 47427    63   196    17    63  1139     0      20  throw
 47428    63   196    27    63  1139     0     111  IllegalArgumentException
 47429    63   196    51    63  1139     0      59  (
 47430    63   196    52    63  1139     0      60  )
 47431    63   196    53    63  1139     0     102  ;
 47432    63   197    13    63  1139     0     111  HeapDoubleBuffer
 47433    63   197    30    63  1139     0     111  sb
 47434    63   197    33    63  1139     0      67  =
 47435    63   197    35    63  1139     0      59  (
 47436    63   197    36    63  1139     0     111  HeapDoubleBuffer
 47437    63   197    52    63  1139     0      60  )
 47438    63   197    53    63  1139     0     111  src
 47439    63   197    56    63  1139     0     102  ;
 47440    63   198    13    63  1139     0      36  int
 47441    63   198    17    63  1139     0     111  n
 47442    63   198    19    63  1139     0      67  =
 47443    63   198    21    63  1139     0     111  sb.remaining
 47444    63   198    33    63  1139     0      59  (
 47445    63   198    34    63  1139     0      60  )
 47446    63   198    35    63  1139     0     102  ;
 47447    63   199    13    63  1139     0      31  if
 47448    63   199    16    63  1139     0      59  (
 47449    63   199    17    63  1139     0     111  n
 47450    63   199    19    63  1139     0      89  >
 47451    63   199    21    63  1139     0     111  remaining
 47452    63   199    30    63  1139     0      59  (
 47453    63   199    31    63  1139     0      60  )
 47454    63   199    32    63  1139     0      60  )
 47455    63   200    17    63  1139     0      20  throw
 47456    63   200    27    63  1139     0     111  BufferOverflowException
 47457    63   200    50    63  1139     0      59  (
 47458    63   200    51    63  1139     0      60  )
 47459    63   200    52    63  1139     0     102  ;
 47460    63   201    13    63  1139     0     111  System.arraycopy
 47461    63   201    29    63  1139     0      59  (
 47462    63   201    30    63  1139     0     111  sb.hb
 47463    63   201    35    63  1139     0      66  ,
 47464    63   201    37    63  1139     0     111  sb.ix
 47465    63   201    42    63  1139     0      59  (
 47466    63   201    43    63  1139     0     111  sb.position
 47467    63   201    54    63  1139     0      59  (
 47468    63   201    55    63  1139     0      60  )
 47469    63   201    56    63  1139     0      60  )
 47470    63   201    57    63  1139     0      66  ,
 47471    63   202    30    63  1139     0     111  hb
 47472    63   202    32    63  1139     0      66  ,
 47473    63   202    34    63  1139     0     111  ix
 47474    63   202    36    63  1139     0      59  (
 47475    63   202    37    63  1139     0     111  position
 47476    63   202    45    63  1139     0      59  (
 47477    63   202    46    63  1139     0      60  )
 47478    63   202    47    63  1139     0      60  )
 47479    63   202    48    63  1139     0      66  ,
 47480    63   202    50    63  1139     0     111  n
 47481    63   202    51    63  1139     0      60  )
 47482    63   202    52    63  1139     0     102  ;
 47483    63   203    13    63  1139     1     111  sb.position
 47484    63   203    24    63  1139     1      59  (
 47485    63   203    25    63  1139     1     111  sb.position
 47486    63   203    36    63  1139     1      59  (
 47487    63   203    37    63  1139     1      60  )
 47488    63   203    39    63  1139     1      74  +
 47489    63   203    41    63  1139     1     111  n
 47490    63   203    42    63  1139     1      60  )
 47491    63   203    43    63  1139     1     102  ;
 47492    63   204    13    63  1139     1     111  position
 47493    63   204    21    63  1139     1      59  (
 47494    63   204    22    63  1139     1     111  position
 47495    63   204    30    63  1139     1      59  (
 47496    63   204    31    63  1139     1      60  )
 47497    63   204    33    63  1139     1      74  +
 47498    63   204    35    63  1139     1     111  n
 47499    63   204    36    63  1139     1      60  )
 47500    63   204    37    63  1139     1     102  ;
 47501    63   205     9    63  1139     0      64  }
 47502    63   205    11    63  1139     0      48  else
 47503    63   205    16    63  1139     0      31  if
 47504    63   205    19    63  1139     0      59  (
 47505    63   205    20    63  1139     0     111  src.isDirect
 47506    63   205    32    63  1139     0      59  (
 47507    63   205    33    63  1139     0      60  )
 47508    63   205    34    63  1139     0      60  )
 47509    63   205    36    63  1139     0      63  {
 47510    63   206    13    63  1139     0      36  int
 47511    63   206    17    63  1139     0     111  n
 47512    63   206    19    63  1139     0      67  =
 47513    63   206    21    63  1139     0     111  src.remaining
 47514    63   206    34    63  1139     0      59  (
 47515    63   206    35    63  1139     0      60  )
 47516    63   206    36    63  1139     0     102  ;
 47517    63   207    13    63  1139     0      31  if
 47518    63   207    16    63  1139     0      59  (
 47519    63   207    17    63  1139     0     111  n
 47520    63   207    19    63  1139     0      89  >
 47521    63   207    21    63  1139     0     111  remaining
 47522    63   207    30    63  1139     0      59  (
 47523    63   207    31    63  1139     0      60  )
 47524    63   207    32    63  1139     0      60  )
 47525    63   208    17    63  1139     0      20  throw
 47526    63   208    27    63  1139     0     111  BufferOverflowException
 47527    63   208    50    63  1139     0      59  (
 47528    63   208    51    63  1139     0      60  )
 47529    63   208    52    63  1139     0     102  ;
 47530    63   209    13    63  1139     0     111  src.get
 47531    63   209    20    63  1139     0      59  (
 47532    63   209    21    63  1139     0     111  hb
 47533    63   209    23    63  1139     0      66  ,
 47534    63   209    25    63  1139     0     111  ix
 47535    63   209    27    63  1139     0      59  (
 47536    63   209    28    63  1139     0     111  position
 47537    63   209    36    63  1139     0      59  (
 47538    63   209    37    63  1139     0      60  )
 47539    63   209    38    63  1139     0      60  )
 47540    63   209    39    63  1139     0      66  ,
 47541    63   209    41    63  1139     0     111  n
 47542    63   209    42    63  1139     0      60  )
 47543    63   209    43    63  1139     0     102  ;
 47544    63   210    13    63  1139     0     111  position
 47545    63   210    21    63  1139     0      59  (
 47546    63   210    22    63  1139     0     111  position
 47547    63   210    30    63  1139     0      59  (
 47548    63   210    31    63  1139     0      60  )
 47549    63   210    33    63  1139     0      74  +
 47550    63   210    35    63  1139     0     111  n
 47551    63   210    36    63  1139     0      60  )
 47552    63   210    37    63  1139     0     102  ;
 47553    63   211     9    63  1139     0      64  }
 47554    63   211    11    63  1139     0      48  else
 47555    63   211    16    63  1139     0      63  {
 47556    63   212    13    63  1139     0     111  super.put
 47557    63   212    22    63  1139     0      59  (
 47558    63   212    23    63  1139     0     111  src
 47559    63   212    26    63  1139     0      60  )
 47560    63   212    27    63  1139     0     102  ;
 47561    63   213     9    63  1139     0      64  }
 47562    63   214     9    63  1139     0      19  return
 47563    63   214    16    63  1139     0      44  this
 47564    63   214    20    63  1139     0     102  ;
 47565    63   218     5    63  1139     0      64  }
 47566    63   218     5    63  1139     0    2654  ENDMETHOD
 47567    63   218     5    63  1140     0    2655  STARTMETHOD
 47568    63   220    12    63  1140     0     111  DoubleBuffer
 47569    63   220    25    63  1140     0     111  compact
 47570    63   220    32    63  1140     0      59  (
 47571    63   220    33    63  1140     0      60  )
 47572    63   220    35    63  1140     0      63  {
 47573    63   222     9    63  1140     0     111  System.arraycopy
 47574    63   222    25    63  1140     0      59  (
 47575    63   222    26    63  1140     0     111  hb
 47576    63   222    28    63  1140     0      66  ,
 47577    63   222    30    63  1140     0     111  ix
 47578    63   222    32    63  1140     0      59  (
 47579    63   222    33    63  1140     0     111  position
 47580    63   222    41    63  1140     0      59  (
 47581    63   222    42    63  1140     0      60  )
 47582    63   222    43    63  1140     0      60  )
 47583    63   222    44    63  1140     0      66  ,
 47584    63   222    46    63  1140     0     111  hb
 47585    63   222    48    63  1140     0      66  ,
 47586    63   222    50    63  1140     0     111  ix
 47587    63   222    52    63  1140     0      59  (
 47588    63   222    53    63  1140     0     112  0
 47589    63   222    54    63  1140     0      60  )
 47590    63   222    55    63  1140     0      66  ,
 47591    63   222    57    63  1140     0     111  remaining
 47592    63   222    66    63  1140     0      59  (
 47593    63   222    67    63  1140     0      60  )
 47594    63   222    68    63  1140     0      60  )
 47595    63   222    69    63  1140     0     102  ;
 47596    63   223     9    63  1140     1     111  position
 47597    63   223    17    63  1140     1      59  (
 47598    63   223    18    63  1140     1     111  remaining
 47599    63   223    27    63  1140     1      59  (
 47600    63   223    28    63  1140     1      60  )
 47601    63   223    29    63  1140     1      60  )
 47602    63   223    30    63  1140     1     102  ;
 47603    63   224     9    63  1140     1     111  limit
 47604    63   224    14    63  1140     1      59  (
 47605    63   224    15    63  1140     1     111  capacity
 47606    63   224    23    63  1140     1      59  (
 47607    63   224    24    63  1140     1      60  )
 47608    63   224    25    63  1140     1      60  )
 47609    63   224    26    63  1140     1     102  ;
 47610    63   225     9    63  1140     0     111  clearMark
 47611    63   225    18    63  1140     0      59  (
 47612    63   225    19    63  1140     0      60  )
 47613    63   225    20    63  1140     0     102  ;
 47614    63   226     9    63  1140     0      19  return
 47615    63   226    16    63  1140     0      44  this
 47616    63   226    20    63  1140     0     102  ;
 47617    63   230     5    63  1140     0      64  }
 47618    63   230     5    63  1140     0    2656  ENDMETHOD
 47619    63   230     5    63  1141     0    2657  STARTMETHOD
 47620    63   586    12    63  1141     0     111  ByteOrder
 47621    63   586    22    63  1141     0     111  order
 47622    63   586    27    63  1141     0      59  (
 47623    63   586    28    63  1141     0      60  )
 47624    63   586    30    63  1141     0      63  {
 47625    63   587     9    63  1141     0      19  return
 47626    63   587    16    63  1141     0     111  ByteOrder.nativeOrder
 47627    63   587    37    63  1141     0      59  (
 47628    63   587    38    63  1141     0      60  )
 47629    63   587    39    63  1141     0     102  ;
 47630    63   588     5    63  1141     0      64  }
 47631    63   588     5    63  1141     0    2658  ENDMETHOD
 47632    63   592     1    63    -1     0      64  }
 47633    63   592     1    63    -1     1    2659  ENDCLASS
 47634    63   592     1    -1    -1     1    2660  ENDFILE C:\Users\RA\javasrc\java\nio\HeapDoubleBuffer.java
 47635    64     1     1    -1    -1     1    2661  STARTFILE C:\Users\RA\javasrc\java\nio\HeapDoubleBufferR.java
 47636    64    28     9    -1    -1     0     111  java.nio
 47637    64    28    17    -1    -1     0     102  ;
 47638    64    42     1    64    -1     0    2662  STARTCLASS
 47639    64    42     1    64    -1     0      24  class
 47640    64    42     7    64    -1     0     111  HeapDoubleBufferR
 47641    64    43     5    64    -1     0      38  extends
 47642    64    43    13    64    -1     0     111  HeapDoubleBuffer
 47643    64    44     1    64    -1     0      63  {
 47644    64    44     1    64  1142     0    2663  STARTMETHOD
 47645    64    55     5    64  1142     0     111  HeapDoubleBufferR
 47646    64    55    22    64  1142     0      59  (
 47647    64    55    23    64  1142     0      36  int
 47648    64    55    27    64  1142     0     111  cap
 47649    64    55    30    64  1142     0      66  ,
 47650    64    55    32    64  1142     0      36  int
 47651    64    55    36    64  1142     0     111  lim
 47652    64    55    39    64  1142     0      60  )
 47653    64    55    41    64  1142     0      63  {
 47654    64    63     9    64  1142     0      27  super
 47655    64    63    14    64  1142     0      59  (
 47656    64    63    15    64  1142     0     111  cap
 47657    64    63    18    64  1142     0      66  ,
 47658    64    63    20    64  1142     0     111  lim
 47659    64    63    23    64  1142     0      60  )
 47660    64    63    24    64  1142     0     102  ;
 47661    64    64     9    64  1142     0     111  this.isReadOnly
 47662    64    64    25    64  1142     0      67  =
 47663    64    64    27    64  1142     0      52  true
 47664    64    64    31    64  1142     0     102  ;
 47665    64    66     5    64  1142     0      64  }
 47666    64    66     5    64  1142     0    2664  ENDMETHOD
 47667    64    66     5    64  1143     0    2665  STARTMETHOD
 47668    64    68     5    64  1143     0     111  HeapDoubleBufferR
 47669    64    68    22    64  1143     0      59  (
 47670    64    68    23    64  1143     0      32  double
 47671    64    68    29    64  1143     0      61  [
 47672    64    68    30    64  1143     0      62  ]
 47673    64    68    32    64  1143     0     111  buf
 47674    64    68    35    64  1143     0      66  ,
 47675    64    68    37    64  1143     0      36  int
 47676    64    68    41    64  1143     0     111  off
 47677    64    68    44    64  1143     0      66  ,
 47678    64    68    46    64  1143     0      36  int
 47679    64    68    50    64  1143     0     111  len
 47680    64    68    53    64  1143     0      60  )
 47681    64    68    55    64  1143     0      63  {
 47682    64    76     9    64  1143     0      27  super
 47683    64    76    14    64  1143     0      59  (
 47684    64    76    15    64  1143     0     111  buf
 47685    64    76    18    64  1143     0      66  ,
 47686    64    76    20    64  1143     0     111  off
 47687    64    76    23    64  1143     0      66  ,
 47688    64    76    25    64  1143     0     111  len
 47689    64    76    28    64  1143     0      60  )
 47690    64    76    29    64  1143     0     102  ;
 47691    64    77     9    64  1143     0     111  this.isReadOnly
 47692    64    77    25    64  1143     0      67  =
 47693    64    77    27    64  1143     0      52  true
 47694    64    77    31    64  1143     0     102  ;
 47695    64    79     5    64  1143     0      64  }
 47696    64    79     5    64  1143     0    2666  ENDMETHOD
 47697    64    79     5    64  1144     0    2667  STARTMETHOD
 47698    64    81     5    64  1144     0      23  protected
 47699    64    81    15    64  1144     0     111  HeapDoubleBufferR
 47700    64    81    32    64  1144     0      59  (
 47701    64    81    33    64  1144     0      32  double
 47702    64    81    39    64  1144     0      61  [
 47703    64    81    40    64  1144     0      62  ]
 47704    64    81    42    64  1144     0     111  buf
 47705    64    81    45    64  1144     0      66  ,
 47706    64    82    36    64  1144     0      36  int
 47707    64    82    40    64  1144     0     111  mark
 47708    64    82    44    64  1144     0      66  ,
 47709    64    82    46    64  1144     0      36  int
 47710    64    82    50    64  1144     0     111  pos
 47711    64    82    53    64  1144     0      66  ,
 47712    64    82    55    64  1144     0      36  int
 47713    64    82    59    64  1144     0     111  lim
 47714    64    82    62    64  1144     0      66  ,
 47715    64    82    64    64  1144     0      36  int
 47716    64    82    68    64  1144     0     111  cap
 47717    64    82    71    64  1144     0      66  ,
 47718    64    83    36    64  1144     0      36  int
 47719    64    83    40    64  1144     0     111  off
 47720    64    83    43    64  1144     0      60  )
 47721    64    84     5    64  1144     0      63  {
 47722    64    92     9    64  1144     0      27  super
 47723    64    92    14    64  1144     0      59  (
 47724    64    92    15    64  1144     0     111  buf
 47725    64    92    18    64  1144     0      66  ,
 47726    64    92    20    64  1144     0     111  mark
 47727    64    92    24    64  1144     0      66  ,
 47728    64    92    26    64  1144     0     111  pos
 47729    64    92    29    64  1144     0      66  ,
 47730    64    92    31    64  1144     0     111  lim
 47731    64    92    34    64  1144     0      66  ,
 47732    64    92    36    64  1144     0     111  cap
 47733    64    92    39    64  1144     0      66  ,
 47734    64    92    41    64  1144     0     111  off
 47735    64    92    44    64  1144     0      60  )
 47736    64    92    45    64  1144     0     102  ;
 47737    64    93     9    64  1144     0     111  this.isReadOnly
 47738    64    93    25    64  1144     0      67  =
 47739    64    93    27    64  1144     0      52  true
 47740    64    93    31    64  1144     0     102  ;
 47741    64    95     5    64  1144     0      64  }
 47742    64    95     5    64  1144     0    2668  ENDMETHOD
 47743    64    95     5    64  1145     0    2669  STARTMETHOD
 47744    64    97    12    64  1145     0     111  DoubleBuffer
 47745    64    97    25    64  1145     0     111  slice
 47746    64    97    30    64  1145     0      59  (
 47747    64    97    31    64  1145     0      60  )
 47748    64    97    33    64  1145     0      63  {
 47749    64    98     9    64  1145     0      19  return
 47750    64    98    20    64  1145     0     111  HeapDoubleBufferR
 47751    64    98    37    64  1145     0      59  (
 47752    64    98    38    64  1145     0     111  hb
 47753    64    98    40    64  1145     0      66  ,
 47754    64    99    41    64  1145     0      77  -
 47755    64    99    42    64  1145     0     112  1
 47756    64    99    43    64  1145     0      66  ,
 47757    64   100    41    64  1145     0     112  0
 47758    64   100    42    64  1145     0      66  ,
 47759    64   101    41    64  1145     1     111  this.remaining
 47760    64   101    55    64  1145     1      59  (
 47761    64   101    56    64  1145     1      60  )
 47762    64   101    57    64  1145     1      66  ,
 47763    64   102    41    64  1145     1     111  this.remaining
 47764    64   102    55    64  1145     1      59  (
 47765    64   102    56    64  1145     1      60  )
 47766    64   102    57    64  1145     1      66  ,
 47767    64   103    41    64  1145     0     111  this.position
 47768    64   103    54    64  1145     0      59  (
 47769    64   103    55    64  1145     0      60  )
 47770    64   103    57    64  1145     0      74  +
 47771    64   103    59    64  1145     0     111  offset
 47772    64   103    65    64  1145     0      60  )
 47773    64   103    66    64  1145     0     102  ;
 47774    64   104     5    64  1145     0      64  }
 47775    64   104     5    64  1145     0    2670  ENDMETHOD
 47776    64   104     5    64  1146     0    2671  STARTMETHOD
 47777    64   106    12    64  1146     0     111  DoubleBuffer
 47778    64   106    25    64  1146     0     111  duplicate
 47779    64   106    34    64  1146     0      59  (
 47780    64   106    35    64  1146     0      60  )
 47781    64   106    37    64  1146     0      63  {
 47782    64   107     9    64  1146     0      19  return
 47783    64   107    20    64  1146     0     111  HeapDoubleBufferR
 47784    64   107    37    64  1146     0      59  (
 47785    64   107    38    64  1146     0     111  hb
 47786    64   107    40    64  1146     0      66  ,
 47787    64   108    41    64  1146     1     111  this.markValue
 47788    64   108    55    64  1146     1      59  (
 47789    64   108    56    64  1146     1      60  )
 47790    64   108    57    64  1146     1      66  ,
 47791    64   109    41    64  1146     1     111  this.position
 47792    64   109    54    64  1146     1      59  (
 47793    64   109    55    64  1146     1      60  )
 47794    64   109    56    64  1146     1      66  ,
 47795    64   110    41    64  1146     1     111  this.limit
 47796    64   110    51    64  1146     1      59  (
 47797    64   110    52    64  1146     1      60  )
 47798    64   110    53    64  1146     1      66  ,
 47799    64   111    41    64  1146     1     111  this.capacity
 47800    64   111    54    64  1146     1      59  (
 47801    64   111    55    64  1146     1      60  )
 47802    64   111    56    64  1146     1      66  ,
 47803    64   112    41    64  1146     0     111  offset
 47804    64   112    47    64  1146     0      60  )
 47805    64   112    48    64  1146     0     102  ;
 47806    64   113     5    64  1146     0      64  }
 47807    64   113     5    64  1146     0    2672  ENDMETHOD
 47808    64   113     5    64  1147     0    2673  STARTMETHOD
 47809    64   115    12    64  1147     0     111  DoubleBuffer
 47810    64   115    25    64  1147     0     111  asReadOnlyBuffer
 47811    64   115    41    64  1147     0      59  (
 47812    64   115    42    64  1147     0      60  )
 47813    64   115    44    64  1147     0      63  {
 47814    64   124     9    64  1147     0      19  return
 47815    64   124    16    64  1147     0     111  duplicate
 47816    64   124    25    64  1147     0      59  (
 47817    64   124    26    64  1147     0      60  )
 47818    64   124    27    64  1147     0     102  ;
 47819    64   126     5    64  1147     0      64  }
 47820    64   126     5    64  1147     0    2674  ENDMETHOD
 47821    64   126     5    64  1148     0    2675  STARTMETHOD
 47822    64   157    12    64  1148     0      39  boolean
 47823    64   157    20    64  1148     0     111  isReadOnly
 47824    64   157    30    64  1148     0      59  (
 47825    64   157    31    64  1148     0      60  )
 47826    64   157    33    64  1148     0      63  {
 47827    64   158     9    64  1148     0      19  return
 47828    64   158    16    64  1148     0      52  true
 47829    64   158    20    64  1148     0     102  ;
 47830    64   159     5    64  1148     0      64  }
 47831    64   159     5    64  1148     0    2676  ENDMETHOD
 47832    64   159     5    64  1149     0    2677  STARTMETHOD
 47833    64   161    12    64  1149     0     111  DoubleBuffer
 47834    64   161    25    64  1149     0     111  put
 47835    64   161    28    64  1149     0      59  (
 47836    64   161    29    64  1149     0      32  double
 47837    64   161    36    64  1149     0     111  x
 47838    64   161    37    64  1149     0      60  )
 47839    64   161    39    64  1149     0      63  {
 47840    64   166     9    64  1149     0      20  throw
 47841    64   166    19    64  1149     0     111  ReadOnlyBufferException
 47842    64   166    42    64  1149     0      59  (
 47843    64   166    43    64  1149     0      60  )
 47844    64   166    44    64  1149     0     102  ;
 47845    64   168     5    64  1149     0      64  }
 47846    64   168     5    64  1149     0    2678  ENDMETHOD
 47847    64   168     5    64  1150     0    2679  STARTMETHOD
 47848    64   170    12    64  1150     0     111  DoubleBuffer
 47849    64   170    25    64  1150     0     111  put
 47850    64   170    28    64  1150     0      59  (
 47851    64   170    29    64  1150     0      36  int
 47852    64   170    33    64  1150     0     111  i
 47853    64   170    34    64  1150     0      66  ,
 47854    64   170    36    64  1150     0      32  double
 47855    64   170    43    64  1150     0     111  x
 47856    64   170    44    64  1150     0      60  )
 47857    64   170    46    64  1150     0      63  {
 47858    64   175     9    64  1150     0      20  throw
 47859    64   175    19    64  1150     0     111  ReadOnlyBufferException
 47860    64   175    42    64  1150     0      59  (
 47861    64   175    43    64  1150     0      60  )
 47862    64   175    44    64  1150     0     102  ;
 47863    64   177     5    64  1150     0      64  }
 47864    64   177     5    64  1150     0    2680  ENDMETHOD
 47865    64   177     5    64  1151     0    2681  STARTMETHOD
 47866    64   179    12    64  1151     0     111  DoubleBuffer
 47867    64   179    25    64  1151     0     111  put
 47868    64   179    28    64  1151     0      59  (
 47869    64   179    29    64  1151     0      32  double
 47870    64   179    35    64  1151     0      61  [
 47871    64   179    36    64  1151     0      62  ]
 47872    64   179    38    64  1151     0     111  src
 47873    64   179    41    64  1151     0      66  ,
 47874    64   179    43    64  1151     0      36  int
 47875    64   179    47    64  1151     0     111  offset
 47876    64   179    53    64  1151     0      66  ,
 47877    64   179    55    64  1151     0      36  int
 47878    64   179    59    64  1151     0     111  length
 47879    64   179    65    64  1151     0      60  )
 47880    64   179    67    64  1151     0      63  {
 47881    64   188     9    64  1151     0      20  throw
 47882    64   188    19    64  1151     0     111  ReadOnlyBufferException
 47883    64   188    42    64  1151     0      59  (
 47884    64   188    43    64  1151     0      60  )
 47885    64   188    44    64  1151     0     102  ;
 47886    64   190     5    64  1151     0      64  }
 47887    64   190     5    64  1151     0    2682  ENDMETHOD
 47888    64   190     5    64  1152     0    2683  STARTMETHOD
 47889    64   192    12    64  1152     0     111  DoubleBuffer
 47890    64   192    25    64  1152     0     111  put
 47891    64   192    28    64  1152     0      59  (
 47892    64   192    29    64  1152     0     111  DoubleBuffer
 47893    64   192    42    64  1152     0     111  src
 47894    64   192    45    64  1152     0      60  )
 47895    64   192    47    64  1152     0      63  {
 47896    64   216     9    64  1152     0      20  throw
 47897    64   216    19    64  1152     1     111  ReadOnlyBufferException
 47898    64   216    42    64  1152     1      59  (
 47899    64   216    43    64  1152     1      60  )
 47900    64   216    44    64  1152     1     102  ;
 47901    64   218     5    64  1152     1      64  }
 47902    64   218     5    64  1152     0    2684  ENDMETHOD
 47903    64   218     5    64  1153     0    2685  STARTMETHOD
 47904    64   220    12    64  1153     0     111  DoubleBuffer
 47905    64   220    25    64  1153     0     111  compact
 47906    64   220    32    64  1153     0      59  (
 47907    64   220    33    64  1153     0      60  )
 47908    64   220    35    64  1153     0      63  {
 47909    64   228     9    64  1153     0      20  throw
 47910    64   228    19    64  1153     1     111  ReadOnlyBufferException
 47911    64   228    42    64  1153     1      59  (
 47912    64   228    43    64  1153     1      60  )
 47913    64   228    44    64  1153     1     102  ;
 47914    64   230     5    64  1153     1      64  }
 47915    64   230     5    64  1153     0    2686  ENDMETHOD
 47916    64   230     5    64  1154     0    2687  STARTMETHOD
 47917    64   586    12    64  1154     0     111  ByteOrder
 47918    64   586    22    64  1154     0     111  order
 47919    64   586    27    64  1154     0      59  (
 47920    64   586    28    64  1154     0      60  )
 47921    64   586    30    64  1154     0      63  {
 47922    64   587     9    64  1154     0      19  return
 47923    64   587    16    64  1154     1     111  ByteOrder.nativeOrder
 47924    64   587    37    64  1154     1      59  (
 47925    64   587    38    64  1154     1      60  )
 47926    64   587    39    64  1154     1     102  ;
 47927    64   588     5    64  1154     1      64  }
 47928    64   588     5    64  1154     0    2688  ENDMETHOD
 47929    64   592     1    64    -1     0      64  }
 47930    64   592     1    64    -1     1    2689  ENDCLASS
 47931    64   592     1    -1    -1     1    2690  ENDFILE C:\Users\RA\javasrc\java\nio\HeapDoubleBufferR.java
 47932    65     1     1    -1    -1     1    2691  STARTFILE C:\Users\RA\javasrc\java\nio\HeapFloatBuffer.java
 47933    65    28     9    -1    -1     0     111  java.nio
 47934    65    28    17    -1    -1     0     102  ;
 47935    65    42     1    65    -1     0    2692  STARTCLASS
 47936    65    42     1    65    -1     0      24  class
 47937    65    42     7    65    -1     0     111  HeapFloatBuffer
 47938    65    43     5    65    -1     0      38  extends
 47939    65    43    13    65    -1     0     111  FloatBuffer
 47940    65    44     1    65    -1     0      63  {
 47941    65    44     1    65  1155     0    2693  STARTMETHOD
 47942    65    55     5    65  1155     0     111  HeapFloatBuffer
 47943    65    55    20    65  1155     0      59  (
 47944    65    55    21    65  1155     0      36  int
 47945    65    55    25    65  1155     0     111  cap
 47946    65    55    28    65  1155     0      66  ,
 47947    65    55    30    65  1155     0      36  int
 47948    65    55    34    65  1155     0     111  lim
 47949    65    55    37    65  1155     0      60  )
 47950    65    55    39    65  1155     0      63  {
 47951    65    57     9    65  1155     0      27  super
 47952    65    57    14    65  1155     0      59  (
 47953    65    57    15    65  1155     0      77  -
 47954    65    57    16    65  1155     0     112  1
 47955    65    57    17    65  1155     0      66  ,
 47956    65    57    19    65  1155     0     112  0
 47957    65    57    20    65  1155     0      66  ,
 47958    65    57    22    65  1155     0     111  lim
 47959    65    57    25    65  1155     0      66  ,
 47960    65    57    27    65  1155     0     111  cap
 47961    65    57    30    65  1155     0      66  ,
 47962    65    57    41    65  1155     0      61  [
 47963    65    57    42    65  1155     0     111  cap
 47964    65    57    45    65  1155     0      62  ]
 47965    65    57    46    65  1155     0      66  ,
 47966    65    57    48    65  1155     0     112  0
 47967    65    57    49    65  1155     0      60  )
 47968    65    57    50    65  1155     0     102  ;
 47969    65    66     5    65  1155     0      64  }
 47970    65    66     5    65  1155     0    2694  ENDMETHOD
 47971    65    66     5    65  1156     0    2695  STARTMETHOD
 47972    65    68     5    65  1156     0     111  HeapFloatBuffer
 47973    65    68    20    65  1156     0      59  (
 47974    65    68    26    65  1156     0      61  [
 47975    65    68    27    65  1156     0      62  ]
 47976    65    68    29    65  1156     0     111  buf
 47977    65    68    32    65  1156     0      66  ,
 47978    65    68    34    65  1156     0      36  int
 47979    65    68    38    65  1156     0     111  off
 47980    65    68    41    65  1156     0      66  ,
 47981    65    68    43    65  1156     0      36  int
 47982    65    68    47    65  1156     0     111  len
 47983    65    68    50    65  1156     0      60  )
 47984    65    68    52    65  1156     0      63  {
 47985    65    70     9    65  1156     0      27  super
 47986    65    70    14    65  1156     0      59  (
 47987    65    70    15    65  1156     0      77  -
 47988    65    70    16    65  1156     0     112  1
 47989    65    70    17    65  1156     0      66  ,
 47990    65    70    19    65  1156     0     111  off
 47991    65    70    22    65  1156     0      66  ,
 47992    65    70    24    65  1156     0     111  off
 47993    65    70    28    65  1156     0      74  +
 47994    65    70    30    65  1156     0     111  len
 47995    65    70    33    65  1156     0      66  ,
 47996    65    70    35    65  1156     0     111  buf.length
 47997    65    70    45    65  1156     0      66  ,
 47998    65    70    47    65  1156     0     111  buf
 47999    65    70    50    65  1156     0      66  ,
 48000    65    70    52    65  1156     0     112  0
 48001    65    70    53    65  1156     0      60  )
 48002    65    70    54    65  1156     0     102  ;
 48003    65    79     5    65  1156     0      64  }
 48004    65    79     5    65  1156     0    2696  ENDMETHOD
 48005    65    79     5    65  1157     0    2697  STARTMETHOD
 48006    65    81     5    65  1157     0      23  protected
 48007    65    81    15    65  1157     0     111  HeapFloatBuffer
 48008    65    81    30    65  1157     0      59  (
 48009    65    81    36    65  1157     0      61  [
 48010    65    81    37    65  1157     0      62  ]
 48011    65    81    39    65  1157     0     111  buf
 48012    65    81    42    65  1157     0      66  ,
 48013    65    82    36    65  1157     0      36  int
 48014    65    82    40    65  1157     0     111  mark
 48015    65    82    44    65  1157     0      66  ,
 48016    65    82    46    65  1157     0      36  int
 48017    65    82    50    65  1157     0     111  pos
 48018    65    82    53    65  1157     0      66  ,
 48019    65    82    55    65  1157     0      36  int
 48020    65    82    59    65  1157     0     111  lim
 48021    65    82    62    65  1157     0      66  ,
 48022    65    82    64    65  1157     0      36  int
 48023    65    82    68    65  1157     0     111  cap
 48024    65    82    71    65  1157     0      66  ,
 48025    65    83    36    65  1157     0      36  int
 48026    65    83    40    65  1157     0     111  off
 48027    65    83    43    65  1157     0      60  )
 48028    65    84     5    65  1157     0      63  {
 48029    65    86     9    65  1157     0      27  super
 48030    65    86    14    65  1157     0      59  (
 48031    65    86    15    65  1157     0     111  mark
 48032    65    86    19    65  1157     0      66  ,
 48033    65    86    21    65  1157     0     111  pos
 48034    65    86    24    65  1157     0      66  ,
 48035    65    86    26    65  1157     0     111  lim
 48036    65    86    29    65  1157     0      66  ,
 48037    65    86    31    65  1157     0     111  cap
 48038    65    86    34    65  1157     0      66  ,
 48039    65    86    36    65  1157     0     111  buf
 48040    65    86    39    65  1157     0      66  ,
 48041    65    86    41    65  1157     0     111  off
 48042    65    86    44    65  1157     0      60  )
 48043    65    86    45    65  1157     0     102  ;
 48044    65    95     5    65  1157     0      64  }
 48045    65    95     5    65  1157     0    2698  ENDMETHOD
 48046    65    95     5    65  1158     0    2699  STARTMETHOD
 48047    65    97    12    65  1158     0     111  FloatBuffer
 48048    65    97    24    65  1158     0     111  slice
 48049    65    97    29    65  1158     0      59  (
 48050    65    97    30    65  1158     0      60  )
 48051    65    97    32    65  1158     0      63  {
 48052    65    98     9    65  1158     0      19  return
 48053    65    98    20    65  1158     0     111  HeapFloatBuffer
 48054    65    98    35    65  1158     0      59  (
 48055    65    98    36    65  1158     0     111  hb
 48056    65    98    38    65  1158     0      66  ,
 48057    65    99    41    65  1158     0      77  -
 48058    65    99    42    65  1158     0     112  1
 48059    65    99    43    65  1158     0      66  ,
 48060    65   100    41    65  1158     0     112  0
 48061    65   100    42    65  1158     0      66  ,
 48062    65   101    41    65  1158     1     111  this.remaining
 48063    65   101    55    65  1158     1      59  (
 48064    65   101    56    65  1158     1      60  )
 48065    65   101    57    65  1158     1      66  ,
 48066    65   102    41    65  1158     1     111  this.remaining
 48067    65   102    55    65  1158     1      59  (
 48068    65   102    56    65  1158     1      60  )
 48069    65   102    57    65  1158     1      66  ,
 48070    65   103    41    65  1158     0     111  this.position
 48071    65   103    54    65  1158     0      59  (
 48072    65   103    55    65  1158     0      60  )
 48073    65   103    57    65  1158     0      74  +
 48074    65   103    59    65  1158     0     111  offset
 48075    65   103    65    65  1158     0      60  )
 48076    65   103    66    65  1158     0     102  ;
 48077    65   104     5    65  1158     0      64  }
 48078    65   104     5    65  1158     0    2700  ENDMETHOD
 48079    65   104     5    65  1159     0    2701  STARTMETHOD
 48080    65   106    12    65  1159     0     111  FloatBuffer
 48081    65   106    24    65  1159     0     111  duplicate
 48082    65   106    33    65  1159     0      59  (
 48083    65   106    34    65  1159     0      60  )
 48084    65   106    36    65  1159     0      63  {
 48085    65   107     9    65  1159     0      19  return
 48086    65   107    20    65  1159     0     111  HeapFloatBuffer
 48087    65   107    35    65  1159     0      59  (
 48088    65   107    36    65  1159     0     111  hb
 48089    65   107    38    65  1159     0      66  ,
 48090    65   108    41    65  1159     1     111  this.markValue
 48091    65   108    55    65  1159     1      59  (
 48092    65   108    56    65  1159     1      60  )
 48093    65   108    57    65  1159     1      66  ,
 48094    65   109    41    65  1159     1     111  this.position
 48095    65   109    54    65  1159     1      59  (
 48096    65   109    55    65  1159     1      60  )
 48097    65   109    56    65  1159     1      66  ,
 48098    65   110    41    65  1159     1     111  this.limit
 48099    65   110    51    65  1159     1      59  (
 48100    65   110    52    65  1159     1      60  )
 48101    65   110    53    65  1159     1      66  ,
 48102    65   111    41    65  1159     1     111  this.capacity
 48103    65   111    54    65  1159     1      59  (
 48104    65   111    55    65  1159     1      60  )
 48105    65   111    56    65  1159     1      66  ,
 48106    65   112    41    65  1159     0     111  offset
 48107    65   112    47    65  1159     0      60  )
 48108    65   112    48    65  1159     0     102  ;
 48109    65   113     5    65  1159     0      64  }
 48110    65   113     5    65  1159     0    2702  ENDMETHOD
 48111    65   113     5    65  1160     0    2703  STARTMETHOD
 48112    65   115    12    65  1160     0     111  FloatBuffer
 48113    65   115    24    65  1160     0     111  asReadOnlyBuffer
 48114    65   115    40    65  1160     0      59  (
 48115    65   115    41    65  1160     0      60  )
 48116    65   115    43    65  1160     0      63  {
 48117    65   117     9    65  1160     0      19  return
 48118    65   117    20    65  1160     0     111  HeapFloatBufferR
 48119    65   117    36    65  1160     0      59  (
 48120    65   117    37    65  1160     0     111  hb
 48121    65   117    39    65  1160     0      66  ,
 48122    65   118    38    65  1160     1     111  this.markValue
 48123    65   118    52    65  1160     1      59  (
 48124    65   118    53    65  1160     1      60  )
 48125    65   118    54    65  1160     1      66  ,
 48126    65   119    38    65  1160     1     111  this.position
 48127    65   119    51    65  1160     1      59  (
 48128    65   119    52    65  1160     1      60  )
 48129    65   119    53    65  1160     1      66  ,
 48130    65   120    38    65  1160     1     111  this.limit
 48131    65   120    48    65  1160     1      59  (
 48132    65   120    49    65  1160     1      60  )
 48133    65   120    50    65  1160     1      66  ,
 48134    65   121    38    65  1160     1     111  this.capacity
 48135    65   121    51    65  1160     1      59  (
 48136    65   121    52    65  1160     1      60  )
 48137    65   121    53    65  1160     1      66  ,
 48138    65   122    38    65  1160     0     111  offset
 48139    65   122    44    65  1160     0      60  )
 48140    65   122    45    65  1160     0     102  ;
 48141    65   126     5    65  1160     0      64  }
 48142    65   126     5    65  1160     0    2704  ENDMETHOD
 48143    65   126     5    65  1161     0    2705  STARTMETHOD
 48144    65   130     5    65  1161     0      23  protected
 48145    65   130    15    65  1161     0      36  int
 48146    65   130    19    65  1161     0     111  ix
 48147    65   130    21    65  1161     0      59  (
 48148    65   130    22    65  1161     0      36  int
 48149    65   130    26    65  1161     0     111  i
 48150    65   130    27    65  1161     0      60  )
 48151    65   130    29    65  1161     0      63  {
 48152    65   131     9    65  1161     0      19  return
 48153    65   131    16    65  1161     0     111  i
 48154    65   131    18    65  1161     0      74  +
 48155    65   131    20    65  1161     0     111  offset
 48156    65   131    26    65  1161     0     102  ;
 48157    65   132     5    65  1161     0      64  }
 48158    65   132     5    65  1161     0    2706  ENDMETHOD
 48159    65   132     5    65  1162     0    2707  STARTMETHOD
 48160    65   134    18    65  1162     0     111  get
 48161    65   134    21    65  1162     0      59  (
 48162    65   134    22    65  1162     0      60  )
 48163    65   134    24    65  1162     0      63  {
 48164    65   135     9    65  1162     0      19  return
 48165    65   135    16    65  1162     0     111  hb
 48166    65   135    18    65  1162     0      61  [
 48167    65   135    19    65  1162     0     111  ix
 48168    65   135    21    65  1162     0      59  (
 48169    65   135    22    65  1162     0     111  nextGetIndex
 48170    65   135    34    65  1162     0      59  (
 48171    65   135    35    65  1162     0      60  )
 48172    65   135    36    65  1162     0      60  )
 48173    65   135    37    65  1162     0      62  ]
 48174    65   135    38    65  1162     0     102  ;
 48175    65   136     5    65  1162     0      64  }
 48176    65   136     5    65  1162     0    2708  ENDMETHOD
 48177    65   136     5    65  1163     0    2709  STARTMETHOD
 48178    65   138    18    65  1163     0     111  get
 48179    65   138    21    65  1163     0      59  (
 48180    65   138    22    65  1163     0      36  int
 48181    65   138    26    65  1163     0     111  i
 48182    65   138    27    65  1163     0      60  )
 48183    65   138    29    65  1163     0      63  {
 48184    65   139     9    65  1163     0      19  return
 48185    65   139    16    65  1163     0     111  hb
 48186    65   139    18    65  1163     0      61  [
 48187    65   139    19    65  1163     0     111  ix
 48188    65   139    21    65  1163     0      59  (
 48189    65   139    22    65  1163     0     111  checkIndex
 48190    65   139    32    65  1163     0      59  (
 48191    65   139    33    65  1163     0     111  i
 48192    65   139    34    65  1163     0      60  )
 48193    65   139    35    65  1163     0      60  )
 48194    65   139    36    65  1163     0      62  ]
 48195    65   139    37    65  1163     0     102  ;
 48196    65   140     5    65  1163     0      64  }
 48197    65   140     5    65  1163     0    2710  ENDMETHOD
 48198    65   140     5    65  1164     0    2711  STARTMETHOD
 48199    65   142    12    65  1164     0     111  FloatBuffer
 48200    65   142    24    65  1164     0     111  get
 48201    65   142    27    65  1164     0      59  (
 48202    65   142    33    65  1164     0      61  [
 48203    65   142    34    65  1164     0      62  ]
 48204    65   142    36    65  1164     0     111  dst
 48205    65   142    39    65  1164     0      66  ,
 48206    65   142    41    65  1164     0      36  int
 48207    65   142    45    65  1164     0     111  offset
 48208    65   142    51    65  1164     0      66  ,
 48209    65   142    53    65  1164     0      36  int
 48210    65   142    57    65  1164     0     111  length
 48211    65   142    63    65  1164     0      60  )
 48212    65   142    65    65  1164     0      63  {
 48213    65   143     9    65  1164     0     111  checkBounds
 48214    65   143    20    65  1164     0      59  (
 48215    65   143    21    65  1164     0     111  offset
 48216    65   143    27    65  1164     0      66  ,
 48217    65   143    29    65  1164     0     111  length
 48218    65   143    35    65  1164     0      66  ,
 48219    65   143    37    65  1164     0     111  dst.length
 48220    65   143    47    65  1164     0      60  )
 48221    65   143    48    65  1164     0     102  ;
 48222    65   144     9    65  1164     0      31  if
 48223    65   144    12    65  1164     0      59  (
 48224    65   144    13    65  1164     0     111  length
 48225    65   144    20    65  1164     0      89  >
 48226    65   144    22    65  1164     0     111  remaining
 48227    65   144    31    65  1164     0      59  (
 48228    65   144    32    65  1164     0      60  )
 48229    65   144    33    65  1164     0      60  )
 48230    65   145    13    65  1164     0      20  throw
 48231    65   145    23    65  1164     0     111  BufferUnderflowException
 48232    65   145    47    65  1164     0      59  (
 48233    65   145    48    65  1164     0      60  )
 48234    65   145    49    65  1164     0     102  ;
 48235    65   146     9    65  1164     0     111  System.arraycopy
 48236    65   146    25    65  1164     0      59  (
 48237    65   146    26    65  1164     0     111  hb
 48238    65   146    28    65  1164     0      66  ,
 48239    65   146    30    65  1164     0     111  ix
 48240    65   146    32    65  1164     0      59  (
 48241    65   146    33    65  1164     0     111  position
 48242    65   146    41    65  1164     0      59  (
 48243    65   146    42    65  1164     0      60  )
 48244    65   146    43    65  1164     0      60  )
 48245    65   146    44    65  1164     0      66  ,
 48246    65   146    46    65  1164     0     111  dst
 48247    65   146    49    65  1164     0      66  ,
 48248    65   146    51    65  1164     0     111  offset
 48249    65   146    57    65  1164     0      66  ,
 48250    65   146    59    65  1164     0     111  length
 48251    65   146    65    65  1164     0      60  )
 48252    65   146    66    65  1164     0     102  ;
 48253    65   147     9    65  1164     0     111  position
 48254    65   147    17    65  1164     0      59  (
 48255    65   147    18    65  1164     0     111  position
 48256    65   147    26    65  1164     0      59  (
 48257    65   147    27    65  1164     0      60  )
 48258    65   147    29    65  1164     0      74  +
 48259    65   147    31    65  1164     0     111  length
 48260    65   147    37    65  1164     0      60  )
 48261    65   147    38    65  1164     0     102  ;
 48262    65   148     9    65  1164     0      19  return
 48263    65   148    16    65  1164     0      44  this
 48264    65   148    20    65  1164     1     102  ;
 48265    65   149     5    65  1164     1      64  }
 48266    65   149     5    65  1164     0    2712  ENDMETHOD
 48267    65   149     5    65  1165     0    2713  STARTMETHOD
 48268    65   151    12    65  1165     0      39  boolean
 48269    65   151    20    65  1165     0     111  isDirect
 48270    65   151    28    65  1165     0      59  (
 48271    65   151    29    65  1165     0      60  )
 48272    65   151    31    65  1165     0      63  {
 48273    65   152     9    65  1165     0      19  return
 48274    65   152    16    65  1165     0      43  false
 48275    65   152    21    65  1165     1     102  ;
 48276    65   153     5    65  1165     1      64  }
 48277    65   153     5    65  1165     0    2714  ENDMETHOD
 48278    65   153     5    65  1166     0    2715  STARTMETHOD
 48279    65   157    12    65  1166     0      39  boolean
 48280    65   157    20    65  1166     0     111  isReadOnly
 48281    65   157    30    65  1166     0      59  (
 48282    65   157    31    65  1166     0      60  )
 48283    65   157    33    65  1166     0      63  {
 48284    65   158     9    65  1166     0      19  return
 48285    65   158    16    65  1166     0      43  false
 48286    65   158    21    65  1166     1     102  ;
 48287    65   159     5    65  1166     1      64  }
 48288    65   159     5    65  1166     0    2716  ENDMETHOD
 48289    65   159     5    65  1167     0    2717  STARTMETHOD
 48290    65   161    12    65  1167     0     111  FloatBuffer
 48291    65   161    24    65  1167     0     111  put
 48292    65   161    27    65  1167     0      59  (
 48293    65   161    34    65  1167     0     111  x
 48294    65   161    35    65  1167     0      60  )
 48295    65   161    37    65  1167     0      63  {
 48296    65   163     9    65  1167     0     111  hb
 48297    65   163    11    65  1167     0      61  [
 48298    65   163    12    65  1167     0     111  ix
 48299    65   163    14    65  1167     0      59  (
 48300    65   163    15    65  1167     0     111  nextPutIndex
 48301    65   163    27    65  1167     0      59  (
 48302    65   163    28    65  1167     0      60  )
 48303    65   163    29    65  1167     0      60  )
 48304    65   163    30    65  1167     0      62  ]
 48305    65   163    32    65  1167     0      67  =
 48306    65   163    34    65  1167     0     111  x
 48307    65   163    35    65  1167     0     102  ;
 48308    65   164     9    65  1167     0      19  return
 48309    65   164    16    65  1167     0      44  this
 48310    65   164    20    65  1167     0     102  ;
 48311    65   168     5    65  1167     0      64  }
 48312    65   168     5    65  1167     0    2718  ENDMETHOD
 48313    65   168     5    65  1168     0    2719  STARTMETHOD
 48314    65   170    12    65  1168     0     111  FloatBuffer
 48315    65   170    24    65  1168     0     111  put
 48316    65   170    27    65  1168     0      59  (
 48317    65   170    28    65  1168     0      36  int
 48318    65   170    32    65  1168     0     111  i
 48319    65   170    33    65  1168     0      66  ,
 48320    65   170    41    65  1168     0     111  x
 48321    65   170    42    65  1168     0      60  )
 48322    65   170    44    65  1168     0      63  {
 48323    65   172     9    65  1168     0     111  hb
 48324    65   172    11    65  1168     0      61  [
 48325    65   172    12    65  1168     0     111  ix
 48326    65   172    14    65  1168     0      59  (
 48327    65   172    15    65  1168     0     111  checkIndex
 48328    65   172    25    65  1168     0      59  (
 48329    65   172    26    65  1168     0     111  i
 48330    65   172    27    65  1168     0      60  )
 48331    65   172    28    65  1168     0      60  )
 48332    65   172    29    65  1168     0      62  ]
 48333    65   172    31    65  1168     0      67  =
 48334    65   172    33    65  1168     0     111  x
 48335    65   172    34    65  1168     0     102  ;
 48336    65   173     9    65  1168     0      19  return
 48337    65   173    16    65  1168     0      44  this
 48338    65   173    20    65  1168     0     102  ;
 48339    65   177     5    65  1168     0      64  }
 48340    65   177     5    65  1168     0    2720  ENDMETHOD
 48341    65   177     5    65  1169     0    2721  STARTMETHOD
 48342    65   179    12    65  1169     0     111  FloatBuffer
 48343    65   179    24    65  1169     0     111  put
 48344    65   179    27    65  1169     0      59  (
 48345    65   179    33    65  1169     0      61  [
 48346    65   179    34    65  1169     0      62  ]
 48347    65   179    36    65  1169     0     111  src
 48348    65   179    39    65  1169     0      66  ,
 48349    65   179    41    65  1169     0      36  int
 48350    65   179    45    65  1169     0     111  offset
 48351    65   179    51    65  1169     0      66  ,
 48352    65   179    53    65  1169     0      36  int
 48353    65   179    57    65  1169     0     111  length
 48354    65   179    63    65  1169     0      60  )
 48355    65   179    65    65  1169     0      63  {
 48356    65   181     9    65  1169     0     111  checkBounds
 48357    65   181    20    65  1169     0      59  (
 48358    65   181    21    65  1169     0     111  offset
 48359    65   181    27    65  1169     0      66  ,
 48360    65   181    29    65  1169     0     111  length
 48361    65   181    35    65  1169     0      66  ,
 48362    65   181    37    65  1169     0     111  src.length
 48363    65   181    47    65  1169     0      60  )
 48364    65   181    48    65  1169     0     102  ;
 48365    65   182     9    65  1169     0      31  if
 48366    65   182    12    65  1169     0      59  (
 48367    65   182    13    65  1169     0     111  length
 48368    65   182    20    65  1169     0      89  >
 48369    65   182    22    65  1169     0     111  remaining
 48370    65   182    31    65  1169     0      59  (
 48371    65   182    32    65  1169     0      60  )
 48372    65   182    33    65  1169     0      60  )
 48373    65   183    13    65  1169     0      20  throw
 48374    65   183    23    65  1169     0     111  BufferOverflowException
 48375    65   183    46    65  1169     0      59  (
 48376    65   183    47    65  1169     0      60  )
 48377    65   183    48    65  1169     0     102  ;
 48378    65   184     9    65  1169     0     111  System.arraycopy
 48379    65   184    25    65  1169     0      59  (
 48380    65   184    26    65  1169     0     111  src
 48381    65   184    29    65  1169     0      66  ,
 48382    65   184    31    65  1169     0     111  offset
 48383    65   184    37    65  1169     0      66  ,
 48384    65   184    39    65  1169     0     111  hb
 48385    65   184    41    65  1169     0      66  ,
 48386    65   184    43    65  1169     0     111  ix
 48387    65   184    45    65  1169     0      59  (
 48388    65   184    46    65  1169     0     111  position
 48389    65   184    54    65  1169     0      59  (
 48390    65   184    55    65  1169     0      60  )
 48391    65   184    56    65  1169     0      60  )
 48392    65   184    57    65  1169     0      66  ,
 48393    65   184    59    65  1169     0     111  length
 48394    65   184    65    65  1169     0      60  )
 48395    65   184    66    65  1169     0     102  ;
 48396    65   185     9    65  1169     0     111  position
 48397    65   185    17    65  1169     0      59  (
 48398    65   185    18    65  1169     0     111  position
 48399    65   185    26    65  1169     0      59  (
 48400    65   185    27    65  1169     0      60  )
 48401    65   185    29    65  1169     0      74  +
 48402    65   185    31    65  1169     0     111  length
 48403    65   185    37    65  1169     0      60  )
 48404    65   185    38    65  1169     0     102  ;
 48405    65   186     9    65  1169     0      19  return
 48406    65   186    16    65  1169     0      44  this
 48407    65   186    20    65  1169     0     102  ;
 48408    65   190     5    65  1169     0      64  }
 48409    65   190     5    65  1169     0    2722  ENDMETHOD
 48410    65   190     5    65  1170     0    2723  STARTMETHOD
 48411    65   192    12    65  1170     0     111  FloatBuffer
 48412    65   192    24    65  1170     0     111  put
 48413    65   192    27    65  1170     0      59  (
 48414    65   192    28    65  1170     0     111  FloatBuffer
 48415    65   192    40    65  1170     0     111  src
 48416    65   192    43    65  1170     0      60  )
 48417    65   192    45    65  1170     0      63  {
 48418    65   194     9    65  1170     0      31  if
 48419    65   194    12    65  1170     0      59  (
 48420    65   194    13    65  1170     0     111  src
 48421    65   194    28    65  1170     0     111  HeapFloatBuffer
 48422    65   194    43    65  1170     0      60  )
 48423    65   194    45    65  1170     0      63  {
 48424    65   195    13    65  1170     0      31  if
 48425    65   195    16    65  1170     0      59  (
 48426    65   195    17    65  1170     0     111  src
 48427    65   195    21    65  1170     0      68  ==
 48428    65   195    24    65  1170     0      44  this
 48429    65   195    28    65  1170     0      60  )
 48430    65   196    17    65  1170     0      20  throw
 48431    65   196    27    65  1170     0     111  IllegalArgumentException
 48432    65   196    51    65  1170     0      59  (
 48433    65   196    52    65  1170     0      60  )
 48434    65   196    53    65  1170     0     102  ;
 48435    65   197    13    65  1170     0     111  HeapFloatBuffer
 48436    65   197    29    65  1170     0     111  sb
 48437    65   197    32    65  1170     0      67  =
 48438    65   197    34    65  1170     0      59  (
 48439    65   197    35    65  1170     0     111  HeapFloatBuffer
 48440    65   197    50    65  1170     0      60  )
 48441    65   197    51    65  1170     0     111  src
 48442    65   197    54    65  1170     0     102  ;
 48443    65   198    13    65  1170     0      36  int
 48444    65   198    17    65  1170     0     111  n
 48445    65   198    19    65  1170     0      67  =
 48446    65   198    21    65  1170     0     111  sb.remaining
 48447    65   198    33    65  1170     0      59  (
 48448    65   198    34    65  1170     0      60  )
 48449    65   198    35    65  1170     0     102  ;
 48450    65   199    13    65  1170     0      31  if
 48451    65   199    16    65  1170     0      59  (
 48452    65   199    17    65  1170     0     111  n
 48453    65   199    19    65  1170     0      89  >
 48454    65   199    21    65  1170     0     111  remaining
 48455    65   199    30    65  1170     0      59  (
 48456    65   199    31    65  1170     0      60  )
 48457    65   199    32    65  1170     0      60  )
 48458    65   200    17    65  1170     0      20  throw
 48459    65   200    27    65  1170     0     111  BufferOverflowException
 48460    65   200    50    65  1170     0      59  (
 48461    65   200    51    65  1170     0      60  )
 48462    65   200    52    65  1170     0     102  ;
 48463    65   201    13    65  1170     0     111  System.arraycopy
 48464    65   201    29    65  1170     0      59  (
 48465    65   201    30    65  1170     0     111  sb.hb
 48466    65   201    35    65  1170     0      66  ,
 48467    65   201    37    65  1170     0     111  sb.ix
 48468    65   201    42    65  1170     0      59  (
 48469    65   201    43    65  1170     0     111  sb.position
 48470    65   201    54    65  1170     0      59  (
 48471    65   201    55    65  1170     0      60  )
 48472    65   201    56    65  1170     0      60  )
 48473    65   201    57    65  1170     0      66  ,
 48474    65   202    30    65  1170     0     111  hb
 48475    65   202    32    65  1170     0      66  ,
 48476    65   202    34    65  1170     0     111  ix
 48477    65   202    36    65  1170     0      59  (
 48478    65   202    37    65  1170     0     111  position
 48479    65   202    45    65  1170     0      59  (
 48480    65   202    46    65  1170     0      60  )
 48481    65   202    47    65  1170     0      60  )
 48482    65   202    48    65  1170     0      66  ,
 48483    65   202    50    65  1170     0     111  n
 48484    65   202    51    65  1170     0      60  )
 48485    65   202    52    65  1170     0     102  ;
 48486    65   203    13    65  1170     1     111  sb.position
 48487    65   203    24    65  1170     1      59  (
 48488    65   203    25    65  1170     1     111  sb.position
 48489    65   203    36    65  1170     1      59  (
 48490    65   203    37    65  1170     1      60  )
 48491    65   203    39    65  1170     1      74  +
 48492    65   203    41    65  1170     1     111  n
 48493    65   203    42    65  1170     1      60  )
 48494    65   203    43    65  1170     1     102  ;
 48495    65   204    13    65  1170     1     111  position
 48496    65   204    21    65  1170     1      59  (
 48497    65   204    22    65  1170     1     111  position
 48498    65   204    30    65  1170     1      59  (
 48499    65   204    31    65  1170     1      60  )
 48500    65   204    33    65  1170     1      74  +
 48501    65   204    35    65  1170     1     111  n
 48502    65   204    36    65  1170     1      60  )
 48503    65   204    37    65  1170     1     102  ;
 48504    65   205     9    65  1170     0      64  }
 48505    65   205    11    65  1170     0      48  else
 48506    65   205    16    65  1170     0      31  if
 48507    65   205    19    65  1170     0      59  (
 48508    65   205    20    65  1170     0     111  src.isDirect
 48509    65   205    32    65  1170     0      59  (
 48510    65   205    33    65  1170     0      60  )
 48511    65   205    34    65  1170     0      60  )
 48512    65   205    36    65  1170     0      63  {
 48513    65   206    13    65  1170     0      36  int
 48514    65   206    17    65  1170     0     111  n
 48515    65   206    19    65  1170     0      67  =
 48516    65   206    21    65  1170     0     111  src.remaining
 48517    65   206    34    65  1170     0      59  (
 48518    65   206    35    65  1170     0      60  )
 48519    65   206    36    65  1170     0     102  ;
 48520    65   207    13    65  1170     0      31  if
 48521    65   207    16    65  1170     0      59  (
 48522    65   207    17    65  1170     0     111  n
 48523    65   207    19    65  1170     0      89  >
 48524    65   207    21    65  1170     0     111  remaining
 48525    65   207    30    65  1170     0      59  (
 48526    65   207    31    65  1170     0      60  )
 48527    65   207    32    65  1170     0      60  )
 48528    65   208    17    65  1170     0      20  throw
 48529    65   208    27    65  1170     0     111  BufferOverflowException
 48530    65   208    50    65  1170     0      59  (
 48531    65   208    51    65  1170     0      60  )
 48532    65   208    52    65  1170     0     102  ;
 48533    65   209    13    65  1170     0     111  src.get
 48534    65   209    20    65  1170     0      59  (
 48535    65   209    21    65  1170     0     111  hb
 48536    65   209    23    65  1170     0      66  ,
 48537    65   209    25    65  1170     0     111  ix
 48538    65   209    27    65  1170     0      59  (
 48539    65   209    28    65  1170     0     111  position
 48540    65   209    36    65  1170     0      59  (
 48541    65   209    37    65  1170     0      60  )
 48542    65   209    38    65  1170     0      60  )
 48543    65   209    39    65  1170     0      66  ,
 48544    65   209    41    65  1170     0     111  n
 48545    65   209    42    65  1170     0      60  )
 48546    65   209    43    65  1170     0     102  ;
 48547    65   210    13    65  1170     0     111  position
 48548    65   210    21    65  1170     0      59  (
 48549    65   210    22    65  1170     0     111  position
 48550    65   210    30    65  1170     0      59  (
 48551    65   210    31    65  1170     0      60  )
 48552    65   210    33    65  1170     0      74  +
 48553    65   210    35    65  1170     0     111  n
 48554    65   210    36    65  1170     0      60  )
 48555    65   210    37    65  1170     0     102  ;
 48556    65   211     9    65  1170     0      64  }
 48557    65   211    11    65  1170     0      48  else
 48558    65   211    16    65  1170     0      63  {
 48559    65   212    13    65  1170     0     111  super.put
 48560    65   212    22    65  1170     0      59  (
 48561    65   212    23    65  1170     0     111  src
 48562    65   212    26    65  1170     0      60  )
 48563    65   212    27    65  1170     0     102  ;
 48564    65   213     9    65  1170     0      64  }
 48565    65   214     9    65  1170     0      19  return
 48566    65   214    16    65  1170     0      44  this
 48567    65   214    20    65  1170     0     102  ;
 48568    65   218     5    65  1170     0      64  }
 48569    65   218     5    65  1170     0    2724  ENDMETHOD
 48570    65   218     5    65  1171     0    2725  STARTMETHOD
 48571    65   220    12    65  1171     0     111  FloatBuffer
 48572    65   220    24    65  1171     0     111  compact
 48573    65   220    31    65  1171     0      59  (
 48574    65   220    32    65  1171     0      60  )
 48575    65   220    34    65  1171     0      63  {
 48576    65   222     9    65  1171     0     111  System.arraycopy
 48577    65   222    25    65  1171     0      59  (
 48578    65   222    26    65  1171     0     111  hb
 48579    65   222    28    65  1171     0      66  ,
 48580    65   222    30    65  1171     0     111  ix
 48581    65   222    32    65  1171     0      59  (
 48582    65   222    33    65  1171     0     111  position
 48583    65   222    41    65  1171     0      59  (
 48584    65   222    42    65  1171     0      60  )
 48585    65   222    43    65  1171     0      60  )
 48586    65   222    44    65  1171     0      66  ,
 48587    65   222    46    65  1171     0     111  hb
 48588    65   222    48    65  1171     0      66  ,
 48589    65   222    50    65  1171     0     111  ix
 48590    65   222    52    65  1171     0      59  (
 48591    65   222    53    65  1171     0     112  0
 48592    65   222    54    65  1171     0      60  )
 48593    65   222    55    65  1171     0      66  ,
 48594    65   222    57    65  1171     0     111  remaining
 48595    65   222    66    65  1171     0      59  (
 48596    65   222    67    65  1171     0      60  )
 48597    65   222    68    65  1171     0      60  )
 48598    65   222    69    65  1171     0     102  ;
 48599    65   223     9    65  1171     1     111  position
 48600    65   223    17    65  1171     1      59  (
 48601    65   223    18    65  1171     1     111  remaining
 48602    65   223    27    65  1171     1      59  (
 48603    65   223    28    65  1171     1      60  )
 48604    65   223    29    65  1171     1      60  )
 48605    65   223    30    65  1171     1     102  ;
 48606    65   224     9    65  1171     1     111  limit
 48607    65   224    14    65  1171     1      59  (
 48608    65   224    15    65  1171     1     111  capacity
 48609    65   224    23    65  1171     1      59  (
 48610    65   224    24    65  1171     1      60  )
 48611    65   224    25    65  1171     1      60  )
 48612    65   224    26    65  1171     1     102  ;
 48613    65   225     9    65  1171     0     111  clearMark
 48614    65   225    18    65  1171     0      59  (
 48615    65   225    19    65  1171     0      60  )
 48616    65   225    20    65  1171     0     102  ;
 48617    65   226     9    65  1171     0      19  return
 48618    65   226    16    65  1171     0      44  this
 48619    65   226    20    65  1171     0     102  ;
 48620    65   230     5    65  1171     0      64  }
 48621    65   230     5    65  1171     0    2726  ENDMETHOD
 48622    65   230     5    65  1172     0    2727  STARTMETHOD
 48623    65   586    12    65  1172     0     111  ByteOrder
 48624    65   586    22    65  1172     0     111  order
 48625    65   586    27    65  1172     0      59  (
 48626    65   586    28    65  1172     0      60  )
 48627    65   586    30    65  1172     0      63  {
 48628    65   587     9    65  1172     0      19  return
 48629    65   587    16    65  1172     0     111  ByteOrder.nativeOrder
 48630    65   587    37    65  1172     0      59  (
 48631    65   587    38    65  1172     0      60  )
 48632    65   587    39    65  1172     0     102  ;
 48633    65   588     5    65  1172     0      64  }
 48634    65   588     5    65  1172     0    2728  ENDMETHOD
 48635    65   592     1    65    -1     0      64  }
 48636    65   592     1    65    -1     1    2729  ENDCLASS
 48637    65   592     1    -1    -1     1    2730  ENDFILE C:\Users\RA\javasrc\java\nio\HeapFloatBuffer.java
 48638    66     1     1    -1    -1     1    2731  STARTFILE C:\Users\RA\javasrc\java\nio\HeapFloatBufferR.java
 48639    66    28     9    -1    -1     0     111  java.nio
 48640    66    28    17    -1    -1     0     102  ;
 48641    66    42     1    66    -1     0    2732  STARTCLASS
 48642    66    42     1    66    -1     0      24  class
 48643    66    42     7    66    -1     0     111  HeapFloatBufferR
 48644    66    43     5    66    -1     0      38  extends
 48645    66    43    13    66    -1     0     111  HeapFloatBuffer
 48646    66    44     1    66    -1     0      63  {
 48647    66    44     1    66  1173     0    2733  STARTMETHOD
 48648    66    55     5    66  1173     0     111  HeapFloatBufferR
 48649    66    55    21    66  1173     0      59  (
 48650    66    55    22    66  1173     0      36  int
 48651    66    55    26    66  1173     0     111  cap
 48652    66    55    29    66  1173     0      66  ,
 48653    66    55    31    66  1173     0      36  int
 48654    66    55    35    66  1173     0     111  lim
 48655    66    55    38    66  1173     0      60  )
 48656    66    55    40    66  1173     0      63  {
 48657    66    63     9    66  1173     0      27  super
 48658    66    63    14    66  1173     0      59  (
 48659    66    63    15    66  1173     0     111  cap
 48660    66    63    18    66  1173     0      66  ,
 48661    66    63    20    66  1173     0     111  lim
 48662    66    63    23    66  1173     0      60  )
 48663    66    63    24    66  1173     0     102  ;
 48664    66    64     9    66  1173     0     111  this.isReadOnly
 48665    66    64    25    66  1173     0      67  =
 48666    66    64    27    66  1173     0      52  true
 48667    66    64    31    66  1173     0     102  ;
 48668    66    66     5    66  1173     0      64  }
 48669    66    66     5    66  1173     0    2734  ENDMETHOD
 48670    66    66     5    66  1174     0    2735  STARTMETHOD
 48671    66    68     5    66  1174     0     111  HeapFloatBufferR
 48672    66    68    21    66  1174     0      59  (
 48673    66    68    27    66  1174     0      61  [
 48674    66    68    28    66  1174     0      62  ]
 48675    66    68    30    66  1174     0     111  buf
 48676    66    68    33    66  1174     0      66  ,
 48677    66    68    35    66  1174     0      36  int
 48678    66    68    39    66  1174     0     111  off
 48679    66    68    42    66  1174     0      66  ,
 48680    66    68    44    66  1174     0      36  int
 48681    66    68    48    66  1174     0     111  len
 48682    66    68    51    66  1174     0      60  )
 48683    66    68    53    66  1174     0      63  {
 48684    66    76     9    66  1174     0      27  super
 48685    66    76    14    66  1174     0      59  (
 48686    66    76    15    66  1174     0     111  buf
 48687    66    76    18    66  1174     0      66  ,
 48688    66    76    20    66  1174     0     111  off
 48689    66    76    23    66  1174     0      66  ,
 48690    66    76    25    66  1174     0     111  len
 48691    66    76    28    66  1174     0      60  )
 48692    66    76    29    66  1174     0     102  ;
 48693    66    77     9    66  1174     0     111  this.isReadOnly
 48694    66    77    25    66  1174     0      67  =
 48695    66    77    27    66  1174     0      52  true
 48696    66    77    31    66  1174     0     102  ;
 48697    66    79     5    66  1174     0      64  }
 48698    66    79     5    66  1174     0    2736  ENDMETHOD
 48699    66    79     5    66  1175     0    2737  STARTMETHOD
 48700    66    81     5    66  1175     0      23  protected
 48701    66    81    15    66  1175     0     111  HeapFloatBufferR
 48702    66    81    31    66  1175     0      59  (
 48703    66    81    37    66  1175     0      61  [
 48704    66    81    38    66  1175     0      62  ]
 48705    66    81    40    66  1175     0     111  buf
 48706    66    81    43    66  1175     0      66  ,
 48707    66    82    36    66  1175     0      36  int
 48708    66    82    40    66  1175     0     111  mark
 48709    66    82    44    66  1175     0      66  ,
 48710    66    82    46    66  1175     0      36  int
 48711    66    82    50    66  1175     0     111  pos
 48712    66    82    53    66  1175     0      66  ,
 48713    66    82    55    66  1175     0      36  int
 48714    66    82    59    66  1175     0     111  lim
 48715    66    82    62    66  1175     0      66  ,
 48716    66    82    64    66  1175     0      36  int
 48717    66    82    68    66  1175     0     111  cap
 48718    66    82    71    66  1175     0      66  ,
 48719    66    83    36    66  1175     0      36  int
 48720    66    83    40    66  1175     0     111  off
 48721    66    83    43    66  1175     0      60  )
 48722    66    84     5    66  1175     0      63  {
 48723    66    92     9    66  1175     0      27  super
 48724    66    92    14    66  1175     0      59  (
 48725    66    92    15    66  1175     0     111  buf
 48726    66    92    18    66  1175     0      66  ,
 48727    66    92    20    66  1175     0     111  mark
 48728    66    92    24    66  1175     0      66  ,
 48729    66    92    26    66  1175     0     111  pos
 48730    66    92    29    66  1175     0      66  ,
 48731    66    92    31    66  1175     0     111  lim
 48732    66    92    34    66  1175     0      66  ,
 48733    66    92    36    66  1175     0     111  cap
 48734    66    92    39    66  1175     0      66  ,
 48735    66    92    41    66  1175     0     111  off
 48736    66    92    44    66  1175     0      60  )
 48737    66    92    45    66  1175     0     102  ;
 48738    66    93     9    66  1175     0     111  this.isReadOnly
 48739    66    93    25    66  1175     0      67  =
 48740    66    93    27    66  1175     0      52  true
 48741    66    93    31    66  1175     0     102  ;
 48742    66    95     5    66  1175     0      64  }
 48743    66    95     5    66  1175     0    2738  ENDMETHOD
 48744    66    95     5    66  1176     0    2739  STARTMETHOD
 48745    66    97    12    66  1176     0     111  FloatBuffer
 48746    66    97    24    66  1176     0     111  slice
 48747    66    97    29    66  1176     0      59  (
 48748    66    97    30    66  1176     0      60  )
 48749    66    97    32    66  1176     0      63  {
 48750    66    98     9    66  1176     0      19  return
 48751    66    98    20    66  1176     0     111  HeapFloatBufferR
 48752    66    98    36    66  1176     0      59  (
 48753    66    98    37    66  1176     0     111  hb
 48754    66    98    39    66  1176     0      66  ,
 48755    66    99    41    66  1176     0      77  -
 48756    66    99    42    66  1176     0     112  1
 48757    66    99    43    66  1176     0      66  ,
 48758    66   100    41    66  1176     0     112  0
 48759    66   100    42    66  1176     0      66  ,
 48760    66   101    41    66  1176     1     111  this.remaining
 48761    66   101    55    66  1176     1      59  (
 48762    66   101    56    66  1176     1      60  )
 48763    66   101    57    66  1176     1      66  ,
 48764    66   102    41    66  1176     1     111  this.remaining
 48765    66   102    55    66  1176     1      59  (
 48766    66   102    56    66  1176     1      60  )
 48767    66   102    57    66  1176     1      66  ,
 48768    66   103    41    66  1176     0     111  this.position
 48769    66   103    54    66  1176     0      59  (
 48770    66   103    55    66  1176     0      60  )
 48771    66   103    57    66  1176     0      74  +
 48772    66   103    59    66  1176     0     111  offset
 48773    66   103    65    66  1176     0      60  )
 48774    66   103    66    66  1176     0     102  ;
 48775    66   104     5    66  1176     0      64  }
 48776    66   104     5    66  1176     0    2740  ENDMETHOD
 48777    66   104     5    66  1177     0    2741  STARTMETHOD
 48778    66   106    12    66  1177     0     111  FloatBuffer
 48779    66   106    24    66  1177     0     111  duplicate
 48780    66   106    33    66  1177     0      59  (
 48781    66   106    34    66  1177     0      60  )
 48782    66   106    36    66  1177     0      63  {
 48783    66   107     9    66  1177     0      19  return
 48784    66   107    20    66  1177     0     111  HeapFloatBufferR
 48785    66   107    36    66  1177     0      59  (
 48786    66   107    37    66  1177     0     111  hb
 48787    66   107    39    66  1177     0      66  ,
 48788    66   108    41    66  1177     1     111  this.markValue
 48789    66   108    55    66  1177     1      59  (
 48790    66   108    56    66  1177     1      60  )
 48791    66   108    57    66  1177     1      66  ,
 48792    66   109    41    66  1177     1     111  this.position
 48793    66   109    54    66  1177     1      59  (
 48794    66   109    55    66  1177     1      60  )
 48795    66   109    56    66  1177     1      66  ,
 48796    66   110    41    66  1177     1     111  this.limit
 48797    66   110    51    66  1177     1      59  (
 48798    66   110    52    66  1177     1      60  )
 48799    66   110    53    66  1177     1      66  ,
 48800    66   111    41    66  1177     1     111  this.capacity
 48801    66   111    54    66  1177     1      59  (
 48802    66   111    55    66  1177     1      60  )
 48803    66   111    56    66  1177     1      66  ,
 48804    66   112    41    66  1177     0     111  offset
 48805    66   112    47    66  1177     0      60  )
 48806    66   112    48    66  1177     0     102  ;
 48807    66   113     5    66  1177     0      64  }
 48808    66   113     5    66  1177     0    2742  ENDMETHOD
 48809    66   113     5    66  1178     0    2743  STARTMETHOD
 48810    66   115    12    66  1178     0     111  FloatBuffer
 48811    66   115    24    66  1178     0     111  asReadOnlyBuffer
 48812    66   115    40    66  1178     0      59  (
 48813    66   115    41    66  1178     0      60  )
 48814    66   115    43    66  1178     0      63  {
 48815    66   124     9    66  1178     0      19  return
 48816    66   124    16    66  1178     0     111  duplicate
 48817    66   124    25    66  1178     0      59  (
 48818    66   124    26    66  1178     0      60  )
 48819    66   124    27    66  1178     0     102  ;
 48820    66   126     5    66  1178     0      64  }
 48821    66   126     5    66  1178     0    2744  ENDMETHOD
 48822    66   126     5    66  1179     0    2745  STARTMETHOD
 48823    66   157    12    66  1179     0      39  boolean
 48824    66   157    20    66  1179     0     111  isReadOnly
 48825    66   157    30    66  1179     0      59  (
 48826    66   157    31    66  1179     0      60  )
 48827    66   157    33    66  1179     0      63  {
 48828    66   158     9    66  1179     0      19  return
 48829    66   158    16    66  1179     0      52  true
 48830    66   158    20    66  1179     0     102  ;
 48831    66   159     5    66  1179     0      64  }
 48832    66   159     5    66  1179     0    2746  ENDMETHOD
 48833    66   159     5    66  1180     0    2747  STARTMETHOD
 48834    66   161    12    66  1180     0     111  FloatBuffer
 48835    66   161    24    66  1180     0     111  put
 48836    66   161    27    66  1180     0      59  (
 48837    66   161    34    66  1180     0     111  x
 48838    66   161    35    66  1180     0      60  )
 48839    66   161    37    66  1180     0      63  {
 48840    66   166     9    66  1180     0      20  throw
 48841    66   166    19    66  1180     0     111  ReadOnlyBufferException
 48842    66   166    42    66  1180     0      59  (
 48843    66   166    43    66  1180     0      60  )
 48844    66   166    44    66  1180     0     102  ;
 48845    66   168     5    66  1180     0      64  }
 48846    66   168     5    66  1180     0    2748  ENDMETHOD
 48847    66   168     5    66  1181     0    2749  STARTMETHOD
 48848    66   170    12    66  1181     0     111  FloatBuffer
 48849    66   170    24    66  1181     0     111  put
 48850    66   170    27    66  1181     0      59  (
 48851    66   170    28    66  1181     0      36  int
 48852    66   170    32    66  1181     0     111  i
 48853    66   170    33    66  1181     0      66  ,
 48854    66   170    41    66  1181     0     111  x
 48855    66   170    42    66  1181     0      60  )
 48856    66   170    44    66  1181     0      63  {
 48857    66   175     9    66  1181     0      20  throw
 48858    66   175    19    66  1181     0     111  ReadOnlyBufferException
 48859    66   175    42    66  1181     0      59  (
 48860    66   175    43    66  1181     0      60  )
 48861    66   175    44    66  1181     0     102  ;
 48862    66   177     5    66  1181     0      64  }
 48863    66   177     5    66  1181     0    2750  ENDMETHOD
 48864    66   177     5    66  1182     0    2751  STARTMETHOD
 48865    66   179    12    66  1182     0     111  FloatBuffer
 48866    66   179    24    66  1182     0     111  put
 48867    66   179    27    66  1182     0      59  (
 48868    66   179    33    66  1182     0      61  [
 48869    66   179    34    66  1182     0      62  ]
 48870    66   179    36    66  1182     0     111  src
 48871    66   179    39    66  1182     0      66  ,
 48872    66   179    41    66  1182     0      36  int
 48873    66   179    45    66  1182     0     111  offset
 48874    66   179    51    66  1182     0      66  ,
 48875    66   179    53    66  1182     0      36  int
 48876    66   179    57    66  1182     0     111  length
 48877    66   179    63    66  1182     0      60  )
 48878    66   179    65    66  1182     0      63  {
 48879    66   188     9    66  1182     0      20  throw
 48880    66   188    19    66  1182     0     111  ReadOnlyBufferException
 48881    66   188    42    66  1182     0      59  (
 48882    66   188    43    66  1182     0      60  )
 48883    66   188    44    66  1182     0     102  ;
 48884    66   190     5    66  1182     0      64  }
 48885    66   190     5    66  1182     0    2752  ENDMETHOD
 48886    66   190     5    66  1183     0    2753  STARTMETHOD
 48887    66   192    12    66  1183     0     111  FloatBuffer
 48888    66   192    24    66  1183     0     111  put
 48889    66   192    27    66  1183     0      59  (
 48890    66   192    28    66  1183     0     111  FloatBuffer
 48891    66   192    40    66  1183     0     111  src
 48892    66   192    43    66  1183     0      60  )
 48893    66   192    45    66  1183     0      63  {
 48894    66   216     9    66  1183     0      20  throw
 48895    66   216    19    66  1183     1     111  ReadOnlyBufferException
 48896    66   216    42    66  1183     1      59  (
 48897    66   216    43    66  1183     1      60  )
 48898    66   216    44    66  1183     1     102  ;
 48899    66   218     5    66  1183     1      64  }
 48900    66   218     5    66  1183     0    2754  ENDMETHOD
 48901    66   218     5    66  1184     0    2755  STARTMETHOD
 48902    66   220    12    66  1184     0     111  FloatBuffer
 48903    66   220    24    66  1184     0     111  compact
 48904    66   220    31    66  1184     0      59  (
 48905    66   220    32    66  1184     0      60  )
 48906    66   220    34    66  1184     0      63  {
 48907    66   228     9    66  1184     0      20  throw
 48908    66   228    19    66  1184     1     111  ReadOnlyBufferException
 48909    66   228    42    66  1184     1      59  (
 48910    66   228    43    66  1184     1      60  )
 48911    66   228    44    66  1184     1     102  ;
 48912    66   230     5    66  1184     1      64  }
 48913    66   230     5    66  1184     0    2756  ENDMETHOD
 48914    66   230     5    66  1185     0    2757  STARTMETHOD
 48915    66   586    12    66  1185     0     111  ByteOrder
 48916    66   586    22    66  1185     0     111  order
 48917    66   586    27    66  1185     0      59  (
 48918    66   586    28    66  1185     0      60  )
 48919    66   586    30    66  1185     0      63  {
 48920    66   587     9    66  1185     0      19  return
 48921    66   587    16    66  1185     1     111  ByteOrder.nativeOrder
 48922    66   587    37    66  1185     1      59  (
 48923    66   587    38    66  1185     1      60  )
 48924    66   587    39    66  1185     1     102  ;
 48925    66   588     5    66  1185     1      64  }
 48926    66   588     5    66  1185     0    2758  ENDMETHOD
 48927    66   592     1    66    -1     0      64  }
 48928    66   592     1    66    -1     1    2759  ENDCLASS
 48929    66   592     1    -1    -1     1    2760  ENDFILE C:\Users\RA\javasrc\java\nio\HeapFloatBufferR.java
 48930    67     1     1    -1    -1     1    2761  STARTFILE C:\Users\RA\javasrc\java\nio\HeapIntBuffer.java
 48931    67    28     9    -1    -1     0     111  java.nio
 48932    67    28    17    -1    -1     0     102  ;
 48933    67    42     1    67    -1     0    2762  STARTCLASS
 48934    67    42     1    67    -1     0      24  class
 48935    67    42     7    67    -1     0     111  HeapIntBuffer
 48936    67    43     5    67    -1     0      38  extends
 48937    67    43    13    67    -1     0     111  IntBuffer
 48938    67    44     1    67    -1     0      63  {
 48939    67    44     1    67  1186     0    2763  STARTMETHOD
 48940    67    55     5    67  1186     0     111  HeapIntBuffer
 48941    67    55    18    67  1186     0      59  (
 48942    67    55    19    67  1186     0      36  int
 48943    67    55    23    67  1186     0     111  cap
 48944    67    55    26    67  1186     0      66  ,
 48945    67    55    28    67  1186     0      36  int
 48946    67    55    32    67  1186     0     111  lim
 48947    67    55    35    67  1186     0      60  )
 48948    67    55    37    67  1186     0      63  {
 48949    67    57     9    67  1186     0      27  super
 48950    67    57    14    67  1186     0      59  (
 48951    67    57    15    67  1186     0      77  -
 48952    67    57    16    67  1186     0     112  1
 48953    67    57    17    67  1186     0      66  ,
 48954    67    57    19    67  1186     0     112  0
 48955    67    57    20    67  1186     0      66  ,
 48956    67    57    22    67  1186     0     111  lim
 48957    67    57    25    67  1186     0      66  ,
 48958    67    57    27    67  1186     0     111  cap
 48959    67    57    30    67  1186     0      66  ,
 48960    67    57    36    67  1186     0      36  int
 48961    67    57    39    67  1186     0      61  [
 48962    67    57    40    67  1186     0     111  cap
 48963    67    57    43    67  1186     0      62  ]
 48964    67    57    44    67  1186     0      66  ,
 48965    67    57    46    67  1186     0     112  0
 48966    67    57    47    67  1186     0      60  )
 48967    67    57    48    67  1186     0     102  ;
 48968    67    66     5    67  1186     0      64  }
 48969    67    66     5    67  1186     0    2764  ENDMETHOD
 48970    67    66     5    67  1187     0    2765  STARTMETHOD
 48971    67    68     5    67  1187     0     111  HeapIntBuffer
 48972    67    68    18    67  1187     0      59  (
 48973    67    68    19    67  1187     0      36  int
 48974    67    68    22    67  1187     0      61  [
 48975    67    68    23    67  1187     0      62  ]
 48976    67    68    25    67  1187     0     111  buf
 48977    67    68    28    67  1187     0      66  ,
 48978    67    68    30    67  1187     0      36  int
 48979    67    68    34    67  1187     0     111  off
 48980    67    68    37    67  1187     0      66  ,
 48981    67    68    39    67  1187     0      36  int
 48982    67    68    43    67  1187     0     111  len
 48983    67    68    46    67  1187     0      60  )
 48984    67    68    48    67  1187     0      63  {
 48985    67    70     9    67  1187     0      27  super
 48986    67    70    14    67  1187     0      59  (
 48987    67    70    15    67  1187     0      77  -
 48988    67    70    16    67  1187     0     112  1
 48989    67    70    17    67  1187     0      66  ,
 48990    67    70    19    67  1187     0     111  off
 48991    67    70    22    67  1187     0      66  ,
 48992    67    70    24    67  1187     0     111  off
 48993    67    70    28    67  1187     0      74  +
 48994    67    70    30    67  1187     0     111  len
 48995    67    70    33    67  1187     0      66  ,
 48996    67    70    35    67  1187     0     111  buf.length
 48997    67    70    45    67  1187     0      66  ,
 48998    67    70    47    67  1187     0     111  buf
 48999    67    70    50    67  1187     0      66  ,
 49000    67    70    52    67  1187     0     112  0
 49001    67    70    53    67  1187     0      60  )
 49002    67    70    54    67  1187     0     102  ;
 49003    67    79     5    67  1187     0      64  }
 49004    67    79     5    67  1187     0    2766  ENDMETHOD
 49005    67    79     5    67  1188     0    2767  STARTMETHOD
 49006    67    81     5    67  1188     0      23  protected
 49007    67    81    15    67  1188     0     111  HeapIntBuffer
 49008    67    81    28    67  1188     0      59  (
 49009    67    81    29    67  1188     0      36  int
 49010    67    81    32    67  1188     0      61  [
 49011    67    81    33    67  1188     0      62  ]
 49012    67    81    35    67  1188     0     111  buf
 49013    67    81    38    67  1188     0      66  ,
 49014    67    82    36    67  1188     0      36  int
 49015    67    82    40    67  1188     0     111  mark
 49016    67    82    44    67  1188     0      66  ,
 49017    67    82    46    67  1188     0      36  int
 49018    67    82    50    67  1188     0     111  pos
 49019    67    82    53    67  1188     0      66  ,
 49020    67    82    55    67  1188     0      36  int
 49021    67    82    59    67  1188     0     111  lim
 49022    67    82    62    67  1188     0      66  ,
 49023    67    82    64    67  1188     0      36  int
 49024    67    82    68    67  1188     0     111  cap
 49025    67    82    71    67  1188     0      66  ,
 49026    67    83    36    67  1188     0      36  int
 49027    67    83    40    67  1188     0     111  off
 49028    67    83    43    67  1188     0      60  )
 49029    67    84     5    67  1188     0      63  {
 49030    67    86     9    67  1188     0      27  super
 49031    67    86    14    67  1188     0      59  (
 49032    67    86    15    67  1188     0     111  mark
 49033    67    86    19    67  1188     0      66  ,
 49034    67    86    21    67  1188     0     111  pos
 49035    67    86    24    67  1188     0      66  ,
 49036    67    86    26    67  1188     0     111  lim
 49037    67    86    29    67  1188     0      66  ,
 49038    67    86    31    67  1188     0     111  cap
 49039    67    86    34    67  1188     0      66  ,
 49040    67    86    36    67  1188     0     111  buf
 49041    67    86    39    67  1188     0      66  ,
 49042    67    86    41    67  1188     0     111  off
 49043    67    86    44    67  1188     0      60  )
 49044    67    86    45    67  1188     0     102  ;
 49045    67    95     5    67  1188     0      64  }
 49046    67    95     5    67  1188     0    2768  ENDMETHOD
 49047    67    95     5    67  1189     0    2769  STARTMETHOD
 49048    67    97    12    67  1189     0     111  IntBuffer
 49049    67    97    22    67  1189     0     111  slice
 49050    67    97    27    67  1189     0      59  (
 49051    67    97    28    67  1189     0      60  )
 49052    67    97    30    67  1189     0      63  {
 49053    67    98     9    67  1189     0      19  return
 49054    67    98    20    67  1189     0     111  HeapIntBuffer
 49055    67    98    33    67  1189     0      59  (
 49056    67    98    34    67  1189     0     111  hb
 49057    67    98    36    67  1189     0      66  ,
 49058    67    99    41    67  1189     0      77  -
 49059    67    99    42    67  1189     0     112  1
 49060    67    99    43    67  1189     0      66  ,
 49061    67   100    41    67  1189     0     112  0
 49062    67   100    42    67  1189     0      66  ,
 49063    67   101    41    67  1189     1     111  this.remaining
 49064    67   101    55    67  1189     1      59  (
 49065    67   101    56    67  1189     1      60  )
 49066    67   101    57    67  1189     1      66  ,
 49067    67   102    41    67  1189     1     111  this.remaining
 49068    67   102    55    67  1189     1      59  (
 49069    67   102    56    67  1189     1      60  )
 49070    67   102    57    67  1189     1      66  ,
 49071    67   103    41    67  1189     0     111  this.position
 49072    67   103    54    67  1189     0      59  (
 49073    67   103    55    67  1189     0      60  )
 49074    67   103    57    67  1189     0      74  +
 49075    67   103    59    67  1189     0     111  offset
 49076    67   103    65    67  1189     0      60  )
 49077    67   103    66    67  1189     0     102  ;
 49078    67   104     5    67  1189     0      64  }
 49079    67   104     5    67  1189     0    2770  ENDMETHOD
 49080    67   104     5    67  1190     0    2771  STARTMETHOD
 49081    67   106    12    67  1190     0     111  IntBuffer
 49082    67   106    22    67  1190     0     111  duplicate
 49083    67   106    31    67  1190     0      59  (
 49084    67   106    32    67  1190     0      60  )
 49085    67   106    34    67  1190     0      63  {
 49086    67   107     9    67  1190     0      19  return
 49087    67   107    20    67  1190     0     111  HeapIntBuffer
 49088    67   107    33    67  1190     0      59  (
 49089    67   107    34    67  1190     0     111  hb
 49090    67   107    36    67  1190     0      66  ,
 49091    67   108    41    67  1190     1     111  this.markValue
 49092    67   108    55    67  1190     1      59  (
 49093    67   108    56    67  1190     1      60  )
 49094    67   108    57    67  1190     1      66  ,
 49095    67   109    41    67  1190     1     111  this.position
 49096    67   109    54    67  1190     1      59  (
 49097    67   109    55    67  1190     1      60  )
 49098    67   109    56    67  1190     1      66  ,
 49099    67   110    41    67  1190     1     111  this.limit
 49100    67   110    51    67  1190     1      59  (
 49101    67   110    52    67  1190     1      60  )
 49102    67   110    53    67  1190     1      66  ,
 49103    67   111    41    67  1190     1     111  this.capacity
 49104    67   111    54    67  1190     1      59  (
 49105    67   111    55    67  1190     1      60  )
 49106    67   111    56    67  1190     1      66  ,
 49107    67   112    41    67  1190     0     111  offset
 49108    67   112    47    67  1190     0      60  )
 49109    67   112    48    67  1190     0     102  ;
 49110    67   113     5    67  1190     0      64  }
 49111    67   113     5    67  1190     0    2772  ENDMETHOD
 49112    67   113     5    67  1191     0    2773  STARTMETHOD
 49113    67   115    12    67  1191     0     111  IntBuffer
 49114    67   115    22    67  1191     0     111  asReadOnlyBuffer
 49115    67   115    38    67  1191     0      59  (
 49116    67   115    39    67  1191     0      60  )
 49117    67   115    41    67  1191     0      63  {
 49118    67   117     9    67  1191     0      19  return
 49119    67   117    20    67  1191     0     111  HeapIntBufferR
 49120    67   117    34    67  1191     0      59  (
 49121    67   117    35    67  1191     0     111  hb
 49122    67   117    37    67  1191     0      66  ,
 49123    67   118    38    67  1191     1     111  this.markValue
 49124    67   118    52    67  1191     1      59  (
 49125    67   118    53    67  1191     1      60  )
 49126    67   118    54    67  1191     1      66  ,
 49127    67   119    38    67  1191     1     111  this.position
 49128    67   119    51    67  1191     1      59  (
 49129    67   119    52    67  1191     1      60  )
 49130    67   119    53    67  1191     1      66  ,
 49131    67   120    38    67  1191     1     111  this.limit
 49132    67   120    48    67  1191     1      59  (
 49133    67   120    49    67  1191     1      60  )
 49134    67   120    50    67  1191     1      66  ,
 49135    67   121    38    67  1191     1     111  this.capacity
 49136    67   121    51    67  1191     1      59  (
 49137    67   121    52    67  1191     1      60  )
 49138    67   121    53    67  1191     1      66  ,
 49139    67   122    38    67  1191     0     111  offset
 49140    67   122    44    67  1191     0      60  )
 49141    67   122    45    67  1191     0     102  ;
 49142    67   126     5    67  1191     0      64  }
 49143    67   126     5    67  1191     0    2774  ENDMETHOD
 49144    67   126     5    67  1192     0    2775  STARTMETHOD
 49145    67   130     5    67  1192     0      23  protected
 49146    67   130    15    67  1192     0      36  int
 49147    67   130    19    67  1192     0     111  ix
 49148    67   130    21    67  1192     0      59  (
 49149    67   130    22    67  1192     0      36  int
 49150    67   130    26    67  1192     0     111  i
 49151    67   130    27    67  1192     0      60  )
 49152    67   130    29    67  1192     0      63  {
 49153    67   131     9    67  1192     0      19  return
 49154    67   131    16    67  1192     0     111  i
 49155    67   131    18    67  1192     0      74  +
 49156    67   131    20    67  1192     0     111  offset
 49157    67   131    26    67  1192     0     102  ;
 49158    67   132     5    67  1192     0      64  }
 49159    67   132     5    67  1192     0    2776  ENDMETHOD
 49160    67   132     5    67  1193     0    2777  STARTMETHOD
 49161    67   134    12    67  1193     0      36  int
 49162    67   134    16    67  1193     0     111  get
 49163    67   134    19    67  1193     0      59  (
 49164    67   134    20    67  1193     0      60  )
 49165    67   134    22    67  1193     0      63  {
 49166    67   135     9    67  1193     0      19  return
 49167    67   135    16    67  1193     0     111  hb
 49168    67   135    18    67  1193     0      61  [
 49169    67   135    19    67  1193     0     111  ix
 49170    67   135    21    67  1193     0      59  (
 49171    67   135    22    67  1193     0     111  nextGetIndex
 49172    67   135    34    67  1193     0      59  (
 49173    67   135    35    67  1193     0      60  )
 49174    67   135    36    67  1193     0      60  )
 49175    67   135    37    67  1193     0      62  ]
 49176    67   135    38    67  1193     0     102  ;
 49177    67   136     5    67  1193     0      64  }
 49178    67   136     5    67  1193     0    2778  ENDMETHOD
 49179    67   136     5    67  1194     0    2779  STARTMETHOD
 49180    67   138    12    67  1194     0      36  int
 49181    67   138    16    67  1194     0     111  get
 49182    67   138    19    67  1194     0      59  (
 49183    67   138    20    67  1194     0      36  int
 49184    67   138    24    67  1194     0     111  i
 49185    67   138    25    67  1194     0      60  )
 49186    67   138    27    67  1194     0      63  {
 49187    67   139     9    67  1194     0      19  return
 49188    67   139    16    67  1194     0     111  hb
 49189    67   139    18    67  1194     0      61  [
 49190    67   139    19    67  1194     0     111  ix
 49191    67   139    21    67  1194     0      59  (
 49192    67   139    22    67  1194     0     111  checkIndex
 49193    67   139    32    67  1194     0      59  (
 49194    67   139    33    67  1194     0     111  i
 49195    67   139    34    67  1194     0      60  )
 49196    67   139    35    67  1194     0      60  )
 49197    67   139    36    67  1194     0      62  ]
 49198    67   139    37    67  1194     0     102  ;
 49199    67   140     5    67  1194     0      64  }
 49200    67   140     5    67  1194     0    2780  ENDMETHOD
 49201    67   140     5    67  1195     0    2781  STARTMETHOD
 49202    67   142    12    67  1195     0     111  IntBuffer
 49203    67   142    22    67  1195     0     111  get
 49204    67   142    25    67  1195     0      59  (
 49205    67   142    26    67  1195     0      36  int
 49206    67   142    29    67  1195     0      61  [
 49207    67   142    30    67  1195     0      62  ]
 49208    67   142    32    67  1195     0     111  dst
 49209    67   142    35    67  1195     0      66  ,
 49210    67   142    37    67  1195     0      36  int
 49211    67   142    41    67  1195     0     111  offset
 49212    67   142    47    67  1195     0      66  ,
 49213    67   142    49    67  1195     0      36  int
 49214    67   142    53    67  1195     0     111  length
 49215    67   142    59    67  1195     0      60  )
 49216    67   142    61    67  1195     0      63  {
 49217    67   143     9    67  1195     0     111  checkBounds
 49218    67   143    20    67  1195     0      59  (
 49219    67   143    21    67  1195     0     111  offset
 49220    67   143    27    67  1195     0      66  ,
 49221    67   143    29    67  1195     0     111  length
 49222    67   143    35    67  1195     0      66  ,
 49223    67   143    37    67  1195     0     111  dst.length
 49224    67   143    47    67  1195     0      60  )
 49225    67   143    48    67  1195     0     102  ;
 49226    67   144     9    67  1195     0      31  if
 49227    67   144    12    67  1195     0      59  (
 49228    67   144    13    67  1195     0     111  length
 49229    67   144    20    67  1195     0      89  >
 49230    67   144    22    67  1195     0     111  remaining
 49231    67   144    31    67  1195     0      59  (
 49232    67   144    32    67  1195     0      60  )
 49233    67   144    33    67  1195     0      60  )
 49234    67   145    13    67  1195     0      20  throw
 49235    67   145    23    67  1195     0     111  BufferUnderflowException
 49236    67   145    47    67  1195     0      59  (
 49237    67   145    48    67  1195     0      60  )
 49238    67   145    49    67  1195     0     102  ;
 49239    67   146     9    67  1195     0     111  System.arraycopy
 49240    67   146    25    67  1195     0      59  (
 49241    67   146    26    67  1195     0     111  hb
 49242    67   146    28    67  1195     0      66  ,
 49243    67   146    30    67  1195     0     111  ix
 49244    67   146    32    67  1195     0      59  (
 49245    67   146    33    67  1195     0     111  position
 49246    67   146    41    67  1195     0      59  (
 49247    67   146    42    67  1195     0      60  )
 49248    67   146    43    67  1195     0      60  )
 49249    67   146    44    67  1195     0      66  ,
 49250    67   146    46    67  1195     0     111  dst
 49251    67   146    49    67  1195     0      66  ,
 49252    67   146    51    67  1195     0     111  offset
 49253    67   146    57    67  1195     0      66  ,
 49254    67   146    59    67  1195     0     111  length
 49255    67   146    65    67  1195     0      60  )
 49256    67   146    66    67  1195     0     102  ;
 49257    67   147     9    67  1195     0     111  position
 49258    67   147    17    67  1195     0      59  (
 49259    67   147    18    67  1195     0     111  position
 49260    67   147    26    67  1195     0      59  (
 49261    67   147    27    67  1195     0      60  )
 49262    67   147    29    67  1195     0      74  +
 49263    67   147    31    67  1195     0     111  length
 49264    67   147    37    67  1195     0      60  )
 49265    67   147    38    67  1195     0     102  ;
 49266    67   148     9    67  1195     0      19  return
 49267    67   148    16    67  1195     0      44  this
 49268    67   148    20    67  1195     1     102  ;
 49269    67   149     5    67  1195     1      64  }
 49270    67   149     5    67  1195     0    2782  ENDMETHOD
 49271    67   149     5    67  1196     0    2783  STARTMETHOD
 49272    67   151    12    67  1196     0      39  boolean
 49273    67   151    20    67  1196     0     111  isDirect
 49274    67   151    28    67  1196     0      59  (
 49275    67   151    29    67  1196     0      60  )
 49276    67   151    31    67  1196     0      63  {
 49277    67   152     9    67  1196     0      19  return
 49278    67   152    16    67  1196     0      43  false
 49279    67   152    21    67  1196     1     102  ;
 49280    67   153     5    67  1196     1      64  }
 49281    67   153     5    67  1196     0    2784  ENDMETHOD
 49282    67   153     5    67  1197     0    2785  STARTMETHOD
 49283    67   157    12    67  1197     0      39  boolean
 49284    67   157    20    67  1197     0     111  isReadOnly
 49285    67   157    30    67  1197     0      59  (
 49286    67   157    31    67  1197     0      60  )
 49287    67   157    33    67  1197     0      63  {
 49288    67   158     9    67  1197     0      19  return
 49289    67   158    16    67  1197     0      43  false
 49290    67   158    21    67  1197     1     102  ;
 49291    67   159     5    67  1197     1      64  }
 49292    67   159     5    67  1197     0    2786  ENDMETHOD
 49293    67   159     5    67  1198     0    2787  STARTMETHOD
 49294    67   161    12    67  1198     0     111  IntBuffer
 49295    67   161    22    67  1198     0     111  put
 49296    67   161    25    67  1198     0      59  (
 49297    67   161    26    67  1198     0      36  int
 49298    67   161    30    67  1198     0     111  x
 49299    67   161    31    67  1198     0      60  )
 49300    67   161    33    67  1198     0      63  {
 49301    67   163     9    67  1198     0     111  hb
 49302    67   163    11    67  1198     0      61  [
 49303    67   163    12    67  1198     0     111  ix
 49304    67   163    14    67  1198     0      59  (
 49305    67   163    15    67  1198     0     111  nextPutIndex
 49306    67   163    27    67  1198     0      59  (
 49307    67   163    28    67  1198     0      60  )
 49308    67   163    29    67  1198     0      60  )
 49309    67   163    30    67  1198     0      62  ]
 49310    67   163    32    67  1198     0      67  =
 49311    67   163    34    67  1198     0     111  x
 49312    67   163    35    67  1198     0     102  ;
 49313    67   164     9    67  1198     0      19  return
 49314    67   164    16    67  1198     0      44  this
 49315    67   164    20    67  1198     0     102  ;
 49316    67   168     5    67  1198     0      64  }
 49317    67   168     5    67  1198     0    2788  ENDMETHOD
 49318    67   168     5    67  1199     0    2789  STARTMETHOD
 49319    67   170    12    67  1199     0     111  IntBuffer
 49320    67   170    22    67  1199     0     111  put
 49321    67   170    25    67  1199     0      59  (
 49322    67   170    26    67  1199     0      36  int
 49323    67   170    30    67  1199     0     111  i
 49324    67   170    31    67  1199     0      66  ,
 49325    67   170    33    67  1199     0      36  int
 49326    67   170    37    67  1199     0     111  x
 49327    67   170    38    67  1199     0      60  )
 49328    67   170    40    67  1199     0      63  {
 49329    67   172     9    67  1199     0     111  hb
 49330    67   172    11    67  1199     0      61  [
 49331    67   172    12    67  1199     0     111  ix
 49332    67   172    14    67  1199     0      59  (
 49333    67   172    15    67  1199     0     111  checkIndex
 49334    67   172    25    67  1199     0      59  (
 49335    67   172    26    67  1199     0     111  i
 49336    67   172    27    67  1199     0      60  )
 49337    67   172    28    67  1199     0      60  )
 49338    67   172    29    67  1199     0      62  ]
 49339    67   172    31    67  1199     0      67  =
 49340    67   172    33    67  1199     0     111  x
 49341    67   172    34    67  1199     0     102  ;
 49342    67   173     9    67  1199     0      19  return
 49343    67   173    16    67  1199     0      44  this
 49344    67   173    20    67  1199     0     102  ;
 49345    67   177     5    67  1199     0      64  }
 49346    67   177     5    67  1199     0    2790  ENDMETHOD
 49347    67   177     5    67  1200     0    2791  STARTMETHOD
 49348    67   179    12    67  1200     0     111  IntBuffer
 49349    67   179    22    67  1200     0     111  put
 49350    67   179    25    67  1200     0      59  (
 49351    67   179    26    67  1200     0      36  int
 49352    67   179    29    67  1200     0      61  [
 49353    67   179    30    67  1200     0      62  ]
 49354    67   179    32    67  1200     0     111  src
 49355    67   179    35    67  1200     0      66  ,
 49356    67   179    37    67  1200     0      36  int
 49357    67   179    41    67  1200     0     111  offset
 49358    67   179    47    67  1200     0      66  ,
 49359    67   179    49    67  1200     0      36  int
 49360    67   179    53    67  1200     0     111  length
 49361    67   179    59    67  1200     0      60  )
 49362    67   179    61    67  1200     0      63  {
 49363    67   181     9    67  1200     0     111  checkBounds
 49364    67   181    20    67  1200     0      59  (
 49365    67   181    21    67  1200     0     111  offset
 49366    67   181    27    67  1200     0      66  ,
 49367    67   181    29    67  1200     0     111  length
 49368    67   181    35    67  1200     0      66  ,
 49369    67   181    37    67  1200     0     111  src.length
 49370    67   181    47    67  1200     0      60  )
 49371    67   181    48    67  1200     0     102  ;
 49372    67   182     9    67  1200     0      31  if
 49373    67   182    12    67  1200     0      59  (
 49374    67   182    13    67  1200     0     111  length
 49375    67   182    20    67  1200     0      89  >
 49376    67   182    22    67  1200     0     111  remaining
 49377    67   182    31    67  1200     0      59  (
 49378    67   182    32    67  1200     0      60  )
 49379    67   182    33    67  1200     0      60  )
 49380    67   183    13    67  1200     0      20  throw
 49381    67   183    23    67  1200     0     111  BufferOverflowException
 49382    67   183    46    67  1200     0      59  (
 49383    67   183    47    67  1200     0      60  )
 49384    67   183    48    67  1200     0     102  ;
 49385    67   184     9    67  1200     0     111  System.arraycopy
 49386    67   184    25    67  1200     0      59  (
 49387    67   184    26    67  1200     0     111  src
 49388    67   184    29    67  1200     0      66  ,
 49389    67   184    31    67  1200     0     111  offset
 49390    67   184    37    67  1200     0      66  ,
 49391    67   184    39    67  1200     0     111  hb
 49392    67   184    41    67  1200     0      66  ,
 49393    67   184    43    67  1200     0     111  ix
 49394    67   184    45    67  1200     0      59  (
 49395    67   184    46    67  1200     0     111  position
 49396    67   184    54    67  1200     0      59  (
 49397    67   184    55    67  1200     0      60  )
 49398    67   184    56    67  1200     0      60  )
 49399    67   184    57    67  1200     0      66  ,
 49400    67   184    59    67  1200     0     111  length
 49401    67   184    65    67  1200     0      60  )
 49402    67   184    66    67  1200     0     102  ;
 49403    67   185     9    67  1200     0     111  position
 49404    67   185    17    67  1200     0      59  (
 49405    67   185    18    67  1200     0     111  position
 49406    67   185    26    67  1200     0      59  (
 49407    67   185    27    67  1200     0      60  )
 49408    67   185    29    67  1200     0      74  +
 49409    67   185    31    67  1200     0     111  length
 49410    67   185    37    67  1200     0      60  )
 49411    67   185    38    67  1200     0     102  ;
 49412    67   186     9    67  1200     0      19  return
 49413    67   186    16    67  1200     0      44  this
 49414    67   186    20    67  1200     0     102  ;
 49415    67   190     5    67  1200     0      64  }
 49416    67   190     5    67  1200     0    2792  ENDMETHOD
 49417    67   190     5    67  1201     0    2793  STARTMETHOD
 49418    67   192    12    67  1201     0     111  IntBuffer
 49419    67   192    22    67  1201     0     111  put
 49420    67   192    25    67  1201     0      59  (
 49421    67   192    26    67  1201     0     111  IntBuffer
 49422    67   192    36    67  1201     0     111  src
 49423    67   192    39    67  1201     0      60  )
 49424    67   192    41    67  1201     0      63  {
 49425    67   194     9    67  1201     0      31  if
 49426    67   194    12    67  1201     0      59  (
 49427    67   194    13    67  1201     0     111  src
 49428    67   194    28    67  1201     0     111  HeapIntBuffer
 49429    67   194    41    67  1201     0      60  )
 49430    67   194    43    67  1201     0      63  {
 49431    67   195    13    67  1201     0      31  if
 49432    67   195    16    67  1201     0      59  (
 49433    67   195    17    67  1201     0     111  src
 49434    67   195    21    67  1201     0      68  ==
 49435    67   195    24    67  1201     0      44  this
 49436    67   195    28    67  1201     0      60  )
 49437    67   196    17    67  1201     0      20  throw
 49438    67   196    27    67  1201     0     111  IllegalArgumentException
 49439    67   196    51    67  1201     0      59  (
 49440    67   196    52    67  1201     0      60  )
 49441    67   196    53    67  1201     0     102  ;
 49442    67   197    13    67  1201     0     111  HeapIntBuffer
 49443    67   197    27    67  1201     0     111  sb
 49444    67   197    30    67  1201     0      67  =
 49445    67   197    32    67  1201     0      59  (
 49446    67   197    33    67  1201     0     111  HeapIntBuffer
 49447    67   197    46    67  1201     0      60  )
 49448    67   197    47    67  1201     0     111  src
 49449    67   197    50    67  1201     0     102  ;
 49450    67   198    13    67  1201     0      36  int
 49451    67   198    17    67  1201     0     111  n
 49452    67   198    19    67  1201     0      67  =
 49453    67   198    21    67  1201     0     111  sb.remaining
 49454    67   198    33    67  1201     0      59  (
 49455    67   198    34    67  1201     0      60  )
 49456    67   198    35    67  1201     0     102  ;
 49457    67   199    13    67  1201     0      31  if
 49458    67   199    16    67  1201     0      59  (
 49459    67   199    17    67  1201     0     111  n
 49460    67   199    19    67  1201     0      89  >
 49461    67   199    21    67  1201     0     111  remaining
 49462    67   199    30    67  1201     0      59  (
 49463    67   199    31    67  1201     0      60  )
 49464    67   199    32    67  1201     0      60  )
 49465    67   200    17    67  1201     0      20  throw
 49466    67   200    27    67  1201     0     111  BufferOverflowException
 49467    67   200    50    67  1201     0      59  (
 49468    67   200    51    67  1201     0      60  )
 49469    67   200    52    67  1201     0     102  ;
 49470    67   201    13    67  1201     0     111  System.arraycopy
 49471    67   201    29    67  1201     0      59  (
 49472    67   201    30    67  1201     0     111  sb.hb
 49473    67   201    35    67  1201     0      66  ,
 49474    67   201    37    67  1201     0     111  sb.ix
 49475    67   201    42    67  1201     0      59  (
 49476    67   201    43    67  1201     0     111  sb.position
 49477    67   201    54    67  1201     0      59  (
 49478    67   201    55    67  1201     0      60  )
 49479    67   201    56    67  1201     0      60  )
 49480    67   201    57    67  1201     0      66  ,
 49481    67   202    30    67  1201     0     111  hb
 49482    67   202    32    67  1201     0      66  ,
 49483    67   202    34    67  1201     0     111  ix
 49484    67   202    36    67  1201     0      59  (
 49485    67   202    37    67  1201     0     111  position
 49486    67   202    45    67  1201     0      59  (
 49487    67   202    46    67  1201     0      60  )
 49488    67   202    47    67  1201     0      60  )
 49489    67   202    48    67  1201     0      66  ,
 49490    67   202    50    67  1201     0     111  n
 49491    67   202    51    67  1201     0      60  )
 49492    67   202    52    67  1201     0     102  ;
 49493    67   203    13    67  1201     1     111  sb.position
 49494    67   203    24    67  1201     1      59  (
 49495    67   203    25    67  1201     1     111  sb.position
 49496    67   203    36    67  1201     1      59  (
 49497    67   203    37    67  1201     1      60  )
 49498    67   203    39    67  1201     1      74  +
 49499    67   203    41    67  1201     1     111  n
 49500    67   203    42    67  1201     1      60  )
 49501    67   203    43    67  1201     1     102  ;
 49502    67   204    13    67  1201     1     111  position
 49503    67   204    21    67  1201     1      59  (
 49504    67   204    22    67  1201     1     111  position
 49505    67   204    30    67  1201     1      59  (
 49506    67   204    31    67  1201     1      60  )
 49507    67   204    33    67  1201     1      74  +
 49508    67   204    35    67  1201     1     111  n
 49509    67   204    36    67  1201     1      60  )
 49510    67   204    37    67  1201     1     102  ;
 49511    67   205     9    67  1201     0      64  }
 49512    67   205    11    67  1201     0      48  else
 49513    67   205    16    67  1201     0      31  if
 49514    67   205    19    67  1201     0      59  (
 49515    67   205    20    67  1201     0     111  src.isDirect
 49516    67   205    32    67  1201     0      59  (
 49517    67   205    33    67  1201     0      60  )
 49518    67   205    34    67  1201     0      60  )
 49519    67   205    36    67  1201     0      63  {
 49520    67   206    13    67  1201     0      36  int
 49521    67   206    17    67  1201     0     111  n
 49522    67   206    19    67  1201     0      67  =
 49523    67   206    21    67  1201     0     111  src.remaining
 49524    67   206    34    67  1201     0      59  (
 49525    67   206    35    67  1201     0      60  )
 49526    67   206    36    67  1201     0     102  ;
 49527    67   207    13    67  1201     0      31  if
 49528    67   207    16    67  1201     0      59  (
 49529    67   207    17    67  1201     0     111  n
 49530    67   207    19    67  1201     0      89  >
 49531    67   207    21    67  1201     0     111  remaining
 49532    67   207    30    67  1201     0      59  (
 49533    67   207    31    67  1201     0      60  )
 49534    67   207    32    67  1201     0      60  )
 49535    67   208    17    67  1201     0      20  throw
 49536    67   208    27    67  1201     0     111  BufferOverflowException
 49537    67   208    50    67  1201     0      59  (
 49538    67   208    51    67  1201     0      60  )
 49539    67   208    52    67  1201     0     102  ;
 49540    67   209    13    67  1201     0     111  src.get
 49541    67   209    20    67  1201     0      59  (
 49542    67   209    21    67  1201     0     111  hb
 49543    67   209    23    67  1201     0      66  ,
 49544    67   209    25    67  1201     0     111  ix
 49545    67   209    27    67  1201     0      59  (
 49546    67   209    28    67  1201     0     111  position
 49547    67   209    36    67  1201     0      59  (
 49548    67   209    37    67  1201     0      60  )
 49549    67   209    38    67  1201     0      60  )
 49550    67   209    39    67  1201     0      66  ,
 49551    67   209    41    67  1201     0     111  n
 49552    67   209    42    67  1201     0      60  )
 49553    67   209    43    67  1201     0     102  ;
 49554    67   210    13    67  1201     0     111  position
 49555    67   210    21    67  1201     0      59  (
 49556    67   210    22    67  1201     0     111  position
 49557    67   210    30    67  1201     0      59  (
 49558    67   210    31    67  1201     0      60  )
 49559    67   210    33    67  1201     0      74  +
 49560    67   210    35    67  1201     0     111  n
 49561    67   210    36    67  1201     0      60  )
 49562    67   210    37    67  1201     0     102  ;
 49563    67   211     9    67  1201     0      64  }
 49564    67   211    11    67  1201     0      48  else
 49565    67   211    16    67  1201     0      63  {
 49566    67   212    13    67  1201     0     111  super.put
 49567    67   212    22    67  1201     0      59  (
 49568    67   212    23    67  1201     0     111  src
 49569    67   212    26    67  1201     0      60  )
 49570    67   212    27    67  1201     0     102  ;
 49571    67   213     9    67  1201     0      64  }
 49572    67   214     9    67  1201     0      19  return
 49573    67   214    16    67  1201     0      44  this
 49574    67   214    20    67  1201     0     102  ;
 49575    67   218     5    67  1201     0      64  }
 49576    67   218     5    67  1201     0    2794  ENDMETHOD
 49577    67   218     5    67  1202     0    2795  STARTMETHOD
 49578    67   220    12    67  1202     0     111  IntBuffer
 49579    67   220    22    67  1202     0     111  compact
 49580    67   220    29    67  1202     0      59  (
 49581    67   220    30    67  1202     0      60  )
 49582    67   220    32    67  1202     0      63  {
 49583    67   222     9    67  1202     0     111  System.arraycopy
 49584    67   222    25    67  1202     0      59  (
 49585    67   222    26    67  1202     0     111  hb
 49586    67   222    28    67  1202     0      66  ,
 49587    67   222    30    67  1202     0     111  ix
 49588    67   222    32    67  1202     0      59  (
 49589    67   222    33    67  1202     0     111  position
 49590    67   222    41    67  1202     0      59  (
 49591    67   222    42    67  1202     0      60  )
 49592    67   222    43    67  1202     0      60  )
 49593    67   222    44    67  1202     0      66  ,
 49594    67   222    46    67  1202     0     111  hb
 49595    67   222    48    67  1202     0      66  ,
 49596    67   222    50    67  1202     0     111  ix
 49597    67   222    52    67  1202     0      59  (
 49598    67   222    53    67  1202     0     112  0
 49599    67   222    54    67  1202     0      60  )
 49600    67   222    55    67  1202     0      66  ,
 49601    67   222    57    67  1202     0     111  remaining
 49602    67   222    66    67  1202     0      59  (
 49603    67   222    67    67  1202     0      60  )
 49604    67   222    68    67  1202     0      60  )
 49605    67   222    69    67  1202     0     102  ;
 49606    67   223     9    67  1202     1     111  position
 49607    67   223    17    67  1202     1      59  (
 49608    67   223    18    67  1202     1     111  remaining
 49609    67   223    27    67  1202     1      59  (
 49610    67   223    28    67  1202     1      60  )
 49611    67   223    29    67  1202     1      60  )
 49612    67   223    30    67  1202     1     102  ;
 49613    67   224     9    67  1202     1     111  limit
 49614    67   224    14    67  1202     1      59  (
 49615    67   224    15    67  1202     1     111  capacity
 49616    67   224    23    67  1202     1      59  (
 49617    67   224    24    67  1202     1      60  )
 49618    67   224    25    67  1202     1      60  )
 49619    67   224    26    67  1202     1     102  ;
 49620    67   225     9    67  1202     0     111  clearMark
 49621    67   225    18    67  1202     0      59  (
 49622    67   225    19    67  1202     0      60  )
 49623    67   225    20    67  1202     0     102  ;
 49624    67   226     9    67  1202     0      19  return
 49625    67   226    16    67  1202     0      44  this
 49626    67   226    20    67  1202     0     102  ;
 49627    67   230     5    67  1202     0      64  }
 49628    67   230     5    67  1202     0    2796  ENDMETHOD
 49629    67   230     5    67  1203     0    2797  STARTMETHOD
 49630    67   586    12    67  1203     0     111  ByteOrder
 49631    67   586    22    67  1203     0     111  order
 49632    67   586    27    67  1203     0      59  (
 49633    67   586    28    67  1203     0      60  )
 49634    67   586    30    67  1203     0      63  {
 49635    67   587     9    67  1203     0      19  return
 49636    67   587    16    67  1203     0     111  ByteOrder.nativeOrder
 49637    67   587    37    67  1203     0      59  (
 49638    67   587    38    67  1203     0      60  )
 49639    67   587    39    67  1203     0     102  ;
 49640    67   588     5    67  1203     0      64  }
 49641    67   588     5    67  1203     0    2798  ENDMETHOD
 49642    67   592     1    67    -1     0      64  }
 49643    67   592     1    67    -1     1    2799  ENDCLASS
 49644    67   592     1    -1    -1     1    2800  ENDFILE C:\Users\RA\javasrc\java\nio\HeapIntBuffer.java
 49645    68     1     1    -1    -1     1    2801  STARTFILE C:\Users\RA\javasrc\java\nio\HeapIntBufferR.java
 49646    68    28     9    -1    -1     0     111  java.nio
 49647    68    28    17    -1    -1     0     102  ;
 49648    68    42     1    68    -1     0    2802  STARTCLASS
 49649    68    42     1    68    -1     0      24  class
 49650    68    42     7    68    -1     0     111  HeapIntBufferR
 49651    68    43     5    68    -1     0      38  extends
 49652    68    43    13    68    -1     0     111  HeapIntBuffer
 49653    68    44     1    68    -1     0      63  {
 49654    68    44     1    68  1204     0    2803  STARTMETHOD
 49655    68    55     5    68  1204     0     111  HeapIntBufferR
 49656    68    55    19    68  1204     0      59  (
 49657    68    55    20    68  1204     0      36  int
 49658    68    55    24    68  1204     0     111  cap
 49659    68    55    27    68  1204     0      66  ,
 49660    68    55    29    68  1204     0      36  int
 49661    68    55    33    68  1204     0     111  lim
 49662    68    55    36    68  1204     0      60  )
 49663    68    55    38    68  1204     0      63  {
 49664    68    63     9    68  1204     0      27  super
 49665    68    63    14    68  1204     0      59  (
 49666    68    63    15    68  1204     0     111  cap
 49667    68    63    18    68  1204     0      66  ,
 49668    68    63    20    68  1204     0     111  lim
 49669    68    63    23    68  1204     0      60  )
 49670    68    63    24    68  1204     0     102  ;
 49671    68    64     9    68  1204     0     111  this.isReadOnly
 49672    68    64    25    68  1204     0      67  =
 49673    68    64    27    68  1204     0      52  true
 49674    68    64    31    68  1204     0     102  ;
 49675    68    66     5    68  1204     0      64  }
 49676    68    66     5    68  1204     0    2804  ENDMETHOD
 49677    68    66     5    68  1205     0    2805  STARTMETHOD
 49678    68    68     5    68  1205     0     111  HeapIntBufferR
 49679    68    68    19    68  1205     0      59  (
 49680    68    68    20    68  1205     0      36  int
 49681    68    68    23    68  1205     0      61  [
 49682    68    68    24    68  1205     0      62  ]
 49683    68    68    26    68  1205     0     111  buf
 49684    68    68    29    68  1205     0      66  ,
 49685    68    68    31    68  1205     0      36  int
 49686    68    68    35    68  1205     0     111  off
 49687    68    68    38    68  1205     0      66  ,
 49688    68    68    40    68  1205     0      36  int
 49689    68    68    44    68  1205     0     111  len
 49690    68    68    47    68  1205     0      60  )
 49691    68    68    49    68  1205     0      63  {
 49692    68    76     9    68  1205     0      27  super
 49693    68    76    14    68  1205     0      59  (
 49694    68    76    15    68  1205     0     111  buf
 49695    68    76    18    68  1205     0      66  ,
 49696    68    76    20    68  1205     0     111  off
 49697    68    76    23    68  1205     0      66  ,
 49698    68    76    25    68  1205     0     111  len
 49699    68    76    28    68  1205     0      60  )
 49700    68    76    29    68  1205     0     102  ;
 49701    68    77     9    68  1205     0     111  this.isReadOnly
 49702    68    77    25    68  1205     0      67  =
 49703    68    77    27    68  1205     0      52  true
 49704    68    77    31    68  1205     0     102  ;
 49705    68    79     5    68  1205     0      64  }
 49706    68    79     5    68  1205     0    2806  ENDMETHOD
 49707    68    79     5    68  1206     0    2807  STARTMETHOD
 49708    68    81     5    68  1206     0      23  protected
 49709    68    81    15    68  1206     0     111  HeapIntBufferR
 49710    68    81    29    68  1206     0      59  (
 49711    68    81    30    68  1206     0      36  int
 49712    68    81    33    68  1206     0      61  [
 49713    68    81    34    68  1206     0      62  ]
 49714    68    81    36    68  1206     0     111  buf
 49715    68    81    39    68  1206     0      66  ,
 49716    68    82    36    68  1206     0      36  int
 49717    68    82    40    68  1206     0     111  mark
 49718    68    82    44    68  1206     0      66  ,
 49719    68    82    46    68  1206     0      36  int
 49720    68    82    50    68  1206     0     111  pos
 49721    68    82    53    68  1206     0      66  ,
 49722    68    82    55    68  1206     0      36  int
 49723    68    82    59    68  1206     0     111  lim
 49724    68    82    62    68  1206     0      66  ,
 49725    68    82    64    68  1206     0      36  int
 49726    68    82    68    68  1206     0     111  cap
 49727    68    82    71    68  1206     0      66  ,
 49728    68    83    36    68  1206     0      36  int
 49729    68    83    40    68  1206     0     111  off
 49730    68    83    43    68  1206     0      60  )
 49731    68    84     5    68  1206     0      63  {
 49732    68    92     9    68  1206     0      27  super
 49733    68    92    14    68  1206     0      59  (
 49734    68    92    15    68  1206     0     111  buf
 49735    68    92    18    68  1206     0      66  ,
 49736    68    92    20    68  1206     0     111  mark
 49737    68    92    24    68  1206     0      66  ,
 49738    68    92    26    68  1206     0     111  pos
 49739    68    92    29    68  1206     0      66  ,
 49740    68    92    31    68  1206     0     111  lim
 49741    68    92    34    68  1206     0      66  ,
 49742    68    92    36    68  1206     0     111  cap
 49743    68    92    39    68  1206     0      66  ,
 49744    68    92    41    68  1206     0     111  off
 49745    68    92    44    68  1206     0      60  )
 49746    68    92    45    68  1206     0     102  ;
 49747    68    93     9    68  1206     0     111  this.isReadOnly
 49748    68    93    25    68  1206     0      67  =
 49749    68    93    27    68  1206     0      52  true
 49750    68    93    31    68  1206     0     102  ;
 49751    68    95     5    68  1206     0      64  }
 49752    68    95     5    68  1206     0    2808  ENDMETHOD
 49753    68    95     5    68  1207     0    2809  STARTMETHOD
 49754    68    97    12    68  1207     0     111  IntBuffer
 49755    68    97    22    68  1207     0     111  slice
 49756    68    97    27    68  1207     0      59  (
 49757    68    97    28    68  1207     0      60  )
 49758    68    97    30    68  1207     0      63  {
 49759    68    98     9    68  1207     0      19  return
 49760    68    98    20    68  1207     0     111  HeapIntBufferR
 49761    68    98    34    68  1207     0      59  (
 49762    68    98    35    68  1207     0     111  hb
 49763    68    98    37    68  1207     0      66  ,
 49764    68    99    41    68  1207     0      77  -
 49765    68    99    42    68  1207     0     112  1
 49766    68    99    43    68  1207     0      66  ,
 49767    68   100    41    68  1207     0     112  0
 49768    68   100    42    68  1207     0      66  ,
 49769    68   101    41    68  1207     1     111  this.remaining
 49770    68   101    55    68  1207     1      59  (
 49771    68   101    56    68  1207     1      60  )
 49772    68   101    57    68  1207     1      66  ,
 49773    68   102    41    68  1207     1     111  this.remaining
 49774    68   102    55    68  1207     1      59  (
 49775    68   102    56    68  1207     1      60  )
 49776    68   102    57    68  1207     1      66  ,
 49777    68   103    41    68  1207     0     111  this.position
 49778    68   103    54    68  1207     0      59  (
 49779    68   103    55    68  1207     0      60  )
 49780    68   103    57    68  1207     0      74  +
 49781    68   103    59    68  1207     0     111  offset
 49782    68   103    65    68  1207     0      60  )
 49783    68   103    66    68  1207     0     102  ;
 49784    68   104     5    68  1207     0      64  }
 49785    68   104     5    68  1207     0    2810  ENDMETHOD
 49786    68   104     5    68  1208     0    2811  STARTMETHOD
 49787    68   106    12    68  1208     0     111  IntBuffer
 49788    68   106    22    68  1208     0     111  duplicate
 49789    68   106    31    68  1208     0      59  (
 49790    68   106    32    68  1208     0      60  )
 49791    68   106    34    68  1208     0      63  {
 49792    68   107     9    68  1208     0      19  return
 49793    68   107    20    68  1208     0     111  HeapIntBufferR
 49794    68   107    34    68  1208     0      59  (
 49795    68   107    35    68  1208     0     111  hb
 49796    68   107    37    68  1208     0      66  ,
 49797    68   108    41    68  1208     1     111  this.markValue
 49798    68   108    55    68  1208     1      59  (
 49799    68   108    56    68  1208     1      60  )
 49800    68   108    57    68  1208     1      66  ,
 49801    68   109    41    68  1208     1     111  this.position
 49802    68   109    54    68  1208     1      59  (
 49803    68   109    55    68  1208     1      60  )
 49804    68   109    56    68  1208     1      66  ,
 49805    68   110    41    68  1208     1     111  this.limit
 49806    68   110    51    68  1208     1      59  (
 49807    68   110    52    68  1208     1      60  )
 49808    68   110    53    68  1208     1      66  ,
 49809    68   111    41    68  1208     1     111  this.capacity
 49810    68   111    54    68  1208     1      59  (
 49811    68   111    55    68  1208     1      60  )
 49812    68   111    56    68  1208     1      66  ,
 49813    68   112    41    68  1208     0     111  offset
 49814    68   112    47    68  1208     0      60  )
 49815    68   112    48    68  1208     0     102  ;
 49816    68   113     5    68  1208     0      64  }
 49817    68   113     5    68  1208     0    2812  ENDMETHOD
 49818    68   113     5    68  1209     0    2813  STARTMETHOD
 49819    68   115    12    68  1209     0     111  IntBuffer
 49820    68   115    22    68  1209     0     111  asReadOnlyBuffer
 49821    68   115    38    68  1209     0      59  (
 49822    68   115    39    68  1209     0      60  )
 49823    68   115    41    68  1209     0      63  {
 49824    68   124     9    68  1209     0      19  return
 49825    68   124    16    68  1209     0     111  duplicate
 49826    68   124    25    68  1209     0      59  (
 49827    68   124    26    68  1209     0      60  )
 49828    68   124    27    68  1209     0     102  ;
 49829    68   126     5    68  1209     0      64  }
 49830    68   126     5    68  1209     0    2814  ENDMETHOD
 49831    68   126     5    68  1210     0    2815  STARTMETHOD
 49832    68   157    12    68  1210     0      39  boolean
 49833    68   157    20    68  1210     0     111  isReadOnly
 49834    68   157    30    68  1210     0      59  (
 49835    68   157    31    68  1210     0      60  )
 49836    68   157    33    68  1210     0      63  {
 49837    68   158     9    68  1210     0      19  return
 49838    68   158    16    68  1210     0      52  true
 49839    68   158    20    68  1210     0     102  ;
 49840    68   159     5    68  1210     0      64  }
 49841    68   159     5    68  1210     0    2816  ENDMETHOD
 49842    68   159     5    68  1211     0    2817  STARTMETHOD
 49843    68   161    12    68  1211     0     111  IntBuffer
 49844    68   161    22    68  1211     0     111  put
 49845    68   161    25    68  1211     0      59  (
 49846    68   161    26    68  1211     0      36  int
 49847    68   161    30    68  1211     0     111  x
 49848    68   161    31    68  1211     0      60  )
 49849    68   161    33    68  1211     0      63  {
 49850    68   166     9    68  1211     0      20  throw
 49851    68   166    19    68  1211     0     111  ReadOnlyBufferException
 49852    68   166    42    68  1211     0      59  (
 49853    68   166    43    68  1211     0      60  )
 49854    68   166    44    68  1211     0     102  ;
 49855    68   168     5    68  1211     0      64  }
 49856    68   168     5    68  1211     0    2818  ENDMETHOD
 49857    68   168     5    68  1212     0    2819  STARTMETHOD
 49858    68   170    12    68  1212     0     111  IntBuffer
 49859    68   170    22    68  1212     0     111  put
 49860    68   170    25    68  1212     0      59  (
 49861    68   170    26    68  1212     0      36  int
 49862    68   170    30    68  1212     0     111  i
 49863    68   170    31    68  1212     0      66  ,
 49864    68   170    33    68  1212     0      36  int
 49865    68   170    37    68  1212     0     111  x
 49866    68   170    38    68  1212     0      60  )
 49867    68   170    40    68  1212     0      63  {
 49868    68   175     9    68  1212     0      20  throw
 49869    68   175    19    68  1212     0     111  ReadOnlyBufferException
 49870    68   175    42    68  1212     0      59  (
 49871    68   175    43    68  1212     0      60  )
 49872    68   175    44    68  1212     0     102  ;
 49873    68   177     5    68  1212     0      64  }
 49874    68   177     5    68  1212     0    2820  ENDMETHOD
 49875    68   177     5    68  1213     0    2821  STARTMETHOD
 49876    68   179    12    68  1213     0     111  IntBuffer
 49877    68   179    22    68  1213     0     111  put
 49878    68   179    25    68  1213     0      59  (
 49879    68   179    26    68  1213     0      36  int
 49880    68   179    29    68  1213     0      61  [
 49881    68   179    30    68  1213     0      62  ]
 49882    68   179    32    68  1213     0     111  src
 49883    68   179    35    68  1213     0      66  ,
 49884    68   179    37    68  1213     0      36  int
 49885    68   179    41    68  1213     0     111  offset
 49886    68   179    47    68  1213     0      66  ,
 49887    68   179    49    68  1213     0      36  int
 49888    68   179    53    68  1213     0     111  length
 49889    68   179    59    68  1213     0      60  )
 49890    68   179    61    68  1213     0      63  {
 49891    68   188     9    68  1213     0      20  throw
 49892    68   188    19    68  1213     0     111  ReadOnlyBufferException
 49893    68   188    42    68  1213     0      59  (
 49894    68   188    43    68  1213     0      60  )
 49895    68   188    44    68  1213     0     102  ;
 49896    68   190     5    68  1213     0      64  }
 49897    68   190     5    68  1213     0    2822  ENDMETHOD
 49898    68   190     5    68  1214     0    2823  STARTMETHOD
 49899    68   192    12    68  1214     0     111  IntBuffer
 49900    68   192    22    68  1214     0     111  put
 49901    68   192    25    68  1214     0      59  (
 49902    68   192    26    68  1214     0     111  IntBuffer
 49903    68   192    36    68  1214     0     111  src
 49904    68   192    39    68  1214     0      60  )
 49905    68   192    41    68  1214     0      63  {
 49906    68   216     9    68  1214     0      20  throw
 49907    68   216    19    68  1214     1     111  ReadOnlyBufferException
 49908    68   216    42    68  1214     1      59  (
 49909    68   216    43    68  1214     1      60  )
 49910    68   216    44    68  1214     1     102  ;
 49911    68   218     5    68  1214     1      64  }
 49912    68   218     5    68  1214     0    2824  ENDMETHOD
 49913    68   218     5    68  1215     0    2825  STARTMETHOD
 49914    68   220    12    68  1215     0     111  IntBuffer
 49915    68   220    22    68  1215     0     111  compact
 49916    68   220    29    68  1215     0      59  (
 49917    68   220    30    68  1215     0      60  )
 49918    68   220    32    68  1215     0      63  {
 49919    68   228     9    68  1215     0      20  throw
 49920    68   228    19    68  1215     1     111  ReadOnlyBufferException
 49921    68   228    42    68  1215     1      59  (
 49922    68   228    43    68  1215     1      60  )
 49923    68   228    44    68  1215     1     102  ;
 49924    68   230     5    68  1215     1      64  }
 49925    68   230     5    68  1215     0    2826  ENDMETHOD
 49926    68   230     5    68  1216     0    2827  STARTMETHOD
 49927    68   586    12    68  1216     0     111  ByteOrder
 49928    68   586    22    68  1216     0     111  order
 49929    68   586    27    68  1216     0      59  (
 49930    68   586    28    68  1216     0      60  )
 49931    68   586    30    68  1216     0      63  {
 49932    68   587     9    68  1216     0      19  return
 49933    68   587    16    68  1216     1     111  ByteOrder.nativeOrder
 49934    68   587    37    68  1216     1      59  (
 49935    68   587    38    68  1216     1      60  )
 49936    68   587    39    68  1216     1     102  ;
 49937    68   588     5    68  1216     1      64  }
 49938    68   588     5    68  1216     0    2828  ENDMETHOD
 49939    68   592     1    68    -1     0      64  }
 49940    68   592     1    68    -1     1    2829  ENDCLASS
 49941    68   592     1    -1    -1     1    2830  ENDFILE C:\Users\RA\javasrc\java\nio\HeapIntBufferR.java
 49942    69     1     1    -1    -1     1    2831  STARTFILE C:\Users\RA\javasrc\java\nio\HeapLongBuffer.java
 49943    69    28     9    -1    -1     0     111  java.nio
 49944    69    28    17    -1    -1     0     102  ;
 49945    69    42     1    69    -1     0    2832  STARTCLASS
 49946    69    42     1    69    -1     0      24  class
 49947    69    42     7    69    -1     0     111  HeapLongBuffer
 49948    69    43     5    69    -1     0      38  extends
 49949    69    43    13    69    -1     0     111  LongBuffer
 49950    69    44     1    69    -1     0      63  {
 49951    69    44     1    69  1217     0    2833  STARTMETHOD
 49952    69    55     5    69  1217     0     111  HeapLongBuffer
 49953    69    55    19    69  1217     0      59  (
 49954    69    55    20    69  1217     0      36  int
 49955    69    55    24    69  1217     0     111  cap
 49956    69    55    27    69  1217     0      66  ,
 49957    69    55    29    69  1217     0      36  int
 49958    69    55    33    69  1217     0     111  lim
 49959    69    55    36    69  1217     0      60  )
 49960    69    55    38    69  1217     0      63  {
 49961    69    57     9    69  1217     0      27  super
 49962    69    57    14    69  1217     0      59  (
 49963    69    57    15    69  1217     0      77  -
 49964    69    57    16    69  1217     0     112  1
 49965    69    57    17    69  1217     0      66  ,
 49966    69    57    19    69  1217     0     112  0
 49967    69    57    20    69  1217     0      66  ,
 49968    69    57    22    69  1217     0     111  lim
 49969    69    57    25    69  1217     0      66  ,
 49970    69    57    27    69  1217     0     111  cap
 49971    69    57    30    69  1217     0      66  ,
 49972    69    57    36    69  1217     0      53  long
 49973    69    57    40    69  1217     0      61  [
 49974    69    57    41    69  1217     0     111  cap
 49975    69    57    44    69  1217     0      62  ]
 49976    69    57    45    69  1217     0      66  ,
 49977    69    57    47    69  1217     0     112  0
 49978    69    57    48    69  1217     0      60  )
 49979    69    57    49    69  1217     0     102  ;
 49980    69    66     5    69  1217     0      64  }
 49981    69    66     5    69  1217     0    2834  ENDMETHOD
 49982    69    66     5    69  1218     0    2835  STARTMETHOD
 49983    69    68     5    69  1218     0     111  HeapLongBuffer
 49984    69    68    19    69  1218     0      59  (
 49985    69    68    20    69  1218     0      53  long
 49986    69    68    24    69  1218     0      61  [
 49987    69    68    25    69  1218     0      62  ]
 49988    69    68    27    69  1218     0     111  buf
 49989    69    68    30    69  1218     0      66  ,
 49990    69    68    32    69  1218     0      36  int
 49991    69    68    36    69  1218     0     111  off
 49992    69    68    39    69  1218     0      66  ,
 49993    69    68    41    69  1218     0      36  int
 49994    69    68    45    69  1218     0     111  len
 49995    69    68    48    69  1218     0      60  )
 49996    69    68    50    69  1218     0      63  {
 49997    69    70     9    69  1218     0      27  super
 49998    69    70    14    69  1218     0      59  (
 49999    69    70    15    69  1218     0      77  -
 50000    69    70    16    69  1218     0     112  1
 50001    69    70    17    69  1218     0      66  ,
 50002    69    70    19    69  1218     0     111  off
 50003    69    70    22    69  1218     0      66  ,
 50004    69    70    24    69  1218     0     111  off
 50005    69    70    28    69  1218     0      74  +
 50006    69    70    30    69  1218     0     111  len
 50007    69    70    33    69  1218     0      66  ,
 50008    69    70    35    69  1218     0     111  buf.length
 50009    69    70    45    69  1218     0      66  ,
 50010    69    70    47    69  1218     0     111  buf
 50011    69    70    50    69  1218     0      66  ,
 50012    69    70    52    69  1218     0     112  0
 50013    69    70    53    69  1218     0      60  )
 50014    69    70    54    69  1218     0     102  ;
 50015    69    79     5    69  1218     0      64  }
 50016    69    79     5    69  1218     0    2836  ENDMETHOD
 50017    69    79     5    69  1219     0    2837  STARTMETHOD
 50018    69    81     5    69  1219     0      23  protected
 50019    69    81    15    69  1219     0     111  HeapLongBuffer
 50020    69    81    29    69  1219     0      59  (
 50021    69    81    30    69  1219     0      53  long
 50022    69    81    34    69  1219     0      61  [
 50023    69    81    35    69  1219     0      62  ]
 50024    69    81    37    69  1219     0     111  buf
 50025    69    81    40    69  1219     0      66  ,
 50026    69    82    36    69  1219     0      36  int
 50027    69    82    40    69  1219     0     111  mark
 50028    69    82    44    69  1219     0      66  ,
 50029    69    82    46    69  1219     0      36  int
 50030    69    82    50    69  1219     0     111  pos
 50031    69    82    53    69  1219     0      66  ,
 50032    69    82    55    69  1219     0      36  int
 50033    69    82    59    69  1219     0     111  lim
 50034    69    82    62    69  1219     0      66  ,
 50035    69    82    64    69  1219     0      36  int
 50036    69    82    68    69  1219     0     111  cap
 50037    69    82    71    69  1219     0      66  ,
 50038    69    83    36    69  1219     0      36  int
 50039    69    83    40    69  1219     0     111  off
 50040    69    83    43    69  1219     0      60  )
 50041    69    84     5    69  1219     0      63  {
 50042    69    86     9    69  1219     0      27  super
 50043    69    86    14    69  1219     0      59  (
 50044    69    86    15    69  1219     0     111  mark
 50045    69    86    19    69  1219     0      66  ,
 50046    69    86    21    69  1219     0     111  pos
 50047    69    86    24    69  1219     0      66  ,
 50048    69    86    26    69  1219     0     111  lim
 50049    69    86    29    69  1219     0      66  ,
 50050    69    86    31    69  1219     0     111  cap
 50051    69    86    34    69  1219     0      66  ,
 50052    69    86    36    69  1219     0     111  buf
 50053    69    86    39    69  1219     0      66  ,
 50054    69    86    41    69  1219     0     111  off
 50055    69    86    44    69  1219     0      60  )
 50056    69    86    45    69  1219     0     102  ;
 50057    69    95     5    69  1219     0      64  }
 50058    69    95     5    69  1219     0    2838  ENDMETHOD
 50059    69    95     5    69  1220     0    2839  STARTMETHOD
 50060    69    97    12    69  1220     0     111  LongBuffer
 50061    69    97    23    69  1220     0     111  slice
 50062    69    97    28    69  1220     0      59  (
 50063    69    97    29    69  1220     0      60  )
 50064    69    97    31    69  1220     0      63  {
 50065    69    98     9    69  1220     0      19  return
 50066    69    98    20    69  1220     0     111  HeapLongBuffer
 50067    69    98    34    69  1220     0      59  (
 50068    69    98    35    69  1220     0     111  hb
 50069    69    98    37    69  1220     0      66  ,
 50070    69    99    41    69  1220     0      77  -
 50071    69    99    42    69  1220     0     112  1
 50072    69    99    43    69  1220     0      66  ,
 50073    69   100    41    69  1220     0     112  0
 50074    69   100    42    69  1220     0      66  ,
 50075    69   101    41    69  1220     1     111  this.remaining
 50076    69   101    55    69  1220     1      59  (
 50077    69   101    56    69  1220     1      60  )
 50078    69   101    57    69  1220     1      66  ,
 50079    69   102    41    69  1220     1     111  this.remaining
 50080    69   102    55    69  1220     1      59  (
 50081    69   102    56    69  1220     1      60  )
 50082    69   102    57    69  1220     1      66  ,
 50083    69   103    41    69  1220     0     111  this.position
 50084    69   103    54    69  1220     0      59  (
 50085    69   103    55    69  1220     0      60  )
 50086    69   103    57    69  1220     0      74  +
 50087    69   103    59    69  1220     0     111  offset
 50088    69   103    65    69  1220     0      60  )
 50089    69   103    66    69  1220     0     102  ;
 50090    69   104     5    69  1220     0      64  }
 50091    69   104     5    69  1220     0    2840  ENDMETHOD
 50092    69   104     5    69  1221     0    2841  STARTMETHOD
 50093    69   106    12    69  1221     0     111  LongBuffer
 50094    69   106    23    69  1221     0     111  duplicate
 50095    69   106    32    69  1221     0      59  (
 50096    69   106    33    69  1221     0      60  )
 50097    69   106    35    69  1221     0      63  {
 50098    69   107     9    69  1221     0      19  return
 50099    69   107    20    69  1221     0     111  HeapLongBuffer
 50100    69   107    34    69  1221     0      59  (
 50101    69   107    35    69  1221     0     111  hb
 50102    69   107    37    69  1221     0      66  ,
 50103    69   108    41    69  1221     1     111  this.markValue
 50104    69   108    55    69  1221     1      59  (
 50105    69   108    56    69  1221     1      60  )
 50106    69   108    57    69  1221     1      66  ,
 50107    69   109    41    69  1221     1     111  this.position
 50108    69   109    54    69  1221     1      59  (
 50109    69   109    55    69  1221     1      60  )
 50110    69   109    56    69  1221     1      66  ,
 50111    69   110    41    69  1221     1     111  this.limit
 50112    69   110    51    69  1221     1      59  (
 50113    69   110    52    69  1221     1      60  )
 50114    69   110    53    69  1221     1      66  ,
 50115    69   111    41    69  1221     1     111  this.capacity
 50116    69   111    54    69  1221     1      59  (
 50117    69   111    55    69  1221     1      60  )
 50118    69   111    56    69  1221     1      66  ,
 50119    69   112    41    69  1221     0     111  offset
 50120    69   112    47    69  1221     0      60  )
 50121    69   112    48    69  1221     0     102  ;
 50122    69   113     5    69  1221     0      64  }
 50123    69   113     5    69  1221     0    2842  ENDMETHOD
 50124    69   113     5    69  1222     0    2843  STARTMETHOD
 50125    69   115    12    69  1222     0     111  LongBuffer
 50126    69   115    23    69  1222     0     111  asReadOnlyBuffer
 50127    69   115    39    69  1222     0      59  (
 50128    69   115    40    69  1222     0      60  )
 50129    69   115    42    69  1222     0      63  {
 50130    69   117     9    69  1222     0      19  return
 50131    69   117    20    69  1222     0     111  HeapLongBufferR
 50132    69   117    35    69  1222     0      59  (
 50133    69   117    36    69  1222     0     111  hb
 50134    69   117    38    69  1222     0      66  ,
 50135    69   118    38    69  1222     1     111  this.markValue
 50136    69   118    52    69  1222     1      59  (
 50137    69   118    53    69  1222     1      60  )
 50138    69   118    54    69  1222     1      66  ,
 50139    69   119    38    69  1222     1     111  this.position
 50140    69   119    51    69  1222     1      59  (
 50141    69   119    52    69  1222     1      60  )
 50142    69   119    53    69  1222     1      66  ,
 50143    69   120    38    69  1222     1     111  this.limit
 50144    69   120    48    69  1222     1      59  (
 50145    69   120    49    69  1222     1      60  )
 50146    69   120    50    69  1222     1      66  ,
 50147    69   121    38    69  1222     1     111  this.capacity
 50148    69   121    51    69  1222     1      59  (
 50149    69   121    52    69  1222     1      60  )
 50150    69   121    53    69  1222     1      66  ,
 50151    69   122    38    69  1222     0     111  offset
 50152    69   122    44    69  1222     0      60  )
 50153    69   122    45    69  1222     0     102  ;
 50154    69   126     5    69  1222     0      64  }
 50155    69   126     5    69  1222     0    2844  ENDMETHOD
 50156    69   126     5    69  1223     0    2845  STARTMETHOD
 50157    69   130     5    69  1223     0      23  protected
 50158    69   130    15    69  1223     0      36  int
 50159    69   130    19    69  1223     0     111  ix
 50160    69   130    21    69  1223     0      59  (
 50161    69   130    22    69  1223     0      36  int
 50162    69   130    26    69  1223     0     111  i
 50163    69   130    27    69  1223     0      60  )
 50164    69   130    29    69  1223     0      63  {
 50165    69   131     9    69  1223     0      19  return
 50166    69   131    16    69  1223     0     111  i
 50167    69   131    18    69  1223     0      74  +
 50168    69   131    20    69  1223     0     111  offset
 50169    69   131    26    69  1223     0     102  ;
 50170    69   132     5    69  1223     0      64  }
 50171    69   132     5    69  1223     0    2846  ENDMETHOD
 50172    69   132     5    69  1224     0    2847  STARTMETHOD
 50173    69   134    12    69  1224     0      53  long
 50174    69   134    17    69  1224     0     111  get
 50175    69   134    20    69  1224     0      59  (
 50176    69   134    21    69  1224     0      60  )
 50177    69   134    23    69  1224     0      63  {
 50178    69   135     9    69  1224     0      19  return
 50179    69   135    16    69  1224     0     111  hb
 50180    69   135    18    69  1224     0      61  [
 50181    69   135    19    69  1224     0     111  ix
 50182    69   135    21    69  1224     0      59  (
 50183    69   135    22    69  1224     0     111  nextGetIndex
 50184    69   135    34    69  1224     0      59  (
 50185    69   135    35    69  1224     0      60  )
 50186    69   135    36    69  1224     0      60  )
 50187    69   135    37    69  1224     0      62  ]
 50188    69   135    38    69  1224     0     102  ;
 50189    69   136     5    69  1224     0      64  }
 50190    69   136     5    69  1224     0    2848  ENDMETHOD
 50191    69   136     5    69  1225     0    2849  STARTMETHOD
 50192    69   138    12    69  1225     0      53  long
 50193    69   138    17    69  1225     0     111  get
 50194    69   138    20    69  1225     0      59  (
 50195    69   138    21    69  1225     0      36  int
 50196    69   138    25    69  1225     0     111  i
 50197    69   138    26    69  1225     0      60  )
 50198    69   138    28    69  1225     0      63  {
 50199    69   139     9    69  1225     0      19  return
 50200    69   139    16    69  1225     0     111  hb
 50201    69   139    18    69  1225     0      61  [
 50202    69   139    19    69  1225     0     111  ix
 50203    69   139    21    69  1225     0      59  (
 50204    69   139    22    69  1225     0     111  checkIndex
 50205    69   139    32    69  1225     0      59  (
 50206    69   139    33    69  1225     0     111  i
 50207    69   139    34    69  1225     0      60  )
 50208    69   139    35    69  1225     0      60  )
 50209    69   139    36    69  1225     0      62  ]
 50210    69   139    37    69  1225     0     102  ;
 50211    69   140     5    69  1225     0      64  }
 50212    69   140     5    69  1225     0    2850  ENDMETHOD
 50213    69   140     5    69  1226     0    2851  STARTMETHOD
 50214    69   142    12    69  1226     0     111  LongBuffer
 50215    69   142    23    69  1226     0     111  get
 50216    69   142    26    69  1226     0      59  (
 50217    69   142    27    69  1226     0      53  long
 50218    69   142    31    69  1226     0      61  [
 50219    69   142    32    69  1226     0      62  ]
 50220    69   142    34    69  1226     0     111  dst
 50221    69   142    37    69  1226     0      66  ,
 50222    69   142    39    69  1226     0      36  int
 50223    69   142    43    69  1226     0     111  offset
 50224    69   142    49    69  1226     0      66  ,
 50225    69   142    51    69  1226     0      36  int
 50226    69   142    55    69  1226     0     111  length
 50227    69   142    61    69  1226     0      60  )
 50228    69   142    63    69  1226     0      63  {
 50229    69   143     9    69  1226     0     111  checkBounds
 50230    69   143    20    69  1226     0      59  (
 50231    69   143    21    69  1226     0     111  offset
 50232    69   143    27    69  1226     0      66  ,
 50233    69   143    29    69  1226     0     111  length
 50234    69   143    35    69  1226     0      66  ,
 50235    69   143    37    69  1226     0     111  dst.length
 50236    69   143    47    69  1226     0      60  )
 50237    69   143    48    69  1226     0     102  ;
 50238    69   144     9    69  1226     0      31  if
 50239    69   144    12    69  1226     0      59  (
 50240    69   144    13    69  1226     0     111  length
 50241    69   144    20    69  1226     0      89  >
 50242    69   144    22    69  1226     0     111  remaining
 50243    69   144    31    69  1226     0      59  (
 50244    69   144    32    69  1226     0      60  )
 50245    69   144    33    69  1226     0      60  )
 50246    69   145    13    69  1226     0      20  throw
 50247    69   145    23    69  1226     0     111  BufferUnderflowException
 50248    69   145    47    69  1226     0      59  (
 50249    69   145    48    69  1226     0      60  )
 50250    69   145    49    69  1226     0     102  ;
 50251    69   146     9    69  1226     0     111  System.arraycopy
 50252    69   146    25    69  1226     0      59  (
 50253    69   146    26    69  1226     0     111  hb
 50254    69   146    28    69  1226     0      66  ,
 50255    69   146    30    69  1226     0     111  ix
 50256    69   146    32    69  1226     0      59  (
 50257    69   146    33    69  1226     0     111  position
 50258    69   146    41    69  1226     0      59  (
 50259    69   146    42    69  1226     0      60  )
 50260    69   146    43    69  1226     0      60  )
 50261    69   146    44    69  1226     0      66  ,
 50262    69   146    46    69  1226     0     111  dst
 50263    69   146    49    69  1226     0      66  ,
 50264    69   146    51    69  1226     0     111  offset
 50265    69   146    57    69  1226     0      66  ,
 50266    69   146    59    69  1226     0     111  length
 50267    69   146    65    69  1226     0      60  )
 50268    69   146    66    69  1226     0     102  ;
 50269    69   147     9    69  1226     0     111  position
 50270    69   147    17    69  1226     0      59  (
 50271    69   147    18    69  1226     0     111  position
 50272    69   147    26    69  1226     0      59  (
 50273    69   147    27    69  1226     0      60  )
 50274    69   147    29    69  1226     0      74  +
 50275    69   147    31    69  1226     0     111  length
 50276    69   147    37    69  1226     0      60  )
 50277    69   147    38    69  1226     0     102  ;
 50278    69   148     9    69  1226     0      19  return
 50279    69   148    16    69  1226     0      44  this
 50280    69   148    20    69  1226     1     102  ;
 50281    69   149     5    69  1226     1      64  }
 50282    69   149     5    69  1226     0    2852  ENDMETHOD
 50283    69   149     5    69  1227     0    2853  STARTMETHOD
 50284    69   151    12    69  1227     0      39  boolean
 50285    69   151    20    69  1227     0     111  isDirect
 50286    69   151    28    69  1227     0      59  (
 50287    69   151    29    69  1227     0      60  )
 50288    69   151    31    69  1227     0      63  {
 50289    69   152     9    69  1227     0      19  return
 50290    69   152    16    69  1227     0      43  false
 50291    69   152    21    69  1227     1     102  ;
 50292    69   153     5    69  1227     1      64  }
 50293    69   153     5    69  1227     0    2854  ENDMETHOD
 50294    69   153     5    69  1228     0    2855  STARTMETHOD
 50295    69   157    12    69  1228     0      39  boolean
 50296    69   157    20    69  1228     0     111  isReadOnly
 50297    69   157    30    69  1228     0      59  (
 50298    69   157    31    69  1228     0      60  )
 50299    69   157    33    69  1228     0      63  {
 50300    69   158     9    69  1228     0      19  return
 50301    69   158    16    69  1228     0      43  false
 50302    69   158    21    69  1228     1     102  ;
 50303    69   159     5    69  1228     1      64  }
 50304    69   159     5    69  1228     0    2856  ENDMETHOD
 50305    69   159     5    69  1229     0    2857  STARTMETHOD
 50306    69   161    12    69  1229     0     111  LongBuffer
 50307    69   161    23    69  1229     0     111  put
 50308    69   161    26    69  1229     0      59  (
 50309    69   161    27    69  1229     0      53  long
 50310    69   161    32    69  1229     0     111  x
 50311    69   161    33    69  1229     0      60  )
 50312    69   161    35    69  1229     0      63  {
 50313    69   163     9    69  1229     0     111  hb
 50314    69   163    11    69  1229     0      61  [
 50315    69   163    12    69  1229     0     111  ix
 50316    69   163    14    69  1229     0      59  (
 50317    69   163    15    69  1229     0     111  nextPutIndex
 50318    69   163    27    69  1229     0      59  (
 50319    69   163    28    69  1229     0      60  )
 50320    69   163    29    69  1229     0      60  )
 50321    69   163    30    69  1229     0      62  ]
 50322    69   163    32    69  1229     0      67  =
 50323    69   163    34    69  1229     0     111  x
 50324    69   163    35    69  1229     0     102  ;
 50325    69   164     9    69  1229     0      19  return
 50326    69   164    16    69  1229     0      44  this
 50327    69   164    20    69  1229     0     102  ;
 50328    69   168     5    69  1229     0      64  }
 50329    69   168     5    69  1229     0    2858  ENDMETHOD
 50330    69   168     5    69  1230     0    2859  STARTMETHOD
 50331    69   170    12    69  1230     0     111  LongBuffer
 50332    69   170    23    69  1230     0     111  put
 50333    69   170    26    69  1230     0      59  (
 50334    69   170    27    69  1230     0      36  int
 50335    69   170    31    69  1230     0     111  i
 50336    69   170    32    69  1230     0      66  ,
 50337    69   170    34    69  1230     0      53  long
 50338    69   170    39    69  1230     0     111  x
 50339    69   170    40    69  1230     0      60  )
 50340    69   170    42    69  1230     0      63  {
 50341    69   172     9    69  1230     0     111  hb
 50342    69   172    11    69  1230     0      61  [
 50343    69   172    12    69  1230     0     111  ix
 50344    69   172    14    69  1230     0      59  (
 50345    69   172    15    69  1230     0     111  checkIndex
 50346    69   172    25    69  1230     0      59  (
 50347    69   172    26    69  1230     0     111  i
 50348    69   172    27    69  1230     0      60  )
 50349    69   172    28    69  1230     0      60  )
 50350    69   172    29    69  1230     0      62  ]
 50351    69   172    31    69  1230     0      67  =
 50352    69   172    33    69  1230     0     111  x
 50353    69   172    34    69  1230     0     102  ;
 50354    69   173     9    69  1230     0      19  return
 50355    69   173    16    69  1230     0      44  this
 50356    69   173    20    69  1230     0     102  ;
 50357    69   177     5    69  1230     0      64  }
 50358    69   177     5    69  1230     0    2860  ENDMETHOD
 50359    69   177     5    69  1231     0    2861  STARTMETHOD
 50360    69   179    12    69  1231     0     111  LongBuffer
 50361    69   179    23    69  1231     0     111  put
 50362    69   179    26    69  1231     0      59  (
 50363    69   179    27    69  1231     0      53  long
 50364    69   179    31    69  1231     0      61  [
 50365    69   179    32    69  1231     0      62  ]
 50366    69   179    34    69  1231     0     111  src
 50367    69   179    37    69  1231     0      66  ,
 50368    69   179    39    69  1231     0      36  int
 50369    69   179    43    69  1231     0     111  offset
 50370    69   179    49    69  1231     0      66  ,
 50371    69   179    51    69  1231     0      36  int
 50372    69   179    55    69  1231     0     111  length
 50373    69   179    61    69  1231     0      60  )
 50374    69   179    63    69  1231     0      63  {
 50375    69   181     9    69  1231     0     111  checkBounds
 50376    69   181    20    69  1231     0      59  (
 50377    69   181    21    69  1231     0     111  offset
 50378    69   181    27    69  1231     0      66  ,
 50379    69   181    29    69  1231     0     111  length
 50380    69   181    35    69  1231     0      66  ,
 50381    69   181    37    69  1231     0     111  src.length
 50382    69   181    47    69  1231     0      60  )
 50383    69   181    48    69  1231     0     102  ;
 50384    69   182     9    69  1231     0      31  if
 50385    69   182    12    69  1231     0      59  (
 50386    69   182    13    69  1231     0     111  length
 50387    69   182    20    69  1231     0      89  >
 50388    69   182    22    69  1231     0     111  remaining
 50389    69   182    31    69  1231     0      59  (
 50390    69   182    32    69  1231     0      60  )
 50391    69   182    33    69  1231     0      60  )
 50392    69   183    13    69  1231     0      20  throw
 50393    69   183    23    69  1231     0     111  BufferOverflowException
 50394    69   183    46    69  1231     0      59  (
 50395    69   183    47    69  1231     0      60  )
 50396    69   183    48    69  1231     0     102  ;
 50397    69   184     9    69  1231     0     111  System.arraycopy
 50398    69   184    25    69  1231     0      59  (
 50399    69   184    26    69  1231     0     111  src
 50400    69   184    29    69  1231     0      66  ,
 50401    69   184    31    69  1231     0     111  offset
 50402    69   184    37    69  1231     0      66  ,
 50403    69   184    39    69  1231     0     111  hb
 50404    69   184    41    69  1231     0      66  ,
 50405    69   184    43    69  1231     0     111  ix
 50406    69   184    45    69  1231     0      59  (
 50407    69   184    46    69  1231     0     111  position
 50408    69   184    54    69  1231     0      59  (
 50409    69   184    55    69  1231     0      60  )
 50410    69   184    56    69  1231     0      60  )
 50411    69   184    57    69  1231     0      66  ,
 50412    69   184    59    69  1231     0     111  length
 50413    69   184    65    69  1231     0      60  )
 50414    69   184    66    69  1231     0     102  ;
 50415    69   185     9    69  1231     0     111  position
 50416    69   185    17    69  1231     0      59  (
 50417    69   185    18    69  1231     0     111  position
 50418    69   185    26    69  1231     0      59  (
 50419    69   185    27    69  1231     0      60  )
 50420    69   185    29    69  1231     0      74  +
 50421    69   185    31    69  1231     0     111  length
 50422    69   185    37    69  1231     0      60  )
 50423    69   185    38    69  1231     0     102  ;
 50424    69   186     9    69  1231     0      19  return
 50425    69   186    16    69  1231     0      44  this
 50426    69   186    20    69  1231     0     102  ;
 50427    69   190     5    69  1231     0      64  }
 50428    69   190     5    69  1231     0    2862  ENDMETHOD
 50429    69   190     5    69  1232     0    2863  STARTMETHOD
 50430    69   192    12    69  1232     0     111  LongBuffer
 50431    69   192    23    69  1232     0     111  put
 50432    69   192    26    69  1232     0      59  (
 50433    69   192    27    69  1232     0     111  LongBuffer
 50434    69   192    38    69  1232     0     111  src
 50435    69   192    41    69  1232     0      60  )
 50436    69   192    43    69  1232     0      63  {
 50437    69   194     9    69  1232     0      31  if
 50438    69   194    12    69  1232     0      59  (
 50439    69   194    13    69  1232     0     111  src
 50440    69   194    28    69  1232     0     111  HeapLongBuffer
 50441    69   194    42    69  1232     0      60  )
 50442    69   194    44    69  1232     0      63  {
 50443    69   195    13    69  1232     0      31  if
 50444    69   195    16    69  1232     0      59  (
 50445    69   195    17    69  1232     0     111  src
 50446    69   195    21    69  1232     0      68  ==
 50447    69   195    24    69  1232     0      44  this
 50448    69   195    28    69  1232     0      60  )
 50449    69   196    17    69  1232     0      20  throw
 50450    69   196    27    69  1232     0     111  IllegalArgumentException
 50451    69   196    51    69  1232     0      59  (
 50452    69   196    52    69  1232     0      60  )
 50453    69   196    53    69  1232     0     102  ;
 50454    69   197    13    69  1232     0     111  HeapLongBuffer
 50455    69   197    28    69  1232     0     111  sb
 50456    69   197    31    69  1232     0      67  =
 50457    69   197    33    69  1232     0      59  (
 50458    69   197    34    69  1232     0     111  HeapLongBuffer
 50459    69   197    48    69  1232     0      60  )
 50460    69   197    49    69  1232     0     111  src
 50461    69   197    52    69  1232     0     102  ;
 50462    69   198    13    69  1232     0      36  int
 50463    69   198    17    69  1232     0     111  n
 50464    69   198    19    69  1232     0      67  =
 50465    69   198    21    69  1232     0     111  sb.remaining
 50466    69   198    33    69  1232     0      59  (
 50467    69   198    34    69  1232     0      60  )
 50468    69   198    35    69  1232     0     102  ;
 50469    69   199    13    69  1232     0      31  if
 50470    69   199    16    69  1232     0      59  (
 50471    69   199    17    69  1232     0     111  n
 50472    69   199    19    69  1232     0      89  >
 50473    69   199    21    69  1232     0     111  remaining
 50474    69   199    30    69  1232     0      59  (
 50475    69   199    31    69  1232     0      60  )
 50476    69   199    32    69  1232     0      60  )
 50477    69   200    17    69  1232     0      20  throw
 50478    69   200    27    69  1232     0     111  BufferOverflowException
 50479    69   200    50    69  1232     0      59  (
 50480    69   200    51    69  1232     0      60  )
 50481    69   200    52    69  1232     0     102  ;
 50482    69   201    13    69  1232     0     111  System.arraycopy
 50483    69   201    29    69  1232     0      59  (
 50484    69   201    30    69  1232     0     111  sb.hb
 50485    69   201    35    69  1232     0      66  ,
 50486    69   201    37    69  1232     0     111  sb.ix
 50487    69   201    42    69  1232     0      59  (
 50488    69   201    43    69  1232     0     111  sb.position
 50489    69   201    54    69  1232     0      59  (
 50490    69   201    55    69  1232     0      60  )
 50491    69   201    56    69  1232     0      60  )
 50492    69   201    57    69  1232     0      66  ,
 50493    69   202    30    69  1232     0     111  hb
 50494    69   202    32    69  1232     0      66  ,
 50495    69   202    34    69  1232     0     111  ix
 50496    69   202    36    69  1232     0      59  (
 50497    69   202    37    69  1232     0     111  position
 50498    69   202    45    69  1232     0      59  (
 50499    69   202    46    69  1232     0      60  )
 50500    69   202    47    69  1232     0      60  )
 50501    69   202    48    69  1232     0      66  ,
 50502    69   202    50    69  1232     0     111  n
 50503    69   202    51    69  1232     0      60  )
 50504    69   202    52    69  1232     0     102  ;
 50505    69   203    13    69  1232     1     111  sb.position
 50506    69   203    24    69  1232     1      59  (
 50507    69   203    25    69  1232     1     111  sb.position
 50508    69   203    36    69  1232     1      59  (
 50509    69   203    37    69  1232     1      60  )
 50510    69   203    39    69  1232     1      74  +
 50511    69   203    41    69  1232     1     111  n
 50512    69   203    42    69  1232     1      60  )
 50513    69   203    43    69  1232     1     102  ;
 50514    69   204    13    69  1232     1     111  position
 50515    69   204    21    69  1232     1      59  (
 50516    69   204    22    69  1232     1     111  position
 50517    69   204    30    69  1232     1      59  (
 50518    69   204    31    69  1232     1      60  )
 50519    69   204    33    69  1232     1      74  +
 50520    69   204    35    69  1232     1     111  n
 50521    69   204    36    69  1232     1      60  )
 50522    69   204    37    69  1232     1     102  ;
 50523    69   205     9    69  1232     0      64  }
 50524    69   205    11    69  1232     0      48  else
 50525    69   205    16    69  1232     0      31  if
 50526    69   205    19    69  1232     0      59  (
 50527    69   205    20    69  1232     0     111  src.isDirect
 50528    69   205    32    69  1232     0      59  (
 50529    69   205    33    69  1232     0      60  )
 50530    69   205    34    69  1232     0      60  )
 50531    69   205    36    69  1232     0      63  {
 50532    69   206    13    69  1232     0      36  int
 50533    69   206    17    69  1232     0     111  n
 50534    69   206    19    69  1232     0      67  =
 50535    69   206    21    69  1232     0     111  src.remaining
 50536    69   206    34    69  1232     0      59  (
 50537    69   206    35    69  1232     0      60  )
 50538    69   206    36    69  1232     0     102  ;
 50539    69   207    13    69  1232     0      31  if
 50540    69   207    16    69  1232     0      59  (
 50541    69   207    17    69  1232     0     111  n
 50542    69   207    19    69  1232     0      89  >
 50543    69   207    21    69  1232     0     111  remaining
 50544    69   207    30    69  1232     0      59  (
 50545    69   207    31    69  1232     0      60  )
 50546    69   207    32    69  1232     0      60  )
 50547    69   208    17    69  1232     0      20  throw
 50548    69   208    27    69  1232     0     111  BufferOverflowException
 50549    69   208    50    69  1232     0      59  (
 50550    69   208    51    69  1232     0      60  )
 50551    69   208    52    69  1232     0     102  ;
 50552    69   209    13    69  1232     0     111  src.get
 50553    69   209    20    69  1232     0      59  (
 50554    69   209    21    69  1232     0     111  hb
 50555    69   209    23    69  1232     0      66  ,
 50556    69   209    25    69  1232     0     111  ix
 50557    69   209    27    69  1232     0      59  (
 50558    69   209    28    69  1232     0     111  position
 50559    69   209    36    69  1232     0      59  (
 50560    69   209    37    69  1232     0      60  )
 50561    69   209    38    69  1232     0      60  )
 50562    69   209    39    69  1232     0      66  ,
 50563    69   209    41    69  1232     0     111  n
 50564    69   209    42    69  1232     0      60  )
 50565    69   209    43    69  1232     0     102  ;
 50566    69   210    13    69  1232     0     111  position
 50567    69   210    21    69  1232     0      59  (
 50568    69   210    22    69  1232     0     111  position
 50569    69   210    30    69  1232     0      59  (
 50570    69   210    31    69  1232     0      60  )
 50571    69   210    33    69  1232     0      74  +
 50572    69   210    35    69  1232     0     111  n
 50573    69   210    36    69  1232     0      60  )
 50574    69   210    37    69  1232     0     102  ;
 50575    69   211     9    69  1232     0      64  }
 50576    69   211    11    69  1232     0      48  else
 50577    69   211    16    69  1232     0      63  {
 50578    69   212    13    69  1232     0     111  super.put
 50579    69   212    22    69  1232     0      59  (
 50580    69   212    23    69  1232     0     111  src
 50581    69   212    26    69  1232     0      60  )
 50582    69   212    27    69  1232     0     102  ;
 50583    69   213     9    69  1232     0      64  }
 50584    69   214     9    69  1232     0      19  return
 50585    69   214    16    69  1232     0      44  this
 50586    69   214    20    69  1232     0     102  ;
 50587    69   218     5    69  1232     0      64  }
 50588    69   218     5    69  1232     0    2864  ENDMETHOD
 50589    69   218     5    69  1233     0    2865  STARTMETHOD
 50590    69   220    12    69  1233     0     111  LongBuffer
 50591    69   220    23    69  1233     0     111  compact
 50592    69   220    30    69  1233     0      59  (
 50593    69   220    31    69  1233     0      60  )
 50594    69   220    33    69  1233     0      63  {
 50595    69   222     9    69  1233     0     111  System.arraycopy
 50596    69   222    25    69  1233     0      59  (
 50597    69   222    26    69  1233     0     111  hb
 50598    69   222    28    69  1233     0      66  ,
 50599    69   222    30    69  1233     0     111  ix
 50600    69   222    32    69  1233     0      59  (
 50601    69   222    33    69  1233     0     111  position
 50602    69   222    41    69  1233     0      59  (
 50603    69   222    42    69  1233     0      60  )
 50604    69   222    43    69  1233     0      60  )
 50605    69   222    44    69  1233     0      66  ,
 50606    69   222    46    69  1233     0     111  hb
 50607    69   222    48    69  1233     0      66  ,
 50608    69   222    50    69  1233     0     111  ix
 50609    69   222    52    69  1233     0      59  (
 50610    69   222    53    69  1233     0     112  0
 50611    69   222    54    69  1233     0      60  )
 50612    69   222    55    69  1233     0      66  ,
 50613    69   222    57    69  1233     0     111  remaining
 50614    69   222    66    69  1233     0      59  (
 50615    69   222    67    69  1233     0      60  )
 50616    69   222    68    69  1233     0      60  )
 50617    69   222    69    69  1233     0     102  ;
 50618    69   223     9    69  1233     1     111  position
 50619    69   223    17    69  1233     1      59  (
 50620    69   223    18    69  1233     1     111  remaining
 50621    69   223    27    69  1233     1      59  (
 50622    69   223    28    69  1233     1      60  )
 50623    69   223    29    69  1233     1      60  )
 50624    69   223    30    69  1233     1     102  ;
 50625    69   224     9    69  1233     1     111  limit
 50626    69   224    14    69  1233     1      59  (
 50627    69   224    15    69  1233     1     111  capacity
 50628    69   224    23    69  1233     1      59  (
 50629    69   224    24    69  1233     1      60  )
 50630    69   224    25    69  1233     1      60  )
 50631    69   224    26    69  1233     1     102  ;
 50632    69   225     9    69  1233     0     111  clearMark
 50633    69   225    18    69  1233     0      59  (
 50634    69   225    19    69  1233     0      60  )
 50635    69   225    20    69  1233     0     102  ;
 50636    69   226     9    69  1233     0      19  return
 50637    69   226    16    69  1233     0      44  this
 50638    69   226    20    69  1233     0     102  ;
 50639    69   230     5    69  1233     0      64  }
 50640    69   230     5    69  1233     0    2866  ENDMETHOD
 50641    69   230     5    69  1234     0    2867  STARTMETHOD
 50642    69   586    12    69  1234     0     111  ByteOrder
 50643    69   586    22    69  1234     0     111  order
 50644    69   586    27    69  1234     0      59  (
 50645    69   586    28    69  1234     0      60  )
 50646    69   586    30    69  1234     0      63  {
 50647    69   587     9    69  1234     0      19  return
 50648    69   587    16    69  1234     0     111  ByteOrder.nativeOrder
 50649    69   587    37    69  1234     0      59  (
 50650    69   587    38    69  1234     0      60  )
 50651    69   587    39    69  1234     0     102  ;
 50652    69   588     5    69  1234     0      64  }
 50653    69   588     5    69  1234     0    2868  ENDMETHOD
 50654    69   592     1    69    -1     0      64  }
 50655    69   592     1    69    -1     1    2869  ENDCLASS
 50656    69   592     1    -1    -1     1    2870  ENDFILE C:\Users\RA\javasrc\java\nio\HeapLongBuffer.java
 50657    70     1     1    -1    -1     1    2871  STARTFILE C:\Users\RA\javasrc\java\nio\HeapLongBufferR.java
 50658    70    28     9    -1    -1     0     111  java.nio
 50659    70    28    17    -1    -1     0     102  ;
 50660    70    42     1    70    -1     0    2872  STARTCLASS
 50661    70    42     1    70    -1     0      24  class
 50662    70    42     7    70    -1     0     111  HeapLongBufferR
 50663    70    43     5    70    -1     0      38  extends
 50664    70    43    13    70    -1     0     111  HeapLongBuffer
 50665    70    44     1    70    -1     0      63  {
 50666    70    44     1    70  1235     0    2873  STARTMETHOD
 50667    70    55     5    70  1235     0     111  HeapLongBufferR
 50668    70    55    20    70  1235     0      59  (
 50669    70    55    21    70  1235     0      36  int
 50670    70    55    25    70  1235     0     111  cap
 50671    70    55    28    70  1235     0      66  ,
 50672    70    55    30    70  1235     0      36  int
 50673    70    55    34    70  1235     0     111  lim
 50674    70    55    37    70  1235     0      60  )
 50675    70    55    39    70  1235     0      63  {
 50676    70    63     9    70  1235     0      27  super
 50677    70    63    14    70  1235     0      59  (
 50678    70    63    15    70  1235     0     111  cap
 50679    70    63    18    70  1235     0      66  ,
 50680    70    63    20    70  1235     0     111  lim
 50681    70    63    23    70  1235     0      60  )
 50682    70    63    24    70  1235     0     102  ;
 50683    70    64     9    70  1235     0     111  this.isReadOnly
 50684    70    64    25    70  1235     0      67  =
 50685    70    64    27    70  1235     0      52  true
 50686    70    64    31    70  1235     0     102  ;
 50687    70    66     5    70  1235     0      64  }
 50688    70    66     5    70  1235     0    2874  ENDMETHOD
 50689    70    66     5    70  1236     0    2875  STARTMETHOD
 50690    70    68     5    70  1236     0     111  HeapLongBufferR
 50691    70    68    20    70  1236     0      59  (
 50692    70    68    21    70  1236     0      53  long
 50693    70    68    25    70  1236     0      61  [
 50694    70    68    26    70  1236     0      62  ]
 50695    70    68    28    70  1236     0     111  buf
 50696    70    68    31    70  1236     0      66  ,
 50697    70    68    33    70  1236     0      36  int
 50698    70    68    37    70  1236     0     111  off
 50699    70    68    40    70  1236     0      66  ,
 50700    70    68    42    70  1236     0      36  int
 50701    70    68    46    70  1236     0     111  len
 50702    70    68    49    70  1236     0      60  )
 50703    70    68    51    70  1236     0      63  {
 50704    70    76     9    70  1236     0      27  super
 50705    70    76    14    70  1236     0      59  (
 50706    70    76    15    70  1236     0     111  buf
 50707    70    76    18    70  1236     0      66  ,
 50708    70    76    20    70  1236     0     111  off
 50709    70    76    23    70  1236     0      66  ,
 50710    70    76    25    70  1236     0     111  len
 50711    70    76    28    70  1236     0      60  )
 50712    70    76    29    70  1236     0     102  ;
 50713    70    77     9    70  1236     0     111  this.isReadOnly
 50714    70    77    25    70  1236     0      67  =
 50715    70    77    27    70  1236     0      52  true
 50716    70    77    31    70  1236     0     102  ;
 50717    70    79     5    70  1236     0      64  }
 50718    70    79     5    70  1236     0    2876  ENDMETHOD
 50719    70    79     5    70  1237     0    2877  STARTMETHOD
 50720    70    81     5    70  1237     0      23  protected
 50721    70    81    15    70  1237     0     111  HeapLongBufferR
 50722    70    81    30    70  1237     0      59  (
 50723    70    81    31    70  1237     0      53  long
 50724    70    81    35    70  1237     0      61  [
 50725    70    81    36    70  1237     0      62  ]
 50726    70    81    38    70  1237     0     111  buf
 50727    70    81    41    70  1237     0      66  ,
 50728    70    82    36    70  1237     0      36  int
 50729    70    82    40    70  1237     0     111  mark
 50730    70    82    44    70  1237     0      66  ,
 50731    70    82    46    70  1237     0      36  int
 50732    70    82    50    70  1237     0     111  pos
 50733    70    82    53    70  1237     0      66  ,
 50734    70    82    55    70  1237     0      36  int
 50735    70    82    59    70  1237     0     111  lim
 50736    70    82    62    70  1237     0      66  ,
 50737    70    82    64    70  1237     0      36  int
 50738    70    82    68    70  1237     0     111  cap
 50739    70    82    71    70  1237     0      66  ,
 50740    70    83    36    70  1237     0      36  int
 50741    70    83    40    70  1237     0     111  off
 50742    70    83    43    70  1237     0      60  )
 50743    70    84     5    70  1237     0      63  {
 50744    70    92     9    70  1237     0      27  super
 50745    70    92    14    70  1237     0      59  (
 50746    70    92    15    70  1237     0     111  buf
 50747    70    92    18    70  1237     0      66  ,
 50748    70    92    20    70  1237     0     111  mark
 50749    70    92    24    70  1237     0      66  ,
 50750    70    92    26    70  1237     0     111  pos
 50751    70    92    29    70  1237     0      66  ,
 50752    70    92    31    70  1237     0     111  lim
 50753    70    92    34    70  1237     0      66  ,
 50754    70    92    36    70  1237     0     111  cap
 50755    70    92    39    70  1237     0      66  ,
 50756    70    92    41    70  1237     0     111  off
 50757    70    92    44    70  1237     0      60  )
 50758    70    92    45    70  1237     0     102  ;
 50759    70    93     9    70  1237     0     111  this.isReadOnly
 50760    70    93    25    70  1237     0      67  =
 50761    70    93    27    70  1237     0      52  true
 50762    70    93    31    70  1237     0     102  ;
 50763    70    95     5    70  1237     0      64  }
 50764    70    95     5    70  1237     0    2878  ENDMETHOD
 50765    70    95     5    70  1238     0    2879  STARTMETHOD
 50766    70    97    12    70  1238     0     111  LongBuffer
 50767    70    97    23    70  1238     0     111  slice
 50768    70    97    28    70  1238     0      59  (
 50769    70    97    29    70  1238     0      60  )
 50770    70    97    31    70  1238     0      63  {
 50771    70    98     9    70  1238     0      19  return
 50772    70    98    20    70  1238     0     111  HeapLongBufferR
 50773    70    98    35    70  1238     0      59  (
 50774    70    98    36    70  1238     0     111  hb
 50775    70    98    38    70  1238     0      66  ,
 50776    70    99    41    70  1238     0      77  -
 50777    70    99    42    70  1238     0     112  1
 50778    70    99    43    70  1238     0      66  ,
 50779    70   100    41    70  1238     0     112  0
 50780    70   100    42    70  1238     0      66  ,
 50781    70   101    41    70  1238     1     111  this.remaining
 50782    70   101    55    70  1238     1      59  (
 50783    70   101    56    70  1238     1      60  )
 50784    70   101    57    70  1238     1      66  ,
 50785    70   102    41    70  1238     1     111  this.remaining
 50786    70   102    55    70  1238     1      59  (
 50787    70   102    56    70  1238     1      60  )
 50788    70   102    57    70  1238     1      66  ,
 50789    70   103    41    70  1238     0     111  this.position
 50790    70   103    54    70  1238     0      59  (
 50791    70   103    55    70  1238     0      60  )
 50792    70   103    57    70  1238     0      74  +
 50793    70   103    59    70  1238     0     111  offset
 50794    70   103    65    70  1238     0      60  )
 50795    70   103    66    70  1238     0     102  ;
 50796    70   104     5    70  1238     0      64  }
 50797    70   104     5    70  1238     0    2880  ENDMETHOD
 50798    70   104     5    70  1239     0    2881  STARTMETHOD
 50799    70   106    12    70  1239     0     111  LongBuffer
 50800    70   106    23    70  1239     0     111  duplicate
 50801    70   106    32    70  1239     0      59  (
 50802    70   106    33    70  1239     0      60  )
 50803    70   106    35    70  1239     0      63  {
 50804    70   107     9    70  1239     0      19  return
 50805    70   107    20    70  1239     0     111  HeapLongBufferR
 50806    70   107    35    70  1239     0      59  (
 50807    70   107    36    70  1239     0     111  hb
 50808    70   107    38    70  1239     0      66  ,
 50809    70   108    41    70  1239     1     111  this.markValue
 50810    70   108    55    70  1239     1      59  (
 50811    70   108    56    70  1239     1      60  )
 50812    70   108    57    70  1239     1      66  ,
 50813    70   109    41    70  1239     1     111  this.position
 50814    70   109    54    70  1239     1      59  (
 50815    70   109    55    70  1239     1      60  )
 50816    70   109    56    70  1239     1      66  ,
 50817    70   110    41    70  1239     1     111  this.limit
 50818    70   110    51    70  1239     1      59  (
 50819    70   110    52    70  1239     1      60  )
 50820    70   110    53    70  1239     1      66  ,
 50821    70   111    41    70  1239     1     111  this.capacity
 50822    70   111    54    70  1239     1      59  (
 50823    70   111    55    70  1239     1      60  )
 50824    70   111    56    70  1239     1      66  ,
 50825    70   112    41    70  1239     0     111  offset
 50826    70   112    47    70  1239     0      60  )
 50827    70   112    48    70  1239     0     102  ;
 50828    70   113     5    70  1239     0      64  }
 50829    70   113     5    70  1239     0    2882  ENDMETHOD
 50830    70   113     5    70  1240     0    2883  STARTMETHOD
 50831    70   115    12    70  1240     0     111  LongBuffer
 50832    70   115    23    70  1240     0     111  asReadOnlyBuffer
 50833    70   115    39    70  1240     0      59  (
 50834    70   115    40    70  1240     0      60  )
 50835    70   115    42    70  1240     0      63  {
 50836    70   124     9    70  1240     0      19  return
 50837    70   124    16    70  1240     0     111  duplicate
 50838    70   124    25    70  1240     0      59  (
 50839    70   124    26    70  1240     0      60  )
 50840    70   124    27    70  1240     0     102  ;
 50841    70   126     5    70  1240     0      64  }
 50842    70   126     5    70  1240     0    2884  ENDMETHOD
 50843    70   126     5    70  1241     0    2885  STARTMETHOD
 50844    70   157    12    70  1241     0      39  boolean
 50845    70   157    20    70  1241     0     111  isReadOnly
 50846    70   157    30    70  1241     0      59  (
 50847    70   157    31    70  1241     0      60  )
 50848    70   157    33    70  1241     0      63  {
 50849    70   158     9    70  1241     0      19  return
 50850    70   158    16    70  1241     0      52  true
 50851    70   158    20    70  1241     0     102  ;
 50852    70   159     5    70  1241     0      64  }
 50853    70   159     5    70  1241     0    2886  ENDMETHOD
 50854    70   159     5    70  1242     0    2887  STARTMETHOD
 50855    70   161    12    70  1242     0     111  LongBuffer
 50856    70   161    23    70  1242     0     111  put
 50857    70   161    26    70  1242     0      59  (
 50858    70   161    27    70  1242     0      53  long
 50859    70   161    32    70  1242     0     111  x
 50860    70   161    33    70  1242     0      60  )
 50861    70   161    35    70  1242     0      63  {
 50862    70   166     9    70  1242     0      20  throw
 50863    70   166    19    70  1242     0     111  ReadOnlyBufferException
 50864    70   166    42    70  1242     0      59  (
 50865    70   166    43    70  1242     0      60  )
 50866    70   166    44    70  1242     0     102  ;
 50867    70   168     5    70  1242     0      64  }
 50868    70   168     5    70  1242     0    2888  ENDMETHOD
 50869    70   168     5    70  1243     0    2889  STARTMETHOD
 50870    70   170    12    70  1243     0     111  LongBuffer
 50871    70   170    23    70  1243     0     111  put
 50872    70   170    26    70  1243     0      59  (
 50873    70   170    27    70  1243     0      36  int
 50874    70   170    31    70  1243     0     111  i
 50875    70   170    32    70  1243     0      66  ,
 50876    70   170    34    70  1243     0      53  long
 50877    70   170    39    70  1243     0     111  x
 50878    70   170    40    70  1243     0      60  )
 50879    70   170    42    70  1243     0      63  {
 50880    70   175     9    70  1243     0      20  throw
 50881    70   175    19    70  1243     0     111  ReadOnlyBufferException
 50882    70   175    42    70  1243     0      59  (
 50883    70   175    43    70  1243     0      60  )
 50884    70   175    44    70  1243     0     102  ;
 50885    70   177     5    70  1243     0      64  }
 50886    70   177     5    70  1243     0    2890  ENDMETHOD
 50887    70   177     5    70  1244     0    2891  STARTMETHOD
 50888    70   179    12    70  1244     0     111  LongBuffer
 50889    70   179    23    70  1244     0     111  put
 50890    70   179    26    70  1244     0      59  (
 50891    70   179    27    70  1244     0      53  long
 50892    70   179    31    70  1244     0      61  [
 50893    70   179    32    70  1244     0      62  ]
 50894    70   179    34    70  1244     0     111  src
 50895    70   179    37    70  1244     0      66  ,
 50896    70   179    39    70  1244     0      36  int
 50897    70   179    43    70  1244     0     111  offset
 50898    70   179    49    70  1244     0      66  ,
 50899    70   179    51    70  1244     0      36  int
 50900    70   179    55    70  1244     0     111  length
 50901    70   179    61    70  1244     0      60  )
 50902    70   179    63    70  1244     0      63  {
 50903    70   188     9    70  1244     0      20  throw
 50904    70   188    19    70  1244     0     111  ReadOnlyBufferException
 50905    70   188    42    70  1244     0      59  (
 50906    70   188    43    70  1244     0      60  )
 50907    70   188    44    70  1244     0     102  ;
 50908    70   190     5    70  1244     0      64  }
 50909    70   190     5    70  1244     0    2892  ENDMETHOD
 50910    70   190     5    70  1245     0    2893  STARTMETHOD
 50911    70   192    12    70  1245     0     111  LongBuffer
 50912    70   192    23    70  1245     0     111  put
 50913    70   192    26    70  1245     0      59  (
 50914    70   192    27    70  1245     0     111  LongBuffer
 50915    70   192    38    70  1245     0     111  src
 50916    70   192    41    70  1245     0      60  )
 50917    70   192    43    70  1245     0      63  {
 50918    70   216     9    70  1245     0      20  throw
 50919    70   216    19    70  1245     1     111  ReadOnlyBufferException
 50920    70   216    42    70  1245     1      59  (
 50921    70   216    43    70  1245     1      60  )
 50922    70   216    44    70  1245     1     102  ;
 50923    70   218     5    70  1245     1      64  }
 50924    70   218     5    70  1245     0    2894  ENDMETHOD
 50925    70   218     5    70  1246     0    2895  STARTMETHOD
 50926    70   220    12    70  1246     0     111  LongBuffer
 50927    70   220    23    70  1246     0     111  compact
 50928    70   220    30    70  1246     0      59  (
 50929    70   220    31    70  1246     0      60  )
 50930    70   220    33    70  1246     0      63  {
 50931    70   228     9    70  1246     0      20  throw
 50932    70   228    19    70  1246     1     111  ReadOnlyBufferException
 50933    70   228    42    70  1246     1      59  (
 50934    70   228    43    70  1246     1      60  )
 50935    70   228    44    70  1246     1     102  ;
 50936    70   230     5    70  1246     1      64  }
 50937    70   230     5    70  1246     0    2896  ENDMETHOD
 50938    70   230     5    70  1247     0    2897  STARTMETHOD
 50939    70   586    12    70  1247     0     111  ByteOrder
 50940    70   586    22    70  1247     0     111  order
 50941    70   586    27    70  1247     0      59  (
 50942    70   586    28    70  1247     0      60  )
 50943    70   586    30    70  1247     0      63  {
 50944    70   587     9    70  1247     0      19  return
 50945    70   587    16    70  1247     1     111  ByteOrder.nativeOrder
 50946    70   587    37    70  1247     1      59  (
 50947    70   587    38    70  1247     1      60  )
 50948    70   587    39    70  1247     1     102  ;
 50949    70   588     5    70  1247     1      64  }
 50950    70   588     5    70  1247     0    2898  ENDMETHOD
 50951    70   592     1    70    -1     0      64  }
 50952    70   592     1    70    -1     1    2899  ENDCLASS
 50953    70   592     1    -1    -1     1    2900  ENDFILE C:\Users\RA\javasrc\java\nio\HeapLongBufferR.java
 50954    71     1     1    -1    -1     1    2901  STARTFILE C:\Users\RA\javasrc\java\nio\HeapShortBuffer.java
 50955    71    28     9    -1    -1     0     111  java.nio
 50956    71    28    17    -1    -1     0     102  ;
 50957    71    42     1    71    -1     0    2902  STARTCLASS
 50958    71    42     1    71    -1     0      24  class
 50959    71    42     7    71    -1     0     111  HeapShortBuffer
 50960    71    43     5    71    -1     0      38  extends
 50961    71    43    13    71    -1     0     111  ShortBuffer
 50962    71    44     1    71    -1     0      63  {
 50963    71    44     1    71  1248     0    2903  STARTMETHOD
 50964    71    55     5    71  1248     0     111  HeapShortBuffer
 50965    71    55    20    71  1248     0      59  (
 50966    71    55    21    71  1248     0      36  int
 50967    71    55    25    71  1248     0     111  cap
 50968    71    55    28    71  1248     0      66  ,
 50969    71    55    30    71  1248     0      36  int
 50970    71    55    34    71  1248     0     111  lim
 50971    71    55    37    71  1248     0      60  )
 50972    71    55    39    71  1248     0      63  {
 50973    71    57     9    71  1248     0      27  super
 50974    71    57    14    71  1248     0      59  (
 50975    71    57    15    71  1248     0      77  -
 50976    71    57    16    71  1248     0     112  1
 50977    71    57    17    71  1248     0      66  ,
 50978    71    57    19    71  1248     0     112  0
 50979    71    57    20    71  1248     0      66  ,
 50980    71    57    22    71  1248     0     111  lim
 50981    71    57    25    71  1248     0      66  ,
 50982    71    57    27    71  1248     0     111  cap
 50983    71    57    30    71  1248     0      66  ,
 50984    71    57    41    71  1248     0      61  [
 50985    71    57    42    71  1248     0     111  cap
 50986    71    57    45    71  1248     0      62  ]
 50987    71    57    46    71  1248     0      66  ,
 50988    71    57    48    71  1248     0     112  0
 50989    71    57    49    71  1248     0      60  )
 50990    71    57    50    71  1248     0     102  ;
 50991    71    66     5    71  1248     0      64  }
 50992    71    66     5    71  1248     0    2904  ENDMETHOD
 50993    71    66     5    71  1249     0    2905  STARTMETHOD
 50994    71    68     5    71  1249     0     111  HeapShortBuffer
 50995    71    68    20    71  1249     0      59  (
 50996    71    68    26    71  1249     0      61  [
 50997    71    68    27    71  1249     0      62  ]
 50998    71    68    29    71  1249     0     111  buf
 50999    71    68    32    71  1249     0      66  ,
 51000    71    68    34    71  1249     0      36  int
 51001    71    68    38    71  1249     0     111  off
 51002    71    68    41    71  1249     0      66  ,
 51003    71    68    43    71  1249     0      36  int
 51004    71    68    47    71  1249     0     111  len
 51005    71    68    50    71  1249     0      60  )
 51006    71    68    52    71  1249     0      63  {
 51007    71    70     9    71  1249     0      27  super
 51008    71    70    14    71  1249     0      59  (
 51009    71    70    15    71  1249     0      77  -
 51010    71    70    16    71  1249     0     112  1
 51011    71    70    17    71  1249     0      66  ,
 51012    71    70    19    71  1249     0     111  off
 51013    71    70    22    71  1249     0      66  ,
 51014    71    70    24    71  1249     0     111  off
 51015    71    70    28    71  1249     0      74  +
 51016    71    70    30    71  1249     0     111  len
 51017    71    70    33    71  1249     0      66  ,
 51018    71    70    35    71  1249     0     111  buf.length
 51019    71    70    45    71  1249     0      66  ,
 51020    71    70    47    71  1249     0     111  buf
 51021    71    70    50    71  1249     0      66  ,
 51022    71    70    52    71  1249     0     112  0
 51023    71    70    53    71  1249     0      60  )
 51024    71    70    54    71  1249     0     102  ;
 51025    71    79     5    71  1249     0      64  }
 51026    71    79     5    71  1249     0    2906  ENDMETHOD
 51027    71    79     5    71  1250     0    2907  STARTMETHOD
 51028    71    81     5    71  1250     0      23  protected
 51029    71    81    15    71  1250     0     111  HeapShortBuffer
 51030    71    81    30    71  1250     0      59  (
 51031    71    81    36    71  1250     0      61  [
 51032    71    81    37    71  1250     0      62  ]
 51033    71    81    39    71  1250     0     111  buf
 51034    71    81    42    71  1250     0      66  ,
 51035    71    82    36    71  1250     0      36  int
 51036    71    82    40    71  1250     0     111  mark
 51037    71    82    44    71  1250     0      66  ,
 51038    71    82    46    71  1250     0      36  int
 51039    71    82    50    71  1250     0     111  pos
 51040    71    82    53    71  1250     0      66  ,
 51041    71    82    55    71  1250     0      36  int
 51042    71    82    59    71  1250     0     111  lim
 51043    71    82    62    71  1250     0      66  ,
 51044    71    82    64    71  1250     0      36  int
 51045    71    82    68    71  1250     0     111  cap
 51046    71    82    71    71  1250     0      66  ,
 51047    71    83    36    71  1250     0      36  int
 51048    71    83    40    71  1250     0     111  off
 51049    71    83    43    71  1250     0      60  )
 51050    71    84     5    71  1250     0      63  {
 51051    71    86     9    71  1250     0      27  super
 51052    71    86    14    71  1250     0      59  (
 51053    71    86    15    71  1250     0     111  mark
 51054    71    86    19    71  1250     0      66  ,
 51055    71    86    21    71  1250     0     111  pos
 51056    71    86    24    71  1250     0      66  ,
 51057    71    86    26    71  1250     0     111  lim
 51058    71    86    29    71  1250     0      66  ,
 51059    71    86    31    71  1250     0     111  cap
 51060    71    86    34    71  1250     0      66  ,
 51061    71    86    36    71  1250     0     111  buf
 51062    71    86    39    71  1250     0      66  ,
 51063    71    86    41    71  1250     0     111  off
 51064    71    86    44    71  1250     0      60  )
 51065    71    86    45    71  1250     0     102  ;
 51066    71    95     5    71  1250     0      64  }
 51067    71    95     5    71  1250     0    2908  ENDMETHOD
 51068    71    95     5    71  1251     0    2909  STARTMETHOD
 51069    71    97    12    71  1251     0     111  ShortBuffer
 51070    71    97    24    71  1251     0     111  slice
 51071    71    97    29    71  1251     0      59  (
 51072    71    97    30    71  1251     0      60  )
 51073    71    97    32    71  1251     0      63  {
 51074    71    98     9    71  1251     0      19  return
 51075    71    98    20    71  1251     0     111  HeapShortBuffer
 51076    71    98    35    71  1251     0      59  (
 51077    71    98    36    71  1251     0     111  hb
 51078    71    98    38    71  1251     0      66  ,
 51079    71    99    41    71  1251     0      77  -
 51080    71    99    42    71  1251     0     112  1
 51081    71    99    43    71  1251     0      66  ,
 51082    71   100    41    71  1251     0     112  0
 51083    71   100    42    71  1251     0      66  ,
 51084    71   101    41    71  1251     1     111  this.remaining
 51085    71   101    55    71  1251     1      59  (
 51086    71   101    56    71  1251     1      60  )
 51087    71   101    57    71  1251     1      66  ,
 51088    71   102    41    71  1251     1     111  this.remaining
 51089    71   102    55    71  1251     1      59  (
 51090    71   102    56    71  1251     1      60  )
 51091    71   102    57    71  1251     1      66  ,
 51092    71   103    41    71  1251     0     111  this.position
 51093    71   103    54    71  1251     0      59  (
 51094    71   103    55    71  1251     0      60  )
 51095    71   103    57    71  1251     0      74  +
 51096    71   103    59    71  1251     0     111  offset
 51097    71   103    65    71  1251     0      60  )
 51098    71   103    66    71  1251     0     102  ;
 51099    71   104     5    71  1251     0      64  }
 51100    71   104     5    71  1251     0    2910  ENDMETHOD
 51101    71   104     5    71  1252     0    2911  STARTMETHOD
 51102    71   106    12    71  1252     0     111  ShortBuffer
 51103    71   106    24    71  1252     0     111  duplicate
 51104    71   106    33    71  1252     0      59  (
 51105    71   106    34    71  1252     0      60  )
 51106    71   106    36    71  1252     0      63  {
 51107    71   107     9    71  1252     0      19  return
 51108    71   107    20    71  1252     0     111  HeapShortBuffer
 51109    71   107    35    71  1252     0      59  (
 51110    71   107    36    71  1252     0     111  hb
 51111    71   107    38    71  1252     0      66  ,
 51112    71   108    41    71  1252     1     111  this.markValue
 51113    71   108    55    71  1252     1      59  (
 51114    71   108    56    71  1252     1      60  )
 51115    71   108    57    71  1252     1      66  ,
 51116    71   109    41    71  1252     1     111  this.position
 51117    71   109    54    71  1252     1      59  (
 51118    71   109    55    71  1252     1      60  )
 51119    71   109    56    71  1252     1      66  ,
 51120    71   110    41    71  1252     1     111  this.limit
 51121    71   110    51    71  1252     1      59  (
 51122    71   110    52    71  1252     1      60  )
 51123    71   110    53    71  1252     1      66  ,
 51124    71   111    41    71  1252     1     111  this.capacity
 51125    71   111    54    71  1252     1      59  (
 51126    71   111    55    71  1252     1      60  )
 51127    71   111    56    71  1252     1      66  ,
 51128    71   112    41    71  1252     0     111  offset
 51129    71   112    47    71  1252     0      60  )
 51130    71   112    48    71  1252     0     102  ;
 51131    71   113     5    71  1252     0      64  }
 51132    71   113     5    71  1252     0    2912  ENDMETHOD
 51133    71   113     5    71  1253     0    2913  STARTMETHOD
 51134    71   115    12    71  1253     0     111  ShortBuffer
 51135    71   115    24    71  1253     0     111  asReadOnlyBuffer
 51136    71   115    40    71  1253     0      59  (
 51137    71   115    41    71  1253     0      60  )
 51138    71   115    43    71  1253     0      63  {
 51139    71   117     9    71  1253     0      19  return
 51140    71   117    20    71  1253     0     111  HeapShortBufferR
 51141    71   117    36    71  1253     0      59  (
 51142    71   117    37    71  1253     0     111  hb
 51143    71   117    39    71  1253     0      66  ,
 51144    71   118    38    71  1253     1     111  this.markValue
 51145    71   118    52    71  1253     1      59  (
 51146    71   118    53    71  1253     1      60  )
 51147    71   118    54    71  1253     1      66  ,
 51148    71   119    38    71  1253     1     111  this.position
 51149    71   119    51    71  1253     1      59  (
 51150    71   119    52    71  1253     1      60  )
 51151    71   119    53    71  1253     1      66  ,
 51152    71   120    38    71  1253     1     111  this.limit
 51153    71   120    48    71  1253     1      59  (
 51154    71   120    49    71  1253     1      60  )
 51155    71   120    50    71  1253     1      66  ,
 51156    71   121    38    71  1253     1     111  this.capacity
 51157    71   121    51    71  1253     1      59  (
 51158    71   121    52    71  1253     1      60  )
 51159    71   121    53    71  1253     1      66  ,
 51160    71   122    38    71  1253     0     111  offset
 51161    71   122    44    71  1253     0      60  )
 51162    71   122    45    71  1253     0     102  ;
 51163    71   126     5    71  1253     0      64  }
 51164    71   126     5    71  1253     0    2914  ENDMETHOD
 51165    71   126     5    71  1254     0    2915  STARTMETHOD
 51166    71   130     5    71  1254     0      23  protected
 51167    71   130    15    71  1254     0      36  int
 51168    71   130    19    71  1254     0     111  ix
 51169    71   130    21    71  1254     0      59  (
 51170    71   130    22    71  1254     0      36  int
 51171    71   130    26    71  1254     0     111  i
 51172    71   130    27    71  1254     0      60  )
 51173    71   130    29    71  1254     0      63  {
 51174    71   131     9    71  1254     0      19  return
 51175    71   131    16    71  1254     0     111  i
 51176    71   131    18    71  1254     0      74  +
 51177    71   131    20    71  1254     0     111  offset
 51178    71   131    26    71  1254     0     102  ;
 51179    71   132     5    71  1254     0      64  }
 51180    71   132     5    71  1254     0    2916  ENDMETHOD
 51181    71   132     5    71  1255     0    2917  STARTMETHOD
 51182    71   134    18    71  1255     0     111  get
 51183    71   134    21    71  1255     0      59  (
 51184    71   134    22    71  1255     0      60  )
 51185    71   134    24    71  1255     0      63  {
 51186    71   135     9    71  1255     0      19  return
 51187    71   135    16    71  1255     0     111  hb
 51188    71   135    18    71  1255     0      61  [
 51189    71   135    19    71  1255     0     111  ix
 51190    71   135    21    71  1255     0      59  (
 51191    71   135    22    71  1255     0     111  nextGetIndex
 51192    71   135    34    71  1255     0      59  (
 51193    71   135    35    71  1255     0      60  )
 51194    71   135    36    71  1255     0      60  )
 51195    71   135    37    71  1255     0      62  ]
 51196    71   135    38    71  1255     0     102  ;
 51197    71   136     5    71  1255     0      64  }
 51198    71   136     5    71  1255     0    2918  ENDMETHOD
 51199    71   136     5    71  1256     0    2919  STARTMETHOD
 51200    71   138    18    71  1256     0     111  get
 51201    71   138    21    71  1256     0      59  (
 51202    71   138    22    71  1256     0      36  int
 51203    71   138    26    71  1256     0     111  i
 51204    71   138    27    71  1256     0      60  )
 51205    71   138    29    71  1256     0      63  {
 51206    71   139     9    71  1256     0      19  return
 51207    71   139    16    71  1256     0     111  hb
 51208    71   139    18    71  1256     0      61  [
 51209    71   139    19    71  1256     0     111  ix
 51210    71   139    21    71  1256     0      59  (
 51211    71   139    22    71  1256     0     111  checkIndex
 51212    71   139    32    71  1256     0      59  (
 51213    71   139    33    71  1256     0     111  i
 51214    71   139    34    71  1256     0      60  )
 51215    71   139    35    71  1256     0      60  )
 51216    71   139    36    71  1256     0      62  ]
 51217    71   139    37    71  1256     0     102  ;
 51218    71   140     5    71  1256     0      64  }
 51219    71   140     5    71  1256     0    2920  ENDMETHOD
 51220    71   140     5    71  1257     0    2921  STARTMETHOD
 51221    71   142    12    71  1257     0     111  ShortBuffer
 51222    71   142    24    71  1257     0     111  get
 51223    71   142    27    71  1257     0      59  (
 51224    71   142    33    71  1257     0      61  [
 51225    71   142    34    71  1257     0      62  ]
 51226    71   142    36    71  1257     0     111  dst
 51227    71   142    39    71  1257     0      66  ,
 51228    71   142    41    71  1257     0      36  int
 51229    71   142    45    71  1257     0     111  offset
 51230    71   142    51    71  1257     0      66  ,
 51231    71   142    53    71  1257     0      36  int
 51232    71   142    57    71  1257     0     111  length
 51233    71   142    63    71  1257     0      60  )
 51234    71   142    65    71  1257     0      63  {
 51235    71   143     9    71  1257     0     111  checkBounds
 51236    71   143    20    71  1257     0      59  (
 51237    71   143    21    71  1257     0     111  offset
 51238    71   143    27    71  1257     0      66  ,
 51239    71   143    29    71  1257     0     111  length
 51240    71   143    35    71  1257     0      66  ,
 51241    71   143    37    71  1257     0     111  dst.length
 51242    71   143    47    71  1257     0      60  )
 51243    71   143    48    71  1257     0     102  ;
 51244    71   144     9    71  1257     0      31  if
 51245    71   144    12    71  1257     0      59  (
 51246    71   144    13    71  1257     0     111  length
 51247    71   144    20    71  1257     0      89  >
 51248    71   144    22    71  1257     0     111  remaining
 51249    71   144    31    71  1257     0      59  (
 51250    71   144    32    71  1257     0      60  )
 51251    71   144    33    71  1257     0      60  )
 51252    71   145    13    71  1257     0      20  throw
 51253    71   145    23    71  1257     0     111  BufferUnderflowException
 51254    71   145    47    71  1257     0      59  (
 51255    71   145    48    71  1257     0      60  )
 51256    71   145    49    71  1257     0     102  ;
 51257    71   146     9    71  1257     0     111  System.arraycopy
 51258    71   146    25    71  1257     0      59  (
 51259    71   146    26    71  1257     0     111  hb
 51260    71   146    28    71  1257     0      66  ,
 51261    71   146    30    71  1257     0     111  ix
 51262    71   146    32    71  1257     0      59  (
 51263    71   146    33    71  1257     0     111  position
 51264    71   146    41    71  1257     0      59  (
 51265    71   146    42    71  1257     0      60  )
 51266    71   146    43    71  1257     0      60  )
 51267    71   146    44    71  1257     0      66  ,
 51268    71   146    46    71  1257     0     111  dst
 51269    71   146    49    71  1257     0      66  ,
 51270    71   146    51    71  1257     0     111  offset
 51271    71   146    57    71  1257     0      66  ,
 51272    71   146    59    71  1257     0     111  length
 51273    71   146    65    71  1257     0      60  )
 51274    71   146    66    71  1257     0     102  ;
 51275    71   147     9    71  1257     0     111  position
 51276    71   147    17    71  1257     0      59  (
 51277    71   147    18    71  1257     0     111  position
 51278    71   147    26    71  1257     0      59  (
 51279    71   147    27    71  1257     0      60  )
 51280    71   147    29    71  1257     0      74  +
 51281    71   147    31    71  1257     0     111  length
 51282    71   147    37    71  1257     0      60  )
 51283    71   147    38    71  1257     0     102  ;
 51284    71   148     9    71  1257     0      19  return
 51285    71   148    16    71  1257     0      44  this
 51286    71   148    20    71  1257     1     102  ;
 51287    71   149     5    71  1257     1      64  }
 51288    71   149     5    71  1257     0    2922  ENDMETHOD
 51289    71   149     5    71  1258     0    2923  STARTMETHOD
 51290    71   151    12    71  1258     0      39  boolean
 51291    71   151    20    71  1258     0     111  isDirect
 51292    71   151    28    71  1258     0      59  (
 51293    71   151    29    71  1258     0      60  )
 51294    71   151    31    71  1258     0      63  {
 51295    71   152     9    71  1258     0      19  return
 51296    71   152    16    71  1258     0      43  false
 51297    71   152    21    71  1258     1     102  ;
 51298    71   153     5    71  1258     1      64  }
 51299    71   153     5    71  1258     0    2924  ENDMETHOD
 51300    71   153     5    71  1259     0    2925  STARTMETHOD
 51301    71   157    12    71  1259     0      39  boolean
 51302    71   157    20    71  1259     0     111  isReadOnly
 51303    71   157    30    71  1259     0      59  (
 51304    71   157    31    71  1259     0      60  )
 51305    71   157    33    71  1259     0      63  {
 51306    71   158     9    71  1259     0      19  return
 51307    71   158    16    71  1259     0      43  false
 51308    71   158    21    71  1259     1     102  ;
 51309    71   159     5    71  1259     1      64  }
 51310    71   159     5    71  1259     0    2926  ENDMETHOD
 51311    71   159     5    71  1260     0    2927  STARTMETHOD
 51312    71   161    12    71  1260     0     111  ShortBuffer
 51313    71   161    24    71  1260     0     111  put
 51314    71   161    27    71  1260     0      59  (
 51315    71   161    34    71  1260     0     111  x
 51316    71   161    35    71  1260     0      60  )
 51317    71   161    37    71  1260     0      63  {
 51318    71   163     9    71  1260     0     111  hb
 51319    71   163    11    71  1260     0      61  [
 51320    71   163    12    71  1260     0     111  ix
 51321    71   163    14    71  1260     0      59  (
 51322    71   163    15    71  1260     0     111  nextPutIndex
 51323    71   163    27    71  1260     0      59  (
 51324    71   163    28    71  1260     0      60  )
 51325    71   163    29    71  1260     0      60  )
 51326    71   163    30    71  1260     0      62  ]
 51327    71   163    32    71  1260     0      67  =
 51328    71   163    34    71  1260     0     111  x
 51329    71   163    35    71  1260     0     102  ;
 51330    71   164     9    71  1260     0      19  return
 51331    71   164    16    71  1260     0      44  this
 51332    71   164    20    71  1260     0     102  ;
 51333    71   168     5    71  1260     0      64  }
 51334    71   168     5    71  1260     0    2928  ENDMETHOD
 51335    71   168     5    71  1261     0    2929  STARTMETHOD
 51336    71   170    12    71  1261     0     111  ShortBuffer
 51337    71   170    24    71  1261     0     111  put
 51338    71   170    27    71  1261     0      59  (
 51339    71   170    28    71  1261     0      36  int
 51340    71   170    32    71  1261     0     111  i
 51341    71   170    33    71  1261     0      66  ,
 51342    71   170    41    71  1261     0     111  x
 51343    71   170    42    71  1261     0      60  )
 51344    71   170    44    71  1261     0      63  {
 51345    71   172     9    71  1261     0     111  hb
 51346    71   172    11    71  1261     0      61  [
 51347    71   172    12    71  1261     0     111  ix
 51348    71   172    14    71  1261     0      59  (
 51349    71   172    15    71  1261     0     111  checkIndex
 51350    71   172    25    71  1261     0      59  (
 51351    71   172    26    71  1261     0     111  i
 51352    71   172    27    71  1261     0      60  )
 51353    71   172    28    71  1261     0      60  )
 51354    71   172    29    71  1261     0      62  ]
 51355    71   172    31    71  1261     0      67  =
 51356    71   172    33    71  1261     0     111  x
 51357    71   172    34    71  1261     0     102  ;
 51358    71   173     9    71  1261     0      19  return
 51359    71   173    16    71  1261     0      44  this
 51360    71   173    20    71  1261     0     102  ;
 51361    71   177     5    71  1261     0      64  }
 51362    71   177     5    71  1261     0    2930  ENDMETHOD
 51363    71   177     5    71  1262     0    2931  STARTMETHOD
 51364    71   179    12    71  1262     0     111  ShortBuffer
 51365    71   179    24    71  1262     0     111  put
 51366    71   179    27    71  1262     0      59  (
 51367    71   179    33    71  1262     0      61  [
 51368    71   179    34    71  1262     0      62  ]
 51369    71   179    36    71  1262     0     111  src
 51370    71   179    39    71  1262     0      66  ,
 51371    71   179    41    71  1262     0      36  int
 51372    71   179    45    71  1262     0     111  offset
 51373    71   179    51    71  1262     0      66  ,
 51374    71   179    53    71  1262     0      36  int
 51375    71   179    57    71  1262     0     111  length
 51376    71   179    63    71  1262     0      60  )
 51377    71   179    65    71  1262     0      63  {
 51378    71   181     9    71  1262     0     111  checkBounds
 51379    71   181    20    71  1262     0      59  (
 51380    71   181    21    71  1262     0     111  offset
 51381    71   181    27    71  1262     0      66  ,
 51382    71   181    29    71  1262     0     111  length
 51383    71   181    35    71  1262     0      66  ,
 51384    71   181    37    71  1262     0     111  src.length
 51385    71   181    47    71  1262     0      60  )
 51386    71   181    48    71  1262     0     102  ;
 51387    71   182     9    71  1262     0      31  if
 51388    71   182    12    71  1262     0      59  (
 51389    71   182    13    71  1262     0     111  length
 51390    71   182    20    71  1262     0      89  >
 51391    71   182    22    71  1262     0     111  remaining
 51392    71   182    31    71  1262     0      59  (
 51393    71   182    32    71  1262     0      60  )
 51394    71   182    33    71  1262     0      60  )
 51395    71   183    13    71  1262     0      20  throw
 51396    71   183    23    71  1262     0     111  BufferOverflowException
 51397    71   183    46    71  1262     0      59  (
 51398    71   183    47    71  1262     0      60  )
 51399    71   183    48    71  1262     0     102  ;
 51400    71   184     9    71  1262     0     111  System.arraycopy
 51401    71   184    25    71  1262     0      59  (
 51402    71   184    26    71  1262     0     111  src
 51403    71   184    29    71  1262     0      66  ,
 51404    71   184    31    71  1262     0     111  offset
 51405    71   184    37    71  1262     0      66  ,
 51406    71   184    39    71  1262     0     111  hb
 51407    71   184    41    71  1262     0      66  ,
 51408    71   184    43    71  1262     0     111  ix
 51409    71   184    45    71  1262     0      59  (
 51410    71   184    46    71  1262     0     111  position
 51411    71   184    54    71  1262     0      59  (
 51412    71   184    55    71  1262     0      60  )
 51413    71   184    56    71  1262     0      60  )
 51414    71   184    57    71  1262     0      66  ,
 51415    71   184    59    71  1262     0     111  length
 51416    71   184    65    71  1262     0      60  )
 51417    71   184    66    71  1262     0     102  ;
 51418    71   185     9    71  1262     0     111  position
 51419    71   185    17    71  1262     0      59  (
 51420    71   185    18    71  1262     0     111  position
 51421    71   185    26    71  1262     0      59  (
 51422    71   185    27    71  1262     0      60  )
 51423    71   185    29    71  1262     0      74  +
 51424    71   185    31    71  1262     0     111  length
 51425    71   185    37    71  1262     0      60  )
 51426    71   185    38    71  1262     0     102  ;
 51427    71   186     9    71  1262     0      19  return
 51428    71   186    16    71  1262     0      44  this
 51429    71   186    20    71  1262     0     102  ;
 51430    71   190     5    71  1262     0      64  }
 51431    71   190     5    71  1262     0    2932  ENDMETHOD
 51432    71   190     5    71  1263     0    2933  STARTMETHOD
 51433    71   192    12    71  1263     0     111  ShortBuffer
 51434    71   192    24    71  1263     0     111  put
 51435    71   192    27    71  1263     0      59  (
 51436    71   192    28    71  1263     0     111  ShortBuffer
 51437    71   192    40    71  1263     0     111  src
 51438    71   192    43    71  1263     0      60  )
 51439    71   192    45    71  1263     0      63  {
 51440    71   194     9    71  1263     0      31  if
 51441    71   194    12    71  1263     0      59  (
 51442    71   194    13    71  1263     0     111  src
 51443    71   194    28    71  1263     0     111  HeapShortBuffer
 51444    71   194    43    71  1263     0      60  )
 51445    71   194    45    71  1263     0      63  {
 51446    71   195    13    71  1263     0      31  if
 51447    71   195    16    71  1263     0      59  (
 51448    71   195    17    71  1263     0     111  src
 51449    71   195    21    71  1263     0      68  ==
 51450    71   195    24    71  1263     0      44  this
 51451    71   195    28    71  1263     0      60  )
 51452    71   196    17    71  1263     0      20  throw
 51453    71   196    27    71  1263     0     111  IllegalArgumentException
 51454    71   196    51    71  1263     0      59  (
 51455    71   196    52    71  1263     0      60  )
 51456    71   196    53    71  1263     0     102  ;
 51457    71   197    13    71  1263     0     111  HeapShortBuffer
 51458    71   197    29    71  1263     0     111  sb
 51459    71   197    32    71  1263     0      67  =
 51460    71   197    34    71  1263     0      59  (
 51461    71   197    35    71  1263     0     111  HeapShortBuffer
 51462    71   197    50    71  1263     0      60  )
 51463    71   197    51    71  1263     0     111  src
 51464    71   197    54    71  1263     0     102  ;
 51465    71   198    13    71  1263     0      36  int
 51466    71   198    17    71  1263     0     111  n
 51467    71   198    19    71  1263     0      67  =
 51468    71   198    21    71  1263     0     111  sb.remaining
 51469    71   198    33    71  1263     0      59  (
 51470    71   198    34    71  1263     0      60  )
 51471    71   198    35    71  1263     0     102  ;
 51472    71   199    13    71  1263     0      31  if
 51473    71   199    16    71  1263     0      59  (
 51474    71   199    17    71  1263     0     111  n
 51475    71   199    19    71  1263     0      89  >
 51476    71   199    21    71  1263     0     111  remaining
 51477    71   199    30    71  1263     0      59  (
 51478    71   199    31    71  1263     0      60  )
 51479    71   199    32    71  1263     0      60  )
 51480    71   200    17    71  1263     0      20  throw
 51481    71   200    27    71  1263     0     111  BufferOverflowException
 51482    71   200    50    71  1263     0      59  (
 51483    71   200    51    71  1263     0      60  )
 51484    71   200    52    71  1263     0     102  ;
 51485    71   201    13    71  1263     0     111  System.arraycopy
 51486    71   201    29    71  1263     0      59  (
 51487    71   201    30    71  1263     0     111  sb.hb
 51488    71   201    35    71  1263     0      66  ,
 51489    71   201    37    71  1263     0     111  sb.ix
 51490    71   201    42    71  1263     0      59  (
 51491    71   201    43    71  1263     0     111  sb.position
 51492    71   201    54    71  1263     0      59  (
 51493    71   201    55    71  1263     0      60  )
 51494    71   201    56    71  1263     0      60  )
 51495    71   201    57    71  1263     0      66  ,
 51496    71   202    30    71  1263     0     111  hb
 51497    71   202    32    71  1263     0      66  ,
 51498    71   202    34    71  1263     0     111  ix
 51499    71   202    36    71  1263     0      59  (
 51500    71   202    37    71  1263     0     111  position
 51501    71   202    45    71  1263     0      59  (
 51502    71   202    46    71  1263     0      60  )
 51503    71   202    47    71  1263     0      60  )
 51504    71   202    48    71  1263     0      66  ,
 51505    71   202    50    71  1263     0     111  n
 51506    71   202    51    71  1263     0      60  )
 51507    71   202    52    71  1263     0     102  ;
 51508    71   203    13    71  1263     1     111  sb.position
 51509    71   203    24    71  1263     1      59  (
 51510    71   203    25    71  1263     1     111  sb.position
 51511    71   203    36    71  1263     1      59  (
 51512    71   203    37    71  1263     1      60  )
 51513    71   203    39    71  1263     1      74  +
 51514    71   203    41    71  1263     1     111  n
 51515    71   203    42    71  1263     1      60  )
 51516    71   203    43    71  1263     1     102  ;
 51517    71   204    13    71  1263     1     111  position
 51518    71   204    21    71  1263     1      59  (
 51519    71   204    22    71  1263     1     111  position
 51520    71   204    30    71  1263     1      59  (
 51521    71   204    31    71  1263     1      60  )
 51522    71   204    33    71  1263     1      74  +
 51523    71   204    35    71  1263     1     111  n
 51524    71   204    36    71  1263     1      60  )
 51525    71   204    37    71  1263     1     102  ;
 51526    71   205     9    71  1263     0      64  }
 51527    71   205    11    71  1263     0      48  else
 51528    71   205    16    71  1263     0      31  if
 51529    71   205    19    71  1263     0      59  (
 51530    71   205    20    71  1263     0     111  src.isDirect
 51531    71   205    32    71  1263     0      59  (
 51532    71   205    33    71  1263     0      60  )
 51533    71   205    34    71  1263     0      60  )
 51534    71   205    36    71  1263     0      63  {
 51535    71   206    13    71  1263     0      36  int
 51536    71   206    17    71  1263     0     111  n
 51537    71   206    19    71  1263     0      67  =
 51538    71   206    21    71  1263     0     111  src.remaining
 51539    71   206    34    71  1263     0      59  (
 51540    71   206    35    71  1263     0      60  )
 51541    71   206    36    71  1263     0     102  ;
 51542    71   207    13    71  1263     0      31  if
 51543    71   207    16    71  1263     0      59  (
 51544    71   207    17    71  1263     0     111  n
 51545    71   207    19    71  1263     0      89  >
 51546    71   207    21    71  1263     0     111  remaining
 51547    71   207    30    71  1263     0      59  (
 51548    71   207    31    71  1263     0      60  )
 51549    71   207    32    71  1263     0      60  )
 51550    71   208    17    71  1263     0      20  throw
 51551    71   208    27    71  1263     0     111  BufferOverflowException
 51552    71   208    50    71  1263     0      59  (
 51553    71   208    51    71  1263     0      60  )
 51554    71   208    52    71  1263     0     102  ;
 51555    71   209    13    71  1263     0     111  src.get
 51556    71   209    20    71  1263     0      59  (
 51557    71   209    21    71  1263     0     111  hb
 51558    71   209    23    71  1263     0      66  ,
 51559    71   209    25    71  1263     0     111  ix
 51560    71   209    27    71  1263     0      59  (
 51561    71   209    28    71  1263     0     111  position
 51562    71   209    36    71  1263     0      59  (
 51563    71   209    37    71  1263     0      60  )
 51564    71   209    38    71  1263     0      60  )
 51565    71   209    39    71  1263     0      66  ,
 51566    71   209    41    71  1263     0     111  n
 51567    71   209    42    71  1263     0      60  )
 51568    71   209    43    71  1263     0     102  ;
 51569    71   210    13    71  1263     0     111  position
 51570    71   210    21    71  1263     0      59  (
 51571    71   210    22    71  1263     0     111  position
 51572    71   210    30    71  1263     0      59  (
 51573    71   210    31    71  1263     0      60  )
 51574    71   210    33    71  1263     0      74  +
 51575    71   210    35    71  1263     0     111  n
 51576    71   210    36    71  1263     0      60  )
 51577    71   210    37    71  1263     0     102  ;
 51578    71   211     9    71  1263     0      64  }
 51579    71   211    11    71  1263     0      48  else
 51580    71   211    16    71  1263     0      63  {
 51581    71   212    13    71  1263     0     111  super.put
 51582    71   212    22    71  1263     0      59  (
 51583    71   212    23    71  1263     0     111  src
 51584    71   212    26    71  1263     0      60  )
 51585    71   212    27    71  1263     0     102  ;
 51586    71   213     9    71  1263     0      64  }
 51587    71   214     9    71  1263     0      19  return
 51588    71   214    16    71  1263     0      44  this
 51589    71   214    20    71  1263     0     102  ;
 51590    71   218     5    71  1263     0      64  }
 51591    71   218     5    71  1263     0    2934  ENDMETHOD
 51592    71   218     5    71  1264     0    2935  STARTMETHOD
 51593    71   220    12    71  1264     0     111  ShortBuffer
 51594    71   220    24    71  1264     0     111  compact
 51595    71   220    31    71  1264     0      59  (
 51596    71   220    32    71  1264     0      60  )
 51597    71   220    34    71  1264     0      63  {
 51598    71   222     9    71  1264     0     111  System.arraycopy
 51599    71   222    25    71  1264     0      59  (
 51600    71   222    26    71  1264     0     111  hb
 51601    71   222    28    71  1264     0      66  ,
 51602    71   222    30    71  1264     0     111  ix
 51603    71   222    32    71  1264     0      59  (
 51604    71   222    33    71  1264     0     111  position
 51605    71   222    41    71  1264     0      59  (
 51606    71   222    42    71  1264     0      60  )
 51607    71   222    43    71  1264     0      60  )
 51608    71   222    44    71  1264     0      66  ,
 51609    71   222    46    71  1264     0     111  hb
 51610    71   222    48    71  1264     0      66  ,
 51611    71   222    50    71  1264     0     111  ix
 51612    71   222    52    71  1264     0      59  (
 51613    71   222    53    71  1264     0     112  0
 51614    71   222    54    71  1264     0      60  )
 51615    71   222    55    71  1264     0      66  ,
 51616    71   222    57    71  1264     0     111  remaining
 51617    71   222    66    71  1264     0      59  (
 51618    71   222    67    71  1264     0      60  )
 51619    71   222    68    71  1264     0      60  )
 51620    71   222    69    71  1264     0     102  ;
 51621    71   223     9    71  1264     1     111  position
 51622    71   223    17    71  1264     1      59  (
 51623    71   223    18    71  1264     1     111  remaining
 51624    71   223    27    71  1264     1      59  (
 51625    71   223    28    71  1264     1      60  )
 51626    71   223    29    71  1264     1      60  )
 51627    71   223    30    71  1264     1     102  ;
 51628    71   224     9    71  1264     1     111  limit
 51629    71   224    14    71  1264     1      59  (
 51630    71   224    15    71  1264     1     111  capacity
 51631    71   224    23    71  1264     1      59  (
 51632    71   224    24    71  1264     1      60  )
 51633    71   224    25    71  1264     1      60  )
 51634    71   224    26    71  1264     1     102  ;
 51635    71   225     9    71  1264     0     111  clearMark
 51636    71   225    18    71  1264     0      59  (
 51637    71   225    19    71  1264     0      60  )
 51638    71   225    20    71  1264     0     102  ;
 51639    71   226     9    71  1264     0      19  return
 51640    71   226    16    71  1264     0      44  this
 51641    71   226    20    71  1264     0     102  ;
 51642    71   230     5    71  1264     0      64  }
 51643    71   230     5    71  1264     0    2936  ENDMETHOD
 51644    71   230     5    71  1265     0    2937  STARTMETHOD
 51645    71   586    12    71  1265     0     111  ByteOrder
 51646    71   586    22    71  1265     0     111  order
 51647    71   586    27    71  1265     0      59  (
 51648    71   586    28    71  1265     0      60  )
 51649    71   586    30    71  1265     0      63  {
 51650    71   587     9    71  1265     0      19  return
 51651    71   587    16    71  1265     0     111  ByteOrder.nativeOrder
 51652    71   587    37    71  1265     0      59  (
 51653    71   587    38    71  1265     0      60  )
 51654    71   587    39    71  1265     0     102  ;
 51655    71   588     5    71  1265     0      64  }
 51656    71   588     5    71  1265     0    2938  ENDMETHOD
 51657    71   592     1    71    -1     0      64  }
 51658    71   592     1    71    -1     1    2939  ENDCLASS
 51659    71   592     1    -1    -1     1    2940  ENDFILE C:\Users\RA\javasrc\java\nio\HeapShortBuffer.java
 51660    72     1     1    -1    -1     1    2941  STARTFILE C:\Users\RA\javasrc\java\nio\HeapShortBufferR.java
 51661    72    28     9    -1    -1     0     111  java.nio
 51662    72    28    17    -1    -1     0     102  ;
 51663    72    42     1    72    -1     0    2942  STARTCLASS
 51664    72    42     1    72    -1     0      24  class
 51665    72    42     7    72    -1     0     111  HeapShortBufferR
 51666    72    43     5    72    -1     0      38  extends
 51667    72    43    13    72    -1     0     111  HeapShortBuffer
 51668    72    44     1    72    -1     0      63  {
 51669    72    44     1    72  1266     0    2943  STARTMETHOD
 51670    72    55     5    72  1266     0     111  HeapShortBufferR
 51671    72    55    21    72  1266     0      59  (
 51672    72    55    22    72  1266     0      36  int
 51673    72    55    26    72  1266     0     111  cap
 51674    72    55    29    72  1266     0      66  ,
 51675    72    55    31    72  1266     0      36  int
 51676    72    55    35    72  1266     0     111  lim
 51677    72    55    38    72  1266     0      60  )
 51678    72    55    40    72  1266     0      63  {
 51679    72    63     9    72  1266     0      27  super
 51680    72    63    14    72  1266     0      59  (
 51681    72    63    15    72  1266     0     111  cap
 51682    72    63    18    72  1266     0      66  ,
 51683    72    63    20    72  1266     0     111  lim
 51684    72    63    23    72  1266     0      60  )
 51685    72    63    24    72  1266     0     102  ;
 51686    72    64     9    72  1266     0     111  this.isReadOnly
 51687    72    64    25    72  1266     0      67  =
 51688    72    64    27    72  1266     0      52  true
 51689    72    64    31    72  1266     0     102  ;
 51690    72    66     5    72  1266     0      64  }
 51691    72    66     5    72  1266     0    2944  ENDMETHOD
 51692    72    66     5    72  1267     0    2945  STARTMETHOD
 51693    72    68     5    72  1267     0     111  HeapShortBufferR
 51694    72    68    21    72  1267     0      59  (
 51695    72    68    27    72  1267     0      61  [
 51696    72    68    28    72  1267     0      62  ]
 51697    72    68    30    72  1267     0     111  buf
 51698    72    68    33    72  1267     0      66  ,
 51699    72    68    35    72  1267     0      36  int
 51700    72    68    39    72  1267     0     111  off
 51701    72    68    42    72  1267     0      66  ,
 51702    72    68    44    72  1267     0      36  int
 51703    72    68    48    72  1267     0     111  len
 51704    72    68    51    72  1267     0      60  )
 51705    72    68    53    72  1267     0      63  {
 51706    72    76     9    72  1267     0      27  super
 51707    72    76    14    72  1267     0      59  (
 51708    72    76    15    72  1267     0     111  buf
 51709    72    76    18    72  1267     0      66  ,
 51710    72    76    20    72  1267     0     111  off
 51711    72    76    23    72  1267     0      66  ,
 51712    72    76    25    72  1267     0     111  len
 51713    72    76    28    72  1267     0      60  )
 51714    72    76    29    72  1267     0     102  ;
 51715    72    77     9    72  1267     0     111  this.isReadOnly
 51716    72    77    25    72  1267     0      67  =
 51717    72    77    27    72  1267     0      52  true
 51718    72    77    31    72  1267     0     102  ;
 51719    72    79     5    72  1267     0      64  }
 51720    72    79     5    72  1267     0    2946  ENDMETHOD
 51721    72    79     5    72  1268     0    2947  STARTMETHOD
 51722    72    81     5    72  1268     0      23  protected
 51723    72    81    15    72  1268     0     111  HeapShortBufferR
 51724    72    81    31    72  1268     0      59  (
 51725    72    81    37    72  1268     0      61  [
 51726    72    81    38    72  1268     0      62  ]
 51727    72    81    40    72  1268     0     111  buf
 51728    72    81    43    72  1268     0      66  ,
 51729    72    82    36    72  1268     0      36  int
 51730    72    82    40    72  1268     0     111  mark
 51731    72    82    44    72  1268     0      66  ,
 51732    72    82    46    72  1268     0      36  int
 51733    72    82    50    72  1268     0     111  pos
 51734    72    82    53    72  1268     0      66  ,
 51735    72    82    55    72  1268     0      36  int
 51736    72    82    59    72  1268     0     111  lim
 51737    72    82    62    72  1268     0      66  ,
 51738    72    82    64    72  1268     0      36  int
 51739    72    82    68    72  1268     0     111  cap
 51740    72    82    71    72  1268     0      66  ,
 51741    72    83    36    72  1268     0      36  int
 51742    72    83    40    72  1268     0     111  off
 51743    72    83    43    72  1268     0      60  )
 51744    72    84     5    72  1268     0      63  {
 51745    72    92     9    72  1268     0      27  super
 51746    72    92    14    72  1268     0      59  (
 51747    72    92    15    72  1268     0     111  buf
 51748    72    92    18    72  1268     0      66  ,
 51749    72    92    20    72  1268     0     111  mark
 51750    72    92    24    72  1268     0      66  ,
 51751    72    92    26    72  1268     0     111  pos
 51752    72    92    29    72  1268     0      66  ,
 51753    72    92    31    72  1268     0     111  lim
 51754    72    92    34    72  1268     0      66  ,
 51755    72    92    36    72  1268     0     111  cap
 51756    72    92    39    72  1268     0      66  ,
 51757    72    92    41    72  1268     0     111  off
 51758    72    92    44    72  1268     0      60  )
 51759    72    92    45    72  1268     0     102  ;
 51760    72    93     9    72  1268     0     111  this.isReadOnly
 51761    72    93    25    72  1268     0      67  =
 51762    72    93    27    72  1268     0      52  true
 51763    72    93    31    72  1268     0     102  ;
 51764    72    95     5    72  1268     0      64  }
 51765    72    95     5    72  1268     0    2948  ENDMETHOD
 51766    72    95     5    72  1269     0    2949  STARTMETHOD
 51767    72    97    12    72  1269     0     111  ShortBuffer
 51768    72    97    24    72  1269     0     111  slice
 51769    72    97    29    72  1269     0      59  (
 51770    72    97    30    72  1269     0      60  )
 51771    72    97    32    72  1269     0      63  {
 51772    72    98     9    72  1269     0      19  return
 51773    72    98    20    72  1269     0     111  HeapShortBufferR
 51774    72    98    36    72  1269     0      59  (
 51775    72    98    37    72  1269     0     111  hb
 51776    72    98    39    72  1269     0      66  ,
 51777    72    99    41    72  1269     0      77  -
 51778    72    99    42    72  1269     0     112  1
 51779    72    99    43    72  1269     0      66  ,
 51780    72   100    41    72  1269     0     112  0
 51781    72   100    42    72  1269     0      66  ,
 51782    72   101    41    72  1269     1     111  this.remaining
 51783    72   101    55    72  1269     1      59  (
 51784    72   101    56    72  1269     1      60  )
 51785    72   101    57    72  1269     1      66  ,
 51786    72   102    41    72  1269     1     111  this.remaining
 51787    72   102    55    72  1269     1      59  (
 51788    72   102    56    72  1269     1      60  )
 51789    72   102    57    72  1269     1      66  ,
 51790    72   103    41    72  1269     0     111  this.position
 51791    72   103    54    72  1269     0      59  (
 51792    72   103    55    72  1269     0      60  )
 51793    72   103    57    72  1269     0      74  +
 51794    72   103    59    72  1269     0     111  offset
 51795    72   103    65    72  1269     0      60  )
 51796    72   103    66    72  1269     0     102  ;
 51797    72   104     5    72  1269     0      64  }
 51798    72   104     5    72  1269     0    2950  ENDMETHOD
 51799    72   104     5    72  1270     0    2951  STARTMETHOD
 51800    72   106    12    72  1270     0     111  ShortBuffer
 51801    72   106    24    72  1270     0     111  duplicate
 51802    72   106    33    72  1270     0      59  (
 51803    72   106    34    72  1270     0      60  )
 51804    72   106    36    72  1270     0      63  {
 51805    72   107     9    72  1270     0      19  return
 51806    72   107    20    72  1270     0     111  HeapShortBufferR
 51807    72   107    36    72  1270     0      59  (
 51808    72   107    37    72  1270     0     111  hb
 51809    72   107    39    72  1270     0      66  ,
 51810    72   108    41    72  1270     1     111  this.markValue
 51811    72   108    55    72  1270     1      59  (
 51812    72   108    56    72  1270     1      60  )
 51813    72   108    57    72  1270     1      66  ,
 51814    72   109    41    72  1270     1     111  this.position
 51815    72   109    54    72  1270     1      59  (
 51816    72   109    55    72  1270     1      60  )
 51817    72   109    56    72  1270     1      66  ,
 51818    72   110    41    72  1270     1     111  this.limit
 51819    72   110    51    72  1270     1      59  (
 51820    72   110    52    72  1270     1      60  )
 51821    72   110    53    72  1270     1      66  ,
 51822    72   111    41    72  1270     1     111  this.capacity
 51823    72   111    54    72  1270     1      59  (
 51824    72   111    55    72  1270     1      60  )
 51825    72   111    56    72  1270     1      66  ,
 51826    72   112    41    72  1270     0     111  offset
 51827    72   112    47    72  1270     0      60  )
 51828    72   112    48    72  1270     0     102  ;
 51829    72   113     5    72  1270     0      64  }
 51830    72   113     5    72  1270     0    2952  ENDMETHOD
 51831    72   113     5    72  1271     0    2953  STARTMETHOD
 51832    72   115    12    72  1271     0     111  ShortBuffer
 51833    72   115    24    72  1271     0     111  asReadOnlyBuffer
 51834    72   115    40    72  1271     0      59  (
 51835    72   115    41    72  1271     0      60  )
 51836    72   115    43    72  1271     0      63  {
 51837    72   124     9    72  1271     0      19  return
 51838    72   124    16    72  1271     0     111  duplicate
 51839    72   124    25    72  1271     0      59  (
 51840    72   124    26    72  1271     0      60  )
 51841    72   124    27    72  1271     0     102  ;
 51842    72   126     5    72  1271     0      64  }
 51843    72   126     5    72  1271     0    2954  ENDMETHOD
 51844    72   126     5    72  1272     0    2955  STARTMETHOD
 51845    72   157    12    72  1272     0      39  boolean
 51846    72   157    20    72  1272     0     111  isReadOnly
 51847    72   157    30    72  1272     0      59  (
 51848    72   157    31    72  1272     0      60  )
 51849    72   157    33    72  1272     0      63  {
 51850    72   158     9    72  1272     0      19  return
 51851    72   158    16    72  1272     0      52  true
 51852    72   158    20    72  1272     0     102  ;
 51853    72   159     5    72  1272     0      64  }
 51854    72   159     5    72  1272     0    2956  ENDMETHOD
 51855    72   159     5    72  1273     0    2957  STARTMETHOD
 51856    72   161    12    72  1273     0     111  ShortBuffer
 51857    72   161    24    72  1273     0     111  put
 51858    72   161    27    72  1273     0      59  (
 51859    72   161    34    72  1273     0     111  x
 51860    72   161    35    72  1273     0      60  )
 51861    72   161    37    72  1273     0      63  {
 51862    72   166     9    72  1273     0      20  throw
 51863    72   166    19    72  1273     0     111  ReadOnlyBufferException
 51864    72   166    42    72  1273     0      59  (
 51865    72   166    43    72  1273     0      60  )
 51866    72   166    44    72  1273     0     102  ;
 51867    72   168     5    72  1273     0      64  }
 51868    72   168     5    72  1273     0    2958  ENDMETHOD
 51869    72   168     5    72  1274     0    2959  STARTMETHOD
 51870    72   170    12    72  1274     0     111  ShortBuffer
 51871    72   170    24    72  1274     0     111  put
 51872    72   170    27    72  1274     0      59  (
 51873    72   170    28    72  1274     0      36  int
 51874    72   170    32    72  1274     0     111  i
 51875    72   170    33    72  1274     0      66  ,
 51876    72   170    41    72  1274     0     111  x
 51877    72   170    42    72  1274     0      60  )
 51878    72   170    44    72  1274     0      63  {
 51879    72   175     9    72  1274     0      20  throw
 51880    72   175    19    72  1274     0     111  ReadOnlyBufferException
 51881    72   175    42    72  1274     0      59  (
 51882    72   175    43    72  1274     0      60  )
 51883    72   175    44    72  1274     0     102  ;
 51884    72   177     5    72  1274     0      64  }
 51885    72   177     5    72  1274     0    2960  ENDMETHOD
 51886    72   177     5    72  1275     0    2961  STARTMETHOD
 51887    72   179    12    72  1275     0     111  ShortBuffer
 51888    72   179    24    72  1275     0     111  put
 51889    72   179    27    72  1275     0      59  (
 51890    72   179    33    72  1275     0      61  [
 51891    72   179    34    72  1275     0      62  ]
 51892    72   179    36    72  1275     0     111  src
 51893    72   179    39    72  1275     0      66  ,
 51894    72   179    41    72  1275     0      36  int
 51895    72   179    45    72  1275     0     111  offset
 51896    72   179    51    72  1275     0      66  ,
 51897    72   179    53    72  1275     0      36  int
 51898    72   179    57    72  1275     0     111  length
 51899    72   179    63    72  1275     0      60  )
 51900    72   179    65    72  1275     0      63  {
 51901    72   188     9    72  1275     0      20  throw
 51902    72   188    19    72  1275     0     111  ReadOnlyBufferException
 51903    72   188    42    72  1275     0      59  (
 51904    72   188    43    72  1275     0      60  )
 51905    72   188    44    72  1275     0     102  ;
 51906    72   190     5    72  1275     0      64  }
 51907    72   190     5    72  1275     0    2962  ENDMETHOD
 51908    72   190     5    72  1276     0    2963  STARTMETHOD
 51909    72   192    12    72  1276     0     111  ShortBuffer
 51910    72   192    24    72  1276     0     111  put
 51911    72   192    27    72  1276     0      59  (
 51912    72   192    28    72  1276     0     111  ShortBuffer
 51913    72   192    40    72  1276     0     111  src
 51914    72   192    43    72  1276     0      60  )
 51915    72   192    45    72  1276     0      63  {
 51916    72   216     9    72  1276     0      20  throw
 51917    72   216    19    72  1276     1     111  ReadOnlyBufferException
 51918    72   216    42    72  1276     1      59  (
 51919    72   216    43    72  1276     1      60  )
 51920    72   216    44    72  1276     1     102  ;
 51921    72   218     5    72  1276     1      64  }
 51922    72   218     5    72  1276     0    2964  ENDMETHOD
 51923    72   218     5    72  1277     0    2965  STARTMETHOD
 51924    72   220    12    72  1277     0     111  ShortBuffer
 51925    72   220    24    72  1277     0     111  compact
 51926    72   220    31    72  1277     0      59  (
 51927    72   220    32    72  1277     0      60  )
 51928    72   220    34    72  1277     0      63  {
 51929    72   228     9    72  1277     0      20  throw
 51930    72   228    19    72  1277     1     111  ReadOnlyBufferException
 51931    72   228    42    72  1277     1      59  (
 51932    72   228    43    72  1277     1      60  )
 51933    72   228    44    72  1277     1     102  ;
 51934    72   230     5    72  1277     1      64  }
 51935    72   230     5    72  1277     0    2966  ENDMETHOD
 51936    72   230     5    72  1278     0    2967  STARTMETHOD
 51937    72   586    12    72  1278     0     111  ByteOrder
 51938    72   586    22    72  1278     0     111  order
 51939    72   586    27    72  1278     0      59  (
 51940    72   586    28    72  1278     0      60  )
 51941    72   586    30    72  1278     0      63  {
 51942    72   587     9    72  1278     0      19  return
 51943    72   587    16    72  1278     1     111  ByteOrder.nativeOrder
 51944    72   587    37    72  1278     1      59  (
 51945    72   587    38    72  1278     1      60  )
 51946    72   587    39    72  1278     1     102  ;
 51947    72   588     5    72  1278     1      64  }
 51948    72   588     5    72  1278     0    2968  ENDMETHOD
 51949    72   592     1    72    -1     0      64  }
 51950    72   592     1    72    -1     1    2969  ENDCLASS
 51951    72   592     1    -1    -1     1    2970  ENDFILE C:\Users\RA\javasrc\java\nio\HeapShortBufferR.java
 51952    73     1     1    -1    -1     1    2971  STARTFILE C:\Users\RA\javasrc\java\nio\IntBuffer.java
 51953    73    28     9    -1    -1     0     111  java.nio
 51954    73    28    17    -1    -1     0     102  ;
 51955    73   257    17    73    -1     0    2972  STARTCLASS
 51956    73   257    17    73    -1     0      24  class
 51957    73   257    23    73    -1     0     111  IntBuffer
 51958    73   258     5    73    -1     0      38  extends
 51959    73   258    13    73    -1     0     111  Buffer
 51960    73   259     5    73    -1     0      17  implements
 51961    73   259    16    73    -1     0     111  Comparable
 51962    73   259    26    73    -1     0      93  <
 51963    73   259    27    73    -1     0     111  IntBuffer
 51964    73   259    36    73    -1     0      89  >
 51965    73   260     1    73    -1     0      63  {
 51966    73   266    11    73    -1     0      36  int
 51967    73   266    14    73    -1     0      61  [
 51968    73   266    15    73    -1     0      62  ]
 51969    73   266    17    73    -1     0     111  hb
 51970    73   266    19    73    -1     0     102  ;
 51971    73   267    11    73    -1     0      36  int
 51972    73   267    15    73    -1     0     111  offset
 51973    73   267    21    73    -1     0     102  ;
 51974    73   268     5    73    -1     0      39  boolean
 51975    73   268    13    73    -1     0     111  isReadOnly
 51976    73   268    23    73    -1     0     102  ;
 51977    73   268    23    73  1279     0    2973  STARTMETHOD
 51978    73   273     5    73  1279     0     111  IntBuffer
 51979    73   273    14    73  1279     0      59  (
 51980    73   273    15    73  1279     0      36  int
 51981    73   273    19    73  1279     0     111  mark
 51982    73   273    23    73  1279     0      66  ,
 51983    73   273    25    73  1279     0      36  int
 51984    73   273    29    73  1279     0     111  pos
 51985    73   273    32    73  1279     0      66  ,
 51986    73   273    34    73  1279     0      36  int
 51987    73   273    38    73  1279     0     111  lim
 51988    73   273    41    73  1279     0      66  ,
 51989    73   273    43    73  1279     0      36  int
 51990    73   273    47    73  1279     0     111  cap
 51991    73   273    50    73  1279     0      66  ,
 51992    73   274    18    73  1279     0      36  int
 51993    73   274    21    73  1279     0      61  [
 51994    73   274    22    73  1279     0      62  ]
 51995    73   274    24    73  1279     0     111  hb
 51996    73   274    26    73  1279     0      66  ,
 51997    73   274    28    73  1279     0      36  int
 51998    73   274    32    73  1279     0     111  offset
 51999    73   274    38    73  1279     0      60  )
 52000    73   275     5    73  1279     0      63  {
 52001    73   276     9    73  1279     0      27  super
 52002    73   276    14    73  1279     0      59  (
 52003    73   276    15    73  1279     0     111  mark
 52004    73   276    19    73  1279     0      66  ,
 52005    73   276    21    73  1279     0     111  pos
 52006    73   276    24    73  1279     0      66  ,
 52007    73   276    26    73  1279     0     111  lim
 52008    73   276    29    73  1279     0      66  ,
 52009    73   276    31    73  1279     0     111  cap
 52010    73   276    34    73  1279     0      60  )
 52011    73   276    35    73  1279     0     102  ;
 52012    73   277     9    73  1279     1     111  this.hb
 52013    73   277    17    73  1279     1      67  =
 52014    73   277    19    73  1279     1     111  hb
 52015    73   277    21    73  1279     1     102  ;
 52016    73   278     9    73  1279     1     111  this.offset
 52017    73   278    21    73  1279     1      67  =
 52018    73   278    23    73  1279     1     111  offset
 52019    73   278    29    73  1279     1     102  ;
 52020    73   279     5    73  1279     0      64  }
 52021    73   279     5    73  1279     0    2974  ENDMETHOD
 52022    73   279     5    73  1280     0    2975  STARTMETHOD
 52023    73   283     5    73  1280     0     111  IntBuffer
 52024    73   283    14    73  1280     0      59  (
 52025    73   283    15    73  1280     0      36  int
 52026    73   283    19    73  1280     0     111  mark
 52027    73   283    23    73  1280     0      66  ,
 52028    73   283    25    73  1280     0      36  int
 52029    73   283    29    73  1280     0     111  pos
 52030    73   283    32    73  1280     0      66  ,
 52031    73   283    34    73  1280     0      36  int
 52032    73   283    38    73  1280     0     111  lim
 52033    73   283    41    73  1280     0      66  ,
 52034    73   283    43    73  1280     0      36  int
 52035    73   283    47    73  1280     0     111  cap
 52036    73   283    50    73  1280     0      60  )
 52037    73   283    52    73  1280     0      63  {
 52038    73   284     9    73  1280     0      44  this
 52039    73   284    13    73  1280     0      59  (
 52040    73   284    14    73  1280     0     111  mark
 52041    73   284    18    73  1280     0      66  ,
 52042    73   284    20    73  1280     0     111  pos
 52043    73   284    23    73  1280     0      66  ,
 52044    73   284    25    73  1280     0     111  lim
 52045    73   284    28    73  1280     0      66  ,
 52046    73   284    30    73  1280     0     111  cap
 52047    73   284    33    73  1280     0      66  ,
 52048    73   284    35    73  1280     0      21  null
 52049    73   284    39    73  1280     0      66  ,
 52050    73   284    41    73  1280     0     112  0
 52051    73   284    42    73  1280     0      60  )
 52052    73   284    43    73  1280     0     102  ;
 52053    73   285     5    73  1280     0      64  }
 52054    73   285     5    73  1280     0    2976  ENDMETHOD
 52055    73   285     5    73  1281     0    2977  STARTMETHOD
 52056    73   326    12    73  1281     0      45  static
 52057    73   326    19    73  1281     0     111  IntBuffer
 52058    73   326    29    73  1281     0     111  allocate
 52059    73   326    37    73  1281     0      59  (
 52060    73   326    38    73  1281     0      36  int
 52061    73   326    42    73  1281     0     111  capacity
 52062    73   326    50    73  1281     0      60  )
 52063    73   326    52    73  1281     0      63  {
 52064    73   327     9    73  1281     0      31  if
 52065    73   327    12    73  1281     0      59  (
 52066    73   327    13    73  1281     0     111  capacity
 52067    73   327    22    73  1281     0      93  <
 52068    73   327    24    73  1281     0     112  0
 52069    73   327    25    73  1281     0      60  )
 52070    73   328    13    73  1281     0      20  throw
 52071    73   328    23    73  1281     0     111  IllegalArgumentException
 52072    73   328    47    73  1281     0      59  (
 52073    73   328    48    73  1281     0      60  )
 52074    73   328    49    73  1281     0     102  ;
 52075    73   329     9    73  1281     0      19  return
 52076    73   329    20    73  1281     0     111  HeapIntBuffer
 52077    73   329    33    73  1281     0      59  (
 52078    73   329    34    73  1281     0     111  capacity
 52079    73   329    42    73  1281     0      66  ,
 52080    73   329    44    73  1281     0     111  capacity
 52081    73   329    52    73  1281     0      60  )
 52082    73   329    53    73  1281     0     102  ;
 52083    73   330     5    73  1281     0      64  }
 52084    73   330     5    73  1281     0    2978  ENDMETHOD
 52085    73   330     5    73  1282     0    2979  STARTMETHOD
 52086    73   363    12    73  1282     0      45  static
 52087    73   363    19    73  1282     0     111  IntBuffer
 52088    73   363    29    73  1282     0     111  wrap
 52089    73   363    33    73  1282     0      59  (
 52090    73   363    34    73  1282     0      36  int
 52091    73   363    37    73  1282     0      61  [
 52092    73   363    38    73  1282     0      62  ]
 52093    73   363    40    73  1282     0     111  array
 52094    73   363    45    73  1282     0      66  ,
 52095    73   364    37    73  1282     0      36  int
 52096    73   364    41    73  1282     0     111  offset
 52097    73   364    47    73  1282     0      66  ,
 52098    73   364    49    73  1282     0      36  int
 52099    73   364    53    73  1282     0     111  length
 52100    73   364    59    73  1282     0      60  )
 52101    73   365     5    73  1282     0      63  {
 52102    73   366     9    73  1282     0      35  try
 52103    73   366    13    73  1282     0      63  {
 52104    73   367    13    73  1282     0      19  return
 52105    73   367    24    73  1282     0     111  HeapIntBuffer
 52106    73   367    37    73  1282     0      59  (
 52107    73   367    38    73  1282     0     111  array
 52108    73   367    43    73  1282     0      66  ,
 52109    73   367    45    73  1282     0     111  offset
 52110    73   367    51    73  1282     0      66  ,
 52111    73   367    53    73  1282     0     111  length
 52112    73   367    59    73  1282     0      60  )
 52113    73   367    60    73  1282     0     102  ;
 52114    73   368     9    73  1282     0      64  }
 52115    73   368    11    73  1282     0      34  catch
 52116    73   368    17    73  1282     0      59  (
 52117    73   368    18    73  1282     0     111  IllegalArgumentException
 52118    73   368    43    73  1282     0     111  x
 52119    73   368    44    73  1282     0      60  )
 52120    73   368    46    73  1282     0      63  {
 52121    73   369    13    73  1282     0      20  throw
 52122    73   369    23    73  1282     0     111  IndexOutOfBoundsException
 52123    73   369    48    73  1282     0      59  (
 52124    73   369    49    73  1282     0      60  )
 52125    73   369    50    73  1282     0     102  ;
 52126    73   370     9    73  1282     0      64  }
 52127    73   371     5    73  1282     0      64  }
 52128    73   371     5    73  1282     0    2980  ENDMETHOD
 52129    73   371     5    73  1283     0    2981  STARTMETHOD
 52130    73   389    12    73  1283     0      45  static
 52131    73   389    19    73  1283     0     111  IntBuffer
 52132    73   389    29    73  1283     0     111  wrap
 52133    73   389    33    73  1283     0      59  (
 52134    73   389    34    73  1283     0      36  int
 52135    73   389    37    73  1283     0      61  [
 52136    73   389    38    73  1283     0      62  ]
 52137    73   389    40    73  1283     0     111  array
 52138    73   389    45    73  1283     0      60  )
 52139    73   389    47    73  1283     0      63  {
 52140    73   390     9    73  1283     0      19  return
 52141    73   390    16    73  1283     0     111  wrap
 52142    73   390    20    73  1283     0      59  (
 52143    73   390    21    73  1283     0     111  array
 52144    73   390    26    73  1283     0      66  ,
 52145    73   390    28    73  1283     0     112  0
 52146    73   390    29    73  1283     0      66  ,
 52147    73   390    31    73  1283     0     111  array.length
 52148    73   390    43    73  1283     0      60  )
 52149    73   390    44    73  1283     0     102  ;
 52150    73   391     5    73  1283     0      64  }
 52151    73   391     5    73  1283     0    2982  ENDMETHOD
 52152    73   503    21    73    -1     1     111  IntBuffer
 52153    73   503    31    73    -1     1     111  slice
 52154    73   503    36    73    -1     1      59  (
 52155    73   503    37    73    -1     1      60  )
 52156    73   503    38    73    -1     1     102  ;
 52157    73   520    21    73    -1     1     111  IntBuffer
 52158    73   520    31    73    -1     1     111  duplicate
 52159    73   520    40    73    -1     1      59  (
 52160    73   520    41    73    -1     1      60  )
 52161    73   520    42    73    -1     1     102  ;
 52162    73   540    21    73    -1     1     111  IntBuffer
 52163    73   540    31    73    -1     1     111  asReadOnlyBuffer
 52164    73   540    47    73    -1     1      59  (
 52165    73   540    48    73    -1     1      60  )
 52166    73   540    49    73    -1     1     102  ;
 52167    73   554    21    73    -1     0      36  int
 52168    73   554    25    73    -1     0     111  get
 52169    73   554    28    73    -1     0      59  (
 52170    73   554    29    73    -1     0      60  )
 52171    73   554    30    73    -1     0     102  ;
 52172    73   573    21    73    -1     0     111  IntBuffer
 52173    73   573    31    73    -1     0     111  put
 52174    73   573    34    73    -1     0      59  (
 52175    73   573    35    73    -1     0      36  int
 52176    73   573    39    73    -1     0     111  i
 52177    73   573    40    73    -1     0      60  )
 52178    73   573    41    73    -1     0     102  ;
 52179    73   588    21    73    -1     0      36  int
 52180    73   588    25    73    -1     0     111  get
 52181    73   588    28    73    -1     0      59  (
 52182    73   588    29    73    -1     0      36  int
 52183    73   588    33    73    -1     0     111  index
 52184    73   588    38    73    -1     0      60  )
 52185    73   588    39    73    -1     0     102  ;
 52186    73   611    21    73    -1     0     111  IntBuffer
 52187    73   611    31    73    -1     0     111  put
 52188    73   611    34    73    -1     0      59  (
 52189    73   611    35    73    -1     0      36  int
 52190    73   611    39    73    -1     0     111  index
 52191    73   611    44    73    -1     0      66  ,
 52192    73   611    46    73    -1     0      36  int
 52193    73   611    50    73    -1     0     111  i
 52194    73   611    51    73    -1     0      60  )
 52195    73   611    52    73    -1     0     102  ;
 52196    73   611    52    73  1284     0    2983  STARTMETHOD
 52197    73   665    12    73  1284     0     111  IntBuffer
 52198    73   665    22    73  1284     0     111  get
 52199    73   665    25    73  1284     0      59  (
 52200    73   665    26    73  1284     0      36  int
 52201    73   665    29    73  1284     0      61  [
 52202    73   665    30    73  1284     0      62  ]
 52203    73   665    32    73  1284     0     111  dst
 52204    73   665    35    73  1284     0      66  ,
 52205    73   665    37    73  1284     0      36  int
 52206    73   665    41    73  1284     0     111  offset
 52207    73   665    47    73  1284     0      66  ,
 52208    73   665    49    73  1284     0      36  int
 52209    73   665    53    73  1284     0     111  length
 52210    73   665    59    73  1284     0      60  )
 52211    73   665    61    73  1284     0      63  {
 52212    73   666     9    73  1284     0     111  checkBounds
 52213    73   666    20    73  1284     0      59  (
 52214    73   666    21    73  1284     0     111  offset
 52215    73   666    27    73  1284     0      66  ,
 52216    73   666    29    73  1284     0     111  length
 52217    73   666    35    73  1284     0      66  ,
 52218    73   666    37    73  1284     0     111  dst.length
 52219    73   666    47    73  1284     0      60  )
 52220    73   666    48    73  1284     0     102  ;
 52221    73   667     9    73  1284     0      31  if
 52222    73   667    12    73  1284     0      59  (
 52223    73   667    13    73  1284     0     111  length
 52224    73   667    20    73  1284     0      89  >
 52225    73   667    22    73  1284     0     111  remaining
 52226    73   667    31    73  1284     0      59  (
 52227    73   667    32    73  1284     0      60  )
 52228    73   667    33    73  1284     0      60  )
 52229    73   668    13    73  1284     0      20  throw
 52230    73   668    23    73  1284     0     111  BufferUnderflowException
 52231    73   668    47    73  1284     0      59  (
 52232    73   668    48    73  1284     0      60  )
 52233    73   668    49    73  1284     0     102  ;
 52234    73   669     9    73  1284     0      36  int
 52235    73   669    13    73  1284     0     111  end
 52236    73   669    17    73  1284     0      67  =
 52237    73   669    19    73  1284     0     111  offset
 52238    73   669    26    73  1284     0      74  +
 52239    73   669    28    73  1284     0     111  length
 52240    73   669    34    73  1284     0     102  ;
 52241    73   670     9    73  1284     0      37  for
 52242    73   670    13    73  1284     0      59  (
 52243    73   670    14    73  1284     0      36  int
 52244    73   670    18    73  1284     0     111  i
 52245    73   670    20    73  1284     0      67  =
 52246    73   670    22    73  1284     0     111  offset
 52247    73   670    28    73  1284     0     102  ;
 52248    73   670    30    73  1284     0     111  i
 52249    73   670    32    73  1284     0      93  <
 52250    73   670    34    73  1284     0     111  end
 52251    73   670    37    73  1284     0     102  ;
 52252    73   670    39    73  1284     0     111  i
 52253    73   670    40    73  1284     0      76  ++
 52254    73   670    42    73  1284     0      60  )
 52255    73   671    13    73  1284     0     111  dst
 52256    73   671    16    73  1284     0      61  [
 52257    73   671    17    73  1284     0     111  i
 52258    73   671    18    73  1284     0      62  ]
 52259    73   671    20    73  1284     0      67  =
 52260    73   671    22    73  1284     0     111  get
 52261    73   671    25    73  1284     0      59  (
 52262    73   671    26    73  1284     0      60  )
 52263    73   671    27    73  1284     0     102  ;
 52264    73   672     9    73  1284     0      19  return
 52265    73   672    16    73  1284     0      44  this
 52266    73   672    20    73  1284     0     102  ;
 52267    73   673     5    73  1284     0      64  }
 52268    73   673     5    73  1284     0    2984  ENDMETHOD
 52269    73   673     5    73  1285     0    2985  STARTMETHOD
 52270    73   691    12    73  1285     0     111  IntBuffer
 52271    73   691    22    73  1285     0     111  get
 52272    73   691    25    73  1285     0      59  (
 52273    73   691    26    73  1285     0      36  int
 52274    73   691    29    73  1285     0      61  [
 52275    73   691    30    73  1285     0      62  ]
 52276    73   691    32    73  1285     0     111  dst
 52277    73   691    35    73  1285     0      60  )
 52278    73   691    37    73  1285     0      63  {
 52279    73   692     9    73  1285     0      19  return
 52280    73   692    16    73  1285     0     111  get
 52281    73   692    19    73  1285     0      59  (
 52282    73   692    20    73  1285     0     111  dst
 52283    73   692    23    73  1285     0      66  ,
 52284    73   692    25    73  1285     0     112  0
 52285    73   692    26    73  1285     0      66  ,
 52286    73   692    28    73  1285     0     111  dst.length
 52287    73   692    38    73  1285     0      60  )
 52288    73   692    39    73  1285     0     102  ;
 52289    73   693     5    73  1285     0      64  }
 52290    73   693     5    73  1285     0    2986  ENDMETHOD
 52291    73   693     5    73  1286     0    2987  STARTMETHOD
 52292    73   739    12    73  1286     0     111  IntBuffer
 52293    73   739    22    73  1286     0     111  put
 52294    73   739    25    73  1286     0      59  (
 52295    73   739    26    73  1286     0     111  IntBuffer
 52296    73   739    36    73  1286     0     111  src
 52297    73   739    39    73  1286     0      60  )
 52298    73   739    41    73  1286     0      63  {
 52299    73   740     9    73  1286     0      31  if
 52300    73   740    12    73  1286     0      59  (
 52301    73   740    13    73  1286     0     111  src
 52302    73   740    17    73  1286     0      68  ==
 52303    73   740    20    73  1286     0      44  this
 52304    73   740    24    73  1286     0      60  )
 52305    73   741    13    73  1286     0      20  throw
 52306    73   741    23    73  1286     0     111  IllegalArgumentException
 52307    73   741    47    73  1286     0      59  (
 52308    73   741    48    73  1286     0      60  )
 52309    73   741    49    73  1286     0     102  ;
 52310    73   742     9    73  1286     0      36  int
 52311    73   742    13    73  1286     0     111  n
 52312    73   742    15    73  1286     0      67  =
 52313    73   742    17    73  1286     0     111  src.remaining
 52314    73   742    30    73  1286     0      59  (
 52315    73   742    31    73  1286     0      60  )
 52316    73   742    32    73  1286     0     102  ;
 52317    73   743     9    73  1286     0      31  if
 52318    73   743    12    73  1286     0      59  (
 52319    73   743    13    73  1286     0     111  n
 52320    73   743    15    73  1286     0      89  >
 52321    73   743    17    73  1286     0     111  remaining
 52322    73   743    26    73  1286     0      59  (
 52323    73   743    27    73  1286     0      60  )
 52324    73   743    28    73  1286     0      60  )
 52325    73   744    13    73  1286     0      20  throw
 52326    73   744    23    73  1286     0     111  BufferOverflowException
 52327    73   744    46    73  1286     0      59  (
 52328    73   744    47    73  1286     0      60  )
 52329    73   744    48    73  1286     0     102  ;
 52330    73   745     9    73  1286     0      37  for
 52331    73   745    13    73  1286     0      59  (
 52332    73   745    14    73  1286     0      36  int
 52333    73   745    18    73  1286     0     111  i
 52334    73   745    20    73  1286     0      67  =
 52335    73   745    22    73  1286     0     112  0
 52336    73   745    23    73  1286     0     102  ;
 52337    73   745    25    73  1286     0     111  i
 52338    73   745    27    73  1286     0      93  <
 52339    73   745    29    73  1286     0     111  n
 52340    73   745    30    73  1286     0     102  ;
 52341    73   745    32    73  1286     0     111  i
 52342    73   745    33    73  1286     0      76  ++
 52343    73   745    35    73  1286     0      60  )
 52344    73   746    13    73  1286     0     111  put
 52345    73   746    16    73  1286     0      59  (
 52346    73   746    17    73  1286     0     111  src.get
 52347    73   746    24    73  1286     0      59  (
 52348    73   746    25    73  1286     0      60  )
 52349    73   746    26    73  1286     0      60  )
 52350    73   746    27    73  1286     0     102  ;
 52351    73   747     9    73  1286     0      19  return
 52352    73   747    16    73  1286     0      44  this
 52353    73   747    20    73  1286     0     102  ;
 52354    73   748     5    73  1286     0      64  }
 52355    73   748     5    73  1286     0    2988  ENDMETHOD
 52356    73   748     5    73  1287     0    2989  STARTMETHOD
 52357    73   800    12    73  1287     0     111  IntBuffer
 52358    73   800    22    73  1287     0     111  put
 52359    73   800    25    73  1287     0      59  (
 52360    73   800    26    73  1287     0      36  int
 52361    73   800    29    73  1287     0      61  [
 52362    73   800    30    73  1287     0      62  ]
 52363    73   800    32    73  1287     0     111  src
 52364    73   800    35    73  1287     0      66  ,
 52365    73   800    37    73  1287     0      36  int
 52366    73   800    41    73  1287     0     111  offset
 52367    73   800    47    73  1287     0      66  ,
 52368    73   800    49    73  1287     0      36  int
 52369    73   800    53    73  1287     0     111  length
 52370    73   800    59    73  1287     0      60  )
 52371    73   800    61    73  1287     0      63  {
 52372    73   801     9    73  1287     0     111  checkBounds
 52373    73   801    20    73  1287     0      59  (
 52374    73   801    21    73  1287     0     111  offset
 52375    73   801    27    73  1287     0      66  ,
 52376    73   801    29    73  1287     0     111  length
 52377    73   801    35    73  1287     0      66  ,
 52378    73   801    37    73  1287     0     111  src.length
 52379    73   801    47    73  1287     0      60  )
 52380    73   801    48    73  1287     0     102  ;
 52381    73   802     9    73  1287     0      31  if
 52382    73   802    12    73  1287     0      59  (
 52383    73   802    13    73  1287     0     111  length
 52384    73   802    20    73  1287     0      89  >
 52385    73   802    22    73  1287     0     111  remaining
 52386    73   802    31    73  1287     0      59  (
 52387    73   802    32    73  1287     0      60  )
 52388    73   802    33    73  1287     0      60  )
 52389    73   803    13    73  1287     0      20  throw
 52390    73   803    23    73  1287     0     111  BufferOverflowException
 52391    73   803    46    73  1287     0      59  (
 52392    73   803    47    73  1287     0      60  )
 52393    73   803    48    73  1287     0     102  ;
 52394    73   804     9    73  1287     0      36  int
 52395    73   804    13    73  1287     0     111  end
 52396    73   804    17    73  1287     0      67  =
 52397    73   804    19    73  1287     0     111  offset
 52398    73   804    26    73  1287     0      74  +
 52399    73   804    28    73  1287     0     111  length
 52400    73   804    34    73  1287     0     102  ;
 52401    73   805     9    73  1287     0      37  for
 52402    73   805    13    73  1287     0      59  (
 52403    73   805    14    73  1287     0      36  int
 52404    73   805    18    73  1287     0     111  i
 52405    73   805    20    73  1287     0      67  =
 52406    73   805    22    73  1287     0     111  offset
 52407    73   805    28    73  1287     0     102  ;
 52408    73   805    30    73  1287     0     111  i
 52409    73   805    32    73  1287     0      93  <
 52410    73   805    34    73  1287     0     111  end
 52411    73   805    37    73  1287     0     102  ;
 52412    73   805    39    73  1287     0     111  i
 52413    73   805    40    73  1287     0      76  ++
 52414    73   805    42    73  1287     0      60  )
 52415    73   806    13    73  1287     0     111  this.put
 52416    73   806    21    73  1287     0      59  (
 52417    73   806    22    73  1287     0     111  src
 52418    73   806    25    73  1287     0      61  [
 52419    73   806    26    73  1287     0     111  i
 52420    73   806    27    73  1287     0      62  ]
 52421    73   806    28    73  1287     0      60  )
 52422    73   806    29    73  1287     0     102  ;
 52423    73   807     9    73  1287     0      19  return
 52424    73   807    16    73  1287     0      44  this
 52425    73   807    20    73  1287     0     102  ;
 52426    73   808     5    73  1287     0      64  }
 52427    73   808     5    73  1287     0    2990  ENDMETHOD
 52428    73   808     5    73  1288     0    2991  STARTMETHOD
 52429    73   829    18    73  1288     0     111  IntBuffer
 52430    73   829    28    73  1288     0     111  put
 52431    73   829    31    73  1288     0      59  (
 52432    73   829    32    73  1288     0      36  int
 52433    73   829    35    73  1288     0      61  [
 52434    73   829    36    73  1288     0      62  ]
 52435    73   829    38    73  1288     0     111  src
 52436    73   829    41    73  1288     0      60  )
 52437    73   829    43    73  1288     0      63  {
 52438    73   830     9    73  1288     0      19  return
 52439    73   830    16    73  1288     0     111  put
 52440    73   830    19    73  1288     0      59  (
 52441    73   830    20    73  1288     0     111  src
 52442    73   830    23    73  1288     0      66  ,
 52443    73   830    25    73  1288     0     112  0
 52444    73   830    26    73  1288     0      66  ,
 52445    73   830    28    73  1288     0     111  src.length
 52446    73   830    38    73  1288     0      60  )
 52447    73   830    39    73  1288     0     102  ;
 52448    73   831     5    73  1288     0      64  }
 52449    73   831     5    73  1288     0    2992  ENDMETHOD
 52450    73   831     5    73  1289     0    2993  STARTMETHOD
 52451    73   932    18    73  1289     0      39  boolean
 52452    73   932    26    73  1289     0     111  hasArray
 52453    73   932    34    73  1289     0      59  (
 52454    73   932    35    73  1289     0      60  )
 52455    73   932    37    73  1289     0      63  {
 52456    73   933     9    73  1289     0      19  return
 52457    73   933    16    73  1289     0      59  (
 52458    73   933    17    73  1289     0     111  hb
 52459    73   933    20    73  1289     0      71  !=
 52460    73   933    23    73  1289     0      21  null
 52461    73   933    27    73  1289     0      60  )
 52462    73   933    29    73  1289     0     101  &&
 52463    73   933    32    73  1289     0      69  !
 52464    73   933    33    73  1289     0     111  isReadOnly
 52465    73   933    43    73  1289     0     102  ;
 52466    73   934     5    73  1289     0      64  }
 52467    73   934     5    73  1289     0    2994  ENDMETHOD
 52468    73   934     5    73  1290     0    2995  STARTMETHOD
 52469    73   955    18    73  1290     0      36  int
 52470    73   955    21    73  1290     0      61  [
 52471    73   955    22    73  1290     0      62  ]
 52472    73   955    24    73  1290     0     111  array
 52473    73   955    29    73  1290     0      59  (
 52474    73   955    30    73  1290     0      60  )
 52475    73   955    32    73  1290     0      63  {
 52476    73   956     9    73  1290     0      31  if
 52477    73   956    12    73  1290     0      59  (
 52478    73   956    13    73  1290     0     111  hb
 52479    73   956    16    73  1290     0      68  ==
 52480    73   956    19    73  1290     0      21  null
 52481    73   956    23    73  1290     0      60  )
 52482    73   957    13    73  1290     0      20  throw
 52483    73   957    23    73  1290     0     111  UnsupportedOperationException
 52484    73   957    52    73  1290     0      59  (
 52485    73   957    53    73  1290     0      60  )
 52486    73   957    54    73  1290     0     102  ;
 52487    73   958     9    73  1290     0      31  if
 52488    73   958    12    73  1290     0      59  (
 52489    73   958    13    73  1290     0     111  isReadOnly
 52490    73   958    23    73  1290     0      60  )
 52491    73   959    13    73  1290     0      20  throw
 52492    73   959    23    73  1290     0     111  ReadOnlyBufferException
 52493    73   959    46    73  1290     0      59  (
 52494    73   959    47    73  1290     0      60  )
 52495    73   959    48    73  1290     0     102  ;
 52496    73   960     9    73  1290     0      19  return
 52497    73   960    16    73  1290     0     111  hb
 52498    73   960    18    73  1290     0     102  ;
 52499    73   961     5    73  1290     0      64  }
 52500    73   961     5    73  1290     0    2996  ENDMETHOD
 52501    73   961     5    73  1291     0    2997  STARTMETHOD
 52502    73   983    18    73  1291     0      36  int
 52503    73   983    22    73  1291     0     111  arrayOffset
 52504    73   983    33    73  1291     0      59  (
 52505    73   983    34    73  1291     0      60  )
 52506    73   983    36    73  1291     0      63  {
 52507    73   984     9    73  1291     0      31  if
 52508    73   984    12    73  1291     0      59  (
 52509    73   984    13    73  1291     0     111  hb
 52510    73   984    16    73  1291     0      68  ==
 52511    73   984    19    73  1291     0      21  null
 52512    73   984    23    73  1291     0      60  )
 52513    73   985    13    73  1291     0      20  throw
 52514    73   985    23    73  1291     0     111  UnsupportedOperationException
 52515    73   985    52    73  1291     0      59  (
 52516    73   985    53    73  1291     0      60  )
 52517    73   985    54    73  1291     0     102  ;
 52518    73   986     9    73  1291     0      31  if
 52519    73   986    12    73  1291     0      59  (
 52520    73   986    13    73  1291     0     111  isReadOnly
 52521    73   986    23    73  1291     0      60  )
 52522    73   987    13    73  1291     0      20  throw
 52523    73   987    23    73  1291     0     111  ReadOnlyBufferException
 52524    73   987    46    73  1291     0      59  (
 52525    73   987    47    73  1291     0      60  )
 52526    73   987    48    73  1291     0     102  ;
 52527    73   988     9    73  1291     0      19  return
 52528    73   988    16    73  1291     0     111  offset
 52529    73   988    22    73  1291     0     102  ;
 52530    73   989     5    73  1291     0      64  }
 52531    73   989     5    73  1291     0    2998  ENDMETHOD
 52532    73  1030    21    73    -1     0     111  IntBuffer
 52533    73  1030    31    73    -1     0     111  compact
 52534    73  1030    38    73    -1     0      59  (
 52535    73  1030    39    73    -1     0      60  )
 52536    73  1030    40    73    -1     0     102  ;
 52537    73  1037    21    73    -1     0      39  boolean
 52538    73  1037    29    73    -1     0     111  isDirect
 52539    73  1037    37    73    -1     0      59  (
 52540    73  1037    38    73    -1     0      60  )
 52541    73  1037    39    73    -1     0     102  ;
 52542    73  1037    39    73  1292     0    2999  STARTMETHOD
 52543    73  1046    12    73  1292     0     111  String
 52544    73  1046    19    73  1292     0     111  toString
 52545    73  1046    27    73  1292     0      59  (
 52546    73  1046    28    73  1292     0      60  )
 52547    73  1046    30    73  1292     0      63  {
 52548    73  1047     9    73  1292     0     111  StringBuffer
 52549    73  1047    22    73  1292     0     111  sb
 52550    73  1047    25    73  1292     0      67  =
 52551    73  1047    31    73  1292     0     111  StringBuffer
 52552    73  1047    43    73  1292     0      59  (
 52553    73  1047    44    73  1292     0      60  )
 52554    73  1047    45    73  1292     0     102  ;
 52555    73  1048     9    73  1292     0     111  sb.append
 52556    73  1048    18    73  1292     0      59  (
 52557    73  1048    19    73  1292     0     111  getClass
 52558    73  1048    27    73  1292     0      59  (
 52559    73  1048    28    73  1292     0      60  )
 52560    73  1048    29    73  1292     0      54  .
 52561    73  1048    30    73  1292     0     111  getName
 52562    73  1048    37    73  1292     0      59  (
 52563    73  1048    38    73  1292     0      60  )
 52564    73  1048    39    73  1292     0      60  )
 52565    73  1048    40    73  1292     0     102  ;
 52566    73  1049     9    73  1292     0     111  sb.append
 52567    73  1049    18    73  1292     0      59  (
 52568    73  1049    19    73  1292     0     107  "[pos="
 52569    73  1049    26    73  1292     0      60  )
 52570    73  1049    27    73  1292     0     102  ;
 52571    73  1050     9    73  1292     0     111  sb.append
 52572    73  1050    18    73  1292     0      59  (
 52573    73  1050    19    73  1292     0     111  position
 52574    73  1050    27    73  1292     0      59  (
 52575    73  1050    28    73  1292     0      60  )
 52576    73  1050    29    73  1292     0      60  )
 52577    73  1050    30    73  1292     0     102  ;
 52578    73  1051     9    73  1292     0     111  sb.append
 52579    73  1051    18    73  1292     0      59  (
 52580    73  1051    19    73  1292     0     107  " lim="
 52581    73  1051    26    73  1292     0      60  )
 52582    73  1051    27    73  1292     0     102  ;
 52583    73  1052     9    73  1292     0     111  sb.append
 52584    73  1052    18    73  1292     0      59  (
 52585    73  1052    19    73  1292     0     111  limit
 52586    73  1052    24    73  1292     0      59  (
 52587    73  1052    25    73  1292     0      60  )
 52588    73  1052    26    73  1292     0      60  )
 52589    73  1052    27    73  1292     0     102  ;
 52590    73  1053     9    73  1292     0     111  sb.append
 52591    73  1053    18    73  1292     0      59  (
 52592    73  1053    19    73  1292     0     107  " cap="
 52593    73  1053    26    73  1292     0      60  )
 52594    73  1053    27    73  1292     0     102  ;
 52595    73  1054     9    73  1292     0     111  sb.append
 52596    73  1054    18    73  1292     0      59  (
 52597    73  1054    19    73  1292     0     111  capacity
 52598    73  1054    27    73  1292     0      59  (
 52599    73  1054    28    73  1292     0      60  )
 52600    73  1054    29    73  1292     0      60  )
 52601    73  1054    30    73  1292     0     102  ;
 52602    73  1055     9    73  1292     0     111  sb.append
 52603    73  1055    18    73  1292     0      59  (
 52604    73  1055    19    73  1292     0     107  "]"
 52605    73  1055    22    73  1292     0      60  )
 52606    73  1055    23    73  1292     0     102  ;
 52607    73  1056     9    73  1292     0      19  return
 52608    73  1056    16    73  1292     0     111  sb.toString
 52609    73  1056    27    73  1292     0      59  (
 52610    73  1056    28    73  1292     0      60  )
 52611    73  1056    29    73  1292     0     102  ;
 52612    73  1057     5    73  1292     0      64  }
 52613    73  1057     5    73  1292     0    3000  ENDMETHOD
 52614    73  1057     5    73  1293     0    3001  STARTMETHOD
 52615    73  1077    12    73  1293     0      36  int
 52616    73  1077    16    73  1293     0     111  hashCode
 52617    73  1077    24    73  1293     0      59  (
 52618    73  1077    25    73  1293     0      60  )
 52619    73  1077    27    73  1293     0      63  {
 52620    73  1078     9    73  1293     0      36  int
 52621    73  1078    13    73  1293     0     111  h
 52622    73  1078    15    73  1293     0      67  =
 52623    73  1078    17    73  1293     0     112  1
 52624    73  1078    18    73  1293     0     102  ;
 52625    73  1079     9    73  1293     0      36  int
 52626    73  1079    13    73  1293     0     111  p
 52627    73  1079    15    73  1293     0      67  =
 52628    73  1079    17    73  1293     0     111  position
 52629    73  1079    25    73  1293     0      59  (
 52630    73  1079    26    73  1293     0      60  )
 52631    73  1079    27    73  1293     0     102  ;
 52632    73  1080     9    73  1293     0      37  for
 52633    73  1080    13    73  1293     0      59  (
 52634    73  1080    14    73  1293     0      36  int
 52635    73  1080    18    73  1293     0     111  i
 52636    73  1080    20    73  1293     0      67  =
 52637    73  1080    22    73  1293     0     111  limit
 52638    73  1080    27    73  1293     0      59  (
 52639    73  1080    28    73  1293     0      60  )
 52640    73  1080    30    73  1293     0      77  -
 52641    73  1080    32    73  1293     0     112  1
 52642    73  1080    33    73  1293     0     102  ;
 52643    73  1080    35    73  1293     0     111  i
 52644    73  1080    37    73  1293     0      88  >=
 52645    73  1080    40    73  1293     0     111  p
 52646    73  1080    41    73  1293     0     102  ;
 52647    73  1080    43    73  1293     0     111  i
 52648    73  1080    44    73  1293     0      79  --
 52649    73  1080    46    73  1293     0      60  )
 52650    73  1081    13    73  1293     0     111  h
 52651    73  1081    15    73  1293     0      67  =
 52652    73  1081    17    73  1293     0     112  31
 52653    73  1081    20    73  1293     0      80  *
 52654    73  1081    22    73  1293     0     111  h
 52655    73  1081    24    73  1293     0      74  +
 52656    73  1081    26    73  1293     0      59  (
 52657    73  1081    27    73  1293     0      36  int
 52658    73  1081    30    73  1293     0      60  )
 52659    73  1081    31    73  1293     0     111  get
 52660    73  1081    34    73  1293     0      59  (
 52661    73  1081    35    73  1293     0     111  i
 52662    73  1081    36    73  1293     0      60  )
 52663    73  1081    37    73  1293     0     102  ;
 52664    73  1082     9    73  1293     0      19  return
 52665    73  1082    16    73  1293     0     111  h
 52666    73  1082    17    73  1293     0     102  ;
 52667    73  1083     5    73  1293     0      64  }
 52668    73  1083     5    73  1293     0    3002  ENDMETHOD
 52669    73  1083     5    73  1294     0    3003  STARTMETHOD
 52670    73  1110    12    73  1294     0      39  boolean
 52671    73  1110    20    73  1294     0     111  equals
 52672    73  1110    26    73  1294     0      59  (
 52673    73  1110    27    73  1294     0     111  Object
 52674    73  1110    34    73  1294     0     111  ob
 52675    73  1110    36    73  1294     0      60  )
 52676    73  1110    38    73  1294     0      63  {
 52677    73  1111     9    73  1294     0      31  if
 52678    73  1111    12    73  1294     0      59  (
 52679    73  1111    13    73  1294     0      44  this
 52680    73  1111    18    73  1294     0      68  ==
 52681    73  1111    21    73  1294     0     111  ob
 52682    73  1111    23    73  1294     0      60  )
 52683    73  1112    13    73  1294     0      19  return
 52684    73  1112    20    73  1294     0      52  true
 52685    73  1112    24    73  1294     0     102  ;
 52686    73  1113     9    73  1294     0      31  if
 52687    73  1113    12    73  1294     0      59  (
 52688    73  1113    13    73  1294     0      69  !
 52689    73  1113    14    73  1294     0      59  (
 52690    73  1113    15    73  1294     0     111  ob
 52691    73  1113    29    73  1294     0     111  IntBuffer
 52692    73  1113    38    73  1294     0      60  )
 52693    73  1113    39    73  1294     0      60  )
 52694    73  1114    13    73  1294     0      19  return
 52695    73  1114    20    73  1294     0      43  false
 52696    73  1114    25    73  1294     0     102  ;
 52697    73  1115     9    73  1294     0     111  IntBuffer
 52698    73  1115    19    73  1294     0     111  that
 52699    73  1115    24    73  1294     0      67  =
 52700    73  1115    26    73  1294     0      59  (
 52701    73  1115    27    73  1294     0     111  IntBuffer
 52702    73  1115    36    73  1294     0      60  )
 52703    73  1115    37    73  1294     0     111  ob
 52704    73  1115    39    73  1294     0     102  ;
 52705    73  1116     9    73  1294     0      31  if
 52706    73  1116    12    73  1294     0      59  (
 52707    73  1116    13    73  1294     0     111  this.remaining
 52708    73  1116    27    73  1294     0      59  (
 52709    73  1116    28    73  1294     0      60  )
 52710    73  1116    30    73  1294     0      71  !=
 52711    73  1116    33    73  1294     0     111  that.remaining
 52712    73  1116    47    73  1294     0      59  (
 52713    73  1116    48    73  1294     0      60  )
 52714    73  1116    49    73  1294     0      60  )
 52715    73  1117    13    73  1294     0      19  return
 52716    73  1117    20    73  1294     0      43  false
 52717    73  1117    25    73  1294     0     102  ;
 52718    73  1118     9    73  1294     0      36  int
 52719    73  1118    13    73  1294     0     111  p
 52720    73  1118    15    73  1294     0      67  =
 52721    73  1118    17    73  1294     0     111  this.position
 52722    73  1118    30    73  1294     0      59  (
 52723    73  1118    31    73  1294     0      60  )
 52724    73  1118    32    73  1294     0     102  ;
 52725    73  1119     9    73  1294     0      37  for
 52726    73  1119    13    73  1294     0      59  (
 52727    73  1119    14    73  1294     0      36  int
 52728    73  1119    18    73  1294     0     111  i
 52729    73  1119    20    73  1294     0      67  =
 52730    73  1119    22    73  1294     0     111  this.limit
 52731    73  1119    32    73  1294     0      59  (
 52732    73  1119    33    73  1294     0      60  )
 52733    73  1119    35    73  1294     0      77  -
 52734    73  1119    37    73  1294     0     112  1
 52735    73  1119    38    73  1294     0      66  ,
 52736    73  1119    40    73  1294     0     111  j
 52737    73  1119    42    73  1294     0      67  =
 52738    73  1119    44    73  1294     0     111  that.limit
 52739    73  1119    54    73  1294     0      59  (
 52740    73  1119    55    73  1294     0      60  )
 52741    73  1119    57    73  1294     0      77  -
 52742    73  1119    59    73  1294     0     112  1
 52743    73  1119    60    73  1294     0     102  ;
 52744    73  1119    62    73  1294     0     111  i
 52745    73  1119    64    73  1294     0      88  >=
 52746    73  1119    67    73  1294     0     111  p
 52747    73  1119    68    73  1294     0     102  ;
 52748    73  1119    70    73  1294     0     111  i
 52749    73  1119    71    73  1294     0      79  --
 52750    73  1119    73    73  1294     0      66  ,
 52751    73  1119    75    73  1294     0     111  j
 52752    73  1119    76    73  1294     0      79  --
 52753    73  1119    78    73  1294     0      60  )
 52754    73  1119    80    73  1294     0      63  {
 52755    73  1120    13    73  1294     1      36  int
 52756    73  1120    17    73  1294     1     111  v1
 52757    73  1120    20    73  1294     1      67  =
 52758    73  1120    22    73  1294     1     111  this.get
 52759    73  1120    30    73  1294     1      59  (
 52760    73  1120    31    73  1294     1     111  i
 52761    73  1120    32    73  1294     1      60  )
 52762    73  1120    33    73  1294     1     102  ;
 52763    73  1121    13    73  1294     1      36  int
 52764    73  1121    17    73  1294     1     111  v2
 52765    73  1121    20    73  1294     1      67  =
 52766    73  1121    22    73  1294     1     111  that.get
 52767    73  1121    30    73  1294     1      59  (
 52768    73  1121    31    73  1294     1     111  j
 52769    73  1121    32    73  1294     1      60  )
 52770    73  1121    33    73  1294     1     102  ;
 52771    73  1122    13    73  1294     0      31  if
 52772    73  1122    16    73  1294     0      59  (
 52773    73  1122    17    73  1294     0     111  v1
 52774    73  1122    20    73  1294     0      71  !=
 52775    73  1122    23    73  1294     0     111  v2
 52776    73  1122    25    73  1294     0      60  )
 52777    73  1122    27    73  1294     0      63  {
 52778    73  1123    17    73  1294     0      31  if
 52779    73  1123    20    73  1294     0      59  (
 52780    73  1123    21    73  1294     0      59  (
 52781    73  1123    22    73  1294     0     111  v1
 52782    73  1123    25    73  1294     0      71  !=
 52783    73  1123    28    73  1294     0     111  v1
 52784    73  1123    30    73  1294     0      60  )
 52785    73  1123    32    73  1294     0     101  &&
 52786    73  1123    35    73  1294     0      59  (
 52787    73  1123    36    73  1294     0     111  v2
 52788    73  1123    39    73  1294     0      71  !=
 52789    73  1123    42    73  1294     0     111  v2
 52790    73  1123    44    73  1294     0      60  )
 52791    73  1123    45    73  1294     0      60  )
 52792    73  1124    21    73  1294     0      46  continue
 52793    73  1124    29    73  1294     0     102  ;
 52794    73  1125    17    73  1294     0      19  return
 52795    73  1125    24    73  1294     0      43  false
 52796    73  1125    29    73  1294     0     102  ;
 52797    73  1126    13    73  1294     1      64  }
 52798    73  1127     9    73  1294     1      64  }
 52799    73  1128     9    73  1294     0      19  return
 52800    73  1128    16    73  1294     0      52  true
 52801    73  1128    20    73  1294     0     102  ;
 52802    73  1129     5    73  1294     0      64  }
 52803    73  1129     5    73  1294     0    3004  ENDMETHOD
 52804    73  1129     5    73  1295     0    3005  STARTMETHOD
 52805    73  1143    12    73  1295     0      36  int
 52806    73  1143    16    73  1295     0     111  compareTo
 52807    73  1143    25    73  1295     0      59  (
 52808    73  1143    26    73  1295     0     111  IntBuffer
 52809    73  1143    36    73  1295     0     111  that
 52810    73  1143    40    73  1295     0      60  )
 52811    73  1143    42    73  1295     0      63  {
 52812    73  1144     9    73  1295     0      36  int
 52813    73  1144    13    73  1295     0     111  n
 52814    73  1144    15    73  1295     0      67  =
 52815    73  1144    17    73  1295     0     111  this.position
 52816    73  1144    30    73  1295     0      59  (
 52817    73  1144    31    73  1295     0      60  )
 52818    73  1144    33    73  1295     0      74  +
 52819    73  1144    35    73  1295     0     111  Math.min
 52820    73  1144    43    73  1295     0      59  (
 52821    73  1144    44    73  1295     0     111  this.remaining
 52822    73  1144    58    73  1295     0      59  (
 52823    73  1144    59    73  1295     0      60  )
 52824    73  1144    60    73  1295     0      66  ,
 52825    73  1144    62    73  1295     0     111  that.remaining
 52826    73  1144    76    73  1295     0      59  (
 52827    73  1144    77    73  1295     0      60  )
 52828    73  1144    78    73  1295     0      60  )
 52829    73  1144    79    73  1295     0     102  ;
 52830    73  1145     9    73  1295     0      37  for
 52831    73  1145    13    73  1295     0      59  (
 52832    73  1145    14    73  1295     0      36  int
 52833    73  1145    18    73  1295     0     111  i
 52834    73  1145    20    73  1295     0      67  =
 52835    73  1145    22    73  1295     0     111  this.position
 52836    73  1145    35    73  1295     0      59  (
 52837    73  1145    36    73  1295     0      60  )
 52838    73  1145    37    73  1295     0      66  ,
 52839    73  1145    39    73  1295     0     111  j
 52840    73  1145    41    73  1295     0      67  =
 52841    73  1145    43    73  1295     0     111  that.position
 52842    73  1145    56    73  1295     0      59  (
 52843    73  1145    57    73  1295     0      60  )
 52844    73  1145    58    73  1295     0     102  ;
 52845    73  1145    60    73  1295     0     111  i
 52846    73  1145    62    73  1295     0      93  <
 52847    73  1145    64    73  1295     0     111  n
 52848    73  1145    65    73  1295     0     102  ;
 52849    73  1145    67    73  1295     0     111  i
 52850    73  1145    68    73  1295     0      76  ++
 52851    73  1145    70    73  1295     0      66  ,
 52852    73  1145    72    73  1295     0     111  j
 52853    73  1145    73    73  1295     0      76  ++
 52854    73  1145    75    73  1295     0      60  )
 52855    73  1145    77    73  1295     0      63  {
 52856    73  1146    13    73  1295     1      36  int
 52857    73  1146    17    73  1295     1     111  v1
 52858    73  1146    20    73  1295     1      67  =
 52859    73  1146    22    73  1295     1     111  this.get
 52860    73  1146    30    73  1295     1      59  (
 52861    73  1146    31    73  1295     1     111  i
 52862    73  1146    32    73  1295     1      60  )
 52863    73  1146    33    73  1295     1     102  ;
 52864    73  1147    13    73  1295     1      36  int
 52865    73  1147    17    73  1295     1     111  v2
 52866    73  1147    20    73  1295     1      67  =
 52867    73  1147    22    73  1295     1     111  that.get
 52868    73  1147    30    73  1295     1      59  (
 52869    73  1147    31    73  1295     1     111  j
 52870    73  1147    32    73  1295     1      60  )
 52871    73  1147    33    73  1295     1     102  ;
 52872    73  1148    13    73  1295     0      31  if
 52873    73  1148    16    73  1295     0      59  (
 52874    73  1148    17    73  1295     0     111  v1
 52875    73  1148    20    73  1295     0      68  ==
 52876    73  1148    23    73  1295     0     111  v2
 52877    73  1148    25    73  1295     0      60  )
 52878    73  1149    17    73  1295     0      46  continue
 52879    73  1149    25    73  1295     0     102  ;
 52880    73  1150    13    73  1295     0      31  if
 52881    73  1150    16    73  1295     0      59  (
 52882    73  1150    17    73  1295     0      59  (
 52883    73  1150    18    73  1295     0     111  v1
 52884    73  1150    21    73  1295     0      71  !=
 52885    73  1150    24    73  1295     0     111  v1
 52886    73  1150    26    73  1295     0      60  )
 52887    73  1150    28    73  1295     0     101  &&
 52888    73  1150    31    73  1295     0      59  (
 52889    73  1150    32    73  1295     0     111  v2
 52890    73  1150    35    73  1295     0      71  !=
 52891    73  1150    38    73  1295     0     111  v2
 52892    73  1150    40    73  1295     0      60  )
 52893    73  1150    41    73  1295     0      60  )
 52894    73  1151    17    73  1295     0      46  continue
 52895    73  1151    25    73  1295     0     102  ;
 52896    73  1152    13    73  1295     0      31  if
 52897    73  1152    16    73  1295     0      59  (
 52898    73  1152    17    73  1295     0     111  v1
 52899    73  1152    20    73  1295     0      93  <
 52900    73  1152    22    73  1295     0     111  v2
 52901    73  1152    24    73  1295     0      60  )
 52902    73  1153    17    73  1295     0      19  return
 52903    73  1153    24    73  1295     0      77  -
 52904    73  1153    25    73  1295     0     112  1
 52905    73  1153    26    73  1295     0     102  ;
 52906    73  1154    13    73  1295     0      19  return
 52907    73  1154    20    73  1295     0      74  +
 52908    73  1154    21    73  1295     0     112  1
 52909    73  1154    22    73  1295     0     102  ;
 52910    73  1155     9    73  1295     0      64  }
 52911    73  1156     9    73  1295     0      19  return
 52912    73  1156    16    73  1295     0     111  this.remaining
 52913    73  1156    30    73  1295     0      59  (
 52914    73  1156    31    73  1295     0      60  )
 52915    73  1156    33    73  1295     0      77  -
 52916    73  1156    35    73  1295     0     111  that.remaining
 52917    73  1156    49    73  1295     0      59  (
 52918    73  1156    50    73  1295     0      60  )
 52919    73  1156    51    73  1295     0     102  ;
 52920    73  1157     5    73  1295     0      64  }
 52921    73  1157     5    73  1295     0    3006  ENDMETHOD
 52922    73  1372    21    73    -1     0     111  ByteOrder
 52923    73  1372    31    73    -1     0     111  order
 52924    73  1372    36    73    -1     0      59  (
 52925    73  1372    37    73    -1     0      60  )
 52926    73  1372    38    73    -1     0     102  ;
 52927    73  1426     1    73    -1     0      64  }
 52928    73  1426     1    73    -1     1    3007  ENDCLASS
 52929    73  1426     1    -1    -1     1    3008  ENDFILE C:\Users\RA\javasrc\java\nio\IntBuffer.java
 52930    74     1     1    -1    -1     1    3009  STARTFILE C:\Users\RA\javasrc\java\nio\InvalidMarkException.java
 52931    74    30     9    -1    -1     0     111  java.nio
 52932    74    30    17    -1    -1     1     102  ;
 52933    74    40     8    74    -1     0    3010  STARTCLASS
 52934    74    40     8    74    -1     0      24  class
 52935    74    40    14    74    -1     0     111  InvalidMarkException
 52936    74    41     5    74    -1     0      38  extends
 52937    74    41    13    74    -1     0     111  IllegalStateException
 52938    74    42     1    74    -1     0      63  {
 52939    74    44     5    74    -1     0      41  private
 52940    74    44    13    74    -1     0      45  static
 52941    74    44    26    74    -1     0      53  long
 52942    74    44    31    74    -1     0     111  serialVersionUID
 52943    74    44    48    74    -1     0      67  =
 52944    74    44    50    74    -1     0      55  1698329710438510774L
 52945    74    44    70    74    -1     1     102  ;
 52946    74    44    70    74  1296     0    3011  STARTMETHOD
 52947    74    49    12    74  1296     0     111  InvalidMarkException
 52948    74    49    32    74  1296     0      59  (
 52949    74    49    33    74  1296     0      60  )
 52950    74    49    35    74  1296     0      63  {
 52951    74    49    37    74  1296     0      64  }
 52952    74    49    37    74  1296     0    3012  ENDMETHOD
 52953    74    51     1    74    -1     0      64  }
 52954    74    51     1    74    -1     1    3013  ENDCLASS
 52955    74    51     1    -1    -1     1    3014  ENDFILE C:\Users\RA\javasrc\java\nio\InvalidMarkException.java
 52956    75     1     1    -1    -1     1    3015  STARTFILE C:\Users\RA\javasrc\java\nio\LongBuffer.java
 52957    75    28     9    -1    -1     0     111  java.nio
 52958    75    28    17    -1    -1     1     102  ;
 52959    75   257    17    75    -1     0    3016  STARTCLASS
 52960    75   257    17    75    -1     0      24  class
 52961    75   257    23    75    -1     0     111  LongBuffer
 52962    75   258     5    75    -1     0      38  extends
 52963    75   258    13    75    -1     0     111  Buffer
 52964    75   259     5    75    -1     0      17  implements
 52965    75   259    16    75    -1     0     111  Comparable
 52966    75   259    26    75    -1     0      93  <
 52967    75   259    27    75    -1     0     111  LongBuffer
 52968    75   259    37    75    -1     0      89  >
 52969    75   260     1    75    -1     0      63  {
 52970    75   266    11    75    -1     0      53  long
 52971    75   266    15    75    -1     0      61  [
 52972    75   266    16    75    -1     0      62  ]
 52973    75   266    18    75    -1     0     111  hb
 52974    75   266    20    75    -1     0     102  ;
 52975    75   267    11    75    -1     0      36  int
 52976    75   267    15    75    -1     0     111  offset
 52977    75   267    21    75    -1     0     102  ;
 52978    75   268     5    75    -1     0      39  boolean
 52979    75   268    13    75    -1     0     111  isReadOnly
 52980    75   268    23    75    -1     0     102  ;
 52981    75   268    23    75  1297     0    3017  STARTMETHOD
 52982    75   273     5    75  1297     0     111  LongBuffer
 52983    75   273    15    75  1297     0      59  (
 52984    75   273    16    75  1297     0      36  int
 52985    75   273    20    75  1297     0     111  mark
 52986    75   273    24    75  1297     0      66  ,
 52987    75   273    26    75  1297     0      36  int
 52988    75   273    30    75  1297     0     111  pos
 52989    75   273    33    75  1297     0      66  ,
 52990    75   273    35    75  1297     0      36  int
 52991    75   273    39    75  1297     0     111  lim
 52992    75   273    42    75  1297     0      66  ,
 52993    75   273    44    75  1297     0      36  int
 52994    75   273    48    75  1297     0     111  cap
 52995    75   273    51    75  1297     0      66  ,
 52996    75   274    18    75  1297     0      53  long
 52997    75   274    22    75  1297     0      61  [
 52998    75   274    23    75  1297     0      62  ]
 52999    75   274    25    75  1297     0     111  hb
 53000    75   274    27    75  1297     0      66  ,
 53001    75   274    29    75  1297     0      36  int
 53002    75   274    33    75  1297     0     111  offset
 53003    75   274    39    75  1297     0      60  )
 53004    75   275     5    75  1297     0      63  {
 53005    75   276     9    75  1297     0      27  super
 53006    75   276    14    75  1297     0      59  (
 53007    75   276    15    75  1297     0     111  mark
 53008    75   276    19    75  1297     0      66  ,
 53009    75   276    21    75  1297     0     111  pos
 53010    75   276    24    75  1297     0      66  ,
 53011    75   276    26    75  1297     0     111  lim
 53012    75   276    29    75  1297     0      66  ,
 53013    75   276    31    75  1297     0     111  cap
 53014    75   276    34    75  1297     0      60  )
 53015    75   276    35    75  1297     0     102  ;
 53016    75   277     9    75  1297     1     111  this.hb
 53017    75   277    17    75  1297     1      67  =
 53018    75   277    19    75  1297     1     111  hb
 53019    75   277    21    75  1297     1     102  ;
 53020    75   278     9    75  1297     1     111  this.offset
 53021    75   278    21    75  1297     1      67  =
 53022    75   278    23    75  1297     1     111  offset
 53023    75   278    29    75  1297     1     102  ;
 53024    75   279     5    75  1297     0      64  }
 53025    75   279     5    75  1297     0    3018  ENDMETHOD
 53026    75   279     5    75  1298     0    3019  STARTMETHOD
 53027    75   283     5    75  1298     0     111  LongBuffer
 53028    75   283    15    75  1298     0      59  (
 53029    75   283    16    75  1298     0      36  int
 53030    75   283    20    75  1298     0     111  mark
 53031    75   283    24    75  1298     0      66  ,
 53032    75   283    26    75  1298     0      36  int
 53033    75   283    30    75  1298     0     111  pos
 53034    75   283    33    75  1298     0      66  ,
 53035    75   283    35    75  1298     0      36  int
 53036    75   283    39    75  1298     0     111  lim
 53037    75   283    42    75  1298     0      66  ,
 53038    75   283    44    75  1298     0      36  int
 53039    75   283    48    75  1298     0     111  cap
 53040    75   283    51    75  1298     0      60  )
 53041    75   283    53    75  1298     0      63  {
 53042    75   284     9    75  1298     0      44  this
 53043    75   284    13    75  1298     0      59  (
 53044    75   284    14    75  1298     0     111  mark
 53045    75   284    18    75  1298     0      66  ,
 53046    75   284    20    75  1298     0     111  pos
 53047    75   284    23    75  1298     0      66  ,
 53048    75   284    25    75  1298     0     111  lim
 53049    75   284    28    75  1298     0      66  ,
 53050    75   284    30    75  1298     0     111  cap
 53051    75   284    33    75  1298     0      66  ,
 53052    75   284    35    75  1298     0      21  null
 53053    75   284    39    75  1298     0      66  ,
 53054    75   284    41    75  1298     0     112  0
 53055    75   284    42    75  1298     0      60  )
 53056    75   284    43    75  1298     0     102  ;
 53057    75   285     5    75  1298     0      64  }
 53058    75   285     5    75  1298     0    3020  ENDMETHOD
 53059    75   285     5    75  1299     0    3021  STARTMETHOD
 53060    75   326    12    75  1299     0      45  static
 53061    75   326    19    75  1299     0     111  LongBuffer
 53062    75   326    30    75  1299     0     111  allocate
 53063    75   326    38    75  1299     0      59  (
 53064    75   326    39    75  1299     0      36  int
 53065    75   326    43    75  1299     0     111  capacity
 53066    75   326    51    75  1299     0      60  )
 53067    75   326    53    75  1299     0      63  {
 53068    75   327     9    75  1299     0      31  if
 53069    75   327    12    75  1299     0      59  (
 53070    75   327    13    75  1299     0     111  capacity
 53071    75   327    22    75  1299     0      93  <
 53072    75   327    24    75  1299     0     112  0
 53073    75   327    25    75  1299     0      60  )
 53074    75   328    13    75  1299     0      20  throw
 53075    75   328    23    75  1299     0     111  IllegalArgumentException
 53076    75   328    47    75  1299     0      59  (
 53077    75   328    48    75  1299     0      60  )
 53078    75   328    49    75  1299     0     102  ;
 53079    75   329     9    75  1299     0      19  return
 53080    75   329    20    75  1299     0     111  HeapLongBuffer
 53081    75   329    34    75  1299     0      59  (
 53082    75   329    35    75  1299     0     111  capacity
 53083    75   329    43    75  1299     0      66  ,
 53084    75   329    45    75  1299     0     111  capacity
 53085    75   329    53    75  1299     0      60  )
 53086    75   329    54    75  1299     0     102  ;
 53087    75   330     5    75  1299     0      64  }
 53088    75   330     5    75  1299     0    3022  ENDMETHOD
 53089    75   330     5    75  1300     0    3023  STARTMETHOD
 53090    75   363    12    75  1300     0      45  static
 53091    75   363    19    75  1300     0     111  LongBuffer
 53092    75   363    30    75  1300     0     111  wrap
 53093    75   363    34    75  1300     0      59  (
 53094    75   363    35    75  1300     0      53  long
 53095    75   363    39    75  1300     0      61  [
 53096    75   363    40    75  1300     0      62  ]
 53097    75   363    42    75  1300     0     111  array
 53098    75   363    47    75  1300     0      66  ,
 53099    75   364    37    75  1300     0      36  int
 53100    75   364    41    75  1300     0     111  offset
 53101    75   364    47    75  1300     0      66  ,
 53102    75   364    49    75  1300     0      36  int
 53103    75   364    53    75  1300     0     111  length
 53104    75   364    59    75  1300     0      60  )
 53105    75   365     5    75  1300     0      63  {
 53106    75   366     9    75  1300     0      35  try
 53107    75   366    13    75  1300     0      63  {
 53108    75   367    13    75  1300     0      19  return
 53109    75   367    24    75  1300     0     111  HeapLongBuffer
 53110    75   367    38    75  1300     0      59  (
 53111    75   367    39    75  1300     0     111  array
 53112    75   367    44    75  1300     0      66  ,
 53113    75   367    46    75  1300     0     111  offset
 53114    75   367    52    75  1300     0      66  ,
 53115    75   367    54    75  1300     0     111  length
 53116    75   367    60    75  1300     0      60  )
 53117    75   367    61    75  1300     0     102  ;
 53118    75   368     9    75  1300     0      64  }
 53119    75   368    11    75  1300     0      34  catch
 53120    75   368    17    75  1300     0      59  (
 53121    75   368    18    75  1300     0     111  IllegalArgumentException
 53122    75   368    43    75  1300     0     111  x
 53123    75   368    44    75  1300     0      60  )
 53124    75   368    46    75  1300     0      63  {
 53125    75   369    13    75  1300     0      20  throw
 53126    75   369    23    75  1300     0     111  IndexOutOfBoundsException
 53127    75   369    48    75  1300     0      59  (
 53128    75   369    49    75  1300     0      60  )
 53129    75   369    50    75  1300     0     102  ;
 53130    75   370     9    75  1300     0      64  }
 53131    75   371     5    75  1300     0      64  }
 53132    75   371     5    75  1300     0    3024  ENDMETHOD
 53133    75   371     5    75  1301     0    3025  STARTMETHOD
 53134    75   389    12    75  1301     0      45  static
 53135    75   389    19    75  1301     0     111  LongBuffer
 53136    75   389    30    75  1301     0     111  wrap
 53137    75   389    34    75  1301     0      59  (
 53138    75   389    35    75  1301     0      53  long
 53139    75   389    39    75  1301     0      61  [
 53140    75   389    40    75  1301     0      62  ]
 53141    75   389    42    75  1301     0     111  array
 53142    75   389    47    75  1301     0      60  )
 53143    75   389    49    75  1301     0      63  {
 53144    75   390     9    75  1301     0      19  return
 53145    75   390    16    75  1301     0     111  wrap
 53146    75   390    20    75  1301     0      59  (
 53147    75   390    21    75  1301     0     111  array
 53148    75   390    26    75  1301     0      66  ,
 53149    75   390    28    75  1301     0     112  0
 53150    75   390    29    75  1301     0      66  ,
 53151    75   390    31    75  1301     0     111  array.length
 53152    75   390    43    75  1301     0      60  )
 53153    75   390    44    75  1301     0     102  ;
 53154    75   391     5    75  1301     0      64  }
 53155    75   391     5    75  1301     0    3026  ENDMETHOD
 53156    75   503    21    75    -1     1     111  LongBuffer
 53157    75   503    32    75    -1     1     111  slice
 53158    75   503    37    75    -1     1      59  (
 53159    75   503    38    75    -1     1      60  )
 53160    75   503    39    75    -1     1     102  ;
 53161    75   520    21    75    -1     1     111  LongBuffer
 53162    75   520    32    75    -1     1     111  duplicate
 53163    75   520    41    75    -1     1      59  (
 53164    75   520    42    75    -1     1      60  )
 53165    75   520    43    75    -1     1     102  ;
 53166    75   540    21    75    -1     1     111  LongBuffer
 53167    75   540    32    75    -1     1     111  asReadOnlyBuffer
 53168    75   540    48    75    -1     1      59  (
 53169    75   540    49    75    -1     1      60  )
 53170    75   540    50    75    -1     1     102  ;
 53171    75   554    21    75    -1     0      53  long
 53172    75   554    26    75    -1     0     111  get
 53173    75   554    29    75    -1     0      59  (
 53174    75   554    30    75    -1     0      60  )
 53175    75   554    31    75    -1     0     102  ;
 53176    75   573    21    75    -1     0     111  LongBuffer
 53177    75   573    32    75    -1     0     111  put
 53178    75   573    35    75    -1     0      59  (
 53179    75   573    36    75    -1     0      53  long
 53180    75   573    41    75    -1     0     111  l
 53181    75   573    42    75    -1     0      60  )
 53182    75   573    43    75    -1     0     102  ;
 53183    75   588    21    75    -1     0      53  long
 53184    75   588    26    75    -1     0     111  get
 53185    75   588    29    75    -1     0      59  (
 53186    75   588    30    75    -1     0      36  int
 53187    75   588    34    75    -1     0     111  index
 53188    75   588    39    75    -1     0      60  )
 53189    75   588    40    75    -1     0     102  ;
 53190    75   611    21    75    -1     0     111  LongBuffer
 53191    75   611    32    75    -1     0     111  put
 53192    75   611    35    75    -1     0      59  (
 53193    75   611    36    75    -1     0      36  int
 53194    75   611    40    75    -1     0     111  index
 53195    75   611    45    75    -1     0      66  ,
 53196    75   611    47    75    -1     0      53  long
 53197    75   611    52    75    -1     0     111  l
 53198    75   611    53    75    -1     0      60  )
 53199    75   611    54    75    -1     0     102  ;
 53200    75   611    54    75  1302     0    3027  STARTMETHOD
 53201    75   665    12    75  1302     0     111  LongBuffer
 53202    75   665    23    75  1302     0     111  get
 53203    75   665    26    75  1302     0      59  (
 53204    75   665    27    75  1302     0      53  long
 53205    75   665    31    75  1302     0      61  [
 53206    75   665    32    75  1302     0      62  ]
 53207    75   665    34    75  1302     0     111  dst
 53208    75   665    37    75  1302     0      66  ,
 53209    75   665    39    75  1302     0      36  int
 53210    75   665    43    75  1302     0     111  offset
 53211    75   665    49    75  1302     0      66  ,
 53212    75   665    51    75  1302     0      36  int
 53213    75   665    55    75  1302     0     111  length
 53214    75   665    61    75  1302     0      60  )
 53215    75   665    63    75  1302     0      63  {
 53216    75   666     9    75  1302     0     111  checkBounds
 53217    75   666    20    75  1302     0      59  (
 53218    75   666    21    75  1302     0     111  offset
 53219    75   666    27    75  1302     0      66  ,
 53220    75   666    29    75  1302     0     111  length
 53221    75   666    35    75  1302     0      66  ,
 53222    75   666    37    75  1302     0     111  dst.length
 53223    75   666    47    75  1302     0      60  )
 53224    75   666    48    75  1302     0     102  ;
 53225    75   667     9    75  1302     0      31  if
 53226    75   667    12    75  1302     0      59  (
 53227    75   667    13    75  1302     0     111  length
 53228    75   667    20    75  1302     0      89  >
 53229    75   667    22    75  1302     0     111  remaining
 53230    75   667    31    75  1302     0      59  (
 53231    75   667    32    75  1302     0      60  )
 53232    75   667    33    75  1302     0      60  )
 53233    75   668    13    75  1302     0      20  throw
 53234    75   668    23    75  1302     0     111  BufferUnderflowException
 53235    75   668    47    75  1302     0      59  (
 53236    75   668    48    75  1302     0      60  )
 53237    75   668    49    75  1302     0     102  ;
 53238    75   669     9    75  1302     0      36  int
 53239    75   669    13    75  1302     0     111  end
 53240    75   669    17    75  1302     0      67  =
 53241    75   669    19    75  1302     0     111  offset
 53242    75   669    26    75  1302     0      74  +
 53243    75   669    28    75  1302     0     111  length
 53244    75   669    34    75  1302     0     102  ;
 53245    75   670     9    75  1302     0      37  for
 53246    75   670    13    75  1302     0      59  (
 53247    75   670    14    75  1302     0      36  int
 53248    75   670    18    75  1302     0     111  i
 53249    75   670    20    75  1302     0      67  =
 53250    75   670    22    75  1302     0     111  offset
 53251    75   670    28    75  1302     0     102  ;
 53252    75   670    30    75  1302     0     111  i
 53253    75   670    32    75  1302     0      93  <
 53254    75   670    34    75  1302     0     111  end
 53255    75   670    37    75  1302     0     102  ;
 53256    75   670    39    75  1302     0     111  i
 53257    75   670    40    75  1302     0      76  ++
 53258    75   670    42    75  1302     0      60  )
 53259    75   671    13    75  1302     0     111  dst
 53260    75   671    16    75  1302     0      61  [
 53261    75   671    17    75  1302     0     111  i
 53262    75   671    18    75  1302     0      62  ]
 53263    75   671    20    75  1302     0      67  =
 53264    75   671    22    75  1302     0     111  get
 53265    75   671    25    75  1302     0      59  (
 53266    75   671    26    75  1302     0      60  )
 53267    75   671    27    75  1302     0     102  ;
 53268    75   672     9    75  1302     0      19  return
 53269    75   672    16    75  1302     0      44  this
 53270    75   672    20    75  1302     0     102  ;
 53271    75   673     5    75  1302     0      64  }
 53272    75   673     5    75  1302     0    3028  ENDMETHOD
 53273    75   673     5    75  1303     0    3029  STARTMETHOD
 53274    75   691    12    75  1303     0     111  LongBuffer
 53275    75   691    23    75  1303     0     111  get
 53276    75   691    26    75  1303     0      59  (
 53277    75   691    27    75  1303     0      53  long
 53278    75   691    31    75  1303     0      61  [
 53279    75   691    32    75  1303     0      62  ]
 53280    75   691    34    75  1303     0     111  dst
 53281    75   691    37    75  1303     0      60  )
 53282    75   691    39    75  1303     0      63  {
 53283    75   692     9    75  1303     0      19  return
 53284    75   692    16    75  1303     0     111  get
 53285    75   692    19    75  1303     0      59  (
 53286    75   692    20    75  1303     0     111  dst
 53287    75   692    23    75  1303     0      66  ,
 53288    75   692    25    75  1303     0     112  0
 53289    75   692    26    75  1303     0      66  ,
 53290    75   692    28    75  1303     0     111  dst.length
 53291    75   692    38    75  1303     0      60  )
 53292    75   692    39    75  1303     0     102  ;
 53293    75   693     5    75  1303     0      64  }
 53294    75   693     5    75  1303     0    3030  ENDMETHOD
 53295    75   693     5    75  1304     0    3031  STARTMETHOD
 53296    75   739    12    75  1304     0     111  LongBuffer
 53297    75   739    23    75  1304     0     111  put
 53298    75   739    26    75  1304     0      59  (
 53299    75   739    27    75  1304     0     111  LongBuffer
 53300    75   739    38    75  1304     0     111  src
 53301    75   739    41    75  1304     0      60  )
 53302    75   739    43    75  1304     0      63  {
 53303    75   740     9    75  1304     0      31  if
 53304    75   740    12    75  1304     0      59  (
 53305    75   740    13    75  1304     0     111  src
 53306    75   740    17    75  1304     0      68  ==
 53307    75   740    20    75  1304     0      44  this
 53308    75   740    24    75  1304     0      60  )
 53309    75   741    13    75  1304     0      20  throw
 53310    75   741    23    75  1304     0     111  IllegalArgumentException
 53311    75   741    47    75  1304     0      59  (
 53312    75   741    48    75  1304     0      60  )
 53313    75   741    49    75  1304     0     102  ;
 53314    75   742     9    75  1304     0      36  int
 53315    75   742    13    75  1304     0     111  n
 53316    75   742    15    75  1304     0      67  =
 53317    75   742    17    75  1304     0     111  src.remaining
 53318    75   742    30    75  1304     0      59  (
 53319    75   742    31    75  1304     0      60  )
 53320    75   742    32    75  1304     0     102  ;
 53321    75   743     9    75  1304     0      31  if
 53322    75   743    12    75  1304     0      59  (
 53323    75   743    13    75  1304     0     111  n
 53324    75   743    15    75  1304     0      89  >
 53325    75   743    17    75  1304     0     111  remaining
 53326    75   743    26    75  1304     0      59  (
 53327    75   743    27    75  1304     0      60  )
 53328    75   743    28    75  1304     0      60  )
 53329    75   744    13    75  1304     0      20  throw
 53330    75   744    23    75  1304     0     111  BufferOverflowException
 53331    75   744    46    75  1304     0      59  (
 53332    75   744    47    75  1304     0      60  )
 53333    75   744    48    75  1304     0     102  ;
 53334    75   745     9    75  1304     0      37  for
 53335    75   745    13    75  1304     0      59  (
 53336    75   745    14    75  1304     0      36  int
 53337    75   745    18    75  1304     0     111  i
 53338    75   745    20    75  1304     0      67  =
 53339    75   745    22    75  1304     0     112  0
 53340    75   745    23    75  1304     0     102  ;
 53341    75   745    25    75  1304     0     111  i
 53342    75   745    27    75  1304     0      93  <
 53343    75   745    29    75  1304     0     111  n
 53344    75   745    30    75  1304     0     102  ;
 53345    75   745    32    75  1304     0     111  i
 53346    75   745    33    75  1304     0      76  ++
 53347    75   745    35    75  1304     0      60  )
 53348    75   746    13    75  1304     0     111  put
 53349    75   746    16    75  1304     0      59  (
 53350    75   746    17    75  1304     0     111  src.get
 53351    75   746    24    75  1304     0      59  (
 53352    75   746    25    75  1304     0      60  )
 53353    75   746    26    75  1304     0      60  )
 53354    75   746    27    75  1304     0     102  ;
 53355    75   747     9    75  1304     0      19  return
 53356    75   747    16    75  1304     0      44  this
 53357    75   747    20    75  1304     0     102  ;
 53358    75   748     5    75  1304     0      64  }
 53359    75   748     5    75  1304     0    3032  ENDMETHOD
 53360    75   748     5    75  1305     0    3033  STARTMETHOD
 53361    75   800    12    75  1305     0     111  LongBuffer
 53362    75   800    23    75  1305     0     111  put
 53363    75   800    26    75  1305     0      59  (
 53364    75   800    27    75  1305     0      53  long
 53365    75   800    31    75  1305     0      61  [
 53366    75   800    32    75  1305     0      62  ]
 53367    75   800    34    75  1305     0     111  src
 53368    75   800    37    75  1305     0      66  ,
 53369    75   800    39    75  1305     0      36  int
 53370    75   800    43    75  1305     0     111  offset
 53371    75   800    49    75  1305     0      66  ,
 53372    75   800    51    75  1305     0      36  int
 53373    75   800    55    75  1305     0     111  length
 53374    75   800    61    75  1305     0      60  )
 53375    75   800    63    75  1305     0      63  {
 53376    75   801     9    75  1305     0     111  checkBounds
 53377    75   801    20    75  1305     0      59  (
 53378    75   801    21    75  1305     0     111  offset
 53379    75   801    27    75  1305     0      66  ,
 53380    75   801    29    75  1305     0     111  length
 53381    75   801    35    75  1305     0      66  ,
 53382    75   801    37    75  1305     0     111  src.length
 53383    75   801    47    75  1305     0      60  )
 53384    75   801    48    75  1305     0     102  ;
 53385    75   802     9    75  1305     0      31  if
 53386    75   802    12    75  1305     0      59  (
 53387    75   802    13    75  1305     0     111  length
 53388    75   802    20    75  1305     0      89  >
 53389    75   802    22    75  1305     0     111  remaining
 53390    75   802    31    75  1305     0      59  (
 53391    75   802    32    75  1305     0      60  )
 53392    75   802    33    75  1305     0      60  )
 53393    75   803    13    75  1305     0      20  throw
 53394    75   803    23    75  1305     0     111  BufferOverflowException
 53395    75   803    46    75  1305     0      59  (
 53396    75   803    47    75  1305     0      60  )
 53397    75   803    48    75  1305     0     102  ;
 53398    75   804     9    75  1305     0      36  int
 53399    75   804    13    75  1305     0     111  end
 53400    75   804    17    75  1305     0      67  =
 53401    75   804    19    75  1305     0     111  offset
 53402    75   804    26    75  1305     0      74  +
 53403    75   804    28    75  1305     0     111  length
 53404    75   804    34    75  1305     0     102  ;
 53405    75   805     9    75  1305     0      37  for
 53406    75   805    13    75  1305     0      59  (
 53407    75   805    14    75  1305     0      36  int
 53408    75   805    18    75  1305     0     111  i
 53409    75   805    20    75  1305     0      67  =
 53410    75   805    22    75  1305     0     111  offset
 53411    75   805    28    75  1305     0     102  ;
 53412    75   805    30    75  1305     0     111  i
 53413    75   805    32    75  1305     0      93  <
 53414    75   805    34    75  1305     0     111  end
 53415    75   805    37    75  1305     0     102  ;
 53416    75   805    39    75  1305     0     111  i
 53417    75   805    40    75  1305     0      76  ++
 53418    75   805    42    75  1305     0      60  )
 53419    75   806    13    75  1305     0     111  this.put
 53420    75   806    21    75  1305     0      59  (
 53421    75   806    22    75  1305     0     111  src
 53422    75   806    25    75  1305     0      61  [
 53423    75   806    26    75  1305     0     111  i
 53424    75   806    27    75  1305     0      62  ]
 53425    75   806    28    75  1305     0      60  )
 53426    75   806    29    75  1305     0     102  ;
 53427    75   807     9    75  1305     0      19  return
 53428    75   807    16    75  1305     0      44  this
 53429    75   807    20    75  1305     0     102  ;
 53430    75   808     5    75  1305     0      64  }
 53431    75   808     5    75  1305     0    3034  ENDMETHOD
 53432    75   808     5    75  1306     0    3035  STARTMETHOD
 53433    75   829    18    75  1306     0     111  LongBuffer
 53434    75   829    29    75  1306     0     111  put
 53435    75   829    32    75  1306     0      59  (
 53436    75   829    33    75  1306     0      53  long
 53437    75   829    37    75  1306     0      61  [
 53438    75   829    38    75  1306     0      62  ]
 53439    75   829    40    75  1306     0     111  src
 53440    75   829    43    75  1306     0      60  )
 53441    75   829    45    75  1306     0      63  {
 53442    75   830     9    75  1306     0      19  return
 53443    75   830    16    75  1306     0     111  put
 53444    75   830    19    75  1306     0      59  (
 53445    75   830    20    75  1306     0     111  src
 53446    75   830    23    75  1306     0      66  ,
 53447    75   830    25    75  1306     0     112  0
 53448    75   830    26    75  1306     0      66  ,
 53449    75   830    28    75  1306     0     111  src.length
 53450    75   830    38    75  1306     0      60  )
 53451    75   830    39    75  1306     0     102  ;
 53452    75   831     5    75  1306     0      64  }
 53453    75   831     5    75  1306     0    3036  ENDMETHOD
 53454    75   831     5    75  1307     0    3037  STARTMETHOD
 53455    75   932    18    75  1307     0      39  boolean
 53456    75   932    26    75  1307     0     111  hasArray
 53457    75   932    34    75  1307     0      59  (
 53458    75   932    35    75  1307     0      60  )
 53459    75   932    37    75  1307     0      63  {
 53460    75   933     9    75  1307     0      19  return
 53461    75   933    16    75  1307     0      59  (
 53462    75   933    17    75  1307     0     111  hb
 53463    75   933    20    75  1307     0      71  !=
 53464    75   933    23    75  1307     0      21  null
 53465    75   933    27    75  1307     0      60  )
 53466    75   933    29    75  1307     0     101  &&
 53467    75   933    32    75  1307     0      69  !
 53468    75   933    33    75  1307     0     111  isReadOnly
 53469    75   933    43    75  1307     0     102  ;
 53470    75   934     5    75  1307     0      64  }
 53471    75   934     5    75  1307     0    3038  ENDMETHOD
 53472    75   934     5    75  1308     0    3039  STARTMETHOD
 53473    75   955    18    75  1308     0      53  long
 53474    75   955    22    75  1308     0      61  [
 53475    75   955    23    75  1308     0      62  ]
 53476    75   955    25    75  1308     0     111  array
 53477    75   955    30    75  1308     0      59  (
 53478    75   955    31    75  1308     0      60  )
 53479    75   955    33    75  1308     0      63  {
 53480    75   956     9    75  1308     0      31  if
 53481    75   956    12    75  1308     0      59  (
 53482    75   956    13    75  1308     0     111  hb
 53483    75   956    16    75  1308     0      68  ==
 53484    75   956    19    75  1308     0      21  null
 53485    75   956    23    75  1308     0      60  )
 53486    75   957    13    75  1308     0      20  throw
 53487    75   957    23    75  1308     0     111  UnsupportedOperationException
 53488    75   957    52    75  1308     0      59  (
 53489    75   957    53    75  1308     0      60  )
 53490    75   957    54    75  1308     0     102  ;
 53491    75   958     9    75  1308     0      31  if
 53492    75   958    12    75  1308     0      59  (
 53493    75   958    13    75  1308     0     111  isReadOnly
 53494    75   958    23    75  1308     0      60  )
 53495    75   959    13    75  1308     0      20  throw
 53496    75   959    23    75  1308     0     111  ReadOnlyBufferException
 53497    75   959    46    75  1308     0      59  (
 53498    75   959    47    75  1308     0      60  )
 53499    75   959    48    75  1308     0     102  ;
 53500    75   960     9    75  1308     0      19  return
 53501    75   960    16    75  1308     0     111  hb
 53502    75   960    18    75  1308     0     102  ;
 53503    75   961     5    75  1308     0      64  }
 53504    75   961     5    75  1308     0    3040  ENDMETHOD
 53505    75   961     5    75  1309     0    3041  STARTMETHOD
 53506    75   983    18    75  1309     0      36  int
 53507    75   983    22    75  1309     0     111  arrayOffset
 53508    75   983    33    75  1309     0      59  (
 53509    75   983    34    75  1309     0      60  )
 53510    75   983    36    75  1309     0      63  {
 53511    75   984     9    75  1309     0      31  if
 53512    75   984    12    75  1309     0      59  (
 53513    75   984    13    75  1309     0     111  hb
 53514    75   984    16    75  1309     0      68  ==
 53515    75   984    19    75  1309     0      21  null
 53516    75   984    23    75  1309     0      60  )
 53517    75   985    13    75  1309     0      20  throw
 53518    75   985    23    75  1309     0     111  UnsupportedOperationException
 53519    75   985    52    75  1309     0      59  (
 53520    75   985    53    75  1309     0      60  )
 53521    75   985    54    75  1309     0     102  ;
 53522    75   986     9    75  1309     0      31  if
 53523    75   986    12    75  1309     0      59  (
 53524    75   986    13    75  1309     0     111  isReadOnly
 53525    75   986    23    75  1309     0      60  )
 53526    75   987    13    75  1309     0      20  throw
 53527    75   987    23    75  1309     0     111  ReadOnlyBufferException
 53528    75   987    46    75  1309     0      59  (
 53529    75   987    47    75  1309     0      60  )
 53530    75   987    48    75  1309     0     102  ;
 53531    75   988     9    75  1309     0      19  return
 53532    75   988    16    75  1309     0     111  offset
 53533    75   988    22    75  1309     0     102  ;
 53534    75   989     5    75  1309     0      64  }
 53535    75   989     5    75  1309     0    3042  ENDMETHOD
 53536    75  1030    21    75    -1     0     111  LongBuffer
 53537    75  1030    32    75    -1     0     111  compact
 53538    75  1030    39    75    -1     0      59  (
 53539    75  1030    40    75    -1     0      60  )
 53540    75  1030    41    75    -1     0     102  ;
 53541    75  1037    21    75    -1     0      39  boolean
 53542    75  1037    29    75    -1     0     111  isDirect
 53543    75  1037    37    75    -1     0      59  (
 53544    75  1037    38    75    -1     0      60  )
 53545    75  1037    39    75    -1     0     102  ;
 53546    75  1037    39    75  1310     0    3043  STARTMETHOD
 53547    75  1046    12    75  1310     0     111  String
 53548    75  1046    19    75  1310     0     111  toString
 53549    75  1046    27    75  1310     0      59  (
 53550    75  1046    28    75  1310     0      60  )
 53551    75  1046    30    75  1310     0      63  {
 53552    75  1047     9    75  1310     0     111  StringBuffer
 53553    75  1047    22    75  1310     0     111  sb
 53554    75  1047    25    75  1310     0      67  =
 53555    75  1047    31    75  1310     0     111  StringBuffer
 53556    75  1047    43    75  1310     0      59  (
 53557    75  1047    44    75  1310     0      60  )
 53558    75  1047    45    75  1310     0     102  ;
 53559    75  1048     9    75  1310     0     111  sb.append
 53560    75  1048    18    75  1310     0      59  (
 53561    75  1048    19    75  1310     0     111  getClass
 53562    75  1048    27    75  1310     0      59  (
 53563    75  1048    28    75  1310     0      60  )
 53564    75  1048    29    75  1310     0      54  .
 53565    75  1048    30    75  1310     0     111  getName
 53566    75  1048    37    75  1310     0      59  (
 53567    75  1048    38    75  1310     0      60  )
 53568    75  1048    39    75  1310     0      60  )
 53569    75  1048    40    75  1310     0     102  ;
 53570    75  1049     9    75  1310     0     111  sb.append
 53571    75  1049    18    75  1310     0      59  (
 53572    75  1049    19    75  1310     0     107  "[pos="
 53573    75  1049    26    75  1310     0      60  )
 53574    75  1049    27    75  1310     0     102  ;
 53575    75  1050     9    75  1310     0     111  sb.append
 53576    75  1050    18    75  1310     0      59  (
 53577    75  1050    19    75  1310     0     111  position
 53578    75  1050    27    75  1310     0      59  (
 53579    75  1050    28    75  1310     0      60  )
 53580    75  1050    29    75  1310     0      60  )
 53581    75  1050    30    75  1310     0     102  ;
 53582    75  1051     9    75  1310     0     111  sb.append
 53583    75  1051    18    75  1310     0      59  (
 53584    75  1051    19    75  1310     0     107  " lim="
 53585    75  1051    26    75  1310     0      60  )
 53586    75  1051    27    75  1310     0     102  ;
 53587    75  1052     9    75  1310     0     111  sb.append
 53588    75  1052    18    75  1310     0      59  (
 53589    75  1052    19    75  1310     0     111  limit
 53590    75  1052    24    75  1310     0      59  (
 53591    75  1052    25    75  1310     0      60  )
 53592    75  1052    26    75  1310     0      60  )
 53593    75  1052    27    75  1310     0     102  ;
 53594    75  1053     9    75  1310     0     111  sb.append
 53595    75  1053    18    75  1310     0      59  (
 53596    75  1053    19    75  1310     0     107  " cap="
 53597    75  1053    26    75  1310     0      60  )
 53598    75  1053    27    75  1310     0     102  ;
 53599    75  1054     9    75  1310     0     111  sb.append
 53600    75  1054    18    75  1310     0      59  (
 53601    75  1054    19    75  1310     0     111  capacity
 53602    75  1054    27    75  1310     0      59  (
 53603    75  1054    28    75  1310     0      60  )
 53604    75  1054    29    75  1310     0      60  )
 53605    75  1054    30    75  1310     0     102  ;
 53606    75  1055     9    75  1310     0     111  sb.append
 53607    75  1055    18    75  1310     0      59  (
 53608    75  1055    19    75  1310     0     107  "]"
 53609    75  1055    22    75  1310     0      60  )
 53610    75  1055    23    75  1310     0     102  ;
 53611    75  1056     9    75  1310     0      19  return
 53612    75  1056    16    75  1310     0     111  sb.toString
 53613    75  1056    27    75  1310     0      59  (
 53614    75  1056    28    75  1310     0      60  )
 53615    75  1056    29    75  1310     0     102  ;
 53616    75  1057     5    75  1310     0      64  }
 53617    75  1057     5    75  1310     0    3044  ENDMETHOD
 53618    75  1057     5    75  1311     0    3045  STARTMETHOD
 53619    75  1077    12    75  1311     0      36  int
 53620    75  1077    16    75  1311     0     111  hashCode
 53621    75  1077    24    75  1311     0      59  (
 53622    75  1077    25    75  1311     0      60  )
 53623    75  1077    27    75  1311     0      63  {
 53624    75  1078     9    75  1311     0      36  int
 53625    75  1078    13    75  1311     0     111  h
 53626    75  1078    15    75  1311     0      67  =
 53627    75  1078    17    75  1311     0     112  1
 53628    75  1078    18    75  1311     0     102  ;
 53629    75  1079     9    75  1311     0      36  int
 53630    75  1079    13    75  1311     0     111  p
 53631    75  1079    15    75  1311     0      67  =
 53632    75  1079    17    75  1311     0     111  position
 53633    75  1079    25    75  1311     0      59  (
 53634    75  1079    26    75  1311     0      60  )
 53635    75  1079    27    75  1311     0     102  ;
 53636    75  1080     9    75  1311     0      37  for
 53637    75  1080    13    75  1311     0      59  (
 53638    75  1080    14    75  1311     0      36  int
 53639    75  1080    18    75  1311     0     111  i
 53640    75  1080    20    75  1311     0      67  =
 53641    75  1080    22    75  1311     0     111  limit
 53642    75  1080    27    75  1311     0      59  (
 53643    75  1080    28    75  1311     0      60  )
 53644    75  1080    30    75  1311     0      77  -
 53645    75  1080    32    75  1311     0     112  1
 53646    75  1080    33    75  1311     0     102  ;
 53647    75  1080    35    75  1311     0     111  i
 53648    75  1080    37    75  1311     0      88  >=
 53649    75  1080    40    75  1311     0     111  p
 53650    75  1080    41    75  1311     0     102  ;
 53651    75  1080    43    75  1311     0     111  i
 53652    75  1080    44    75  1311     0      79  --
 53653    75  1080    46    75  1311     0      60  )
 53654    75  1081    13    75  1311     0     111  h
 53655    75  1081    15    75  1311     0      67  =
 53656    75  1081    17    75  1311     0     112  31
 53657    75  1081    20    75  1311     0      80  *
 53658    75  1081    22    75  1311     0     111  h
 53659    75  1081    24    75  1311     0      74  +
 53660    75  1081    26    75  1311     0      59  (
 53661    75  1081    27    75  1311     0      36  int
 53662    75  1081    30    75  1311     0      60  )
 53663    75  1081    31    75  1311     0     111  get
 53664    75  1081    34    75  1311     0      59  (
 53665    75  1081    35    75  1311     0     111  i
 53666    75  1081    36    75  1311     0      60  )
 53667    75  1081    37    75  1311     0     102  ;
 53668    75  1082     9    75  1311     0      19  return
 53669    75  1082    16    75  1311     0     111  h
 53670    75  1082    17    75  1311     0     102  ;
 53671    75  1083     5    75  1311     0      64  }
 53672    75  1083     5    75  1311     0    3046  ENDMETHOD
 53673    75  1083     5    75  1312     0    3047  STARTMETHOD
 53674    75  1110    12    75  1312     0      39  boolean
 53675    75  1110    20    75  1312     0     111  equals
 53676    75  1110    26    75  1312     0      59  (
 53677    75  1110    27    75  1312     0     111  Object
 53678    75  1110    34    75  1312     0     111  ob
 53679    75  1110    36    75  1312     0      60  )
 53680    75  1110    38    75  1312     0      63  {
 53681    75  1111     9    75  1312     0      31  if
 53682    75  1111    12    75  1312     0      59  (
 53683    75  1111    13    75  1312     0      44  this
 53684    75  1111    18    75  1312     0      68  ==
 53685    75  1111    21    75  1312     0     111  ob
 53686    75  1111    23    75  1312     0      60  )
 53687    75  1112    13    75  1312     0      19  return
 53688    75  1112    20    75  1312     0      52  true
 53689    75  1112    24    75  1312     0     102  ;
 53690    75  1113     9    75  1312     0      31  if
 53691    75  1113    12    75  1312     0      59  (
 53692    75  1113    13    75  1312     0      69  !
 53693    75  1113    14    75  1312     0      59  (
 53694    75  1113    15    75  1312     0     111  ob
 53695    75  1113    29    75  1312     0     111  LongBuffer
 53696    75  1113    39    75  1312     0      60  )
 53697    75  1113    40    75  1312     0      60  )
 53698    75  1114    13    75  1312     0      19  return
 53699    75  1114    20    75  1312     0      43  false
 53700    75  1114    25    75  1312     0     102  ;
 53701    75  1115     9    75  1312     0     111  LongBuffer
 53702    75  1115    20    75  1312     0     111  that
 53703    75  1115    25    75  1312     0      67  =
 53704    75  1115    27    75  1312     0      59  (
 53705    75  1115    28    75  1312     0     111  LongBuffer
 53706    75  1115    38    75  1312     0      60  )
 53707    75  1115    39    75  1312     0     111  ob
 53708    75  1115    41    75  1312     0     102  ;
 53709    75  1116     9    75  1312     0      31  if
 53710    75  1116    12    75  1312     0      59  (
 53711    75  1116    13    75  1312     0     111  this.remaining
 53712    75  1116    27    75  1312     0      59  (
 53713    75  1116    28    75  1312     0      60  )
 53714    75  1116    30    75  1312     0      71  !=
 53715    75  1116    33    75  1312     0     111  that.remaining
 53716    75  1116    47    75  1312     0      59  (
 53717    75  1116    48    75  1312     0      60  )
 53718    75  1116    49    75  1312     0      60  )
 53719    75  1117    13    75  1312     0      19  return
 53720    75  1117    20    75  1312     0      43  false
 53721    75  1117    25    75  1312     0     102  ;
 53722    75  1118     9    75  1312     0      36  int
 53723    75  1118    13    75  1312     0     111  p
 53724    75  1118    15    75  1312     0      67  =
 53725    75  1118    17    75  1312     0     111  this.position
 53726    75  1118    30    75  1312     0      59  (
 53727    75  1118    31    75  1312     0      60  )
 53728    75  1118    32    75  1312     0     102  ;
 53729    75  1119     9    75  1312     0      37  for
 53730    75  1119    13    75  1312     0      59  (
 53731    75  1119    14    75  1312     0      36  int
 53732    75  1119    18    75  1312     0     111  i
 53733    75  1119    20    75  1312     0      67  =
 53734    75  1119    22    75  1312     0     111  this.limit
 53735    75  1119    32    75  1312     0      59  (
 53736    75  1119    33    75  1312     0      60  )
 53737    75  1119    35    75  1312     0      77  -
 53738    75  1119    37    75  1312     0     112  1
 53739    75  1119    38    75  1312     0      66  ,
 53740    75  1119    40    75  1312     0     111  j
 53741    75  1119    42    75  1312     0      67  =
 53742    75  1119    44    75  1312     0     111  that.limit
 53743    75  1119    54    75  1312     0      59  (
 53744    75  1119    55    75  1312     0      60  )
 53745    75  1119    57    75  1312     0      77  -
 53746    75  1119    59    75  1312     0     112  1
 53747    75  1119    60    75  1312     0     102  ;
 53748    75  1119    62    75  1312     0     111  i
 53749    75  1119    64    75  1312     0      88  >=
 53750    75  1119    67    75  1312     0     111  p
 53751    75  1119    68    75  1312     0     102  ;
 53752    75  1119    70    75  1312     0     111  i
 53753    75  1119    71    75  1312     0      79  --
 53754    75  1119    73    75  1312     0      66  ,
 53755    75  1119    75    75  1312     0     111  j
 53756    75  1119    76    75  1312     0      79  --
 53757    75  1119    78    75  1312     0      60  )
 53758    75  1119    80    75  1312     0      63  {
 53759    75  1120    13    75  1312     1      53  long
 53760    75  1120    18    75  1312     1     111  v1
 53761    75  1120    21    75  1312     1      67  =
 53762    75  1120    23    75  1312     1     111  this.get
 53763    75  1120    31    75  1312     1      59  (
 53764    75  1120    32    75  1312     1     111  i
 53765    75  1120    33    75  1312     1      60  )
 53766    75  1120    34    75  1312     1     102  ;
 53767    75  1121    13    75  1312     1      53  long
 53768    75  1121    18    75  1312     1     111  v2
 53769    75  1121    21    75  1312     1      67  =
 53770    75  1121    23    75  1312     1     111  that.get
 53771    75  1121    31    75  1312     1      59  (
 53772    75  1121    32    75  1312     1     111  j
 53773    75  1121    33    75  1312     1      60  )
 53774    75  1121    34    75  1312     1     102  ;
 53775    75  1122    13    75  1312     0      31  if
 53776    75  1122    16    75  1312     0      59  (
 53777    75  1122    17    75  1312     0     111  v1
 53778    75  1122    20    75  1312     0      71  !=
 53779    75  1122    23    75  1312     0     111  v2
 53780    75  1122    25    75  1312     0      60  )
 53781    75  1122    27    75  1312     0      63  {
 53782    75  1123    17    75  1312     0      31  if
 53783    75  1123    20    75  1312     0      59  (
 53784    75  1123    21    75  1312     0      59  (
 53785    75  1123    22    75  1312     0     111  v1
 53786    75  1123    25    75  1312     0      71  !=
 53787    75  1123    28    75  1312     0     111  v1
 53788    75  1123    30    75  1312     0      60  )
 53789    75  1123    32    75  1312     0     101  &&
 53790    75  1123    35    75  1312     0      59  (
 53791    75  1123    36    75  1312     0     111  v2
 53792    75  1123    39    75  1312     0      71  !=
 53793    75  1123    42    75  1312     0     111  v2
 53794    75  1123    44    75  1312     0      60  )
 53795    75  1123    45    75  1312     0      60  )
 53796    75  1124    21    75  1312     0      46  continue
 53797    75  1124    29    75  1312     0     102  ;
 53798    75  1125    17    75  1312     0      19  return
 53799    75  1125    24    75  1312     0      43  false
 53800    75  1125    29    75  1312     0     102  ;
 53801    75  1126    13    75  1312     1      64  }
 53802    75  1127     9    75  1312     1      64  }
 53803    75  1128     9    75  1312     0      19  return
 53804    75  1128    16    75  1312     0      52  true
 53805    75  1128    20    75  1312     0     102  ;
 53806    75  1129     5    75  1312     0      64  }
 53807    75  1129     5    75  1312     0    3048  ENDMETHOD
 53808    75  1129     5    75  1313     0    3049  STARTMETHOD
 53809    75  1143    12    75  1313     0      36  int
 53810    75  1143    16    75  1313     0     111  compareTo
 53811    75  1143    25    75  1313     0      59  (
 53812    75  1143    26    75  1313     0     111  LongBuffer
 53813    75  1143    37    75  1313     0     111  that
 53814    75  1143    41    75  1313     0      60  )
 53815    75  1143    43    75  1313     0      63  {
 53816    75  1144     9    75  1313     0      36  int
 53817    75  1144    13    75  1313     0     111  n
 53818    75  1144    15    75  1313     0      67  =
 53819    75  1144    17    75  1313     0     111  this.position
 53820    75  1144    30    75  1313     0      59  (
 53821    75  1144    31    75  1313     0      60  )
 53822    75  1144    33    75  1313     0      74  +
 53823    75  1144    35    75  1313     0     111  Math.min
 53824    75  1144    43    75  1313     0      59  (
 53825    75  1144    44    75  1313     0     111  this.remaining
 53826    75  1144    58    75  1313     0      59  (
 53827    75  1144    59    75  1313     0      60  )
 53828    75  1144    60    75  1313     0      66  ,
 53829    75  1144    62    75  1313     0     111  that.remaining
 53830    75  1144    76    75  1313     0      59  (
 53831    75  1144    77    75  1313     0      60  )
 53832    75  1144    78    75  1313     0      60  )
 53833    75  1144    79    75  1313     0     102  ;
 53834    75  1145     9    75  1313     0      37  for
 53835    75  1145    13    75  1313     0      59  (
 53836    75  1145    14    75  1313     0      36  int
 53837    75  1145    18    75  1313     0     111  i
 53838    75  1145    20    75  1313     0      67  =
 53839    75  1145    22    75  1313     0     111  this.position
 53840    75  1145    35    75  1313     0      59  (
 53841    75  1145    36    75  1313     0      60  )
 53842    75  1145    37    75  1313     0      66  ,
 53843    75  1145    39    75  1313     0     111  j
 53844    75  1145    41    75  1313     0      67  =
 53845    75  1145    43    75  1313     0     111  that.position
 53846    75  1145    56    75  1313     0      59  (
 53847    75  1145    57    75  1313     0      60  )
 53848    75  1145    58    75  1313     0     102  ;
 53849    75  1145    60    75  1313     0     111  i
 53850    75  1145    62    75  1313     0      93  <
 53851    75  1145    64    75  1313     0     111  n
 53852    75  1145    65    75  1313     0     102  ;
 53853    75  1145    67    75  1313     0     111  i
 53854    75  1145    68    75  1313     0      76  ++
 53855    75  1145    70    75  1313     0      66  ,
 53856    75  1145    72    75  1313     0     111  j
 53857    75  1145    73    75  1313     0      76  ++
 53858    75  1145    75    75  1313     0      60  )
 53859    75  1145    77    75  1313     0      63  {
 53860    75  1146    13    75  1313     1      53  long
 53861    75  1146    18    75  1313     1     111  v1
 53862    75  1146    21    75  1313     1      67  =
 53863    75  1146    23    75  1313     1     111  this.get
 53864    75  1146    31    75  1313     1      59  (
 53865    75  1146    32    75  1313     1     111  i
 53866    75  1146    33    75  1313     1      60  )
 53867    75  1146    34    75  1313     1     102  ;
 53868    75  1147    13    75  1313     1      53  long
 53869    75  1147    18    75  1313     1     111  v2
 53870    75  1147    21    75  1313     1      67  =
 53871    75  1147    23    75  1313     1     111  that.get
 53872    75  1147    31    75  1313     1      59  (
 53873    75  1147    32    75  1313     1     111  j
 53874    75  1147    33    75  1313     1      60  )
 53875    75  1147    34    75  1313     1     102  ;
 53876    75  1148    13    75  1313     0      31  if
 53877    75  1148    16    75  1313     0      59  (
 53878    75  1148    17    75  1313     0     111  v1
 53879    75  1148    20    75  1313     0      68  ==
 53880    75  1148    23    75  1313     0     111  v2
 53881    75  1148    25    75  1313     0      60  )
 53882    75  1149    17    75  1313     0      46  continue
 53883    75  1149    25    75  1313     0     102  ;
 53884    75  1150    13    75  1313     0      31  if
 53885    75  1150    16    75  1313     0      59  (
 53886    75  1150    17    75  1313     0      59  (
 53887    75  1150    18    75  1313     0     111  v1
 53888    75  1150    21    75  1313     0      71  !=
 53889    75  1150    24    75  1313     0     111  v1
 53890    75  1150    26    75  1313     0      60  )
 53891    75  1150    28    75  1313     0     101  &&
 53892    75  1150    31    75  1313     0      59  (
 53893    75  1150    32    75  1313     0     111  v2
 53894    75  1150    35    75  1313     0      71  !=
 53895    75  1150    38    75  1313     0     111  v2
 53896    75  1150    40    75  1313     0      60  )
 53897    75  1150    41    75  1313     0      60  )
 53898    75  1151    17    75  1313     0      46  continue
 53899    75  1151    25    75  1313     0     102  ;
 53900    75  1152    13    75  1313     0      31  if
 53901    75  1152    16    75  1313     0      59  (
 53902    75  1152    17    75  1313     0     111  v1
 53903    75  1152    20    75  1313     0      93  <
 53904    75  1152    22    75  1313     0     111  v2
 53905    75  1152    24    75  1313     0      60  )
 53906    75  1153    17    75  1313     0      19  return
 53907    75  1153    24    75  1313     0      77  -
 53908    75  1153    25    75  1313     0     112  1
 53909    75  1153    26    75  1313     0     102  ;
 53910    75  1154    13    75  1313     0      19  return
 53911    75  1154    20    75  1313     0      74  +
 53912    75  1154    21    75  1313     0     112  1
 53913    75  1154    22    75  1313     0     102  ;
 53914    75  1155     9    75  1313     0      64  }
 53915    75  1156     9    75  1313     0      19  return
 53916    75  1156    16    75  1313     0     111  this.remaining
 53917    75  1156    30    75  1313     0      59  (
 53918    75  1156    31    75  1313     0      60  )
 53919    75  1156    33    75  1313     0      77  -
 53920    75  1156    35    75  1313     0     111  that.remaining
 53921    75  1156    49    75  1313     0      59  (
 53922    75  1156    50    75  1313     0      60  )
 53923    75  1156    51    75  1313     0     102  ;
 53924    75  1157     5    75  1313     0      64  }
 53925    75  1157     5    75  1313     0    3050  ENDMETHOD
 53926    75  1372    21    75    -1     0     111  ByteOrder
 53927    75  1372    31    75    -1     0     111  order
 53928    75  1372    36    75    -1     0      59  (
 53929    75  1372    37    75    -1     0      60  )
 53930    75  1372    38    75    -1     0     102  ;
 53931    75  1426     1    75    -1     0      64  }
 53932    75  1426     1    75    -1     1    3051  ENDCLASS
 53933    75  1426     1    -1    -1     1    3052  ENDFILE C:\Users\RA\javasrc\java\nio\LongBuffer.java
 53934    76     1     1    -1    -1     1    3053  STARTFILE C:\Users\RA\javasrc\java\nio\MappedByteBuffer.java
 53935    76    26     9    -1    -1     0     111  java.nio
 53936    76    26    17    -1    -1     0     102  ;
 53937    76    63    17    76    -1     0    3054  STARTCLASS
 53938    76    63    17    76    -1     0      24  class
 53939    76    63    23    76    -1     0     111  MappedByteBuffer
 53940    76    64     5    76    -1     0      38  extends
 53941    76    64    13    76    -1     0     111  ByteBuffer
 53942    76    65     1    76    -1     0      63  {
 53943    76    74     5    76    -1     0      33  volatile
 53944    76    74    14    76    -1     0      39  boolean
 53945    76    74    22    76    -1     0     111  isAMappedBuffer
 53946    76    74    37    76    -1     0     102  ;
 53947    76    74    37    76  1314     0    3055  STARTMETHOD
 53948    76    78     5    76  1314     0     111  MappedByteBuffer
 53949    76    78    21    76  1314     0      59  (
 53950    76    78    22    76  1314     0      36  int
 53951    76    78    26    76  1314     0     111  mark
 53952    76    78    30    76  1314     0      66  ,
 53953    76    78    32    76  1314     0      36  int
 53954    76    78    36    76  1314     0     111  pos
 53955    76    78    39    76  1314     0      66  ,
 53956    76    78    41    76  1314     0      36  int
 53957    76    78    45    76  1314     0     111  lim
 53958    76    78    48    76  1314     0      66  ,
 53959    76    78    50    76  1314     0      36  int
 53960    76    78    54    76  1314     0     111  cap
 53961    76    78    57    76  1314     0      66  ,
 53962    76    79    22    76  1314     0      39  boolean
 53963    76    79    30    76  1314     0     111  mapped
 53964    76    79    36    76  1314     0      60  )
 53965    76    80     5    76  1314     0      63  {
 53966    76    81     9    76  1314     0      27  super
 53967    76    81    14    76  1314     0      59  (
 53968    76    81    15    76  1314     0     111  mark
 53969    76    81    19    76  1314     0      66  ,
 53970    76    81    21    76  1314     0     111  pos
 53971    76    81    24    76  1314     0      66  ,
 53972    76    81    26    76  1314     0     111  lim
 53973    76    81    29    76  1314     0      66  ,
 53974    76    81    31    76  1314     0     111  cap
 53975    76    81    34    76  1314     0      60  )
 53976    76    81    35    76  1314     0     102  ;
 53977    76    82     9    76  1314     0     111  isAMappedBuffer
 53978    76    82    25    76  1314     0      67  =
 53979    76    82    27    76  1314     0     111  mapped
 53980    76    82    33    76  1314     0     102  ;
 53981    76    83     5    76  1314     0      64  }
 53982    76    83     5    76  1314     0    3056  ENDMETHOD
 53983    76    83     5    76  1315     0    3057  STARTMETHOD
 53984    76    85     5    76  1315     0     111  MappedByteBuffer
 53985    76    85    21    76  1315     0      59  (
 53986    76    85    22    76  1315     0      36  int
 53987    76    85    26    76  1315     0     111  mark
 53988    76    85    30    76  1315     0      66  ,
 53989    76    85    32    76  1315     0      36  int
 53990    76    85    36    76  1315     0     111  pos
 53991    76    85    39    76  1315     0      66  ,
 53992    76    85    41    76  1315     0      36  int
 53993    76    85    45    76  1315     0     111  lim
 53994    76    85    48    76  1315     0      66  ,
 53995    76    85    50    76  1315     0      36  int
 53996    76    85    54    76  1315     0     111  cap
 53997    76    85    57    76  1315     0      60  )
 53998    76    85    59    76  1315     0      63  {
 53999    76    86     9    76  1315     0      27  super
 54000    76    86    14    76  1315     0      59  (
 54001    76    86    15    76  1315     0     111  mark
 54002    76    86    19    76  1315     0      66  ,
 54003    76    86    21    76  1315     0     111  pos
 54004    76    86    24    76  1315     0      66  ,
 54005    76    86    26    76  1315     0     111  lim
 54006    76    86    29    76  1315     0      66  ,
 54007    76    86    31    76  1315     0     111  cap
 54008    76    86    34    76  1315     0      60  )
 54009    76    86    35    76  1315     0     102  ;
 54010    76    87     9    76  1315     0     111  isAMappedBuffer
 54011    76    87    25    76  1315     0      67  =
 54012    76    87    27    76  1315     0      43  false
 54013    76    87    32    76  1315     0     102  ;
 54014    76    88     5    76  1315     0      64  }
 54015    76    88     5    76  1315     0    3058  ENDMETHOD
 54016    76    88     5    76  1316     0    3059  STARTMETHOD
 54017    76    90     5    76  1316     0      41  private
 54018    76    90    13    76  1316     0      50  void
 54019    76    90    18    76  1316     0     111  checkMapped
 54020    76    90    29    76  1316     0      59  (
 54021    76    90    30    76  1316     0      60  )
 54022    76    90    32    76  1316     0      63  {
 54023    76    91     9    76  1316     0      31  if
 54024    76    91    12    76  1316     0      59  (
 54025    76    91    13    76  1316     0      69  !
 54026    76    91    14    76  1316     0     111  isAMappedBuffer
 54027    76    91    29    76  1316     0      60  )
 54028    76    93    13    76  1316     0      20  throw
 54029    76    93    23    76  1316     0     111  UnsupportedOperationException
 54030    76    93    52    76  1316     0      59  (
 54031    76    93    53    76  1316     0      60  )
 54032    76    93    54    76  1316     0     102  ;
 54033    76    94     5    76  1316     0      64  }
 54034    76    94     5    76  1316     0    3060  ENDMETHOD
 54035    76    94     5    76  1317     0    3061  STARTMETHOD
 54036    76   114    18    76  1317     0      39  boolean
 54037    76   114    26    76  1317     0     111  isLoaded
 54038    76   114    34    76  1317     0      59  (
 54039    76   114    35    76  1317     0      60  )
 54040    76   114    37    76  1317     0      63  {
 54041    76   115     9    76  1317     0     111  checkMapped
 54042    76   115    20    76  1317     0      59  (
 54043    76   115    21    76  1317     0      60  )
 54044    76   115    22    76  1317     0     102  ;
 54045    76   116     9    76  1317     0      31  if
 54046    76   116    12    76  1317     0      59  (
 54047    76   116    13    76  1317     0      59  (
 54048    76   116    14    76  1317     0     111  address
 54049    76   116    22    76  1317     0      68  ==
 54050    76   116    25    76  1317     0     112  0
 54051    76   116    26    76  1317     0      60  )
 54052    76   116    28    76  1317     0      98  ||
 54053    76   116    31    76  1317     0      59  (
 54054    76   116    32    76  1317     0     111  capacity
 54055    76   116    40    76  1317     0      59  (
 54056    76   116    41    76  1317     0      60  )
 54057    76   116    43    76  1317     0      68  ==
 54058    76   116    46    76  1317     0     112  0
 54059    76   116    47    76  1317     0      60  )
 54060    76   116    48    76  1317     0      60  )
 54061    76   117    13    76  1317     0      19  return
 54062    76   117    20    76  1317     0      52  true
 54063    76   117    24    76  1317     0     102  ;
 54064    76   118     9    76  1317     0      19  return
 54065    76   118    16    76  1317     0     111  isLoaded0
 54066    76   118    25    76  1317     0      59  (
 54067    76   118    26    76  1317     0      59  (
 54068    76   118    27    76  1317     0      59  (
 54069    76   118    28    76  1317     0     111  DirectByteBuffer
 54070    76   118    44    76  1317     0      60  )
 54071    76   118    45    76  1317     0      44  this
 54072    76   118    49    76  1317     0      60  )
 54073    76   118    50    76  1317     0      54  .
 54074    76   118    51    76  1317     0     111  address
 54075    76   118    58    76  1317     0      59  (
 54076    76   118    59    76  1317     0      60  )
 54077    76   118    60    76  1317     0      66  ,
 54078    76   118    62    76  1317     0     111  capacity
 54079    76   118    70    76  1317     0      59  (
 54080    76   118    71    76  1317     0      60  )
 54081    76   118    72    76  1317     0      60  )
 54082    76   118    73    76  1317     0     102  ;
 54083    76   119     5    76  1317     0      64  }
 54084    76   119     5    76  1317     0    3062  ENDMETHOD
 54085    76   119     5    76  1318     0    3063  STARTMETHOD
 54086    76   131    18    76  1318     0     111  MappedByteBuffer
 54087    76   131    35    76  1318     0     111  load
 54088    76   131    39    76  1318     0      59  (
 54089    76   131    40    76  1318     0      60  )
 54090    76   131    42    76  1318     0      63  {
 54091    76   132     9    76  1318     0     111  checkMapped
 54092    76   132    20    76  1318     0      59  (
 54093    76   132    21    76  1318     0      60  )
 54094    76   132    22    76  1318     0     102  ;
 54095    76   133     9    76  1318     0      31  if
 54096    76   133    12    76  1318     0      59  (
 54097    76   133    13    76  1318     0      59  (
 54098    76   133    14    76  1318     0     111  address
 54099    76   133    22    76  1318     0      68  ==
 54100    76   133    25    76  1318     0     112  0
 54101    76   133    26    76  1318     0      60  )
 54102    76   133    28    76  1318     0      98  ||
 54103    76   133    31    76  1318     0      59  (
 54104    76   133    32    76  1318     0     111  capacity
 54105    76   133    40    76  1318     0      59  (
 54106    76   133    41    76  1318     0      60  )
 54107    76   133    43    76  1318     0      68  ==
 54108    76   133    46    76  1318     0     112  0
 54109    76   133    47    76  1318     0      60  )
 54110    76   133    48    76  1318     0      60  )
 54111    76   134    13    76  1318     0      19  return
 54112    76   134    20    76  1318     0      44  this
 54113    76   134    24    76  1318     0     102  ;
 54114    76   135     9    76  1318     0     111  load0
 54115    76   135    14    76  1318     0      59  (
 54116    76   135    15    76  1318     0      59  (
 54117    76   135    16    76  1318     0      59  (
 54118    76   135    17    76  1318     0     111  DirectByteBuffer
 54119    76   135    33    76  1318     0      60  )
 54120    76   135    34    76  1318     0      44  this
 54121    76   135    38    76  1318     0      60  )
 54122    76   135    39    76  1318     0      54  .
 54123    76   135    40    76  1318     0     111  address
 54124    76   135    47    76  1318     0      59  (
 54125    76   135    48    76  1318     0      60  )
 54126    76   135    49    76  1318     0      66  ,
 54127    76   135    51    76  1318     0     111  capacity
 54128    76   135    59    76  1318     0      59  (
 54129    76   135    60    76  1318     0      60  )
 54130    76   135    61    76  1318     0      66  ,
 54131    76   135    63    76  1318     0     111  Bits.pageSize
 54132    76   135    76    76  1318     0      59  (
 54133    76   135    77    76  1318     0      60  )
 54134    76   135    78    76  1318     0      60  )
 54135    76   135    79    76  1318     0     102  ;
 54136    76   136     9    76  1318     0      19  return
 54137    76   136    16    76  1318     0      44  this
 54138    76   136    20    76  1318     0     102  ;
 54139    76   137     5    76  1318     0      64  }
 54140    76   137     5    76  1318     0    3064  ENDMETHOD
 54141    76   137     5    76  1319     0    3065  STARTMETHOD
 54142    76   157    18    76  1319     0     111  MappedByteBuffer
 54143    76   157    35    76  1319     0     111  force
 54144    76   157    40    76  1319     0      59  (
 54145    76   157    41    76  1319     0      60  )
 54146    76   157    43    76  1319     0      63  {
 54147    76   158     9    76  1319     0     111  checkMapped
 54148    76   158    20    76  1319     0      59  (
 54149    76   158    21    76  1319     0      60  )
 54150    76   158    22    76  1319     0     102  ;
 54151    76   159     9    76  1319     0      31  if
 54152    76   159    12    76  1319     0      59  (
 54153    76   159    13    76  1319     0      59  (
 54154    76   159    14    76  1319     0     111  address
 54155    76   159    22    76  1319     0      68  ==
 54156    76   159    25    76  1319     0     112  0
 54157    76   159    26    76  1319     0      60  )
 54158    76   159    28    76  1319     0      98  ||
 54159    76   159    31    76  1319     0      59  (
 54160    76   159    32    76  1319     0     111  capacity
 54161    76   159    40    76  1319     0      59  (
 54162    76   159    41    76  1319     0      60  )
 54163    76   159    43    76  1319     0      68  ==
 54164    76   159    46    76  1319     0     112  0
 54165    76   159    47    76  1319     0      60  )
 54166    76   159    48    76  1319     0      60  )
 54167    76   160    13    76  1319     0      19  return
 54168    76   160    20    76  1319     0      44  this
 54169    76   160    24    76  1319     0     102  ;
 54170    76   161     9    76  1319     0     111  force0
 54171    76   161    15    76  1319     0      59  (
 54172    76   161    16    76  1319     0      59  (
 54173    76   161    17    76  1319     0      59  (
 54174    76   161    18    76  1319     0     111  DirectByteBuffer
 54175    76   161    34    76  1319     0      60  )
 54176    76   161    35    76  1319     0      44  this
 54177    76   161    39    76  1319     0      60  )
 54178    76   161    40    76  1319     0      54  .
 54179    76   161    41    76  1319     0     111  address
 54180    76   161    48    76  1319     0      59  (
 54181    76   161    49    76  1319     0      60  )
 54182    76   161    50    76  1319     0      66  ,
 54183    76   161    52    76  1319     0     111  capacity
 54184    76   161    60    76  1319     0      59  (
 54185    76   161    61    76  1319     0      60  )
 54186    76   161    62    76  1319     0      60  )
 54187    76   161    63    76  1319     0     102  ;
 54188    76   162     9    76  1319     0      19  return
 54189    76   162    16    76  1319     0      44  this
 54190    76   162    20    76  1319     0     102  ;
 54191    76   163     5    76  1319     0      64  }
 54192    76   163     5    76  1319     0    3066  ENDMETHOD
 54193    76   165     5    76    -1     0      41  private
 54194    76   165    13    76    -1     0      29  native
 54195    76   165    20    76    -1     0      39  boolean
 54196    76   165    28    76    -1     0     111  isLoaded0
 54197    76   165    37    76    -1     0      59  (
 54198    76   165    38    76    -1     0      53  long
 54199    76   165    43    76    -1     0     111  address
 54200    76   165    50    76    -1     0      66  ,
 54201    76   165    52    76    -1     0      53  long
 54202    76   165    57    76    -1     0     111  length
 54203    76   165    63    76    -1     0      60  )
 54204    76   165    64    76    -1     0     102  ;
 54205    76   166     5    76    -1     0      41  private
 54206    76   166    13    76    -1     0      29  native
 54207    76   166    20    76    -1     0      36  int
 54208    76   166    24    76    -1     0     111  load0
 54209    76   166    29    76    -1     0      59  (
 54210    76   166    30    76    -1     0      53  long
 54211    76   166    35    76    -1     0     111  address
 54212    76   166    42    76    -1     0      66  ,
 54213    76   166    44    76    -1     0      53  long
 54214    76   166    49    76    -1     0     111  length
 54215    76   166    55    76    -1     0      66  ,
 54216    76   166    57    76    -1     0      36  int
 54217    76   166    61    76    -1     0     111  pageSize
 54218    76   166    69    76    -1     0      60  )
 54219    76   166    70    76    -1     0     102  ;
 54220    76   167     5    76    -1     0      41  private
 54221    76   167    13    76    -1     0      29  native
 54222    76   167    20    76    -1     0      50  void
 54223    76   167    25    76    -1     0     111  force0
 54224    76   167    31    76    -1     0      59  (
 54225    76   167    32    76    -1     0      53  long
 54226    76   167    37    76    -1     0     111  address
 54227    76   167    44    76    -1     0      66  ,
 54228    76   167    46    76    -1     0      53  long
 54229    76   167    51    76    -1     0     111  length
 54230    76   167    57    76    -1     0      60  )
 54231    76   167    58    76    -1     0     102  ;
 54232    76   169     1    76    -1     0      64  }
 54233    76   169     1    76    -1     1    3067  ENDCLASS
 54234    76   169     1    -1    -1     1    3068  ENDFILE C:\Users\RA\javasrc\java\nio\MappedByteBuffer.java
 54235    77     1     1    -1    -1     1    3069  STARTFILE C:\Users\RA\javasrc\java\nio\ReadOnlyBufferException.java
 54236    77    30     9    -1    -1     0     111  java.nio
 54237    77    30    17    -1    -1     0     102  ;
 54238    77    40     8    77    -1     0    3070  STARTCLASS
 54239    77    40     8    77    -1     0      24  class
 54240    77    40    14    77    -1     0     111  ReadOnlyBufferException
 54241    77    41     5    77    -1     0      38  extends
 54242    77    41    13    77    -1     0     111  UnsupportedOperationException
 54243    77    42     1    77    -1     0      63  {
 54244    77    44     5    77    -1     0      41  private
 54245    77    44    13    77    -1     0      45  static
 54246    77    44    26    77    -1     0      53  long
 54247    77    44    31    77    -1     0     111  serialVersionUID
 54248    77    44    48    77    -1     0      67  =
 54249    77    44    50    77    -1     0      77  -
 54250    77    44    51    77    -1     0      55  1210063976496234090L
 54251    77    44    71    77    -1     0     102  ;
 54252    77    44    71    77  1320     0    3071  STARTMETHOD
 54253    77    49    12    77  1320     0     111  ReadOnlyBufferException
 54254    77    49    35    77  1320     0      59  (
 54255    77    49    36    77  1320     0      60  )
 54256    77    49    38    77  1320     0      63  {
 54257    77    49    40    77  1320     0      64  }
 54258    77    49    40    77  1320     0    3072  ENDMETHOD
 54259    77    51     1    77    -1     0      64  }
 54260    77    51     1    77    -1     1    3073  ENDCLASS
 54261    77    51     1    -1    -1     1    3074  ENDFILE C:\Users\RA\javasrc\java\nio\ReadOnlyBufferException.java
 54262    78     1     1    -1    -1     1    3075  STARTFILE C:\Users\RA\javasrc\java\nio\ShortBuffer.java
 54263    78     1     9    -1    -1     0     111  java.nio
 54264    78     1    17    -1    -1     0     102  ;
 54265    78   230    17    78    -1     0    3076  STARTCLASS
 54266    78   230    17    78    -1     0      24  class
 54267    78   230    23    78    -1     0     111  ShortBuffer
 54268    78   231     5    78    -1     0      38  extends
 54269    78   231    13    78    -1     0     111  Buffer
 54270    78   232     5    78    -1     0      17  implements
 54271    78   232    16    78    -1     0     111  Comparable
 54272    78   232    26    78    -1     0      93  <
 54273    78   232    27    78    -1     0     111  ShortBuffer
 54274    78   232    38    78    -1     0      89  >
 54275    78   233     1    78    -1     0      63  {
 54276    78   239    16    78    -1     0      61  [
 54277    78   239    17    78    -1     0      62  ]
 54278    78   239    19    78    -1     0     111  hb
 54279    78   239    21    78    -1     0     102  ;
 54280    78   240    11    78    -1     0      36  int
 54281    78   240    15    78    -1     0     111  offset
 54282    78   240    21    78    -1     0     102  ;
 54283    78   241     5    78    -1     0      39  boolean
 54284    78   241    13    78    -1     0     111  isReadOnly
 54285    78   241    23    78    -1     0     102  ;
 54286    78   241    23    78  1321     0    3077  STARTMETHOD
 54287    78   246     5    78  1321     0     111  ShortBuffer
 54288    78   246    16    78  1321     0      59  (
 54289    78   246    17    78  1321     0      36  int
 54290    78   246    21    78  1321     0     111  mark
 54291    78   246    25    78  1321     0      66  ,
 54292    78   246    27    78  1321     0      36  int
 54293    78   246    31    78  1321     0     111  pos
 54294    78   246    34    78  1321     0      66  ,
 54295    78   246    36    78  1321     0      36  int
 54296    78   246    40    78  1321     0     111  lim
 54297    78   246    43    78  1321     0      66  ,
 54298    78   246    45    78  1321     0      36  int
 54299    78   246    49    78  1321     0     111  cap
 54300    78   246    52    78  1321     0      66  ,
 54301    78   247    23    78  1321     0      61  [
 54302    78   247    24    78  1321     0      62  ]
 54303    78   247    26    78  1321     0     111  hb
 54304    78   247    28    78  1321     0      66  ,
 54305    78   247    30    78  1321     0      36  int
 54306    78   247    34    78  1321     0     111  offset
 54307    78   247    40    78  1321     0      60  )
 54308    78   248     5    78  1321     0      63  {
 54309    78   249     9    78  1321     0      27  super
 54310    78   249    14    78  1321     0      59  (
 54311    78   249    15    78  1321     0     111  mark
 54312    78   249    19    78  1321     0      66  ,
 54313    78   249    21    78  1321     0     111  pos
 54314    78   249    24    78  1321     0      66  ,
 54315    78   249    26    78  1321     0     111  lim
 54316    78   249    29    78  1321     0      66  ,
 54317    78   249    31    78  1321     0     111  cap
 54318    78   249    34    78  1321     0      60  )
 54319    78   249    35    78  1321     0     102  ;
 54320    78   250     9    78  1321     1     111  this.hb
 54321    78   250    17    78  1321     1      67  =
 54322    78   250    19    78  1321     1     111  hb
 54323    78   250    21    78  1321     1     102  ;
 54324    78   251     9    78  1321     1     111  this.offset
 54325    78   251    21    78  1321     1      67  =
 54326    78   251    23    78  1321     1     111  offset
 54327    78   251    29    78  1321     1     102  ;
 54328    78   252     5    78  1321     0      64  }
 54329    78   252     5    78  1321     0    3078  ENDMETHOD
 54330    78   252     5    78  1322     0    3079  STARTMETHOD
 54331    78   256     5    78  1322     0     111  ShortBuffer
 54332    78   256    16    78  1322     0      59  (
 54333    78   256    17    78  1322     0      36  int
 54334    78   256    21    78  1322     0     111  mark
 54335    78   256    25    78  1322     0      66  ,
 54336    78   256    27    78  1322     0      36  int
 54337    78   256    31    78  1322     0     111  pos
 54338    78   256    34    78  1322     0      66  ,
 54339    78   256    36    78  1322     0      36  int
 54340    78   256    40    78  1322     0     111  lim
 54341    78   256    43    78  1322     0      66  ,
 54342    78   256    45    78  1322     0      36  int
 54343    78   256    49    78  1322     0     111  cap
 54344    78   256    52    78  1322     0      60  )
 54345    78   256    54    78  1322     0      63  {
 54346    78   257     9    78  1322     0      44  this
 54347    78   257    13    78  1322     0      59  (
 54348    78   257    14    78  1322     0     111  mark
 54349    78   257    18    78  1322     0      66  ,
 54350    78   257    20    78  1322     0     111  pos
 54351    78   257    23    78  1322     0      66  ,
 54352    78   257    25    78  1322     0     111  lim
 54353    78   257    28    78  1322     0      66  ,
 54354    78   257    30    78  1322     0     111  cap
 54355    78   257    33    78  1322     0      66  ,
 54356    78   257    35    78  1322     0      21  null
 54357    78   257    39    78  1322     0      66  ,
 54358    78   257    41    78  1322     0     112  0
 54359    78   257    42    78  1322     0      60  )
 54360    78   257    43    78  1322     0     102  ;
 54361    78   258     5    78  1322     0      64  }
 54362    78   258     5    78  1322     0    3080  ENDMETHOD
 54363    78   258     5    78  1323     0    3081  STARTMETHOD
 54364    78   299    12    78  1323     0      45  static
 54365    78   299    19    78  1323     0     111  ShortBuffer
 54366    78   299    31    78  1323     0     111  allocate
 54367    78   299    39    78  1323     0      59  (
 54368    78   299    40    78  1323     0      36  int
 54369    78   299    44    78  1323     0     111  capacity
 54370    78   299    52    78  1323     0      60  )
 54371    78   299    54    78  1323     0      63  {
 54372    78   300     9    78  1323     0      31  if
 54373    78   300    12    78  1323     0      59  (
 54374    78   300    13    78  1323     0     111  capacity
 54375    78   300    22    78  1323     0      93  <
 54376    78   300    24    78  1323     0     112  0
 54377    78   300    25    78  1323     0      60  )
 54378    78   301    13    78  1323     0      20  throw
 54379    78   301    23    78  1323     0     111  IllegalArgumentException
 54380    78   301    47    78  1323     0      59  (
 54381    78   301    48    78  1323     0      60  )
 54382    78   301    49    78  1323     0     102  ;
 54383    78   302     9    78  1323     0      19  return
 54384    78   302    20    78  1323     0     111  HeapShortBuffer
 54385    78   302    35    78  1323     0      59  (
 54386    78   302    36    78  1323     0     111  capacity
 54387    78   302    44    78  1323     0      66  ,
 54388    78   302    46    78  1323     0     111  capacity
 54389    78   302    54    78  1323     0      60  )
 54390    78   302    55    78  1323     0     102  ;
 54391    78   303     5    78  1323     0      64  }
 54392    78   303     5    78  1323     0    3082  ENDMETHOD
 54393    78   303     5    78  1324     0    3083  STARTMETHOD
 54394    78   336    12    78  1324     0      45  static
 54395    78   336    19    78  1324     0     111  ShortBuffer
 54396    78   336    31    78  1324     0     111  wrap
 54397    78   336    35    78  1324     0      59  (
 54398    78   336    41    78  1324     0      61  [
 54399    78   336    42    78  1324     0      62  ]
 54400    78   336    44    78  1324     0     111  array
 54401    78   336    49    78  1324     0      66  ,
 54402    78   337    37    78  1324     0      36  int
 54403    78   337    41    78  1324     0     111  offset
 54404    78   337    47    78  1324     0      66  ,
 54405    78   337    49    78  1324     0      36  int
 54406    78   337    53    78  1324     0     111  length
 54407    78   337    59    78  1324     0      60  )
 54408    78   338     5    78  1324     0      63  {
 54409    78   339     9    78  1324     0      35  try
 54410    78   339    13    78  1324     0      63  {
 54411    78   340    13    78  1324     0      19  return
 54412    78   340    24    78  1324     0     111  HeapShortBuffer
 54413    78   340    39    78  1324     0      59  (
 54414    78   340    40    78  1324     0     111  array
 54415    78   340    45    78  1324     0      66  ,
 54416    78   340    47    78  1324     0     111  offset
 54417    78   340    53    78  1324     0      66  ,
 54418    78   340    55    78  1324     0     111  length
 54419    78   340    61    78  1324     0      60  )
 54420    78   340    62    78  1324     0     102  ;
 54421    78   341     9    78  1324     0      64  }
 54422    78   341    11    78  1324     0      34  catch
 54423    78   341    17    78  1324     0      59  (
 54424    78   341    18    78  1324     0     111  IllegalArgumentException
 54425    78   341    43    78  1324     0     111  x
 54426    78   341    44    78  1324     0      60  )
 54427    78   341    46    78  1324     0      63  {
 54428    78   342    13    78  1324     0      20  throw
 54429    78   342    23    78  1324     0     111  IndexOutOfBoundsException
 54430    78   342    48    78  1324     0      59  (
 54431    78   342    49    78  1324     0      60  )
 54432    78   342    50    78  1324     0     102  ;
 54433    78   343     9    78  1324     0      64  }
 54434    78   344     5    78  1324     0      64  }
 54435    78   344     5    78  1324     0    3084  ENDMETHOD
 54436    78   344     5    78  1325     0    3085  STARTMETHOD
 54437    78   362    12    78  1325     0      45  static
 54438    78   362    19    78  1325     0     111  ShortBuffer
 54439    78   362    31    78  1325     0     111  wrap
 54440    78   362    35    78  1325     0      59  (
 54441    78   362    41    78  1325     0      61  [
 54442    78   362    42    78  1325     0      62  ]
 54443    78   362    44    78  1325     0     111  array
 54444    78   362    49    78  1325     0      60  )
 54445    78   362    51    78  1325     0      63  {
 54446    78   363     9    78  1325     0      19  return
 54447    78   363    16    78  1325     0     111  wrap
 54448    78   363    20    78  1325     0      59  (
 54449    78   363    21    78  1325     0     111  array
 54450    78   363    26    78  1325     0      66  ,
 54451    78   363    28    78  1325     0     112  0
 54452    78   363    29    78  1325     0      66  ,
 54453    78   363    31    78  1325     0     111  array.length
 54454    78   363    43    78  1325     0      60  )
 54455    78   363    44    78  1325     0     102  ;
 54456    78   364     5    78  1325     0      64  }
 54457    78   364     5    78  1325     0    3086  ENDMETHOD
 54458    78   476    21    78    -1     1     111  ShortBuffer
 54459    78   476    33    78    -1     1     111  slice
 54460    78   476    38    78    -1     1      59  (
 54461    78   476    39    78    -1     1      60  )
 54462    78   476    40    78    -1     1     102  ;
 54463    78   493    21    78    -1     1     111  ShortBuffer
 54464    78   493    33    78    -1     1     111  duplicate
 54465    78   493    42    78    -1     1      59  (
 54466    78   493    43    78    -1     1      60  )
 54467    78   493    44    78    -1     1     102  ;
 54468    78   513    21    78    -1     1     111  ShortBuffer
 54469    78   513    33    78    -1     1     111  asReadOnlyBuffer
 54470    78   513    49    78    -1     1      59  (
 54471    78   513    50    78    -1     1      60  )
 54472    78   513    51    78    -1     1     102  ;
 54473    78   527    27    78    -1     0     111  get
 54474    78   527    30    78    -1     0      59  (
 54475    78   527    31    78    -1     0      60  )
 54476    78   527    32    78    -1     0     102  ;
 54477    78   546    21    78    -1     0     111  ShortBuffer
 54478    78   546    33    78    -1     0     111  put
 54479    78   546    36    78    -1     0      59  (
 54480    78   546    43    78    -1     0     111  s
 54481    78   546    44    78    -1     0      60  )
 54482    78   546    45    78    -1     0     102  ;
 54483    78   561    27    78    -1     0     111  get
 54484    78   561    30    78    -1     0      59  (
 54485    78   561    31    78    -1     0      36  int
 54486    78   561    35    78    -1     0     111  index
 54487    78   561    40    78    -1     0      60  )
 54488    78   561    41    78    -1     0     102  ;
 54489    78   584    21    78    -1     0     111  ShortBuffer
 54490    78   584    33    78    -1     0     111  put
 54491    78   584    36    78    -1     0      59  (
 54492    78   584    37    78    -1     0      36  int
 54493    78   584    41    78    -1     0     111  index
 54494    78   584    46    78    -1     0      66  ,
 54495    78   584    54    78    -1     0     111  s
 54496    78   584    55    78    -1     0      60  )
 54497    78   584    56    78    -1     0     102  ;
 54498    78   584    56    78  1326     0    3087  STARTMETHOD
 54499    78   638    12    78  1326     0     111  ShortBuffer
 54500    78   638    24    78  1326     0     111  get
 54501    78   638    27    78  1326     0      59  (
 54502    78   638    33    78  1326     0      61  [
 54503    78   638    34    78  1326     0      62  ]
 54504    78   638    36    78  1326     0     111  dst
 54505    78   638    39    78  1326     0      66  ,
 54506    78   638    41    78  1326     0      36  int
 54507    78   638    45    78  1326     0     111  offset
 54508    78   638    51    78  1326     0      66  ,
 54509    78   638    53    78  1326     0      36  int
 54510    78   638    57    78  1326     0     111  length
 54511    78   638    63    78  1326     0      60  )
 54512    78   638    65    78  1326     0      63  {
 54513    78   639     9    78  1326     0     111  checkBounds
 54514    78   639    20    78  1326     0      59  (
 54515    78   639    21    78  1326     0     111  offset
 54516    78   639    27    78  1326     0      66  ,
 54517    78   639    29    78  1326     0     111  length
 54518    78   639    35    78  1326     0      66  ,
 54519    78   639    37    78  1326     0     111  dst.length
 54520    78   639    47    78  1326     0      60  )
 54521    78   639    48    78  1326     0     102  ;
 54522    78   640     9    78  1326     0      31  if
 54523    78   640    12    78  1326     0      59  (
 54524    78   640    13    78  1326     0     111  length
 54525    78   640    20    78  1326     0      89  >
 54526    78   640    22    78  1326     0     111  remaining
 54527    78   640    31    78  1326     0      59  (
 54528    78   640    32    78  1326     0      60  )
 54529    78   640    33    78  1326     0      60  )
 54530    78   641    13    78  1326     0      20  throw
 54531    78   641    23    78  1326     0     111  BufferUnderflowException
 54532    78   641    47    78  1326     0      59  (
 54533    78   641    48    78  1326     0      60  )
 54534    78   641    49    78  1326     0     102  ;
 54535    78   642     9    78  1326     0      36  int
 54536    78   642    13    78  1326     0     111  end
 54537    78   642    17    78  1326     0      67  =
 54538    78   642    19    78  1326     0     111  offset
 54539    78   642    26    78  1326     0      74  +
 54540    78   642    28    78  1326     0     111  length
 54541    78   642    34    78  1326     0     102  ;
 54542    78   643     9    78  1326     0      37  for
 54543    78   643    13    78  1326     0      59  (
 54544    78   643    14    78  1326     0      36  int
 54545    78   643    18    78  1326     0     111  i
 54546    78   643    20    78  1326     0      67  =
 54547    78   643    22    78  1326     0     111  offset
 54548    78   643    28    78  1326     0     102  ;
 54549    78   643    30    78  1326     0     111  i
 54550    78   643    32    78  1326     0      93  <
 54551    78   643    34    78  1326     0     111  end
 54552    78   643    37    78  1326     0     102  ;
 54553    78   643    39    78  1326     0     111  i
 54554    78   643    40    78  1326     0      76  ++
 54555    78   643    42    78  1326     0      60  )
 54556    78   644    13    78  1326     0     111  dst
 54557    78   644    16    78  1326     0      61  [
 54558    78   644    17    78  1326     0     111  i
 54559    78   644    18    78  1326     0      62  ]
 54560    78   644    20    78  1326     0      67  =
 54561    78   644    22    78  1326     0     111  get
 54562    78   644    25    78  1326     0      59  (
 54563    78   644    26    78  1326     0      60  )
 54564    78   644    27    78  1326     0     102  ;
 54565    78   645     9    78  1326     0      19  return
 54566    78   645    16    78  1326     0      44  this
 54567    78   645    20    78  1326     0     102  ;
 54568    78   646     5    78  1326     0      64  }
 54569    78   646     5    78  1326     0    3088  ENDMETHOD
 54570    78   646     5    78  1327     0    3089  STARTMETHOD
 54571    78   664    12    78  1327     0     111  ShortBuffer
 54572    78   664    24    78  1327     0     111  get
 54573    78   664    27    78  1327     0      59  (
 54574    78   664    33    78  1327     0      61  [
 54575    78   664    34    78  1327     0      62  ]
 54576    78   664    36    78  1327     0     111  dst
 54577    78   664    39    78  1327     0      60  )
 54578    78   664    41    78  1327     0      63  {
 54579    78   665     9    78  1327     0      19  return
 54580    78   665    16    78  1327     0     111  get
 54581    78   665    19    78  1327     0      59  (
 54582    78   665    20    78  1327     0     111  dst
 54583    78   665    23    78  1327     0      66  ,
 54584    78   665    25    78  1327     0     112  0
 54585    78   665    26    78  1327     0      66  ,
 54586    78   665    28    78  1327     0     111  dst.length
 54587    78   665    38    78  1327     0      60  )
 54588    78   665    39    78  1327     0     102  ;
 54589    78   666     5    78  1327     0      64  }
 54590    78   666     5    78  1327     0    3090  ENDMETHOD
 54591    78   666     5    78  1328     0    3091  STARTMETHOD
 54592    78   712    12    78  1328     0     111  ShortBuffer
 54593    78   712    24    78  1328     0     111  put
 54594    78   712    27    78  1328     0      59  (
 54595    78   712    28    78  1328     0     111  ShortBuffer
 54596    78   712    40    78  1328     0     111  src
 54597    78   712    43    78  1328     0      60  )
 54598    78   712    45    78  1328     0      63  {
 54599    78   713     9    78  1328     0      31  if
 54600    78   713    12    78  1328     0      59  (
 54601    78   713    13    78  1328     0     111  src
 54602    78   713    17    78  1328     0      68  ==
 54603    78   713    20    78  1328     0      44  this
 54604    78   713    24    78  1328     0      60  )
 54605    78   714    13    78  1328     0      20  throw
 54606    78   714    23    78  1328     0     111  IllegalArgumentException
 54607    78   714    47    78  1328     0      59  (
 54608    78   714    48    78  1328     0      60  )
 54609    78   714    49    78  1328     0     102  ;
 54610    78   715     9    78  1328     0      36  int
 54611    78   715    13    78  1328     0     111  n
 54612    78   715    15    78  1328     0      67  =
 54613    78   715    17    78  1328     0     111  src.remaining
 54614    78   715    30    78  1328     0      59  (
 54615    78   715    31    78  1328     0      60  )
 54616    78   715    32    78  1328     0     102  ;
 54617    78   716     9    78  1328     0      31  if
 54618    78   716    12    78  1328     0      59  (
 54619    78   716    13    78  1328     0     111  n
 54620    78   716    15    78  1328     0      89  >
 54621    78   716    17    78  1328     0     111  remaining
 54622    78   716    26    78  1328     0      59  (
 54623    78   716    27    78  1328     0      60  )
 54624    78   716    28    78  1328     0      60  )
 54625    78   717    13    78  1328     0      20  throw
 54626    78   717    23    78  1328     0     111  BufferOverflowException
 54627    78   717    46    78  1328     0      59  (
 54628    78   717    47    78  1328     0      60  )
 54629    78   717    48    78  1328     0     102  ;
 54630    78   718     9    78  1328     0      37  for
 54631    78   718    13    78  1328     0      59  (
 54632    78   718    14    78  1328     0      36  int
 54633    78   718    18    78  1328     0     111  i
 54634    78   718    20    78  1328     0      67  =
 54635    78   718    22    78  1328     0     112  0
 54636    78   718    23    78  1328     0     102  ;
 54637    78   718    25    78  1328     0     111  i
 54638    78   718    27    78  1328     0      93  <
 54639    78   718    29    78  1328     0     111  n
 54640    78   718    30    78  1328     0     102  ;
 54641    78   718    32    78  1328     0     111  i
 54642    78   718    33    78  1328     0      76  ++
 54643    78   718    35    78  1328     0      60  )
 54644    78   719    13    78  1328     0     111  put
 54645    78   719    16    78  1328     0      59  (
 54646    78   719    17    78  1328     0     111  src.get
 54647    78   719    24    78  1328     0      59  (
 54648    78   719    25    78  1328     0      60  )
 54649    78   719    26    78  1328     0      60  )
 54650    78   719    27    78  1328     0     102  ;
 54651    78   720     9    78  1328     0      19  return
 54652    78   720    16    78  1328     0      44  this
 54653    78   720    20    78  1328     0     102  ;
 54654    78   721     5    78  1328     0      64  }
 54655    78   721     5    78  1328     0    3092  ENDMETHOD
 54656    78   721     5    78  1329     0    3093  STARTMETHOD
 54657    78   773    12    78  1329     0     111  ShortBuffer
 54658    78   773    24    78  1329     0     111  put
 54659    78   773    27    78  1329     0      59  (
 54660    78   773    33    78  1329     0      61  [
 54661    78   773    34    78  1329     0      62  ]
 54662    78   773    36    78  1329     0     111  src
 54663    78   773    39    78  1329     0      66  ,
 54664    78   773    41    78  1329     0      36  int
 54665    78   773    45    78  1329     0     111  offset
 54666    78   773    51    78  1329     0      66  ,
 54667    78   773    53    78  1329     0      36  int
 54668    78   773    57    78  1329     0     111  length
 54669    78   773    63    78  1329     0      60  )
 54670    78   773    65    78  1329     0      63  {
 54671    78   774     9    78  1329     0     111  checkBounds
 54672    78   774    20    78  1329     0      59  (
 54673    78   774    21    78  1329     0     111  offset
 54674    78   774    27    78  1329     0      66  ,
 54675    78   774    29    78  1329     0     111  length
 54676    78   774    35    78  1329     0      66  ,
 54677    78   774    37    78  1329     0     111  src.length
 54678    78   774    47    78  1329     0      60  )
 54679    78   774    48    78  1329     0     102  ;
 54680    78   775     9    78  1329     0      31  if
 54681    78   775    12    78  1329     0      59  (
 54682    78   775    13    78  1329     0     111  length
 54683    78   775    20    78  1329     0      89  >
 54684    78   775    22    78  1329     0     111  remaining
 54685    78   775    31    78  1329     0      59  (
 54686    78   775    32    78  1329     0      60  )
 54687    78   775    33    78  1329     0      60  )
 54688    78   776    13    78  1329     0      20  throw
 54689    78   776    23    78  1329     0     111  BufferOverflowException
 54690    78   776    46    78  1329     0      59  (
 54691    78   776    47    78  1329     0      60  )
 54692    78   776    48    78  1329     0     102  ;
 54693    78   777     9    78  1329     0      36  int
 54694    78   777    13    78  1329     0     111  end
 54695    78   777    17    78  1329     0      67  =
 54696    78   777    19    78  1329     0     111  offset
 54697    78   777    26    78  1329     0      74  +
 54698    78   777    28    78  1329     0     111  length
 54699    78   777    34    78  1329     0     102  ;
 54700    78   778     9    78  1329     0      37  for
 54701    78   778    13    78  1329     0      59  (
 54702    78   778    14    78  1329     0      36  int
 54703    78   778    18    78  1329     0     111  i
 54704    78   778    20    78  1329     0      67  =
 54705    78   778    22    78  1329     0     111  offset
 54706    78   778    28    78  1329     0     102  ;
 54707    78   778    30    78  1329     0     111  i
 54708    78   778    32    78  1329     0      93  <
 54709    78   778    34    78  1329     0     111  end
 54710    78   778    37    78  1329     0     102  ;
 54711    78   778    39    78  1329     0     111  i
 54712    78   778    40    78  1329     0      76  ++
 54713    78   778    42    78  1329     0      60  )
 54714    78   779    13    78  1329     0     111  this.put
 54715    78   779    21    78  1329     0      59  (
 54716    78   779    22    78  1329     0     111  src
 54717    78   779    25    78  1329     0      61  [
 54718    78   779    26    78  1329     0     111  i
 54719    78   779    27    78  1329     0      62  ]
 54720    78   779    28    78  1329     0      60  )
 54721    78   779    29    78  1329     0     102  ;
 54722    78   780     9    78  1329     0      19  return
 54723    78   780    16    78  1329     0      44  this
 54724    78   780    20    78  1329     0     102  ;
 54725    78   781     5    78  1329     0      64  }
 54726    78   781     5    78  1329     0    3094  ENDMETHOD
 54727    78   781     5    78  1330     0    3095  STARTMETHOD
 54728    78   802    18    78  1330     0     111  ShortBuffer
 54729    78   802    30    78  1330     0     111  put
 54730    78   802    33    78  1330     0      59  (
 54731    78   802    39    78  1330     0      61  [
 54732    78   802    40    78  1330     0      62  ]
 54733    78   802    42    78  1330     0     111  src
 54734    78   802    45    78  1330     0      60  )
 54735    78   802    47    78  1330     0      63  {
 54736    78   803     9    78  1330     0      19  return
 54737    78   803    16    78  1330     0     111  put
 54738    78   803    19    78  1330     0      59  (
 54739    78   803    20    78  1330     0     111  src
 54740    78   803    23    78  1330     0      66  ,
 54741    78   803    25    78  1330     0     112  0
 54742    78   803    26    78  1330     0      66  ,
 54743    78   803    28    78  1330     0     111  src.length
 54744    78   803    38    78  1330     0      60  )
 54745    78   803    39    78  1330     0     102  ;
 54746    78   804     5    78  1330     0      64  }
 54747    78   804     5    78  1330     0    3096  ENDMETHOD
 54748    78   804     5    78  1331     0    3097  STARTMETHOD
 54749    78   905    18    78  1331     0      39  boolean
 54750    78   905    26    78  1331     0     111  hasArray
 54751    78   905    34    78  1331     0      59  (
 54752    78   905    35    78  1331     0      60  )
 54753    78   905    37    78  1331     0      63  {
 54754    78   906     9    78  1331     0      19  return
 54755    78   906    16    78  1331     0      59  (
 54756    78   906    17    78  1331     0     111  hb
 54757    78   906    20    78  1331     0      71  !=
 54758    78   906    23    78  1331     0      21  null
 54759    78   906    27    78  1331     0      60  )
 54760    78   906    29    78  1331     0     101  &&
 54761    78   906    32    78  1331     0      69  !
 54762    78   906    33    78  1331     0     111  isReadOnly
 54763    78   906    43    78  1331     0     102  ;
 54764    78   907     5    78  1331     0      64  }
 54765    78   907     5    78  1331     0    3098  ENDMETHOD
 54766    78   907     5    78  1332     0    3099  STARTMETHOD
 54767    78   928    23    78  1332     0      61  [
 54768    78   928    24    78  1332     0      62  ]
 54769    78   928    26    78  1332     0     111  array
 54770    78   928    31    78  1332     0      59  (
 54771    78   928    32    78  1332     0      60  )
 54772    78   928    34    78  1332     0      63  {
 54773    78   929     9    78  1332     0      31  if
 54774    78   929    12    78  1332     0      59  (
 54775    78   929    13    78  1332     0     111  hb
 54776    78   929    16    78  1332     0      68  ==
 54777    78   929    19    78  1332     0      21  null
 54778    78   929    23    78  1332     0      60  )
 54779    78   930    13    78  1332     0      20  throw
 54780    78   930    23    78  1332     0     111  UnsupportedOperationException
 54781    78   930    52    78  1332     0      59  (
 54782    78   930    53    78  1332     0      60  )
 54783    78   930    54    78  1332     0     102  ;
 54784    78   931     9    78  1332     0      31  if
 54785    78   931    12    78  1332     0      59  (
 54786    78   931    13    78  1332     0     111  isReadOnly
 54787    78   931    23    78  1332     0      60  )
 54788    78   932    13    78  1332     0      20  throw
 54789    78   932    23    78  1332     0     111  ReadOnlyBufferException
 54790    78   932    46    78  1332     0      59  (
 54791    78   932    47    78  1332     0      60  )
 54792    78   932    48    78  1332     0     102  ;
 54793    78   933     9    78  1332     0      19  return
 54794    78   933    16    78  1332     0     111  hb
 54795    78   933    18    78  1332     0     102  ;
 54796    78   934     5    78  1332     0      64  }
 54797    78   934     5    78  1332     0    3100  ENDMETHOD
 54798    78   934     5    78  1333     0    3101  STARTMETHOD
 54799    78   956    18    78  1333     0      36  int
 54800    78   956    22    78  1333     0     111  arrayOffset
 54801    78   956    33    78  1333     0      59  (
 54802    78   956    34    78  1333     0      60  )
 54803    78   956    36    78  1333     0      63  {
 54804    78   957     9    78  1333     0      31  if
 54805    78   957    12    78  1333     0      59  (
 54806    78   957    13    78  1333     0     111  hb
 54807    78   957    16    78  1333     0      68  ==
 54808    78   957    19    78  1333     0      21  null
 54809    78   957    23    78  1333     0      60  )
 54810    78   958    13    78  1333     0      20  throw
 54811    78   958    23    78  1333     0     111  UnsupportedOperationException
 54812    78   958    52    78  1333     0      59  (
 54813    78   958    53    78  1333     0      60  )
 54814    78   958    54    78  1333     0     102  ;
 54815    78   959     9    78  1333     0      31  if
 54816    78   959    12    78  1333     0      59  (
 54817    78   959    13    78  1333     0     111  isReadOnly
 54818    78   959    23    78  1333     0      60  )
 54819    78   960    13    78  1333     0      20  throw
 54820    78   960    23    78  1333     0     111  ReadOnlyBufferException
 54821    78   960    46    78  1333     0      59  (
 54822    78   960    47    78  1333     0      60  )
 54823    78   960    48    78  1333     0     102  ;
 54824    78   961     9    78  1333     0      19  return
 54825    78   961    16    78  1333     0     111  offset
 54826    78   961    22    78  1333     0     102  ;
 54827    78   962     5    78  1333     0      64  }
 54828    78   962     5    78  1333     0    3102  ENDMETHOD
 54829    78  1003    21    78    -1     0     111  ShortBuffer
 54830    78  1003    33    78    -1     0     111  compact
 54831    78  1003    40    78    -1     0      59  (
 54832    78  1003    41    78    -1     0      60  )
 54833    78  1003    42    78    -1     0     102  ;
 54834    78  1010    21    78    -1     0      39  boolean
 54835    78  1010    29    78    -1     0     111  isDirect
 54836    78  1010    37    78    -1     0      59  (
 54837    78  1010    38    78    -1     0      60  )
 54838    78  1010    39    78    -1     0     102  ;
 54839    78  1010    39    78  1334     0    3103  STARTMETHOD
 54840    78  1019    12    78  1334     0     111  String
 54841    78  1019    19    78  1334     0     111  toString
 54842    78  1019    27    78  1334     0      59  (
 54843    78  1019    28    78  1334     0      60  )
 54844    78  1019    30    78  1334     0      63  {
 54845    78  1020     9    78  1334     0     111  StringBuffer
 54846    78  1020    22    78  1334     0     111  sb
 54847    78  1020    25    78  1334     0      67  =
 54848    78  1020    31    78  1334     0     111  StringBuffer
 54849    78  1020    43    78  1334     0      59  (
 54850    78  1020    44    78  1334     0      60  )
 54851    78  1020    45    78  1334     0     102  ;
 54852    78  1021     9    78  1334     0     111  sb.append
 54853    78  1021    18    78  1334     0      59  (
 54854    78  1021    19    78  1334     0     111  getClass
 54855    78  1021    27    78  1334     0      59  (
 54856    78  1021    28    78  1334     0      60  )
 54857    78  1021    29    78  1334     0      54  .
 54858    78  1021    30    78  1334     0     111  getName
 54859    78  1021    37    78  1334     0      59  (
 54860    78  1021    38    78  1334     0      60  )
 54861    78  1021    39    78  1334     0      60  )
 54862    78  1021    40    78  1334     0     102  ;
 54863    78  1022     9    78  1334     0     111  sb.append
 54864    78  1022    18    78  1334     0      59  (
 54865    78  1022    19    78  1334     0     107  "[pos="
 54866    78  1022    26    78  1334     0      60  )
 54867    78  1022    27    78  1334     0     102  ;
 54868    78  1023     9    78  1334     0     111  sb.append
 54869    78  1023    18    78  1334     0      59  (
 54870    78  1023    19    78  1334     0     111  position
 54871    78  1023    27    78  1334     0      59  (
 54872    78  1023    28    78  1334     0      60  )
 54873    78  1023    29    78  1334     0      60  )
 54874    78  1023    30    78  1334     0     102  ;
 54875    78  1024     9    78  1334     0     111  sb.append
 54876    78  1024    18    78  1334     0      59  (
 54877    78  1024    19    78  1334     0     107  " lim="
 54878    78  1024    26    78  1334     0      60  )
 54879    78  1024    27    78  1334     0     102  ;
 54880    78  1025     9    78  1334     0     111  sb.append
 54881    78  1025    18    78  1334     0      59  (
 54882    78  1025    19    78  1334     0     111  limit
 54883    78  1025    24    78  1334     0      59  (
 54884    78  1025    25    78  1334     0      60  )
 54885    78  1025    26    78  1334     0      60  )
 54886    78  1025    27    78  1334     0     102  ;
 54887    78  1026     9    78  1334     0     111  sb.append
 54888    78  1026    18    78  1334     0      59  (
 54889    78  1026    19    78  1334     0     107  " cap="
 54890    78  1026    26    78  1334     0      60  )
 54891    78  1026    27    78  1334     0     102  ;
 54892    78  1027     9    78  1334     0     111  sb.append
 54893    78  1027    18    78  1334     0      59  (
 54894    78  1027    19    78  1334     0     111  capacity
 54895    78  1027    27    78  1334     0      59  (
 54896    78  1027    28    78  1334     0      60  )
 54897    78  1027    29    78  1334     0      60  )
 54898    78  1027    30    78  1334     0     102  ;
 54899    78  1028     9    78  1334     0     111  sb.append
 54900    78  1028    18    78  1334     0      59  (
 54901    78  1028    19    78  1334     0     107  "]"
 54902    78  1028    22    78  1334     0      60  )
 54903    78  1028    23    78  1334     0     102  ;
 54904    78  1029     9    78  1334     0      19  return
 54905    78  1029    16    78  1334     0     111  sb.toString
 54906    78  1029    27    78  1334     0      59  (
 54907    78  1029    28    78  1334     0      60  )
 54908    78  1029    29    78  1334     0     102  ;
 54909    78  1030     5    78  1334     0      64  }
 54910    78  1030     5    78  1334     0    3104  ENDMETHOD
 54911    78  1030     5    78  1335     0    3105  STARTMETHOD
 54912    78  1050    12    78  1335     0      36  int
 54913    78  1050    16    78  1335     0     111  hashCode
 54914    78  1050    24    78  1335     0      59  (
 54915    78  1050    25    78  1335     0      60  )
 54916    78  1050    27    78  1335     0      63  {
 54917    78  1051     9    78  1335     0      36  int
 54918    78  1051    13    78  1335     0     111  h
 54919    78  1051    15    78  1335     0      67  =
 54920    78  1051    17    78  1335     0     112  1
 54921    78  1051    18    78  1335     0     102  ;
 54922    78  1052     9    78  1335     0      36  int
 54923    78  1052    13    78  1335     0     111  p
 54924    78  1052    15    78  1335     0      67  =
 54925    78  1052    17    78  1335     0     111  position
 54926    78  1052    25    78  1335     0      59  (
 54927    78  1052    26    78  1335     0      60  )
 54928    78  1052    27    78  1335     0     102  ;
 54929    78  1053     9    78  1335     0      37  for
 54930    78  1053    13    78  1335     0      59  (
 54931    78  1053    14    78  1335     0      36  int
 54932    78  1053    18    78  1335     0     111  i
 54933    78  1053    20    78  1335     0      67  =
 54934    78  1053    22    78  1335     0     111  limit
 54935    78  1053    27    78  1335     0      59  (
 54936    78  1053    28    78  1335     0      60  )
 54937    78  1053    30    78  1335     0      77  -
 54938    78  1053    32    78  1335     0     112  1
 54939    78  1053    33    78  1335     0     102  ;
 54940    78  1053    35    78  1335     0     111  i
 54941    78  1053    37    78  1335     0      88  >=
 54942    78  1053    40    78  1335     0     111  p
 54943    78  1053    41    78  1335     0     102  ;
 54944    78  1053    43    78  1335     0     111  i
 54945    78  1053    44    78  1335     0      79  --
 54946    78  1053    46    78  1335     0      60  )
 54947    78  1054    13    78  1335     0     111  h
 54948    78  1054    15    78  1335     0      67  =
 54949    78  1054    17    78  1335     0     112  31
 54950    78  1054    20    78  1335     0      80  *
 54951    78  1054    22    78  1335     0     111  h
 54952    78  1054    24    78  1335     0      74  +
 54953    78  1054    26    78  1335     0      59  (
 54954    78  1054    27    78  1335     0      36  int
 54955    78  1054    30    78  1335     0      60  )
 54956    78  1054    31    78  1335     0     111  get
 54957    78  1054    34    78  1335     0      59  (
 54958    78  1054    35    78  1335     0     111  i
 54959    78  1054    36    78  1335     0      60  )
 54960    78  1054    37    78  1335     0     102  ;
 54961    78  1055     9    78  1335     0      19  return
 54962    78  1055    16    78  1335     0     111  h
 54963    78  1055    17    78  1335     0     102  ;
 54964    78  1056     5    78  1335     0      64  }
 54965    78  1056     5    78  1335     0    3106  ENDMETHOD
 54966    78  1056     5    78  1336     0    3107  STARTMETHOD
 54967    78  1083    12    78  1336     0      39  boolean
 54968    78  1083    20    78  1336     0     111  equals
 54969    78  1083    26    78  1336     0      59  (
 54970    78  1083    27    78  1336     0     111  Object
 54971    78  1083    34    78  1336     0     111  ob
 54972    78  1083    36    78  1336     0      60  )
 54973    78  1083    38    78  1336     0      63  {
 54974    78  1084     9    78  1336     0      31  if
 54975    78  1084    12    78  1336     0      59  (
 54976    78  1084    13    78  1336     0      44  this
 54977    78  1084    18    78  1336     0      68  ==
 54978    78  1084    21    78  1336     0     111  ob
 54979    78  1084    23    78  1336     0      60  )
 54980    78  1085    13    78  1336     0      19  return
 54981    78  1085    20    78  1336     0      52  true
 54982    78  1085    24    78  1336     0     102  ;
 54983    78  1086     9    78  1336     0      31  if
 54984    78  1086    12    78  1336     0      59  (
 54985    78  1086    13    78  1336     0      69  !
 54986    78  1086    14    78  1336     0      59  (
 54987    78  1086    15    78  1336     0     111  ob
 54988    78  1086    29    78  1336     0     111  ShortBuffer
 54989    78  1086    40    78  1336     0      60  )
 54990    78  1086    41    78  1336     0      60  )
 54991    78  1087    13    78  1336     0      19  return
 54992    78  1087    20    78  1336     0      43  false
 54993    78  1087    25    78  1336     0     102  ;
 54994    78  1088     9    78  1336     0     111  ShortBuffer
 54995    78  1088    21    78  1336     0     111  that
 54996    78  1088    26    78  1336     0      67  =
 54997    78  1088    28    78  1336     0      59  (
 54998    78  1088    29    78  1336     0     111  ShortBuffer
 54999    78  1088    40    78  1336     0      60  )
 55000    78  1088    41    78  1336     0     111  ob
 55001    78  1088    43    78  1336     0     102  ;
 55002    78  1089     9    78  1336     0      31  if
 55003    78  1089    12    78  1336     0      59  (
 55004    78  1089    13    78  1336     0     111  this.remaining
 55005    78  1089    27    78  1336     0      59  (
 55006    78  1089    28    78  1336     0      60  )
 55007    78  1089    30    78  1336     0      71  !=
 55008    78  1089    33    78  1336     0     111  that.remaining
 55009    78  1089    47    78  1336     0      59  (
 55010    78  1089    48    78  1336     0      60  )
 55011    78  1089    49    78  1336     0      60  )
 55012    78  1090    13    78  1336     0      19  return
 55013    78  1090    20    78  1336     0      43  false
 55014    78  1090    25    78  1336     0     102  ;
 55015    78  1091     9    78  1336     0      36  int
 55016    78  1091    13    78  1336     0     111  p
 55017    78  1091    15    78  1336     0      67  =
 55018    78  1091    17    78  1336     0     111  this.position
 55019    78  1091    30    78  1336     0      59  (
 55020    78  1091    31    78  1336     0      60  )
 55021    78  1091    32    78  1336     0     102  ;
 55022    78  1092     9    78  1336     0      37  for
 55023    78  1092    13    78  1336     0      59  (
 55024    78  1092    14    78  1336     0      36  int
 55025    78  1092    18    78  1336     0     111  i
 55026    78  1092    20    78  1336     0      67  =
 55027    78  1092    22    78  1336     0     111  this.limit
 55028    78  1092    32    78  1336     0      59  (
 55029    78  1092    33    78  1336     0      60  )
 55030    78  1092    35    78  1336     0      77  -
 55031    78  1092    37    78  1336     0     112  1
 55032    78  1092    38    78  1336     0      66  ,
 55033    78  1092    40    78  1336     0     111  j
 55034    78  1092    42    78  1336     0      67  =
 55035    78  1092    44    78  1336     0     111  that.limit
 55036    78  1092    54    78  1336     0      59  (
 55037    78  1092    55    78  1336     0      60  )
 55038    78  1092    57    78  1336     0      77  -
 55039    78  1092    59    78  1336     0     112  1
 55040    78  1092    60    78  1336     0     102  ;
 55041    78  1092    62    78  1336     0     111  i
 55042    78  1092    64    78  1336     0      88  >=
 55043    78  1092    67    78  1336     0     111  p
 55044    78  1092    68    78  1336     0     102  ;
 55045    78  1092    70    78  1336     0     111  i
 55046    78  1092    71    78  1336     0      79  --
 55047    78  1092    73    78  1336     0      66  ,
 55048    78  1092    75    78  1336     0     111  j
 55049    78  1092    76    78  1336     0      79  --
 55050    78  1092    78    78  1336     0      60  )
 55051    78  1092    80    78  1336     0      63  {
 55052    78  1093    19    78  1336     1     111  v1
 55053    78  1093    22    78  1336     1      67  =
 55054    78  1093    24    78  1336     1     111  this.get
 55055    78  1093    32    78  1336     1      59  (
 55056    78  1093    33    78  1336     1     111  i
 55057    78  1093    34    78  1336     1      60  )
 55058    78  1093    35    78  1336     1     102  ;
 55059    78  1094    19    78  1336     1     111  v2
 55060    78  1094    22    78  1336     1      67  =
 55061    78  1094    24    78  1336     1     111  that.get
 55062    78  1094    32    78  1336     1      59  (
 55063    78  1094    33    78  1336     1     111  j
 55064    78  1094    34    78  1336     1      60  )
 55065    78  1094    35    78  1336     1     102  ;
 55066    78  1095    13    78  1336     0      31  if
 55067    78  1095    16    78  1336     0      59  (
 55068    78  1095    17    78  1336     0     111  v1
 55069    78  1095    20    78  1336     0      71  !=
 55070    78  1095    23    78  1336     0     111  v2
 55071    78  1095    25    78  1336     0      60  )
 55072    78  1095    27    78  1336     0      63  {
 55073    78  1096    17    78  1336     0      31  if
 55074    78  1096    20    78  1336     0      59  (
 55075    78  1096    21    78  1336     0      59  (
 55076    78  1096    22    78  1336     0     111  v1
 55077    78  1096    25    78  1336     0      71  !=
 55078    78  1096    28    78  1336     0     111  v1
 55079    78  1096    30    78  1336     0      60  )
 55080    78  1096    32    78  1336     0     101  &&
 55081    78  1096    35    78  1336     0      59  (
 55082    78  1096    36    78  1336     0     111  v2
 55083    78  1096    39    78  1336     0      71  !=
 55084    78  1096    42    78  1336     0     111  v2
 55085    78  1096    44    78  1336     0      60  )
 55086    78  1096    45    78  1336     0      60  )
 55087    78  1097    21    78  1336     0      46  continue
 55088    78  1097    29    78  1336     0     102  ;
 55089    78  1098    17    78  1336     0      19  return
 55090    78  1098    24    78  1336     0      43  false
 55091    78  1098    29    78  1336     0     102  ;
 55092    78  1099    13    78  1336     1      64  }
 55093    78  1100     9    78  1336     1      64  }
 55094    78  1101     9    78  1336     0      19  return
 55095    78  1101    16    78  1336     0      52  true
 55096    78  1101    20    78  1336     0     102  ;
 55097    78  1102     5    78  1336     0      64  }
 55098    78  1102     5    78  1336     0    3108  ENDMETHOD
 55099    78  1102     5    78  1337     0    3109  STARTMETHOD
 55100    78  1116    12    78  1337     0      36  int
 55101    78  1116    16    78  1337     0     111  compareTo
 55102    78  1116    25    78  1337     0      59  (
 55103    78  1116    26    78  1337     0     111  ShortBuffer
 55104    78  1116    38    78  1337     0     111  that
 55105    78  1116    42    78  1337     0      60  )
 55106    78  1116    44    78  1337     0      63  {
 55107    78  1117     9    78  1337     0      36  int
 55108    78  1117    13    78  1337     0     111  n
 55109    78  1117    15    78  1337     0      67  =
 55110    78  1117    17    78  1337     0     111  this.position
 55111    78  1117    30    78  1337     0      59  (
 55112    78  1117    31    78  1337     0      60  )
 55113    78  1117    33    78  1337     0      74  +
 55114    78  1117    35    78  1337     0     111  Math.min
 55115    78  1117    43    78  1337     0      59  (
 55116    78  1117    44    78  1337     0     111  this.remaining
 55117    78  1117    58    78  1337     0      59  (
 55118    78  1117    59    78  1337     0      60  )
 55119    78  1117    60    78  1337     0      66  ,
 55120    78  1117    62    78  1337     0     111  that.remaining
 55121    78  1117    76    78  1337     0      59  (
 55122    78  1117    77    78  1337     0      60  )
 55123    78  1117    78    78  1337     0      60  )
 55124    78  1117    79    78  1337     0     102  ;
 55125    78  1118     9    78  1337     0      37  for
 55126    78  1118    13    78  1337     0      59  (
 55127    78  1118    14    78  1337     0      36  int
 55128    78  1118    18    78  1337     0     111  i
 55129    78  1118    20    78  1337     0      67  =
 55130    78  1118    22    78  1337     0     111  this.position
 55131    78  1118    35    78  1337     0      59  (
 55132    78  1118    36    78  1337     0      60  )
 55133    78  1118    37    78  1337     0      66  ,
 55134    78  1118    39    78  1337     0     111  j
 55135    78  1118    41    78  1337     0      67  =
 55136    78  1118    43    78  1337     0     111  that.position
 55137    78  1118    56    78  1337     0      59  (
 55138    78  1118    57    78  1337     0      60  )
 55139    78  1118    58    78  1337     0     102  ;
 55140    78  1118    60    78  1337     0     111  i
 55141    78  1118    62    78  1337     0      93  <
 55142    78  1118    64    78  1337     0     111  n
 55143    78  1118    65    78  1337     0     102  ;
 55144    78  1118    67    78  1337     0     111  i
 55145    78  1118    68    78  1337     0      76  ++
 55146    78  1118    70    78  1337     0      66  ,
 55147    78  1118    72    78  1337     0     111  j
 55148    78  1118    73    78  1337     0      76  ++
 55149    78  1118    75    78  1337     0      60  )
 55150    78  1118    77    78  1337     0      63  {
 55151    78  1119    19    78  1337     1     111  v1
 55152    78  1119    22    78  1337     1      67  =
 55153    78  1119    24    78  1337     1     111  this.get
 55154    78  1119    32    78  1337     1      59  (
 55155    78  1119    33    78  1337     1     111  i
 55156    78  1119    34    78  1337     1      60  )
 55157    78  1119    35    78  1337     1     102  ;
 55158    78  1120    19    78  1337     1     111  v2
 55159    78  1120    22    78  1337     1      67  =
 55160    78  1120    24    78  1337     1     111  that.get
 55161    78  1120    32    78  1337     1      59  (
 55162    78  1120    33    78  1337     1     111  j
 55163    78  1120    34    78  1337     1      60  )
 55164    78  1120    35    78  1337     1     102  ;
 55165    78  1121    13    78  1337     0      31  if
 55166    78  1121    16    78  1337     0      59  (
 55167    78  1121    17    78  1337     0     111  v1
 55168    78  1121    20    78  1337     0      68  ==
 55169    78  1121    23    78  1337     0     111  v2
 55170    78  1121    25    78  1337     0      60  )
 55171    78  1122    17    78  1337     0      46  continue
 55172    78  1122    25    78  1337     0     102  ;
 55173    78  1123    13    78  1337     0      31  if
 55174    78  1123    16    78  1337     0      59  (
 55175    78  1123    17    78  1337     0      59  (
 55176    78  1123    18    78  1337     0     111  v1
 55177    78  1123    21    78  1337     0      71  !=
 55178    78  1123    24    78  1337     0     111  v1
 55179    78  1123    26    78  1337     0      60  )
 55180    78  1123    28    78  1337     0     101  &&
 55181    78  1123    31    78  1337     0      59  (
 55182    78  1123    32    78  1337     0     111  v2
 55183    78  1123    35    78  1337     0      71  !=
 55184    78  1123    38    78  1337     0     111  v2
 55185    78  1123    40    78  1337     0      60  )
 55186    78  1123    41    78  1337     0      60  )
 55187    78  1124    17    78  1337     0      46  continue
 55188    78  1124    25    78  1337     0     102  ;
 55189    78  1125    13    78  1337     0      31  if
 55190    78  1125    16    78  1337     0      59  (
 55191    78  1125    17    78  1337     0     111  v1
 55192    78  1125    20    78  1337     0      93  <
 55193    78  1125    22    78  1337     0     111  v2
 55194    78  1125    24    78  1337     0      60  )
 55195    78  1126    17    78  1337     0      19  return
 55196    78  1126    24    78  1337     0      77  -
 55197    78  1126    25    78  1337     0     112  1
 55198    78  1126    26    78  1337     0     102  ;
 55199    78  1127    13    78  1337     0      19  return
 55200    78  1127    20    78  1337     0      74  +
 55201    78  1127    21    78  1337     0     112  1
 55202    78  1127    22    78  1337     0     102  ;
 55203    78  1128     9    78  1337     0      64  }
 55204    78  1129     9    78  1337     0      19  return
 55205    78  1129    16    78  1337     0     111  this.remaining
 55206    78  1129    30    78  1337     0      59  (
 55207    78  1129    31    78  1337     0      60  )
 55208    78  1129    33    78  1337     0      77  -
 55209    78  1129    35    78  1337     0     111  that.remaining
 55210    78  1129    49    78  1337     0      59  (
 55211    78  1129    50    78  1337     0      60  )
 55212    78  1129    51    78  1337     0     102  ;
 55213    78  1130     5    78  1337     0      64  }
 55214    78  1130     5    78  1337     0    3110  ENDMETHOD
 55215    78  1345    21    78    -1     0     111  ByteOrder
 55216    78  1345    31    78    -1     0     111  order
 55217    78  1345    36    78    -1     0      59  (
 55218    78  1345    37    78    -1     0      60  )
 55219    78  1345    38    78    -1     0     102  ;
 55220    78  1399     1    78    -1     0      64  }
 55221    78  1399     1    78    -1     1    3111  ENDCLASS
 55222    78  1399     1    -1    -1     1    3112  ENDFILE C:\Users\RA\javasrc\java\nio\ShortBuffer.java
 55223    79     1     1    -1    -1     1    3113  STARTFILE C:\Users\RA\javasrc\java\nio\StringCharBuffer.java
 55224    79    26     9    -1    -1     0     111  java.nio
 55225    79    26    17    -1    -1     0     102  ;
 55226    79    31     1    79    -1     0    3114  STARTCLASS
 55227    79    31     1    79    -1     0      24  class
 55228    79    31     7    79    -1     0     111  StringCharBuffer
 55229    79    32     5    79    -1     0      38  extends
 55230    79    32    13    79    -1     0     111  CharBuffer
 55231    79    33     1    79    -1     0      63  {
 55232    79    34     5    79    -1     0     111  CharSequence
 55233    79    34    18    79    -1     0     111  str
 55234    79    34    21    79    -1     0     102  ;
 55235    79    34    21    79  1338     0    3115  STARTMETHOD
 55236    79    36     5    79  1338     0     111  StringCharBuffer
 55237    79    36    21    79  1338     0      59  (
 55238    79    36    22    79  1338     0     111  CharSequence
 55239    79    36    35    79  1338     0     111  s
 55240    79    36    36    79  1338     0      66  ,
 55241    79    36    38    79  1338     0      36  int
 55242    79    36    42    79  1338     0     111  start
 55243    79    36    47    79  1338     0      66  ,
 55244    79    36    49    79  1338     0      36  int
 55245    79    36    53    79  1338     0     111  end
 55246    79    36    56    79  1338     0      60  )
 55247    79    36    58    79  1338     0      63  {
 55248    79    37     9    79  1338     0      27  super
 55249    79    37    14    79  1338     0      59  (
 55250    79    37    15    79  1338     0      77  -
 55251    79    37    16    79  1338     0     112  1
 55252    79    37    17    79  1338     0      66  ,
 55253    79    37    19    79  1338     0     111  start
 55254    79    37    24    79  1338     0      66  ,
 55255    79    37    26    79  1338     0     111  end
 55256    79    37    29    79  1338     0      66  ,
 55257    79    37    31    79  1338     0     111  s.length
 55258    79    37    39    79  1338     0      59  (
 55259    79    37    40    79  1338     0      60  )
 55260    79    37    41    79  1338     0      60  )
 55261    79    37    42    79  1338     0     102  ;
 55262    79    38     9    79  1338     0      36  int
 55263    79    38    13    79  1338     0     111  n
 55264    79    38    15    79  1338     0      67  =
 55265    79    38    17    79  1338     0     111  s.length
 55266    79    38    25    79  1338     0      59  (
 55267    79    38    26    79  1338     0      60  )
 55268    79    38    27    79  1338     0     102  ;
 55269    79    39     9    79  1338     0      31  if
 55270    79    39    12    79  1338     0      59  (
 55271    79    39    13    79  1338     0      59  (
 55272    79    39    14    79  1338     0     111  start
 55273    79    39    20    79  1338     0      93  <
 55274    79    39    22    79  1338     0     112  0
 55275    79    39    23    79  1338     0      60  )
 55276    79    39    25    79  1338     0      98  ||
 55277    79    39    28    79  1338     0      59  (
 55278    79    39    29    79  1338     0     111  start
 55279    79    39    35    79  1338     0      89  >
 55280    79    39    37    79  1338     0     111  n
 55281    79    39    38    79  1338     0      60  )
 55282    79    39    40    79  1338     0      98  ||
 55283    79    39    43    79  1338     0      59  (
 55284    79    39    44    79  1338     0     111  end
 55285    79    39    48    79  1338     0      93  <
 55286    79    39    50    79  1338     0     111  start
 55287    79    39    55    79  1338     0      60  )
 55288    79    39    57    79  1338     0      98  ||
 55289    79    39    60    79  1338     0      59  (
 55290    79    39    61    79  1338     0     111  end
 55291    79    39    65    79  1338     0      89  >
 55292    79    39    67    79  1338     0     111  n
 55293    79    39    68    79  1338     0      60  )
 55294    79    39    69    79  1338     0      60  )
 55295    79    40    13    79  1338     0      20  throw
 55296    79    40    23    79  1338     0     111  IndexOutOfBoundsException
 55297    79    40    48    79  1338     0      59  (
 55298    79    40    49    79  1338     0      60  )
 55299    79    40    50    79  1338     0     102  ;
 55300    79    41     9    79  1338     0     111  str
 55301    79    41    13    79  1338     0      67  =
 55302    79    41    15    79  1338     0     111  s
 55303    79    41    16    79  1338     0     102  ;
 55304    79    42     5    79  1338     0      64  }
 55305    79    42     5    79  1338     0    3116  ENDMETHOD
 55306    79    42     5    79  1339     0    3117  STARTMETHOD
 55307    79    44    12    79  1339     0     111  CharBuffer
 55308    79    44    23    79  1339     0     111  slice
 55309    79    44    28    79  1339     0      59  (
 55310    79    44    29    79  1339     0      60  )
 55311    79    44    31    79  1339     0      63  {
 55312    79    45     9    79  1339     0      19  return
 55313    79    45    20    79  1339     0     111  StringCharBuffer
 55314    79    45    36    79  1339     0      59  (
 55315    79    45    37    79  1339     0     111  str
 55316    79    45    40    79  1339     0      66  ,
 55317    79    46    37    79  1339     0      77  -
 55318    79    46    38    79  1339     0     112  1
 55319    79    46    39    79  1339     0      66  ,
 55320    79    47    37    79  1339     0     112  0
 55321    79    47    38    79  1339     0      66  ,
 55322    79    48    37    79  1339     1     111  this.remaining
 55323    79    48    51    79  1339     1      59  (
 55324    79    48    52    79  1339     1      60  )
 55325    79    48    53    79  1339     1      66  ,
 55326    79    49    37    79  1339     1     111  this.remaining
 55327    79    49    51    79  1339     1      59  (
 55328    79    49    52    79  1339     1      60  )
 55329    79    49    53    79  1339     1      66  ,
 55330    79    50    37    79  1339     0     111  this.position
 55331    79    50    50    79  1339     0      59  (
 55332    79    50    51    79  1339     0      60  )
 55333    79    50    52    79  1339     0      60  )
 55334    79    50    53    79  1339     0     102  ;
 55335    79    51     5    79  1339     0      64  }
 55336    79    51     5    79  1339     0    3118  ENDMETHOD
 55337    79    51     5    79  1340     0    3119  STARTMETHOD
 55338    79    53     5    79  1340     0      41  private
 55339    79    53    13    79  1340     0     111  StringCharBuffer
 55340    79    53    29    79  1340     0      59  (
 55341    79    53    30    79  1340     0     111  CharSequence
 55342    79    53    43    79  1340     0     111  s
 55343    79    53    44    79  1340     0      66  ,
 55344    79    54    30    79  1340     1      36  int
 55345    79    54    34    79  1340     1     111  mark
 55346    79    54    38    79  1340     1      66  ,
 55347    79    55    30    79  1340     1      36  int
 55348    79    55    34    79  1340     1     111  pos
 55349    79    55    37    79  1340     1      66  ,
 55350    79    56    30    79  1340     1      36  int
 55351    79    56    34    79  1340     1     111  limit
 55352    79    56    39    79  1340     1      66  ,
 55353    79    57    30    79  1340     1      36  int
 55354    79    57    34    79  1340     1     111  cap
 55355    79    57    37    79  1340     1      66  ,
 55356    79    58    30    79  1340     0      36  int
 55357    79    58    34    79  1340     0     111  offset
 55358    79    58    40    79  1340     0      60  )
 55359    79    58    42    79  1340     0      63  {
 55360    79    59     9    79  1340     0      27  super
 55361    79    59    14    79  1340     0      59  (
 55362    79    59    15    79  1340     0     111  mark
 55363    79    59    19    79  1340     0      66  ,
 55364    79    59    21    79  1340     0     111  pos
 55365    79    59    24    79  1340     0      66  ,
 55366    79    59    26    79  1340     0     111  limit
 55367    79    59    31    79  1340     0      66  ,
 55368    79    59    33    79  1340     0     111  cap
 55369    79    59    36    79  1340     0      66  ,
 55370    79    59    38    79  1340     0      21  null
 55371    79    59    42    79  1340     0      66  ,
 55372    79    59    44    79  1340     0     111  offset
 55373    79    59    50    79  1340     0      60  )
 55374    79    59    51    79  1340     0     102  ;
 55375    79    60     9    79  1340     0     111  str
 55376    79    60    13    79  1340     0      67  =
 55377    79    60    15    79  1340     0     111  s
 55378    79    60    16    79  1340     0     102  ;
 55379    79    61     5    79  1340     0      64  }
 55380    79    61     5    79  1340     0    3120  ENDMETHOD
 55381    79    61     5    79  1341     0    3121  STARTMETHOD
 55382    79    63     5    79  1341     0      41  private
 55383    79    63    13    79  1341     0     111  StringCharBuffer
 55384    79    63    29    79  1341     0      59  (
 55385    79    63    30    79  1341     0     111  CharSequence
 55386    79    63    43    79  1341     0     111  s
 55387    79    63    44    79  1341     0      66  ,
 55388    79    63    46    79  1341     0      36  int
 55389    79    63    50    79  1341     0     111  mark
 55390    79    63    54    79  1341     0      66  ,
 55391    79    64    30    79  1341     0      36  int
 55392    79    64    34    79  1341     0     111  pos
 55393    79    64    37    79  1341     0      66  ,
 55394    79    64    39    79  1341     0      36  int
 55395    79    64    43    79  1341     0     111  limit
 55396    79    64    48    79  1341     0      66  ,
 55397    79    64    50    79  1341     0      36  int
 55398    79    64    54    79  1341     0     111  cap
 55399    79    64    57    79  1341     0      60  )
 55400    79    65     5    79  1341     0      63  {
 55401    79    66     9    79  1341     0      27  super
 55402    79    66    14    79  1341     0      59  (
 55403    79    66    15    79  1341     0     111  mark
 55404    79    66    19    79  1341     0      66  ,
 55405    79    66    21    79  1341     0     111  pos
 55406    79    66    24    79  1341     0      66  ,
 55407    79    66    26    79  1341     0     111  limit
 55408    79    66    31    79  1341     0      66  ,
 55409    79    66    33    79  1341     0     111  cap
 55410    79    66    36    79  1341     0      60  )
 55411    79    66    37    79  1341     0     102  ;
 55412    79    67     9    79  1341     0     111  str
 55413    79    67    13    79  1341     0      67  =
 55414    79    67    15    79  1341     0     111  s
 55415    79    67    16    79  1341     0     102  ;
 55416    79    68     5    79  1341     0      64  }
 55417    79    68     5    79  1341     0    3122  ENDMETHOD
 55418    79    68     5    79  1342     0    3123  STARTMETHOD
 55419    79    70    12    79  1342     0     111  CharBuffer
 55420    79    70    23    79  1342     0     111  duplicate
 55421    79    70    32    79  1342     0      59  (
 55422    79    70    33    79  1342     0      60  )
 55423    79    70    35    79  1342     0      63  {
 55424    79    71     9    79  1342     0      19  return
 55425    79    71    20    79  1342     0     111  StringCharBuffer
 55426    79    71    36    79  1342     0      59  (
 55427    79    71    37    79  1342     0     111  str
 55428    79    71    40    79  1342     0      66  ,
 55429    79    71    42    79  1342     0     111  markValue
 55430    79    71    51    79  1342     0      59  (
 55431    79    71    52    79  1342     0      60  )
 55432    79    71    53    79  1342     0      66  ,
 55433    79    72    37    79  1342     0     111  position
 55434    79    72    45    79  1342     0      59  (
 55435    79    72    46    79  1342     0      60  )
 55436    79    72    47    79  1342     0      66  ,
 55437    79    72    49    79  1342     0     111  limit
 55438    79    72    54    79  1342     0      59  (
 55439    79    72    55    79  1342     0      60  )
 55440    79    72    56    79  1342     0      66  ,
 55441    79    72    58    79  1342     0     111  capacity
 55442    79    72    66    79  1342     0      59  (
 55443    79    72    67    79  1342     0      60  )
 55444    79    72    68    79  1342     0      60  )
 55445    79    72    69    79  1342     0     102  ;
 55446    79    73     5    79  1342     0      64  }
 55447    79    73     5    79  1342     0    3124  ENDMETHOD
 55448    79    73     5    79  1343     0    3125  STARTMETHOD
 55449    79    75    12    79  1343     0     111  CharBuffer
 55450    79    75    23    79  1343     0     111  asReadOnlyBuffer
 55451    79    75    39    79  1343     0      59  (
 55452    79    75    40    79  1343     0      60  )
 55453    79    75    42    79  1343     0      63  {
 55454    79    76     9    79  1343     0      19  return
 55455    79    76    16    79  1343     0     111  duplicate
 55456    79    76    25    79  1343     0      59  (
 55457    79    76    26    79  1343     0      60  )
 55458    79    76    27    79  1343     0     102  ;
 55459    79    77     5    79  1343     0      64  }
 55460    79    77     5    79  1343     0    3126  ENDMETHOD
 55461    79    77     5    79  1344     0    3127  STARTMETHOD
 55462    79    79    18    79  1344     0      40  char
 55463    79    79    23    79  1344     0     111  get
 55464    79    79    26    79  1344     0      59  (
 55465    79    79    27    79  1344     0      60  )
 55466    79    79    29    79  1344     0      63  {
 55467    79    80     9    79  1344     0      19  return
 55468    79    80    16    79  1344     0     111  str.charAt
 55469    79    80    26    79  1344     0      59  (
 55470    79    80    27    79  1344     0     111  nextGetIndex
 55471    79    80    39    79  1344     0      59  (
 55472    79    80    40    79  1344     0      60  )
 55473    79    80    41    79  1344     0      60  )
 55474    79    80    42    79  1344     0     102  ;
 55475    79    81     5    79  1344     0      64  }
 55476    79    81     5    79  1344     0    3128  ENDMETHOD
 55477    79    81     5    79  1345     0    3129  STARTMETHOD
 55478    79    83    18    79  1345     0      40  char
 55479    79    83    23    79  1345     0     111  get
 55480    79    83    26    79  1345     0      59  (
 55481    79    83    27    79  1345     0      36  int
 55482    79    83    31    79  1345     0     111  index
 55483    79    83    36    79  1345     0      60  )
 55484    79    83    38    79  1345     0      63  {
 55485    79    84     9    79  1345     0      19  return
 55486    79    84    16    79  1345     0     111  str.charAt
 55487    79    84    26    79  1345     0      59  (
 55488    79    84    27    79  1345     0     111  checkIndex
 55489    79    84    37    79  1345     0      59  (
 55490    79    84    38    79  1345     0     111  index
 55491    79    84    43    79  1345     0      60  )
 55492    79    84    44    79  1345     0      60  )
 55493    79    84    45    79  1345     0     102  ;
 55494    79    85     5    79  1345     0      64  }
 55495    79    85     5    79  1345     0    3130  ENDMETHOD
 55496    79    85     5    79  1346     0    3131  STARTMETHOD
 55497    79    89    18    79  1346     0     111  CharBuffer
 55498    79    89    29    79  1346     0     111  put
 55499    79    89    32    79  1346     0      59  (
 55500    79    89    33    79  1346     0      40  char
 55501    79    89    38    79  1346     0     111  c
 55502    79    89    39    79  1346     0      60  )
 55503    79    89    41    79  1346     0      63  {
 55504    79    90     9    79  1346     0      20  throw
 55505    79    90    19    79  1346     0     111  ReadOnlyBufferException
 55506    79    90    42    79  1346     0      59  (
 55507    79    90    43    79  1346     0      60  )
 55508    79    90    44    79  1346     0     102  ;
 55509    79    91     5    79  1346     0      64  }
 55510    79    91     5    79  1346     0    3132  ENDMETHOD
 55511    79    91     5    79  1347     0    3133  STARTMETHOD
 55512    79    93    18    79  1347     0     111  CharBuffer
 55513    79    93    29    79  1347     0     111  put
 55514    79    93    32    79  1347     0      59  (
 55515    79    93    33    79  1347     0      36  int
 55516    79    93    37    79  1347     0     111  index
 55517    79    93    42    79  1347     0      66  ,
 55518    79    93    44    79  1347     0      40  char
 55519    79    93    49    79  1347     0     111  c
 55520    79    93    50    79  1347     0      60  )
 55521    79    93    52    79  1347     0      63  {
 55522    79    94     9    79  1347     0      20  throw
 55523    79    94    19    79  1347     0     111  ReadOnlyBufferException
 55524    79    94    42    79  1347     0      59  (
 55525    79    94    43    79  1347     0      60  )
 55526    79    94    44    79  1347     0     102  ;
 55527    79    95     5    79  1347     0      64  }
 55528    79    95     5    79  1347     0    3134  ENDMETHOD
 55529    79    95     5    79  1348     0    3135  STARTMETHOD
 55530    79    97    18    79  1348     0     111  CharBuffer
 55531    79    97    29    79  1348     0     111  compact
 55532    79    97    36    79  1348     0      59  (
 55533    79    97    37    79  1348     0      60  )
 55534    79    97    39    79  1348     0      63  {
 55535    79    98     9    79  1348     0      20  throw
 55536    79    98    19    79  1348     0     111  ReadOnlyBufferException
 55537    79    98    42    79  1348     0      59  (
 55538    79    98    43    79  1348     0      60  )
 55539    79    98    44    79  1348     0     102  ;
 55540    79    99     5    79  1348     0      64  }
 55541    79    99     5    79  1348     0    3136  ENDMETHOD
 55542    79    99     5    79  1349     0    3137  STARTMETHOD
 55543    79   101    18    79  1349     0      39  boolean
 55544    79   101    26    79  1349     0     111  isReadOnly
 55545    79   101    36    79  1349     0      59  (
 55546    79   101    37    79  1349     0      60  )
 55547    79   101    39    79  1349     0      63  {
 55548    79   102     9    79  1349     0      19  return
 55549    79   102    16    79  1349     0      52  true
 55550    79   102    20    79  1349     0     102  ;
 55551    79   103     5    79  1349     0      64  }
 55552    79   103     5    79  1349     0    3138  ENDMETHOD
 55553    79   103     5    79  1350     0    3139  STARTMETHOD
 55554    79   105    11    79  1350     0     111  String
 55555    79   105    18    79  1350     0     111  toString
 55556    79   105    26    79  1350     0      59  (
 55557    79   105    27    79  1350     0      36  int
 55558    79   105    31    79  1350     0     111  start
 55559    79   105    36    79  1350     0      66  ,
 55560    79   105    38    79  1350     0      36  int
 55561    79   105    42    79  1350     0     111  end
 55562    79   105    45    79  1350     0      60  )
 55563    79   105    47    79  1350     0      63  {
 55564    79   106     9    79  1350     0      19  return
 55565    79   106    16    79  1350     0     111  str.toString
 55566    79   106    28    79  1350     0      59  (
 55567    79   106    29    79  1350     0      60  )
 55568    79   106    30    79  1350     0      54  .
 55569    79   106    31    79  1350     0     111  substring
 55570    79   106    40    79  1350     0      59  (
 55571    79   106    41    79  1350     0     111  start
 55572    79   106    46    79  1350     0      66  ,
 55573    79   106    48    79  1350     0     111  end
 55574    79   106    51    79  1350     0      60  )
 55575    79   106    52    79  1350     0     102  ;
 55576    79   107     5    79  1350     0      64  }
 55577    79   107     5    79  1350     0    3140  ENDMETHOD
 55578    79   107     5    79  1351     0    3141  STARTMETHOD
 55579    79   109    18    79  1351     0     111  CharSequence
 55580    79   109    31    79  1351     0     111  subSequence
 55581    79   109    42    79  1351     0      59  (
 55582    79   109    43    79  1351     0      36  int
 55583    79   109    47    79  1351     0     111  start
 55584    79   109    52    79  1351     0      66  ,
 55585    79   109    54    79  1351     0      36  int
 55586    79   109    58    79  1351     0     111  end
 55587    79   109    61    79  1351     0      60  )
 55588    79   109    63    79  1351     0      63  {
 55589    79   110     9    79  1351     0      35  try
 55590    79   110    13    79  1351     0      63  {
 55591    79   111    13    79  1351     0      36  int
 55592    79   111    17    79  1351     0     111  pos
 55593    79   111    21    79  1351     0      67  =
 55594    79   111    23    79  1351     0     111  position
 55595    79   111    31    79  1351     0      59  (
 55596    79   111    32    79  1351     0      60  )
 55597    79   111    33    79  1351     0     102  ;
 55598    79   112    13    79  1351     0      19  return
 55599    79   112    24    79  1351     0     111  StringCharBuffer
 55600    79   112    40    79  1351     0      59  (
 55601    79   112    41    79  1351     0     111  str
 55602    79   112    44    79  1351     0      66  ,
 55603    79   113    41    79  1351     0     111  pos
 55604    79   113    45    79  1351     0      74  +
 55605    79   113    47    79  1351     0     111  checkIndex
 55606    79   113    57    79  1351     0      59  (
 55607    79   113    58    79  1351     0     111  start
 55608    79   113    63    79  1351     0      66  ,
 55609    79   113    65    79  1351     0     111  pos
 55610    79   113    68    79  1351     0      60  )
 55611    79   113    69    79  1351     0      66  ,
 55612    79   114    41    79  1351     0     111  pos
 55613    79   114    45    79  1351     0      74  +
 55614    79   114    47    79  1351     0     111  checkIndex
 55615    79   114    57    79  1351     0      59  (
 55616    79   114    58    79  1351     0     111  end
 55617    79   114    61    79  1351     0      66  ,
 55618    79   114    63    79  1351     0     111  pos
 55619    79   114    66    79  1351     0      60  )
 55620    79   114    67    79  1351     0      60  )
 55621    79   114    68    79  1351     0     102  ;
 55622    79   115     9    79  1351     0      64  }
 55623    79   115    11    79  1351     0      34  catch
 55624    79   115    17    79  1351     0      59  (
 55625    79   115    18    79  1351     0     111  IllegalArgumentException
 55626    79   115    43    79  1351     0     111  x
 55627    79   115    44    79  1351     0      60  )
 55628    79   115    46    79  1351     0      63  {
 55629    79   116    13    79  1351     0      20  throw
 55630    79   116    23    79  1351     0     111  IndexOutOfBoundsException
 55631    79   116    48    79  1351     0      59  (
 55632    79   116    49    79  1351     0      60  )
 55633    79   116    50    79  1351     0     102  ;
 55634    79   117     9    79  1351     0      64  }
 55635    79   118     5    79  1351     0      64  }
 55636    79   118     5    79  1351     0    3142  ENDMETHOD
 55637    79   118     5    79  1352     0    3143  STARTMETHOD
 55638    79   120    12    79  1352     0      39  boolean
 55639    79   120    20    79  1352     0     111  isDirect
 55640    79   120    28    79  1352     0      59  (
 55641    79   120    29    79  1352     0      60  )
 55642    79   120    31    79  1352     0      63  {
 55643    79   121     9    79  1352     0      19  return
 55644    79   121    16    79  1352     0      43  false
 55645    79   121    21    79  1352     0     102  ;
 55646    79   122     5    79  1352     0      64  }
 55647    79   122     5    79  1352     0    3144  ENDMETHOD
 55648    79   122     5    79  1353     0    3145  STARTMETHOD
 55649    79   124    12    79  1353     0     111  ByteOrder
 55650    79   124    22    79  1353     0     111  order
 55651    79   124    27    79  1353     0      59  (
 55652    79   124    28    79  1353     0      60  )
 55653    79   124    30    79  1353     0      63  {
 55654    79   125     9    79  1353     0      19  return
 55655    79   125    16    79  1353     0     111  ByteOrder.nativeOrder
 55656    79   125    37    79  1353     0      59  (
 55657    79   125    38    79  1353     0      60  )
 55658    79   125    39    79  1353     0     102  ;
 55659    79   126     5    79  1353     0      64  }
 55660    79   126     5    79  1353     0    3146  ENDMETHOD
 55661    79   128     1    79    -1     0      64  }
 55662    79   128     1    79    -1     0    3147  ENDCLASS
 55663    79   128     1    -1    -1     0    3148  ENDFILE C:\Users\RA\javasrc\java\nio\StringCharBuffer.java
